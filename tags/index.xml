<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/tags/index.xml</link>
    <description>Recent content on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <atom:link href="/tags/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>どこで使う？LEDで光るバイリンガルな扇風機を買ってみた</title>
      <link>https://dotstud.io/blog/led-multilingual-confessing-fan/</link>
      <pubDate>Wed, 26 Oct 2016 18:30:38 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/led-multilingual-confessing-fan/</guid>
      
      <description>&lt;p&gt;こんにちは、dotstudioのうらら（&lt;a href=&#34;http://twitter.com&#34;&gt;@uraranbon&lt;/a&gt;）です。&lt;/p&gt;

&lt;p&gt;現在私は「中国の秋葉原」と呼ばれている深センに来ています！　日本の秋葉原と同じく、ザクザクと掘り出しものが出てくるとても面白い街です。&lt;/p&gt;

&lt;p&gt;そんな深センで見つけた掘り出しもののひとつを紹介します！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;USBで動く扇風機です。10元（150円くらい）でした。&lt;br /&gt;
これがなぜ掘り出しものか？　見たらわかります。&lt;/p&gt;

&lt;p&gt;つけてみましょう！&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/02.png&#34; alt=&#34;&#34; /&gt;
&lt;strong&gt;パッ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;パッ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;パッ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;パッ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;……そう、世界各国の「&lt;strong&gt;好きです&lt;/strong&gt;」がLEDで光るんです。全部で4ヶ国語に対応していて、日本語も表示されました。ちなみに、文字は回転します。なんともシュール。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;……どこで使えばいいんだろう、これ。&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width=&#34;715&#34; height=&#34;402&#34; src=&#34;https://www.youtube.com/embed/gi0ydQxnduM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;扇風機なのでそよ風のような微風が頬を撫でてくれます。電源さえあれば、世界各国の「好きです」で半永久的に告白され続けちゃう〜〜〜！　……。&lt;/p&gt;

&lt;p&gt;プログラマブルらしいのですが、実際にハックできるかは謎です。microUSBのポートはついていたので、これから挑戦してみようと思います。&lt;/p&gt;

&lt;p&gt;どこで使えばいいかわかる方は教えて下さい。では！&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>まさかのGoPro？4Kのカメラを265元（4,000円程度）で買えた</title>
      <link>https://dotstud.io/blog/4k-camera-gopro-fake/</link>
      <pubDate>Mon, 24 Oct 2016 08:00:25 +0800</pubDate>
      
      <guid>https://dotstud.io/blog/4k-camera-gopro-fake/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioエディターのうらら（@uraranbon）です。
現在、「中国の秋葉原」と呼ばれる深センに滞在しています。&lt;/p&gt;

&lt;p&gt;「壁を走るラジコン」や「LEDで文字が浮かび上がる扇風機」など日本では見かけない掘り出し物がたくさんあるのですが、こんなカメラも見つけました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4K！　手のひらサイズのカメラ！　Wi-Fi対応！　
店員さんは「Go Pro！　Go Pro！」と連呼していました。&lt;/p&gt;

&lt;p&gt;しかも、もともとは290元だったのをカメラに必要な &lt;strong&gt;SDカード込みで265元（4,000円程度）&lt;/strong&gt; に値切ってゲット。すご～い！&lt;/p&gt;

&lt;p&gt;でも、&lt;strong&gt;4Kなのにこの価格はおかしいだろ。&lt;/strong&gt; ということで、早速撮影してみたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;4k-wi-fi-action-cameraのスペック&#34;&gt;4K Wi-Fi ACTION CAMERAのスペック&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;レンズ　　　　　　：16メガピクセルの広角レンズ 
Imageフォーマット：JPEG 
連写　　　　　　　：1秒に3枚 
ホワイトバランス　：オート/晴れ/曇り/白熱灯 
バッテリー　　　　：充電式（3.7V900mAh li-ion） 
データ保存　　　　：microSD 
撮影モード　　　　：ビデオ/カメラ/タイムラプス/スロー 
防水　　　　　　　：付属の防水ケースをつければ水深30mまで対応 
Wi-Fi　　　　　　  ：対応（専用のアプリをDLすればWi-Fi経由で写真を得られる） 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この安価さと手のひらサイズという小型なものでありながら、タイムラプスモードやWi-Fiに対応しているなど、かなりスペックが高そうです。これは期待できそう。&lt;/p&gt;

&lt;p&gt;さっそく撮ってみましょう！&lt;/p&gt;

&lt;h2 id=&#34;撮ってみた&#34;&gt;撮ってみた&lt;/h2&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あれ……？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画質が……？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;……画質が悪いぞ？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;！？！？？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;！！！！！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あああ！！！！！！！！！！！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あああああああああああああ！！！！！！！！！！！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらは起動すると最初に出てくる画像。
めっちゃきれい！　シャッタスピード速そう！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あっれっっれ～～～～～～～～～！！！！！！！！？！？
布団をまくる速度に！！！！　負けた！！！！！！！！！！&lt;/p&gt;

&lt;h2 id=&#34;結論-サイズは4kだが画質は&#34;&gt;結論：サイズは4Kだが画質は……&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ということで伝わったかと思いますが、「画質の悪いデータを大きくして4Kサイズにするカメラ」でした。たしかに4Kで、間違ってはいない！　いないけど！　なんか違う！　&lt;/p&gt;

&lt;p&gt;ただ、このコンパクトさのおかげで手軽に撮影ができてめっちゃ楽しいです。このカメラでいろんな深センの情景を撮ってこようと思います。&lt;/p&gt;

&lt;h3 id=&#34;おまけ-付属品がたくさんついてきた&#34;&gt;おまけ：付属品がたくさんついてきた&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;余談ですが、このカメラには山盛りの付属品が付いてきます。てんこ盛り。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;てんてこ盛り。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;カスタマイズも自由自在。
ここの充実さは群を抜いてピカイチだと思います。使うかはわかりません。&lt;/p&gt;

&lt;p&gt;では次回もお楽しみに！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>すごいじゃん深セン。怪しさMAXの壁を登るラジコン？WALL CLIMBERを試してみた</title>
      <link>https://dotstud.io/blog/wall-climbing-toy-car/</link>
      <pubDate>Fri, 21 Oct 2016 15:05:13 +0800</pubDate>
      
      <guid>https://dotstud.io/blog/wall-climbing-toy-car/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioエディターのうらら（@uraranbon）です。
普段は日本を拠点にしていますが、今は中国の深センにいます。&lt;/p&gt;

&lt;p&gt;中国で2016/10/22-23にておこなわれるものづくりイベント「&lt;a href=&#34;www.makerfaireshenzhen.com&#34;&gt;Maker Faire Shenzhen 2016&lt;/a&gt;」に出るためです。&lt;/p&gt;

&lt;p&gt;さて、そんな深センには「中国の秋葉原」と呼ばれる電気街があり、さっそく昨日遊びに行ってきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらが電気街の一角です。1日では回れないほどの小売店やデパートなどが集まっています。
そんな電気街で見つけたのがこちら。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;WALL CLIMBER”という名のラジコンです。直訳すると「壁登り」。
もし本当なら、完全に重力を無視してますよね？　&lt;/p&gt;

&lt;p&gt;怪しすぎる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;側面を見てみると「水平にも垂直にも、天井も走れる」と書いています。&lt;/p&gt;

&lt;p&gt;「壁走んの？！　天井も？！」「さすがに釣りじゃないの」「嘘だろ」とdotstudioメンバー全員が半信半疑だったので、さっそく買って試してみました。&lt;/p&gt;

&lt;h2 id=&#34;試してみた&#34;&gt;試してみた&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;操作は付属していたラジコンでおこないます。
地面は綺麗に走りました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;壁は……ラジコンが壁にくっつきました！？
どうやら、掃除機のように風を吸い込んで、壁に吸い付いているようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;壁も上方向に進みます。ただ、登りは若干苦手なようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;天井にもくっつきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;すごい、天井も普通に走る。&lt;/p&gt;

&lt;h2 id=&#34;結論-wall-climberは壁も天井も走った&#34;&gt;結論：WALL CLIMBERは壁も天井も走った&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;疑いの目で見ていた &amp;ldquo;WALL CLIMBER” ですが、期待を裏切るかのように（？！）見事天井を走ってくれました。中国すごい～～～～。&lt;/p&gt;

&lt;p&gt;深センでは他にもさまざまなガジェットを購入したので、記事で紹介する予定です。
次回もお楽しみに！&lt;/p&gt;

&lt;h3 id=&#34;おまけ-買わなかったけれど紹介したい-pxp-3-slim-station&#34;&gt;おまけ：買わなかったけれど紹介したい「PXP 3 Slim station」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面からマリオが飛び出している「PXP 3」というゲームを見つけました。
でもパッケージの右側には「16 Bit」と書かれてる～～～～？！（ソニック付き）&lt;/p&gt;

&lt;p&gt;では！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure WebAppsにGitLab連携でデプロイしてみよう</title>
      <link>https://dotstud.io/blog/azure-webapps-gitlab-connect/</link>
      <pubDate>Tue, 18 Oct 2016 10:00:30 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/azure-webapps-gitlab-connect/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudio代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;最近&lt;a href=&#34;https://azure.microsoft.com/ja-jp/documentation/articles/app-service-web-overview/&#34;&gt;Azure WebApps&lt;/a&gt;を使って開発をしています。dotstudioではGitLabを利用してソースコード管理をしているのでGitLabとWebAppsを連携し自動デプロイをする方法を紹介します。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;https://christianliebel.com/2016/05/auto-deploying-to-azure-app-services-from-gitlab/&#34;&gt;Auto-Deploying to Azure App Services from GitLab&lt;/a&gt;」を参考にしましたが、調べても英語記事しかなかったので日本語記事は初めてだと思います！&lt;/p&gt;

&lt;h2 id=&#34;今回やること&#34;&gt;今回やること&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt;はGitHubやBitbucketのようなGitのホスティングサービスです。
GitHubとBitbucketはWebAppsが公式対応しているため簡単に設定できますが、GitLabは公式対応していないため少しやり方が特殊です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;やりたいことはこの図の通りで、作業者がGitLabにPushしたら自動的にWebAppsにデプロイされる仕組みを作ります。&lt;/p&gt;

&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;以下の内容を事前に済ませておきましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebAppsのアプリケーションを作成しておく&lt;/li&gt;
&lt;li&gt;GitLabでリポジトリを作成しておく&lt;/li&gt;
&lt;li&gt;GitLabに手元のマシンからPushできる状態にしておく&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;設定してみよう&#34;&gt;設定してみよう&lt;/h2&gt;

&lt;h3 id=&#34;1-webappsにgitlabのurlを紐付ける&#34;&gt;1. WebAppsにGitLabのURLを紐付ける&lt;/h3&gt;

&lt;p&gt;WebAppsのデプロイ設定をします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;アプリのデプロイ &amp;gt; デプロイオプション &amp;gt; ソースの選択 &amp;gt; 外部リポジトリ&lt;/strong&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitLabのリポジトリURLを入力しましょう。 https形式とSSH形式のどちらでも大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事に設定が完了すると、メニューの &lt;strong&gt;概要 &amp;gt; 外部リポジトリプロジェクト&lt;/strong&gt;にリポジトリのURLが設定されます。&lt;/p&gt;

&lt;h3 id=&#34;2-webappsのデプロイ用ssh公開鍵を取得する&#34;&gt;2. WebAppsのデプロイ用SSH公開鍵を取得する&lt;/h3&gt;

&lt;p&gt;WebAppsに外部からアクセスするためにWebAppsのSSH公開鍵を取得します。&lt;/p&gt;

&lt;p&gt;通常WebAppsの公開URLにアクセスする場合&lt;code&gt;http://アプリケーション名.azurewebsites.net&lt;/code&gt;というドメインにアクセスしますが、ここでは通常のURLに&lt;code&gt;.scm&lt;/code&gt;が追加されたドメインにアクセスします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://アプリケーション名.scm.azurewebsites.net/api/sshkey?ensurePublicKey=1&lt;/code&gt; にアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このssh-rsaから始まるダブルクォートで囲まれている部分が公開鍵になります。&lt;/p&gt;

&lt;p&gt;ちなみに、アプリケーション名がn0bisukeの場合は&lt;code&gt;https://n0bisuke.scm.azurewebsites.net/api/sshkey?ensurePublicKey=1&lt;/code&gt;になります。&lt;/p&gt;

&lt;h3 id=&#34;3-gitlabの対象リポジトリにデプロイ用ssh公開鍵を設定する&#34;&gt;3. GitLabの対象リポジトリにデプロイ用SSH公開鍵を設定する&lt;/h3&gt;

&lt;p&gt;先ほどのSSH公開鍵をGitLabに設定します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://gitlab.com/ユーザー名/リポジトリ名/deploy_keys&lt;/code&gt;にアクセスしましょう。
リポジトリの &lt;strong&gt;設定(歯車マーク) &amp;gt; Deploy Keys&lt;/strong&gt;からもアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Titleの項目に任意の名前を入力し、Keyの項目に先ほどのSSH公開鍵を貼りましょう。&lt;/p&gt;

&lt;p&gt;これでGitLabのリポジトリに鍵を紐付けられ、GitLabからWebAppsにデプロイすることが出来るようになります。&lt;/p&gt;

&lt;h3 id=&#34;4-webappsのwebhookアドレスをgitlabに紐付ける&#34;&gt;4. WebAppsのWebhookアドレスをGitLabに紐付ける&lt;/h3&gt;

&lt;p&gt;ここまでの作業でWebAppsとGitLabの連携は出来ているのですが、今回は作業者がGitLabにPushしたらデプロイされる仕組みにしたいため、Pushを検知するための設定をします。&lt;/p&gt;

&lt;p&gt;WebAppsのメニューから &lt;strong&gt;設定 &amp;gt; プロパティ &amp;gt; デプロイ開始のURL&lt;/strong&gt;の項目にあるURLをコピーしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://$アプリケーション名:パスワード@アプリケーション名.scm.azurewebsites.net/deploy&lt;/code&gt;というURLが設定されているはずです。&lt;/p&gt;

&lt;p&gt;GitLab側に移動し、 &lt;code&gt;https://gitlab.com/ユーザー名/リポジトリ名/hooks&lt;/code&gt;にアクセスしましょう。
リポジトリの &lt;strong&gt;設定(歯車マーク) &amp;gt; Webhooks&lt;/strong&gt;からもアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;URLの項目に先ほどのWebAppsのWebHookアドレス(&lt;code&gt;https://$アプリケーション名:パスワード@アプリケーション名.scm.azurewebsites.net/deploy&lt;/code&gt;)を貼り付けます。 他の項目は特に変更せずに&lt;code&gt;Add Webhook&lt;/code&gt;で追加します。&lt;/p&gt;

&lt;p&gt;これで設定は完了です。&lt;/p&gt;

&lt;h3 id=&#34;5-試してみる&#34;&gt;5. 試してみる&lt;/h3&gt;

&lt;p&gt;Gitで適当にPushしてみましょう。するとWebAppsのデプロイオプションの項目で同期が確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://アプリケーション名.azurewebsites.net&lt;/code&gt;にアクセスしてみるとソースコードが反映されていることが分かると思います。&lt;/p&gt;

&lt;p&gt;お疲れ様でした！&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;イメージのしやすさから「GitLabからWebAppsにデプロイ」という表現を使いましたが、実際には「WebAppsがGitLab上のソースコードをPullしている」という表現の方が正しいと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitLab側はPushがあったことをWebhookでWebAppsに声を掛けてあげて、WebApps側はGitLabから声が掛かったらPullしにいく、という流れです。&lt;/p&gt;

&lt;p&gt;ちなみに今回はWebhookの設定でかなりハマって、「&lt;a href=&#34;https://github.com/projectkudu/kudu/wiki/Continuous-deployment&#34;&gt;projectkudu/kudu&lt;/a&gt;」や「&lt;a href=&#34;http://stackoverflow.com/questions/31538152/publishing-to-azure-web-apps-from-gitlab-repository-on-trigger&#34;&gt;Publishing to Azure Web Apps from GitLab repository on trigger&lt;/a&gt;」に&lt;code&gt;https://$mysite:BigRandomPassword@mysite.scm.azurewebsites.net/deploy&lt;/code&gt;がWebhookのURLだという記載があるのですが、&lt;code&gt;BigRandomPassword&lt;/code&gt;が謎すぎてかなり詰んでました。 WebApps側で「デプロイ開始のURL」という表現になってるのも分かりにくい気がしますね（苦笑）。&lt;/p&gt;

&lt;p&gt;WebAppsとGitLabの仕様が変わるまではしばらくこの手順が生きるはずですので、参考になれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>本ブログにもページネーション機能が付きました！Hugoでページネーション機能を作ろう</title>
      <link>https://dotstud.io/blog/hugo-howto-create-pagination/</link>
      <pubDate>Wed, 12 Oct 2016 10:00:16 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hugo-howto-create-pagination/</guid>
      
      <description>

&lt;p&gt;こんにちは、 dotstudio代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;このブログはページネーション機能が無かったのですが、そろそろコンテンツ数も増えてきたのでページネーション機能を実装しました。 888888&lt;/p&gt;

&lt;p&gt;実際に作る方法を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;hugoでページネーション機能を作る&#34;&gt;Hugoでページネーション機能を作る&lt;/h2&gt;

&lt;p&gt;今回はblogセクションにページネーションを実装します。&lt;/p&gt;

&lt;p&gt;Hugoのページネーションで調べるとまずは&lt;a href=&#34;https://gohugo.io/extras/pagination/&#34;&gt;ドキュメントページのここ&lt;/a&gt;がヒットします。&lt;/p&gt;

&lt;p&gt;もともとも&lt;code&gt;section/blog.html&lt;/code&gt;は以下のようなコードでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
    {{ range first 12 (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) }}
      {{ .Render &amp;quot;summary&amp;quot;}}
    {{ end }}
    &amp;lt;/div&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ドキュメントページを参照しながら以下のように変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}

    {{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) 12 }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
       {{ range $paginator.Pages }}
            {{ .Render &amp;quot;summary&amp;quot; }}
        {{ end }}
    &amp;lt;/div&amp;gt;
    
    {{ template &amp;quot;_internal/pagination.html&amp;quot; . }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでページネーション機能はとりあえず完成です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;めちゃ簡単ですね！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;確認してみるとページの下の方に何かいる&amp;hellip;&amp;hellip;！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これがページネーションのメニューです。&lt;/p&gt;

&lt;p&gt;勝手に生成されていてびっくりしますが、&lt;code&gt;{{ template &amp;quot;_internal/pagination.html&amp;quot; . }}&lt;/code&gt;の部分でこのメニューが生成されています。&lt;/p&gt;

&lt;p&gt;だけどここから先で割と詰まりました苦笑&lt;/p&gt;

&lt;h2 id=&#34;見た目とメニューの自由度を上げたい&#34;&gt;見た目とメニューの自由度を上げたい&lt;/h2&gt;

&lt;p&gt;このままだとどこでHTMLが生成されているか不明です。&lt;code&gt;_internal/~~~.html&lt;/code&gt;はHugoの組み込みテンプレートになっていて、通常は変更することが出来ません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kakunaga.net/post/160517pagination/&#34;&gt;pagination の見た目&lt;/a&gt;の記事を見ると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class=&amp;ldquo;pagination&amp;rdquo;&lt;/li&gt;
&lt;li&gt;class=&amp;ldquo;active&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が生成されているからCSSを指定すればいいみたいです。ただ、メニュー項目の自由度は無いので自分で定義してみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/blob/master/tpl/template_embedded.go#L116-L142&#34;&gt;Hugoのソース&lt;/a&gt;を覗き見ると対象箇所が分かります。&lt;/p&gt;

&lt;p&gt;ここを元に&lt;code&gt;layouts/partials/paginator.html&lt;/code&gt;を作成します。以下ではコメントも入れておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $pag := $.Paginator }}
{{ if gt $pag.TotalPages 1 }}
    &amp;lt;ul class=&amp;quot;pagination&amp;quot;&amp;gt;
        {{/*最初へ*/}}
        {{ with $pag.First }}
            &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot; aria-label=&amp;quot;First&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;最初へ&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}

        {{/*前ページ*/}}
        &amp;lt;li{{ if not $pag.HasPrev }}class=&amp;quot;disabled&amp;quot;{{ end }}&amp;gt;
            &amp;lt;a href=&amp;quot;{{ if $pag.HasPrev }}{{ $pag.Prev.URL }}{{ end }}&amp;quot; aria-label=&amp;quot;Previous&amp;quot;&amp;gt;
                &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;前へ&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        {{/*番号*/}}
        {{ range $pag.Pagers }}
            &amp;lt;li{{ if eq . $pag }}class=&amp;quot;active&amp;quot;{{ end }}&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot;&amp;gt;{{ .PageNumber }}&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}
        
        {{/*次ページ*/}}
        &amp;lt;li{{ if not $pag.HasNext }}class=&amp;quot;disabled&amp;quot;{{ end }}&amp;gt;
            &amp;lt;a href=&amp;quot;{{ if $pag.HasNext }}{{ $pag.Next.URL }}{{ end }}&amp;quot; aria-label=&amp;quot;Next&amp;quot;&amp;gt;
                &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;次へ&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        {{/*最後へ*/}}
        {{ with $pag.Last }}
            &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot; aria-label=&amp;quot;Last&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;最後へ&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}
    &amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;section/blog.html&lt;/code&gt;を以下に修正します。
&lt;code&gt;_internal&lt;/code&gt;で組み込みテンプレートを呼び出していた行を今作成した&lt;code&gt;paginator.html&lt;/code&gt;を呼び出すように変更です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}

    {{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) 12 }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
       {{ range $paginator.Pages }}
            {{ .Render &amp;quot;summary&amp;quot; }}
        {{ end }}
    &amp;lt;/div&amp;gt;
    
    {{ partial &amp;quot;paginator.html&amp;quot; . }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで完成です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ビルドするとこのような形になりました。&lt;/p&gt;

&lt;p&gt;あとは&lt;a href=&#34;https://dotstud.io/members/chachmaru/&#34;&gt;ちゃちゃまる先生&lt;/a&gt;にCSSをあててもらえば終了です。&lt;/p&gt;

&lt;h2 id=&#34;出来上がったものがこちらです&#34;&gt;出来上がったものがこちらです&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;いい感じですね。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;こちら(&lt;a href=&#34;http://wdkk.co.jp/note/2015/0915-hugo-pagination/&#34;&gt;Hugoでwebサイト構築(9) リストのページネーション(Pagination)&lt;/a&gt;)も参考にさせていただきました。&lt;/p&gt;

&lt;p&gt;なかなか公式ドキュメントも調べづらいので参考になれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>本ブログにもページネーション機能が付きました！Hugoでページネーション機能を作ろう</title>
      <link>https://dotstud.io/blog/hugo-howto-create-pagination/</link>
      <pubDate>Wed, 12 Oct 2016 10:00:16 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hugo-howto-create-pagination/</guid>
      
      <description>

&lt;p&gt;こんにちは、 dotstudio代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;このブログはページネーション機能が無かったのですが、そろそろコンテンツ数も増えてきたのでページネーション機能を実装しました。 888888&lt;/p&gt;

&lt;p&gt;実際に作る方法を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;hugoでページネーション機能を作る&#34;&gt;Hugoでページネーション機能を作る&lt;/h2&gt;

&lt;p&gt;今回はblogセクションにページネーションを実装します。&lt;/p&gt;

&lt;p&gt;Hugoのページネーションで調べるとまずは&lt;a href=&#34;https://gohugo.io/extras/pagination/&#34;&gt;ドキュメントページのここ&lt;/a&gt;がヒットします。&lt;/p&gt;

&lt;p&gt;もともとも&lt;code&gt;section/blog.html&lt;/code&gt;は以下のようなコードでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
    {{ range first 12 (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) }}
      {{ .Render &amp;quot;summary&amp;quot;}}
    {{ end }}
    &amp;lt;/div&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ドキュメントページを参照しながら以下のように変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}

    {{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) 12 }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
       {{ range $paginator.Pages }}
            {{ .Render &amp;quot;summary&amp;quot; }}
        {{ end }}
    &amp;lt;/div&amp;gt;
    
    {{ template &amp;quot;_internal/pagination.html&amp;quot; . }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでページネーション機能はとりあえず完成です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;めちゃ簡単ですね！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;確認してみるとページの下の方に何かいる&amp;hellip;&amp;hellip;！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これがページネーションのメニューです。&lt;/p&gt;

&lt;p&gt;勝手に生成されていてびっくりしますが、&lt;code&gt;{{ template &amp;quot;_internal/pagination.html&amp;quot; . }}&lt;/code&gt;の部分でこのメニューが生成されています。&lt;/p&gt;

&lt;p&gt;だけどここから先で割と詰まりました苦笑&lt;/p&gt;

&lt;h2 id=&#34;見た目とメニューの自由度を上げたい&#34;&gt;見た目とメニューの自由度を上げたい&lt;/h2&gt;

&lt;p&gt;このままだとどこでHTMLが生成されているか不明です。&lt;code&gt;_internal/~~~.html&lt;/code&gt;はHugoの組み込みテンプレートになっていて、通常は変更することが出来ません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kakunaga.net/post/160517pagination/&#34;&gt;pagination の見た目&lt;/a&gt;の記事を見ると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class=&amp;ldquo;pagination&amp;rdquo;&lt;/li&gt;
&lt;li&gt;class=&amp;ldquo;active&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が生成されているからCSSを指定すればいいみたいです。ただ、メニュー項目の自由度は無いので自分で定義してみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/blob/master/tpl/template_embedded.go#L116-L142&#34;&gt;Hugoのソース&lt;/a&gt;を覗き見ると対象箇所が分かります。&lt;/p&gt;

&lt;p&gt;ここを元に&lt;code&gt;layouts/partials/paginator.html&lt;/code&gt;を作成します。以下ではコメントも入れておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $pag := $.Paginator }}
{{ if gt $pag.TotalPages 1 }}
    &amp;lt;ul class=&amp;quot;pagination&amp;quot;&amp;gt;
        {{/*最初へ*/}}
        {{ with $pag.First }}
            &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot; aria-label=&amp;quot;First&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;最初へ&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}

        {{/*前ページ*/}}
        &amp;lt;li{{ if not $pag.HasPrev }}class=&amp;quot;disabled&amp;quot;{{ end }}&amp;gt;
            &amp;lt;a href=&amp;quot;{{ if $pag.HasPrev }}{{ $pag.Prev.URL }}{{ end }}&amp;quot; aria-label=&amp;quot;Previous&amp;quot;&amp;gt;
                &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;前へ&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        {{/*番号*/}}
        {{ range $pag.Pagers }}
            &amp;lt;li{{ if eq . $pag }}class=&amp;quot;active&amp;quot;{{ end }}&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot;&amp;gt;{{ .PageNumber }}&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}
        
        {{/*次ページ*/}}
        &amp;lt;li{{ if not $pag.HasNext }}class=&amp;quot;disabled&amp;quot;{{ end }}&amp;gt;
            &amp;lt;a href=&amp;quot;{{ if $pag.HasNext }}{{ $pag.Next.URL }}{{ end }}&amp;quot; aria-label=&amp;quot;Next&amp;quot;&amp;gt;
                &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;次へ&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        {{/*最後へ*/}}
        {{ with $pag.Last }}
            &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot; aria-label=&amp;quot;Last&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;最後へ&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}
    &amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;section/blog.html&lt;/code&gt;を以下に修正します。
&lt;code&gt;_internal&lt;/code&gt;で組み込みテンプレートを呼び出していた行を今作成した&lt;code&gt;paginator.html&lt;/code&gt;を呼び出すように変更です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}

    {{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) 12 }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
       {{ range $paginator.Pages }}
            {{ .Render &amp;quot;summary&amp;quot; }}
        {{ end }}
    &amp;lt;/div&amp;gt;
    
    {{ partial &amp;quot;paginator.html&amp;quot; . }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで完成です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ビルドするとこのような形になりました。&lt;/p&gt;

&lt;p&gt;あとは&lt;a href=&#34;https://dotstud.io/members/chachmaru/&#34;&gt;ちゃちゃまる先生&lt;/a&gt;にCSSをあててもらえば終了です。&lt;/p&gt;

&lt;h2 id=&#34;出来上がったものがこちらです&#34;&gt;出来上がったものがこちらです&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;いい感じですね。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;こちら(&lt;a href=&#34;http://wdkk.co.jp/note/2015/0915-hugo-pagination/&#34;&gt;Hugoでwebサイト構築(9) リストのページネーション(Pagination)&lt;/a&gt;)も参考にさせていただきました。&lt;/p&gt;

&lt;p&gt;なかなか公式ドキュメントも調べづらいので参考になれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>地味に便利！Raspberry Piが起動したらIPアドレスを通知するチャットボットを作る</title>
      <link>https://dotstud.io/blog/raspberry-pi-ip-notification/</link>
      <pubDate>Tue, 11 Oct 2016 10:00:49 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/raspberry-pi-ip-notification/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;Raspberry Piは起動するたびにIPアドレスが変わってしまうことがありますよね。
だいたいの人はSSH接続していると思うのでIPアドレスが変わると再確認をしないといけませんが、 &lt;strong&gt;RaspberryPiは基本的にディスプレイとキーボードを接続しないとIPアドレスの確認できないのがめんどくさいですね&lt;/strong&gt;。 （FTDIとかはありますがこれも手間はあります。）&lt;/p&gt;

&lt;p&gt;そこで今回は、&lt;strong&gt;Raspberry Piの起動時に自身のIPアドレスをHipChatに通知する仕組みを作ります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、ここでいうチャットボットは「会話をする」というより「チャットに通知するプログラム」っていう意味合いです。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 2 ModelB&lt;/li&gt;
&lt;li&gt;Raspbian 8.0 Jessie&lt;/li&gt;
&lt;li&gt;Node.js 4.4.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;node-jsでipアドレスを知る&#34;&gt;Node.jsでIPアドレスを知る&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;os.networkInterfaces()&lt;/code&gt;でネットワーク情報を取得し、&lt;code&gt;os.hostname()&lt;/code&gt;でマシン名を取得できます。
「&lt;a href=&#34;http://qiita.com/_shimizu/items/b38d1459abf8436f7f1f&#34;&gt;node.jsでローカルIPアドレスの取得&lt;/a&gt;」を参考にさせて頂きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        console.log(mes);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js

raspberrypi:192.168.43.70 (standup)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでホスト名とIPアドレスを取得することができました。&lt;/p&gt;

&lt;h2 id=&#34;hipchatにポストする&#34;&gt;HipChatにポストする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hipchat-bot-by-nodejs/&#34;&gt;話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。&lt;/a&gt;の記事でHipChatに投稿している部分を外部モジュール化しておきます。
&lt;code&gt;libs/hcPost.js&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
const hcPost = require(&#39;./libs/hcPost&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        let postData = {
            &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
            &amp;quot;message&amp;quot;: mes,
            &amp;quot;notify&amp;quot;: false,
            &amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
        };
        hcPost(postData);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで実行するとホスト名とIPアドレスがHipChatに投稿されます。&lt;/p&gt;

&lt;p&gt;ソースコードは&lt;a href=&#34;https://github.com/n0bisuke/raspi-j5-hue/blob/master/ip.js&#34;&gt;GitHub&lt;/a&gt;にも載せてあります。&lt;/p&gt;

&lt;h2 id=&#34;raspberry-piの起動時にnode-jsアプリケーションの起動を設定する&#34;&gt;Raspberry Piの起動時にNode.jsアプリケーションの起動を設定する&lt;/h2&gt;

&lt;p&gt;Node.jsのアプリケーションはRaspberry Piを再起動させたタイミングで完全にプロセスが落ちてしまうので、起動時に実行されるように設定します。
「&lt;a href=&#34;http://qiita.com/n0bisuke/items/781eac201a907a524f8e&#34;&gt;RaspberryPiの起動時にNode.jsを実行&amp;amp;PM2で永続化するメモ&lt;/a&gt;」にもあるように、&lt;code&gt;/etc/rc.local&lt;/code&gt;に処理を書き込むことで起動時に処理をしてくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などでファイルを開くと、デフォルトで以下の内容が記載されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここにNode.jsアプリケーションの実行処理を記述しましょう。&lt;code&gt;/etc/rc.local&lt;/code&gt;に以下を書き込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにこの&lt;code&gt;sudo -u pi &amp;lt;nodeコマンドの絶対パス&amp;gt; &amp;lt;起動するスクリプトの絶対パス&amp;gt;&lt;/code&gt;となります。
パスが分からない人は、whichコマンドでパスを見つけましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which node

/home/pi/.nvm/versions/node/v4.4.2/bin/node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最終的にこうなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で上手く動作するか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでエラーが出る場合はパスの指定などが間違ってる可能性が高いです。&lt;/p&gt;

&lt;p&gt;こんな感じの表示がHipChat側にされたら成功です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/033/01.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/12/goodnews-new-and-improved-emoticons/&#34;&gt;HipChatの絵文字&lt;/a&gt;は種類が豊富で&lt;code&gt;(standup)&lt;/code&gt;を指定すると画像のように人が立ち上がる絵文字になります。&lt;/p&gt;

&lt;p&gt;最後に設定が出来たらRaspberry Piの電源を再起動してみましょう。
起動直後にHipChatにRaspberry PiのIPアドレスが通知されたら、起動設定が成功している証拠です。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これで「Raspberry PiのIPが変わってしまいSSHログインがしにくい問題」が解決しそうです。
起動した際に通知が来るので通常起動してるかどうかの監視にも使えそうです。&lt;/p&gt;

&lt;p&gt;Raspberry Piからチャットへの一方通行な通信なので、Raspberry Piが何らかの原因で動作していない場合はMilkcocoaなどで双方向の通信を入れれば死活監視もできそうですね。&lt;/p&gt;

&lt;p&gt;皆さんも是非活用してみて下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>地味に便利！Raspberry Piが起動したらIPアドレスを通知するチャットボットを作る</title>
      <link>https://dotstud.io/blog/raspberry-pi-ip-notification/</link>
      <pubDate>Tue, 11 Oct 2016 10:00:49 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/raspberry-pi-ip-notification/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;Raspberry Piは起動するたびにIPアドレスが変わってしまうことがありますよね。
だいたいの人はSSH接続していると思うのでIPアドレスが変わると再確認をしないといけませんが、 &lt;strong&gt;RaspberryPiは基本的にディスプレイとキーボードを接続しないとIPアドレスの確認できないのがめんどくさいですね&lt;/strong&gt;。 （FTDIとかはありますがこれも手間はあります。）&lt;/p&gt;

&lt;p&gt;そこで今回は、&lt;strong&gt;Raspberry Piの起動時に自身のIPアドレスをHipChatに通知する仕組みを作ります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、ここでいうチャットボットは「会話をする」というより「チャットに通知するプログラム」っていう意味合いです。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 2 ModelB&lt;/li&gt;
&lt;li&gt;Raspbian 8.0 Jessie&lt;/li&gt;
&lt;li&gt;Node.js 4.4.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;node-jsでipアドレスを知る&#34;&gt;Node.jsでIPアドレスを知る&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;os.networkInterfaces()&lt;/code&gt;でネットワーク情報を取得し、&lt;code&gt;os.hostname()&lt;/code&gt;でマシン名を取得できます。
「&lt;a href=&#34;http://qiita.com/_shimizu/items/b38d1459abf8436f7f1f&#34;&gt;node.jsでローカルIPアドレスの取得&lt;/a&gt;」を参考にさせて頂きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        console.log(mes);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js

raspberrypi:192.168.43.70 (standup)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでホスト名とIPアドレスを取得することができました。&lt;/p&gt;

&lt;h2 id=&#34;hipchatにポストする&#34;&gt;HipChatにポストする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hipchat-bot-by-nodejs/&#34;&gt;話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。&lt;/a&gt;の記事でHipChatに投稿している部分を外部モジュール化しておきます。
&lt;code&gt;libs/hcPost.js&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
const hcPost = require(&#39;./libs/hcPost&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        let postData = {
            &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
            &amp;quot;message&amp;quot;: mes,
            &amp;quot;notify&amp;quot;: false,
            &amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
        };
        hcPost(postData);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで実行するとホスト名とIPアドレスがHipChatに投稿されます。&lt;/p&gt;

&lt;p&gt;ソースコードは&lt;a href=&#34;https://github.com/n0bisuke/raspi-j5-hue/blob/master/ip.js&#34;&gt;GitHub&lt;/a&gt;にも載せてあります。&lt;/p&gt;

&lt;h2 id=&#34;raspberry-piの起動時にnode-jsアプリケーションの起動を設定する&#34;&gt;Raspberry Piの起動時にNode.jsアプリケーションの起動を設定する&lt;/h2&gt;

&lt;p&gt;Node.jsのアプリケーションはRaspberry Piを再起動させたタイミングで完全にプロセスが落ちてしまうので、起動時に実行されるように設定します。
「&lt;a href=&#34;http://qiita.com/n0bisuke/items/781eac201a907a524f8e&#34;&gt;RaspberryPiの起動時にNode.jsを実行&amp;amp;PM2で永続化するメモ&lt;/a&gt;」にもあるように、&lt;code&gt;/etc/rc.local&lt;/code&gt;に処理を書き込むことで起動時に処理をしてくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などでファイルを開くと、デフォルトで以下の内容が記載されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここにNode.jsアプリケーションの実行処理を記述しましょう。&lt;code&gt;/etc/rc.local&lt;/code&gt;に以下を書き込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにこの&lt;code&gt;sudo -u pi &amp;lt;nodeコマンドの絶対パス&amp;gt; &amp;lt;起動するスクリプトの絶対パス&amp;gt;&lt;/code&gt;となります。
パスが分からない人は、whichコマンドでパスを見つけましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which node

/home/pi/.nvm/versions/node/v4.4.2/bin/node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最終的にこうなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で上手く動作するか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでエラーが出る場合はパスの指定などが間違ってる可能性が高いです。&lt;/p&gt;

&lt;p&gt;こんな感じの表示がHipChat側にされたら成功です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/033/01.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/12/goodnews-new-and-improved-emoticons/&#34;&gt;HipChatの絵文字&lt;/a&gt;は種類が豊富で&lt;code&gt;(standup)&lt;/code&gt;を指定すると画像のように人が立ち上がる絵文字になります。&lt;/p&gt;

&lt;p&gt;最後に設定が出来たらRaspberry Piの電源を再起動してみましょう。
起動直後にHipChatにRaspberry PiのIPアドレスが通知されたら、起動設定が成功している証拠です。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これで「Raspberry PiのIPが変わってしまいSSHログインがしにくい問題」が解決しそうです。
起動した際に通知が来るので通常起動してるかどうかの監視にも使えそうです。&lt;/p&gt;

&lt;p&gt;Raspberry Piからチャットへの一方通行な通信なので、Raspberry Piが何らかの原因で動作していない場合はMilkcocoaなどで双方向の通信を入れれば死活監視もできそうですね。&lt;/p&gt;

&lt;p&gt;皆さんも是非活用してみて下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>デザイナーの僕がHugoを使ってポートフォリオサイトを作ってみる #2【制作:基本編】</title>
      <link>https://dotstud.io/blog/hugo-for-designers-vol2/</link>
      <pubDate>Thu, 06 Oct 2016 10:40:04 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hugo-for-designers-vol2/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioのデザイナー・ちゃちゃまる（&lt;a href=&#34;https://twitter.com/chachmaru&#34;&gt;@chachmaru&lt;/a&gt;）です！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hugo-for-designers-vol1/&#34;&gt;第一回目&lt;/a&gt;では&lt;br /&gt;
- 動的サイトと静的サイトの違い&lt;br /&gt;
- Hugoの使い方&lt;br /&gt;
- Hugoディレクトリの中身&lt;br /&gt;
を説明しました。&lt;/p&gt;

&lt;p&gt;本連載の第二回目では、とりあえずトップページに記事を表示させ、ローカル環境でテストしてみるところまで進めていきたいと思います！なお、この記事ではHugoに直接関係のない部分（基本的なHTMLやCSSの記述など）の解説は省いていきますのでご了承ください。&lt;/p&gt;

&lt;p&gt;また、僕自身も手探りのため、コードや理解に間違っている部分や改善すべき点など多数あると思います。お気づきの方は、こっそりGithub issueの方で報告していただけたら幸いです。&lt;/p&gt;

&lt;p&gt;それでは早速やっていきましょう！&lt;/p&gt;

&lt;h2 id=&#34;記事を作成する&#34;&gt;記事を作成する&lt;/h2&gt;

&lt;p&gt;Hugoを使った操作は、基本前回と同じようにターミナル内で行います。&lt;code&gt;アプリケーション &amp;gt; ユーティリティ &amp;gt; ターミナル.app&lt;/code&gt;から起動して、前回生成したHugoディレクトリまで移動しましょう。&lt;/p&gt;

&lt;h3 id=&#34;hugo-newコマンド&#34;&gt;hugo newコマンド&lt;/h3&gt;

&lt;p&gt;前回は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site chachamaru
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というコマンドを使ってHugoディレクトリを生成しました。実はこの&lt;code&gt;hugo new&lt;/code&gt;コマンドの一部分を置き換えて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new ジャンル/記事名（アルファベット）.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで、かんたんに記事もつくることができるのです。&lt;/p&gt;

&lt;p&gt;最後の拡張子&lt;code&gt;.md&lt;/code&gt;は、マークダウンのファイルであることを表しています。Hugoは記事をマークダウン方式で書くことができるので、最後に&lt;code&gt;.md&lt;/code&gt;をつけるようにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;ジャンルを決める&#34;&gt;ジャンルを決める&lt;/h3&gt;

&lt;p&gt;さて、ここで記事にどんなジャンルが欲しいかを考えます。もちろん後から新しいジャンルを追加することもできるので、今は「Works」（作品）と「Announcements」（お知らせ）の2つにします。&lt;/p&gt;

&lt;p&gt;この場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new works/my-first-work.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new announcements/my-new-website.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとすれば二種類のジャンルが作成されます。&lt;/p&gt;

&lt;h3 id=&#34;記事の場所&#34;&gt;記事の場所&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt;コマンドでつくられた記事は&lt;code&gt;content&lt;/code&gt;ディレクトリ内にあります。ジャンルが指定されている場合、ジャンル名がサブディレクトリ名になります。&lt;/p&gt;

&lt;p&gt;今回の場合、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/01.png&#34; alt=&#34;ディレクトリ構成&#34; /&gt;&lt;/p&gt;

&lt;p&gt;のような構成になっているはずです。&lt;/p&gt;

&lt;p&gt;※&lt;code&gt;hugo new&lt;/code&gt;で生成したジャンル名や記事タイトルは、Finderなどからでも名称変更可能です。スペルミスなどをしてしまった場合は普段どおり名前を変更すれば大丈夫です。&lt;/p&gt;

&lt;h3 id=&#34;フロントマター&#34;&gt;フロントマター&lt;/h3&gt;

&lt;p&gt;作成した&lt;code&gt;my-first-work.md&lt;/code&gt;をテキストエディタで開いてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/02.png&#34; alt=&#34;マークダウンファイル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;開くと空のファイルではなく、&lt;code&gt;+++&lt;/code&gt;に囲まれて&lt;code&gt;date&lt;/code&gt;、&lt;code&gt;draft&lt;/code&gt;、&lt;code&gt;title&lt;/code&gt;の3つが書かれています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;+++&lt;/code&gt;で囲まれている部分は、TOML（設定ファイルを記述する小さい言語）で書かれたこの&lt;code&gt;my-first-work.md&lt;/code&gt;の記事に関するデータであり、&lt;strong&gt;フロントマター&lt;/strong&gt;と呼びます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;date&lt;/code&gt;には記事が作成された日にちと時間、&lt;code&gt;draft&lt;/code&gt;にはこの記事が下書き状態か否か、そして&lt;code&gt;title&lt;/code&gt;にはファイル名と同じ名前がデフォルトでつけられています。詳しくは後ほど。&lt;/p&gt;

&lt;h3 id=&#34;記事を書く&#34;&gt;記事を書く&lt;/h3&gt;

&lt;p&gt;本文は&lt;code&gt;+++&lt;/code&gt;で閉じた後の行に記述します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/03.png&#34; alt=&#34;マークダウンファイル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このファイルの名前&lt;code&gt;my-first-work.md&lt;/code&gt;は、この記事のページのURL（例: chachmaru.github.io/works/my-first-work）になります（ファイル名とURLを別々に設定することも可能）。実際にウェブサイトに表示されるタイトルはフロントマターの&lt;code&gt;title&lt;/code&gt;で指定されたものなので、好きな文言に書き換えておきましょう。&lt;/p&gt;

&lt;p&gt;これで一旦記事作成は終わりです。次はHTMLを書いていきます。&lt;/p&gt;

&lt;h2 id=&#34;トップページに記事一覧を表示させる&#34;&gt;トップページに記事一覧を表示させる&lt;/h2&gt;

&lt;h3 id=&#34;index-htmlをつくる&#34;&gt;index.htmlをつくる&lt;/h3&gt;

&lt;p&gt;前回のおさらいで、HUGOでは&lt;code&gt;layouts&lt;/code&gt;内にHTMLファイルを置きます。&lt;code&gt;index.html&lt;/code&gt;を作り、とりあえず「hello world」などと入れ、保存しましょう。&lt;/p&gt;

&lt;h3 id=&#34;ブラウザでテストしてみる&#34;&gt;ブラウザでテストしてみる&lt;/h3&gt;

&lt;p&gt;いよいよHUGOをブラウザで表示させてみます。テスト用のサーバーをたてるのは非常にかんたんで、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とターミナルに入れるだけです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/04.png&#34; alt=&#34;ターミナルスクリーンショット&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hugoはデフォルトで&lt;a href=&#34;localhost:1313&#34;&gt;localhost:1313&lt;/a&gt;にサーバーをたてるので、ブラウザでアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/05.png&#34; alt=&#34;ブラウザ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さきほど&lt;code&gt;index.html&lt;/code&gt;に入れた文字が表示されましたか？&lt;/p&gt;

&lt;h3 id=&#34;コマンドにオプションをつける&#34;&gt;コマンドにオプションをつける&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;コマンドは、Hugoディレクトリ内のファイルを更新したあと一旦サーバーを停止させてもう一度起動しなければいけないので、非常にめんどうです。&lt;/p&gt;

&lt;p&gt;そこで、一旦サーバーを停止して、次から&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --watch --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてください。&lt;/p&gt;

&lt;p&gt;2つのハイフンから始まる文字は&lt;code&gt;hugo server&lt;/code&gt;コマンドのオプションです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;br /&gt;
Hugoディレクトリ内に変更があったとき自動でブラウザをリロードしてくれます。これでいちいちサーバーを再起動しなくても大丈夫です。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--buildDrafts&lt;/code&gt;&lt;br /&gt;
フロントマターの&lt;code&gt;draft&lt;/code&gt;欄が&lt;code&gt;true&lt;/code&gt;になっている記事を、Hugoはデフォルトでテストサーバーに反映させません。本番には向いているのですが、今はテスト段階のため、このオプションをつけて下書き記事も反映させます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでずっと走らせておきながら開発ができます。&lt;/p&gt;

&lt;h3 id=&#34;トップページに記事を表示させる&#34;&gt;トップページに記事を表示させる&lt;/h3&gt;

&lt;p&gt;まずは以下を&lt;code&gt;index.html&lt;/code&gt;にコピペして保存してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;

      {{ range first 10 .Data.Pages }}
        &amp;lt;div&amp;gt;
          &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
      {{ end }}

  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、ブラウザ側では&lt;br /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/029/06.png&#34; alt=&#34;ブラウザ&#34; /&gt;&lt;br /&gt;
のように、さきほど作成した&lt;code&gt;content&lt;/code&gt;ディレクトリ内の2つの記事タイトルが並べられていると思います！&lt;/p&gt;

&lt;h2 id=&#34;goテンプレートを活用する&#34;&gt;Goテンプレートを活用する&lt;/h2&gt;

&lt;p&gt;なぜ上記のようなコードだけで、こんなにもかんたんに記事一覧を表示させることができるのでしょうか。秘密は&lt;code&gt;{{ }}&lt;/code&gt;内のコードにあります。&lt;/p&gt;

&lt;h3 id=&#34;hugoのテンプレートエンジン&#34;&gt;Hugoのテンプレートエンジン&lt;/h3&gt;

&lt;p&gt;テンプレートエンジンとは、雛形（テンプレート）とデータを合成・出力することができるソフトウェアを指します。HugoはHTMLにかんたんなロジックを組みこむことができる軽量の「Go html/template」ライブラリを、テンプレートエンジンとして使用しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 10 .Data.Pages}}

{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は、全記事から最新の10記事分の、カッコ内に書かれたHTMLを用意しています。今回は全体で2つしか記事がないため、2つ分のみ用意されています。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;{{ .Title }}&lt;/code&gt;はその記事のタイトルを取得してくれます。つまり今回の場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;ポートフォリオサイトを作りました。&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;初めての作品&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とテンプレートエンジンにより変換されます。&lt;/p&gt;

&lt;h2 id=&#34;次回予告&#34;&gt;次回予告&lt;/h2&gt;

&lt;p&gt;今回は自分が書いた記事の一覧をトップページに表示させることができました。しかし、現時点だとタイトルをクリックしても記事ページには飛べません。Hugoでポートフォリオサイトを作るには、もう少しこの&lt;code&gt;{{ }}&lt;/code&gt;をうまく活用する必要がありそうです。&lt;/p&gt;

&lt;p&gt;次回は個別記事のページ作成や、ジャンル、タグなどの仕組みをつくっていきたいと思います。&lt;/p&gt;

&lt;p&gt;それではまた次回お会いしましょう！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>デザイナーの僕がHugoを使ってポートフォリオサイトを作ってみる #2【制作:基本編】</title>
      <link>https://dotstud.io/blog/hugo-for-designers-vol2/</link>
      <pubDate>Thu, 06 Oct 2016 10:40:04 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hugo-for-designers-vol2/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioのデザイナー・ちゃちゃまる（&lt;a href=&#34;https://twitter.com/chachmaru&#34;&gt;@chachmaru&lt;/a&gt;）です！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hugo-for-designers-vol1/&#34;&gt;第一回目&lt;/a&gt;では&lt;br /&gt;
- 動的サイトと静的サイトの違い&lt;br /&gt;
- Hugoの使い方&lt;br /&gt;
- Hugoディレクトリの中身&lt;br /&gt;
を説明しました。&lt;/p&gt;

&lt;p&gt;本連載の第二回目では、とりあえずトップページに記事を表示させ、ローカル環境でテストしてみるところまで進めていきたいと思います！なお、この記事ではHugoに直接関係のない部分（基本的なHTMLやCSSの記述など）の解説は省いていきますのでご了承ください。&lt;/p&gt;

&lt;p&gt;また、僕自身も手探りのため、コードや理解に間違っている部分や改善すべき点など多数あると思います。お気づきの方は、こっそりGithub issueの方で報告していただけたら幸いです。&lt;/p&gt;

&lt;p&gt;それでは早速やっていきましょう！&lt;/p&gt;

&lt;h2 id=&#34;記事を作成する&#34;&gt;記事を作成する&lt;/h2&gt;

&lt;p&gt;Hugoを使った操作は、基本前回と同じようにターミナル内で行います。&lt;code&gt;アプリケーション &amp;gt; ユーティリティ &amp;gt; ターミナル.app&lt;/code&gt;から起動して、前回生成したHugoディレクトリまで移動しましょう。&lt;/p&gt;

&lt;h3 id=&#34;hugo-newコマンド&#34;&gt;hugo newコマンド&lt;/h3&gt;

&lt;p&gt;前回は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site chachamaru
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というコマンドを使ってHugoディレクトリを生成しました。実はこの&lt;code&gt;hugo new&lt;/code&gt;コマンドの一部分を置き換えて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new ジャンル/記事名（アルファベット）.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで、かんたんに記事もつくることができるのです。&lt;/p&gt;

&lt;p&gt;最後の拡張子&lt;code&gt;.md&lt;/code&gt;は、マークダウンのファイルであることを表しています。Hugoは記事をマークダウン方式で書くことができるので、最後に&lt;code&gt;.md&lt;/code&gt;をつけるようにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;ジャンルを決める&#34;&gt;ジャンルを決める&lt;/h3&gt;

&lt;p&gt;さて、ここで記事にどんなジャンルが欲しいかを考えます。もちろん後から新しいジャンルを追加することもできるので、今は「Works」（作品）と「Announcements」（お知らせ）の2つにします。&lt;/p&gt;

&lt;p&gt;この場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new works/my-first-work.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new announcements/my-new-website.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとすれば二種類のジャンルが作成されます。&lt;/p&gt;

&lt;h3 id=&#34;記事の場所&#34;&gt;記事の場所&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt;コマンドでつくられた記事は&lt;code&gt;content&lt;/code&gt;ディレクトリ内にあります。ジャンルが指定されている場合、ジャンル名がサブディレクトリ名になります。&lt;/p&gt;

&lt;p&gt;今回の場合、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/01.png&#34; alt=&#34;ディレクトリ構成&#34; /&gt;&lt;/p&gt;

&lt;p&gt;のような構成になっているはずです。&lt;/p&gt;

&lt;p&gt;※&lt;code&gt;hugo new&lt;/code&gt;で生成したジャンル名や記事タイトルは、Finderなどからでも名称変更可能です。スペルミスなどをしてしまった場合は普段どおり名前を変更すれば大丈夫です。&lt;/p&gt;

&lt;h3 id=&#34;フロントマター&#34;&gt;フロントマター&lt;/h3&gt;

&lt;p&gt;作成した&lt;code&gt;my-first-work.md&lt;/code&gt;をテキストエディタで開いてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/02.png&#34; alt=&#34;マークダウンファイル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;開くと空のファイルではなく、&lt;code&gt;+++&lt;/code&gt;に囲まれて&lt;code&gt;date&lt;/code&gt;、&lt;code&gt;draft&lt;/code&gt;、&lt;code&gt;title&lt;/code&gt;の3つが書かれています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;+++&lt;/code&gt;で囲まれている部分は、TOML（設定ファイルを記述する小さい言語）で書かれたこの&lt;code&gt;my-first-work.md&lt;/code&gt;の記事に関するデータであり、&lt;strong&gt;フロントマター&lt;/strong&gt;と呼びます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;date&lt;/code&gt;には記事が作成された日にちと時間、&lt;code&gt;draft&lt;/code&gt;にはこの記事が下書き状態か否か、そして&lt;code&gt;title&lt;/code&gt;にはファイル名と同じ名前がデフォルトでつけられています。詳しくは後ほど。&lt;/p&gt;

&lt;h3 id=&#34;記事を書く&#34;&gt;記事を書く&lt;/h3&gt;

&lt;p&gt;本文は&lt;code&gt;+++&lt;/code&gt;で閉じた後の行に記述します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/03.png&#34; alt=&#34;マークダウンファイル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このファイルの名前&lt;code&gt;my-first-work.md&lt;/code&gt;は、この記事のページのURL（例: chachmaru.github.io/works/my-first-work）になります（ファイル名とURLを別々に設定することも可能）。実際にウェブサイトに表示されるタイトルはフロントマターの&lt;code&gt;title&lt;/code&gt;で指定されたものなので、好きな文言に書き換えておきましょう。&lt;/p&gt;

&lt;p&gt;これで一旦記事作成は終わりです。次はHTMLを書いていきます。&lt;/p&gt;

&lt;h2 id=&#34;トップページに記事一覧を表示させる&#34;&gt;トップページに記事一覧を表示させる&lt;/h2&gt;

&lt;h3 id=&#34;index-htmlをつくる&#34;&gt;index.htmlをつくる&lt;/h3&gt;

&lt;p&gt;前回のおさらいで、HUGOでは&lt;code&gt;layouts&lt;/code&gt;内にHTMLファイルを置きます。&lt;code&gt;index.html&lt;/code&gt;を作り、とりあえず「hello world」などと入れ、保存しましょう。&lt;/p&gt;

&lt;h3 id=&#34;ブラウザでテストしてみる&#34;&gt;ブラウザでテストしてみる&lt;/h3&gt;

&lt;p&gt;いよいよHUGOをブラウザで表示させてみます。テスト用のサーバーをたてるのは非常にかんたんで、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とターミナルに入れるだけです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/04.png&#34; alt=&#34;ターミナルスクリーンショット&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hugoはデフォルトで&lt;a href=&#34;localhost:1313&#34;&gt;localhost:1313&lt;/a&gt;にサーバーをたてるので、ブラウザでアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/05.png&#34; alt=&#34;ブラウザ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さきほど&lt;code&gt;index.html&lt;/code&gt;に入れた文字が表示されましたか？&lt;/p&gt;

&lt;h3 id=&#34;コマンドにオプションをつける&#34;&gt;コマンドにオプションをつける&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;コマンドは、Hugoディレクトリ内のファイルを更新したあと一旦サーバーを停止させてもう一度起動しなければいけないので、非常にめんどうです。&lt;/p&gt;

&lt;p&gt;そこで、一旦サーバーを停止して、次から&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --watch --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてください。&lt;/p&gt;

&lt;p&gt;2つのハイフンから始まる文字は&lt;code&gt;hugo server&lt;/code&gt;コマンドのオプションです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;br /&gt;
Hugoディレクトリ内に変更があったとき自動でブラウザをリロードしてくれます。これでいちいちサーバーを再起動しなくても大丈夫です。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--buildDrafts&lt;/code&gt;&lt;br /&gt;
フロントマターの&lt;code&gt;draft&lt;/code&gt;欄が&lt;code&gt;true&lt;/code&gt;になっている記事を、Hugoはデフォルトでテストサーバーに反映させません。本番には向いているのですが、今はテスト段階のため、このオプションをつけて下書き記事も反映させます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでずっと走らせておきながら開発ができます。&lt;/p&gt;

&lt;h3 id=&#34;トップページに記事を表示させる&#34;&gt;トップページに記事を表示させる&lt;/h3&gt;

&lt;p&gt;まずは以下を&lt;code&gt;index.html&lt;/code&gt;にコピペして保存してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;

      {{ range first 10 .Data.Pages }}
        &amp;lt;div&amp;gt;
          &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
      {{ end }}

  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、ブラウザ側では&lt;br /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/029/06.png&#34; alt=&#34;ブラウザ&#34; /&gt;&lt;br /&gt;
のように、さきほど作成した&lt;code&gt;content&lt;/code&gt;ディレクトリ内の2つの記事タイトルが並べられていると思います！&lt;/p&gt;

&lt;h2 id=&#34;goテンプレートを活用する&#34;&gt;Goテンプレートを活用する&lt;/h2&gt;

&lt;p&gt;なぜ上記のようなコードだけで、こんなにもかんたんに記事一覧を表示させることができるのでしょうか。秘密は&lt;code&gt;{{ }}&lt;/code&gt;内のコードにあります。&lt;/p&gt;

&lt;h3 id=&#34;hugoのテンプレートエンジン&#34;&gt;Hugoのテンプレートエンジン&lt;/h3&gt;

&lt;p&gt;テンプレートエンジンとは、雛形（テンプレート）とデータを合成・出力することができるソフトウェアを指します。HugoはHTMLにかんたんなロジックを組みこむことができる軽量の「Go html/template」ライブラリを、テンプレートエンジンとして使用しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 10 .Data.Pages}}

{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は、全記事から最新の10記事分の、カッコ内に書かれたHTMLを用意しています。今回は全体で2つしか記事がないため、2つ分のみ用意されています。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;{{ .Title }}&lt;/code&gt;はその記事のタイトルを取得してくれます。つまり今回の場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;ポートフォリオサイトを作りました。&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;初めての作品&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とテンプレートエンジンにより変換されます。&lt;/p&gt;

&lt;h2 id=&#34;次回予告&#34;&gt;次回予告&lt;/h2&gt;

&lt;p&gt;今回は自分が書いた記事の一覧をトップページに表示させることができました。しかし、現時点だとタイトルをクリックしても記事ページには飛べません。Hugoでポートフォリオサイトを作るには、もう少しこの&lt;code&gt;{{ }}&lt;/code&gt;をうまく活用する必要がありそうです。&lt;/p&gt;

&lt;p&gt;次回は個別記事のページ作成や、ジャンル、タグなどの仕組みをつくっていきたいと思います。&lt;/p&gt;

&lt;p&gt;それではまた次回お会いしましょう！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsでコマンドラインツール作るときに使いやすいreadline-sync</title>
      <link>https://dotstud.io/blog/nodejs-npm-readline-sync/</link>
      <pubDate>Wed, 05 Oct 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodejs-npm-readline-sync/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://dotstud.io/members/n0bisuke/&#34;&gt;のびすけ&lt;/a&gt;です。
&lt;a href=&#34;https://dotstud.io/series/nodejs/&#34;&gt;Node.js Magazine&lt;/a&gt;という連載を作ったのでNode.js系のTipsを紹介していく予定です。&lt;/p&gt;

&lt;p&gt;今日はNode.jsでコマンドラインツールを作る際に役立つreadline-syncというパッケージを紹介します。&lt;/p&gt;

&lt;p&gt;実際にサンプルを動かして見ましょう。&lt;/p&gt;

&lt;h2 id=&#34;執筆時点のマシンスペック&#34;&gt;執筆時点のマシンスペック&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;macOS Sierra (v10.12)&lt;/li&gt;
&lt;li&gt;Node.js v6.6.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;何か不具合があったときに参照してください。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;URL: &lt;a href=&#34;https://www.npmjs.com/package/readline-sync&#34;&gt;https://www.npmjs.com/package/readline-sync&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i readline-sync
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サンプルを動かしてみる&#34;&gt;サンプルを動かしてみる&lt;/h2&gt;

&lt;p&gt;まずは基本的なサンプルです。&lt;code&gt;.question()&lt;/code&gt;で質問して入力結果をそのまま変数に入れ込めます。このサンプルでいうと&lt;code&gt;userName&lt;/code&gt;と&lt;code&gt;favFood&lt;/code&gt;の変数に入力した値が入ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
const readlineSync = require(&#39;readline-sync&#39;);

let userName = readlineSync.question(&#39;あなたの名前は? &#39;);
console.log(`-&amp;gt;こんにちは ${userName}!`);

let favFood = readlineSync.question(&#39;好きな食べ物は? &#39;, {hideEchoBack: true});
console.log(`-&amp;gt;${userName}は${favFood}が好きなんだね!`);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;{hideEchoBack: true}&lt;/code&gt;というオプションをつけると入力時は&lt;code&gt;*&lt;/code&gt;で表示されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/01_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;選択肢を出して選ばせる&#34;&gt;選択肢を出して選ばせる&lt;/h2&gt;

&lt;p&gt;選択肢を提示してユーザーに選ばせる方法もよく使われます。&lt;/p&gt;

&lt;p&gt;keyInSelectメソッドを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
const readlineSync = require(&#39;readline-sync&#39;);

let animals = [&#39;のびすけ&#39;, &#39;うらら&#39;, &#39;ちゃちゃまる&#39;, &#39;うこ&#39;, &#39;ギャル電&#39;];
let index = readlineSync.keyInSelect(animals, &#39;誰に連絡しますか?&#39;);
console.log(`${animals[index]}に連絡します。`);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/02_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人の名前を選択肢して、その人に連絡をする&lt;/strong&gt;みたいなインターフェイスを作って見ました。変数がanimalsなのは気にしません。&lt;/p&gt;

&lt;h2 id=&#34;cliループでサブコマンドを作る&#34;&gt;CLIループでサブコマンドを作る&lt;/h2&gt;

&lt;p&gt;コマンド終了のタイミングをユーザーに委ねたいときに使えます。&lt;/p&gt;

&lt;p&gt;promptCLLoopメソッドで関数を引数に渡すと関数をループ実行してくれます。&lt;/p&gt;

&lt;p&gt;このサンプルだと&lt;code&gt;bye&lt;/code&gt;というサブコマンドを入力すると終了します。&lt;/p&gt;

&lt;p&gt;逆に言えば&lt;code&gt;bye&lt;/code&gt;を入力するまではずっとその他コマンドの入力を待ち受けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js

const readlineSync = require(&#39;readline-sync&#39;);
readlineSync.promptCLLoop({
  add: (target, into) =&amp;gt; {
    console.log(`${target}を${into}に追加します。`);
    // Do something...
  },
  remove: (target) =&amp;gt; {
    console.log(`${target}を削除します。`);
    // Do something...
  },
  bye: () =&amp;gt; { return true; }
});
console.log(&#39;終了します。&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/03_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; コマンド名 変数1 変数2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という入力を受け付けて紐づけられている関数の引数として変数が渡されます。&lt;/p&gt;

&lt;h2 id=&#34;キー入力で値を選んでもらう&#34;&gt;キー入力で値を選んでもらう&lt;/h2&gt;

&lt;p&gt;この表現がいいのか分からないですけど、、、見ればわかります。&lt;/p&gt;

&lt;p&gt;keyInメソッドでキー入力の待ち受けを実現しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js

const readlineSync = require(&#39;readline-sync&#39;);

const MAX = 60, MIN = 0;
let value = 30, key;
console.log(`\n\n${(new Array(20)).join(&#39; &#39;)}[Z] &amp;lt;- -&amp;gt; [X]  決定: [SPACE]\n`);
while (true) {
  console.log(&#39;\x1B[1A\x1B[K|&#39; +
    (new Array(value + 1)).join(&#39;-&#39;) + &#39;O&#39; +
    (new Array(MAX - value + 1)).join(&#39;-&#39;) + &#39;| &#39; + value);
  key = readlineSync.keyIn(&#39;&#39;,
    {hideEchoBack: true, mask: &#39;&#39;, limit: &#39;zx &#39;});
  if (key === &#39;z&#39;) { if (value &amp;gt; MIN) { value--; } }
  else if (key === &#39;x&#39;) { if (value &amp;lt; MAX) { value++; } }
  else { break; }
}
console.log(`\nあなたが決めた値: ${value}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/04_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;zとxで値を調節してスペースで決定です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;簡単でしたが以上になります。&lt;/p&gt;

&lt;p&gt;いかがでしたでしょうか。
非同期が基本になっているJavaScriptでコマンドラインからの入力受付を同期的にやる場合にはかなり使いやすいパッケージだと思います。&lt;/p&gt;

&lt;p&gt;readline-syncでコマンドラインツールを作って見ましょう！&lt;/p&gt;

&lt;p&gt;もっとこっちの方がオススメだよ！ってものがあれば是非&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;@n0bisuke&lt;/a&gt;に教えてください :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsでコマンドラインツール作るときに使いやすいreadline-sync</title>
      <link>https://dotstud.io/blog/nodejs-npm-readline-sync/</link>
      <pubDate>Wed, 05 Oct 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodejs-npm-readline-sync/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://dotstud.io/members/n0bisuke/&#34;&gt;のびすけ&lt;/a&gt;です。
&lt;a href=&#34;https://dotstud.io/series/nodejs/&#34;&gt;Node.js Magazine&lt;/a&gt;という連載を作ったのでNode.js系のTipsを紹介していく予定です。&lt;/p&gt;

&lt;p&gt;今日はNode.jsでコマンドラインツールを作る際に役立つreadline-syncというパッケージを紹介します。&lt;/p&gt;

&lt;p&gt;実際にサンプルを動かして見ましょう。&lt;/p&gt;

&lt;h2 id=&#34;執筆時点のマシンスペック&#34;&gt;執筆時点のマシンスペック&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;macOS Sierra (v10.12)&lt;/li&gt;
&lt;li&gt;Node.js v6.6.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;何か不具合があったときに参照してください。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;URL: &lt;a href=&#34;https://www.npmjs.com/package/readline-sync&#34;&gt;https://www.npmjs.com/package/readline-sync&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i readline-sync
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サンプルを動かしてみる&#34;&gt;サンプルを動かしてみる&lt;/h2&gt;

&lt;p&gt;まずは基本的なサンプルです。&lt;code&gt;.question()&lt;/code&gt;で質問して入力結果をそのまま変数に入れ込めます。このサンプルでいうと&lt;code&gt;userName&lt;/code&gt;と&lt;code&gt;favFood&lt;/code&gt;の変数に入力した値が入ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
const readlineSync = require(&#39;readline-sync&#39;);

let userName = readlineSync.question(&#39;あなたの名前は? &#39;);
console.log(`-&amp;gt;こんにちは ${userName}!`);

let favFood = readlineSync.question(&#39;好きな食べ物は? &#39;, {hideEchoBack: true});
console.log(`-&amp;gt;${userName}は${favFood}が好きなんだね!`);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;{hideEchoBack: true}&lt;/code&gt;というオプションをつけると入力時は&lt;code&gt;*&lt;/code&gt;で表示されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/01_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;選択肢を出して選ばせる&#34;&gt;選択肢を出して選ばせる&lt;/h2&gt;

&lt;p&gt;選択肢を提示してユーザーに選ばせる方法もよく使われます。&lt;/p&gt;

&lt;p&gt;keyInSelectメソッドを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
const readlineSync = require(&#39;readline-sync&#39;);

let animals = [&#39;のびすけ&#39;, &#39;うらら&#39;, &#39;ちゃちゃまる&#39;, &#39;うこ&#39;, &#39;ギャル電&#39;];
let index = readlineSync.keyInSelect(animals, &#39;誰に連絡しますか?&#39;);
console.log(`${animals[index]}に連絡します。`);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/02_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人の名前を選択肢して、その人に連絡をする&lt;/strong&gt;みたいなインターフェイスを作って見ました。変数がanimalsなのは気にしません。&lt;/p&gt;

&lt;h2 id=&#34;cliループでサブコマンドを作る&#34;&gt;CLIループでサブコマンドを作る&lt;/h2&gt;

&lt;p&gt;コマンド終了のタイミングをユーザーに委ねたいときに使えます。&lt;/p&gt;

&lt;p&gt;promptCLLoopメソッドで関数を引数に渡すと関数をループ実行してくれます。&lt;/p&gt;

&lt;p&gt;このサンプルだと&lt;code&gt;bye&lt;/code&gt;というサブコマンドを入力すると終了します。&lt;/p&gt;

&lt;p&gt;逆に言えば&lt;code&gt;bye&lt;/code&gt;を入力するまではずっとその他コマンドの入力を待ち受けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js

const readlineSync = require(&#39;readline-sync&#39;);
readlineSync.promptCLLoop({
  add: (target, into) =&amp;gt; {
    console.log(`${target}を${into}に追加します。`);
    // Do something...
  },
  remove: (target) =&amp;gt; {
    console.log(`${target}を削除します。`);
    // Do something...
  },
  bye: () =&amp;gt; { return true; }
});
console.log(&#39;終了します。&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/03_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; コマンド名 変数1 変数2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という入力を受け付けて紐づけられている関数の引数として変数が渡されます。&lt;/p&gt;

&lt;h2 id=&#34;キー入力で値を選んでもらう&#34;&gt;キー入力で値を選んでもらう&lt;/h2&gt;

&lt;p&gt;この表現がいいのか分からないですけど、、、見ればわかります。&lt;/p&gt;

&lt;p&gt;keyInメソッドでキー入力の待ち受けを実現しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js

const readlineSync = require(&#39;readline-sync&#39;);

const MAX = 60, MIN = 0;
let value = 30, key;
console.log(`\n\n${(new Array(20)).join(&#39; &#39;)}[Z] &amp;lt;- -&amp;gt; [X]  決定: [SPACE]\n`);
while (true) {
  console.log(&#39;\x1B[1A\x1B[K|&#39; +
    (new Array(value + 1)).join(&#39;-&#39;) + &#39;O&#39; +
    (new Array(MAX - value + 1)).join(&#39;-&#39;) + &#39;| &#39; + value);
  key = readlineSync.keyIn(&#39;&#39;,
    {hideEchoBack: true, mask: &#39;&#39;, limit: &#39;zx &#39;});
  if (key === &#39;z&#39;) { if (value &amp;gt; MIN) { value--; } }
  else if (key === &#39;x&#39;) { if (value &amp;lt; MAX) { value++; } }
  else { break; }
}
console.log(`\nあなたが決めた値: ${value}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/04_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;zとxで値を調節してスペースで決定です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;簡単でしたが以上になります。&lt;/p&gt;

&lt;p&gt;いかがでしたでしょうか。
非同期が基本になっているJavaScriptでコマンドラインからの入力受付を同期的にやる場合にはかなり使いやすいパッケージだと思います。&lt;/p&gt;

&lt;p&gt;readline-syncでコマンドラインツールを作って見ましょう！&lt;/p&gt;

&lt;p&gt;もっとこっちの方がオススメだよ！ってものがあれば是非&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;@n0bisuke&lt;/a&gt;に教えてください :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。</title>
      <link>https://dotstud.io/blog/hipchat-bot-by-nodejs/</link>
      <pubDate>Tue, 04 Oct 2016 10:00:39 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hipchat-bot-by-nodejs/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudio代表の&lt;a href=&#34;http://qiita.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;先日のLINE DEVELOPER DAYでのLINEのAPIの盛り上がりがありましたが、2016年はチャットボットが各所ですごく盛り上がっています。そんな話題に乗り遅れないようにチャットボットを作っていこうと思います。&lt;/p&gt;

&lt;p&gt;dotstudioでは社内チャットにAtlasssian社の「HipChat」を利用しています。2010年に登場したツールですが、僕が愛用している（メッセンジャー管理アプリの）「Franz」に登録されているので選びました。&lt;/p&gt;

&lt;p&gt;「業界的にSlackじゃないの？」ってなりそうですが、Slackのユーザー課金は金銭的にけっこう辛くなっていくのが目に見えるので早期からSlackをやめました。まだSlackで消耗してるの?って言いたいです（強がり）。&lt;/p&gt;

&lt;p&gt;HipChatもSlack同様にインテグレーション追加やBot作成のAPIがかなり豊富です。&lt;/p&gt;

&lt;p&gt;今日はNode.jsからHipChatに投稿する方法を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;hipchatのインテグレーション追加をする&#34;&gt;HipChatのインテグレーション追加をする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.hipchat.com/&#34;&gt;https://www.hipchat.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HipChatでご自身のチームにログインしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/01.png&#34; alt=&#34;&#34; /&gt;
メニューから &lt;strong&gt;インテグレーション&lt;/strong&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build your own integration&lt;/strong&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プルダウンメニューからBOTを作るROOMを選択&lt;/strong&gt;して &lt;strong&gt;Name your integration&lt;/strong&gt;にBOTの名前を入れましょう。 一部room名を黒塗りにしてますが察してください（笑）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/04.png&#34; alt=&#34;&#34; /&gt;
作成するとアクセストークンなどが生成されます。&lt;/p&gt;

&lt;p&gt;ひとまず&lt;strong&gt;Try it!ボタン&lt;/strong&gt;を押してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/05.png&#34; alt=&#34;&#34; /&gt;
指定したROOMにメッセージが流れたら成功です。&lt;/p&gt;

&lt;p&gt;それにしてもこの絵文字のセンスいいですよね。&lt;/p&gt;

&lt;h2 id=&#34;curlコマンドでの実行を試す&#34;&gt;curlコマンドでの実行を試す&lt;/h2&gt;

&lt;p&gt;先ほどの画面の &lt;strong&gt;Try it out&lt;/strong&gt;の項目に書いてあるcurlコマンドを実行することでAPI経由のPOSTを再現できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -d &#39;{&amp;quot;color&amp;quot;:&amp;quot;green&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;My first notification (yey)&amp;quot;,&amp;quot;notify&amp;quot;:false,&amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;}&#39; -H &#39;Content-Type: application/json&#39; https://xxxxxx.hipchat.com/v2/room/XXXXXXX/notification?auth_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ご自身の情報に置き換えて（むしろページのものをコピペして）ターミナ
ルから実行すると先ほどの&lt;strong&gt;Try it!ボタン&lt;/strong&gt;を押した際と同じ挙動をしてくれます。&lt;/p&gt;

&lt;h2 id=&#34;node-jsからpostリクエストしてみる&#34;&gt;Node.jsからPOSTリクエストしてみる&lt;/h2&gt;

&lt;p&gt;実際にBotとして活用するにあたり、他の処理と連携させる必要があるのでプログラム経由でPOSTしてみます。dotstudioではNode.jsをよく利用しているのでNode.jsから先ほどのAPIにアクセスしてます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;request&lt;/code&gt;や&lt;code&gt;SuperAgent&lt;/code&gt;などHTTPリクエストをいい感じにしてくれる外部モジュールはいくつもありますが、今回は&lt;a href=&#34;http://qiita.com/n0bisuke/items/33a6a6da1d6f455105f9&#34;&gt;Node.jsでJSONデータをHTTP POSTするメモ&lt;/a&gt;にもまとめたように外部モジュールに依存せずにNode.jsに組み込まれてる&lt;code&gt;http&lt;/code&gt;のみで実装してみます。&lt;/p&gt;

&lt;p&gt;app.jsは以下のようになります。HOSTやPATHを先ほどの情報に置き換えて実行して見ましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;

const http = require(&#39;http&#39;);
const HOST = `xxxxx.hipchat.com`;
const PATH = `/v2/room/XXXXXXX/notification?auth_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXX`;

let postData = {
    &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;notify&amp;quot;: false,
    &amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
};

let postDataStr = JSON.stringify(postData);
let options = {
    host: HOST,
    port: 80,
    path: PATH,
    method: &#39;POST&#39;,
    headers: {
        &#39;Content-Type&#39;: &#39;application/json&#39;,
        &#39;Content-Length&#39;: postDataStr.length
    }
};

let req = http.request(options, (res) =&amp;gt; {
  console.log(&#39;STATUS: &#39; + res.statusCode);
  console.log(&#39;HEADERS: &#39; + JSON.stringify(res.headers));
  res.setEncoding(&#39;utf8&#39;);
  res.on(&#39;data&#39;, (chunk) =&amp;gt; {
    console.log(&#39;BODY: &#39; + chunk);
  });
});
req.on(&#39;error&#39;, (e) =&amp;gt; {
  console.log(&#39;problem with request: &#39; + e.message);
});
req.write(postDataStr);
req.end();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7~12行目のPOSTデータのパラメーターは&lt;a href=&#34;https://www.hipchat.com/docs/apiv2/method/send_room_notification&#34;&gt;Send room notificationのリファレンス&lt;/a&gt;を確認しましょう。&lt;/p&gt;

&lt;p&gt;けっこう細かく設定できるので詳細はまた別記事などで紹介したいです。&lt;/p&gt;

&lt;p&gt;それでは、app.jsを実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さっきまでは&lt;code&gt;&amp;quot;color&amp;quot;: &amp;quot;green&amp;quot;&lt;/code&gt;でしたが&lt;code&gt;&amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;&lt;/code&gt;にしてみました。
背景が黄色になりますね。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回の背景色の変更もですが、&lt;a href=&#34;https://www.hipchat.com/docs/apiv2&#34;&gt;API Reference&lt;/a&gt;を見るとAPI経由で色々な機能が用意されていることがわかります。&lt;/p&gt;

&lt;p&gt;他のチャットツールだと通常利用の機能をAPIで再現できない場合などもありますが、HipChatは通常の利用以上にAPI経由の方が自由度が高い設計になっている気がします。&lt;/p&gt;

&lt;p&gt;Node.jsからもこんな形で簡単にBOT投稿ができるのでとりあえず簡単な通知などから作っていき、その様子もまたまとめていく予定です。&lt;/p&gt;

&lt;p&gt;乞うご期待 ￣ー￣)／&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。</title>
      <link>https://dotstud.io/blog/hipchat-bot-by-nodejs/</link>
      <pubDate>Tue, 04 Oct 2016 10:00:39 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hipchat-bot-by-nodejs/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudio代表の&lt;a href=&#34;http://qiita.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;先日のLINE DEVELOPER DAYでのLINEのAPIの盛り上がりがありましたが、2016年はチャットボットが各所ですごく盛り上がっています。そんな話題に乗り遅れないようにチャットボットを作っていこうと思います。&lt;/p&gt;

&lt;p&gt;dotstudioでは社内チャットにAtlasssian社の「HipChat」を利用しています。2010年に登場したツールですが、僕が愛用している（メッセンジャー管理アプリの）「Franz」に登録されているので選びました。&lt;/p&gt;

&lt;p&gt;「業界的にSlackじゃないの？」ってなりそうですが、Slackのユーザー課金は金銭的にけっこう辛くなっていくのが目に見えるので早期からSlackをやめました。まだSlackで消耗してるの?って言いたいです（強がり）。&lt;/p&gt;

&lt;p&gt;HipChatもSlack同様にインテグレーション追加やBot作成のAPIがかなり豊富です。&lt;/p&gt;

&lt;p&gt;今日はNode.jsからHipChatに投稿する方法を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;hipchatのインテグレーション追加をする&#34;&gt;HipChatのインテグレーション追加をする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.hipchat.com/&#34;&gt;https://www.hipchat.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HipChatでご自身のチームにログインしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/01.png&#34; alt=&#34;&#34; /&gt;
メニューから &lt;strong&gt;インテグレーション&lt;/strong&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build your own integration&lt;/strong&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プルダウンメニューからBOTを作るROOMを選択&lt;/strong&gt;して &lt;strong&gt;Name your integration&lt;/strong&gt;にBOTの名前を入れましょう。 一部room名を黒塗りにしてますが察してください（笑）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/04.png&#34; alt=&#34;&#34; /&gt;
作成するとアクセストークンなどが生成されます。&lt;/p&gt;

&lt;p&gt;ひとまず&lt;strong&gt;Try it!ボタン&lt;/strong&gt;を押してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/05.png&#34; alt=&#34;&#34; /&gt;
指定したROOMにメッセージが流れたら成功です。&lt;/p&gt;

&lt;p&gt;それにしてもこの絵文字のセンスいいですよね。&lt;/p&gt;

&lt;h2 id=&#34;curlコマンドでの実行を試す&#34;&gt;curlコマンドでの実行を試す&lt;/h2&gt;

&lt;p&gt;先ほどの画面の &lt;strong&gt;Try it out&lt;/strong&gt;の項目に書いてあるcurlコマンドを実行することでAPI経由のPOSTを再現できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -d &#39;{&amp;quot;color&amp;quot;:&amp;quot;green&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;My first notification (yey)&amp;quot;,&amp;quot;notify&amp;quot;:false,&amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;}&#39; -H &#39;Content-Type: application/json&#39; https://xxxxxx.hipchat.com/v2/room/XXXXXXX/notification?auth_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ご自身の情報に置き換えて（むしろページのものをコピペして）ターミナ
ルから実行すると先ほどの&lt;strong&gt;Try it!ボタン&lt;/strong&gt;を押した際と同じ挙動をしてくれます。&lt;/p&gt;

&lt;h2 id=&#34;node-jsからpostリクエストしてみる&#34;&gt;Node.jsからPOSTリクエストしてみる&lt;/h2&gt;

&lt;p&gt;実際にBotとして活用するにあたり、他の処理と連携させる必要があるのでプログラム経由でPOSTしてみます。dotstudioではNode.jsをよく利用しているのでNode.jsから先ほどのAPIにアクセスしてます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;request&lt;/code&gt;や&lt;code&gt;SuperAgent&lt;/code&gt;などHTTPリクエストをいい感じにしてくれる外部モジュールはいくつもありますが、今回は&lt;a href=&#34;http://qiita.com/n0bisuke/items/33a6a6da1d6f455105f9&#34;&gt;Node.jsでJSONデータをHTTP POSTするメモ&lt;/a&gt;にもまとめたように外部モジュールに依存せずにNode.jsに組み込まれてる&lt;code&gt;http&lt;/code&gt;のみで実装してみます。&lt;/p&gt;

&lt;p&gt;app.jsは以下のようになります。HOSTやPATHを先ほどの情報に置き換えて実行して見ましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;

const http = require(&#39;http&#39;);
const HOST = `xxxxx.hipchat.com`;
const PATH = `/v2/room/XXXXXXX/notification?auth_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXX`;

let postData = {
    &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;notify&amp;quot;: false,
    &amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
};

let postDataStr = JSON.stringify(postData);
let options = {
    host: HOST,
    port: 80,
    path: PATH,
    method: &#39;POST&#39;,
    headers: {
        &#39;Content-Type&#39;: &#39;application/json&#39;,
        &#39;Content-Length&#39;: postDataStr.length
    }
};

let req = http.request(options, (res) =&amp;gt; {
  console.log(&#39;STATUS: &#39; + res.statusCode);
  console.log(&#39;HEADERS: &#39; + JSON.stringify(res.headers));
  res.setEncoding(&#39;utf8&#39;);
  res.on(&#39;data&#39;, (chunk) =&amp;gt; {
    console.log(&#39;BODY: &#39; + chunk);
  });
});
req.on(&#39;error&#39;, (e) =&amp;gt; {
  console.log(&#39;problem with request: &#39; + e.message);
});
req.write(postDataStr);
req.end();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7~12行目のPOSTデータのパラメーターは&lt;a href=&#34;https://www.hipchat.com/docs/apiv2/method/send_room_notification&#34;&gt;Send room notificationのリファレンス&lt;/a&gt;を確認しましょう。&lt;/p&gt;

&lt;p&gt;けっこう細かく設定できるので詳細はまた別記事などで紹介したいです。&lt;/p&gt;

&lt;p&gt;それでは、app.jsを実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さっきまでは&lt;code&gt;&amp;quot;color&amp;quot;: &amp;quot;green&amp;quot;&lt;/code&gt;でしたが&lt;code&gt;&amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;&lt;/code&gt;にしてみました。
背景が黄色になりますね。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回の背景色の変更もですが、&lt;a href=&#34;https://www.hipchat.com/docs/apiv2&#34;&gt;API Reference&lt;/a&gt;を見るとAPI経由で色々な機能が用意されていることがわかります。&lt;/p&gt;

&lt;p&gt;他のチャットツールだと通常利用の機能をAPIで再現できない場合などもありますが、HipChatは通常の利用以上にAPI経由の方が自由度が高い設計になっている気がします。&lt;/p&gt;

&lt;p&gt;Node.jsからもこんな形で簡単にBOT投稿ができるのでとりあえず簡単な通知などから作っていき、その様子もまたまとめていく予定です。&lt;/p&gt;

&lt;p&gt;乞うご期待 ￣ー￣)／&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>秋はモノづくりの聖地、中国・深センへいこう！ #MakerFaireShenzhen に参加したい日本人向けまとめ</title>
      <link>https://dotstud.io/blog/maker-faire-shenzhen-2016/</link>
      <pubDate>Mon, 03 Oct 2016 10:00:57 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/maker-faire-shenzhen-2016/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioモノづくり担当・うこです。&lt;/p&gt;

&lt;p&gt;dotstudioはこのたび、来る2016年10月21〜23日に中国・広東省深セン市で開催される「&lt;a href=&#34;http://www.makerfaireshenzhen.com/&#34;&gt;Maker Faire Shenzhen 2016&lt;/a&gt;」に出展いたします。そこで、深センへの行き方・滞在についてざっくりまとめてみました！&lt;/p&gt;

&lt;p&gt;MakerFaireShenzhenに参加したい方はぜひ参考にしてくだされば幸いです。&lt;/p&gt;

&lt;p&gt;※僕は中国への渡航は初めてですので、調べた限りの情報になってしまうことをご了承ください。&lt;/p&gt;

&lt;h2 id=&#34;maker-faire-shenzhenとは&#34;&gt;Maker Faire Shenzhenとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/027/01_mfsz.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://makerfaire.com/&#34;&gt;Maker Faire&lt;/a&gt;はモノづくりの祭典であり、世界のあらゆる場所で開催され個人のDIYプロジェクトから大手メーカーまでが参加する大規模なイベントです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.makerfaireshenzhen.com/program&#34;&gt;Maker Faire Shenzhen&lt;/a&gt;（以下MFSZ）は、主に世界の大都市で開催される &amp;ldquo;Featured Maker Faires&amp;rdquo; のひとつで、位置づけとしては東京で毎年おこなわれるMaker Faire Tokyoと同じようなものとなります。が、世界一の電気街を擁する深センで行われるものですから、ギーク度ははるかに高くなると思われます。&lt;/p&gt;

&lt;p&gt;今年は10月21日から23日の3日間にかけておこなわれます。&lt;/p&gt;

&lt;h2 id=&#34;mfszの日程&#34;&gt;MFSZの日程&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.makerfaireshenzhen.com/program&#34;&gt;公式ページ（活动日程）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9月23日時点ではComing soonとなっています。&lt;br /&gt;
更新され次第こちらにも和訳して掲載する予定です。&lt;/p&gt;

&lt;h2 id=&#34;深セン市について&#34;&gt;深セン市について&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%B7%B1%E3%82%BB%E3%83%B3%E5%B8%82&#34;&gt;深セン市 - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;中国の南方・広東省の海沿いにある大都市で、香港と国境を接しています。経済特区に指定されていて、香港と中国本土の中間の雰囲気をもつ地域になっているそうです。&lt;/p&gt;

&lt;p&gt;最近は安くて性能の良いスマートフォンがたくさん世の中に出回っていますが、そのほとんどがここ深センで作られており、電子デバイスを生み出す世界最大級の街となっています。&lt;/p&gt;

&lt;p&gt;唯一ある深セン宝安空港には、日本からは直行便を使うと4時間ほどで到達できます。日本との時差は1時間です。日本が1時間進んでいます。&lt;/p&gt;

&lt;h3 id=&#34;観光情報-世界最大の電脳街&#34;&gt;観光情報・世界最大の電脳街&lt;/h3&gt;

&lt;p&gt;深センで観光といえばやはり電気街ですが、それは日本最大の電気街・秋葉原の30倍ほどの規模があるとのことです。場所は深セン市の華強北路というところで、香港国境から30分もかからない場所にあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gigazine.net/news/20150725-shenzhen-computing-market/&#34;&gt;スマホ・PC・ドローンなど秋葉原30個分の規模であらゆるガジェットが手に入る深センの魔窟・電脳エリア「華強北路」に行ってきました - GIGAZINE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dospara.co.jp/monotech/review/11749.html&#34;&gt;世界最大の電脳街「深圳」訪問記 －その1 行き方編｜ものテクアーカイブス｜パソコン（PC）通販のドスパラ【公式】&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;日本から会場までのアクセス&#34;&gt;日本から会場までのアクセス&lt;/h2&gt;

&lt;p&gt;会場: &lt;a href=&#34;http://www.seaworldchina.com/&#34;&gt;深セン南山海上世界(Shenzhen Nanshan Sea World)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;地図: &lt;a href=&#34;https://www.google.co.jp/maps/place/%E6%B5%B7%E4%B8%8A%E4%B8%96%E7%95%8C%E5%BA%83%E5%A0%B4/@22.4839737,113.9158243,17.94z/data=!4m12!1m6!3m5!1s0x3403efa2f7f80fbf:0x990220edd67deca2!2sSea+World!8m2!3d22.485112!4d113.915028!3m4!1s0x0:0xf4d8281edc6c46a1!8m2!3d22.4832903!4d113.9161272&#34;&gt;Google Maps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;深セン市南山区にある大型商業施設「海上世界」が会場となっています。この施設内にある広場がMFSZのメイン会場になるだろうと考えられますが、公式からはまだ情報が出ていません。&lt;/p&gt;

&lt;p&gt;参考ページ: &lt;a href=&#34;http://maniac-hongkong.com/spot/hai-shang-shi-jie-2.php&#34;&gt;[深セン] 新しく生まれ変わった海上世界でオシャレな深センを満喫 ｜ マニアック香港 &amp;amp; 深セン&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;深圳へのアプローチは空路だと2パターン&#34;&gt;深圳へのアプローチは空路だと2パターン&lt;/h3&gt;

&lt;iframe src=&#34;https://www.google.com/maps/embed?pb=!1m16!1m12!1m3!1d254312.84150763918!2d113.84560812713676!3d22.448879150727553!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!2m1!1z56m65riv!5e0!3m2!1sja!2sjp!4v1475034291053&#34; width=&#34;715&#34; height=&#34;400&#34; frameborder=&#34;0&#34; style=&#34;border:0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;地図の中心が深セン市ですが、最寄りの空港は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;深セン宝安国際空港&lt;/li&gt;
&lt;li&gt;香港国際機場&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2箇所が考えられます。前者のほうが深センの市街地へは行きやすいのですが、渡航費の安さと時間調整の関係（便が多い）から、香港国際機場を利用して深センに向かおうと思います。&lt;/p&gt;

&lt;h3 id=&#34;香港を経由して深セン-中国本土-へ行く際の基本情報&#34;&gt;香港を経由して深セン（中国本土）へ行く際の基本情報&lt;/h3&gt;

&lt;p&gt;香港と深センは同じ国ではありますが地域としては分離されていますので、国境があり法律や通貨が違います。基本的には香港に入国→国境で中国に入国 という手続きを踏むことになりますが、香港機場からフェリーで直接深センに行く場合（深セン蛇口経由）は、香港に入国せずに直接本土側に入国できるようです。&lt;/p&gt;

&lt;p&gt;参考ページ: &lt;a href=&#34;http://www.e-asianmarket.com/hk/hkshenzhen01.html&#34;&gt;香港から深圳・広州への移動 | アジア写真帳(香港)&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;香港側&#34;&gt;香港側&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;広東語（繁体字）・英語&lt;/li&gt;
&lt;li&gt;通貨はHKD（香港ドル）・1HKD = 約12.94円（2016年9月20日現在）&lt;/li&gt;
&lt;li&gt;日本人の渡航は90日以内の滞在であればビザは不要&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;深セン-本土-側&#34;&gt;深セン（本土）側&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;中国語普通話もしくは広東語（簡体字）&lt;/li&gt;
&lt;li&gt;通貨は人民元・1元 = 約15.05円（9月20日現在）&lt;/li&gt;
&lt;li&gt;日本人の渡航は15日以内の滞在であればビザは不要&lt;/li&gt;
&lt;li&gt;GoogleやFacebookなどのサービスは本土側では政府により遮断されていて利用できないため、手持ちの通信機器には予めVPNを設定しておく必要がある&lt;br /&gt;
参考ページ: &lt;a href=&#34;http://easyrunner.jp/archives/20141205/3402&#34;&gt;中国に行くのでVPNを検討してみた – Easy Running&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mfsz出展のための行程について&#34;&gt;MFSZ出展のための行程について&lt;/h2&gt;

&lt;p&gt;dotstudioではメンバー5人が参加するため、航空券・宿泊施設ともに5人で予約が可能なところを調べました。&lt;/p&gt;

&lt;p&gt;ひとりで観光しつつ参加される方だと、もう少し選択肢も増えるかもしれませんね。&lt;/p&gt;

&lt;h3 id=&#34;日程表&#34;&gt;日程表&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;日付（10月）&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;時間帯&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;19日（水）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;午前中&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;成田→香港→深セン&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;20日（木）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;終日&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;会場準備 &amp;amp; 観光&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;21日（金）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;終日&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MFSZ 1日目&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;22日（土）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;終日&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MFSZ 2日目&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;23日（日）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;終日&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MFSZ 3日目&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;24日（月）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;午後&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深セン→香港→成田&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以上のように5泊6日の日程となります。&lt;/p&gt;

&lt;h3 id=&#34;1人あたりの渡航費-宿泊費の概算&#34;&gt;1人あたりの渡航費+宿泊費の概算&lt;/h3&gt;

&lt;p&gt;先述の5泊6日の日程案で、無難かつ安めを狙ったとすると&lt;/p&gt;

&lt;p&gt;渡航費：JPY30000/往復（香港航空/エバー航空）&lt;br /&gt;
宿泊費：JPY8000/5泊&lt;br /&gt;
合計　：約JPY38000-40000&lt;/p&gt;

&lt;p&gt;となります。この概算には香港-深センの交通費、および食費などは含みません。
渡航のための航空券、宿泊費については下記をご参照ください。&lt;/p&gt;

&lt;h3 id=&#34;東京-成田-香港-深セン&#34;&gt;東京（成田）→香港→深セン&lt;/h3&gt;

&lt;iframe src=&#34;https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d118043.33218215949!2d113.97174194902799!3d22.396855844975594!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e6!4m5!1s0x3403e2f3cc46c69d%3A0xf9f590821892369e!2z6aaZ5riv5Zu96Zqb5qmf5aC0IChIS0cpIDEgU2t5IFBsYXphIFJkLCDpppnmuK8!3m2!1d22.308047!2d113.9184808!4m5!1s0x3403efa2f7f80fbf%3A0x990220edd67deca2!2zU2VhIFdvcmxkLCBTaGVrb3UsIOWNl-WxseWMuiDmt7Hjgrvjg7Mg5bqD5p2x55yBIOS4reiPr-S6uuawkeWFseWSjOWbvQ!3m2!1d22.485111999999997!2d113.91502799999999!5e0!3m2!1sja!2sjp!4v1475034576799&#34; width=&#34;715&#34; height=&#34;400&#34; frameborder=&#34;0&#34; style=&#34;border:0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;成田空港→香港国際機場→深セン のルートがこちらです。経路検索をすると、かなり遠回りに陸続きで香港を経由して深センに入るルートが示されます。&lt;/p&gt;

&lt;p&gt;今回の目的地は深セン・南山区付近ですが、ちょうどこの地区には蛇口という港があり、香港機場から直接フェリーが出ていますので、こちらを利用しようと思います。待ち時間が30分ほどかかりますが、深センまでも30分で行けるため合計1時間程度と陸路に比べ早く行けます。&lt;/p&gt;

&lt;p&gt;ただし、先述した電脳街までは電車で1時間ほどかかりますので、まず観光をする場合やホテルがそちら側にある場合は、このルートのほうが多少時間がかかってしまうことになります。&lt;/p&gt;

&lt;p&gt;参考ページ: &lt;a href=&#34;http://www.e-asianmarket.com/hk/hkshenzhen13.html&#34;&gt;香港空港から深圳・広州へ≪フェリールート≫ | アジア写真帳(香港)&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;往復航空券代-参考&#34;&gt;往復航空券代（参考）&lt;/h4&gt;

&lt;p&gt;すべて9月20日時点での5人分の空席状況&amp;amp;エコノミークラス価格です。海外格安航空券は&lt;a href=&#34;http://www.tour.ne.jp/w_air/&#34;&gt;トラベルコちゃん&lt;/a&gt;でいろいろなツアー会社の往復セット券を比較するのが個人的にはおすすめです。今回もこちらのサイトを利用してみました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;航空会社&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;キャリア種別&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;経由有無&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;総額JPY(5人)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1人あたりJPY&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;香港エクスプレス航空（UO）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LCC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直行便&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19480&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ジェットスター・ジャパン（GK）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LCC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直行便&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;108454&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21691&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;バニラエア（JW）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LCC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直行便&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125607&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25121&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;香港航空（HX）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直行便&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;147450&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29490&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;エバー航空（BR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;乗継便(台北)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;177650&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29490&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;乗継1時間20分&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;JAL日本航空（JL）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直行便&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;194729&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;38946&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ANA全日空（NH）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直行便&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;196181&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39236&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;キャセイパシフィック航空（CX）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直行便&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;200550&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40110&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;宿泊費-参考&#34;&gt;宿泊費（参考）&lt;/h4&gt;

&lt;p&gt;2部屋5人で9月20日時点での空室状況&amp;amp;価格です。MFSZ会場からほど近く、値段も手頃なホテルを選んでいます。海外ホテル予約も様々なサイトがありますが、日本語利用可能で格安なところを探すとなると&lt;a href=&#34;https://www.agoda.com/&#34;&gt;Agoda.com&lt;/a&gt;が個人的なおすすめサイトとなります。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;ホテル名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;場所&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ベッドタイプ&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1部屋JPY/泊&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;定員&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5泊JPY/人&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;備考&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shenzhen Tianhua Youth Apartment&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市羅湖区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4ベッドドミトリー&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;371&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1855&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;無料Wi-Fi/英語可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://booking.com/46d4e07fc12ae&#34;&gt;booking.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Tianhua Youth Apartment Qingyou Branch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市羅湖区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3*シングル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1031&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1718&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;無料Wi-Fi/英語可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://booking.com/46d4e07fc12ae&#34;&gt;booking.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shenzhen Fuqiao Hotel&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市宝安区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3*シングル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3340&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;無料W-iFi/英語不可?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://booking.com/06d1354ea6d8aa&#34;&gt;booking.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Green Oasis Hotel&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市宝安区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2*シングル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2145&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5363&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;無料Wi-Fi/英語可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.greenoasis.hostel.com/&#34;&gt;OFFICIAL&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Yuejia Business Hotel&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市羅湖区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3*シングル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3230&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5383&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;無料Wi-Fi（共用部のみ）/英語可/朝食付&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.agoda.com/ja-jp/yuejia-business-hotel/hotel/shenzhen-cn.html&#34;&gt;agoda.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Dushi Inn&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市南山区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3*シングル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3466&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5777&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;会場最寄/Wi-Fi不明/英語可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.agoda.com/ja-jp/dushi-inn/hotel/shenzhen-cn.html&#34;&gt;agoda.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;James Joyce Coffete Baogang Center Branch Hotel&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市宝安区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2*シングル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2866&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7165&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;無料Wi-Fi/英語可/朝食付&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://jp.hotels.com/ho481436/jeimuzu-joisu-kofiteru-zhe-fei-jiu-dian-shensen-zhong-guo/&#34;&gt;Hotels.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Aviation City Hotel&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市宝安区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3*シングル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3402&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5670&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;有線LAN/英語可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.agoda.com/ja-jp/aviation-city-hotel/hotel/shenzhen-cn.html&#34;&gt;agoda.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;GreenTree Alliance Shenzhen Shekou Sea World Hotel&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市南山区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2*セミダブル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3477&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8693&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;会場最寄/無料Wi-Fi/英語可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.agoda.com/ja-jp/greentree-alliance-shenzhen-shekou-sea-world-hotel/hotel/shenzhen-cn.html&#34;&gt;agoda.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Hanting Hotel Shenzhen Nanshan Avenue Branch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深圳市南山区&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2*シングル&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3779&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9448&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;会場最寄/無料Wi-Fi/英語可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://booking.com/bca51de71b582&#34;&gt;booking.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;おまけ-成田-深セン&#34;&gt;おまけ：成田→深セン&lt;/h3&gt;

&lt;iframe src=&#34;https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d117905.65305393998!2d113.82451963209104!3d22.558461733551447!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e6!4m5!1s0x3403efa2f7f80fbf%3A0x990220edd67deca2!2sSea+World%2C+SheKou%2C+Nanshan+Qu%2C+Shenzhen+Shi%2C+%E4%B8%AD%E5%9B%BD+518067!3m2!1d22.485111999999997!2d113.91502799999999!4m5!1s0x3403ead8aa1d54f7%3A0xfc263ee96a7dc355!2z5rex44K744Oz5a6d5a6J5Zu96Zqb56m65rivLCDkuK3lm70gR3Vhbmdkb25nLCBTaGVuemhlbiwgQmFvJ2Fu!3m2!1d22.636827999999998!2d113.814606!5e0!3m2!1sja!2sjp!4v1475035650846&#34; width=&#34;715&#34; height=&#34;400&#34; frameborder=&#34;0&#34; style=&#34;border:0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;香港空港経由と比べて、本数が少なく乗り継ぎをする便が多いです。主に、深セン航空・成田-深セン便が利用可能で、一部ANAとのコードシェア便で運行されているようです。&lt;/p&gt;

&lt;p&gt;成田と香港の往復が最安で2万円台なのに対し、深セン空港往復便は最安で3万円台ほどになります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;dotstudioメンバーの渡航のためにまとめてみた情報ですので、文量が多くなってしまいました。&lt;/p&gt;

&lt;p&gt;MFSZまで1ヶ月を切っていますが、まだ宿も飛行機も間に合います。意外と安く楽しむことができますので、ご興味を持たれた方はぜひ深センへ遊びに行ってみてくださいね！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>