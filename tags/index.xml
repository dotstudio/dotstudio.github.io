<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/tags/</link>
    <description>Recent content on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Wed, 07 Sep 2016 10:00:00 +0900</lastBuildDate>
    <atom:link href="https://dotstud.io/tags/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pokemon GOで近くにポケモンが出たらPepperが教えてくれる仕組みをNode.jsだけで作る</title>
      <link>https://dotstud.io/blog/pepper-pokemon-go-notice/</link>
      <pubDate>Wed, 07 Sep 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/pepper-pokemon-go-notice/</guid>
      <description>

<p>こんにちは、dotstduio代表ののびすけです。</p>

<p>みなさん、Pokemon GOやってますか?　僕はけっこう作業ゲーな気がしていて、最近飽き気味だったんですよね。現在だとLv.18で止まってしまっている中途半端組です。</p>

<p>そんな感じなので、僕は「ポケモンが出てきたら教えてくれる仕組み」があるといいなって思い、PepperとPokemon GOを繋げて <strong>近くにポケモンが出現したら通知する</strong> 仕組みを作ってみました。</p>

<p>Slack通知とかはたまに記事で見かけたんですけど、たまたまPepperが部屋にいたので活用することにしました。なかなかPepperが手元にないかと思いますが、試せる人は試してみてください（笑）</p>

<h2 id="全体像と開発手順">全体像と開発手順</h2>

<p><img src="/img/blog/017/01_structure.png" alt="" /></p>

<p>やったことは次の3つです。</p>

<ul>
<li>1. Node.jsを使い、Pokemon GOのAPIから近くのポケモンを探す</li>
<li>2. ポケモンを見つけたら、ポケモン名を日本語変換する</li>
<li>3. Nightmareを使い、Pepperを制御するブラウザアプリを自動制御して喋らせる</li>
</ul>

<p>このときはMac OS 10.11のNode.js6.3.1で試しました。ポイントは Choregraphe（Pepperのアプリ開発者向けアプリ）を使わずに <strong>Node.jsだけで完結する</strong> ところだと思います。単純に喋らせるだけならChoregraphe使わなくてもなんとかなりますね。</p>

<p>※きちんと開発をするならChoregrapheが必須です。</p>

<script async class="speakerdeck-embed" data-id="93daabf2deac4ac68cb016ee2d2109d9" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>先日Amazonで開催したIoTの勉強会「IoTLT」で話した内容をまとめました。そのときのスライドも貼っておくので、参考までにご覧ください。完全にLT駆動開発です（笑）</p>

<h2 id="作り方">作り方</h2>

<h3 id="1-pokemon-g0のapiをnode-jsで使う">1. Pokemon G0のAPIをNode.jsで使う</h3>

<p>npmでPokemon G0を調べるとちょくちょくモジュールが見つかります。中でもメンテナンスされていそうな<a href="https://www.npmjs.com/package/pokemon-go-node-api">node-pokemon-go-api</a>を使いました。</p>

<p>まずは<code>ポケモンが出たら〇〇する</code>トリガーを作ります。以下のコマンドでインストールしましょう。</p>

<pre><code>npm install pokemon-go-node-api --save
</code></pre>

<p>実際に使う部分は、以下の僕のQiitaの記事を参考に進めてください。</p>

<p><a href="http://qiita.com/n0bisuke/items/31daa590056d3d5d8336">Pokemon GOで近くにポケモンが出たら〇〇するトリガーをNode.jsで作る</a></p>

<h4 id="index-js">index.js</h4>

<pre><code>'use strict';

const PokemonGO = require('pokemon-go-node-api');

// using var so you can login with multiple users
let a = new PokemonGO.Pokeio();

//Set environment variables or replace placeholder text
let location = {
    type: 'name',
    name: 'Tokyo/Taito-ku' //東京都台東区
};

let username = '登録したGoogleアカウントのメールアドレス';
let password = '登録したGoogleアカウントのパスワード';
let provider = 'google';

a.init(username, password, location, provider, (err) =&gt; {
    if (err) throw err;

    console.log('1[i] Current location: ' + a.playerInfo.locationName);
    console.log('1[i] lat/long/alt: : ' + a.playerInfo.latitude + ' ' + a.playerInfo.longitude + ' ' + a.playerInfo.altitude);

    a.GetProfile((err, profile) =&gt; {
        if (err) throw err;

        console.log('1[i] Username: ' + profile.username);
        console.log('1[i] Poke Storage: ' + profile.poke_storage);
        console.log('1[i] Item Storage: ' + profile.item_storage);

        let poke = 0;
        if (profile.currency[0].amount) {
            poke = profile.currency[0].amount;
        }

        console.log('1[i] Pokecoin: ' + poke);
        console.log('1[i] Stardust: ' + profile.currency[1].amount);

        setInterval(() =&gt; {
            a.Heartbeat((err,hb)=&gt;{
                if(err) {
                    console.log(err);
                }

                let texts = '';
                for (var i = hb.cells.length - 1; i &gt;= 0; i--) {
                    if(hb.cells[i].NearbyPokemon[0]) {
                        //console.log(a.pokemonlist[0])
                        let pokemon = a.pokemonlist[parseInt(hb.cells[i].NearbyPokemon[0].PokedexNumber)-1];
                        console.log('1[+] There is a ' + pokemon.name + ' near.');
                        //この辺にWebhookとか噛ませればSlack通知とかも余裕ですね。
                    }
                }
            });
        }, 5000);

    });
});
</code></pre>

<p>これを実行してみると、</p>

<p><img src="/img/blog/017/02_result.png" alt="" /></p>

<p>一番下に <strong>There is a Pinsir near.</strong> と表示されているのがわかると思います。
どうやらPinsirが近くにいるようです。</p>

<h3 id="2-気になる人は-ポケモン名を日本語化する">2. （気になる人は）ポケモン名を日本語化する</h3>

<p>ここで「Pinsirってなんだ」という話になるんですけど、ググったらカイロスの英語名らしいですね。</p>

<p><img src="/img/blog/017/03_pinsir.png" alt="" /></p>

<p><a href="https://gist.github.com/PonDad/93922f63c3143489e30c3716d3d176d2">GitHubGistのPonDad氏</a>が、ポケモンの英語名と日本語名を変換するデータをJSONとして公開していたので、ありがたく使いましょう。index.jsの<a href="https://github.com/n0bisuke/pepper_pokemon_go/blob/master/index.js#L54-L56">ここ</a>で使ってます。</p>

<h3 id="3-nightmareでpepperを喋らせる">3. NightmareでPepperを喋らせる</h3>

<p>Nightmareはブラウザの自動テストをおこなうツールです。ログイン処理や、ボタンを押した際の挙動などを自動テストする際に使います。PhantomJSが有名ですが、そのラッパーライブラリでかなり使いやすいです。</p>

<p>サンプルなどを見ると、Nightmareを使うときは<a href="https://www.npmjs.com/package/vo">vo</a>というモジュールを使ってGeneratorで書くのが主流っぽいです。以下のコマンドでインストールしてください。Nightmareはv2からElectronベースになったということもあり、インストールには結構時間がかかります。</p>

<pre><code>npm i nightmare vo --save
</code></pre>

<p>以下のQiitaの記事も参考にしてみてください。</p>

<p><a href="http://qiita.com/n0bisuke/items/8a7a52321380e5cf0379">Nightmareがv2(Electronベース)になり、使いやすく感動したのでLIGブログのPV/UUデータ取得を自動化してみた。
</a></p>

<p><img src="/img/blog/017/04_pepper_controller.png" alt="" /></p>

<p>接続先は<a href="https://github.com/kuetsuhara">kuetsuharaさん</a>の<a href="http://kuetsuhara.github.io/pepperConnect.html">ペッパーコントローラーブラウザアプリ</a>です。このブラウザアプリは同じIP内にあるPCからなら、ブラウザだけでPepperをある程度操作できるかなり便利なものです。</p>

<h4 id="pepper-connect-js">pepper_connect.js</h4>

<pre><code>'use strict'

const Nightmare = require('nightmare');
const vo = require('vo');
const IP = '192.168.179.29';

function pepper(text) {
    vo(function* () {
    const nightmare = Nightmare({ show: true });
    const link = yield nightmare
        .goto('http://kuetsuhara.github.io/pepperConnect.html')
        .insert('input#pepperIP','')
        .type('input#pepperIP', ip)
        .click('button[onclick=&quot;connect()&quot;]')
        .wait(4000)
        .type('input#sayText', text)
        .click('button[onclick=&quot;say()&quot;]')
        .evaluate(() =&gt; {
            return document.getElementsByClassName('ac-21th')[0].href;
        });
    yield nightmare.end();
        return link;
    })((err, result) =&gt; {
        if (err) return console.log(err);
        console.log(result);
    });   
}

pepper(&quot;こんばんわ&quot;);

//モジュール化する場合
//module.exports = pepper;
</code></pre>

<p>こんな感じで記述しました。192.168.179.29がPepperのIPになります。</p>

<p>ちなみにPepperのIPアドレスは、タブレットの裏側の胸にあるボタンを押すとPepperが喋って教えてくれます。</p>

<h3 id="実行して試してみる">実行して試してみる</h3>

<p>ちなみに、このときはMac OS 10.11上のNode.js6.3系で試しました。</p>

<pre><code>node pepper_connect.js
</code></pre>

<p>この時点で実行すると、Nightmare経由でPepperに自動接続して、「こんばんわ」と喋ってくれると思います。</p>

<p><img src="/img/blog/017/05_result.gif" alt="" /></p>

<p><a href="https://goo.gl/photos/6GKXDMMbTGPtXf3A6">こちら</a>で実際に動いている動画を見られます。</p>

<h3 id="コードのまとめとデモ">コードのまとめとデモ</h3>

<p><a href="https://github.com/n0bisuke/pepper_pokemon_go">こちら</a>に今回使ったコードをまとめておきました。</p>

<pre><code>git clone git@github.com:n0bisuke/pepper_pokemon_go.git
cd pepper_pokemon_go
npm i
</code></pre>

<p>のあと、index.jsのユーザー名とパスワードを入力したのち</p>

<pre><code>node index.js
</code></pre>

<p>で動作すると思います。動かない場合は<a href="https://twitter.com/n0bisuke">@n0bisuke</a>まで！</p>

<h2 id="まとめ">まとめ</h2>

<p>Nightmareを使えば、Node.jsだけでも、ブラウザコントロールが可能なロボットやハードウェアの簡単な接続はできそうだなと感じました。</p>

<p>実際のところ、Pepperと同じネットワークにNode.js（とNightmare）が動く環境が必要なので、運用などは難しそうです。しかし、喋ってくれること自体は通知として気づきやすいので、かなりアリだと思っています。</p>

<p>試せる方はぜひ試してみてください！　それでは。</p>
</description>
    </item>
    
    <item>
      <title>Pokemon GOで近くにポケモンが出たらPepperが教えてくれる仕組みをNode.jsだけで作る</title>
      <link>https://dotstud.io/blog/pepper-pokemon-go-notice/</link>
      <pubDate>Wed, 07 Sep 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/pepper-pokemon-go-notice/</guid>
      <description>

<p>こんにちは、dotstduio代表ののびすけです。</p>

<p>みなさん、Pokemon GOやってますか?　僕はけっこう作業ゲーな気がしていて、最近飽き気味だったんですよね。現在だとLv.18で止まってしまっている中途半端組です。</p>

<p>そんな感じなので、僕は「ポケモンが出てきたら教えてくれる仕組み」があるといいなって思い、PepperとPokemon GOを繋げて <strong>近くにポケモンが出現したら通知する</strong> 仕組みを作ってみました。</p>

<p>Slack通知とかはたまに記事で見かけたんですけど、たまたまPepperが部屋にいたので活用することにしました。なかなかPepperが手元にないかと思いますが、試せる人は試してみてください（笑）</p>

<h2 id="全体像と開発手順">全体像と開発手順</h2>

<p><img src="/img/blog/017/01_structure.png" alt="" /></p>

<p>やったことは次の3つです。</p>

<ul>
<li>1. Node.jsを使い、Pokemon GOのAPIから近くのポケモンを探す</li>
<li>2. ポケモンを見つけたら、ポケモン名を日本語変換する</li>
<li>3. Nightmareを使い、Pepperを制御するブラウザアプリを自動制御して喋らせる</li>
</ul>

<p>このときはMac OS 10.11のNode.js6.3.1で試しました。ポイントは Choregraphe（Pepperのアプリ開発者向けアプリ）を使わずに <strong>Node.jsだけで完結する</strong> ところだと思います。単純に喋らせるだけならChoregraphe使わなくてもなんとかなりますね。</p>

<p>※きちんと開発をするならChoregrapheが必須です。</p>

<script async class="speakerdeck-embed" data-id="93daabf2deac4ac68cb016ee2d2109d9" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>先日Amazonで開催したIoTの勉強会「IoTLT」で話した内容をまとめました。そのときのスライドも貼っておくので、参考までにご覧ください。完全にLT駆動開発です（笑）</p>

<h2 id="作り方">作り方</h2>

<h3 id="1-pokemon-g0のapiをnode-jsで使う">1. Pokemon G0のAPIをNode.jsで使う</h3>

<p>npmでPokemon G0を調べるとちょくちょくモジュールが見つかります。中でもメンテナンスされていそうな<a href="https://www.npmjs.com/package/pokemon-go-node-api">node-pokemon-go-api</a>を使いました。</p>

<p>まずは<code>ポケモンが出たら〇〇する</code>トリガーを作ります。以下のコマンドでインストールしましょう。</p>

<pre><code>npm install pokemon-go-node-api --save
</code></pre>

<p>実際に使う部分は、以下の僕のQiitaの記事を参考に進めてください。</p>

<p><a href="http://qiita.com/n0bisuke/items/31daa590056d3d5d8336">Pokemon GOで近くにポケモンが出たら〇〇するトリガーをNode.jsで作る</a></p>

<h4 id="index-js">index.js</h4>

<pre><code>'use strict';

const PokemonGO = require('pokemon-go-node-api');

// using var so you can login with multiple users
let a = new PokemonGO.Pokeio();

//Set environment variables or replace placeholder text
let location = {
    type: 'name',
    name: 'Tokyo/Taito-ku' //東京都台東区
};

let username = '登録したGoogleアカウントのメールアドレス';
let password = '登録したGoogleアカウントのパスワード';
let provider = 'google';

a.init(username, password, location, provider, (err) =&gt; {
    if (err) throw err;

    console.log('1[i] Current location: ' + a.playerInfo.locationName);
    console.log('1[i] lat/long/alt: : ' + a.playerInfo.latitude + ' ' + a.playerInfo.longitude + ' ' + a.playerInfo.altitude);

    a.GetProfile((err, profile) =&gt; {
        if (err) throw err;

        console.log('1[i] Username: ' + profile.username);
        console.log('1[i] Poke Storage: ' + profile.poke_storage);
        console.log('1[i] Item Storage: ' + profile.item_storage);

        let poke = 0;
        if (profile.currency[0].amount) {
            poke = profile.currency[0].amount;
        }

        console.log('1[i] Pokecoin: ' + poke);
        console.log('1[i] Stardust: ' + profile.currency[1].amount);

        setInterval(() =&gt; {
            a.Heartbeat((err,hb)=&gt;{
                if(err) {
                    console.log(err);
                }

                let texts = '';
                for (var i = hb.cells.length - 1; i &gt;= 0; i--) {
                    if(hb.cells[i].NearbyPokemon[0]) {
                        //console.log(a.pokemonlist[0])
                        let pokemon = a.pokemonlist[parseInt(hb.cells[i].NearbyPokemon[0].PokedexNumber)-1];
                        console.log('1[+] There is a ' + pokemon.name + ' near.');
                        //この辺にWebhookとか噛ませればSlack通知とかも余裕ですね。
                    }
                }
            });
        }, 5000);

    });
});
</code></pre>

<p>これを実行してみると、</p>

<p><img src="/img/blog/017/02_result.png" alt="" /></p>

<p>一番下に <strong>There is a Pinsir near.</strong> と表示されているのがわかると思います。
どうやらPinsirが近くにいるようです。</p>

<h3 id="2-気になる人は-ポケモン名を日本語化する">2. （気になる人は）ポケモン名を日本語化する</h3>

<p>ここで「Pinsirってなんだ」という話になるんですけど、ググったらカイロスの英語名らしいですね。</p>

<p><img src="/img/blog/017/03_pinsir.png" alt="" /></p>

<p><a href="https://gist.github.com/PonDad/93922f63c3143489e30c3716d3d176d2">GitHubGistのPonDad氏</a>が、ポケモンの英語名と日本語名を変換するデータをJSONとして公開していたので、ありがたく使いましょう。index.jsの<a href="https://github.com/n0bisuke/pepper_pokemon_go/blob/master/index.js#L54-L56">ここ</a>で使ってます。</p>

<h3 id="3-nightmareでpepperを喋らせる">3. NightmareでPepperを喋らせる</h3>

<p>Nightmareはブラウザの自動テストをおこなうツールです。ログイン処理や、ボタンを押した際の挙動などを自動テストする際に使います。PhantomJSが有名ですが、そのラッパーライブラリでかなり使いやすいです。</p>

<p>サンプルなどを見ると、Nightmareを使うときは<a href="https://www.npmjs.com/package/vo">vo</a>というモジュールを使ってGeneratorで書くのが主流っぽいです。以下のコマンドでインストールしてください。Nightmareはv2からElectronベースになったということもあり、インストールには結構時間がかかります。</p>

<pre><code>npm i nightmare vo --save
</code></pre>

<p>以下のQiitaの記事も参考にしてみてください。</p>

<p><a href="http://qiita.com/n0bisuke/items/8a7a52321380e5cf0379">Nightmareがv2(Electronベース)になり、使いやすく感動したのでLIGブログのPV/UUデータ取得を自動化してみた。
</a></p>

<p><img src="/img/blog/017/04_pepper_controller.png" alt="" /></p>

<p>接続先は<a href="https://github.com/kuetsuhara">kuetsuharaさん</a>の<a href="http://kuetsuhara.github.io/pepperConnect.html">ペッパーコントローラーブラウザアプリ</a>です。このブラウザアプリは同じIP内にあるPCからなら、ブラウザだけでPepperをある程度操作できるかなり便利なものです。</p>

<h4 id="pepper-connect-js">pepper_connect.js</h4>

<pre><code>'use strict'

const Nightmare = require('nightmare');
const vo = require('vo');
const IP = '192.168.179.29';

function pepper(text) {
    vo(function* () {
    const nightmare = Nightmare({ show: true });
    const link = yield nightmare
        .goto('http://kuetsuhara.github.io/pepperConnect.html')
        .insert('input#pepperIP','')
        .type('input#pepperIP', ip)
        .click('button[onclick=&quot;connect()&quot;]')
        .wait(4000)
        .type('input#sayText', text)
        .click('button[onclick=&quot;say()&quot;]')
        .evaluate(() =&gt; {
            return document.getElementsByClassName('ac-21th')[0].href;
        });
    yield nightmare.end();
        return link;
    })((err, result) =&gt; {
        if (err) return console.log(err);
        console.log(result);
    });   
}

pepper(&quot;こんばんわ&quot;);

//モジュール化する場合
//module.exports = pepper;
</code></pre>

<p>こんな感じで記述しました。192.168.179.29がPepperのIPになります。</p>

<p>ちなみにPepperのIPアドレスは、タブレットの裏側の胸にあるボタンを押すとPepperが喋って教えてくれます。</p>

<h3 id="実行して試してみる">実行して試してみる</h3>

<p>ちなみに、このときはMac OS 10.11上のNode.js6.3系で試しました。</p>

<pre><code>node pepper_connect.js
</code></pre>

<p>この時点で実行すると、Nightmare経由でPepperに自動接続して、「こんばんわ」と喋ってくれると思います。</p>

<p><img src="/img/blog/017/05_result.gif" alt="" /></p>

<p><a href="https://goo.gl/photos/6GKXDMMbTGPtXf3A6">こちら</a>で実際に動いている動画を見られます。</p>

<h3 id="コードのまとめとデモ">コードのまとめとデモ</h3>

<p><a href="https://github.com/n0bisuke/pepper_pokemon_go">こちら</a>に今回使ったコードをまとめておきました。</p>

<pre><code>git clone git@github.com:n0bisuke/pepper_pokemon_go.git
cd pepper_pokemon_go
npm i
</code></pre>

<p>のあと、index.jsのユーザー名とパスワードを入力したのち</p>

<pre><code>node index.js
</code></pre>

<p>で動作すると思います。動かない場合は<a href="https://twitter.com/n0bisuke">@n0bisuke</a>まで！</p>

<h2 id="まとめ">まとめ</h2>

<p>Nightmareを使えば、Node.jsだけでも、ブラウザコントロールが可能なロボットやハードウェアの簡単な接続はできそうだなと感じました。</p>

<p>実際のところ、Pepperと同じネットワークにNode.js（とNightmare）が動く環境が必要なので、運用などは難しそうです。しかし、喋ってくれること自体は通知として気づきやすいので、かなりアリだと思っています。</p>

<p>試せる方はぜひ試してみてください！　それでは。</p>
</description>
    </item>
    
    <item>
      <title>電子回路を簡単に学べるlittleBitsをインターネットに繋げよう！「CocoaBit」を開発中</title>
      <link>https://dotstud.io/blog/cocoabit-littlebits-milkcocoa-nefry/</link>
      <pubDate>Mon, 05 Sep 2016 10:41:27 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/cocoabit-littlebits-milkcocoa-nefry/</guid>
      <description>

<p>こんにちは、外部ライターのわみと申します。愛知県でネットワークの勉強をしている学生です。磁石で電子工作ができる「<a href="http://jp.littlebits.com/">littleBits</a>」のモジュールとして、「<strong>CocoaBit</strong>」というものを開発しています。</p>

<p>CocoaBitを使えばlittleBitsを簡単にインターネットへ接続できます。すでにlittleBitsをもっている方や、IoTに興味があるけれど「何から始めていいかわからない」「難しそう……」と思っている方はぜひご一読ください！</p>

<h2 id="cocoabitって">CocoaBitって？</h2>

<p><img src="/img/blog/016/09_littlebits.png" alt="" />
磁石でパチパチとモジュールを繋げるだけで電子工作ができるデバイス「<a href="http://jp.littlebits.com/">littleBits</a>」。これの拡張モジュールとして「CocoaBit」を開発しています。真ん中にがあるのがCocoaBitです。</p>

<p>CocoaBitは次のような特徴を持っています。</p>

<ul>
<li>littleBitsをインターネットに接続できる</li>
<li>バックエンドサービス「Milkcocoa」と簡単に連携できる</li>
<li>Arduinoの開発環境（ArduinoIDE）でプログラミングができる</li>
</ul>

<p><img src="/img/blog/016/01_cocoabit.png" alt="" />
CocoaBitを使えばlittleBitsを簡単にインターネットと繋げられるので、データをアップロードしたり、インターネットからCocoaBitを制御したり、はたまたIFTTT連携なんかも試せたりできます。</p>

<p>「Nefry」というFRISKサイズのIoT向けデバイスをベースにして作っていますが、これも自分が自作しています。また、LIGブログでlittleBitsの連載をしている田中さんと共同開発をしています。私がNefryを作っていたことや、純粋に面白そう！という背景からCocoaBitが生まれました。（より詳しい背景は<a href="http://www.1ft-seabass.jp/memo/2016/04/13/cocobit-first-contact/">こちらの記事</a>をどうぞ）</p>

<h2 id="さっそくcocoabitでプログラミングしてみよう">さっそくCocoaBitでプログラミングしてみよう</h2>

<p>ArduinoIDEを使って、CocoaBitのプログラムを作る流れを紹介します！　まずはArduinoIDEにCocoaBitをインストールするのですが、ArduinoIDEのダウンロード方法などについては<a href="http://qiita.com/wamisnet/private/15062b2e7b23969797aa">LIGブログ</a>の記事で紹介されています。</p>

<p>Nefryとライブラリーが共通なのでNefryの名前が出てきますが、気にせずに読み進めてください。</p>

<p><img src="/img/blog/016/02_arduino.png" alt="" />
まずは、ArduinoIDEの環境設定を開きます。</p>

<p><img src="/img/blog/016/03_arduino.png" alt="" />
環境設定の <strong>追加のボードマネージャーのURL</strong> に次のURL を入力します。</p>

<pre><code>http://wamisnet.github.io/package_nefry_index.json
</code></pre>

<p><img src="/img/blog/016/04_arduino.png" alt="" />
入力が終わったら OK をクリックし、ツール内にあるボード選択のボードマネージャーをクリックします。</p>

<p><img src="/img/blog/016/05_arduino.png" alt="" />
すると、ボードマネージャーの一覧の下部にNefryが追加されます。検索欄もあるのでそこに <strong>Nefry</strong> と入力すると簡単に見つけられます。インストールをクリックすると、必要なファイルをダウンロードできます。（2016年8月現在の最新バージョンは2.0.1です）</p>

<p>インストールが完了すると <strong>INSTALLED</strong> と表示されます。</p>

<p><img src="/img/blog/016/08_arduino.png" alt="" />
すると、ツール内にあるボードからCocoaBitが選択できるようになっているはずです！　これでボードのインストールも完了です！</p>

<p>ここまでで開発環境が整いましたので次はプログラムを書いていきます。</p>

<h2 id="cocoabitのスイッチを押した時にledを光らせてみよう">CocoaBitのスイッチを押した時にLEDを光らせてみよう</h2>

<p><img src="/img/blog/016/09_littlebits.png" alt="" />
CocoaBitに写真のようにlittleBitsのボタンとLEDを繋げて、ボタンを押したらLEDが光るプログラムを書いてみましょう！　以下はプログラムの全体図です。</p>

<h3 id="pushsw-ino">pushSW.ino</h3>

<pre><code>void setup() {
  pinMode(D0, OUTPUT); //CocoaBitのD0を出力モードにする
}
void loop() {
  //SWを押した時にLEDが点灯する
  if (analogRead(A0) &gt; 500) {//7(押してない)or970(押されてる)中間で分岐します
    //押した時
    digitalWrite(D0, HIGH); //LED点灯
  } else {
    //離した時
    digitalWrite(D0, LOW); //LED消灯
  }
  delay(100);//0.1秒待つ
}
</code></pre>

<h3 id="プログラムの解説">プログラムの解説</h3>

<p><strong>setup()</strong> の{}で囲まれている箇所は、CocoaBitが起動時に <strong>一度のみおこなう処理</strong> です。今回はLEDを光らせるためにD0の入出力を使うので、それぞれが入力モードなのか、出力モードなのかを設定しています。</p>

<pre><code>void setup() {
  pinMode(D0, OUTPUT); //CocoaBitのD0を出力モードにする
}
</code></pre>

<p><strong>loop()</strong> の{}かっこで囲まれている箇所、CocoaBitが起動中に <strong>繰り返しおこなう処理</strong> です。littleBitsのボタンの状態をanalogRead(A0)というもので取得します。このanalogReadという関数で、0v-5vの電圧の変化を0-1023の範囲でA0から取得できます。</p>

<p>ボタンを押すとおおよそ970程度、押していないときは7程度になります。これをif文と呼ばれる条件式で処理を分岐します。digitalWriteでピンをHIGHかLOWに変更することができますので、スイッチの状態によりHIGHかLOWに変更していきます。</p>

<pre><code>void loop() {
  //SWを押した時にLEDが点灯する
  if (analogRead(A0) &gt; 500) {//7(押してない)or970(押されてる)中間で分岐します
    //押した時
    digitalWrite(D0, HIGH); //LED点灯
  } else {
    //離した時
    digitalWrite(D0, LOW); //LED消灯
  }
  delay(100);//0.1秒待つ
}

</code></pre>

<h3 id="プログラムをcocoabitに書いてみよう">プログラムをCocoaBitに書いてみよう</h3>

<p>上記のプログラムをArduinoIDEに貼り、CocoaBitで実行してみましょう。CocoaBitにプログラムを書き込んでいく流れを簡単に解説しますが、より詳しい書き込み方は<a href="http://qiita.com/wamisnet/private/15062b2e7b23969797aa">LIGブログ</a>の記事をご覧ください。</p>

<p><img src="/img/blog/016/10_cocoabit.png" alt="" />
まずは、CocoaBitを写真を参考にしてpowerモジュールに繋いでください。しばらくしてWi-Fiを検索すると <strong>CocoaBit-○○○○</strong> という名前があると思うので、そのWi-Fiに接続してください。</p>

<p><img src="/img/blog/016/11_wifi.png" alt="" />
接続すると自動的にこのページに移動します。時にうまくいかないときがあるのでその時はこちらのURLを入力してください。CocoaBitのメインページです。</p>

<p><strong><a href="http://192.168.4.1">http://192.168.4.1</a></strong></p>

<p>このページから、さまざまな設定をおこなえます。プログラムを書き込むためには、CocoaBitを書き込みモードにします。（書き込みモードとは、CocoaBitのCoreプログラムだけ動作し、ユーザが書き込んだプログラムを実行しないモードです）</p>

<p><img src="/img/blog/016/12_nefry.png" alt="" />
書き込みモードに変更するには、<strong>setup Module</strong> をクリックし、<strong>Write mode</strong> を選択してください。すると、CocoaBitが再起動します。再起動が終わったら書き込みモードになっています。</p>

<p><img src="/img/blog/016/13_nefry.png" alt="" />
CocoaBitが書き込みモードになったところでプログラムを書き込んでいきましょう。メインページの <strong>upload Sketch</strong> をクリックしてこのページを開きます。</p>

<p><img src="/img/blog/016/14_nefry.png" alt="" />
開いたらページ中央にある <strong>参照</strong> となっているボタンをクリックしてファイルを選びます。（Chromeなどブラウザによっては表示が異なることがあります）</p>

<p><img src="/img/blog/016/15_nefry.png" alt="" />
先ほどプログラムを保存した場所を開き、<strong>arduino.bin</strong> となっているファイルを選びます。（きちんと確認してアップデートしてください。もし間違えてしまうと、最悪の場合起動しなくなります）</p>

<p>きちんとファイルを選べると、ファイルの場所を示す表示が出ます。あとは <strong>Upload</strong> をクリックするだけです！　アップロードが完了すると自動的にCocoaBitが再起動してプログラムが更新されます。</p>

<p>これでCocoaBitのプログラムを書きかえることができました！　SWを押したときにLEDが光っているはずです。</p>

<p><img src="/img/blog/016/17_cocoabit.gif" alt="" />
LEDは上手く点滅しましたか？　これでCocoaBitから出力できたので、次はCocoaBitに入力をしてみようと思います。</p>

<h2 id="cocoabitにスライダーを繋いでみる">CocoaBitにスライダーを繋いでみる</h2>

<p>それでは次はCocoaBitを入力モードにして、入力された値をWebページで表示してみようと思います。</p>

<p><img src="/img/blog/016/18_littlebits.png" alt="" />
今回は入力データを手軽に変更ができるlittleBitsのスライダーを使ってみようと思います。他にもボタンモジュールや明るさセンサーモジュールを繋ぐことも可能です。写真を参考に接続してみてください。</p>

<p>接続できたら、プログラムを書いていきましょう。</p>

<h3 id="read-ino">read.ino</h3>

<pre><code>#include &lt;Nefry.h&gt;
int sensorValue;
void setup() {
}
void loop() {
  sensorValue = analogRead(A0);//アナログの入力を読みます。
  Nefry.print(&quot;sensor = &quot; );
  Nefry.println(sensorValue);//センサーデータを表示します。
  Nefry.ndelay(500);//0.5秒待ちます
  Nefry.setLed(sensorValue/4,255,0);//Red(sensorValue/4),Green(255),Blue(0)
}
</code></pre>

<h3 id="プログラムの解説-1">プログラムの解説</h3>

<p>analogReadという関数で、0v-5vの電圧の変化を0-1023の範囲でA0から取得することができます。その値をNefry.print関数で表示するようにしています。そのデータはWeb Consoleで見られます。</p>

<p><img src="/img/blog/016/19_nefry.png" alt="" /></p>

<p>Nefry.ndelay関数は、指定されたミリ秒処理を止めます。1000ミリ秒で1秒となります。
Nefry.setLed関数は、CocoaBitについているLEDの光る色を指定することができ、赤・緑・青を0（消灯）から255（フル点灯）の範囲で光らせることができます。</p>

<p>また、例えば赤（255）と緑（255）を選ぶと黄色になるなど、光らせる色と強さの組み合わせによって色を変えられます。今回は、赤色をセンサーの入力により変更（sensorValue/4）、緑色を（255）、Blue（0）にして光らせてみます。Nefryの関数については<a href="http://qiita.com/wamisnet/items/e44812eb6d6fded7af26">こちら</a>を参照してください。</p>

<p>このプログラムは、0.5秒ごとにA0ピンの状態を取得して、sensor = A0ピンの状態をweb consoleで表示、LEDの色がスライダによって緑から黄色に変化していくプログラムになります。こちらがプログラムの全体になります。</p>

<h3 id="実際に動かしてみよう">実際に動かしてみよう</h3>

<p><img src="/img/blog/016/20_cocoabit.gif" alt="" /></p>

<p><img src="/img/blog/016/21_nefry.gif" alt="" /></p>

<p>成功するとこのように数値が変わります。</p>

<p>さて、最後に今のセンサーデータをMilkcocoaに送ってみようと思います。</p>

<h2 id="cocoabitにmilkcocoaを繋げてみる">CocoaBitにMilkcocoaを繋げてみる</h2>

<p>今度はセンサーの値を表示するだけではなくMilkcocoaの方に送ってみようと思います。</p>

<h3 id="milkcocoaとは">Milkcocoaとは？</h3>

<p><img src="/img/blog/016/22_milkcocoa.png" alt="" /></p>

<p><a href="https://mlkcca.com">Milkcocoa</a>とは、デバイス・スマートフォン・PC間で簡単にリアルタイム通信ができるWebサービスです。リアルタイム通信では複雑なプログラミングが必要ですが、MilkcocoaではJavaScriptを1行追記するだけでデータの保存＆やり取りができるようになるんです。</p>

<p>さて、Milkcocoaにセンサーの値を送れるようにするため、CocoaBitにWi-Fiを教えてあげましょう。</p>

<h3 id="wi-fiの設定">Wi-Fiの設定</h3>

<p><img src="/img/blog/016/23_nefry.png" alt="" /></p>

<p>この項目は、一度設定すればアクセスするWi-Fiが変わらない限り再設定する必要はありません。 <a href="http://192.168.4.1">http://192.168.4.1</a> に接続し、Setup WiFiのリンクをクリックします。</p>

<p>SSIDの入力欄をクリックすると、検出されたWi-Fiを選べます。Passがある場合はそちらも入力して、Saveをクリックします。Saveを押すと再起動するのでしばらく待ちましょう。</p>

<p>Wi-Fiの設定が完了したところでプログラムを書いていきます。</p>

<h4 id="milkcocoabit-ino">milkcocoabit.ino</h4>

<pre><code>#include &lt;Nefry.h&gt;
#include &lt;Nefry_Milkcocoa.h&gt;

Nefry_Milkcocoa *milkcocoa;

char *datastore;
int sensorValue;

void setup() {
  milkcocoa-&gt;print();//Setup ModuleページにAPPIDの表示をする
  milkcocoa = Nefry_Milkcocoa::begin();//milkcocoaと接続に必要になる処理をします。
  datastore = Nefry.getConfStr(3);//Setup Moduleページに入力されたデータストア名を保存します。
 }

void loop() {
  sensorValue = analogRead(A0);//アナログの入力を読みます。
  Nefry.print(&quot;sensor = &quot; );
  Nefry.println(sensorValue);//センサーデータを表示します。
  Nefry.println( milkcocoa-&gt;loop(10000) ? &quot;Milkcocoa Connect OK&quot; : &quot;Milkcocoa Connect NG&quot; ); //10秒以内にMilkcocoaに接続できればokと表示されます。
  DataElement elem = DataElement();
  elem.setValue(&quot;sensor&quot;, sensorValue);//センサーの状態を送信できる形に変換
  milkcocoa-&gt;push(datastore, &amp;elem);//Milkcocoaに送信
  Nefry.setLed(sensorValue/4,255,0);//Red(sensorValue/4),Green(255),Blue(0)
  Nefry.ndelay(2000);//2秒待つ
}

</code></pre>

<p>実際にプログラムを書き込み、Web Consoleを確認すると <strong>Milkcocoa Send Data Lack</strong> と表示されます。Milkcocoaに接続するために、必要な情報が足りないという意味なので、必要な情報を集める必要があります。詳しく知りたい方は<a href="http://liginc.co.jp/282918">こちらの記事</a>をご覧ください。</p>

<p>MilkcocoaのサイトにアクセスしてそれぞれAPPID、APIKey、APISecretを取得します。その3つが分かったら、今度はCocoaBitのSetup ModuleでAPPID、APIKey、APISecretの入力欄に先ほどのIDとKeyを入力します。もう一つDataStoreという入力欄がありますので、そこには <strong>CocoaBit</strong> と入力します。</p>

<p>入力が完了しSaveボタンをクリックすると、自動的に再起動してMilkcocoaにセンサーの値を送ってくれるはずです。うまく送れない場合、CocoaBitがインターネットに繋がっていないか、先ほどの入力が間違っていないかが原因として挙げられます。</p>

<h3 id="実際に動かしてみよう-1">実際に動かしてみよう</h3>

<p><img src="/img/blog/016/24_cocoabit.gif" alt="" /></p>

<p><img src="/img/blog/016/25_milkcocoa.png" alt="" /></p>

<p>Milkcocoaのデータストアを確認するとlittleBitsで取得した数値が表示されているはずです。このデータを使い、Web連携をすると面白くなるのではないでしょうか。</p>

<h2 id="まとめ">まとめ</h2>

<p><img src="/img/blog/016/01_cocoabit.png" alt="" />
ということで今回はCocoaBitについてを紹介しました。CocoaBitを使えば、これくらい簡単にlittleBitsをインターネットと繋げられます。</p>

<p>CocoaBitはまだ開発中ではありますが、進展があればまたこちらで報告しようと思っております。応援よろしくお願いします！</p>
</description>
    </item>
    
    <item>
      <title>電子回路を簡単に学べるlittleBitsをインターネットに繋げよう！「CocoaBit」を開発中</title>
      <link>https://dotstud.io/blog/cocoabit-littlebits-milkcocoa-nefry/</link>
      <pubDate>Mon, 05 Sep 2016 10:41:27 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/cocoabit-littlebits-milkcocoa-nefry/</guid>
      <description>

<p>こんにちは、外部ライターのわみと申します。愛知県でネットワークの勉強をしている学生です。磁石で電子工作ができる「<a href="http://jp.littlebits.com/">littleBits</a>」のモジュールとして、「<strong>CocoaBit</strong>」というものを開発しています。</p>

<p>CocoaBitを使えばlittleBitsを簡単にインターネットへ接続できます。すでにlittleBitsをもっている方や、IoTに興味があるけれど「何から始めていいかわからない」「難しそう……」と思っている方はぜひご一読ください！</p>

<h2 id="cocoabitって">CocoaBitって？</h2>

<p><img src="/img/blog/016/09_littlebits.png" alt="" />
磁石でパチパチとモジュールを繋げるだけで電子工作ができるデバイス「<a href="http://jp.littlebits.com/">littleBits</a>」。これの拡張モジュールとして「CocoaBit」を開発しています。真ん中にがあるのがCocoaBitです。</p>

<p>CocoaBitは次のような特徴を持っています。</p>

<ul>
<li>littleBitsをインターネットに接続できる</li>
<li>バックエンドサービス「Milkcocoa」と簡単に連携できる</li>
<li>Arduinoの開発環境（ArduinoIDE）でプログラミングができる</li>
</ul>

<p><img src="/img/blog/016/01_cocoabit.png" alt="" />
CocoaBitを使えばlittleBitsを簡単にインターネットと繋げられるので、データをアップロードしたり、インターネットからCocoaBitを制御したり、はたまたIFTTT連携なんかも試せたりできます。</p>

<p>「Nefry」というFRISKサイズのIoT向けデバイスをベースにして作っていますが、これも自分が自作しています。また、LIGブログでlittleBitsの連載をしている田中さんと共同開発をしています。私がNefryを作っていたことや、純粋に面白そう！という背景からCocoaBitが生まれました。（より詳しい背景は<a href="http://www.1ft-seabass.jp/memo/2016/04/13/cocobit-first-contact/">こちらの記事</a>をどうぞ）</p>

<h2 id="さっそくcocoabitでプログラミングしてみよう">さっそくCocoaBitでプログラミングしてみよう</h2>

<p>ArduinoIDEを使って、CocoaBitのプログラムを作る流れを紹介します！　まずはArduinoIDEにCocoaBitをインストールするのですが、ArduinoIDEのダウンロード方法などについては<a href="http://qiita.com/wamisnet/private/15062b2e7b23969797aa">LIGブログ</a>の記事で紹介されています。</p>

<p>Nefryとライブラリーが共通なのでNefryの名前が出てきますが、気にせずに読み進めてください。</p>

<p><img src="/img/blog/016/02_arduino.png" alt="" />
まずは、ArduinoIDEの環境設定を開きます。</p>

<p><img src="/img/blog/016/03_arduino.png" alt="" />
環境設定の <strong>追加のボードマネージャーのURL</strong> に次のURL を入力します。</p>

<pre><code>http://wamisnet.github.io/package_nefry_index.json
</code></pre>

<p><img src="/img/blog/016/04_arduino.png" alt="" />
入力が終わったら OK をクリックし、ツール内にあるボード選択のボードマネージャーをクリックします。</p>

<p><img src="/img/blog/016/05_arduino.png" alt="" />
すると、ボードマネージャーの一覧の下部にNefryが追加されます。検索欄もあるのでそこに <strong>Nefry</strong> と入力すると簡単に見つけられます。インストールをクリックすると、必要なファイルをダウンロードできます。（2016年8月現在の最新バージョンは2.0.1です）</p>

<p>インストールが完了すると <strong>INSTALLED</strong> と表示されます。</p>

<p><img src="/img/blog/016/08_arduino.png" alt="" />
すると、ツール内にあるボードからCocoaBitが選択できるようになっているはずです！　これでボードのインストールも完了です！</p>

<p>ここまでで開発環境が整いましたので次はプログラムを書いていきます。</p>

<h2 id="cocoabitのスイッチを押した時にledを光らせてみよう">CocoaBitのスイッチを押した時にLEDを光らせてみよう</h2>

<p><img src="/img/blog/016/09_littlebits.png" alt="" />
CocoaBitに写真のようにlittleBitsのボタンとLEDを繋げて、ボタンを押したらLEDが光るプログラムを書いてみましょう！　以下はプログラムの全体図です。</p>

<h3 id="pushsw-ino">pushSW.ino</h3>

<pre><code>void setup() {
  pinMode(D0, OUTPUT); //CocoaBitのD0を出力モードにする
}
void loop() {
  //SWを押した時にLEDが点灯する
  if (analogRead(A0) &gt; 500) {//7(押してない)or970(押されてる)中間で分岐します
    //押した時
    digitalWrite(D0, HIGH); //LED点灯
  } else {
    //離した時
    digitalWrite(D0, LOW); //LED消灯
  }
  delay(100);//0.1秒待つ
}
</code></pre>

<h3 id="プログラムの解説">プログラムの解説</h3>

<p><strong>setup()</strong> の{}で囲まれている箇所は、CocoaBitが起動時に <strong>一度のみおこなう処理</strong> です。今回はLEDを光らせるためにD0の入出力を使うので、それぞれが入力モードなのか、出力モードなのかを設定しています。</p>

<pre><code>void setup() {
  pinMode(D0, OUTPUT); //CocoaBitのD0を出力モードにする
}
</code></pre>

<p><strong>loop()</strong> の{}かっこで囲まれている箇所、CocoaBitが起動中に <strong>繰り返しおこなう処理</strong> です。littleBitsのボタンの状態をanalogRead(A0)というもので取得します。このanalogReadという関数で、0v-5vの電圧の変化を0-1023の範囲でA0から取得できます。</p>

<p>ボタンを押すとおおよそ970程度、押していないときは7程度になります。これをif文と呼ばれる条件式で処理を分岐します。digitalWriteでピンをHIGHかLOWに変更することができますので、スイッチの状態によりHIGHかLOWに変更していきます。</p>

<pre><code>void loop() {
  //SWを押した時にLEDが点灯する
  if (analogRead(A0) &gt; 500) {//7(押してない)or970(押されてる)中間で分岐します
    //押した時
    digitalWrite(D0, HIGH); //LED点灯
  } else {
    //離した時
    digitalWrite(D0, LOW); //LED消灯
  }
  delay(100);//0.1秒待つ
}

</code></pre>

<h3 id="プログラムをcocoabitに書いてみよう">プログラムをCocoaBitに書いてみよう</h3>

<p>上記のプログラムをArduinoIDEに貼り、CocoaBitで実行してみましょう。CocoaBitにプログラムを書き込んでいく流れを簡単に解説しますが、より詳しい書き込み方は<a href="http://qiita.com/wamisnet/private/15062b2e7b23969797aa">LIGブログ</a>の記事をご覧ください。</p>

<p><img src="/img/blog/016/10_cocoabit.png" alt="" />
まずは、CocoaBitを写真を参考にしてpowerモジュールに繋いでください。しばらくしてWi-Fiを検索すると <strong>CocoaBit-○○○○</strong> という名前があると思うので、そのWi-Fiに接続してください。</p>

<p><img src="/img/blog/016/11_wifi.png" alt="" />
接続すると自動的にこのページに移動します。時にうまくいかないときがあるのでその時はこちらのURLを入力してください。CocoaBitのメインページです。</p>

<p><strong><a href="http://192.168.4.1">http://192.168.4.1</a></strong></p>

<p>このページから、さまざまな設定をおこなえます。プログラムを書き込むためには、CocoaBitを書き込みモードにします。（書き込みモードとは、CocoaBitのCoreプログラムだけ動作し、ユーザが書き込んだプログラムを実行しないモードです）</p>

<p><img src="/img/blog/016/12_nefry.png" alt="" />
書き込みモードに変更するには、<strong>setup Module</strong> をクリックし、<strong>Write mode</strong> を選択してください。すると、CocoaBitが再起動します。再起動が終わったら書き込みモードになっています。</p>

<p><img src="/img/blog/016/13_nefry.png" alt="" />
CocoaBitが書き込みモードになったところでプログラムを書き込んでいきましょう。メインページの <strong>upload Sketch</strong> をクリックしてこのページを開きます。</p>

<p><img src="/img/blog/016/14_nefry.png" alt="" />
開いたらページ中央にある <strong>参照</strong> となっているボタンをクリックしてファイルを選びます。（Chromeなどブラウザによっては表示が異なることがあります）</p>

<p><img src="/img/blog/016/15_nefry.png" alt="" />
先ほどプログラムを保存した場所を開き、<strong>arduino.bin</strong> となっているファイルを選びます。（きちんと確認してアップデートしてください。もし間違えてしまうと、最悪の場合起動しなくなります）</p>

<p>きちんとファイルを選べると、ファイルの場所を示す表示が出ます。あとは <strong>Upload</strong> をクリックするだけです！　アップロードが完了すると自動的にCocoaBitが再起動してプログラムが更新されます。</p>

<p>これでCocoaBitのプログラムを書きかえることができました！　SWを押したときにLEDが光っているはずです。</p>

<p><img src="/img/blog/016/17_cocoabit.gif" alt="" />
LEDは上手く点滅しましたか？　これでCocoaBitから出力できたので、次はCocoaBitに入力をしてみようと思います。</p>

<h2 id="cocoabitにスライダーを繋いでみる">CocoaBitにスライダーを繋いでみる</h2>

<p>それでは次はCocoaBitを入力モードにして、入力された値をWebページで表示してみようと思います。</p>

<p><img src="/img/blog/016/18_littlebits.png" alt="" />
今回は入力データを手軽に変更ができるlittleBitsのスライダーを使ってみようと思います。他にもボタンモジュールや明るさセンサーモジュールを繋ぐことも可能です。写真を参考に接続してみてください。</p>

<p>接続できたら、プログラムを書いていきましょう。</p>

<h3 id="read-ino">read.ino</h3>

<pre><code>#include &lt;Nefry.h&gt;
int sensorValue;
void setup() {
}
void loop() {
  sensorValue = analogRead(A0);//アナログの入力を読みます。
  Nefry.print(&quot;sensor = &quot; );
  Nefry.println(sensorValue);//センサーデータを表示します。
  Nefry.ndelay(500);//0.5秒待ちます
  Nefry.setLed(sensorValue/4,255,0);//Red(sensorValue/4),Green(255),Blue(0)
}
</code></pre>

<h3 id="プログラムの解説-1">プログラムの解説</h3>

<p>analogReadという関数で、0v-5vの電圧の変化を0-1023の範囲でA0から取得することができます。その値をNefry.print関数で表示するようにしています。そのデータはWeb Consoleで見られます。</p>

<p><img src="/img/blog/016/19_nefry.png" alt="" /></p>

<p>Nefry.ndelay関数は、指定されたミリ秒処理を止めます。1000ミリ秒で1秒となります。
Nefry.setLed関数は、CocoaBitについているLEDの光る色を指定することができ、赤・緑・青を0（消灯）から255（フル点灯）の範囲で光らせることができます。</p>

<p>また、例えば赤（255）と緑（255）を選ぶと黄色になるなど、光らせる色と強さの組み合わせによって色を変えられます。今回は、赤色をセンサーの入力により変更（sensorValue/4）、緑色を（255）、Blue（0）にして光らせてみます。Nefryの関数については<a href="http://qiita.com/wamisnet/items/e44812eb6d6fded7af26">こちら</a>を参照してください。</p>

<p>このプログラムは、0.5秒ごとにA0ピンの状態を取得して、sensor = A0ピンの状態をweb consoleで表示、LEDの色がスライダによって緑から黄色に変化していくプログラムになります。こちらがプログラムの全体になります。</p>

<h3 id="実際に動かしてみよう">実際に動かしてみよう</h3>

<p><img src="/img/blog/016/20_cocoabit.gif" alt="" /></p>

<p><img src="/img/blog/016/21_nefry.gif" alt="" /></p>

<p>成功するとこのように数値が変わります。</p>

<p>さて、最後に今のセンサーデータをMilkcocoaに送ってみようと思います。</p>

<h2 id="cocoabitにmilkcocoaを繋げてみる">CocoaBitにMilkcocoaを繋げてみる</h2>

<p>今度はセンサーの値を表示するだけではなくMilkcocoaの方に送ってみようと思います。</p>

<h3 id="milkcocoaとは">Milkcocoaとは？</h3>

<p><img src="/img/blog/016/22_milkcocoa.png" alt="" /></p>

<p><a href="https://mlkcca.com">Milkcocoa</a>とは、デバイス・スマートフォン・PC間で簡単にリアルタイム通信ができるWebサービスです。リアルタイム通信では複雑なプログラミングが必要ですが、MilkcocoaではJavaScriptを1行追記するだけでデータの保存＆やり取りができるようになるんです。</p>

<p>さて、Milkcocoaにセンサーの値を送れるようにするため、CocoaBitにWi-Fiを教えてあげましょう。</p>

<h3 id="wi-fiの設定">Wi-Fiの設定</h3>

<p><img src="/img/blog/016/23_nefry.png" alt="" /></p>

<p>この項目は、一度設定すればアクセスするWi-Fiが変わらない限り再設定する必要はありません。 <a href="http://192.168.4.1">http://192.168.4.1</a> に接続し、Setup WiFiのリンクをクリックします。</p>

<p>SSIDの入力欄をクリックすると、検出されたWi-Fiを選べます。Passがある場合はそちらも入力して、Saveをクリックします。Saveを押すと再起動するのでしばらく待ちましょう。</p>

<p>Wi-Fiの設定が完了したところでプログラムを書いていきます。</p>

<h4 id="milkcocoabit-ino">milkcocoabit.ino</h4>

<pre><code>#include &lt;Nefry.h&gt;
#include &lt;Nefry_Milkcocoa.h&gt;

Nefry_Milkcocoa *milkcocoa;

char *datastore;
int sensorValue;

void setup() {
  milkcocoa-&gt;print();//Setup ModuleページにAPPIDの表示をする
  milkcocoa = Nefry_Milkcocoa::begin();//milkcocoaと接続に必要になる処理をします。
  datastore = Nefry.getConfStr(3);//Setup Moduleページに入力されたデータストア名を保存します。
 }

void loop() {
  sensorValue = analogRead(A0);//アナログの入力を読みます。
  Nefry.print(&quot;sensor = &quot; );
  Nefry.println(sensorValue);//センサーデータを表示します。
  Nefry.println( milkcocoa-&gt;loop(10000) ? &quot;Milkcocoa Connect OK&quot; : &quot;Milkcocoa Connect NG&quot; ); //10秒以内にMilkcocoaに接続できればokと表示されます。
  DataElement elem = DataElement();
  elem.setValue(&quot;sensor&quot;, sensorValue);//センサーの状態を送信できる形に変換
  milkcocoa-&gt;push(datastore, &amp;elem);//Milkcocoaに送信
  Nefry.setLed(sensorValue/4,255,0);//Red(sensorValue/4),Green(255),Blue(0)
  Nefry.ndelay(2000);//2秒待つ
}

</code></pre>

<p>実際にプログラムを書き込み、Web Consoleを確認すると <strong>Milkcocoa Send Data Lack</strong> と表示されます。Milkcocoaに接続するために、必要な情報が足りないという意味なので、必要な情報を集める必要があります。詳しく知りたい方は<a href="http://liginc.co.jp/282918">こちらの記事</a>をご覧ください。</p>

<p>MilkcocoaのサイトにアクセスしてそれぞれAPPID、APIKey、APISecretを取得します。その3つが分かったら、今度はCocoaBitのSetup ModuleでAPPID、APIKey、APISecretの入力欄に先ほどのIDとKeyを入力します。もう一つDataStoreという入力欄がありますので、そこには <strong>CocoaBit</strong> と入力します。</p>

<p>入力が完了しSaveボタンをクリックすると、自動的に再起動してMilkcocoaにセンサーの値を送ってくれるはずです。うまく送れない場合、CocoaBitがインターネットに繋がっていないか、先ほどの入力が間違っていないかが原因として挙げられます。</p>

<h3 id="実際に動かしてみよう-1">実際に動かしてみよう</h3>

<p><img src="/img/blog/016/24_cocoabit.gif" alt="" /></p>

<p><img src="/img/blog/016/25_milkcocoa.png" alt="" /></p>

<p>Milkcocoaのデータストアを確認するとlittleBitsで取得した数値が表示されているはずです。このデータを使い、Web連携をすると面白くなるのではないでしょうか。</p>

<h2 id="まとめ">まとめ</h2>

<p><img src="/img/blog/016/01_cocoabit.png" alt="" />
ということで今回はCocoaBitについてを紹介しました。CocoaBitを使えば、これくらい簡単にlittleBitsをインターネットと繋げられます。</p>

<p>CocoaBitはまだ開発中ではありますが、進展があればまたこちらで報告しようと思っております。応援よろしくお願いします！</p>
</description>
    </item>
    
    <item>
      <title>クラブで目立つ！Adafruit社のGemmaで光るピアスを作ってみよう</title>
      <link>https://dotstud.io/blog/neopixel-ring-gemma-earrings/</link>
      <pubDate>Fri, 26 Aug 2016 11:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/neopixel-ring-gemma-earrings/</guid>
      <description>

<p>みなさんこんにちわ！　dotstudioでインターンをしているマオと申します。今回から、dotstudioのブログにて電子工作についての連載していきたいと思います！  初回の本記事では、Adafruit社の「Gemma」というマイコンボードを使った『フープイヤリング』の作り方を紹介します！</p>

<p>こちらが完成の動画です＾＾</p>

<iframe width="645" height="363" src="https://www.youtube.com/embed/30MlFUBgzQo" frameborder="0" allowfullscreen></iframe>

<p>それではさっそく作っていきましょう！</p>

<h2 id="必要な物">必要な物</h2>

<!-- ![](/img/blog/015/01_cs.png) -->

<ul>
<li>光るフープイヤリングのキット（購入は<a href="https://dotstud.io/projects/neopixel-ring-flora-earrings/">こちら</a>から）

<ul>
<li>NeoPixel Ring</li>
<li>Gemma</li>
<li>リチュウムイオンポリマー電池</li>
<li>フックアップワイヤー</li>
<li>ピアスフック</li>
</ul></li>
<li>はんだごて、はんだ</li>
<li>両面テープ</li>
<li>マイクロUSBケーブル</li>
<li>パソコン</li>
</ul>

<p>準備ができたらさっそく作っていきましょう！</p>

<h2 id="1-neopixel-ringの配線をはんだ付けする">1. NeoPixel Ringの配線をはんだ付けする</h2>

<p>まずはNeoPixel Ringの配線をはんだ付けしていきます。ここでは付属のフックアップワイヤーを使ってください。はんだ付け初心者の方は<a href="http://www.murata.com/ja-jp/campaign/ads/japan/elekids/ele/craft/knack/soldering">こちらのサイト</a>などを参考にして練習するのをおすすめします。安全メガネなどの装着も心がけましょう。（目をまもろう！）</p>

<p><img src="/img/blog/015/02_earring.png" alt="" />
実際にはんだ付けをした後の写真はこちらです。</p>

<p><img src="/img/blog/015/03_fritzing.png" alt="" />
<img src="/img/blog/015/04_graph.png" alt="" />
はんだ付けの配線はこちらです。表に従って配線してください。</p>

<h2 id="2-gemmaに書き込むプログラムを作る">2. Gemmaに書き込むプログラムを作る</h2>

<p>今回は「Arduino IDE」というソフトウェアを使って、プログラムをGemmaに書いていきます。Arduino IDEをまだ持っていない方は、<a href="https://www.arduino.cc/en/Main/Software">公式サイト</a>からソフトウェアをダウンロードしてください。</p>

<p>Windowsユーザーの方は Gemmaの開発元のAdafruit社による「Windows Driver」をインストールする必要があります。<a href="https://learn.adafruit.com/getting-started-with-flora/windows-setup">こちらのサイト</a>を参照して進めてください。（Mac・Linuxのユーザーの方はインストールする必要はありません）</p>

<h3 id="2-1-ボードのインストレーション">2-1. ボードのインストレーション</h3>

<p><img src="/img/blog/015/05_arduino.png" alt="" />
次にArduino IDEを立ち上げてボードをインストールします。Arduino &gt; Preferences をクリックしてください。</p>

<p><img src="/img/blog/015/06_arduino.png" alt="" />
<strong><a href="https://www.adafruit.com/package_adafruit_index.json">https://www.adafruit.com/package_adafruit_index.json</a></strong><br />
上記のAdafruitのURLをコピーして、追加のボードマネージャーのURLに貼り、OKをクリックしてください。</p>

<p><img src="/img/blog/015/07_arduino.png" alt="" />
コピー＆ペーストが完了したら、ツール &gt; マイコンボード &gt; ボードマネージャーをクリックします。</p>

<p><img src="/img/blog/015/08_arduino.png" alt="" />
すると、このような画面が表示されます。検索欄に「Adafruit AVR Boards」を入力し、インストールしましょう。ここまでで、ボードのインストレーションは終わりです。</p>

<h3 id="2-2-ライブラリのインストール">2-2. ライブラリのインストール</h3>

<p><img src="/img/blog/015/09_arduino.png" alt="" />
次に、NeoPixel Ring を光らせるために必要なライブラリをインストールします。スケッチ &gt; ライブラリをインクルード &gt; ライブラリを管理 をクリックしてください。</p>

<p><img src="/img/blog/015/10_arduino.png" alt="" />
画面が表示されるので、検索欄に「Neopixel」と入力しましょう。上記のようになります。「Adafruit Neopixel by Adafruit」を選択してインストールしてください。</p>

<p>これでプログラムを書く準備ができました。</p>

<h3 id="2-3-プログラムをgemmaに書き込む">2-3.プログラムをGemmaに書き込む</h3>

<p>ここではGemmaに書き込むための設定をおこないます。</p>

<p><img src="/img/blog/015/11_arduino.png" alt="" />
まずは、ボードを選択するためにツール＞ボード＞Arduino Gemma をクリックしてください。</p>

<p><img src="/img/blog/015/12_arduino.png" alt="" />
次に書き込み装置を選択します。ツール＞書込装置＞USBtinyISPをクリックしてください。そして、以下のプログラムをスケッチにコピー&amp;ペーストしてください。</p>

<pre><code>#include &lt;Adafruit_NeoPixel.h&gt;

#define PIN 0

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(32, PIN);

uint8_t  mode   = 0, // 現在のアニメーション
         offset = 0; // スピンするの位置
uint32_t color  = 0xffae00; // 赤でスタート
uint32_t prevTime;

void setup() {
  pixels.begin();
  pixels.setBrightness(60); // １/３ 明るさ
  prevTime = millis();
}

void loop() {
  uint8_t  i;
  uint32_t t;

  switch(mode) {

   case 0: // ランダムに光る - 一回１LED
    i = random(32);
    pixels.setPixelColor(i, color);
    pixels.show();
    delay(10);
    pixels.setPixelColor(i, 0);
    break;

   case 1: // スピンする輪っか (一回に　８　LEDs )
    for(i=0; i&lt;16; i++) {
      uint32_t c = 0;
      if(((offset + i) &amp; 7) &lt; 2) c = color; // ４ピクセル
      pixels.setPixelColor(   i, c); // 一回目
      pixels.setPixelColor(31-i, c); // ２回目（裏返す）
    }
    pixels.show();
    offset++;
    delay(50);
    break;
  }

  t = millis();
  if((t - prevTime) &gt; 8000) {      // 毎８秒
    mode++;                        // 次のモード
    if(mode &gt; 1) {                 // モードの終わり
      mode = 0;                    // モードスタート
      color &gt;&gt;= 8;                 // 次の色 R-&gt;G-&gt;B
      if(!color) color = 0xffae00; // 赤にリセット
    }
    for(i=0; i&lt;32; i++) pixels.setPixelColor(i, 0);
    prevTime = t;
  }
}
</code></pre>

<p><img src="/img/blog/015/13_gemma.gif" alt="" />
その後、Gemmaにある小さなボタンを押すと、こちらのように赤いLEDが10秒間点滅します。赤いLEDが点滅している間に、スケッチ＞書込装置を使って書き込む をクリックしましょう。</p>

<p><em>※こちらのイメージにはNeoPixel Ringがついていませんが、NeoPixel Ringをはんだ付けしたあとのものへ書き込んでも問題ありません。</em></p>

<p><img src="/img/blog/015/14_arduino.png" alt="" />
赤いLEDの点滅が終わったら、Gemmaへのプログラムの書き込み完了となります。この状態になれば、MicroUSBを外しても大丈夫です。</p>

<h2 id="3-バッテリー接続-ピアスのフック取り付け">3. バッテリー接続＆ピアスのフック取り付け</h2>

<p><img src="/img/blog/015/15_hello.png" alt="" />
最後に、NepPixel Ringとリチュームイオンポリマーバッテリーを接続します。Gemmaボード上に小さなON-OFFスイッチがあるので、スイッチをONにしてきちんと光るかどうかを確かめてください。</p>

<p><img src="/img/blog/015/16_world.png" alt="" />
次にバッテリーを固定します。いろいろなやり方があるかと思いますが、私は両面テープを中央に貼り、ピアスフックとバッテリーの線を固定してみました。</p>

<p><img src="/img/blog/015/17_hoge.png" alt="" />
その上からまた両面テープを貼り、バッテリーを上から付けています。</p>

<p><img src="/img/blog/015/18_fuga.png" alt="" />
最後にNeoPixel Ringとピアスフックを固定させて、ピアスフックの余った長さを切断すればできあがりです＾＾</p>

<p>バッテリーは充電可能なものとなっています。キットには充電機が含まれてないため、充電機がほしい方は<a href="https://www.switch-science.com/catalog/1499/">スイッチサイエンス</a>さんのサイトでお求めください。</p>

<h2 id="できあがり">できあがり</h2>

<p><img src="/img/blog/015/23_mao.png" alt="" /></p>

<p><img src="/img/blog/015/20_mao.png" alt="" /></p>

<p><img src="/img/blog/015/19_mao.png" alt="" /></p>

<p>装着して写真を撮ってみました！<br />
結構ファッショナブルでかわいいですよね！　みなさんもぜひ作ってみてください＾＾</p>

<p>次回の記事もお楽しみにー！</p>
</description>
    </item>
    
    <item>
      <title>クラブで目立つ！Adafruit社のGemmaで光るピアスを作ってみよう</title>
      <link>https://dotstud.io/blog/neopixel-ring-gemma-earrings/</link>
      <pubDate>Fri, 26 Aug 2016 11:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/neopixel-ring-gemma-earrings/</guid>
      <description>

<p>みなさんこんにちわ！　dotstudioでインターンをしているマオと申します。今回から、dotstudioのブログにて電子工作についての連載していきたいと思います！  初回の本記事では、Adafruit社の「Gemma」というマイコンボードを使った『フープイヤリング』の作り方を紹介します！</p>

<p>こちらが完成の動画です＾＾</p>

<iframe width="645" height="363" src="https://www.youtube.com/embed/30MlFUBgzQo" frameborder="0" allowfullscreen></iframe>

<p>それではさっそく作っていきましょう！</p>

<h2 id="必要な物">必要な物</h2>

<!-- ![](/img/blog/015/01_cs.png) -->

<ul>
<li>光るフープイヤリングのキット（購入は<a href="https://dotstud.io/projects/neopixel-ring-flora-earrings/">こちら</a>から）

<ul>
<li>NeoPixel Ring</li>
<li>Gemma</li>
<li>リチュウムイオンポリマー電池</li>
<li>フックアップワイヤー</li>
<li>ピアスフック</li>
</ul></li>
<li>はんだごて、はんだ</li>
<li>両面テープ</li>
<li>マイクロUSBケーブル</li>
<li>パソコン</li>
</ul>

<p>準備ができたらさっそく作っていきましょう！</p>

<h2 id="1-neopixel-ringの配線をはんだ付けする">1. NeoPixel Ringの配線をはんだ付けする</h2>

<p>まずはNeoPixel Ringの配線をはんだ付けしていきます。ここでは付属のフックアップワイヤーを使ってください。はんだ付け初心者の方は<a href="http://www.murata.com/ja-jp/campaign/ads/japan/elekids/ele/craft/knack/soldering">こちらのサイト</a>などを参考にして練習するのをおすすめします。安全メガネなどの装着も心がけましょう。（目をまもろう！）</p>

<p><img src="/img/blog/015/02_earring.png" alt="" />
実際にはんだ付けをした後の写真はこちらです。</p>

<p><img src="/img/blog/015/03_fritzing.png" alt="" />
<img src="/img/blog/015/04_graph.png" alt="" />
はんだ付けの配線はこちらです。表に従って配線してください。</p>

<h2 id="2-gemmaに書き込むプログラムを作る">2. Gemmaに書き込むプログラムを作る</h2>

<p>今回は「Arduino IDE」というソフトウェアを使って、プログラムをGemmaに書いていきます。Arduino IDEをまだ持っていない方は、<a href="https://www.arduino.cc/en/Main/Software">公式サイト</a>からソフトウェアをダウンロードしてください。</p>

<p>Windowsユーザーの方は Gemmaの開発元のAdafruit社による「Windows Driver」をインストールする必要があります。<a href="https://learn.adafruit.com/getting-started-with-flora/windows-setup">こちらのサイト</a>を参照して進めてください。（Mac・Linuxのユーザーの方はインストールする必要はありません）</p>

<h3 id="2-1-ボードのインストレーション">2-1. ボードのインストレーション</h3>

<p><img src="/img/blog/015/05_arduino.png" alt="" />
次にArduino IDEを立ち上げてボードをインストールします。Arduino &gt; Preferences をクリックしてください。</p>

<p><img src="/img/blog/015/06_arduino.png" alt="" />
<strong><a href="https://www.adafruit.com/package_adafruit_index.json">https://www.adafruit.com/package_adafruit_index.json</a></strong><br />
上記のAdafruitのURLをコピーして、追加のボードマネージャーのURLに貼り、OKをクリックしてください。</p>

<p><img src="/img/blog/015/07_arduino.png" alt="" />
コピー＆ペーストが完了したら、ツール &gt; マイコンボード &gt; ボードマネージャーをクリックします。</p>

<p><img src="/img/blog/015/08_arduino.png" alt="" />
すると、このような画面が表示されます。検索欄に「Adafruit AVR Boards」を入力し、インストールしましょう。ここまでで、ボードのインストレーションは終わりです。</p>

<h3 id="2-2-ライブラリのインストール">2-2. ライブラリのインストール</h3>

<p><img src="/img/blog/015/09_arduino.png" alt="" />
次に、NeoPixel Ring を光らせるために必要なライブラリをインストールします。スケッチ &gt; ライブラリをインクルード &gt; ライブラリを管理 をクリックしてください。</p>

<p><img src="/img/blog/015/10_arduino.png" alt="" />
画面が表示されるので、検索欄に「Neopixel」と入力しましょう。上記のようになります。「Adafruit Neopixel by Adafruit」を選択してインストールしてください。</p>

<p>これでプログラムを書く準備ができました。</p>

<h3 id="2-3-プログラムをgemmaに書き込む">2-3.プログラムをGemmaに書き込む</h3>

<p>ここではGemmaに書き込むための設定をおこないます。</p>

<p><img src="/img/blog/015/11_arduino.png" alt="" />
まずは、ボードを選択するためにツール＞ボード＞Arduino Gemma をクリックしてください。</p>

<p><img src="/img/blog/015/12_arduino.png" alt="" />
次に書き込み装置を選択します。ツール＞書込装置＞USBtinyISPをクリックしてください。そして、以下のプログラムをスケッチにコピー&amp;ペーストしてください。</p>

<pre><code>#include &lt;Adafruit_NeoPixel.h&gt;

#define PIN 0

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(32, PIN);

uint8_t  mode   = 0, // 現在のアニメーション
         offset = 0; // スピンするの位置
uint32_t color  = 0xffae00; // 赤でスタート
uint32_t prevTime;

void setup() {
  pixels.begin();
  pixels.setBrightness(60); // １/３ 明るさ
  prevTime = millis();
}

void loop() {
  uint8_t  i;
  uint32_t t;

  switch(mode) {

   case 0: // ランダムに光る - 一回１LED
    i = random(32);
    pixels.setPixelColor(i, color);
    pixels.show();
    delay(10);
    pixels.setPixelColor(i, 0);
    break;

   case 1: // スピンする輪っか (一回に　８　LEDs )
    for(i=0; i&lt;16; i++) {
      uint32_t c = 0;
      if(((offset + i) &amp; 7) &lt; 2) c = color; // ４ピクセル
      pixels.setPixelColor(   i, c); // 一回目
      pixels.setPixelColor(31-i, c); // ２回目（裏返す）
    }
    pixels.show();
    offset++;
    delay(50);
    break;
  }

  t = millis();
  if((t - prevTime) &gt; 8000) {      // 毎８秒
    mode++;                        // 次のモード
    if(mode &gt; 1) {                 // モードの終わり
      mode = 0;                    // モードスタート
      color &gt;&gt;= 8;                 // 次の色 R-&gt;G-&gt;B
      if(!color) color = 0xffae00; // 赤にリセット
    }
    for(i=0; i&lt;32; i++) pixels.setPixelColor(i, 0);
    prevTime = t;
  }
}
</code></pre>

<p><img src="/img/blog/015/13_gemma.gif" alt="" />
その後、Gemmaにある小さなボタンを押すと、こちらのように赤いLEDが10秒間点滅します。赤いLEDが点滅している間に、スケッチ＞書込装置を使って書き込む をクリックしましょう。</p>

<p><em>※こちらのイメージにはNeoPixel Ringがついていませんが、NeoPixel Ringをはんだ付けしたあとのものへ書き込んでも問題ありません。</em></p>

<p><img src="/img/blog/015/14_arduino.png" alt="" />
赤いLEDの点滅が終わったら、Gemmaへのプログラムの書き込み完了となります。この状態になれば、MicroUSBを外しても大丈夫です。</p>

<h2 id="3-バッテリー接続-ピアスのフック取り付け">3. バッテリー接続＆ピアスのフック取り付け</h2>

<p><img src="/img/blog/015/15_hello.png" alt="" />
最後に、NepPixel Ringとリチュームイオンポリマーバッテリーを接続します。Gemmaボード上に小さなON-OFFスイッチがあるので、スイッチをONにしてきちんと光るかどうかを確かめてください。</p>

<p><img src="/img/blog/015/16_world.png" alt="" />
次にバッテリーを固定します。いろいろなやり方があるかと思いますが、私は両面テープを中央に貼り、ピアスフックとバッテリーの線を固定してみました。</p>

<p><img src="/img/blog/015/17_hoge.png" alt="" />
その上からまた両面テープを貼り、バッテリーを上から付けています。</p>

<p><img src="/img/blog/015/18_fuga.png" alt="" />
最後にNeoPixel Ringとピアスフックを固定させて、ピアスフックの余った長さを切断すればできあがりです＾＾</p>

<p>バッテリーは充電可能なものとなっています。キットには充電機が含まれてないため、充電機がほしい方は<a href="https://www.switch-science.com/catalog/1499/">スイッチサイエンス</a>さんのサイトでお求めください。</p>

<h2 id="できあがり">できあがり</h2>

<p><img src="/img/blog/015/23_mao.png" alt="" /></p>

<p><img src="/img/blog/015/20_mao.png" alt="" /></p>

<p><img src="/img/blog/015/19_mao.png" alt="" /></p>

<p>装着して写真を撮ってみました！<br />
結構ファッショナブルでかわいいですよね！　みなさんもぜひ作ってみてください＾＾</p>

<p>次回の記事もお楽しみにー！</p>
</description>
    </item>
    
    <item>
      <title>#MakerFaireTokyo2016 にウェアラブルな電子楽器を出展してきました！</title>
      <link>https://dotstud.io/blog/uko-exhibited-at-mft2016/</link>
      <pubDate>Mon, 08 Aug 2016 10:58:44 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/uko-exhibited-at-mft2016/</guid>
      <description>

<p>こんにちは！　dotstudioのメイカーエンジニア・うこです。<br />
去る8月6-7日の2日間にわたって開催された、国内最大級のモノづくりの祭典「<a href="http://makezine.jp/event/mft2016/">Maker Faire Tokyo 2016</a>」(以下MFT)に作品を出展してきました。<br />
今回は個人メイカーとして制作したものを出しましたが、弊社エディターのうららがモデルとして一緒に参加してくれました。こちらの記事では、僕が出展した <strong>ウェアラブルなシンセサイザ「Cardiaction」</strong> について紹介させていただきます。</p>

<h2 id="ウェアラブルシンセサイザ-cardiaction-の紹介">ウェアラブルシンセサイザ「Cardiaction」の紹介</h2>

<p><img src="/img/blog/011/01_cardiactionurara.png" alt="" /></p>

<p>「Cardiaction」とは、「心臓の〜」を意味する接頭辞cardiacと、様々な「動き」を意味するactionを組み合わせた造語です。<br />
着用することで着ている人の「心電図波形」をリアルタイムに読み取って音に変換し、服表面に描かれている鍵盤を押さえることで実際に演奏することができます。<br />
また、ボタンの代わりに配置したツマミによって音作りを行うことができます。</p>

<p><img src="/img/blog/011/02_myproto.png" alt="" /></p>

<p>出展者応募時は、僕自身がプロトタイプを着てデモを行ったため、<a href="http://makezine.jp/event/makers2016/u-kokolab/">出展者紹介ページ</a>ではこのような写真が紹介されています。<br />
制作段階において</p>

<ul>
<li>MFT本番は最も暑い時期であるため、半袖またはノースリーブであることが望ましい</li>
<li><strong>着用モデルはカワイイ女の子のほうが圧倒的にウケがよい(超重要)</strong></li>
</ul>

<p>以上の2点から、弊社エディターのうらら着用モデルとして、ダブルボタンのベストに近い形態のウェアラブルシンセサイザを開発することになりました。</p>

<p>また応募時には「チーム名」を求められましたが、個人出展予定だったため10秒ほどで思いついた「u.kokolab」という安易な名義で出展することとなりました(笑)。</p>

<h3 id="コンセプト">コンセプト</h3>

<p>少し哲学的な話になりますので、この節は適宜読み飛ばしてください。</p>

<h4 id="1">1.</h4>

<ul>
<li><p>古代より、ヒトの肉体を駆動させている中枢、もしくは「こころ」の核となる部分は <strong>「心臓」</strong> であると考えられてきました。(<a href="https://ja.wikipedia.org/wiki/%E5%BF%83">Wikipedia:こころ</a>)</p></li>

<li><p>シンセサイザを主とするあらゆるすべての電子楽器は、 <strong>「音源」</strong> を持っており、これはリアルタイムに生成されるか、メモリにあらかじめ書き込まれた状態にあります。電子楽器類はこの音源を元にして、指定された音色・音程・音量に変換できるモジュールを介して発音されることで楽器としての機能を果たしています。つまり、 <strong>「音源は電子楽器における心臓」</strong> であるといえます。</p></li>
</ul>

<p>以上2つの理由から、 <strong>「電子楽器における心臓をヒトの心臓に置き換える」</strong> ことにより、機械である電子楽器とヒトが一体となることによって成立する新たな楽器という構想が生まれました。</p>

<h4 id="2">2.</h4>

<ul>
<li><p>心電図は各人が固有に持っていながら電気的に取り出せる生体信号のひとつで、指紋と同様に「同じパターンをもつ人はいない」という理由からセキュリティにも使われた例があります。(<a href="https://threatpost.com/watch-like-heartbeat-monitor-seeks-to-replace-passwords/102192/">関連リンク</a>)</p></li>

<li><p>バイオリンのような、奏者が音の発生元である弦に触れるようなアコースティックな楽器では、奏者による微妙な音の表現の違いというものが存在します。しかしシンセサイザのような電子楽器では、同じモデルの機体で同じ音作りのパラメータさえ設定すれば、誰が弾いても基本的には同じ音が出ます。</p></li>
</ul>

<p>以上2つの理由から、<strong>「電気的に取得可能で個々人にユニークである心電図」</strong> を、<strong>「誰が演奏しても音に違いの出ない電子楽器」</strong> に適用することで、<strong>誰が演奏しても全く異なった音の出る電子楽器</strong> を作ることができれば、との考えから「Cardiaction」の制作へとつながりました。</p>

<h3 id="デザイン">デザイン</h3>

<p><img src="/img/blog/011/03_design.png" alt="" /></p>

<p>ベースとした衣服はダブルボタンの制服ベストで、ボタン部分はダブルではなく非対称のシングルとし、ボタンの代わりにツマミを配置しています。また、デザインの都合上レディースモデルながら右前となっています。<br />
「Cardiaction」の文字を元にしたロゴモチーフを左側に配置し、「C」の文字を電源マークにして心臓の直上に位置させています。<br />
残りの文字は波形の信号に似せた形をとり、特に「i」の文字を、心電図でよく見られる特徴的なQRS波(<a href="http://www.geocities.jp/pinpinkorori100/sinzou-q-a/sindenzu.html">参考:心電図の基本的なみかた</a>)と同様の形状としています。</p>

<h3 id="技術仕様">技術仕様</h3>

<p>今回の出展時点での仕様となり、今後アップデートしてゆく予定です。</p>

<ul>
<li>同時発音数: 単音(モノフォニック)<br /></li>
<li>鍵盤数: 13鍵</li>
<li>ピッチベンド・オクターブシフト対応</li>
<li>オシレーター: 3(標準四肢誘導心電図による第Ⅰ誘導・第Ⅱ誘導・第Ⅲ誘導の各波形からリアルタイムサンプリング)<br /></li>
<li>音声合成方式: 筋電ノイズを含む心電図波形の減算合成とFM合成の併用</li>
<li>フィルタ: バンドパスフィルタ*2(24dB/Oct固定、中央周波数・Q値可変)<br /></li>
<li>エンベローブ: なし</li>
<li>LFO: なし</li>
<li>ハードウェア(チップ): RaspberryPi3*1, Arduino Micro*2, AD8232単極誘導心電モニターモジュール*3</li>
<li>ハードウェア(出力): USB給電ステレオスピーカー4W*1, NeopixelフルカラーLEDモジュール*40, LEDφ10赤黄緑LED*各1</li>
<li>ハードウェア(入力): 圧力センサ*13, 可変抵抗*4, 接触位置センサ*1, スイッチ*4, 心電図計測用端子*4</li>
<li>服生地: T/Cツイル(ポリエステル65%,綿35%)</li>
</ul>

<p>発音に直接的には関わらない部分として、Cardiactionロゴ部分の発光があります。<br />
こちらは心拍1回に対してC文字部分から一番下までのLED点滅が2周期分光るようになっています。<br />
また、心起電力ベクトル(<a href="http://www.udatsu.vs1.jp/axis.htm">参考:「心電図：心臓電気軸」</a>)を検出し、3次元ベクトルの各パラメータをそれぞれRGBの値に対応させて色を変化させるように設計しています。この色がそのまま音色の違いにも関連しています。</p>

<h3 id="制作課程">制作課程</h3>

<p>こちらはかなり長くなる予定ですので、別記事にして後ほどリンクを貼らせていただきたいと思います。<br />
MFT当日に問い合わせていただいた皆様につきましては、少々お待ち頂ければ幸いです。</p>

<h2 id="デモンストレーションの様子">デモンストレーションの様子</h2>

<p>当日2日間ともかなり忙しくあまり写真や動画を撮れなかったので、Twitterから以下にいくつか引用させていただきます。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">u.kokolabさんのウェアラブルシンセサイザー。パフォーマンスが楽しそう。かわいい。<a href="https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash">#MakerFaireTokyo2016</a> <a href="https://t.co/J84vnaDYN7">pic.twitter.com/J84vnaDYN7</a></p>&mdash; 五味@NT能登キャンプ (@GomiHgy) <a href="https://twitter.com/GomiHgy/status/762150380448784385">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">うらら　うこ　お疲れ！<a href="https://twitter.com/hashtag/mft2016?src=hash">#mft2016</a> <a href="https://twitter.com/hashtag/makerfairetokyo2016?src=hash">#makerfairetokyo2016</a> @ 東京ビッグサイト西ホール <a href="https://t.co/XQLaqqPnht">https://t.co/XQLaqqPnht</a></p>&mdash; のびすけ / sugawara (@n0bisuke) <a href="https://twitter.com/n0bisuke/status/762221932624371712">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">間も無くu.kokolabさんのウェアラブルシンセサイザーの&quot;Cardiaction&quot;のデモが始まります。心電図を使ってメロディーを奏でています！<br>D-02-12 ブース <a href="https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash">#MakerFaireTokyo2016</a> <a href="https://t.co/0I6jDVoe32">pic.twitter.com/0I6jDVoe32</a></p>&mdash; カサネタリウム ホリ@ NT東京 <sup>8</sup>&frasl;<sub>7</sub> (@kasanetarium) <a href="https://twitter.com/kasanetarium/status/762151112900096000">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ウェアラブルシンセめっちゃかわい〜 <a href="https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash">#MakerFaireTokyo2016</a> <a href="https://t.co/yViNlFDh9M">pic.twitter.com/yViNlFDh9M</a></p>&mdash; Kunimi Ishii in 一条 (@141923) <a href="https://twitter.com/141923/status/762193336534900736">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ウェアラブルシンセだ。太ももと腕で取ってる心電波形を音源にする。鍵盤で演奏する。ツマミも効く。実はかなりこったものである。 <a href="https://twitter.com/hashtag/MFT2016?src=hash">#MFT2016</a> <a href="https://t.co/aibrwdmVp1">pic.twitter.com/aibrwdmVp1</a></p>&mdash; 鷲谷憲樹 (@nwashy) <a href="https://twitter.com/nwashy/status/761901762118688769">2016年8月6日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ウェアラブル・シンセサイザー『Cardiaction!』。服が鍵盤に、ってだけでなく、心電波形をオシレーターにして音を作っているらしい。<a href="https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash">#MakerFaireTokyo2016</a> <a href="https://t.co/Zl5TDxRfm1">https://t.co/Zl5TDxRfm1</a></p>&mdash; 布施雄一郎 (@MRYF1968) <a href="https://twitter.com/MRYF1968/status/762389212708560896">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash">#MakerFaireTokyo2016</a> で一番工口かった楽器。 <a href="https://t.co/cGXqUuUNk9">pic.twitter.com/cGXqUuUNk9</a></p>&mdash; クランケ (@kranke_t) <a href="https://twitter.com/kranke_t/status/762296179438686208">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">楽しそうな顔してる笑<a href="https://twitter.com/hashtag/MFT2016?src=hash">#MFT2016</a> <a href="https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash">#MakerFaireTokyo2016</a><a href="https://t.co/OOi2SZ0nWJ">https://t.co/OOi2SZ0nWJ</a></p>&mdash; うらら #MFT2016 (@uraranbon) <a href="https://twitter.com/uraranbon/status/762181686075416576">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">makerfaireでイケてるひとを発見<a href="https://twitter.com/uraranbon">@uraranbon</a> <a href="https://twitter.com/harmoniko">@harmoniko</a>  <a href="https://twitter.com/hashtag/MFT2016?src=hash">#MFT2016</a> <a href="https://t.co/Pk57XR43eo">pic.twitter.com/Pk57XR43eo</a></p>&mdash; わみ@ものづくり (@wamisnet) <a href="https://twitter.com/wamisnet/status/762174015167303680">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">うこ氏 <a href="https://twitter.com/harmoniko">@harmoniko</a> プロデュースの<br>LifeSynthJacket　みたいなやつ<br>うらら氏 <a href="https://twitter.com/uraranbon">@uraranbon</a> やばいかわいい <a href="https://t.co/YKSzfoLl8N">pic.twitter.com/YKSzfoLl8N</a></p>&mdash; えむにわ(社会の底辺) (@m2wasabi) <a href="https://twitter.com/m2wasabi/status/762159724737368064">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<h2 id="まとめ">まとめ</h2>

<p>MFTへの出展は今回で2回目ですが、前回以上に余裕がなく、僕自身はあまり他の展示を見て回れなかったのが残念でした。<br />
そんな中でも手伝って頂いた知り合いの方々や、シンセを着たうららと共に音を出しながら会場を歩いて出しゃばっていったにも関わらず快く対応してくださったメイカーの皆様、本当にありがとうございました。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">メーカーフェア、昨年以上に余裕がなくってあまりほかのブースまわれなかったり実況とか告知もできなくって大変だった……あとこの楽器、他人に触られそうになるっていうのを全く想定してなくてかなり焦った(だってギター弾いてる人のそれを触る他人なんていないでしょ)</p>&mdash; うこ@MFT2016 (@harmoniko) <a href="https://twitter.com/harmoniko/status/762338479481065473">2016年8月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>自分のブースに対する個人的な所感ですが……<br />
MFTにおいては多くの子供たちも見に来られます。<br />
前回、2015年に出した自身の作品「<a href="http://ukokoras.tumblr.com/post/125635484342">Vocaleaper</a>」は、参加者が触りやすい形で展示をしてあり、また特に何も考えず手をかざすだけで音が鳴るというものでした。そのため、多くの子供たちに触っていただけたのですが、今回は展示の特性からもあまり子供が近寄りたいと思えるようなものでなかったと感じています。<br />
個人的には、小さな世代にものづくりの楽しさをもっと知ってもらいたいと考えているため、それが実現できるミニマルなプロダクトを追加で用意しておけばよかったかな、と考えております。</p>

<p>しかし、コンセプトだけでなく見た目にもこだわりを入れたことで、先述のツイートのように多くの方々の目に留めていただくことができました。<br />
<strong>自分の手で一から作り上げたモノを評価していただけるのは、何十回何百回となくやっていてもとても嬉しいものですね！</strong></p>

<h2 id="次回出展予定">次回出展予定</h2>

<p>ウェアラブルシンセサイザ「Cardiaction」は、次回は8月26日(金)にアスキーの主催による「<a href="http://ascii.jp/elem/000/001/202/1202368/">IoT＆H/W BIZ DAY 2 by ASCII STARTUP</a>」に出展します。<br />
こちらではメイカー・うこの所属元であるdotstudio株式会社として出展の予定です。なお現時点では販売可能なプロダクトではありませんが、希望者が万が一いらっしゃったら……？ご期待くださいませ。<br />
ご来場のほどを一同お待ちしております！</p>
</description>
    </item>
    
    <item>
      <title>JS1行でリアルタイム通信ができる「milkcocoa」のLT大会で登壇してきた！</title>
      <link>https://dotstud.io/blog/milkcocoa-battle-lightning-talk/</link>
      <pubDate>Fri, 05 Aug 2016 09:57:09 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/milkcocoa-battle-lightning-talk/</guid>
      <description>

<p>こんにちは！　dotstudioのエディター、うららです。非エンジニアですが、先日バックエンドサービス「<a href="https://mlkcca.com/">milkcocoa</a>」のLT大会「<strong>紅白milkcocoa合戦</strong>」に参加してきました！</p>

<p>とても刺激的なイベントだったので、当日の様子をまとめます！</p>

<h2 id="男女対抗で戦う-紅白milkcocoa合戦-とは">男女対抗で戦う「紅白milkcocoa合戦」とは</h2>

<p><img src="/img/blog/005/01_milkcocoa.png" alt="" />
<a href="http://mlkcca.connpass.com/event/34936/">【増枠】紅白 Milkcocoa 合戦！【祭り】</a></p>

<p>バックエンドサービス「milkcocoa」をテーマに、男女5名ずつが紅白チームに分かれて競ったのが「紅白milkcocoa合戦」というイベント。1人5分ずつライトニングトークを繰り広げるという内容でした。</p>

<p>簡単にmilkcocoaの説明をすると、<strong>JavaScriptのソースコードを1行挿入するだけで、リアルタイム通信ができるようになる</strong> という感じです。Webサービス、特にリアルタイムな通信を必要とするWebサービスではバックエンドの構築が必要不可欠。そんなとき、milkcocoaを使えばバックエンド未経験の人でも簡単にリアルタイム通信ができるようになるという代物です。</p>

<h2 id="わたしが発表したもの">わたしが発表したもの</h2>

<p><img src="/img/blog/005/02_urara.png" alt="" />
私が発表したのは、がじぇるねが制作しているマイコンボード「<a href="http://gadget.renesas.com/ja/product/cotton.html">GR-COTTON</a>」とmilkcocoaを組み合わせて、
「<strong>パソコン上から部屋の温度がわかる</strong>」という仕組み。私はHTMLとCSSしかできないので、1990年代風のWebサイトにしてみました。</p>

<script async class="speakerdeck-embed" data-id="aa68f3d1934d480f9a3a26a6062ffa9b" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>当日発表したプレゼン資料はこちらです。作り方も書いてあるのでぜひ試してみてください。</p>

<h2 id="イベントの様子">イベントの様子</h2>

<p>「milkcocoa合戦」では、合計で11名の方が登壇しています。せっかくなので、その中から個人的なベスト3を紹介してみます。</p>

<h3 id="たみーさんの-オンラインで名刺を交換できるサービス">たみーさんの「オンラインで名刺を交換できるサービス」</h3>

<p><img src="/img/blog/005/03_pokemon.png" alt="" />
エンジニアって紙文化ないのに、未だに紙の名刺を交換するのはどうなの……？　ということでたみーさんが作ったのは「<strong>オンラインで名刺を交換できる</strong>」サービス。<strong>自身をポケモンにみたてて、友達になったらくっつく</strong> というめちゃくちゃかわいいものでした。</p>

<h3 id="かよこさんの-笑顔が減るとソウルジェムが濁るツール">かよこさんの「笑顔が減るとソウルジェムが濁るツール」</h3>

<p><img src="/img/blog/005/04_souljem.png" alt="" />
「エンジニアになってから笑っていない」というかよこさんは、<strong>表情を判定し、笑顔が減るとソウルジェムが濁り、笑うと綾野剛からメッセをくれる</strong> という仕組みを作りました！　ソウルジェムは、アニメ『魔法少女まどかマギカ』で登場する重要なアイテム。アイデアが素晴らしすぎますし、悩みも解決されていて尊敬の念しかありません。</p>

<h3 id="うこの-webから色を変えられるランタン">うこの「Webから色を変えられるランタン」</h3>

<!-- ![](/img/blog/005/05_lantern.png) -->

<p><center><blockquote class="twitter-video" data-lang="ja"><p lang="ja" dir="ltr">おー！すげえ！ webから操作 <a href="https://twitter.com/hashtag/mlkcca?src=hash">#mlkcca</a> <a href="https://t.co/RP2YBn7uOk">pic.twitter.com/RP2YBn7uOk</a></p>&mdash; タカシにヒロシ (@bakuonboogie) <a href="https://twitter.com/bakuonboogie/status/755728357258436608">2016年7月20日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></center></p>

<p>dotstudioのメイカーであるうこは、100円ショップのランタンの光の色を、Webから操作できるという仕組みを作ってました。一斉にみんなで操作をしたので、ランタンが荒ぶる状態に。</p>

<h3 id="ほかにもいろいろなltが繰り広げられました">ほかにもいろいろなLTが繰り広げられました！</h3>

<ul>
<li>世界中で大人気の箱庭ゲーム『Minecraft』からスライドをめくれる仕組みをつくったいわたん（ <a href="http://twitter.com/iwata_n">@iwata_n</a> ）さん</li>
<li>洗濯が終わったら通知がくるようなおうちハックに挑戦してみた、しのはら（ <a href="https://twitter.com/shanonim">@shanonim</a> ）さん</li>
<li>いま一番ちゃらいらしいReact, redux, redux-sagaをつかってみたという <a href="http://twitter.com/mookjp">@mookjp</a> さん</li>
<li>milkcocoaでほしかったツールを追加した「bitter-coffee」をつくりあげたもし（ <a href="https://twitter.com/moshisora990">@moshisora990</a>）さん</li>
<li>麻雀用のアプリを作り、裏側にmilkcocoaを入れたというなつみ（<a href="https://twitter.com/natsumi_m31">@natsumi_m31</a>）さん</li>
<li>ハムスターのために、milkcocoaで室温を管理してみたへれんさん（3時間経つと自動でエアコンが切れる部屋にいるそうな……）</li>
<li>マグネットで壁にくっついて、垂直に走るラジコン「うぉーるぼっとESP」を作ったという勝さん</li>
</ul>

<h2 id="結果">結果</h2>

<p><img src="/img/blog/005/06_m2w.png" alt="" />
女性陣の紅組と、男性陣の白組。どちらが勝つかは、えむにわ氏がつくった投票システムで決めました。結果、<strong>紅組（女性陣）の圧倒的な勝利</strong> となったようです。やったー！</p>

<p><img src="/img/blog/005/07_sticker.png" alt="" />
勝利の記念にもらったのは、mbedステッカーと「GR-SAKURA」。</p>

<p>登壇だけで終わるのではなく、<strong>投票がおこなわれたり、景品をもらえたり</strong> といった仕組みは久しぶりでした。ドキドキした。</p>

<h2 id="おわりに">おわりに</h2>

<p>milkcocoaの次回開催予定は未定ですが、ほかにも <strong>IoTの勉強会やWebVRのイベントなどが開催予定</strong> です！　特に <strong>Webエンジニアのみなさん</strong> にとって実りのあるものがあると思うので、ぜひ参加してみてください！</p>

<ul>
<li>2016年8月8日（月）
<a href="http://web3dj.connpass.com/event/32568/">WebVR入門者の会</a></li>
<li>2016年8月12日（金）
<a href="http://iotlt.connpass.com/event/35436/">IoT縛りの勉強会! IoTLT vol.18 @ Amazon</a></li>
</ul>

<p><center><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">今日はmilkcocoa紅白合戦にご参加くださりありがとうございました😂💫登壇者の方々の発表は全部新しい視点をもらえたり笑えるところがあったり、楽しませてもらいました。ありがとうございます。また次お会いしましょう🙋🍻<a href="https://twitter.com/hashtag/mlkcca?src=hash">#mlkcca</a> <a href="https://t.co/PdUrDdivbU">pic.twitter.com/PdUrDdivbU</a></p>&mdash; Milkcocoa girls (@milkcocoagirls) <a href="https://twitter.com/milkcocoagirls/status/755757758931095556">2016年7月20日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></center>
では！</p>
</description>
    </item>
    
    <item>
      <title>ウィッシュリスト届きました！開封の儀をします。</title>
      <link>https://dotstud.io/blog/thanks-for-sending-whitems/</link>
      <pubDate>Thu, 04 Aug 2016 09:59:47 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/thanks-for-sending-whitems/</guid>
      <description>

<p>こんにちは！　dotstudioのエディター、うららです。（⬆️こちらの写真は私ではなく、デザイナーのちゃちゃまる）<br />
先日公開した<a href="https://docs.google.com/spreadsheets/u/1/d/1DD5TeMYgGpstDEwbUWsDFJJrvzEyGbcfEL7cqo3XzXs/edit#gid=0">ウィッシュリスト</a>の品が続々と届き始めました。ありがとうございます！</p>

<p><img src="/img/blog/009/01_open.png" alt="" />
せっかくなので、開封の儀の様子を本記事で紹介していきます！<br />
この日届いたのは5つのアイテムです。</p>

<h2 id="1-モニターと目覚まし時計-by-さんぺー-たかあき">1. モニターと目覚まし時計 by さんぺー＆たかあき</h2>

<p><img src="/img/blog/009/02_monitor.png" alt="" />
まず届いたのは、モニターと目覚まし時計！<br />
モニターはさっそく、会議用の机へ。背丈がちょうどいい感じです！</p>

<p><img src="/img/blog/009/03_clock.png" alt="" />
ちなみに目覚まし時計はウィッシュリストに入れていません。なぜ。</p>

<p><img src="/img/blog/009/04_address.png" alt="" />
株式会社LIGのデザイナーたかあき＆ライターさんぺーからいただきました。<br />
宛名をよく見ると……</p>

<p><em>「のびたかこめうららちゃちゃうこ 様」</em></p>

<p>おいおいまとめすぎだろ。個人的にツボでした。<br />
たかあき、さんぺー、ありがとうございます！！！！</p>

<h2 id="2-プリンター-by-m2wasabi-さん">2. プリンター by @m2wasabi さん</h2>

<p><img src="/img/blog/009/05_printer.png" alt="" />
いつものびすけ主催のイベント「IoTLT」などでお世話になっているえむにわさん（ <a href="https://twitter.com/m2wasabi">@m2wasabi</a> ）からは、プリンターをいただきました！　ちょうど印刷したいものがあったのですが、プリンタがなくて「コンビニで印刷するか……？」と困っていたところでした。</p>

<p><img src="/img/blog/009/06_printer.png" alt="" />
シュッと配置。届いたその日に早速使わせてもらいました。えむにわさん、ありがとうございます！</p>

<h2 id="3-シュレッダー-by-1ft-seabass-さん">3. シュレッダー by @1ft-seabass さん</h2>

<p><img src="/img/blog/009/07_shredder.png" alt="" />
普段から外部ライターさんとしてお世話になっている田中さん（ <a href="https://twitter.com/1ft_seabass">@1ft-seabass</a> ）からは、シュレダーをプレゼントしていただきました！　これで機密書類を処分できる……。</p>

<p><img src="/img/blog/009/08_shredder.png" alt="" />
代表ののびすけ。ちょっとにやけてますね。田中さん、ありがとうございます！</p>

<h2 id="4-wii-by-iwata-n-さん">4. Wii by @iwata_n さん</h2>

<p><img src="/img/blog/009/09_wii.png" alt="" />
外部ライターとしても、イベント関係者としてもめっちゃくちゃお世話になっているいわたん（ <a href="http://twitter.com/iwata_n">@iwata_n</a> ）さんからは、おさがりのWiiをいただきました！　<strong>テレビもつけてくれました</strong>（！）。
<!-- ![](/img/blog/009/10_wii.png)（撮影） -->
みんなで夜な夜なスマブラしてます。ありがとうございます！</p>

<h2 id="5-つくえ-by-isseium-さん">5. つくえ by @isseium さん</h2>

<p><img src="/img/blog/009/11_desk.png" alt="" />
い、IKEAのデスクです！！！！！！！　3つもいただきました。<br />
これまでは箱の上に木の板を乗せたものを使っていた（！）のですが、みんな腰痛が気になりだしていたところでした。作業効率がぐーーーーーんとアップ！！！<strong>「机って大事だね」と、改めて机に感謝する事態に</strong> までなりました。<a href="https://twitter.com/isseium">@isseium</a>さん、ありがとうございます！</p>

<h2 id="まだまだ募集しています">まだまだ募集しています</h2>

<p><img src="/img/blog/009/12_open.png" alt="" />
<em>▲セッティングの様子</em></p>

<p>ということで、ウィッシュリストでいただいたものを紹介させてもらいました。<a href="https://docs.google.com/spreadsheets/u/1/d/1DD5TeMYgGpstDEwbUWsDFJJrvzEyGbcfEL7cqo3XzXs/edit#gid=0">ウィッシュリスト</a> はまだまだ公開中です。もし送ってくださる方はご連絡ください〜！</p>

<p>会社として必要なものを続々と送っていただきました！　これで会社として存続できます。。。改めて、本当に本当にありがとうございます！＆これからもdotstudioをよろしくお願いしますm(_ _)m</p>
</description>
    </item>
    
    <item>
      <title>ウィッシュリスト届きました！開封の儀をします。</title>
      <link>https://dotstud.io/blog/thanks-for-sending-whitems/</link>
      <pubDate>Thu, 04 Aug 2016 09:59:47 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/thanks-for-sending-whitems/</guid>
      <description>

<p>こんにちは！　dotstudioのエディター、うららです。（⬆️こちらの写真は私ではなく、デザイナーのちゃちゃまる）<br />
先日公開した<a href="https://docs.google.com/spreadsheets/u/1/d/1DD5TeMYgGpstDEwbUWsDFJJrvzEyGbcfEL7cqo3XzXs/edit#gid=0">ウィッシュリスト</a>の品が続々と届き始めました。ありがとうございます！</p>

<p><img src="/img/blog/009/01_open.png" alt="" />
せっかくなので、開封の儀の様子を本記事で紹介していきます！<br />
この日届いたのは5つのアイテムです。</p>

<h2 id="1-モニターと目覚まし時計-by-さんぺー-たかあき">1. モニターと目覚まし時計 by さんぺー＆たかあき</h2>

<p><img src="/img/blog/009/02_monitor.png" alt="" />
まず届いたのは、モニターと目覚まし時計！<br />
モニターはさっそく、会議用の机へ。背丈がちょうどいい感じです！</p>

<p><img src="/img/blog/009/03_clock.png" alt="" />
ちなみに目覚まし時計はウィッシュリストに入れていません。なぜ。</p>

<p><img src="/img/blog/009/04_address.png" alt="" />
株式会社LIGのデザイナーたかあき＆ライターさんぺーからいただきました。<br />
宛名をよく見ると……</p>

<p><em>「のびたかこめうららちゃちゃうこ 様」</em></p>

<p>おいおいまとめすぎだろ。個人的にツボでした。<br />
たかあき、さんぺー、ありがとうございます！！！！</p>

<h2 id="2-プリンター-by-m2wasabi-さん">2. プリンター by @m2wasabi さん</h2>

<p><img src="/img/blog/009/05_printer.png" alt="" />
いつものびすけ主催のイベント「IoTLT」などでお世話になっているえむにわさん（ <a href="https://twitter.com/m2wasabi">@m2wasabi</a> ）からは、プリンターをいただきました！　ちょうど印刷したいものがあったのですが、プリンタがなくて「コンビニで印刷するか……？」と困っていたところでした。</p>

<p><img src="/img/blog/009/06_printer.png" alt="" />
シュッと配置。届いたその日に早速使わせてもらいました。えむにわさん、ありがとうございます！</p>

<h2 id="3-シュレッダー-by-1ft-seabass-さん">3. シュレッダー by @1ft-seabass さん</h2>

<p><img src="/img/blog/009/07_shredder.png" alt="" />
普段から外部ライターさんとしてお世話になっている田中さん（ <a href="https://twitter.com/1ft_seabass">@1ft-seabass</a> ）からは、シュレダーをプレゼントしていただきました！　これで機密書類を処分できる……。</p>

<p><img src="/img/blog/009/08_shredder.png" alt="" />
代表ののびすけ。ちょっとにやけてますね。田中さん、ありがとうございます！</p>

<h2 id="4-wii-by-iwata-n-さん">4. Wii by @iwata_n さん</h2>

<p><img src="/img/blog/009/09_wii.png" alt="" />
外部ライターとしても、イベント関係者としてもめっちゃくちゃお世話になっているいわたん（ <a href="http://twitter.com/iwata_n">@iwata_n</a> ）さんからは、おさがりのWiiをいただきました！　<strong>テレビもつけてくれました</strong>（！）。
<!-- ![](/img/blog/009/10_wii.png)（撮影） -->
みんなで夜な夜なスマブラしてます。ありがとうございます！</p>

<h2 id="5-つくえ-by-isseium-さん">5. つくえ by @isseium さん</h2>

<p><img src="/img/blog/009/11_desk.png" alt="" />
い、IKEAのデスクです！！！！！！！　3つもいただきました。<br />
これまでは箱の上に木の板を乗せたものを使っていた（！）のですが、みんな腰痛が気になりだしていたところでした。作業効率がぐーーーーーんとアップ！！！<strong>「机って大事だね」と、改めて机に感謝する事態に</strong> までなりました。<a href="https://twitter.com/isseium">@isseium</a>さん、ありがとうございます！</p>

<h2 id="まだまだ募集しています">まだまだ募集しています</h2>

<p><img src="/img/blog/009/12_open.png" alt="" />
<em>▲セッティングの様子</em></p>

<p>ということで、ウィッシュリストでいただいたものを紹介させてもらいました。<a href="https://docs.google.com/spreadsheets/u/1/d/1DD5TeMYgGpstDEwbUWsDFJJrvzEyGbcfEL7cqo3XzXs/edit#gid=0">ウィッシュリスト</a> はまだまだ公開中です。もし送ってくださる方はご連絡ください〜！</p>

<p>会社として必要なものを続々と送っていただきました！　これで会社として存続できます。。。改めて、本当に本当にありがとうございます！＆これからもdotstudioをよろしくお願いしますm(_ _)m</p>
</description>
    </item>
    
    <item>
      <title>	もう、傘を失くさない！Bluetoothを搭載したスマート傘「HAZ」が世界を変えるかも？</title>
      <link>https://dotstud.io/blog/haz-umbrella-remote-control/</link>
      <pubDate>Wed, 03 Aug 2016 08:00:41 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/haz-umbrella-remote-control/</guid>
      <description>

<p>こんにちは〜！　dotstudioライターのおこめです。</p>

<p>最近雨の日が多くて、外に出ても傘を開けたり閉めたり面倒くさいですし、うっかり失くしてしまったりと最悪です……。そんなときに、画期的な傘を見つけました。</p>

<p><img src="/img/blog/006/01_haz.png" alt="" /></p>

<p><em>スマート傘「HAZ」とは？</em>
<em>日本未上陸、片手で自動開閉できる傘。台湾のスタートアップが作り、現在はアメリカで話題になっています。Bluetoothが搭載されているため、どこで失くしたかをアプリから探知することもできるんです。詳細は<a href="http://www.hazumbrella.com/">こちら</a>からどうぞ。</em></p>

<p>ところで、雨の日っていつもと違う雰囲気で、異世界みたいでいいですよね。伊坂幸太郎さんの著書『死神の精度』に登場する死神の千葉さんは、「雨の日しか人間界に出てこない」という設定ですし。</p>

<p>もし <strong>今生きている世界とは違う世界があるのだとしたら、どんな世界になるのでしょう？</strong> 今いる世界とは違う世界、つまりパラレルワールドですね。ということで今回は、傘を使ったパラレルワールド……ならぬ「<strong>パラソルワールド</strong>」を考えてみました。</p>

<p>それでは、スタートです！</p>

<h2 id="片手で閉じられる傘-haz-がない世界">片手で閉じられる傘「HAZ」がない世界</h2>

<p><img src="/img/blog/006/02_close1.png" alt="" />
今日は彼氏とデートする日だぁ。あいにくの雨だけど、きっと大丈夫。だって大学院を受験する彼のためにダルマを買ってきてあげたんだもん。よしっ！　喜ばせちゃうぞう♪</p>

<p><img src="/img/blog/006/03_close1.png" alt="" />
軽く顎をひき、口角を45°上げたキラースマイル。ここでちょっと首をかしげるのも◎。大きなダルマとの対比で私の顔がちっちゃく見えてるはず。あとは両手で可愛らしくダルマをプレゼントしたら高ポイントだな。</p>

<p>さて、傘を閉じてっ……と……</p>

<p><img src="/img/blog/006/04_close1.png" alt="" />
<strong>ういっしょぉおおおおおおおおおおおおおおおおっっと！</strong></p>

<p><img src="/img/blog/006/05_close1.png" alt="" />
<strong>ボトッ</strong></p>

<p><img src="/img/blog/006/06_close1.png" alt="" />
彼氏「目の前で落とすなんて……大学院にも落ちそうだよ！」<br />
私だって落としたくて落としたわけじゃないのに……。</p>

<p><img src="/img/blog/006/07_close1.png" alt="" />
彼氏「ありえない。さよなら」<br />
おこめ「ちょっと待って！　行かないで！　私には貴方しかいないの！！」</p>

<p>キメ台詞も言ったのにフラれた……。最悪。</p>

<p><center> <em>〜BAD END〜</em> </center></p>

<p>・</p>

<p>・</p>

<p>・</p>

<h2 id="片手で閉じられる傘-haz-がある世界">片手で閉じられる傘「HAZ」がある世界</h2>

<p><img src="/img/blog/006/08_close2.png" alt="" />
今日は彼氏とデートする日だぁ。あいにくの雨だけど、きっと大丈夫。この前買ったばかりの「HAZ」って傘だってあるし、大学院を受験する彼のためにダルマを買ってきてあげたんだもん。よしっ！　喜ばせちゃうぞう♪</p>

<p><img src="http://cdn.liginc.co.jp/wp-content/uploads/2016/06/DSC_0150-1.gif" alt="" />
早速ダルマを渡すために片手で傘を閉じよーっと！<br />
彼氏に会えて私、有頂天。</p>

<p><img src="/img/blog/006/10_close2.png" alt="" />
小首をかしげながら、両手でしっかりとダルマ渡す。<br />
このとき、彼氏の目をしっかり見ることを忘れずに。うん可愛いぞ、私。</p>

<p><img src="/img/blog/006/11_close2.png" alt="" />
彼氏「ありがとう！　早速だけど合格できるように目を書いておくね」<br />
真剣な彼、超絶かっこいい♡</p>

<p><img src="/img/blog/006/12_close2.png" alt="" />
相合傘で2人並んで帰ってる姿にダルマも微笑んでくれてるみたい。バリ楽しい！</p>

<p><img src="/img/blog/006/13_close2.png" alt="" /></p>

<p><center> <em>〜HAPPY END〜</em> </center></p>

<h2 id="bluetoothで位置がわかる傘-haz-がない世界">Bluetoothで位置がわかる傘「HAZ」がない世界</h2>

<p><img src="/img/blog/006/14_bluetooth1.png" alt="" />
やっば。あのあと傘どっかに置いてきちゃったみたい〜。探しにいこ〜っと。<br />
私ってドジっ子ちゃん。</p>

<p>・</p>

<p>・</p>

<p>・</p>

<h3 id="3日後">3日後</h3>

<p><img src="/img/blog/006/15_bluetooth1.png" alt="" />
傘がなくなっちゃったから、今日も傘を探してる。この前から3日間も探してるけど見つからないな。<br />
私ってドジっ子ちゃん。</p>

<p><img src="/img/blog/006/16_bluetooth1.png" alt="" />
風邪で死んじゃった。<br />
私ってドジっ子ちゃん。</p>

<p><center> <em>〜BAD END〜</em> </center></p>

<p>・</p>

<p>・</p>

<p>・</p>

<p>・</p>

<h2 id="bluetoothで位置がわかる傘-haz-がある世界">Bluetoothで位置がわかる傘「HAZ」がある世界</h2>

<p><img src="/img/blog/006/14_bluetooth1.png" alt="" />
やっば。あのあと傘どっかに置いてきちゃったみたい〜。<br />
私ってドジっ子ちゃん。</p>

<p><img src="/img/blog/006/17_bluetooth2.png" alt="" />
でも大丈夫。「HAZ」はBluetoothで携帯のアプリと繋がるから、どの場所でBluetoothが切れたかをアプリで確認できるんだった。</p>

<p><img src="/img/blog/006/18_bluetooth2.png" alt="" />
あっ！　神社で忘れたっぽい……。</p>

<p><img src="/img/blog/006/19_bluetooth2.png" alt="" />
あっ！　あった〜。<br />
ふぅ、よかったぁ……<strong>ん？</strong></p>

<p><img src="/img/blog/006/20_bluetooth2.png" alt="" />
<strong>はぁぁああああああぁぁん！？</strong><br />
彼氏が他の女の子からダルマをもらってる！？！？！？</p>

<p><img src="/img/blog/006/21_bluetooth2.png" alt="" />
彼氏「だるまをもらえて幸せだよ。愛してる」<br />
女の子「私も♡」</p>

<p><img src="/img/blog/006/22_bluetooth2.png" alt="" />
（……きっと彼は今幸せな気分に浸ってるでしょう？　後ろから近づいてハンカチに染み込ませたクロロホルムを嗅がせるの。すぐにお休みできるから心配しないでね。起きた瞬間に感じるのは両手と両足につけられた鉄の重みだと思う。漏斗を口の中に入れ、喉の奥に水を入れ続ける。一気に飲ませちゃって呼吸困難で殺しちゃうのはだめ。毎日少しずつ水を入れ続ける。下からも水を垂れ流し続ける。彼は水膨れしてパンパンの水風船のようになる。それが末期に達すると激痛が走る。痛くて痛くて死にそうなのに、まだ水を飲まされ続ける。最期には身体に外傷が無い綺麗な遺体ができる。それをホルマリンに漬けて保存しとくんだ。すごく楽しそう……）</p>

<p><img src="/img/blog/006/23_bluetooth2.png" alt="" />
「まぁ、いっか。別にあいつのこと、そんなに好きじゃなかったし。<strong><a href="http://www.hazumbrella.com/">HAZ</a>帰ってきたし</strong>」</p>

<p><img src="/img/blog/006/24_bluetooth2.png" alt="" /></p>

<p><center> <em>〜HAPPY END〜</em> </center></p>
</description>
    </item>
    
    <item>
      <title>	もう、傘を失くさない！Bluetoothを搭載したスマート傘「HAZ」が世界を変えるかも？</title>
      <link>https://dotstud.io/blog/haz-umbrella-remote-control/</link>
      <pubDate>Wed, 03 Aug 2016 08:00:41 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/haz-umbrella-remote-control/</guid>
      <description>

<p>こんにちは〜！　dotstudioライターのおこめです。</p>

<p>最近雨の日が多くて、外に出ても傘を開けたり閉めたり面倒くさいですし、うっかり失くしてしまったりと最悪です……。そんなときに、画期的な傘を見つけました。</p>

<p><img src="/img/blog/006/01_haz.png" alt="" /></p>

<p><em>スマート傘「HAZ」とは？</em>
<em>日本未上陸、片手で自動開閉できる傘。台湾のスタートアップが作り、現在はアメリカで話題になっています。Bluetoothが搭載されているため、どこで失くしたかをアプリから探知することもできるんです。詳細は<a href="http://www.hazumbrella.com/">こちら</a>からどうぞ。</em></p>

<p>ところで、雨の日っていつもと違う雰囲気で、異世界みたいでいいですよね。伊坂幸太郎さんの著書『死神の精度』に登場する死神の千葉さんは、「雨の日しか人間界に出てこない」という設定ですし。</p>

<p>もし <strong>今生きている世界とは違う世界があるのだとしたら、どんな世界になるのでしょう？</strong> 今いる世界とは違う世界、つまりパラレルワールドですね。ということで今回は、傘を使ったパラレルワールド……ならぬ「<strong>パラソルワールド</strong>」を考えてみました。</p>

<p>それでは、スタートです！</p>

<h2 id="片手で閉じられる傘-haz-がない世界">片手で閉じられる傘「HAZ」がない世界</h2>

<p><img src="/img/blog/006/02_close1.png" alt="" />
今日は彼氏とデートする日だぁ。あいにくの雨だけど、きっと大丈夫。だって大学院を受験する彼のためにダルマを買ってきてあげたんだもん。よしっ！　喜ばせちゃうぞう♪</p>

<p><img src="/img/blog/006/03_close1.png" alt="" />
軽く顎をひき、口角を45°上げたキラースマイル。ここでちょっと首をかしげるのも◎。大きなダルマとの対比で私の顔がちっちゃく見えてるはず。あとは両手で可愛らしくダルマをプレゼントしたら高ポイントだな。</p>

<p>さて、傘を閉じてっ……と……</p>

<p><img src="/img/blog/006/04_close1.png" alt="" />
<strong>ういっしょぉおおおおおおおおおおおおおおおおっっと！</strong></p>

<p><img src="/img/blog/006/05_close1.png" alt="" />
<strong>ボトッ</strong></p>

<p><img src="/img/blog/006/06_close1.png" alt="" />
彼氏「目の前で落とすなんて……大学院にも落ちそうだよ！」<br />
私だって落としたくて落としたわけじゃないのに……。</p>

<p><img src="/img/blog/006/07_close1.png" alt="" />
彼氏「ありえない。さよなら」<br />
おこめ「ちょっと待って！　行かないで！　私には貴方しかいないの！！」</p>

<p>キメ台詞も言ったのにフラれた……。最悪。</p>

<p><center> <em>〜BAD END〜</em> </center></p>

<p>・</p>

<p>・</p>

<p>・</p>

<h2 id="片手で閉じられる傘-haz-がある世界">片手で閉じられる傘「HAZ」がある世界</h2>

<p><img src="/img/blog/006/08_close2.png" alt="" />
今日は彼氏とデートする日だぁ。あいにくの雨だけど、きっと大丈夫。この前買ったばかりの「HAZ」って傘だってあるし、大学院を受験する彼のためにダルマを買ってきてあげたんだもん。よしっ！　喜ばせちゃうぞう♪</p>

<p><img src="http://cdn.liginc.co.jp/wp-content/uploads/2016/06/DSC_0150-1.gif" alt="" />
早速ダルマを渡すために片手で傘を閉じよーっと！<br />
彼氏に会えて私、有頂天。</p>

<p><img src="/img/blog/006/10_close2.png" alt="" />
小首をかしげながら、両手でしっかりとダルマ渡す。<br />
このとき、彼氏の目をしっかり見ることを忘れずに。うん可愛いぞ、私。</p>

<p><img src="/img/blog/006/11_close2.png" alt="" />
彼氏「ありがとう！　早速だけど合格できるように目を書いておくね」<br />
真剣な彼、超絶かっこいい♡</p>

<p><img src="/img/blog/006/12_close2.png" alt="" />
相合傘で2人並んで帰ってる姿にダルマも微笑んでくれてるみたい。バリ楽しい！</p>

<p><img src="/img/blog/006/13_close2.png" alt="" /></p>

<p><center> <em>〜HAPPY END〜</em> </center></p>

<h2 id="bluetoothで位置がわかる傘-haz-がない世界">Bluetoothで位置がわかる傘「HAZ」がない世界</h2>

<p><img src="/img/blog/006/14_bluetooth1.png" alt="" />
やっば。あのあと傘どっかに置いてきちゃったみたい〜。探しにいこ〜っと。<br />
私ってドジっ子ちゃん。</p>

<p>・</p>

<p>・</p>

<p>・</p>

<h3 id="3日後">3日後</h3>

<p><img src="/img/blog/006/15_bluetooth1.png" alt="" />
傘がなくなっちゃったから、今日も傘を探してる。この前から3日間も探してるけど見つからないな。<br />
私ってドジっ子ちゃん。</p>

<p><img src="/img/blog/006/16_bluetooth1.png" alt="" />
風邪で死んじゃった。<br />
私ってドジっ子ちゃん。</p>

<p><center> <em>〜BAD END〜</em> </center></p>

<p>・</p>

<p>・</p>

<p>・</p>

<p>・</p>

<h2 id="bluetoothで位置がわかる傘-haz-がある世界">Bluetoothで位置がわかる傘「HAZ」がある世界</h2>

<p><img src="/img/blog/006/14_bluetooth1.png" alt="" />
やっば。あのあと傘どっかに置いてきちゃったみたい〜。<br />
私ってドジっ子ちゃん。</p>

<p><img src="/img/blog/006/17_bluetooth2.png" alt="" />
でも大丈夫。「HAZ」はBluetoothで携帯のアプリと繋がるから、どの場所でBluetoothが切れたかをアプリで確認できるんだった。</p>

<p><img src="/img/blog/006/18_bluetooth2.png" alt="" />
あっ！　神社で忘れたっぽい……。</p>

<p><img src="/img/blog/006/19_bluetooth2.png" alt="" />
あっ！　あった〜。<br />
ふぅ、よかったぁ……<strong>ん？</strong></p>

<p><img src="/img/blog/006/20_bluetooth2.png" alt="" />
<strong>はぁぁああああああぁぁん！？</strong><br />
彼氏が他の女の子からダルマをもらってる！？！？！？</p>

<p><img src="/img/blog/006/21_bluetooth2.png" alt="" />
彼氏「だるまをもらえて幸せだよ。愛してる」<br />
女の子「私も♡」</p>

<p><img src="/img/blog/006/22_bluetooth2.png" alt="" />
（……きっと彼は今幸せな気分に浸ってるでしょう？　後ろから近づいてハンカチに染み込ませたクロロホルムを嗅がせるの。すぐにお休みできるから心配しないでね。起きた瞬間に感じるのは両手と両足につけられた鉄の重みだと思う。漏斗を口の中に入れ、喉の奥に水を入れ続ける。一気に飲ませちゃって呼吸困難で殺しちゃうのはだめ。毎日少しずつ水を入れ続ける。下からも水を垂れ流し続ける。彼は水膨れしてパンパンの水風船のようになる。それが末期に達すると激痛が走る。痛くて痛くて死にそうなのに、まだ水を飲まされ続ける。最期には身体に外傷が無い綺麗な遺体ができる。それをホルマリンに漬けて保存しとくんだ。すごく楽しそう……）</p>

<p><img src="/img/blog/006/23_bluetooth2.png" alt="" />
「まぁ、いっか。別にあいつのこと、そんなに好きじゃなかったし。<strong><a href="http://www.hazumbrella.com/">HAZ</a>帰ってきたし</strong>」</p>

<p><img src="/img/blog/006/24_bluetooth2.png" alt="" /></p>

<p><center> <em>〜HAPPY END〜</em> </center></p>
</description>
    </item>
    
    <item>
      <title>史上初!? NodeBotsの日本向けキットを作成しました！ #nodebots</title>
      <link>https://dotstud.io/blog/nodebots-kit-guide-vol1/</link>
      <pubDate>Tue, 26 Jul 2016 14:48:32 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodebots-kit-guide-vol1/</guid>
      <description>

<p>こんにちは、dotstudio代表の<a href="https://twitter.com/n0bisuke">のびすけ</a>です。
今日は、世界で人気のNode.js/Johnny-Fiveのワークショップ「<a href="https://github.com/tableflip/nodebot-workshop">NodeBot Workshop</a>」で使うアイテムをまとめた、「<strong>NodeBot Workshop Kit JP ver</strong>」というキットを作ったのでその紹介をします。
また、 NodeBot Workshopの1問目の配線解説も本記事で行いますので、ぜひ挑戦してみてください！</p>

<p><strong>NodeBot Workshop向けにカスタマイズされたキットはおそらく世界初です！</strong></p>

<p>NodeBotsの入門は<a href="http://liginc.co.jp/283711">こちらの記事(Webな人でもハードウェア制御が簡単に！Node.jsでJavaScript Roboticsを楽しもう #nodebots_jp)</a>を参照してください！</p>

<blockquote>
<p>購入ページは<a href="https://dotstud.io/projects/nodebots-seeeduino-for-beginners/">こちら</a>になります。</p>
</blockquote>

<h2 id="iotやるときの-まずはじめに何を買えばいいか分からない-を解消">IoTやるときの”まずはじめに何を買えばいいか分からない”を解消</h2>

<p>　入門者にとって最初に何を買えばいいのかって分からないんですよね。NodeBot Workshopでもプログラムまでは書くことができるけど、実際に電子工作をするフェーズで何を準備すればいいのか分からないという人がけっこういました。</p>

<p><a href="http://nodebots.io/">http://nodebots.io/</a> にも掲載されてますが、&rdquo;最初にこれを買うといいよ&rdquo;というキットは海外ではいくつか存在します。
<img src="/img/blog/004/01_nodebots_kit.png" alt="" /></p>

<p>ただこれらは</p>

<ul>
<li><strong>国際輸送になるため、手元に届くまでにお金と時間がけっこうかかってしまう</strong></li>
<li><strong>利用されているマイコンボードは日本の電波法の認証(技摘)が通っていないものもある</strong></li>
</ul>

<p><strong>などの問題点</strong> がありました。そのため、日本国内でNodeBot WorkshopやJohnny-Fiveに対応しているマイコンボードやセンサーの代替品を探して利用するのが早いし確実なのですが、これも手間と時間が掛かります。</p>

<p>そこで僕たちの方でNodeBot WorkshopやJohnny-Fiveに対応しているキットを作ることにして、今回のキット開発に至りました。
<img src="/img/blog/004/02_kitpackage.png" alt="" /></p>

<p>今回用意したキットはプロトタイピングボードも含めてキット化してあるので、 <strong>とりあえずこれを買ってNodeBot Workshopをやれば入門できる</strong>状態になります。</p>

<p><code>試したい！</code>と思った時にサクッと試せるキットになっています。</p>

<h2 id="nodebot-workshop-kit-jp-ver-の中身を解説">「NodeBot Workshop Kit JP ver」の中身を解説！</h2>

<p>実際に中身を見てみましょう。</p>

<h3 id="nodebot-workshopの設問">NodeBot Workshopの設問</h3>

<p>準備は<a href="http://liginc.co.jp/283711">こちらの記事</a>を参考にしてください。</p>

<p>インストールするとNodeBot Workshopコマンドが使えるようになります。</p>

<pre><code class="language-bash">$ nodebot-workshop
</code></pre>

<p><img src="/img/blog/004/03_screenshot.png" alt="" /></p>

<p>ここまで動くようにしておきましょう。
各問題のタイトルと内容は以下になります。</p>

<table>
<thead>
<tr>
<th align="left">番号</th>
<th align="left">タイトル</th>
<th align="left">タイトル(日本語)</th>
<th align="left">概要</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">1問</td>
<td align="left">Blink Blink</td>
<td align="left">Lチカ</td>
<td align="left">LEDをチカチカ点滅させよう</td>
</tr>

<tr>
<td align="left">2問</td>
<td align="left">Servo Wave</td>
<td align="left">サーボウェーブ</td>
<td align="left">サーボモータを動かそう</td>
</tr>

<tr>
<td align="left">3問</td>
<td align="left">Spin Moter Spin</td>
<td align="left">くるくるモーター回転</td>
<td align="left">DCモータを動かそう</td>
</tr>

<tr>
<td align="left">4問</td>
<td align="left">Light Switch</td>
<td align="left">ライトスイッチ</td>
<td align="left">スイッチとLEDを連動させよう</td>
</tr>

<tr>
<td align="left">5問</td>
<td align="left">Street Lamp</td>
<td align="left">ストリートランプ</td>
<td align="left">照度センサとLEDを連動させよう</td>
</tr>

<tr>
<td align="left">6問</td>
<td align="left">Ping Bell</td>
<td align="left">ピングベル</td>
<td align="left">メッセージを受信すると音が鳴るUDPサーバーを作ろう</td>
</tr>

<tr>
<td align="left">7問</td>
<td align="left">Robot Arm</td>
<td align="left">ロボットアーム</td>
<td align="left">サーボモータとポテンショメータを連動させよう</td>
</tr>

<tr>
<td align="left">8問</td>
<td align="left">Remote Temperature</td>
<td align="left">遠隔地の温度</td>
<td align="left">温度を教えてくれるRPCサーバーを作ろう</td>
</tr>

<tr>
<td align="left">9問</td>
<td align="left">Fire Alarm</td>
<td align="left">火災報知器</td>
<td align="left">温度センサとブザーを使って火災報知器を作ろう</td>
</tr>
</tbody>
</table>

<h3 id="キットの内容物">キットの内容物</h3>

<p>こちらの写真がキットの中身です。パーツの名前と見た目が一致しない人は要確認です。</p>

<p><img src="/img/blog/004/04_nodebotskit.png" alt="" /></p>

<p>各設問でどのパーツを利用するかを以下の表にまとめました。困ったときは確認しましょう。</p>

<table>
<thead>
<tr>
<th align="left">ID</th>
<th align="left">NAME</th>
<th align="left">利用する問題番号</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">a</td>
<td align="left"><a href="http://www.seeedstudio.com/wiki/Seeeduino_v4.2">Seeeduino v4.2</a></td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">b</td>
<td align="left">USBmicroB ケーブル</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">c</td>
<td align="left">ブレッドボード</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">d</td>
<td align="left">ジャンプワイヤ</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">e</td>
<td align="left">カーボン抵抗 330Ω</td>
<td align="left">1,4,5,9</td>
</tr>

<tr>
<td align="left">f</td>
<td align="left">カーボン抵抗 10kΩ</td>
<td align="left">4,5,9</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">LED</td>
<td align="left">1,4,5,9</td>
</tr>

<tr>
<td align="left">h</td>
<td align="left">マイクロサーボモータ</td>
<td align="left">2,7</td>
</tr>

<tr>
<td align="left">i</td>
<td align="left">小型DCモータ</td>
<td align="left">3</td>
</tr>

<tr>
<td align="left">j</td>
<td align="left">タクトスイッチ</td>
<td align="left">4,9</td>
</tr>

<tr>
<td align="left">k</td>
<td align="left">CdSセル 1MΩ(照度センサ)</td>
<td align="left">5</td>
</tr>

<tr>
<td align="left">l</td>
<td align="left">半固定抵抗 (ポテンショメータ)</td>
<td align="left">7</td>
</tr>

<tr>
<td align="left">n</td>
<td align="left">温度センサ</td>
<td align="left">8,9</td>
</tr>

<tr>
<td align="left">m</td>
<td align="left">圧電ブザー</td>
<td align="left">6,9</td>
</tr>
</tbody>
</table>

<h3 id="1問目のlチカの回路図解説">1問目のLチカの回路図解説</h3>

<p>1秒ごとにLチカさせるプログラムを書く問題です。問題文は<a href="https://github.com/tableflip/nodebot-workshop/blob/master/exercises/blink_blink/problem.ja.md">こちら</a>をどうぞ。</p>

<h4 id="準備物">準備物</h4>

<p>先ほどの表のIDと照らし合わせて見てみましょう。
ちなみにすべての問題でa~dは利用します。</p>

<ul>
<li>a: Seeeduino</li>
<li>b: USBmicroB ケーブル</li>
<li>c: ブレッドボード</li>
<li>d: ジャンプワイヤ x 2</li>
<li>e: カーボン抵抗 330Ω</li>
<li>g: LED</li>
</ul>

<h4 id="配線">配線</h4>

<p>1問目はLEDを点灯させることが目的です。SeeeduinoとLEDを線でつないでみましょう。</p>

<p><img src="/img/blog/004/05_fritzing.png" alt="" /></p>

<h4 id="実行">実行</h4>

<p>プログラムを作成し、配線も行ったら実際に<code>nodeコマンド</code>で実行してみましょう。</p>

<p><img src="/img/blog/004/06_exec.gif" alt="" /></p>

<p>プログラムと配線が成功していれば、こんな感じでLEDが点滅します。</p>

<p>どうでしょう、できましたか?</p>

<h2 id="おわりに">おわりに</h2>

<p>NodeBotsでイベントを開催したり、こういった記事を書いたりしてますが、JavaScript Robotics界がもっと盛り上がって欲しいという気持ちがあります。
ブラウザの実装はやはりJavaScriptなので、JavaScriptでハードウェア制御できるとWeb側もHW側も共通言語を使うことができて、JSerにはかなり楽しい世界になるのではないでしょうか？</p>

<p>今回のNodeBot Workshop Kitを使うことで、そういったJavaScript好きな人がハードウェアやセンサー選びでつまづかないためのものになればいいなと思っています。
イベントなどでも販売していきますが、とりあえずはオンラインで買えるようにしてあります。</p>

<p><center>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">まぁ僕がいたらせっかくのオフィスもダーツ仕様になりますよね <a href="https://t.co/bej7l8QBCE">pic.twitter.com/bej7l8QBCE</a></p>&mdash; chachamaru (@chachmaru) <a href="https://twitter.com/chachmaru/status/757848176657260544">2016年7月26日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</center></p>

<p>こんな感じ(笑)で丁寧に梱包してますのでご興味を持った方がいれば是非試してみてください！</p>

<blockquote>
<p>購入ページは<a href="https://dotstud.io/projects/nodebots-seeeduino-for-beginners/">こちら</a>になります。</p>
</blockquote>
</description>
    </item>
    
    <item>
      <title>史上初!? NodeBotsの日本向けキットを作成しました！ #nodebots</title>
      <link>https://dotstud.io/blog/nodebots-kit-guide-vol1/</link>
      <pubDate>Tue, 26 Jul 2016 14:48:32 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodebots-kit-guide-vol1/</guid>
      <description>

<p>こんにちは、dotstudio代表の<a href="https://twitter.com/n0bisuke">のびすけ</a>です。
今日は、世界で人気のNode.js/Johnny-Fiveのワークショップ「<a href="https://github.com/tableflip/nodebot-workshop">NodeBot Workshop</a>」で使うアイテムをまとめた、「<strong>NodeBot Workshop Kit JP ver</strong>」というキットを作ったのでその紹介をします。
また、 NodeBot Workshopの1問目の配線解説も本記事で行いますので、ぜひ挑戦してみてください！</p>

<p><strong>NodeBot Workshop向けにカスタマイズされたキットはおそらく世界初です！</strong></p>

<p>NodeBotsの入門は<a href="http://liginc.co.jp/283711">こちらの記事(Webな人でもハードウェア制御が簡単に！Node.jsでJavaScript Roboticsを楽しもう #nodebots_jp)</a>を参照してください！</p>

<blockquote>
<p>購入ページは<a href="https://dotstud.io/projects/nodebots-seeeduino-for-beginners/">こちら</a>になります。</p>
</blockquote>

<h2 id="iotやるときの-まずはじめに何を買えばいいか分からない-を解消">IoTやるときの”まずはじめに何を買えばいいか分からない”を解消</h2>

<p>　入門者にとって最初に何を買えばいいのかって分からないんですよね。NodeBot Workshopでもプログラムまでは書くことができるけど、実際に電子工作をするフェーズで何を準備すればいいのか分からないという人がけっこういました。</p>

<p><a href="http://nodebots.io/">http://nodebots.io/</a> にも掲載されてますが、&rdquo;最初にこれを買うといいよ&rdquo;というキットは海外ではいくつか存在します。
<img src="/img/blog/004/01_nodebots_kit.png" alt="" /></p>

<p>ただこれらは</p>

<ul>
<li><strong>国際輸送になるため、手元に届くまでにお金と時間がけっこうかかってしまう</strong></li>
<li><strong>利用されているマイコンボードは日本の電波法の認証(技摘)が通っていないものもある</strong></li>
</ul>

<p><strong>などの問題点</strong> がありました。そのため、日本国内でNodeBot WorkshopやJohnny-Fiveに対応しているマイコンボードやセンサーの代替品を探して利用するのが早いし確実なのですが、これも手間と時間が掛かります。</p>

<p>そこで僕たちの方でNodeBot WorkshopやJohnny-Fiveに対応しているキットを作ることにして、今回のキット開発に至りました。
<img src="/img/blog/004/02_kitpackage.png" alt="" /></p>

<p>今回用意したキットはプロトタイピングボードも含めてキット化してあるので、 <strong>とりあえずこれを買ってNodeBot Workshopをやれば入門できる</strong>状態になります。</p>

<p><code>試したい！</code>と思った時にサクッと試せるキットになっています。</p>

<h2 id="nodebot-workshop-kit-jp-ver-の中身を解説">「NodeBot Workshop Kit JP ver」の中身を解説！</h2>

<p>実際に中身を見てみましょう。</p>

<h3 id="nodebot-workshopの設問">NodeBot Workshopの設問</h3>

<p>準備は<a href="http://liginc.co.jp/283711">こちらの記事</a>を参考にしてください。</p>

<p>インストールするとNodeBot Workshopコマンドが使えるようになります。</p>

<pre><code class="language-bash">$ nodebot-workshop
</code></pre>

<p><img src="/img/blog/004/03_screenshot.png" alt="" /></p>

<p>ここまで動くようにしておきましょう。
各問題のタイトルと内容は以下になります。</p>

<table>
<thead>
<tr>
<th align="left">番号</th>
<th align="left">タイトル</th>
<th align="left">タイトル(日本語)</th>
<th align="left">概要</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">1問</td>
<td align="left">Blink Blink</td>
<td align="left">Lチカ</td>
<td align="left">LEDをチカチカ点滅させよう</td>
</tr>

<tr>
<td align="left">2問</td>
<td align="left">Servo Wave</td>
<td align="left">サーボウェーブ</td>
<td align="left">サーボモータを動かそう</td>
</tr>

<tr>
<td align="left">3問</td>
<td align="left">Spin Moter Spin</td>
<td align="left">くるくるモーター回転</td>
<td align="left">DCモータを動かそう</td>
</tr>

<tr>
<td align="left">4問</td>
<td align="left">Light Switch</td>
<td align="left">ライトスイッチ</td>
<td align="left">スイッチとLEDを連動させよう</td>
</tr>

<tr>
<td align="left">5問</td>
<td align="left">Street Lamp</td>
<td align="left">ストリートランプ</td>
<td align="left">照度センサとLEDを連動させよう</td>
</tr>

<tr>
<td align="left">6問</td>
<td align="left">Ping Bell</td>
<td align="left">ピングベル</td>
<td align="left">メッセージを受信すると音が鳴るUDPサーバーを作ろう</td>
</tr>

<tr>
<td align="left">7問</td>
<td align="left">Robot Arm</td>
<td align="left">ロボットアーム</td>
<td align="left">サーボモータとポテンショメータを連動させよう</td>
</tr>

<tr>
<td align="left">8問</td>
<td align="left">Remote Temperature</td>
<td align="left">遠隔地の温度</td>
<td align="left">温度を教えてくれるRPCサーバーを作ろう</td>
</tr>

<tr>
<td align="left">9問</td>
<td align="left">Fire Alarm</td>
<td align="left">火災報知器</td>
<td align="left">温度センサとブザーを使って火災報知器を作ろう</td>
</tr>
</tbody>
</table>

<h3 id="キットの内容物">キットの内容物</h3>

<p>こちらの写真がキットの中身です。パーツの名前と見た目が一致しない人は要確認です。</p>

<p><img src="/img/blog/004/04_nodebotskit.png" alt="" /></p>

<p>各設問でどのパーツを利用するかを以下の表にまとめました。困ったときは確認しましょう。</p>

<table>
<thead>
<tr>
<th align="left">ID</th>
<th align="left">NAME</th>
<th align="left">利用する問題番号</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">a</td>
<td align="left"><a href="http://www.seeedstudio.com/wiki/Seeeduino_v4.2">Seeeduino v4.2</a></td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">b</td>
<td align="left">USBmicroB ケーブル</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">c</td>
<td align="left">ブレッドボード</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">d</td>
<td align="left">ジャンプワイヤ</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">e</td>
<td align="left">カーボン抵抗 330Ω</td>
<td align="left">1,4,5,9</td>
</tr>

<tr>
<td align="left">f</td>
<td align="left">カーボン抵抗 10kΩ</td>
<td align="left">4,5,9</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">LED</td>
<td align="left">1,4,5,9</td>
</tr>

<tr>
<td align="left">h</td>
<td align="left">マイクロサーボモータ</td>
<td align="left">2,7</td>
</tr>

<tr>
<td align="left">i</td>
<td align="left">小型DCモータ</td>
<td align="left">3</td>
</tr>

<tr>
<td align="left">j</td>
<td align="left">タクトスイッチ</td>
<td align="left">4,9</td>
</tr>

<tr>
<td align="left">k</td>
<td align="left">CdSセル 1MΩ(照度センサ)</td>
<td align="left">5</td>
</tr>

<tr>
<td align="left">l</td>
<td align="left">半固定抵抗 (ポテンショメータ)</td>
<td align="left">7</td>
</tr>

<tr>
<td align="left">n</td>
<td align="left">温度センサ</td>
<td align="left">8,9</td>
</tr>

<tr>
<td align="left">m</td>
<td align="left">圧電ブザー</td>
<td align="left">6,9</td>
</tr>
</tbody>
</table>

<h3 id="1問目のlチカの回路図解説">1問目のLチカの回路図解説</h3>

<p>1秒ごとにLチカさせるプログラムを書く問題です。問題文は<a href="https://github.com/tableflip/nodebot-workshop/blob/master/exercises/blink_blink/problem.ja.md">こちら</a>をどうぞ。</p>

<h4 id="準備物">準備物</h4>

<p>先ほどの表のIDと照らし合わせて見てみましょう。
ちなみにすべての問題でa~dは利用します。</p>

<ul>
<li>a: Seeeduino</li>
<li>b: USBmicroB ケーブル</li>
<li>c: ブレッドボード</li>
<li>d: ジャンプワイヤ x 2</li>
<li>e: カーボン抵抗 330Ω</li>
<li>g: LED</li>
</ul>

<h4 id="配線">配線</h4>

<p>1問目はLEDを点灯させることが目的です。SeeeduinoとLEDを線でつないでみましょう。</p>

<p><img src="/img/blog/004/05_fritzing.png" alt="" /></p>

<h4 id="実行">実行</h4>

<p>プログラムを作成し、配線も行ったら実際に<code>nodeコマンド</code>で実行してみましょう。</p>

<p><img src="/img/blog/004/06_exec.gif" alt="" /></p>

<p>プログラムと配線が成功していれば、こんな感じでLEDが点滅します。</p>

<p>どうでしょう、できましたか?</p>

<h2 id="おわりに">おわりに</h2>

<p>NodeBotsでイベントを開催したり、こういった記事を書いたりしてますが、JavaScript Robotics界がもっと盛り上がって欲しいという気持ちがあります。
ブラウザの実装はやはりJavaScriptなので、JavaScriptでハードウェア制御できるとWeb側もHW側も共通言語を使うことができて、JSerにはかなり楽しい世界になるのではないでしょうか？</p>

<p>今回のNodeBot Workshop Kitを使うことで、そういったJavaScript好きな人がハードウェアやセンサー選びでつまづかないためのものになればいいなと思っています。
イベントなどでも販売していきますが、とりあえずはオンラインで買えるようにしてあります。</p>

<p><center>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">まぁ僕がいたらせっかくのオフィスもダーツ仕様になりますよね <a href="https://t.co/bej7l8QBCE">pic.twitter.com/bej7l8QBCE</a></p>&mdash; chachamaru (@chachmaru) <a href="https://twitter.com/chachmaru/status/757848176657260544">2016年7月26日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</center></p>

<p>こんな感じ(笑)で丁寧に梱包してますのでご興味を持った方がいれば是非試してみてください！</p>

<blockquote>
<p>購入ページは<a href="https://dotstud.io/projects/nodebots-seeeduino-for-beginners/">こちら</a>になります。</p>
</blockquote>
</description>
    </item>
    
    <item>
      <title>今週末はInternational NodeBots Dayですよ！( #NodeBots vol2のイベレポと次回告知 )</title>
      <link>https://dotstud.io/blog/nodebots-handson-report-vol2/</link>
      <pubDate>Mon, 25 Jul 2016 15:31:20 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodebots-handson-report-vol2/</guid>
      <description>

<p>こんにちは、のびすけです。</p>

<p>時間が経ってしまいましたが、NodeBotsハンズオンのレポートをします！ <a href="http://nodebots.connpass.com/event/34073/">明日もイベントがある</a>のでその告知もさせてください（笑）</p>

<h2 id="nodebotsって">NodeBotsって?</h2>

<p>さて、みなさんは「NodeBots」という言葉を知ってますか？</p>

<p><a href="http://nodebots.io/">http://nodebots.io/</a></p>

<p><img src="/img/blog/003/01_nodebots.png" alt="" /></p>

<p>NodeBotsとは、Node.jsでハードウェアを制御するイベントやコミュニティの総称です。世界的に開催されています。</p>

<p>僕が以前書いた、<a href="http://liginc.co.jp/283711">Webな人でもハードウェア制御が簡単に！Node.jsでJavaScript Roboticsを楽しもう #nodebots_jp</a>を読んでもらえると早いんですけど、いろんな場所でNodeBotsについては書き続けます（笑）</p>

<h2 id="nodebots-johnny-fiveハンズオン">NodeBots Johnny-Fiveハンズオン</h2>

<p><img src="/img/blog/003/02_op.png" alt="" /></p>

<p><a href="http://johnny-five.io/">Johnny-Five</a>というNode.jsで、マイコンボード「Arduino」を制御するライブラリがあります。各国では、このライブラリを使ってNodeBotsのイベントを開催することが多いようです。</p>

<h3 id="dmm-make-akibaを会場にvol2開催">DMM.make AKIBAを会場にvol2開催</h3>

<p><img src="/img/blog/003/03_kamimura.png" alt="" /></p>

<p><a href="http://nodebots.connpass.com/event/31580/">vol2</a>は<a href="https://akiba.dmm-make.com/">DMM.Make AKIBA</a>を会場に実施しました。 DMMの上村さんからDMM.make AKIBAの会場説明でスタートです。大半の方が初めて来たとのことで、会場に興味持っている人も多い印象でした。</p>

<p>さて、<strong>ハンズオンでは人によって進捗が変わるため、ゴールをいくつか設定</strong> するようにしました。</p>

<p>&nbsp;
<center>
<blockquote class="twitter-tweet" data-lang="ja">
    <p lang="ja" dir="ltr">今日の目標！ぞい！
        <a href="https://twitter.com/hashtag/nodebots_jp?src=hash">#nodebots_jp</a>
        <a href="https://t.co/k4Eky2Iz5E">pic.twitter.com/k4Eky2Iz5E</a>
    </p>&mdash; ちゃんとく (@tokutoku393) <a href="https://twitter.com/tokutoku393/status/742667503654961156">2016年6月14日</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</center></p>

<p><a href="https://github.com/tableflip/nodebot-workshop">NodeBot Workshop</a>というツールを用いてハンズオンを行うのですが、電子工作はプログラミングフェーズと工作フェーズに分かれるため</p>

<ul>
<li>NodeBot Workshopの3問目（全9問）までクリア</li>
<li>用意したパーツを使って3問目までを工作してみる</li>
<li>4問目以降もチャレンジ</li>
</ul>

<p>というような設定にしました。</p>

<p>&nbsp;
<img src="/img/blog/003/04_look.png" alt="" /></p>

<p>分からない方にはメンターの方がサポートをして、各々が進めるスタイルのもくもく会に近いタイプのハンズオンです。（ちなみにNodeSchool系のイベントはだいたいこんな感じです）</p>

<p>JavaScriptを使う前提+そこまでJavaScript分からなくても聞けばなんとかなるんじゃないかと思ってた節はあるのですが、参加者の方が書いてくれた<a href="http://wp.pxdesign.jp/2016/06/15/nodebots-johnny-five-arduino-servo/">レポート記事</a>を見る限り、JavaScriptをほとんど触ったことのない初心者だと少しハードルが高かったようでした（苦笑）</p>

<p>これはなんとかしないといけないですね。もう少し丁寧な解説記事などを用意したほうが良さそうだなと思いつつ、とりあえず
<a href="https://www.github.com/sethvincent/javascripting">NodeSchoolのJavaScriptカリキュラム</a>をお勧めしておきます。</p>

<p>少しは敷居を下げてくれるかもしれません。</p>

<p>&nbsp;
<img src="/img/blog/003/05_toast.png" alt="" /></p>

<p>頭を使ったあとは、懇親会で感想などをわいわい言い合いました。</p>

<h3 id="感想など">感想など</h3>

<p>主催側の感触なのですが、だいたい2問目まではみんな動かすことができていました。「JSを初めて触った！」という人でも3問目には取り組めてた印象です。2時間弱程度の短い時間にしてはいい進み具合だった気もしてますが、もっと丁寧なサポートも必要だなと感じました。</p>

<p><strong>Johnny-FiveのメリットはJavaScriptで書けてWebとの接続が行いやすい</strong> ところだと思っているので、ハードウェア側だけではなく、 <strong>Milkcocoaを使ったりしてWebと繋げるやり方も紹介したらもっと楽しくなる</strong> 気がしました。</p>

<p>とりあえず、みんな笑顔で終われていたので大満足です。（けっこう大事）</p>

<h2 id="次回は-7-26-明日">次回は <sup>7</sup>&frasl;<sub>26</sub> （明日!）</h2>

<p>さて、こんなイベントを毎月やってるのですが、次回はなんと <sup>7</sup>&frasl;<sub>26</sub> （明日）です（笑）</p>

<p><img src="/img/blog/003/06_vol3.png" alt="" /></p>

<p><a href="http://nodebots.connpass.com/event/34073/">connpassのページ</a>から応募できるので是非今からでも参加登録してください！ :)</p>

<ul>
<li><strong>Web界隈の人でハードウェアや電子工作が気になってる人</strong></li>
<li><strong>ハードウェア界隈の人でJavaScriptが気になってる人</strong></li>
<li><strong>その他IoTとか興味ある人</strong></li>
</ul>

<p>が主な対象ですので、当てはまる！って人は是非お越しください!</p>

<h2 id="そして週末-7-30-土-は全世界同時開催のinternational-nodebots-day">そして週末 <sup>7</sup>&frasl;<sub>30</sub> （土）は全世界同時開催のInternational NodeBots Day!!</h2>

<p><img src="/img/blog/003/07_nodebots_day.png" alt="" /></p>

<p><sup>7</sup>&frasl;<sub>30</sub> には全世界同時開催のイベントである<a href="https://github.com/nodebots/nodebotsday">NodeBots Day</a>が開催されます。</p>

<p>東京イベントとしてNodeBots Day Tokyoも開催されますので、是非こちらもご参加ください!</p>

<p><a href="http://nodebots.connpass.com/event/35559/">http://nodebots.connpass.com/event/35559/</a></p>

<p>それではイベントでお会いしましょう！</p>
</description>
    </item>
    
  </channel>
</rss>