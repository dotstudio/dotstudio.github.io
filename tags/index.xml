<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/tags/index.xml</link>
    <description>Recent content on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <atom:link href="/tags/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About us</title>
      <link>https://dotstud.io/about/en/</link>
      <pubDate>Mon, 31 Oct 2016 21:57:43 +0900</pubDate>
      
      <guid>https://dotstud.io/about/en/</guid>
      
      <description>&lt;main id=&#34;aboutEn&#34;&gt;
    &lt;section class=&#34;hero&#34;&gt;
        &lt;!--&lt;img src=&#34;&#34; alt=&#34;&#34; class=&#34;hero-background&#34;&gt;--&gt;
        &lt;div class=&#34;hero-text&#34;&gt;
            &lt;h1&gt;IoT agency, based in Tokyo.&lt;/h1&gt;
            &lt;p&gt;We are here to bring your IoT gadgets to Japan.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/section&gt;

    &lt;section class=&#34;ourStories&#34;&gt;
        &lt;h2 class=&#34;ourStories-title&#34;&gt;Our stories&lt;/h2&gt;
        &lt;p class=&#34;ourStories-text&#34;&gt;
            It is said that when a cool IoT (Internet of Things) gadget has been invented in the U.S., it takes roughly two years to reach Japan. Especially in a busy country like Japan, efficiency is golden. Yet only very few of those inventions are known.

            Us Japanese tends to be bad at speaking or reading English, in fact we almost have the worst TOEFL score average in Asian countries. Due to this, products that only support English would probably not grow in popularity.

            Our mission is to spread the glam of IoT through Japan. We want to break the language barrier, and we want to let people in Japan know how efficient and amazing our life can be with IoT technology.
        &lt;/p&gt;
    &lt;/section&gt;

    &lt;section class=&#34;whatWeCanDo&#34;&gt;
        &lt;h2 class=&#34;whatWeCanDo-title&#34;&gt;What we can do&lt;/h2&gt;
        &lt;h3 class=&#34;whatWeCanDo-subTitle&#34;&gt;Documents&lt;/h3&gt;
        &lt;p class=&#34;whatWeCanDo-text&#34;&gt;
            Japanese can be very hard to learn or even translate into. We will help you write your documentations of your products in smooth Japanese.
        &lt;/p&gt;
        &lt;h3 class=&#34;whatWeCanDo-subTitle&#34;&gt;Media&lt;/h3&gt;
        &lt;p class=&#34;whatWeCanDo-text&#34;&gt;
            We run our own media, where we share our knowledge about everything- from introducing an interesting programming framework to reviewing a gadget we found. We will always try the product first before doing dev-rel, and all our thoughts go here.
        &lt;/p&gt;
        &lt;h3 class=&#34;whatWeCanDo-subTitle&#34;&gt;Event hosting&lt;/h3&gt;
        &lt;p class=&#34;whatWeCanDo-text&#34;&gt;
            Our CEO, Nobisuke, hosts about 50 events a year, with 3,000 people coming.
        &lt;/p&gt;
    &lt;/section&gt;
&lt;/main&gt;</description>
    </item>
    
    <item>
      <title>About us</title>
      <link>https://dotstud.io/about/en/</link>
      <pubDate>Mon, 31 Oct 2016 21:57:43 +0900</pubDate>
      
      <guid>https://dotstud.io/about/en/</guid>
      
      <description>&lt;main id=&#34;aboutEn&#34;&gt;
    &lt;section class=&#34;hero&#34;&gt;
        &lt;!--&lt;img src=&#34;&#34; alt=&#34;&#34; class=&#34;hero-background&#34;&gt;--&gt;
        &lt;div class=&#34;hero-text&#34;&gt;
            &lt;h1&gt;IoT agency, based in Tokyo.&lt;/h1&gt;
            &lt;p&gt;We are here to bring your IoT gadgets to Japan.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/section&gt;

    &lt;section class=&#34;ourStories&#34;&gt;
        &lt;h2 class=&#34;ourStories-title&#34;&gt;Our stories&lt;/h2&gt;
        &lt;p class=&#34;ourStories-text&#34;&gt;
            It is said that when a cool IoT (Internet of Things) gadget has been invented in the U.S., it takes roughly two years to reach Japan. Especially in a busy country like Japan, efficiency is golden. Yet only very few of those inventions are known.

            Us Japanese tends to be bad at speaking or reading English, in fact we almost have the worst TOEFL score average in Asian countries. Due to this, products that only support English would probably not grow in popularity.

            Our mission is to spread the glam of IoT through Japan. We want to break the language barrier, and we want to let people in Japan know how efficient and amazing our life can be with IoT technology.
        &lt;/p&gt;
    &lt;/section&gt;

    &lt;section class=&#34;whatWeCanDo&#34;&gt;
        &lt;h2 class=&#34;whatWeCanDo-title&#34;&gt;What we can do&lt;/h2&gt;
        &lt;h3 class=&#34;whatWeCanDo-subTitle&#34;&gt;Documents&lt;/h3&gt;
        &lt;p class=&#34;whatWeCanDo-text&#34;&gt;
            Japanese can be very hard to learn or even translate into. We will help you write your documentations of your products in smooth Japanese.
        &lt;/p&gt;
        &lt;h3 class=&#34;whatWeCanDo-subTitle&#34;&gt;Media&lt;/h3&gt;
        &lt;p class=&#34;whatWeCanDo-text&#34;&gt;
            We run our own media, where we share our knowledge about everything- from introducing an interesting programming framework to reviewing a gadget we found. We will always try the product first before doing dev-rel, and all our thoughts go here.
        &lt;/p&gt;
        &lt;h3 class=&#34;whatWeCanDo-subTitle&#34;&gt;Event hosting&lt;/h3&gt;
        &lt;p class=&#34;whatWeCanDo-text&#34;&gt;
            Our CEO, Nobisuke, hosts about 50 events a year, with 3,000 people coming.
        &lt;/p&gt;
    &lt;/section&gt;
&lt;/main&gt;</description>
    </item>
    
    <item>
      <title>About us</title>
      <link>https://dotstud.io/about/</link>
      <pubDate>Mon, 31 Oct 2016 21:57:43 +0900</pubDate>
      
      <guid>https://dotstud.io/about/</guid>
      
      <description>&lt;div class=&#34;singlea&#34;&gt;
    &lt;img class=&#34;singlea-img&#34; src=&#34;https://dotstud.io/img/members/team_rect.jpg&#34; alt=&#34;&#34; /&gt;
    &lt;div class=&#34;singlea-txt&#34;&gt;
      &lt;table&gt;
        &lt;tr&gt;&lt;td class=&#34;title&#34;&gt;会社名&lt;/td&gt;&lt;td class=&#34;data&#34;&gt;dotstudio株式会社&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;資本金&lt;/td&gt;&lt;td&gt;5,000,000円&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;設立&lt;/td&gt;&lt;td&gt;2016年6月17日&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;所在地&lt;/td&gt;&lt;td&gt;〒110-0015　東京都台東区東上野2-18-7 共同ビル 3F&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;連絡先&lt;/td&gt;&lt;td&gt;050-3639-0505（代表電話）&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;代表取締役&lt;/td&gt;&lt;td&gt;菅原遼介&lt;br&gt;岩上貴洋&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;事業内容&lt;/td&gt;&lt;td&gt;IoTセレクトECショップ、IoTプロダクトの開発、プロモーションなど&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;dotstudio株式会社は2016年7月に創業したばかりのスタートアップです。より多くの人にIoTの楽しさを広めるために、IoTプロダクトの開発や販売、プロモーションなどをおこなっています。&lt;/td&gt;&lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&#34;sp-single&#34;&gt;
    &lt;img class=&#34;content-img&#34; src=&#34;https://dotstud.io/img/members/team_rect.jpg&#34; alt=&#34;&#34; /&gt;
    &lt;div class=&#34;content-text&#34;&gt;
      &lt;table&gt;
        &lt;tr&gt;&lt;td class=&#34;title&#34;&gt;会社名&lt;/td&gt;&lt;td class=&#34;data&#34;&gt;dotstudio株式会社&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;資本金&lt;/td&gt;&lt;td&gt;5,000,000円&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;設立&lt;/td&gt;&lt;td&gt;2016年6月17日&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;所在地&lt;/td&gt;&lt;td&gt;〒110-0015　東京都台東区東上野2-18-7 共同ビル 3F&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;連絡先&lt;/td&gt;&lt;td&gt;050-3639-0505（代表電話）&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;代表取締役&lt;/td&gt;&lt;td&gt;菅原遼介&lt;br&gt;岩上貴洋&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;事業内容&lt;/td&gt;&lt;td&gt;IoTセレクトECショップ、IoTプロダクトの開発、プロモーションなど&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;dotstudio株式会社は2016年7月に創業したばかりのスタートアップです。より多くの人にIoTの楽しさを広めるために、IoTプロダクトの開発や販売、プロモーションなどをおこなっています。&lt;/td&gt;&lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>About us</title>
      <link>https://dotstud.io/about/</link>
      <pubDate>Mon, 31 Oct 2016 21:57:43 +0900</pubDate>
      
      <guid>https://dotstud.io/about/</guid>
      
      <description>&lt;div class=&#34;singlea&#34;&gt;
    &lt;img class=&#34;singlea-img&#34; src=&#34;https://dotstud.io/img/members/team_rect.jpg&#34; alt=&#34;&#34; /&gt;
    &lt;div class=&#34;singlea-txt&#34;&gt;
      &lt;table&gt;
        &lt;tr&gt;&lt;td class=&#34;title&#34;&gt;会社名&lt;/td&gt;&lt;td class=&#34;data&#34;&gt;dotstudio株式会社&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;資本金&lt;/td&gt;&lt;td&gt;5,000,000円&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;設立&lt;/td&gt;&lt;td&gt;2016年6月17日&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;所在地&lt;/td&gt;&lt;td&gt;〒110-0015　東京都台東区東上野2-18-7 共同ビル 3F&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;連絡先&lt;/td&gt;&lt;td&gt;050-3639-0505（代表電話）&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;代表取締役&lt;/td&gt;&lt;td&gt;菅原遼介&lt;br&gt;岩上貴洋&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;事業内容&lt;/td&gt;&lt;td&gt;IoTセレクトECショップ、IoTプロダクトの開発、プロモーションなど&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;dotstudio株式会社は2016年7月に創業したばかりのスタートアップです。より多くの人にIoTの楽しさを広めるために、IoTプロダクトの開発や販売、プロモーションなどをおこなっています。&lt;/td&gt;&lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&#34;sp-single&#34;&gt;
    &lt;img class=&#34;content-img&#34; src=&#34;https://dotstud.io/img/members/team_rect.jpg&#34; alt=&#34;&#34; /&gt;
    &lt;div class=&#34;content-text&#34;&gt;
      &lt;table&gt;
        &lt;tr&gt;&lt;td class=&#34;title&#34;&gt;会社名&lt;/td&gt;&lt;td class=&#34;data&#34;&gt;dotstudio株式会社&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;資本金&lt;/td&gt;&lt;td&gt;5,000,000円&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;設立&lt;/td&gt;&lt;td&gt;2016年6月17日&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;所在地&lt;/td&gt;&lt;td&gt;〒110-0015　東京都台東区東上野2-18-7 共同ビル 3F&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;連絡先&lt;/td&gt;&lt;td&gt;050-3639-0505（代表電話）&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;代表取締役&lt;/td&gt;&lt;td&gt;菅原遼介&lt;br&gt;岩上貴洋&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;事業内容&lt;/td&gt;&lt;td&gt;IoTセレクトECショップ、IoTプロダクトの開発、プロモーションなど&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;dotstudio株式会社は2016年7月に創業したばかりのスタートアップです。より多くの人にIoTの楽しさを広めるために、IoTプロダクトの開発や販売、プロモーションなどをおこなっています。&lt;/td&gt;&lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>レポート！ギャル電❤︎初めての電子工作ハンズオンvol.1開催</title>
      <link>https://dotstud.io/blog/gyaruden-handson-mao-report/</link>
      <pubDate>Mon, 31 Oct 2016 08:47:33 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/gyaruden-handson-mao-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、テクニカルライターのまおです！&lt;br /&gt;
先日、私が所属する&lt;a href=&#34;”https://dotstud.io/blog/iotlt-gbvol19-galden-report/&#34;&gt;ギャル電&lt;/a&gt;とdotstudioが合同主催して「初めての電子工作ハンズオン」を開催しましたー😄　&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;初めての開催だったので上手くいくか心配でしたが、参加してくれた皆さんが「いい感じだった」と言ってくれました😆　それってつまり成功！？　イエーイ！！！&lt;/p&gt;

&lt;p&gt;では当日の様子を紹介していきたいと思います❤︎&lt;/p&gt;

&lt;h2 id=&#34;初めての電子工作ハンズオン-の概要&#34;&gt;「初めての電子工作ハンズオン」の概要&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;初心者の方でもわかりやすく電子工作を楽しんでもらえるように&lt;/strong&gt;、2016年10月1日（土）に「初めての電子工作ハンズオンvol.1」を開催しました！&lt;/p&gt;

&lt;p&gt;当日は女性5名と男性2名の計7名が参加。イベントを告知するときから「&lt;strong&gt;電子工作に興味があって、光るものが好きな女子&lt;/strong&gt;」を対象としていたので、女性の方が圧倒的に多かったですね！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;参加者のみなさんには、dotstudioにてキット販売をしている「光るピアス」&lt;a href=&#34;https://dotstud.io/projects/neopixel-ring-gemma-earrings/&#34;&gt;&amp;ldquo;Sparkling Piercing Kit for CLUBBERS&amp;rdquo;（4480円）&lt;/a&gt;を、私が以前公開した&lt;a href=&#34;https://dotstud.io/blog/neopixel-ring-gemma-earrings/&#34;&gt;光るイヤリングの作り方&lt;/a&gt;という記事をもとに制作していきました〜😆　参加費は、キット代＋懇親会費用込みで4980円です！&lt;/p&gt;

&lt;h2 id=&#34;当日の流れ&#34;&gt;当日の流れ&lt;/h2&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;dae09f60e1b44f4487087a3d11089922&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;今回のハンズオンでは、こちらのスライドで作り方を説明しながら進めてました〜😁&lt;/p&gt;

&lt;h3 id=&#34;ハンダ付けの練習&#34;&gt;ハンダ付けの練習&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;まずはじめにハンダ付けの練習してもらいました。今回ハンダ付けの練習で作ってもらったのはこちらのスマイルくん！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ピンヘッダ&lt;/li&gt;
&lt;li&gt;LED&lt;/li&gt;
&lt;li&gt;フックアップワイヤー&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらの材料をユニバーサル基板（スマイルくんの土台になる部分）にハンダ付けしてもらいました😆&lt;/p&gt;

&lt;p&gt;ピンヘッダの切断や、ワイヤーストリッパーでフックアップワイヤーの銅線を剥くところまで実際にやってもらっらので、最低限のハンダ付け基礎知識は覚えてもらえたと思います😄&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一番大事なのは安全メガネをすること！　ハンダは下手すると飛び散るので、みなさん目は保護しておきましょう〜シャキーン😎&lt;/p&gt;

&lt;h3 id=&#34;光るイヤリングの制作&#34;&gt;光るイヤリングの制作&lt;/h3&gt;

&lt;p&gt;今回のハンズオンのメイン、&lt;strong&gt;光るイヤリングを制作する&lt;/strong&gt; パートです。パソコンでのプログラミング環境設定やハンダ付けなどは、各自私が書いた記事を元に作業を進めてもらいました！&lt;/p&gt;

&lt;p&gt;ハンズオンでは &lt;strong&gt;プログラムのコピペのトリック&lt;/strong&gt; などを主に紹介しました😁&lt;/p&gt;

&lt;h4 id=&#34;コピペのトリックとは&#34;&gt;コピペのトリックとは&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;簡単にプログラムを探す方法（今回はArduino IDE内のスケッチの例からサンプルプログラムを見つける方法）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;プログラム内で使うハードウェアの設定方法（拾ってきたプログラムの動作内容がわからないときに使える、データを送るピンの番号や、LEDの数などの変え方）&lt;/p&gt;

&lt;p&gt;などを詳しく紹介しました😎&lt;/p&gt;

&lt;h4 id=&#34;ledの色を変える&#34;&gt;LEDの色を変える&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ギャル電はクラブファッションを気にするので、プログラム内でのLEDの色の変え方を詳しく説明しました！　色の変え方さえ分かっておけば上等！😏&lt;/p&gt;

&lt;h3 id=&#34;最後にピアスフックを付けて完成&#34;&gt;最後にピアスフックを付けて完成❤︎&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;続々出来上がってきました！&lt;a href=&#34;https://twitter.com/hashtag/gyaruden?src=hash&#34;&gt;#gyaruden&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3?src=hash&#34;&gt;#ハンズオン&lt;/a&gt; &lt;a href=&#34;https://t.co/z8edDgXky5&#34;&gt;pic.twitter.com/z8edDgXky5&lt;/a&gt;&lt;/p&gt; ギャル電 (@GALDEN999) &lt;a href=&#34;https://twitter.com/GALDEN999/status/782115708800950273&#34;&gt;2016年10月1日&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;かわいい&lt;a href=&#34;https://twitter.com/hashtag/gyaruden?src=hash&#34;&gt;#gyaruden&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3?src=hash&#34;&gt;#ハンズオン&lt;/a&gt; &lt;a href=&#34;https://t.co/SmSwjFG3K5&#34;&gt;pic.twitter.com/SmSwjFG3K5&lt;/a&gt;&lt;/p&gt; ギャル電 (@GALDEN999) &lt;a href=&#34;https://twitter.com/GALDEN999/status/782124352376406016&#34;&gt;2016年10月1日&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;動画で見るとちょーかわいいですね💓💓💓&lt;/p&gt;

&lt;p&gt;みんな似合ってました〜！！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ハンダ付け練習のやつもバッチにするとおしゃれ！ &lt;a href=&#34;https://t.co/Wmv4g1z11s&#34;&gt;pic.twitter.com/Wmv4g1z11s&lt;/a&gt;&lt;/p&gt; ギャル電 (@GALDEN999) &lt;a href=&#34;https://twitter.com/GALDEN999/status/782132757023469568&#34;&gt;2016年10月1日&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ハンダ付けの練習で作ったスマイルくんをバッチにする方もいました！😄&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「ギャル電に入りたい！」と言ってくれた参加者さんも！&lt;/p&gt;

&lt;h2 id=&#34;会場を貸してくれたアスラテック株式会社&#34;&gt;会場を貸してくれたアスラテック株式会社&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最後に、今回会場を提供していただいた&lt;a href=&#34;https://www.asratec.co.jp/&#34;&gt;アスラテック株式会社&lt;/a&gt;の今井さんが、アスラテック株式会社についてを紹介。なんと、アスラテック株式会社は &lt;strong&gt;ロボットのソフトウェア開発専用の会社&lt;/strong&gt; なんです！　開発されたソフトウェアで動くロボットはいっぱい種類があって面白いなと思いました！&lt;/p&gt;

&lt;p&gt;今回は会場を提供していただき本当にありがとうございました！！😊💓&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/045/11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;初めてハンズオンを開催したのですが、参加者の皆さんが「楽しかった！」「また参加したい」と言ってくれましたー！！！　めっちゃ嬉しいです💓&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;@n0bisuke&lt;/a&gt;さんのまとめ&lt;a href=&#34;https://t.co/umdho4aUWC&#34;&gt;https://t.co/umdho4aUWC&lt;/a&gt;を本日のトゥギャトピに選ばせていただきました！ギャル電、非常に気になるのでまた活動をまとめていただきたいです！トゥギャトピはTogetterのTOPページで紹介しています。みてね！&lt;/p&gt; トゥギャッターまとめ編集部 (@tg_editor) &lt;a href=&#34;https://twitter.com/tg_editor/status/782795742343680000&#34;&gt;2016年10月3日&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;また、当日の様子をTogetterでまとめたものが、TogetterのTOPページに掲載される「トゥギャトピ」に選ばれました！　イエーイ！！&lt;/p&gt;

&lt;p&gt;次回は冬休み頃にハンズオンvol.2を開催したいと思ってます！　もっともっとみんなに電子工作の楽しさが伝わればめっちゃいいなと思います😊&lt;/p&gt;

&lt;p&gt;ではギャル電の次の記事もお楽しみに💓&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>これは掘り出し物かも？ ソーラーバッテリ駆動でスマホ充電もできるLEDランタン！</title>
      <link>https://dotstud.io/blog/led-lantern-and-torch/</link>
      <pubDate>Fri, 28 Oct 2016 09:00:34 +0800</pubDate>
      
      <guid>https://dotstud.io/blog/led-lantern-and-torch/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioエディターのうらら（&lt;a href=&#34;http://twitter.com/uraranbon&#34;&gt;@uraranbon&lt;/a&gt;）です。
現在、「&lt;strong&gt;中国の秋葉原&lt;/strong&gt;」と呼ばれる深センに滞在しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;滞在3日目、深センで購入した&lt;a href=&#34;https://dotstud.io/blog/4k-camera-gopro-fake&#34;&gt;4Kと言われているカメラ&lt;/a&gt;で撮影してお届けします。左上にタイムスタンプが押されて &lt;strong&gt;監視カメラのような雰囲気&lt;/strong&gt; がありますが、解除方法がわからないのでご了承ください。&lt;/p&gt;

&lt;p&gt;ここ数日にわたり「壁を走るラジコン」や「4Kと書かれているカメラ」を紹介してきました。（記事を見てない人はぜひチェック！）&lt;/p&gt;

&lt;p&gt;そして今回は、こんなものを紹介します！&lt;/p&gt;

&lt;h2 id=&#34;一見ゴツい円筒だけど&#34;&gt;一見ゴツい円筒だけど……&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回紹介するのは金色のこちら。引っ張ってみると……&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ファァァァァ……！と光が漏れてくるというランタンです。&lt;/strong&gt;
「上に引っ張ると光る」というちょっとおしゃれな点灯をします。きっと持ってるだけでモテます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;キャンプや非常時などに活躍しそうです。 目が痛くなるほど光が強い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;しかも、このボタンを押すと……&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;懐中電灯にも！　なるんです！　これはきっとモテる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;USBポートもついているのでスマホの充電もできます。&lt;br /&gt;
おしゃれな上に、地味にハイスペック。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;電池は必要なくて、太陽光で動きます。これも地味にかなり便利。&lt;/p&gt;

&lt;p&gt;気になるお値段ですが、カラオケができるスピーカー付きマイク（後日紹介予定）と合わせて120元（1,800円程度）でした。きっとこのランタンは　&lt;strong&gt;40元（600円程度）くらいだと思われます。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/042/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ランタン・懐中電灯・充電器の3役になるハイスペックランタンを紹介しました。この&lt;a href=&#34;https://dotstud.io/blog/4k-camera-gopro-fake&#34;&gt;4Kと言われているカメラ&lt;/a&gt;もハイスペックになってほしい。&lt;/p&gt;

&lt;p&gt;ということで引っ張ると光るギミックがついているハイスペックランタンを紹介しました。見つけたらぜひ挑戦してみてはいかがでしょう。きっとモテますよ。&lt;/p&gt;

&lt;p&gt;では、次回もお楽しみに。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使い所が分からなすぎる（笑）LEDで光るマルチリンガルなUSB扇風機を買ってみた</title>
      <link>https://dotstud.io/blog/led-multilingual-confessing-fan/</link>
      <pubDate>Wed, 26 Oct 2016 18:30:38 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/led-multilingual-confessing-fan/</guid>
      
      <description>&lt;p&gt;こんにちは、dotstudioのうらら（&lt;a href=&#34;http://twitter.com&#34;&gt;@uraranbon&lt;/a&gt;）です。&lt;/p&gt;

&lt;p&gt;現在私は「中国の秋葉原」と呼ばれている深センに来ています！　日本の秋葉原と同じく、ザクザクと掘り出しものが出てくるとても面白い街です。&lt;/p&gt;

&lt;p&gt;そんな深センで見つけた掘り出しもののひとつを紹介します！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;USBで動く扇風機です。10元（150円くらい）でした。&lt;br /&gt;
これがなぜ掘り出しものか？　見たらわかります。&lt;/p&gt;

&lt;p&gt;つけてみましょう！&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/02.png&#34; alt=&#34;&#34; /&gt;
&lt;strong&gt;パッ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;パッ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;パッ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/044/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;パッ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;……そう、世界各国の「&lt;strong&gt;好きです&lt;/strong&gt;」がLEDで光るんです。全部で4ヶ国語に対応していて、日本語も表示されました。ちなみに、文字は回転します。なんともシュール。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;……どこで使えばいいんだろう、これ。&lt;/strong&gt;&lt;/p&gt;

&lt;iframe width=&#34;715&#34; height=&#34;402&#34; src=&#34;https://www.youtube.com/embed/gi0ydQxnduM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;扇風機なのでそよ風のような微風が頬を撫でてくれます。電源さえあれば、世界各国の「好きです」で半永久的に告白され続けちゃう〜〜〜！　……。&lt;/p&gt;

&lt;p&gt;プログラマブルらしいのですが、実際にハックできるかは謎です。microUSBのポートはついていたので、これから挑戦してみようと思います。&lt;/p&gt;

&lt;p&gt;どこで使えばいいかわかる方は教えて下さい。では！&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>まさかのGoPro？4Kのカメラを265元（4,000円程度）で買えた</title>
      <link>https://dotstud.io/blog/4k-camera-gopro-fake/</link>
      <pubDate>Mon, 24 Oct 2016 08:00:25 +0800</pubDate>
      
      <guid>https://dotstud.io/blog/4k-camera-gopro-fake/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioエディターのうらら（@uraranbon）です。
現在、「中国の秋葉原」と呼ばれる深センに滞在しています。&lt;/p&gt;

&lt;p&gt;「壁を走るラジコン」や「LEDで文字が浮かび上がる扇風機」など日本では見かけない掘り出し物がたくさんあるのですが、こんなカメラも見つけました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4K！　手のひらサイズのカメラ！　Wi-Fi対応！　
店員さんは「Go Pro！　Go Pro！」と連呼していました。&lt;/p&gt;

&lt;p&gt;しかも、もともとは290元だったのをカメラに必要な &lt;strong&gt;SDカード込みで265元（4,000円程度）&lt;/strong&gt; に値切ってゲット。すご～い！&lt;/p&gt;

&lt;p&gt;でも、&lt;strong&gt;4Kなのにこの価格はおかしいだろ。&lt;/strong&gt; ということで、早速撮影してみたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;4k-wi-fi-action-cameraのスペック&#34;&gt;4K Wi-Fi ACTION CAMERAのスペック&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;レンズ　　　　　　：16メガピクセルの広角レンズ 
Imageフォーマット：JPEG 
連写　　　　　　　：1秒に3枚 
ホワイトバランス　：オート/晴れ/曇り/白熱灯 
バッテリー　　　　：充電式（3.7V900mAh li-ion） 
データ保存　　　　：microSD 
撮影モード　　　　：ビデオ/カメラ/タイムラプス/スロー 
防水　　　　　　　：付属の防水ケースをつければ水深30mまで対応 
Wi-Fi　　　　　　  ：対応（専用のアプリをDLすればWi-Fi経由で写真を得られる） 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この安価さと手のひらサイズという小型なものでありながら、タイムラプスモードやWi-Fiに対応しているなど、かなりスペックが高そうです。これは期待できそう。&lt;/p&gt;

&lt;p&gt;さっそく撮ってみましょう！&lt;/p&gt;

&lt;h2 id=&#34;撮ってみた&#34;&gt;撮ってみた&lt;/h2&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;・&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あれ……？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画質が……？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;……画質が悪いぞ？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;！？！？？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;！！！！！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あああ！！！！！！！！！！！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あああああああああああああ！！！！！！！！！！！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらは起動すると最初に出てくる画像。
めっちゃきれい！　シャッタスピード速そう！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あっれっっれ～～～～～～～～～！！！！！！！！？！？
布団をまくる速度に！！！！　負けた！！！！！！！！！！&lt;/p&gt;

&lt;h2 id=&#34;結論-サイズは4kだが画質は&#34;&gt;結論：サイズは4Kだが画質は……&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ということで伝わったかと思いますが、「画質の悪いデータを大きくして4Kサイズにするカメラ」でした。たしかに4Kで、間違ってはいない！　いないけど！　なんか違う！　&lt;/p&gt;

&lt;p&gt;ただ、このコンパクトさのおかげで手軽に撮影ができてめっちゃ楽しいです。このカメラでいろんな深センの情景を撮ってこようと思います。&lt;/p&gt;

&lt;h3 id=&#34;おまけ-付属品がたくさんついてきた&#34;&gt;おまけ：付属品がたくさんついてきた&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;余談ですが、このカメラには山盛りの付属品が付いてきます。てんこ盛り。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;てんてこ盛り。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/041/15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;カスタマイズも自由自在。
ここの充実さは群を抜いてピカイチだと思います。使うかはわかりません。&lt;/p&gt;

&lt;p&gt;では次回もお楽しみに！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>すごいじゃん深セン。怪しさMAXの壁を登るラジコン？WALL CLIMBERを試してみた</title>
      <link>https://dotstud.io/blog/wall-climbing-toy-car/</link>
      <pubDate>Fri, 21 Oct 2016 15:05:13 +0800</pubDate>
      
      <guid>https://dotstud.io/blog/wall-climbing-toy-car/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioエディターのうらら（@uraranbon）です。
普段は日本を拠点にしていますが、今は中国の深センにいます。&lt;/p&gt;

&lt;p&gt;中国で2016/10/22-23にておこなわれるものづくりイベント「&lt;a href=&#34;www.makerfaireshenzhen.com&#34;&gt;Maker Faire Shenzhen 2016&lt;/a&gt;」に出るためです。&lt;/p&gt;

&lt;p&gt;さて、そんな深センには「中国の秋葉原」と呼ばれる電気街があり、さっそく昨日遊びに行ってきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらが電気街の一角です。1日では回れないほどの小売店やデパートなどが集まっています。
そんな電気街で見つけたのがこちら。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;WALL CLIMBER”という名のラジコンです。直訳すると「壁登り」。
もし本当なら、完全に重力を無視してますよね？　&lt;/p&gt;

&lt;p&gt;怪しすぎる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;側面を見てみると「水平にも垂直にも、天井も走れる」と書いています。&lt;/p&gt;

&lt;p&gt;「壁走んの？！　天井も？！」「さすがに釣りじゃないの」「嘘だろ」とdotstudioメンバー全員が半信半疑だったので、さっそく買って試してみました。&lt;/p&gt;

&lt;h2 id=&#34;試してみた&#34;&gt;試してみた&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;操作は付属していたラジコンでおこないます。
地面は綺麗に走りました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;壁は……ラジコンが壁にくっつきました！？
どうやら、掃除機のように風を吸い込んで、壁に吸い付いているようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;壁も上方向に進みます。ただ、登りは若干苦手なようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;天井にもくっつきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;すごい、天井も普通に走る。&lt;/p&gt;

&lt;h2 id=&#34;結論-wall-climberは壁も天井も走った&#34;&gt;結論：WALL CLIMBERは壁も天井も走った&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;疑いの目で見ていた &amp;ldquo;WALL CLIMBER” ですが、期待を裏切るかのように（？！）見事天井を走ってくれました。中国すごい～～～～。&lt;/p&gt;

&lt;p&gt;深センでは他にもさまざまなガジェットを購入したので、記事で紹介する予定です。
次回もお楽しみに！&lt;/p&gt;

&lt;h3 id=&#34;おまけ-買わなかったけれど紹介したい-pxp-3-slim-station&#34;&gt;おまけ：買わなかったけれど紹介したい「PXP 3 Slim station」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/040/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面からマリオが飛び出している「PXP 3」というゲームを見つけました。
でもパッケージの右側には「16 Bit」と書かれてる～～～～？！（ソニック付き）&lt;/p&gt;

&lt;p&gt;では！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure WebAppsにGitLab連携でデプロイしてみよう</title>
      <link>https://dotstud.io/blog/azure-webapps-gitlab-connect/</link>
      <pubDate>Tue, 18 Oct 2016 10:00:30 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/azure-webapps-gitlab-connect/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudio代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;最近&lt;a href=&#34;https://azure.microsoft.com/ja-jp/documentation/articles/app-service-web-overview/&#34;&gt;Azure WebApps&lt;/a&gt;を使って開発をしています。dotstudioではGitLabを利用してソースコード管理をしているのでGitLabとWebAppsを連携し自動デプロイをする方法を紹介します。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;https://christianliebel.com/2016/05/auto-deploying-to-azure-app-services-from-gitlab/&#34;&gt;Auto-Deploying to Azure App Services from GitLab&lt;/a&gt;」を参考にしましたが、調べても英語記事しかなかったので日本語記事は初めてだと思います！&lt;/p&gt;

&lt;h2 id=&#34;今回やること&#34;&gt;今回やること&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt;はGitHubやBitbucketのようなGitのホスティングサービスです。
GitHubとBitbucketはWebAppsが公式対応しているため簡単に設定できますが、GitLabは公式対応していないため少しやり方が特殊です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;やりたいことはこの図の通りで、作業者がGitLabにPushしたら自動的にWebAppsにデプロイされる仕組みを作ります。&lt;/p&gt;

&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;以下の内容を事前に済ませておきましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebAppsのアプリケーションを作成しておく&lt;/li&gt;
&lt;li&gt;GitLabでリポジトリを作成しておく&lt;/li&gt;
&lt;li&gt;GitLabに手元のマシンからPushできる状態にしておく&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;設定してみよう&#34;&gt;設定してみよう&lt;/h2&gt;

&lt;h3 id=&#34;1-webappsにgitlabのurlを紐付ける&#34;&gt;1. WebAppsにGitLabのURLを紐付ける&lt;/h3&gt;

&lt;p&gt;WebAppsのデプロイ設定をします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;アプリのデプロイ &amp;gt; デプロイオプション &amp;gt; ソースの選択 &amp;gt; 外部リポジトリ&lt;/strong&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitLabのリポジトリURLを入力しましょう。 https形式とSSH形式のどちらでも大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事に設定が完了すると、メニューの &lt;strong&gt;概要 &amp;gt; 外部リポジトリプロジェクト&lt;/strong&gt;にリポジトリのURLが設定されます。&lt;/p&gt;

&lt;h3 id=&#34;2-webappsのデプロイ用ssh公開鍵を取得する&#34;&gt;2. WebAppsのデプロイ用SSH公開鍵を取得する&lt;/h3&gt;

&lt;p&gt;WebAppsに外部からアクセスするためにWebAppsのSSH公開鍵を取得します。&lt;/p&gt;

&lt;p&gt;通常WebAppsの公開URLにアクセスする場合&lt;code&gt;http://アプリケーション名.azurewebsites.net&lt;/code&gt;というドメインにアクセスしますが、ここでは通常のURLに&lt;code&gt;.scm&lt;/code&gt;が追加されたドメインにアクセスします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://アプリケーション名.scm.azurewebsites.net/api/sshkey?ensurePublicKey=1&lt;/code&gt; にアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このssh-rsaから始まるダブルクォートで囲まれている部分が公開鍵になります。&lt;/p&gt;

&lt;p&gt;ちなみに、アプリケーション名がn0bisukeの場合は&lt;code&gt;https://n0bisuke.scm.azurewebsites.net/api/sshkey?ensurePublicKey=1&lt;/code&gt;になります。&lt;/p&gt;

&lt;h3 id=&#34;3-gitlabの対象リポジトリにデプロイ用ssh公開鍵を設定する&#34;&gt;3. GitLabの対象リポジトリにデプロイ用SSH公開鍵を設定する&lt;/h3&gt;

&lt;p&gt;先ほどのSSH公開鍵をGitLabに設定します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://gitlab.com/ユーザー名/リポジトリ名/deploy_keys&lt;/code&gt;にアクセスしましょう。
リポジトリの &lt;strong&gt;設定(歯車マーク) &amp;gt; Deploy Keys&lt;/strong&gt;からもアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Titleの項目に任意の名前を入力し、Keyの項目に先ほどのSSH公開鍵を貼りましょう。&lt;/p&gt;

&lt;p&gt;これでGitLabのリポジトリに鍵を紐付けられ、GitLabからWebAppsにデプロイすることが出来るようになります。&lt;/p&gt;

&lt;h3 id=&#34;4-webappsのwebhookアドレスをgitlabに紐付ける&#34;&gt;4. WebAppsのWebhookアドレスをGitLabに紐付ける&lt;/h3&gt;

&lt;p&gt;ここまでの作業でWebAppsとGitLabの連携は出来ているのですが、今回は作業者がGitLabにPushしたらデプロイされる仕組みにしたいため、Pushを検知するための設定をします。&lt;/p&gt;

&lt;p&gt;WebAppsのメニューから &lt;strong&gt;設定 &amp;gt; プロパティ &amp;gt; デプロイ開始のURL&lt;/strong&gt;の項目にあるURLをコピーしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://$アプリケーション名:パスワード@アプリケーション名.scm.azurewebsites.net/deploy&lt;/code&gt;というURLが設定されているはずです。&lt;/p&gt;

&lt;p&gt;GitLab側に移動し、 &lt;code&gt;https://gitlab.com/ユーザー名/リポジトリ名/hooks&lt;/code&gt;にアクセスしましょう。
リポジトリの &lt;strong&gt;設定(歯車マーク) &amp;gt; Webhooks&lt;/strong&gt;からもアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;URLの項目に先ほどのWebAppsのWebHookアドレス(&lt;code&gt;https://$アプリケーション名:パスワード@アプリケーション名.scm.azurewebsites.net/deploy&lt;/code&gt;)を貼り付けます。 他の項目は特に変更せずに&lt;code&gt;Add Webhook&lt;/code&gt;で追加します。&lt;/p&gt;

&lt;p&gt;これで設定は完了です。&lt;/p&gt;

&lt;h3 id=&#34;5-試してみる&#34;&gt;5. 試してみる&lt;/h3&gt;

&lt;p&gt;Gitで適当にPushしてみましょう。するとWebAppsのデプロイオプションの項目で同期が確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://アプリケーション名.azurewebsites.net&lt;/code&gt;にアクセスしてみるとソースコードが反映されていることが分かると思います。&lt;/p&gt;

&lt;p&gt;お疲れ様でした！&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;イメージのしやすさから「GitLabからWebAppsにデプロイ」という表現を使いましたが、実際には「WebAppsがGitLab上のソースコードをPullしている」という表現の方が正しいと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/038/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitLab側はPushがあったことをWebhookでWebAppsに声を掛けてあげて、WebApps側はGitLabから声が掛かったらPullしにいく、という流れです。&lt;/p&gt;

&lt;p&gt;ちなみに今回はWebhookの設定でかなりハマって、「&lt;a href=&#34;https://github.com/projectkudu/kudu/wiki/Continuous-deployment&#34;&gt;projectkudu/kudu&lt;/a&gt;」や「&lt;a href=&#34;http://stackoverflow.com/questions/31538152/publishing-to-azure-web-apps-from-gitlab-repository-on-trigger&#34;&gt;Publishing to Azure Web Apps from GitLab repository on trigger&lt;/a&gt;」に&lt;code&gt;https://$mysite:BigRandomPassword@mysite.scm.azurewebsites.net/deploy&lt;/code&gt;がWebhookのURLだという記載があるのですが、&lt;code&gt;BigRandomPassword&lt;/code&gt;が謎すぎてかなり詰んでました。 WebApps側で「デプロイ開始のURL」という表現になってるのも分かりにくい気がしますね（苦笑）。&lt;/p&gt;

&lt;p&gt;WebAppsとGitLabの仕様が変わるまではしばらくこの手順が生きるはずですので、参考になれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>本ブログにもページネーション機能が付きました！Hugoでページネーション機能を作ろう</title>
      <link>https://dotstud.io/blog/hugo-howto-create-pagination/</link>
      <pubDate>Wed, 12 Oct 2016 10:00:16 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hugo-howto-create-pagination/</guid>
      
      <description>

&lt;p&gt;こんにちは、 dotstudio代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;このブログはページネーション機能が無かったのですが、そろそろコンテンツ数も増えてきたのでページネーション機能を実装しました。 888888&lt;/p&gt;

&lt;p&gt;実際に作る方法を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;hugoでページネーション機能を作る&#34;&gt;Hugoでページネーション機能を作る&lt;/h2&gt;

&lt;p&gt;今回はblogセクションにページネーションを実装します。&lt;/p&gt;

&lt;p&gt;Hugoのページネーションで調べるとまずは&lt;a href=&#34;https://gohugo.io/extras/pagination/&#34;&gt;ドキュメントページのここ&lt;/a&gt;がヒットします。&lt;/p&gt;

&lt;p&gt;もともとも&lt;code&gt;section/blog.html&lt;/code&gt;は以下のようなコードでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
    {{ range first 12 (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) }}
      {{ .Render &amp;quot;summary&amp;quot;}}
    {{ end }}
    &amp;lt;/div&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ドキュメントページを参照しながら以下のように変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}

    {{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) 12 }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
       {{ range $paginator.Pages }}
            {{ .Render &amp;quot;summary&amp;quot; }}
        {{ end }}
    &amp;lt;/div&amp;gt;
    
    {{ template &amp;quot;_internal/pagination.html&amp;quot; . }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでページネーション機能はとりあえず完成です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;めちゃ簡単ですね！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;確認してみるとページの下の方に何かいる&amp;hellip;&amp;hellip;！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これがページネーションのメニューです。&lt;/p&gt;

&lt;p&gt;勝手に生成されていてびっくりしますが、&lt;code&gt;{{ template &amp;quot;_internal/pagination.html&amp;quot; . }}&lt;/code&gt;の部分でこのメニューが生成されています。&lt;/p&gt;

&lt;p&gt;だけどここから先で割と詰まりました苦笑&lt;/p&gt;

&lt;h2 id=&#34;見た目とメニューの自由度を上げたい&#34;&gt;見た目とメニューの自由度を上げたい&lt;/h2&gt;

&lt;p&gt;このままだとどこでHTMLが生成されているか不明です。&lt;code&gt;_internal/~~~.html&lt;/code&gt;はHugoの組み込みテンプレートになっていて、通常は変更することが出来ません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kakunaga.net/post/160517pagination/&#34;&gt;pagination の見た目&lt;/a&gt;の記事を見ると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class=&amp;ldquo;pagination&amp;rdquo;&lt;/li&gt;
&lt;li&gt;class=&amp;ldquo;active&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が生成されているからCSSを指定すればいいみたいです。ただ、メニュー項目の自由度は無いので自分で定義してみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/blob/master/tpl/template_embedded.go#L116-L142&#34;&gt;Hugoのソース&lt;/a&gt;を覗き見ると対象箇所が分かります。&lt;/p&gt;

&lt;p&gt;ここを元に&lt;code&gt;layouts/partials/paginator.html&lt;/code&gt;を作成します。以下ではコメントも入れておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $pag := $.Paginator }}
{{ if gt $pag.TotalPages 1 }}
    &amp;lt;ul class=&amp;quot;pagination&amp;quot;&amp;gt;
        {{/*最初へ*/}}
        {{ with $pag.First }}
            &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot; aria-label=&amp;quot;First&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;最初へ&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}

        {{/*前ページ*/}}
        &amp;lt;li{{ if not $pag.HasPrev }}class=&amp;quot;disabled&amp;quot;{{ end }}&amp;gt;
            &amp;lt;a href=&amp;quot;{{ if $pag.HasPrev }}{{ $pag.Prev.URL }}{{ end }}&amp;quot; aria-label=&amp;quot;Previous&amp;quot;&amp;gt;
                &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;前へ&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        {{/*番号*/}}
        {{ range $pag.Pagers }}
            &amp;lt;li{{ if eq . $pag }}class=&amp;quot;active&amp;quot;{{ end }}&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot;&amp;gt;{{ .PageNumber }}&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}
        
        {{/*次ページ*/}}
        &amp;lt;li{{ if not $pag.HasNext }}class=&amp;quot;disabled&amp;quot;{{ end }}&amp;gt;
            &amp;lt;a href=&amp;quot;{{ if $pag.HasNext }}{{ $pag.Next.URL }}{{ end }}&amp;quot; aria-label=&amp;quot;Next&amp;quot;&amp;gt;
                &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;次へ&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        {{/*最後へ*/}}
        {{ with $pag.Last }}
            &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot; aria-label=&amp;quot;Last&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;最後へ&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}
    &amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;section/blog.html&lt;/code&gt;を以下に修正します。
&lt;code&gt;_internal&lt;/code&gt;で組み込みテンプレートを呼び出していた行を今作成した&lt;code&gt;paginator.html&lt;/code&gt;を呼び出すように変更です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}

    {{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) 12 }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
       {{ range $paginator.Pages }}
            {{ .Render &amp;quot;summary&amp;quot; }}
        {{ end }}
    &amp;lt;/div&amp;gt;
    
    {{ partial &amp;quot;paginator.html&amp;quot; . }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで完成です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ビルドするとこのような形になりました。&lt;/p&gt;

&lt;p&gt;あとは&lt;a href=&#34;https://dotstud.io/members/chachmaru/&#34;&gt;ちゃちゃまる先生&lt;/a&gt;にCSSをあててもらえば終了です。&lt;/p&gt;

&lt;h2 id=&#34;出来上がったものがこちらです&#34;&gt;出来上がったものがこちらです&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;いい感じですね。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;こちら(&lt;a href=&#34;http://wdkk.co.jp/note/2015/0915-hugo-pagination/&#34;&gt;Hugoでwebサイト構築(9) リストのページネーション(Pagination)&lt;/a&gt;)も参考にさせていただきました。&lt;/p&gt;

&lt;p&gt;なかなか公式ドキュメントも調べづらいので参考になれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>本ブログにもページネーション機能が付きました！Hugoでページネーション機能を作ろう</title>
      <link>https://dotstud.io/blog/hugo-howto-create-pagination/</link>
      <pubDate>Wed, 12 Oct 2016 10:00:16 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hugo-howto-create-pagination/</guid>
      
      <description>

&lt;p&gt;こんにちは、 dotstudio代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;このブログはページネーション機能が無かったのですが、そろそろコンテンツ数も増えてきたのでページネーション機能を実装しました。 888888&lt;/p&gt;

&lt;p&gt;実際に作る方法を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;hugoでページネーション機能を作る&#34;&gt;Hugoでページネーション機能を作る&lt;/h2&gt;

&lt;p&gt;今回はblogセクションにページネーションを実装します。&lt;/p&gt;

&lt;p&gt;Hugoのページネーションで調べるとまずは&lt;a href=&#34;https://gohugo.io/extras/pagination/&#34;&gt;ドキュメントページのここ&lt;/a&gt;がヒットします。&lt;/p&gt;

&lt;p&gt;もともとも&lt;code&gt;section/blog.html&lt;/code&gt;は以下のようなコードでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
    {{ range first 12 (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) }}
      {{ .Render &amp;quot;summary&amp;quot;}}
    {{ end }}
    &amp;lt;/div&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ドキュメントページを参照しながら以下のように変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}

    {{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) 12 }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
       {{ range $paginator.Pages }}
            {{ .Render &amp;quot;summary&amp;quot; }}
        {{ end }}
    &amp;lt;/div&amp;gt;
    
    {{ template &amp;quot;_internal/pagination.html&amp;quot; . }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでページネーション機能はとりあえず完成です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;めちゃ簡単ですね！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;確認してみるとページの下の方に何かいる&amp;hellip;&amp;hellip;！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これがページネーションのメニューです。&lt;/p&gt;

&lt;p&gt;勝手に生成されていてびっくりしますが、&lt;code&gt;{{ template &amp;quot;_internal/pagination.html&amp;quot; . }}&lt;/code&gt;の部分でこのメニューが生成されています。&lt;/p&gt;

&lt;p&gt;だけどここから先で割と詰まりました苦笑&lt;/p&gt;

&lt;h2 id=&#34;見た目とメニューの自由度を上げたい&#34;&gt;見た目とメニューの自由度を上げたい&lt;/h2&gt;

&lt;p&gt;このままだとどこでHTMLが生成されているか不明です。&lt;code&gt;_internal/~~~.html&lt;/code&gt;はHugoの組み込みテンプレートになっていて、通常は変更することが出来ません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kakunaga.net/post/160517pagination/&#34;&gt;pagination の見た目&lt;/a&gt;の記事を見ると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class=&amp;ldquo;pagination&amp;rdquo;&lt;/li&gt;
&lt;li&gt;class=&amp;ldquo;active&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が生成されているからCSSを指定すればいいみたいです。ただ、メニュー項目の自由度は無いので自分で定義してみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/blob/master/tpl/template_embedded.go#L116-L142&#34;&gt;Hugoのソース&lt;/a&gt;を覗き見ると対象箇所が分かります。&lt;/p&gt;

&lt;p&gt;ここを元に&lt;code&gt;layouts/partials/paginator.html&lt;/code&gt;を作成します。以下ではコメントも入れておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $pag := $.Paginator }}
{{ if gt $pag.TotalPages 1 }}
    &amp;lt;ul class=&amp;quot;pagination&amp;quot;&amp;gt;
        {{/*最初へ*/}}
        {{ with $pag.First }}
            &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot; aria-label=&amp;quot;First&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;最初へ&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}

        {{/*前ページ*/}}
        &amp;lt;li{{ if not $pag.HasPrev }}class=&amp;quot;disabled&amp;quot;{{ end }}&amp;gt;
            &amp;lt;a href=&amp;quot;{{ if $pag.HasPrev }}{{ $pag.Prev.URL }}{{ end }}&amp;quot; aria-label=&amp;quot;Previous&amp;quot;&amp;gt;
                &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;前へ&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        {{/*番号*/}}
        {{ range $pag.Pagers }}
            &amp;lt;li{{ if eq . $pag }}class=&amp;quot;active&amp;quot;{{ end }}&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot;&amp;gt;{{ .PageNumber }}&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}
        
        {{/*次ページ*/}}
        &amp;lt;li{{ if not $pag.HasNext }}class=&amp;quot;disabled&amp;quot;{{ end }}&amp;gt;
            &amp;lt;a href=&amp;quot;{{ if $pag.HasNext }}{{ $pag.Next.URL }}{{ end }}&amp;quot; aria-label=&amp;quot;Next&amp;quot;&amp;gt;
                &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;次へ&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        {{/*最後へ*/}}
        {{ with $pag.Last }}
            &amp;lt;li&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .URL }}&amp;quot; aria-label=&amp;quot;Last&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;最後へ&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {{ end }}
    &amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;section/blog.html&lt;/code&gt;を以下に修正します。
&lt;code&gt;_internal&lt;/code&gt;で組み込みテンプレートを呼び出していた行を今作成した&lt;code&gt;paginator.html&lt;/code&gt;を呼び出すように変更です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}

    {{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;) 12 }}
    &amp;lt;!-- Main Content --&amp;gt;
    &amp;lt;div id=&amp;quot;blog-card--container&amp;quot;&amp;gt;
       {{ range $paginator.Pages }}
            {{ .Render &amp;quot;summary&amp;quot; }}
        {{ end }}
    &amp;lt;/div&amp;gt;
    
    {{ partial &amp;quot;paginator.html&amp;quot; . }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで完成です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ビルドするとこのような形になりました。&lt;/p&gt;

&lt;p&gt;あとは&lt;a href=&#34;https://dotstud.io/members/chachmaru/&#34;&gt;ちゃちゃまる先生&lt;/a&gt;にCSSをあててもらえば終了です。&lt;/p&gt;

&lt;h2 id=&#34;出来上がったものがこちらです&#34;&gt;出来上がったものがこちらです&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/032/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;いい感じですね。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;こちら(&lt;a href=&#34;http://wdkk.co.jp/note/2015/0915-hugo-pagination/&#34;&gt;Hugoでwebサイト構築(9) リストのページネーション(Pagination)&lt;/a&gt;)も参考にさせていただきました。&lt;/p&gt;

&lt;p&gt;なかなか公式ドキュメントも調べづらいので参考になれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>地味に便利！Raspberry Piが起動したらIPアドレスを通知するチャットボットを作る</title>
      <link>https://dotstud.io/blog/raspberry-pi-ip-notification/</link>
      <pubDate>Tue, 11 Oct 2016 10:00:49 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/raspberry-pi-ip-notification/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;Raspberry Piは起動するたびにIPアドレスが変わってしまうことがありますよね。
だいたいの人はSSH接続していると思うのでIPアドレスが変わると再確認をしないといけませんが、 &lt;strong&gt;RaspberryPiは基本的にディスプレイとキーボードを接続しないとIPアドレスの確認できないのがめんどくさいですね&lt;/strong&gt;。 （FTDIとかはありますがこれも手間はあります。）&lt;/p&gt;

&lt;p&gt;そこで今回は、&lt;strong&gt;Raspberry Piの起動時に自身のIPアドレスをHipChatに通知する仕組みを作ります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、ここでいうチャットボットは「会話をする」というより「チャットに通知するプログラム」っていう意味合いです。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 2 ModelB&lt;/li&gt;
&lt;li&gt;Raspbian 8.0 Jessie&lt;/li&gt;
&lt;li&gt;Node.js 4.4.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;node-jsでipアドレスを知る&#34;&gt;Node.jsでIPアドレスを知る&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;os.networkInterfaces()&lt;/code&gt;でネットワーク情報を取得し、&lt;code&gt;os.hostname()&lt;/code&gt;でマシン名を取得できます。
「&lt;a href=&#34;http://qiita.com/_shimizu/items/b38d1459abf8436f7f1f&#34;&gt;node.jsでローカルIPアドレスの取得&lt;/a&gt;」を参考にさせて頂きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        console.log(mes);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js

raspberrypi:192.168.43.70 (standup)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでホスト名とIPアドレスを取得することができました。&lt;/p&gt;

&lt;h2 id=&#34;hipchatにポストする&#34;&gt;HipChatにポストする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hipchat-bot-by-nodejs/&#34;&gt;話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。&lt;/a&gt;の記事でHipChatに投稿している部分を外部モジュール化しておきます。
&lt;code&gt;libs/hcPost.js&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
const hcPost = require(&#39;./libs/hcPost&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        let postData = {
            &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
            &amp;quot;message&amp;quot;: mes,
            &amp;quot;notify&amp;quot;: false,
            &amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
        };
        hcPost(postData);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで実行するとホスト名とIPアドレスがHipChatに投稿されます。&lt;/p&gt;

&lt;p&gt;ソースコードは&lt;a href=&#34;https://github.com/n0bisuke/raspi-j5-hue/blob/master/ip.js&#34;&gt;GitHub&lt;/a&gt;にも載せてあります。&lt;/p&gt;

&lt;h2 id=&#34;raspberry-piの起動時にnode-jsアプリケーションの起動を設定する&#34;&gt;Raspberry Piの起動時にNode.jsアプリケーションの起動を設定する&lt;/h2&gt;

&lt;p&gt;Node.jsのアプリケーションはRaspberry Piを再起動させたタイミングで完全にプロセスが落ちてしまうので、起動時に実行されるように設定します。
「&lt;a href=&#34;http://qiita.com/n0bisuke/items/781eac201a907a524f8e&#34;&gt;RaspberryPiの起動時にNode.jsを実行&amp;amp;PM2で永続化するメモ&lt;/a&gt;」にもあるように、&lt;code&gt;/etc/rc.local&lt;/code&gt;に処理を書き込むことで起動時に処理をしてくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などでファイルを開くと、デフォルトで以下の内容が記載されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここにNode.jsアプリケーションの実行処理を記述しましょう。&lt;code&gt;/etc/rc.local&lt;/code&gt;に以下を書き込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにこの&lt;code&gt;sudo -u pi &amp;lt;nodeコマンドの絶対パス&amp;gt; &amp;lt;起動するスクリプトの絶対パス&amp;gt;&lt;/code&gt;となります。
パスが分からない人は、whichコマンドでパスを見つけましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which node

/home/pi/.nvm/versions/node/v4.4.2/bin/node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最終的にこうなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で上手く動作するか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでエラーが出る場合はパスの指定などが間違ってる可能性が高いです。&lt;/p&gt;

&lt;p&gt;こんな感じの表示がHipChat側にされたら成功です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/033/01.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/12/goodnews-new-and-improved-emoticons/&#34;&gt;HipChatの絵文字&lt;/a&gt;は種類が豊富で&lt;code&gt;(standup)&lt;/code&gt;を指定すると画像のように人が立ち上がる絵文字になります。&lt;/p&gt;

&lt;p&gt;最後に設定が出来たらRaspberry Piの電源を再起動してみましょう。
起動直後にHipChatにRaspberry PiのIPアドレスが通知されたら、起動設定が成功している証拠です。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これで「Raspberry PiのIPが変わってしまいSSHログインがしにくい問題」が解決しそうです。
起動した際に通知が来るので通常起動してるかどうかの監視にも使えそうです。&lt;/p&gt;

&lt;p&gt;Raspberry Piからチャットへの一方通行な通信なので、Raspberry Piが何らかの原因で動作していない場合はMilkcocoaなどで双方向の通信を入れれば死活監視もできそうですね。&lt;/p&gt;

&lt;p&gt;皆さんも是非活用してみて下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>地味に便利！Raspberry Piが起動したらIPアドレスを通知するチャットボットを作る</title>
      <link>https://dotstud.io/blog/raspberry-pi-ip-notification/</link>
      <pubDate>Tue, 11 Oct 2016 10:00:49 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/raspberry-pi-ip-notification/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;Raspberry Piは起動するたびにIPアドレスが変わってしまうことがありますよね。
だいたいの人はSSH接続していると思うのでIPアドレスが変わると再確認をしないといけませんが、 &lt;strong&gt;RaspberryPiは基本的にディスプレイとキーボードを接続しないとIPアドレスの確認できないのがめんどくさいですね&lt;/strong&gt;。 （FTDIとかはありますがこれも手間はあります。）&lt;/p&gt;

&lt;p&gt;そこで今回は、&lt;strong&gt;Raspberry Piの起動時に自身のIPアドレスをHipChatに通知する仕組みを作ります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、ここでいうチャットボットは「会話をする」というより「チャットに通知するプログラム」っていう意味合いです。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 2 ModelB&lt;/li&gt;
&lt;li&gt;Raspbian 8.0 Jessie&lt;/li&gt;
&lt;li&gt;Node.js 4.4.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;node-jsでipアドレスを知る&#34;&gt;Node.jsでIPアドレスを知る&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;os.networkInterfaces()&lt;/code&gt;でネットワーク情報を取得し、&lt;code&gt;os.hostname()&lt;/code&gt;でマシン名を取得できます。
「&lt;a href=&#34;http://qiita.com/_shimizu/items/b38d1459abf8436f7f1f&#34;&gt;node.jsでローカルIPアドレスの取得&lt;/a&gt;」を参考にさせて頂きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        console.log(mes);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js

raspberrypi:192.168.43.70 (standup)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでホスト名とIPアドレスを取得することができました。&lt;/p&gt;

&lt;h2 id=&#34;hipchatにポストする&#34;&gt;HipChatにポストする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hipchat-bot-by-nodejs/&#34;&gt;話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。&lt;/a&gt;の記事でHipChatに投稿している部分を外部モジュール化しておきます。
&lt;code&gt;libs/hcPost.js&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
const hcPost = require(&#39;./libs/hcPost&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        let postData = {
            &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
            &amp;quot;message&amp;quot;: mes,
            &amp;quot;notify&amp;quot;: false,
            &amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
        };
        hcPost(postData);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで実行するとホスト名とIPアドレスがHipChatに投稿されます。&lt;/p&gt;

&lt;p&gt;ソースコードは&lt;a href=&#34;https://github.com/n0bisuke/raspi-j5-hue/blob/master/ip.js&#34;&gt;GitHub&lt;/a&gt;にも載せてあります。&lt;/p&gt;

&lt;h2 id=&#34;raspberry-piの起動時にnode-jsアプリケーションの起動を設定する&#34;&gt;Raspberry Piの起動時にNode.jsアプリケーションの起動を設定する&lt;/h2&gt;

&lt;p&gt;Node.jsのアプリケーションはRaspberry Piを再起動させたタイミングで完全にプロセスが落ちてしまうので、起動時に実行されるように設定します。
「&lt;a href=&#34;http://qiita.com/n0bisuke/items/781eac201a907a524f8e&#34;&gt;RaspberryPiの起動時にNode.jsを実行&amp;amp;PM2で永続化するメモ&lt;/a&gt;」にもあるように、&lt;code&gt;/etc/rc.local&lt;/code&gt;に処理を書き込むことで起動時に処理をしてくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などでファイルを開くと、デフォルトで以下の内容が記載されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここにNode.jsアプリケーションの実行処理を記述しましょう。&lt;code&gt;/etc/rc.local&lt;/code&gt;に以下を書き込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにこの&lt;code&gt;sudo -u pi &amp;lt;nodeコマンドの絶対パス&amp;gt; &amp;lt;起動するスクリプトの絶対パス&amp;gt;&lt;/code&gt;となります。
パスが分からない人は、whichコマンドでパスを見つけましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which node

/home/pi/.nvm/versions/node/v4.4.2/bin/node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最終的にこうなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で上手く動作するか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでエラーが出る場合はパスの指定などが間違ってる可能性が高いです。&lt;/p&gt;

&lt;p&gt;こんな感じの表示がHipChat側にされたら成功です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/033/01.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/12/goodnews-new-and-improved-emoticons/&#34;&gt;HipChatの絵文字&lt;/a&gt;は種類が豊富で&lt;code&gt;(standup)&lt;/code&gt;を指定すると画像のように人が立ち上がる絵文字になります。&lt;/p&gt;

&lt;p&gt;最後に設定が出来たらRaspberry Piの電源を再起動してみましょう。
起動直後にHipChatにRaspberry PiのIPアドレスが通知されたら、起動設定が成功している証拠です。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これで「Raspberry PiのIPが変わってしまいSSHログインがしにくい問題」が解決しそうです。
起動した際に通知が来るので通常起動してるかどうかの監視にも使えそうです。&lt;/p&gt;

&lt;p&gt;Raspberry Piからチャットへの一方通行な通信なので、Raspberry Piが何らかの原因で動作していない場合はMilkcocoaなどで双方向の通信を入れれば死活監視もできそうですね。&lt;/p&gt;

&lt;p&gt;皆さんも是非活用してみて下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>デザイナーの僕がHugoを使ってポートフォリオサイトを作ってみる #2【制作:基本編】</title>
      <link>https://dotstud.io/blog/hugo-for-designers-vol2/</link>
      <pubDate>Thu, 06 Oct 2016 10:40:04 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hugo-for-designers-vol2/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioのデザイナー・ちゃちゃまる（&lt;a href=&#34;https://twitter.com/chachmaru&#34;&gt;@chachmaru&lt;/a&gt;）です！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hugo-for-designers-vol1/&#34;&gt;第一回目&lt;/a&gt;では&lt;br /&gt;
- 動的サイトと静的サイトの違い&lt;br /&gt;
- Hugoの使い方&lt;br /&gt;
- Hugoディレクトリの中身&lt;br /&gt;
を説明しました。&lt;/p&gt;

&lt;p&gt;本連載の第二回目では、とりあえずトップページに記事を表示させ、ローカル環境でテストしてみるところまで進めていきたいと思います！なお、この記事ではHugoに直接関係のない部分（基本的なHTMLやCSSの記述など）の解説は省いていきますのでご了承ください。&lt;/p&gt;

&lt;p&gt;また、僕自身も手探りのため、コードや理解に間違っている部分や改善すべき点など多数あると思います。お気づきの方は、こっそりGithub issueの方で報告していただけたら幸いです。&lt;/p&gt;

&lt;p&gt;それでは早速やっていきましょう！&lt;/p&gt;

&lt;h2 id=&#34;記事を作成する&#34;&gt;記事を作成する&lt;/h2&gt;

&lt;p&gt;Hugoを使った操作は、基本前回と同じようにターミナル内で行います。&lt;code&gt;アプリケーション &amp;gt; ユーティリティ &amp;gt; ターミナル.app&lt;/code&gt;から起動して、前回生成したHugoディレクトリまで移動しましょう。&lt;/p&gt;

&lt;h3 id=&#34;hugo-newコマンド&#34;&gt;hugo newコマンド&lt;/h3&gt;

&lt;p&gt;前回は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site chachamaru
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というコマンドを使ってHugoディレクトリを生成しました。実はこの&lt;code&gt;hugo new&lt;/code&gt;コマンドの一部分を置き換えて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new ジャンル/記事名（アルファベット）.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで、かんたんに記事もつくることができるのです。&lt;/p&gt;

&lt;p&gt;最後の拡張子&lt;code&gt;.md&lt;/code&gt;は、マークダウンのファイルであることを表しています。Hugoは記事をマークダウン方式で書くことができるので、最後に&lt;code&gt;.md&lt;/code&gt;をつけるようにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;ジャンルを決める&#34;&gt;ジャンルを決める&lt;/h3&gt;

&lt;p&gt;さて、ここで記事にどんなジャンルが欲しいかを考えます。もちろん後から新しいジャンルを追加することもできるので、今は「Works」（作品）と「Announcements」（お知らせ）の2つにします。&lt;/p&gt;

&lt;p&gt;この場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new works/my-first-work.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new announcements/my-new-website.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとすれば二種類のジャンルが作成されます。&lt;/p&gt;

&lt;h3 id=&#34;記事の場所&#34;&gt;記事の場所&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt;コマンドでつくられた記事は&lt;code&gt;content&lt;/code&gt;ディレクトリ内にあります。ジャンルが指定されている場合、ジャンル名がサブディレクトリ名になります。&lt;/p&gt;

&lt;p&gt;今回の場合、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/01.png&#34; alt=&#34;ディレクトリ構成&#34; /&gt;&lt;/p&gt;

&lt;p&gt;のような構成になっているはずです。&lt;/p&gt;

&lt;p&gt;※&lt;code&gt;hugo new&lt;/code&gt;で生成したジャンル名や記事タイトルは、Finderなどからでも名称変更可能です。スペルミスなどをしてしまった場合は普段どおり名前を変更すれば大丈夫です。&lt;/p&gt;

&lt;h3 id=&#34;フロントマター&#34;&gt;フロントマター&lt;/h3&gt;

&lt;p&gt;作成した&lt;code&gt;my-first-work.md&lt;/code&gt;をテキストエディタで開いてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/02.png&#34; alt=&#34;マークダウンファイル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;開くと空のファイルではなく、&lt;code&gt;+++&lt;/code&gt;に囲まれて&lt;code&gt;date&lt;/code&gt;、&lt;code&gt;draft&lt;/code&gt;、&lt;code&gt;title&lt;/code&gt;の3つが書かれています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;+++&lt;/code&gt;で囲まれている部分は、TOML（設定ファイルを記述する小さい言語）で書かれたこの&lt;code&gt;my-first-work.md&lt;/code&gt;の記事に関するデータであり、&lt;strong&gt;フロントマター&lt;/strong&gt;と呼びます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;date&lt;/code&gt;には記事が作成された日にちと時間、&lt;code&gt;draft&lt;/code&gt;にはこの記事が下書き状態か否か、そして&lt;code&gt;title&lt;/code&gt;にはファイル名と同じ名前がデフォルトでつけられています。詳しくは後ほど。&lt;/p&gt;

&lt;h3 id=&#34;記事を書く&#34;&gt;記事を書く&lt;/h3&gt;

&lt;p&gt;本文は&lt;code&gt;+++&lt;/code&gt;で閉じた後の行に記述します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/03.png&#34; alt=&#34;マークダウンファイル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このファイルの名前&lt;code&gt;my-first-work.md&lt;/code&gt;は、この記事のページのURL（例: chachmaru.github.io/works/my-first-work）になります（ファイル名とURLを別々に設定することも可能）。実際にウェブサイトに表示されるタイトルはフロントマターの&lt;code&gt;title&lt;/code&gt;で指定されたものなので、好きな文言に書き換えておきましょう。&lt;/p&gt;

&lt;p&gt;これで一旦記事作成は終わりです。次はHTMLを書いていきます。&lt;/p&gt;

&lt;h2 id=&#34;トップページに記事一覧を表示させる&#34;&gt;トップページに記事一覧を表示させる&lt;/h2&gt;

&lt;h3 id=&#34;index-htmlをつくる&#34;&gt;index.htmlをつくる&lt;/h3&gt;

&lt;p&gt;前回のおさらいで、HUGOでは&lt;code&gt;layouts&lt;/code&gt;内にHTMLファイルを置きます。&lt;code&gt;index.html&lt;/code&gt;を作り、とりあえず「hello world」などと入れ、保存しましょう。&lt;/p&gt;

&lt;h3 id=&#34;ブラウザでテストしてみる&#34;&gt;ブラウザでテストしてみる&lt;/h3&gt;

&lt;p&gt;いよいよHUGOをブラウザで表示させてみます。テスト用のサーバーをたてるのは非常にかんたんで、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とターミナルに入れるだけです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/04.png&#34; alt=&#34;ターミナルスクリーンショット&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hugoはデフォルトで&lt;a href=&#34;localhost:1313&#34;&gt;localhost:1313&lt;/a&gt;にサーバーをたてるので、ブラウザでアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/029/05.png&#34; alt=&#34;ブラウザ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さきほど&lt;code&gt;index.html&lt;/code&gt;に入れた文字が表示されましたか？&lt;/p&gt;

&lt;h3 id=&#34;コマンドにオプションをつける&#34;&gt;コマンドにオプションをつける&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;コマンドは、Hugoディレクトリ内のファイルを更新したあと一旦サーバーを停止させてもう一度起動しなければいけないので、非常にめんどうです。&lt;/p&gt;

&lt;p&gt;そこで、一旦サーバーを停止して、次から&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --watch --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてください。&lt;/p&gt;

&lt;p&gt;2つのハイフンから始まる文字は&lt;code&gt;hugo server&lt;/code&gt;コマンドのオプションです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;br /&gt;
Hugoディレクトリ内に変更があったとき自動でブラウザをリロードしてくれます。これでいちいちサーバーを再起動しなくても大丈夫です。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;--buildDrafts&lt;/code&gt;&lt;br /&gt;
フロントマターの&lt;code&gt;draft&lt;/code&gt;欄が&lt;code&gt;true&lt;/code&gt;になっている記事を、Hugoはデフォルトでテストサーバーに反映させません。本番には向いているのですが、今はテスト段階のため、このオプションをつけて下書き記事も反映させます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでずっと走らせておきながら開発ができます。&lt;/p&gt;

&lt;h3 id=&#34;トップページに記事を表示させる&#34;&gt;トップページに記事を表示させる&lt;/h3&gt;

&lt;p&gt;まずは以下を&lt;code&gt;index.html&lt;/code&gt;にコピペして保存してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;

      {{ range first 10 .Data.Pages }}
        &amp;lt;div&amp;gt;
          &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
      {{ end }}

  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、ブラウザ側では&lt;br /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/029/06.png&#34; alt=&#34;ブラウザ&#34; /&gt;&lt;br /&gt;
のように、さきほど作成した&lt;code&gt;content&lt;/code&gt;ディレクトリ内の2つの記事タイトルが並べられていると思います！&lt;/p&gt;

&lt;h2 id=&#34;goテンプレートを活用する&#34;&gt;Goテンプレートを活用する&lt;/h2&gt;

&lt;p&gt;なぜ上記のようなコードだけで、こんなにもかんたんに記事一覧を表示させることができるのでしょうか。秘密は&lt;code&gt;{{ }}&lt;/code&gt;内のコードにあります。&lt;/p&gt;

&lt;h3 id=&#34;hugoのテンプレートエンジン&#34;&gt;Hugoのテンプレートエンジン&lt;/h3&gt;

&lt;p&gt;テンプレートエンジンとは、雛形（テンプレート）とデータを合成・出力することができるソフトウェアを指します。HugoはHTMLにかんたんなロジックを組みこむことができる軽量の「Go html/template」ライブラリを、テンプレートエンジンとして使用しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 10 .Data.Pages}}

{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は、全記事から最新の10記事分の、カッコ内に書かれたHTMLを用意しています。今回は全体で2つしか記事がないため、2つ分のみ用意されています。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;{{ .Title }}&lt;/code&gt;はその記事のタイトルを取得してくれます。つまり今回の場合、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;ポートフォリオサイトを作りました。&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;初めての作品&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とテンプレートエンジンにより変換されます。&lt;/p&gt;

&lt;h2 id=&#34;次回予告&#34;&gt;次回予告&lt;/h2&gt;

&lt;p&gt;今回は自分が書いた記事の一覧をトップページに表示させることができました。しかし、現時点だとタイトルをクリックしても記事ページには飛べません。Hugoでポートフォリオサイトを作るには、もう少しこの&lt;code&gt;{{ }}&lt;/code&gt;をうまく活用する必要がありそうです。&lt;/p&gt;

&lt;p&gt;次回は個別記事のページ作成や、ジャンル、タグなどの仕組みをつくっていきたいと思います。&lt;/p&gt;

&lt;p&gt;それではまた次回お会いしましょう！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>