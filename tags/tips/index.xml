<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tips on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/tags/tips/</link><description>Recent content in tips on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Tue, 03 Jan 2017 10:05:15 +0900</lastBuildDate><atom:link href="/tags/tips/" rel="self" type="application/rss+xml"/><item><title>Node.jsアプリケーションからMySQLにアクセスする</title><link>https://dotstud.io/blog/operate-mysql-from-nodejs/</link><pubDate>Tue, 03 Jan 2017 10:05:15 +0900</pubDate><guid>https://dotstud.io/blog/operate-mysql-from-nodejs/</guid><description>&lt;p>こんにちは、dotstudioの代表の&lt;a href="https://twitter.com/n0bisuke">のびすけ&lt;/a>です。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/blog/howto-setup-azure-mysql/">前回の記事(AzureでMySQLのセットアップと接続方法)&lt;/a>に続きMySQLの話です。&lt;/p>
&lt;p>今日は初心者向けに、Node.jsからMySQLにアクセスする方法をチュートリアル的に紹介します。&lt;/p>
&lt;h2 id="mysql">MySQLモジュール（ドライバー）&lt;/h2>
&lt;p>こちらのモジュールを利用します。
おそらく一番利用されているMySQLのNode.jsモジュール（ドライバー）になります。&lt;/p>
&lt;p>&lt;a href="https://www.npmjs.com/package/mysql">https://www.npmjs.com/package/mysql&lt;/a>&lt;/p>
&lt;pre>&lt;code>npm init --yes
npm i mysql --save
&lt;/code>&lt;/pre>&lt;p>これでインストールはできました。&lt;/p>
&lt;h2 id="mysql-1">MySQLデータベースを用意&lt;/h2>
&lt;p>接続を試す前にデータベースが用意できているか確認しましょう。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/blog/howto-setup-azure-mysql/">前回の記事(AzureでMySQLのセットアップと接続方法)&lt;/a>などを参照してみましょう。&lt;/p>
&lt;p>仮データをいれておきましょう。&lt;/p>
&lt;p>今回は'test_user'テーブルを作って一件データを入れておきました。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/068/01.png" alt="">&lt;/p>
&lt;h2 id="crudsql">CRUD（クラッド）とSQL&lt;/h2>
&lt;p>データアクセスの前に&lt;a href="http://e-words.jp/w/CRUD.html">CRUD&lt;/a>について少し触れます。
CRUDはデータベースシステムなどの基本概念であるデータの作成（Create）、読み出し（Read）、更新（Update）、削除（Delete）を表す言葉です。&lt;/p>
&lt;p>&lt;a href="http://se-java-school.com/itstudy/database/intro_db_jdbc/sqltext_01.php">SQL&lt;/a>はデータベースを操作するための言語です。
MySQLの操作の最初のステップとして、SQLを使用してCRUDを実現してみましょう。&lt;/p>
&lt;p>CRUDはSQL構文では、以下のような形で対応しています。&lt;/p>
&lt;ul>
&lt;li>Create -&amp;gt; INSERT文&lt;/li>
&lt;li>Read -&amp;gt; SELECT文&lt;/li>
&lt;li>Update -&amp;gt; UPDATE文&lt;/li>
&lt;li>Delete -&amp;gt; DELETE文&lt;/li>
&lt;/ul>
&lt;p>この4つの構文に対応してコードを書いていきましょう。&lt;/p>
&lt;h2 id="readselect">接続テストとRead（SELECT文）&lt;/h2>
&lt;p>まずはNode.jsからMySQLへの接続テストをしつつ、データ表示のReadにあたるSELECT文を使います。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="http://www.dbonline.jp/mysql/select/index1.html">http://www.dbonline.jp/mysql/select/index1.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>app.jsを作成しましょう。&lt;/p>
&lt;pre>&lt;code>//app.js
'use strict'
const mysql = require('mysql');
const connection = mysql.createConnection({
host : 'hoge.hoge.com',
user : 'n0bisuke',
password : 'n0bipass',
database : 'nobidb'
});
//ここからMySQLアクセス
connection.connect();
let sql = 'select * from nobidb.test_user';
connection.query(sql, (err, rows, fields) =&amp;gt; {
if (err) throw err;
console.log('test_userテーブル: ', rows);
});
connection.end();
&lt;/code>&lt;/pre>&lt;p>7〜10行目について&lt;/p>
&lt;ul>
&lt;li>host: MySQLのホスト名です。仮にhoge.hoge.comを指定しています。&lt;/li>
&lt;li>user: MySQLに登録してあるユーザー名です。仮にn0bisukeを指定しています。&lt;/li>
&lt;li>password: MySQLに登録してあるパスワードです。仮にn0bipassを指定しています。&lt;/li>
&lt;li>database: MySQLで利用するDB名です。仮にnobidbを指定しています。&lt;/li>
&lt;/ul>
&lt;p>16行目がSQLです。&lt;/p>
&lt;p>SELECT文は「&lt;code>select カラム名 from DB名.テーブル名&lt;/code>」が基本になります。
全てのカラムを取得する場合は&lt;code>*&lt;/code>を指定します。&lt;/p>
&lt;p>16行目のSQL文は「&lt;code>nobidb&lt;/code>データベースの&lt;code>test_user&lt;/code>テーブルの全てのカラムの情報を取得する」という内容になります。&lt;/p>
&lt;p>それでは実行してみましょう。&lt;/p>
&lt;pre>&lt;code>$ node app.js
test_userテーブル: [ RowDataPacket { id: 11, name: 'n0bisuke', created: 2017-01-01T21:35:26.000Z } ]
&lt;/code>&lt;/pre>&lt;p>これで無事にNode.jsとMySQLの接続が確立され、予め登録していたtest_userテーブルの中身が表示（Read）されました。&lt;/p>
&lt;h2 id="createinsert">Create（INSERT文）&lt;/h2>
&lt;p>次にデータ作成のCreateにあたるINSERT文を使ってみましょう。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="http://www.dbonline.jp/mysql/insert/index1.html">http://www.dbonline.jp/mysql/insert/index1.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>app.jsの16行目を以下に書き換えましょう。&lt;/p>
&lt;pre>&lt;code>let sql = `insert into nobidb.test_user (name) values (&amp;quot;sugawara&amp;quot;)`;
&lt;/code>&lt;/pre>&lt;p>INSERT文の基本は「&lt;code>insert into DB名.テーブル名 (カラム名1, カラム名2) values (値, 値)&lt;/code>」という形になります。
今回の文では「&lt;code>nobidb&lt;/code>データベースの&lt;code>test_user&lt;/code>テーブルの&lt;code>name&lt;/code>カラムに&lt;code>sugawara&lt;/code>という文字列を入れてデータを作成する」という意味になります。&lt;/p>
&lt;p>それでは実行してみましょう。&lt;/p>
&lt;pre>&lt;code>$ node app.js
test_userテーブル: OkPacket {
fieldCount: 0,
affectedRows: 1,
insertId: 31,
serverStatus: 2,
warningCount: 0,
message: '',
protocol41: true,
changedRows: 0 }
&lt;/code>&lt;/pre>&lt;p>クライアントなどで確認してもしっかり行が追加されていることが分かります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/068/02.png" alt="">&lt;/p>
&lt;h2 id="updateupdate">Update（UPDATE文）&lt;/h2>
&lt;p>次にデータ更新のUpdateにあたるUPDATE文を使ってみましょう。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="http://www.dbonline.jp/mysql/insert/index7.html">http://www.dbonline.jp/mysql/insert/index7.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>app.jsの16行目を以下に書き換えましょう。&lt;/p>
&lt;pre>&lt;code>let sql = `update dsdb.test_user set name=&amp;quot;すがわら&amp;quot; where id = 31`;
&lt;/code>&lt;/pre>&lt;p>UPDATE文の基本は「&lt;code>update DB名.テーブル名 set カラム名1=更新内容1 カラム名2=更新内容2 where 条件&lt;/code>」という形になります。
今回の文では「&lt;code>nobidb&lt;/code>データベースの&lt;code>test_user&lt;/code>テーブルの、idが31の&lt;code>name&lt;/code>カラムを&lt;code>すがわら&lt;/code>という文字列にデータ更新する」という意味になります。&lt;/p>
&lt;p>それでは実行してみましょう。&lt;/p>
&lt;pre>&lt;code>$ node app.js
test_userテーブル: OkPacket {
fieldCount: 0,
affectedRows: 1,
insertId: 0,
serverStatus: 2,
warningCount: 0,
message: '(Rows matched: 1 Changed: 1 Warnings: 0',
protocol41: true,
changedRows: 1 }
&lt;/code>&lt;/pre>&lt;p>クライアントなどで確認してもid31の行のnameがすがわらに更新されているのが分かります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/068/03.png" alt="">&lt;/p>
&lt;h2 id="deletedelete">Delete（DELETE文）&lt;/h2>
&lt;p>最後にデータ削除のDeleteにあたるDELETE文を使ってみましょう。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="http://www.dbonline.jp/mysql/insert/index10.html">http://www.dbonline.jp/mysql/insert/index10.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>app.jsの16行目を以下に書き換えましょう。&lt;/p>
&lt;pre>&lt;code>let sql = `delete from dsdb.test_user where id = 31`;
&lt;/code>&lt;/pre>&lt;p>DELETE文の基本は「&lt;code>delete from DB名.テーブル名 where 条件&lt;/code>」という形になります。
今回の文では「&lt;code>nobidb&lt;/code>データベースの&lt;code>test_user&lt;/code>テーブルの、idが31の行を削除する」という意味になります。&lt;/p>
&lt;p>それでは実行してみましょう。&lt;/p>
&lt;pre>&lt;code>$ node app.js
test_userテーブル: OkPacket {
fieldCount: 0,
affectedRows: 1,
insertId: 0,
serverStatus: 2,
warningCount: 0,
message: '',
protocol41: true,
changedRows: 0 }
&lt;/code>&lt;/pre>&lt;p>クライアントなどで確認してもid31の行が削除されているのが分かります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/068/04.png" alt="">&lt;/p>
&lt;p>ここまでで、Node.jsからMySQLにアクセスしてCRUDをする操作の紹介をしました。&lt;/p>
&lt;h2 id="tips-node-mysql2">Tips: node-mysql2&lt;/h2>
&lt;p>&lt;a href="http://qiita.com/n0bisuke/items/4e59d02f90bb66451011">Node.jsからMySQL接続のメモ(とnode-mysql2)&lt;/a>にもあるように&lt;a href="https://github.com/sidorares/node-mysql2">node-mysql2&lt;/a>というモジュールもありますので、ベンチマークが気になり始めたら利用を試みるのも良いかもしれません。&lt;/p>
&lt;pre>&lt;code>$ npm i mysql2 --save
&lt;/code>&lt;/pre>&lt;p>でインストールして&lt;/p>
&lt;pre>&lt;code>const mysql = require('mysql');
&lt;/code>&lt;/pre>&lt;p>の読み込み箇所を&lt;/p>
&lt;pre>&lt;code>const mysql = require('mysql2');
&lt;/code>&lt;/pre>&lt;p>に修正するだけで使えるので移行も楽そうです。&lt;/p>
&lt;h2 id="heading">おわりに&lt;/h2>
&lt;p>Node.jsからMySQLにアクセスする方法を紹介しました。
基礎的な内容になるので、初めてチャレンジする方は参考にして下さい。&lt;/p>
&lt;p>SQL直書きだと脆弱性が&amp;hellip;&amp;hellip;とかの話はありそうですがそれはまた別の機会で書けたらと思います。&lt;/p>
&lt;p>それでは。&lt;/p></description></item></channel></rss>