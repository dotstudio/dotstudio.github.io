<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotstudio（ドットスタジオ） on dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/index.xml</link>
    <description>Recent content in dotstudio（ドットスタジオ） on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Thu, 10 Nov 2016 01:02:41 +0900</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>「IoT」とは</title>
      <link>https://dotstud.io/docs/iot/</link>
      <pubDate>Thu, 10 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/iot/</guid>
      
      <description>&lt;p&gt;※この項目は書きかけです。&lt;/p&gt;

&lt;p&gt;モノのインターネット（英語: Internet of Things, IoT）とは、様々な「モノ（物）」がインターネットに接続され（単に繋がるだけではなく、モノがインターネットのように繋がる）、
情報交換することにより相互に制御する仕組みである。それによる社会の実現も指す。「物のインターネット」と表記された例もある。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nefryの基礎</title>
      <link>https://dotstud.io/docs/nefry/</link>
      <pubDate>Tue, 19 Jul 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/nefry/</guid>
      
      <description>

&lt;p&gt;Nefryとは、&lt;a href=&#34;https://twitter.com/wamisnet&#34;&gt;wamisnet&lt;/a&gt;氏によって開発された小型のマイコンボードです。Wi-Fiさえあればすぐにネットワークに接続でき、IoTアプリケーションを製作する際のハードウェアプラットフォームとして非常に優秀な製品となっています。&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;Nefryは、「ESP8266」というマイコンモジュールを利用したボードです。ESP8266はWi-Fiに対応しており、ネットワークに無線接続できるモジュールとしてはとても優れていますが、そのままでは難易度の高いはんだ付けが必須となっていました。&lt;/p&gt;

&lt;p&gt;そこで、入出力関連はGPIOソケットと&lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove&lt;/a&gt;を備え、また電源も汎用的なUSBによるものとしたことで、ハードウェアの開発に一切の工具を不要としました。&lt;/p&gt;

&lt;p&gt;さらに手持ちのPCのWebブラウザから様々な設定ができ、プログラムの書き込みも無線で行えるなどといったソフトウェア面での簡単さもあり、特に初心者がIoTなプロトタイプを作りたいといった場面で強力なベースプラットフォームとなるような設計になっています。&lt;/p&gt;

&lt;h2 id=&#34;インターフェース&#34;&gt;インターフェース&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/97208/ba4a18a9-c793-bca0-5d3a-da47eea8ef71.png&#34; alt=&#34;Nefryの基板写真・各モジュールの説明入り&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;技術仕様&#34;&gt;技術仕様&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;メインチップ: ESP8266(ESP-WROOM-02)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wi-Fi 802.11b/g/n(2.4GHz帯)&lt;/li&gt;
&lt;li&gt;セキュリティ WPA2/WPA/WEP/AES/TKIP&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;フルカラーLED*1&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Groveモジュールを最大4個接続
(UART, I2C, デジタル, アナログ, 各1ソケット)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GPIOピンソケット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アナログ入力(A0)&lt;/li&gt;
&lt;li&gt;I2C(D0, D1)&lt;/li&gt;
&lt;li&gt;SPI(D2, D3, D4, D5)&lt;/li&gt;
&lt;li&gt;3.3Vソケット*1, GNDソケット * 2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ユーザーが利用可能なスイッチ(SW) * 1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;特徴&#34;&gt;特徴&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;モバイルバッテリに挿した状態で動かせるので、電源のない場所でも動作可能&lt;/li&gt;
&lt;li&gt;スイッチとフルカラーLEDがついているので、新たなパーツを買わなくても通信実験などができる&lt;/li&gt;
&lt;li&gt;Groveシステムに対応、センサ類もGPIOソケットに直接挿せるため、はんだ付けは一切必要なし&lt;/li&gt;
&lt;li&gt;上級者はパーツの後付けによってmicroSDカードを利用可能（スイッチとの同時利用不可）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3ステップでわかる開発方法&#34;&gt;3ステップでわかる開発方法&lt;/h2&gt;

&lt;p&gt;基本的な始め方は以下の記事で紹介されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://liginc.co.jp/298161&#34;&gt;さくっと生活を便利にする！FRISKサイズのIoT向けデバイス「Nefry」を使ってみよう【環境構築編】&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらでは簡単な開発の流れを説明します。&lt;/p&gt;

&lt;h3 id=&#34;1-arduino-ideとnefryライブラリをインストール&#34;&gt;1. Arduino IDEとNefryライブラリをインストール&lt;/h3&gt;

&lt;p&gt;Nefryは、「Arduino IDE」というArduino用の開発ソフトウェアで開発できます。Arduinoで開発をしたことがない方は、まずArduino IDEをダウンロード・インストールしましょう。次にIDE内からNefryライブラリをインストールします。&lt;/p&gt;

&lt;h3 id=&#34;2-nefryをusb電源に接続してブラウザからwi-fiセットアップ&#34;&gt;2. NefryをUSB電源に接続してブラウザからWi-Fiセットアップ&lt;/h3&gt;

&lt;p&gt;![モバイルバッテリにつないだNefryとPCのセットアップ画面]()&lt;/p&gt;

&lt;p&gt;NefryのUSBをモバイルバッテリやPCのUSBポートに接続しましょう。これは電源専用となっています。
電源が入ったらLEDが光るので、NefryのアクセスポイントをPCから探して接続します。&lt;/p&gt;

&lt;p&gt;Nefryアクセスポイントに接続したままWebブラウザから &lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt; を参照して、コンソールが表示されれば各設定を調整します。（詳しくは上記の記事を参照ください）&lt;/p&gt;

&lt;h3 id=&#34;3-arduino-ideで出力したバイナリファイルを転送&#34;&gt;3. Arduino IDEで出力したバイナリファイルを転送&lt;/h3&gt;

&lt;p&gt;Arduino IDEで打ち込んだプログラムをあらかじめバイナリファイルにコンパイルしておきます。
Web上のコンソールから当該のバイナリファイルを選択してアップロードしたら書き込みは完了です。&lt;/p&gt;

&lt;h2 id=&#34;開発例&#34;&gt;開発例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nefryとは何か？他のボードとどこが違うの？&lt;br /&gt;
&lt;a href=&#34;https://liginc.co.jp/236620&#34;&gt;自作したオリジナルIoTデバイス「Nefry」とインターネットを繋いでみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;まずはNefryを開発するための環境を整える！&lt;br /&gt;
&lt;a href=&#34;https://liginc.co.jp/298161&#34;&gt;さくっと生活を便利にする！FRISKサイズのIoT向けデバイス「Nefry」を使ってみよう【環境構築編】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ボタンを押したことをWebに反映させてみよう&lt;br /&gt;
&lt;a href=&#34;https://liginc.co.jp/282918&#34;&gt;NefryとMilkcocoaを連携させて、WebサイトにリアルタイムでPush通知してみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;スマホやTwitterに通知を送ってみる&lt;br /&gt;
&lt;a href=&#34;https://liginc.co.jp/263899&#34;&gt;Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;公式リンク&#34;&gt;公式リンク&lt;/h2&gt;

&lt;p&gt;購入先：&lt;a href=&#34;https://dotstud.io/projects/nefry-connect-internet/&#34;&gt;Nefry v1.0 | dotstudio&lt;/a&gt;&lt;br /&gt;
説明書：&lt;a href=&#34;https://wamisnet.github.io/Nefry_manual.pdf&#34;&gt;Nefry v2.0&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>電流と電圧</title>
      <link>https://dotstud.io/docs/aandv/</link>
      <pubDate>Thu, 10 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/aandv/</guid>
      
      <description>

&lt;h2 id=&#34;電圧-は-水圧-と同じようなもの&#34;&gt;「電圧」は、「水圧」と同じようなもの&lt;/h2&gt;

&lt;!--![(1)コンセントとか電池の画像？]()--&gt;

&lt;p&gt;「電圧」「電流」「抵抗」
日常生活で最もよく聞くのが、「電圧」だと思います。コンセントからとれる電気の「電圧」は100V(ボルト)、単3電池1本の「電圧」は1.5V(ボルト)、というのは多くの人が知っていることでしょう。&lt;/p&gt;

&lt;p&gt;この「電圧」として表される数値は電気そのものの強さではなく、 &lt;strong&gt;「電気を流そうとする力の強さ」&lt;/strong&gt; です。&lt;/p&gt;

&lt;!--![(2)アパートの階と蛇口から出る水の強さの違い]()--&gt;

&lt;p&gt;&lt;strong&gt;水道の話に置き換えてみると「電圧」は「水圧」に相当&lt;/strong&gt; します。例えば2階や3階建てのアパートのキッチンなどでは、どの部屋のも基本的には同じ蛇口が使われていますが、1階が最も水の流れ出る量が多く、上のほうの階に行くにつれて少なくなっていきます。（※注:給水塔が屋上になく、かつ古い建物の場合です）&lt;/p&gt;

&lt;p&gt;これは、 &lt;strong&gt;蛇口の大きさは同じであるが水圧が階数によって異なるため&lt;/strong&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;いわゆる-電気-とは-電流-のこと&#34;&gt;いわゆる「電気」とは、「電流」のこと&lt;/h2&gt;

&lt;p&gt;では「電流」は何なのかというと、先ほどの水道の話に置き換えると &lt;strong&gt;「電流」は水そのもの&lt;/strong&gt; となります。水圧の違いが水の流れ出る量に影響を与えるのと同様に、 &lt;strong&gt;電圧の違いは電流の量に影響を与えます。&lt;/strong&gt; 電圧が高いほど、電流量も多くなるわけです。&lt;/p&gt;

&lt;p&gt;我々人間は生きるために水が必要となります。例えばコップ1杯の水がほしいときに必要なのは「水圧」ではなく「水そのものの量」ですよね。電気を扱う機械も同じで、 &lt;strong&gt;動き続けるために必要なのは「電圧」ではなく「電流の量」です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;このことから、 &lt;strong&gt;「電気」の本質は「電流」のこと&lt;/strong&gt; だといえます。「電圧」はあくまで、「電流」を多く発生させるために必要な力だということですね。&lt;/p&gt;

&lt;h2 id=&#34;蛇口の口径を変えると-水量も変化する&#34;&gt;蛇口の口径を変えると、水量も変化する&lt;/h2&gt;

&lt;!--![(3)口径の大きい蛇口と小さい蛇口]()--&gt;

&lt;p&gt;さて、もしもあなたがアパートの上のほうの階に住んでいて、水圧が弱くて困っているとします。このときに水の量を増やす手段としてひとつ考えられるのは、 &lt;strong&gt;蛇口の径を大きくすること&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;電気においても同じで、もしも電圧が低ければ、 &lt;strong&gt;電流の通り道を太くしてやれば電圧を変えずに電流量を増やすことができます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この「電流の通り道」は、電子工作の世界では、主に「銅線」という銅でできた細い線のことをいいます。水と同様にこの線の太さなどで電流の流れ具合も変わるわけですが、このときの &lt;strong&gt;「電流の流れにくさ」を「抵抗」といいます。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;抵抗-は-交通渋滞-に似ている&#34;&gt;「抵抗」は「交通渋滞」に似ている&lt;/h2&gt;

&lt;!--![(4)道路の太さとクルマの量の図]()--&gt;

&lt;p&gt;例えば、クルマを運転して東京から名古屋に行く場合をイメージしてみましょう。道路幅が比較的広くて距離も短い「新東名高速道路」を使う場合と、道路幅が狭めで距離も長くなる「中央自動車道」では、どちらのほうがストレスがたまるでしょうか。ほとんどの場合は後者のほうが疲れやすく、時間もかかります。&lt;/p&gt;

&lt;p&gt;電気の場合もこれと同じで、 &lt;strong&gt;電流の流れ道は、幅が狭くて距離が長いほど電流が流れにくくなります。&lt;/strong&gt; これは &lt;strong&gt;「抵抗値が大きい」&lt;/strong&gt; と表現することができます。&lt;/p&gt;

&lt;!--![(5)直線な高速道路と、信号のある一般道路の比較の図]()--&gt;

&lt;p&gt;では東京から名古屋まで、高速道路を使わずに一般道路で行く場合も考えてみましょう。当然、一般道路は信号機が多数あったり、カーブがきつかったり、車線は一つしかなかったり、など、高速道路に比べると明らかに障害物が多いですね。これはもうどんな高速道路を使うよりも行きづらいことに疑いはありません。&lt;/p&gt;

&lt;p&gt;電気の場合は、通り道の幅や長さを変えたりせずとも、 &lt;strong&gt;その通り道の一部に電流の流れにくい「障害物」を入れることで「抵抗値」を大きくする&lt;/strong&gt; ことができます。このような処置がなされた電気の通り道となる部品のことを &lt;strong&gt;「抵抗器」&lt;/strong&gt; といいます。&lt;/p&gt;

&lt;h2 id=&#34;電圧-電流-抵抗-のそれぞれの関係&#34;&gt;電圧・電流・抵抗 のそれぞれの関係&lt;/h2&gt;

&lt;p&gt;以上のことから、「電圧」「電流」「抵抗」の3つには、次のような関係があることがわかっていただけたかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電圧が大きくなると、電流の量が増える&lt;/li&gt;
&lt;li&gt;抵抗が大きくなると、電流の量が減る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここで、電圧を記号E、電流を記号I、抵抗Rとしましょう。
するとこれら3つのあいだには次のような関係があります。&lt;/p&gt;

&lt;p&gt;I = E ÷ R&lt;/p&gt;

&lt;p&gt;この式は、 &lt;strong&gt;「オームの法則」&lt;/strong&gt; と呼ばれます。いわゆる「電気」は、「電流」のことであるというのは先述しました。&lt;/p&gt;

&lt;p&gt;つまり &lt;strong&gt;電気の強さは、電圧が大きいほど強く、抵抗が大きいほど弱くなる&lt;/strong&gt; ということになります。&lt;/p&gt;

&lt;h2 id=&#34;電子パーツは-電流-でうごく&#34;&gt;電子パーツは「電流」でうごく&lt;/h2&gt;

&lt;p&gt;さて、電子工作において、これら「電圧」「電流」「抵抗」を考えなければならない場面というのはどのようなときでしょうか。&lt;/p&gt;

&lt;!--![(6)電池とコンセントとLED等しいの図]()--&gt;

&lt;p&gt;先ほど、「電流」が「電気そのもの」ということは説明しました。つまり、電気で動くパーツは電流を基準に考えればよいわけです。（一部、電圧駆動というパーツも存在します）&lt;/p&gt;

&lt;p&gt;例えば、あるLEDを光らせたいとき、20mA（ミリアンペア）という量の電流が必要であるとします。この数値はパーツを買ったときに「定格電流」として表示されているのでチェックしておきましょう。&lt;/p&gt;

&lt;h3 id=&#34;電池でledを光らせてみよう&#34;&gt;電池でLEDを光らせてみよう&lt;/h3&gt;

&lt;!--![(7)20mAのLEDを光らせる]()--&gt;

&lt;p&gt;電源として用意できるのは乾電池やコンセントからの電気などですが、その電気に関する情報として知り得ることができるのは「電圧」のみです。&lt;/p&gt;

&lt;p&gt;例えば、乾電池4本（合計6V）で定格20mAのLEDを光らせる回路を作るとしましょう。この回路では、LEDの両端に6Vという「電気の圧力」がかかっていますが、実際に流れる電気である「電流」はどれほどになるのかわかりません。&lt;/p&gt;

&lt;!--![(8)上の回路図に抵抗を追加]()--&gt;

&lt;p&gt;そこで、LEDのどちらか側に「抵抗器」を置くと、もしも抵抗値がわかっていれば、その抵抗器から流れ出る電流はどれぐらいになるか計算することができます。その電流値が20mAで、LEDに流れ込むようにしてあげればうまく点灯しそうですよね？&lt;/p&gt;

&lt;p&gt;このとき「オームの法則」を利用して、 &lt;strong&gt;与えられた電圧から必要な電流を流せるだけの抵抗値を求めます。&lt;/strong&gt; すなわち、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;20mA = 6V ÷ R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;が成り立つようなRの値の抵抗器を、LEDの前か後に置いてあげれば良いわけです。&lt;/p&gt;

&lt;p&gt;ここで、mA(ミリアンペア)のm(ミリ)は、1000分の1を表す接頭辞です。これを考慮してRについて解くと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;R = 6V ÷ (20 × 0.001) = 300
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。また、抵抗値の単位はΩ(オーム)といいます。よって、乾電池4本6Vで20mA駆動のLED1個を光らせたいときは、「300Ωの抵抗が必要」となります。&lt;/p&gt;

&lt;h3 id=&#34;コンセントでもledを光らせてみよう&#34;&gt;コンセントでもLEDを光らせてみよう&lt;/h3&gt;

&lt;p&gt;今度はコンセントからの電気、100Vの電圧でLEDを光らせることを考えてみましょう。（ここでは、簡単のため直流100Vとして話をすすめます）&lt;/p&gt;

&lt;!--![(9)コンセントで20mAのLEDを光らせる]()--&gt;

&lt;p&gt;先ほどの乾電池の電圧6Vが100Vへと大幅に大きくなりました。この場合も、オームの法則を使って必要な抵抗器の値を求めてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;R = 100V ÷ (20 × 0.001) = 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5000Ω、ですね。ほとんどの場合は5000Ωとは言わず、1000を表す接頭辞のk(キロ)を用いて5kΩ(キロオーム)と表記されます。よって、5kΩの抵抗器を入れれば、コンセントからの100Vという大きな電圧でも同じLEDを光らせることが可能なのです。&lt;/p&gt;

&lt;p&gt;しかし実際には、電子工作でよく使われるような小さな抵抗器では、「定格電力」の値を大きくオーバーして焼き切れてしまうため、大電力用の大きな抵抗器を使う必要があります。これは後述する、電子パーツの「消費電力」が関係しています。&lt;/p&gt;

&lt;h2 id=&#34;どんなところにも抵抗は存在する&#34;&gt;どんなところにも抵抗は存在する&lt;/h2&gt;

&lt;p&gt;もしも抵抗器がない回路を作ると、電流はどれぐらい流れるのでしょうか？　抵抗器がもし無かったとしても、回路を構成する銅線・LED・電池に至るまで、電子パーツはすべて「抵抗値」を持っています。ここでオームの法則を考えてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I = E ÷ R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、回路全体の抵抗値がRだったとします。このRが限りなく0に近づくとすると、電流Iは電圧Eの値に関係なく、無限に上昇していきます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nefryの関数</title>
      <link>https://dotstud.io/docs/nefry-func/</link>
      <pubDate>Tue, 19 Jul 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/nefry-func/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>回路図</title>
      <link>https://dotstud.io/docs/circuit/</link>
      <pubDate>Sat, 12 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/circuit/</guid>
      
      <description>

&lt;p&gt;回路図とは、電子部品同士をどのように繋ぐのか図解したものです。&lt;/p&gt;

&lt;p&gt;回路図があることで、自分が見たときはもちろん他の人に伝える時にも &lt;strong&gt;間違えることなく電子回路を組み立てる&lt;/strong&gt; ことができます。&lt;/p&gt;

&lt;h2 id=&#34;回路図をみてみよう&#34;&gt;回路図をみてみよう&lt;/h2&gt;

&lt;h3 id=&#34;一般的な回路図&#34;&gt;一般的な回路図&lt;/h3&gt;

&lt;p&gt;回路図にもいくつか種類があります。下記のような、線と簡単な図形で描かれたシンプルなものが一般的です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/circuit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このような回路図を読むことができると、インターネット上にある様々な回路を組むことができます。
しかし、事前知識なしに読むのは難しいです。&lt;/p&gt;

&lt;p&gt;上のような回路図を読みたい場合、詳しく説明してくれるサイトもあるのでそちらを参照してください。&lt;/p&gt;

&lt;h3 id=&#34;回路図作成ソフト-fritzing&#34;&gt;回路図作成ソフト『Fritzing』&lt;/h3&gt;

&lt;p&gt;そこで今回は、『Fritzing』と呼ばれる回路図作成ソフトの回路図を見てみようと思います。&lt;/p&gt;

&lt;p&gt;このソフトで描かれた回路図の特徴は、&lt;strong&gt;電子部品をイラストで表してくれるところ&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/illust.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ボタンを押すとLEDが光る回路を組んでみました。実は、&lt;strong&gt;上の回路図とこのイラストの回路図は同じことを表しています。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;多くの場合は前述のシンプルな回路図で表記されるため、読める方がよいとは思います。&lt;/p&gt;

&lt;p&gt;「この図形ってなんだっけ？」という時にはFritzingを使って検索してみるとよいでしょう。&lt;/p&gt;

&lt;h2 id=&#34;回路図でよくみる記号&#34;&gt;回路図でよくみる記号&lt;/h2&gt;

&lt;h3 id=&#34;電源&#34;&gt;電源&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/battery.png&#34; alt=&#34;&#34; /&gt;
電池やUSBなどから供給される電気の供給源です。プラスとマイナスがあり、横に２本線があるうち長い方がプラス、短い方がマイナスとなります。&lt;/p&gt;

&lt;h3 id=&#34;コンデンサ&#34;&gt;コンデンサ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/condenser.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;コンデンサは電気を蓄えたり放出したりする電子部品です。プラス・マイナスの極性が決まっているものもあるので注意が必要です。&lt;/p&gt;

&lt;h3 id=&#34;抵抗&#34;&gt;抵抗&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/r.png&#34; alt=&#34;&#34; /&gt;
抵抗は電流の流れを抑えることができます。LEDと一緒に使うことで、LEDが焼けることを保護することができます。&lt;/p&gt;

&lt;h3 id=&#34;スイッチ&#34;&gt;スイッチ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/switch.png&#34; alt=&#34;&#34; /&gt;
オン、オフを切り替えすることができるものです。スイッチにも種類があるので、どのようなことがしたいかでスイッチを変えるとよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;led&#34;&gt;LED&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/led.png&#34; alt=&#34;&#34; /&gt;
LEDは小さい電力で操作でき、強く光らせることができます。明るいものやマトリックス状になったものなどがあります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>消費電力</title>
      <link>https://dotstud.io/docs/consumption/</link>
      <pubDate>Sun, 13 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/consumption/</guid>
      
      <description>

&lt;p&gt;消費電力とは、「電気回路で消費される電力、つまり &lt;strong&gt;電気回路を動かすために必要な電気の量&lt;/strong&gt; を指します。&lt;/p&gt;

&lt;h2 id=&#34;消費電力の計算&#34;&gt;消費電力の計算&lt;/h2&gt;

&lt;p&gt;消費される電気の量は、以下の式で表すことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;電圧[V:ボルト] × 電流[A] = 消費電力[W:ワット]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;電圧が「電気を発生させる力の大きさ」、電流が「流れる電気そのもの」です。&lt;/p&gt;

&lt;p&gt;詳しくは「&lt;a href=&#34;https://dotstud.io/docs/aandv/&#34;&gt;電流と電圧&lt;/a&gt;」の項目を参照してください。&lt;/p&gt;

&lt;p&gt;白熱電球を例に考えてみましょう。電球の表面に「100V 60W」という表記がある場合、この電球は &lt;strong&gt;100[V]の電圧をかけたときに60[W]の電力を消費する&lt;/strong&gt; ことを表します。&lt;/p&gt;

&lt;h2 id=&#34;消費電力量&#34;&gt;消費電力量&lt;/h2&gt;

&lt;p&gt;単位時間あたりに消費される電気の量は「消費電力量」と呼ばれ、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;電力[W] × 時間[h] = 消費電力量[Wh:ワットアワー]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で表すことができます。&lt;/p&gt;

&lt;p&gt;先程の白熱電球を2時間点灯させた場合の消費電力量は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;60[W] × 2[h] = 120[Wh]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;h2 id=&#34;消費電力が大きい-たくさん電気を使う&#34;&gt;消費電力が大きい＝たくさん電気を使う&lt;/h2&gt;

&lt;p&gt;消費電力が大きいということは、それだけ多くの電気を使うということです。&lt;/p&gt;

&lt;p&gt;乾電池やモバイルバッテリーは持っている電気の量が少ないので、消費電力の大きい電子部品を動かす場合は &lt;strong&gt;回路全体の稼働時間が短くなってしまう&lt;/strong&gt; ことに注意してください。&lt;/p&gt;

&lt;p&gt;Arduino等のマイコンボードを省電力で使いたい場合、マイコンボードの &lt;strong&gt;SLEEP機能&lt;/strong&gt; が便利です。これはマイコンボードの電源は保ったまま必要な時だけ復帰する仕組みで、極力電力消費を抑えることができます。&lt;/p&gt;

&lt;p&gt;マイコンボードの形式や設定方法にもよりますが、乾電池1本で数ヶ月〜年単位で電力を供給することが可能になります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>デジタルとアナログ</title>
      <link>https://dotstud.io/docs/digitalanalog/</link>
      <pubDate>Sun, 13 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/digitalanalog/</guid>
      
      <description>

&lt;p&gt;デジタル、アナログと聞いて何が思い浮かぶでしょうか？&lt;/p&gt;

&lt;p&gt;テレビの種類にも使われますが、今回は電気的な違いについて説明していきます。&lt;/p&gt;

&lt;h2 id=&#34;デジタルとアナログの違いって&#34;&gt;デジタルとアナログの違いって？&lt;/h2&gt;

&lt;p&gt;一番の違いは、電圧の変化をグラフにしたときに分かります。&lt;/p&gt;

&lt;p&gt;もともと以下のようなアナログの信号があるとします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/digitalanalog/analog.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アナログの信号をデジタルにするとこのようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/digitalanalog/digital.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;見比べると、デジタルはある（1）ない（0）のどちらかで表現されるため、シンプルなデータになっています。&lt;/p&gt;

&lt;p&gt;これによってあるかないかはハッキリと見て分かるのですが、 &lt;strong&gt;もともとの値がどれくらい大きかったのか、小さかったのかは分からなくなってしまいました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;逆に、アナログはどれだけ大きい・小さいかは分かるのですが、 &lt;strong&gt;データは大きくなります。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;マイコンボードでみるデジタル-アナログ&#34;&gt;マイコンボードでみるデジタル、アナログ&lt;/h2&gt;

&lt;p&gt;どのような違いがあるか分かったところで、マイコンボードでその値を取得する方法を説明します。&lt;/p&gt;

&lt;p&gt;マイコンボードの種類により詳細な手順は変わるので注意してください。今回のプログラムについての説明は全て、Arduino Unoに基づいたものとします。&lt;/p&gt;

&lt;p&gt;デジタル、アナログの入出力については、指定されたピンでやりとりします。&lt;/p&gt;

&lt;h2 id=&#34;デジタルの入出力&#34;&gt;デジタルの入出力&lt;/h2&gt;

&lt;h3 id=&#34;入力&#34;&gt;入力&lt;/h3&gt;

&lt;p&gt;Arduino Unoでは、digitalRead関数を使ってある（HIGH）ない（LOW）を取得できます。&lt;/p&gt;

&lt;p&gt;このときに注意しなくてはいけないのが閾値の値です。&lt;/p&gt;

&lt;p&gt;Arduino Unoの場合は閾値は2.5vです。2.5vを超えるとHIGHになり、それ以下はLOWとなります。&lt;/p&gt;

&lt;p&gt;この閾値はマイコンボードにより異なるので注意が必要です。&lt;/p&gt;

&lt;p&gt;スイッチなどを付けて、押された・押されてないという状態を取得するときに、ノイズによって押していないのに押したと誤検知することがあります。&lt;/p&gt;

&lt;p&gt;その場合は、プルアップという方法を利用することで誤検知を減らすことができます。&lt;/p&gt;

&lt;h3 id=&#34;出力&#34;&gt;出力&lt;/h3&gt;

&lt;p&gt;Arduino Unoでは、digitalWrite関数を使ってある（HIGH）ない（LOW）を出力できます。&lt;/p&gt;

&lt;p&gt;HIGHのときに5vが出力され、LOWのとき0vが出力されます。&lt;/p&gt;

&lt;p&gt;こちらもマイコンボードによって異なるので注意してください。&lt;/p&gt;

&lt;h2 id=&#34;アナログの入出力&#34;&gt;アナログの入出力&lt;/h2&gt;

&lt;h3 id=&#34;入力-1&#34;&gt;入力&lt;/h3&gt;

&lt;p&gt;Arduino Unoでは、analogRead関数により0（0v）-1023（5v）の1024段階で値を取得できます。&lt;/p&gt;

&lt;p&gt;入力する電圧が5vを超える場合、抵抗で分圧をすることで入力することができます。&lt;/p&gt;

&lt;p&gt;分圧については、計算してくれるサイトなどもあるので参考にしてください。&lt;/p&gt;

&lt;h3 id=&#34;出力-1&#34;&gt;出力&lt;/h3&gt;

&lt;p&gt;Arduino Unoではアナログ出力はできません。&lt;/p&gt;

&lt;p&gt;しかしPWMと呼ばれる方式により、擬似的にアナログ出力をすることができます。　&lt;/p&gt;

&lt;p&gt;PWMの出力は、analogWrite関数により可能となります。0（0v）-255（5v）の256段階で指定することが可能です。&lt;/p&gt;

&lt;p&gt;それによりLEDをふんわり点けることなどができるようになります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>直流と交流</title>
      <link>https://dotstud.io/docs/dirandalt/</link>
      <pubDate>Mon, 14 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/dirandalt/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>マイコンボード</title>
      <link>https://dotstud.io/docs/microcon/</link>
      <pubDate>Tue, 15 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/microcon/</guid>
      
      <description>

&lt;p&gt;マイコンボードとは、マイクロコンピュータ（マイコン）と入出力回路などの周辺回路を1枚の基板に乗せ、手軽にマイコンを利用するための回路です。&lt;/p&gt;

&lt;p&gt;一昔前は、主に小型・低価格のマイコンを積んだものを指していました。&lt;/p&gt;

&lt;p&gt;最近では広義な意味でのマイコンボードとして、ArduinoやRaspberry Piなど、スマートフォンと同様の高性能なCPUを積んでいるものを含みます。&lt;/p&gt;

&lt;h2 id=&#34;構成要素&#34;&gt;構成要素&lt;/h2&gt;

&lt;p&gt;ボードによって異なりますが、マイコンボードにはマイコンを動かすための最低限の機能が備わっています。&lt;/p&gt;

&lt;h3 id=&#34;cpu&#34;&gt;CPU&lt;/h3&gt;

&lt;p&gt;プログラムを動かす部分です。&lt;/p&gt;

&lt;p&gt;入出力PINやメモリなどを１個のICに集積したマイコンを使用している物が主でしたが、最近では高性能なCPUを使用しているボードも多くあります。&lt;/p&gt;

&lt;h3 id=&#34;メモリ&#34;&gt;メモリ&lt;/h3&gt;

&lt;h4 id=&#34;rom-read-only-memory&#34;&gt;ROM（Read Only Memory）&lt;/h4&gt;

&lt;p&gt;読み込み専用のメモリです。プログラムの格納や、プログラム内の定数を保存しておくのに利用され、 &lt;strong&gt;電源が切れてもデータは残ります。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;ram-random-access-memory&#34;&gt;RAM（Random Access Memory）&lt;/h4&gt;

&lt;p&gt;読み書きが可能なメモリです。プログラムの変数を格納するのに利用され、 &lt;strong&gt;電源が切れるとデータは消えてしまいます。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;周辺回路&#34;&gt;周辺回路&lt;/h3&gt;

&lt;p&gt;電源やクロック回路など、CPUと組み合わせて利用する回路のことです。&lt;/p&gt;

&lt;p&gt;アナログ-デジタル変換やデジタル-アナログ変換、クロック、UARTなどのよく利用する機能はCPUに内蔵されている事が多く、「内蔵ペリフェラル」と呼ばれます。&lt;/p&gt;

&lt;h3 id=&#34;ネットワークインターフェース&#34;&gt;ネットワークインターフェース&lt;/h3&gt;

&lt;p&gt;マイコンボードが、外部の回路や他の機器との通信を行うためのインターフェースです。&lt;/p&gt;

&lt;p&gt;仕組みや構造はそれぞれの章を参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/docs/serial/&#34;&gt;シリアル通信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;USBケーブル [WIP]&lt;/li&gt;
&lt;li&gt;イーサネット [WIP]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gpio&#34;&gt;GPIO&lt;/h3&gt;

&lt;p&gt;センサやLEDなどとCPU間の信号のやり取りを行うための、汎用的な入出力ピンのことです。&lt;/p&gt;

&lt;p&gt;マイコンボードによっては、１つのピンにGPIOと内蔵ペリフェラルの複数の機能を割り当てていることがあります。&lt;/p&gt;

&lt;p&gt;排他的な利用となりピン数がたりなくなることもあるため、 &lt;strong&gt;実現したい機能に応じたマイコンボードを用意することが大切です。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;マイコンボードの分類&#34;&gt;マイコンボードの分類&lt;/h2&gt;

&lt;h3 id=&#34;安価でosが乗らない単機能なマイコンボード&#34;&gt;安価でOSが乗らない単機能なマイコンボード&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;例：Arduino、mbed、ESPer、Nefry、WioNodeなど&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;安いCPU（マイコン）を搭載しており、OSは乗っておらず、独自言語でプログラミングをします。&lt;/p&gt;

&lt;p&gt;電源を入れるとマイコンに書き込まれているプログラムが自動的に起動します。&lt;/p&gt;

&lt;p&gt;シリアル通信は簡単ですが、TCP/IPやUDP/IPといったIP通信は難易度が上がります。&lt;/p&gt;

&lt;p&gt;しかし最近では、ESPerというWi-Fiモジュールが出て無線LANやBluetoothが容易に扱えるため、人気になっています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;電飾系やモータを回すといった単機能な用途&lt;/strong&gt; に向いています。&lt;/p&gt;

&lt;h3 id=&#34;比較的高価でosが乗る多機能なマイコンボード&#34;&gt;比較的高価でOSが乗る多機能なマイコンボード&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;例：Raspberry Pi、DragonBoardなど&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;高機能なCPUを搭載しており、LinuxやWindows 10 IoT Coreなど様々なOSが動きます。&lt;/p&gt;

&lt;p&gt;「シングルボードコンピュータ」とも呼ばれることもあります。&lt;/p&gt;

&lt;p&gt;ディスプレイ出力、USBや無線LANといったリッチな外部通信I/Fを備えています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;複雑で多機能な用途&lt;/strong&gt; に向いています。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;dotstudioで販売しているマイコンボードなどの使い方は、それぞれの章を参照してみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/docs/nefry/&#34;&gt;Nefry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WIO Node [WIP]&lt;/li&gt;
&lt;li&gt;Seeeduino v4.2 [WIP]&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>抵抗</title>
      <link>https://dotstud.io/docs/r/</link>
      <pubDate>Fri, 11 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/r/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>センサー</title>
      <link>https://dotstud.io/docs/sensor/</link>
      <pubDate>Sat, 19 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/sensor/</guid>
      
      <description>

&lt;p&gt;センサーとは、人の目や耳などの代わりに、機械が周りの状況を取得するために使われる部品です。&lt;/p&gt;

&lt;p&gt;音量を取得するものや明るさを取得するものなどその種類は多種多様で、人が感じられるものはもちろん、 &lt;strong&gt;人の感知することのできない微弱な信号も取得することができます。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;どんなセンサーがあるのか&#34;&gt;どんなセンサーがあるのか&lt;/h2&gt;

&lt;p&gt;先ほど例に挙げた音量や明るさを取得するものに加えて、手のジェスチャーを取得するものやモノの色を取得するものなど様々です。&lt;/p&gt;

&lt;p&gt;センサーによっては簡単に入手できないものもあるので、今回はネットや秋葉原で電子部品を販売している秋月電子通商さんで扱っているものを基準にリストにまとめてみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;距離センサ&lt;/li&gt;
&lt;li&gt;方位センサ&lt;/li&gt;
&lt;li&gt;アルコールセンサ&lt;/li&gt;
&lt;li&gt;角度センサ&lt;/li&gt;
&lt;li&gt;圧力センサ&lt;/li&gt;
&lt;li&gt;放射線センサ&lt;/li&gt;
&lt;li&gt;加速度センサ&lt;/li&gt;
&lt;li&gt;カラーセンサ&lt;/li&gt;
&lt;li&gt;明るさセンサ&lt;/li&gt;
&lt;li&gt;温度センサ&lt;/li&gt;
&lt;li&gt;湿度センサ&lt;/li&gt;
&lt;li&gt;ジェスチャセンサ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;秋月電子通商さんで扱っているセンサーはまだまだありますが、目立ったセンサーだけでもこれだけあります。&lt;/p&gt;

&lt;p&gt;一般的には、これらのセンサーからの「入力」を使って他のモノを制御します。&lt;/p&gt;

&lt;h2 id=&#34;センサーの選び方&#34;&gt;センサーの選び方&lt;/h2&gt;

&lt;p&gt;次にセンサーの選び方について簡単に説明します。&lt;/p&gt;

&lt;p&gt;まずは「どのようなことを取得したいか」をはっきりとさせ、目的の種類のセンサーを探します。&lt;/p&gt;

&lt;h3 id=&#34;目的を明確にする&#34;&gt;目的を明確にする&lt;/h3&gt;

&lt;p&gt;例として、『大体100cm以内に人やモノが来たことを発見したい』というケースを想定して説明します。&lt;/p&gt;

&lt;p&gt;距離を測る目的のため、今回は距離センサのページを開きます。&lt;/p&gt;

&lt;p&gt;距離センサと一口に言っても、80cmまでしかはかれないものや、5.5mまではかれるものなど様々です。&lt;/p&gt;

&lt;p&gt;この中から今回の目的に向いたものを選んでみましょう。&lt;/p&gt;

&lt;h3 id=&#34;適切な性能のセンサーを見つける&#34;&gt;適切な性能のセンサーを見つける&lt;/h3&gt;

&lt;p&gt;ページを開いた時に見るのが「データシート」と呼ばれるセンサーの性能が記載されている書類です。&lt;/p&gt;

&lt;p&gt;データが詳細に書いてありこれを読むのが一番よいのですが、内容を理解するのはなかなか難しいです。&lt;/p&gt;

&lt;p&gt;データシートを読めるようになることは大切ですが、初心者の方は以下の方法を試してみてください。&lt;/p&gt;

&lt;h4 id=&#34;先例を見つける&#34;&gt;先例を見つける&lt;/h4&gt;

&lt;p&gt;まず秋月電子通商さんのセンサーごとのページに書かれている概要を読み、実現出来そうなセンサーにだいたいの目星を付け、「センサーの名前（例えばGP2Y0A02YK） ＋ 使いたいボード（例えばArduino）」で検索をかけてみてください。&lt;/p&gt;

&lt;p&gt;同様の実装をしたサンプルプログラムや回路図が記載されているブログなどのサイトが見つかると思うので、その内容を読み問題なく使えそうであればよいと思います。&lt;/p&gt;

&lt;p&gt;全く見つからない場合はプログラムを１から作らなくてはいけないので、扱えるようにするまでがなかなか大変ですので最初のうちはオススメできません。&lt;/p&gt;

&lt;h4 id=&#34;自力で実装する&#34;&gt;自力で実装する&lt;/h4&gt;

&lt;p&gt;どうしても実現したい場合は、先ほどのデータシートをよく読み、プログラムや回路を作成することで扱えるようになります。&lt;/p&gt;

&lt;p&gt;少し難易度は上がるので、興味があれば試してみるのも面白いと思います。&lt;/p&gt;

&lt;h3 id=&#34;要件やコストを確認する&#34;&gt;要件やコストを確認する&lt;/h3&gt;

&lt;p&gt;上記の選び方で、秋月電子通商で扱っている距離センサーの中から、シャープ製の「GP2Y0A02YK」という型番のセンサをえらんでみました。&lt;/p&gt;

&lt;p&gt;距離も0.2mから1.5mまで読めますし、検索すると複数のサイトが見つかりますので問題なく作成出来るでしょう。&lt;/p&gt;

&lt;p&gt;他にも同様のセンサーはありますが、このセンサーは距離の精度やお値段も安いのでこれでいいでしょう。&lt;/p&gt;

&lt;p&gt;距離に精度が必要であれば別のセンサーを使うとよいと思います。&lt;/p&gt;

&lt;h2 id=&#34;センサーとマイコンボードのつなぎ方&#34;&gt;センサーとマイコンボードのつなぎ方&lt;/h2&gt;

&lt;p&gt;センサーを選んだあとは、通常センサーとマイコンボード（センサーのデータを処理するところ）を繋げてプログラムを書き、他のモノと連携させていきます。&lt;/p&gt;

&lt;p&gt;どのように繋げることができるのか、簡単に紹介していきます。&lt;/p&gt;

&lt;h3 id=&#34;マイコンボードの役割&#34;&gt;マイコンボードの役割&lt;/h3&gt;

&lt;p&gt;なぜマイコンボードが必要かと言うと、様々なセンサーで取得した値は電気信号のため、何らかの形で私たちが分かるようにしないと扱うことができません。&lt;/p&gt;

&lt;p&gt;オススメはArduinoとよばれるマイコンボードです。比較的単機能で扱いやすく、本やインターネット上の情報が多いので困ったときにも調べやすいです。&lt;/p&gt;

&lt;p&gt;センサーからは電気信号が出ているといいましたが、アナログの値で出力されているものや、ある規則に沿って通信するものもあるので、順に説明していきます。&lt;/p&gt;

&lt;h3 id=&#34;アナログ&#34;&gt;アナログ&lt;/h3&gt;

&lt;p&gt;シンプルな圧力センサや明るさセンサでよくみられるものです。&lt;/p&gt;

&lt;p&gt;電圧が徐々に変化するため、この情報を取得するためには指定されたアナログ入力ピンに接続することが前提になります。&lt;/p&gt;

&lt;h3 id=&#34;デジタル&#34;&gt;デジタル&lt;/h3&gt;

&lt;p&gt;HIGH or LOWの2つの状態を持つセンサです。&lt;/p&gt;

&lt;p&gt;スイッチや人感センサなどで見られます。この情報はデジタル入力ピンで取得することができます。&lt;/p&gt;

&lt;h3 id=&#34;i2c-spiなど&#34;&gt;I2C, SPIなど&lt;/h3&gt;

&lt;p&gt;特定の規格で通信できるセンサーで、規格によっては複数のセンサーを少ない制御線で制御出来たり、アナログのセンサーに比べて明確な数値で値を入力出来たりなどのメリットがあります。&lt;/p&gt;

&lt;p&gt;プログラムが少し複雑になるため、センサーごとにライブラリーが出回っていることが多いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>シリアル通信</title>
      <link>https://dotstud.io/docs/serial/</link>
      <pubDate>Sun, 20 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/serial/</guid>
      
      <description>

&lt;p&gt;シリアル通信とは、一度に1ビットずつ逐次的にデータを送ることを指します。
シリアル（serial）は、 &lt;strong&gt;「直列・連続した」&lt;/strong&gt; という意味です。&lt;/p&gt;

&lt;h2 id=&#34;シリアル通信を用いたアーキテクチャ&#34;&gt;シリアル通信を用いたアーキテクチャ&lt;/h2&gt;

&lt;p&gt;一般的にも多く普及しているUSBをはじめ、有線LANの規格であるイーサネットや、電子楽器の制御に用いられるMIDI、センサー系の通信規格であるI2Cなど、多くの仕組みで採用されています。&lt;/p&gt;

&lt;h2 id=&#34;シリアル通信のメリット&#34;&gt;シリアル通信のメリット&lt;/h2&gt;

&lt;p&gt;バイト単位（=8ビット）を一度に送る「パラレル通信」に比べて電線が少なくて済むため、 &lt;strong&gt;シンプルな仕組みで通信を行うことができます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;特に、組み込み系のマイコンボードや小さいセンサーなど、省スペースな仕組みが求められる場合は、使用する端子の少ないシリアル通信の仕組みが適しています。&lt;/p&gt;

&lt;h2 id=&#34;シリアル通信の仕組み&#34;&gt;シリアル通信の仕組み&lt;/h2&gt;

&lt;p&gt;アルファベットの「A」をシリアル通信でやり取りする場合を考えてみましょう。&lt;/p&gt;

&lt;p&gt;「A」はASCIIコードで「0x41」ですが、これをシリアル通信で送信する場合は、「0100 0001」という2進数の文字列になります。&lt;/p&gt;

&lt;h3 id=&#34;01-スタートビット-ストップビット&#34;&gt;01.スタートビット / ストップビット&lt;/h3&gt;

&lt;p&gt;データの前と後にはそれぞれ &lt;strong&gt;「スタートビット」&lt;/strong&gt; &lt;strong&gt;「ストップビット」&lt;/strong&gt; と呼ばれる識別情報が付与されます。&lt;/p&gt;

&lt;p&gt;データを受信する側は、スタートビットを認識することでデータの始まりを認識し、ストップビットを認識することでデータの終わりを認識することができます。&lt;/p&gt;

&lt;p&gt;スタートビットは「0」で、ストップビットは「1」です。&lt;/p&gt;

&lt;p&gt;これらを「A」の2進数データ「0100 0001」に付与した場合、以下のような文字列になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;（スタートビット→）0（データ→）0100 0001（ストップビット→）111...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;02-パリティビット&#34;&gt;02.パリティビット&lt;/h3&gt;

&lt;p&gt;データが正常に送られたかどうかを検査するために付与されるビットを &lt;strong&gt;「パリティビット」&lt;/strong&gt; と呼びます。&lt;/p&gt;

&lt;p&gt;パリティには、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;偶数パリティ&lt;/li&gt;
&lt;li&gt;奇数パリティ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つの方式があります。2進数のデータの「1」を偶数個にするのが偶数パリティ、奇数にするのが奇数パリティです。&lt;/p&gt;

&lt;p&gt;偶数パリティで先程のデータを送信する場合、以下のような文字列になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;（スタートビット→）0（データ→）0100 0001 （偶数パリティビット→）0（ストップビット→）111...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「0100 0001」に含まれる「1」の個数は2つなので、既に偶数です。そのため偶数パリティビットは「0」となります。&lt;/p&gt;

&lt;h3 id=&#34;03-ボーレート&#34;&gt;03.ボーレート&lt;/h3&gt;

&lt;p&gt;シリアル通信では、1秒あたり何ビットのデータを送るかという単位（bps: bit-per-second）で通信速度を表します。これを、 &lt;strong&gt;「ボーレート」&lt;/strong&gt; と呼びます。&lt;/p&gt;

&lt;p&gt;（厳密に、ボーレートとは「1秒間に変調・復調できる回数」を示しますが、ここでは便宜上「ボーレート=bps」という定義で記載します。）&lt;/p&gt;

&lt;p&gt;送信側と受信側でボーレートを合わせておくことで、適切に値を得ることができます。Arduino等のマイコンでシリアル通信を行う場合、「9600bps」を指定することが多いようです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブレッドボード</title>
      <link>https://dotstud.io/docs/breadboard/</link>
      <pubDate>Fri, 11 Nov 2016 03:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/breadboard/</guid>
      
      <description>

&lt;p&gt;ブレッドボードとは、素子を差し込むだけで回路を組み立てられる部品です。ハンダなどを利用して基板と素子を溶接することなく回路を試すことができます。&lt;/p&gt;

&lt;!-- ![基板の写真]() --&gt;

&lt;p&gt;通常、ブレッドボード上で回路を組み立てて想定通りに動くことを確かめてから、ユニバーサル基板やプリント基板などを作成します。&lt;/p&gt;

&lt;h2 id=&#34;構造&#34;&gt;構造&lt;/h2&gt;

&lt;!-- ![構造の絵]() --&gt;

&lt;p&gt;たくさんの穴が空いており、中心に深い溝があります。また、製品によっては英字や数字が書かれていたり、横に赤と青のラインが書かれたものもあります。&lt;/p&gt;

&lt;p&gt;溝を中心に左右に伸びるライン方向（行列で言うところの&amp;rdquo;行&amp;rdquo;方向、数字の書かれている方向）は電気的に繋がっています。深い溝と平行なライン（行列で言うところの&amp;rdquo;列&amp;rdquo;方向、英字が書かれている方向）や、深い溝をまたいだ行は電気は継っていません。スイッチやマイコンボードなど、電気的に継ってしまっては困る回路は中心の深い溝をまたぐように配置をします。&lt;/p&gt;

&lt;p&gt;ブレッドボードは構造上大電流を流すような回路には向いておらず、火事の原因になる場合があるためモータを回すような回路を作るのはやめておいた方が良いです。&lt;/p&gt;

&lt;!-- **相談事項** 安いのでいいから分解して中身を剥き出したい --&gt;

&lt;!-- ## 使い方
実際にジャンパワイヤとLEDを使用して、電源にジャンパワイヤを接続するとLEDが点灯する回路を組んでみます。 --!&gt;

&lt;!-- **TODO** 回路図と写真 --&gt;
</description>
    </item>
    
    <item>
      <title>グローブシステム</title>
      <link>https://dotstud.io/docs/grove/</link>
      <pubDate>Fri, 11 Nov 2016 02:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/grove/</guid>
      
      <description>

&lt;p&gt;Groveとは、seeed studioが開発している &lt;strong&gt;差すだけ&lt;/strong&gt; で扱えるセンサーなどがあるモジュールのことです。&lt;/p&gt;

&lt;p&gt;どのモジュールも端子に凹凸があるため、初心者でも向きを間違えることなく扱えたり手軽に差し替えたりすることが出来るので、プロトタイピングをするときにピッタリのものとなっています。&lt;/p&gt;

&lt;h2 id=&#34;どんなものがあるの&#34;&gt;どんなものがあるの？&lt;/h2&gt;

&lt;p&gt;2017/2/1現在、周りの環境を取得するためのセンサ、サーボやファンなど &lt;strong&gt;動きのあるアクチュエータなどが100個以上もあります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;今回は、どのようなセンサやアクチュエータなどがあるのか、100個以上の中から選んだ10個を解説します。&lt;/p&gt;

&lt;h3 id=&#34;明るさセンサ&#34;&gt;明るさセンサ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/41Q%2B5LzCjNL.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このセンサーの特徴は、明るさを照度の単位であるlux(ルクス)で取得できることです。&lt;/p&gt;

&lt;p&gt;アナログのセンサーでも明るさを取得する事はできますが、このセンサは明確に数値として取得出来るので、机の上が適切な明るさかアドバイスすることができたり、植物にちゃんと光があたっているかを見たりすることができます。&lt;/p&gt;

&lt;h3 id=&#34;カラーセンサ&#34;&gt;カラーセンサ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41Hj3dWPstL.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このセンサーの特徴は、色を取得することが出来ることです。&lt;/p&gt;

&lt;p&gt;色を識別して、果物を見分ける仕組みを作ったり、色によって処理を分けるものを作成したりする事ができます。&lt;/p&gt;

&lt;h3 id=&#34;三軸加速度センサ&#34;&gt;三軸加速度センサ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41G4wUde7wL.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このセンサの特徴は、モノや人などの動きを取得できることです。&lt;/p&gt;

&lt;p&gt;x,y,zの三軸が取得できるため、ジャンプしたことや横に移動していること、モノが落下してることなどの動きを取得できます。&lt;/p&gt;

&lt;h3 id=&#34;水分センサ&#34;&gt;水分センサ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/411uV91gbkL.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このセンサの特徴は、土の中の水分量を取得出来ることです。&lt;/p&gt;

&lt;p&gt;このセンサを使うことで、植物が事前に枯れないような仕組みを作ることが出来ます。&lt;/p&gt;

&lt;h3 id=&#34;pirモーションセンサ&#34;&gt;PIRモーションセンサ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51oBw0EYBUL.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このセンサの特徴は、動きのある人を取得できることです。&lt;/p&gt;

&lt;p&gt;このセンサを使うことで、自動ドアのように人が来たときに動作するものを作成する事ができます。&lt;/p&gt;

&lt;h3 id=&#34;oledディスプレイ&#34;&gt;OLEDディスプレイ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41Y%2B%2B8gbXbL.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これはOLEDと呼ばれる仕組みで作られたディスプレイです。&lt;/p&gt;

&lt;p&gt;明るく見やすいディスプレイになっていて、文字だけでなく図形などの表示も可能です。&lt;/p&gt;

&lt;h3 id=&#34;ジョイスティック&#34;&gt;ジョイスティック&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41zI7ZmHrWL.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これはゲームなどでよく見られるジョイスティック型のセンサです。&lt;/p&gt;

&lt;p&gt;前後・左右はもちろん、クリックにも対応しており、ゲームのコントローラーとしてや、ラジコンやロボットの制御の入力として扱うことができます。&lt;/p&gt;

&lt;h3 id=&#34;赤外線送受信&#34;&gt;赤外線送受信&lt;/h3&gt;

&lt;p&gt;これは赤外線を制御できるものです。&lt;/p&gt;

&lt;p&gt;今使われているテレビやエアコンなどのリモコンは赤外線で操作するため、赤外線を制御できるこの通信器を使えば自分好みの学習リモコンを作成することができます。&lt;/p&gt;

&lt;h4 id=&#34;受信&#34;&gt;受信&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41ZMlWx-c6L.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらで赤外線の信号を受けることができます。&lt;/p&gt;

&lt;h4 id=&#34;送信&#34;&gt;送信&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41u64mLAz2L.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらで赤外線の信号を送信することができます。&lt;/p&gt;

&lt;h3 id=&#34;mp3&#34;&gt;MP3&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://akizukidenshi.com/img/goods/C/M-10450.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これは、mp3の音楽を再生できるものです。&lt;/p&gt;

&lt;p&gt;電子工作で音楽を流すのはひと手間かかるのですが、これは手軽に音楽を流せるため、普通の音楽はもちろん、警告音や説明音声を流すことができます。&lt;/p&gt;

&lt;h2 id=&#34;なにと繋げられるの&#34;&gt;なにと繋げられるの？&lt;/h2&gt;

&lt;p&gt;seeed studioから様々な変換基板が販売されており、変換基板を介して接続する時ことができます。&lt;/p&gt;

&lt;p&gt;接続できるモノの一例です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arduino&lt;/li&gt;
&lt;li&gt;Raspberry pi&lt;/li&gt;
&lt;li&gt;mbed&lt;/li&gt;
&lt;li&gt;Nefry&lt;/li&gt;
&lt;li&gt;wio node&lt;/li&gt;
&lt;li&gt;konashi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多くの基板が変換基板を介してではあるものの、たくさんのGROVEモジュールに接続することができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LED</title>
      <link>https://dotstud.io/docs/led/</link>
      <pubDate>Tue, 19 Jul 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/led/</guid>
      
      <description>

&lt;p&gt;英語でLight Emitting Diode、略してLED。&lt;/p&gt;

&lt;p&gt;日本語では発光ダイオードと呼ばれ、その名のとおり電気を流すと光を発します。&lt;/p&gt;

&lt;p&gt;ダイオードと同じく &lt;strong&gt;電流が流れる方向が決まっている&lt;/strong&gt;（「極性がある」とも言います）ので、接続に注意が必要です。&lt;/p&gt;

&lt;h2 id=&#34;形状&#34;&gt;形状&lt;/h2&gt;

&lt;p&gt;LEDには、砲弾型の2本足のものや、砲弾型で複数の足があるもの、表面実装用のものなど様々な形があります。&lt;/p&gt;

&lt;p&gt;砲弾型では5mmや3mmのものが多く売られています。電子工作で使われているのは主に5mmのものです。&lt;/p&gt;

&lt;h2 id=&#34;構造&#34;&gt;構造&lt;/h2&gt;

&lt;p&gt;LEDには、「アノード」「カソード」の２極があります。アノードからカソードへ電流を流しますが、反対のカソードからアノードへはほとんど電流を流しません。&lt;/p&gt;

&lt;p&gt;アノードからカソードへ電流を流す際に、&lt;strong&gt;エネルギーを光に変換して発光&lt;/strong&gt; します。&lt;/p&gt;

&lt;p&gt;複数の足があるLEDや７セグ、LEDマトリックスは、構造によって「アノードコモン」「カソードコモン」に区別されます。&lt;/p&gt;

&lt;p&gt;コモンは「共通の」という意味で、内部の端子が一箇所にまとめられて「コモン(共通)」端子になっていることを示します。&lt;/p&gt;

&lt;p&gt;例えば「カソードコモン」の場合、共通のカソード（-側）をグランドに接続し、アノード側を抵抗を経由して個々のマイコンの端子に接続すると、マイコン端子の出力に応じてLEDの表示を変えることができるようになります。&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;h3 id=&#34;基本的なled&#34;&gt;基本的なLED&lt;/h3&gt;

&lt;p&gt;アノード側を＋、カソード側を-に接続することで電流が流れ発光します。&lt;/p&gt;

&lt;!--![回路図]()--&gt;

&lt;h3 id=&#34;複数の端子があるled&#34;&gt;複数の端子があるLED&lt;/h3&gt;

&lt;p&gt;フルカラーLEDなどは複数の端子をもっています。それぞれの端子に加える電圧によって色が変化します。&lt;/p&gt;

&lt;!--![回路図]()--&gt;

&lt;h3 id=&#34;7セグ-led&#34;&gt;7セグ LED&lt;/h3&gt;

&lt;p&gt;７セグの例を見てみましょう。&lt;/p&gt;

&lt;!--![カソードコモンの回路図]()-&gt;

参考:http://www.web-mondai.com/upload/00023/00023_1275552483_0023_a.png

この場合、マイコンのP0端子のみをHighにすると８の一番上が光ります。なので例えば２と表示する場合、P0、P1、P3、P4、P6をHighにしてそれ以外をLowにすると２の形に光らせることが可能になります。

&lt;!--![回路例]--&gt;

&lt;p&gt;また、コモン側の端子をマイコンで制御することで複数の桁数の７セグLEDを表示することも可能になります。&lt;/p&gt;

&lt;!--![回路例]--&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://jsdiy.web.fc2.com/avr_7seg8test/&#34;&gt;http://jsdiy.web.fc2.com/avr_7seg8test/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>