<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/</link>
    <description>Recent content on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Wed, 07 Sep 2016 10:00:00 +0900</lastBuildDate>
    <atom:link href="https://dotstud.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pokemon GOで近くにポケモンが出たらPepperが教えてくれる仕組みをNode.jsだけで作る</title>
      <link>https://dotstud.io/blog/pepper-pokemon-go-notice/</link>
      <pubDate>Wed, 07 Sep 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/pepper-pokemon-go-notice/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstduio代表ののびすけです。&lt;/p&gt;

&lt;p&gt;みなさん、Pokemon GOやってますか?　僕はけっこう作業ゲーな気がしていて、最近飽き気味だったんですよね。現在だとLv.18で止まってしまっている中途半端組です。&lt;/p&gt;

&lt;p&gt;そんな感じなので、僕は「ポケモンが出てきたら教えてくれる仕組み」があるといいなって思い、PepperとPokemon GOを繋げて &lt;strong&gt;近くにポケモンが出現したら通知する&lt;/strong&gt; 仕組みを作ってみました。&lt;/p&gt;

&lt;p&gt;Slack通知とかはたまに記事で見かけたんですけど、たまたまPepperが部屋にいたので活用することにしました。なかなかPepperが手元にないかと思いますが、試せる人は試してみてください（笑）&lt;/p&gt;

&lt;h2 id=&#34;全体像と開発手順&#34;&gt;全体像と開発手順&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/01_structure.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;やったことは次の3つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Node.jsを使い、Pokemon GOのAPIから近くのポケモンを探す&lt;/li&gt;
&lt;li&gt;2. ポケモンを見つけたら、ポケモン名を日本語変換する&lt;/li&gt;
&lt;li&gt;3. Nightmareを使い、Pepperを制御するブラウザアプリを自動制御して喋らせる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このときはMac OS 10.11のNode.js6.3.1で試しました。ポイントは Choregraphe（Pepperのアプリ開発者向けアプリ）を使わずに &lt;strong&gt;Node.jsだけで完結する&lt;/strong&gt; ところだと思います。単純に喋らせるだけならChoregraphe使わなくてもなんとかなりますね。&lt;/p&gt;

&lt;p&gt;※きちんと開発をするならChoregrapheが必須です。&lt;/p&gt;

&lt;script class=&#34;speakerdeck-embed&#34; data-id=&#34;93daabf2deac4ac68cb016ee2d2109d9&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;先日Amazonで開催したIoTの勉強会「IoTLT」で話した内容をまとめました。そのときのスライドも貼っておくので、参考までにご覧ください。完全にLT駆動開発です（笑）&lt;/p&gt;

&lt;h2 id=&#34;作り方&#34;&gt;作り方&lt;/h2&gt;

&lt;h3 id=&#34;1-pokemon-g0のapiをnode-jsで使う&#34;&gt;1. Pokemon G0のAPIをNode.jsで使う&lt;/h3&gt;

&lt;p&gt;npmでPokemon G0を調べるとちょくちょくモジュールが見つかります。中でもメンテナンスされていそうな&lt;a href=&#34;https://www.npmjs.com/package/pokemon-go-node-api&#34;&gt;node-pokemon-go-api&lt;/a&gt;を使いました。&lt;/p&gt;

&lt;p&gt;まずは&lt;code&gt;ポケモンが出たら〇〇する&lt;/code&gt;トリガーを作ります。以下のコマンドでインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install pokemon-go-node-api --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際に使う部分は、以下の僕のQiitaの記事を参考に進めてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/31daa590056d3d5d8336&#34;&gt;Pokemon GOで近くにポケモンが出たら〇〇するトリガーをNode.jsで作る&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;index-js&#34;&gt;index.js&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;

const PokemonGO = require(&#39;pokemon-go-node-api&#39;);

// using var so you can login with multiple users
let a = new PokemonGO.Pokeio();

//Set environment variables or replace placeholder text
let location = {
    type: &#39;name&#39;,
    name: &#39;Tokyo/Taito-ku&#39; //東京都台東区
};

let username = &#39;登録したGoogleアカウントのメールアドレス&#39;;
let password = &#39;登録したGoogleアカウントのパスワード&#39;;
let provider = &#39;google&#39;;

a.init(username, password, location, provider, (err) =&amp;gt; {
    if (err) throw err;

    console.log(&#39;1[i] Current location: &#39; + a.playerInfo.locationName);
    console.log(&#39;1[i] lat/long/alt: : &#39; + a.playerInfo.latitude + &#39; &#39; + a.playerInfo.longitude + &#39; &#39; + a.playerInfo.altitude);

    a.GetProfile((err, profile) =&amp;gt; {
        if (err) throw err;

        console.log(&#39;1[i] Username: &#39; + profile.username);
        console.log(&#39;1[i] Poke Storage: &#39; + profile.poke_storage);
        console.log(&#39;1[i] Item Storage: &#39; + profile.item_storage);

        let poke = 0;
        if (profile.currency[0].amount) {
            poke = profile.currency[0].amount;
        }

        console.log(&#39;1[i] Pokecoin: &#39; + poke);
        console.log(&#39;1[i] Stardust: &#39; + profile.currency[1].amount);

        setInterval(() =&amp;gt; {
            a.Heartbeat((err,hb)=&amp;gt;{
                if(err) {
                    console.log(err);
                }

                let texts = &#39;&#39;;
                for (var i = hb.cells.length - 1; i &amp;gt;= 0; i--) {
                    if(hb.cells[i].NearbyPokemon[0]) {
                        //console.log(a.pokemonlist[0])
                        let pokemon = a.pokemonlist[parseInt(hb.cells[i].NearbyPokemon[0].PokedexNumber)-1];
                        console.log(&#39;1[+] There is a &#39; + pokemon.name + &#39; near.&#39;);
                        //この辺にWebhookとか噛ませればSlack通知とかも余裕ですね。
                    }
                }
            });
        }, 5000);

    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行してみると、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/02_result.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一番下に &lt;strong&gt;There is a Pinsir near.&lt;/strong&gt; と表示されているのがわかると思います。
どうやらPinsirが近くにいるようです。&lt;/p&gt;

&lt;h3 id=&#34;2-気になる人は-ポケモン名を日本語化する&#34;&gt;2. （気になる人は）ポケモン名を日本語化する&lt;/h3&gt;

&lt;p&gt;ここで「Pinsirってなんだ」という話になるんですけど、ググったらカイロスの英語名らしいですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/03_pinsir.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/PonDad/93922f63c3143489e30c3716d3d176d2&#34;&gt;GitHubGistのPonDad氏&lt;/a&gt;が、ポケモンの英語名と日本語名を変換するデータをJSONとして公開していたので、ありがたく使いましょう。index.jsの&lt;a href=&#34;https://github.com/n0bisuke/pepper_pokemon_go/blob/master/index.js#L54-L56&#34;&gt;ここ&lt;/a&gt;で使ってます。&lt;/p&gt;

&lt;h3 id=&#34;3-nightmareでpepperを喋らせる&#34;&gt;3. NightmareでPepperを喋らせる&lt;/h3&gt;

&lt;p&gt;Nightmareはブラウザの自動テストをおこなうツールです。ログイン処理や、ボタンを押した際の挙動などを自動テストする際に使います。PhantomJSが有名ですが、そのラッパーライブラリでかなり使いやすいです。&lt;/p&gt;

&lt;p&gt;サンプルなどを見ると、Nightmareを使うときは&lt;a href=&#34;https://www.npmjs.com/package/vo&#34;&gt;vo&lt;/a&gt;というモジュールを使ってGeneratorで書くのが主流っぽいです。以下のコマンドでインストールしてください。Nightmareはv2からElectronベースになったということもあり、インストールには結構時間がかかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i nightmare vo --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のQiitaの記事も参考にしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/8a7a52321380e5cf0379&#34;&gt;Nightmareがv2(Electronベース)になり、使いやすく感動したのでLIGブログのPV/UUデータ取得を自動化してみた。
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/04_pepper_controller.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接続先は&lt;a href=&#34;https://github.com/kuetsuhara&#34;&gt;kuetsuharaさん&lt;/a&gt;の&lt;a href=&#34;http://kuetsuhara.github.io/pepperConnect.html&#34;&gt;ペッパーコントローラーブラウザアプリ&lt;/a&gt;です。このブラウザアプリは同じIP内にあるPCからなら、ブラウザだけでPepperをある程度操作できるかなり便利なものです。&lt;/p&gt;

&lt;h4 id=&#34;pepper-connect-js&#34;&gt;pepper_connect.js&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;

const Nightmare = require(&#39;nightmare&#39;);
const vo = require(&#39;vo&#39;);
const IP = &#39;192.168.179.29&#39;;

function pepper(text) {
    vo(function* () {
    const nightmare = Nightmare({ show: true });
    const link = yield nightmare
        .goto(&#39;http://kuetsuhara.github.io/pepperConnect.html&#39;)
        .insert(&#39;input#pepperIP&#39;,&#39;&#39;)
        .type(&#39;input#pepperIP&#39;, ip)
        .click(&#39;button[onclick=&amp;quot;connect()&amp;quot;]&#39;)
        .wait(4000)
        .type(&#39;input#sayText&#39;, text)
        .click(&#39;button[onclick=&amp;quot;say()&amp;quot;]&#39;)
        .evaluate(() =&amp;gt; {
            return document.getElementsByClassName(&#39;ac-21th&#39;)[0].href;
        });
    yield nightmare.end();
        return link;
    })((err, result) =&amp;gt; {
        if (err) return console.log(err);
        console.log(result);
    });   
}

pepper(&amp;quot;こんばんわ&amp;quot;);

//モジュール化する場合
//module.exports = pepper;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで記述しました。192.168.179.29がPepperのIPになります。&lt;/p&gt;

&lt;p&gt;ちなみにPepperのIPアドレスは、タブレットの裏側の胸にあるボタンを押すとPepperが喋って教えてくれます。&lt;/p&gt;

&lt;h3 id=&#34;実行して試してみる&#34;&gt;実行して試してみる&lt;/h3&gt;

&lt;p&gt;ちなみに、このときはMac OS 10.11上のNode.js6.3系で試しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node pepper_connect.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時点で実行すると、Nightmare経由でPepperに自動接続して、「こんばんわ」と喋ってくれると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/05_result.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://goo.gl/photos/6GKXDMMbTGPtXf3A6&#34;&gt;こちら&lt;/a&gt;で実際に動いている動画を見られます。&lt;/p&gt;

&lt;h3 id=&#34;コードのまとめとデモ&#34;&gt;コードのまとめとデモ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/n0bisuke/pepper_pokemon_go&#34;&gt;こちら&lt;/a&gt;に今回使ったコードをまとめておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:n0bisuke/pepper_pokemon_go.git
cd pepper_pokemon_go
npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のあと、index.jsのユーザー名とパスワードを入力したのち&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で動作すると思います。動かない場合は&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;@n0bisuke&lt;/a&gt;まで！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Nightmareを使えば、Node.jsだけでも、ブラウザコントロールが可能なロボットやハードウェアの簡単な接続はできそうだなと感じました。&lt;/p&gt;

&lt;p&gt;実際のところ、Pepperと同じネットワークにNode.js（とNightmare）が動く環境が必要なので、運用などは難しそうです。しかし、喋ってくれること自体は通知として気づきやすいので、かなりアリだと思っています。&lt;/p&gt;

&lt;p&gt;試せる方はぜひ試してみてください！　それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>電子回路を簡単に学べるlittleBitsをインターネットに繋げよう！「CocoaBit」を開発中</title>
      <link>https://dotstud.io/blog/cocoabit-littlebits-milkcocoa-nefry/</link>
      <pubDate>Mon, 05 Sep 2016 10:41:27 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/cocoabit-littlebits-milkcocoa-nefry/</guid>
      
      <description>

&lt;p&gt;こんにちは、外部ライターのわみと申します。愛知県でネットワークの勉強をしている学生です。磁石で電子工作ができる「&lt;a href=&#34;http://jp.littlebits.com/&#34;&gt;littleBits&lt;/a&gt;」のモジュールとして、「&lt;strong&gt;CocoaBit&lt;/strong&gt;」というものを開発しています。&lt;/p&gt;

&lt;p&gt;CocoaBitを使えばlittleBitsを簡単にインターネットへ接続できます。すでにlittleBitsをもっている方や、IoTに興味があるけれど「何から始めていいかわからない」「難しそう……」と思っている方はぜひご一読ください！&lt;/p&gt;

&lt;h2 id=&#34;cocoabitって&#34;&gt;CocoaBitって？&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/09_littlebits.png&#34; alt=&#34;&#34; /&gt;
磁石でパチパチとモジュールを繋げるだけで電子工作ができるデバイス「&lt;a href=&#34;http://jp.littlebits.com/&#34;&gt;littleBits&lt;/a&gt;」。これの拡張モジュールとして「CocoaBit」を開発しています。真ん中にがあるのがCocoaBitです。&lt;/p&gt;

&lt;p&gt;CocoaBitは次のような特徴を持っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;littleBitsをインターネットに接続できる&lt;/li&gt;
&lt;li&gt;バックエンドサービス「Milkcocoa」と簡単に連携できる&lt;/li&gt;
&lt;li&gt;Arduinoの開発環境（ArduinoIDE）でプログラミングができる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/01_cocoabit.png&#34; alt=&#34;&#34; /&gt;
CocoaBitを使えばlittleBitsを簡単にインターネットと繋げられるので、データをアップロードしたり、インターネットからCocoaBitを制御したり、はたまたIFTTT連携なんかも試せたりできます。&lt;/p&gt;

&lt;p&gt;「Nefry」というFRISKサイズのIoT向けデバイスをベースにして作っていますが、これも自分が自作しています。また、LIGブログでlittleBitsの連載をしている田中さんと共同開発をしています。私がNefryを作っていたことや、純粋に面白そう！という背景からCocoaBitが生まれました。（より詳しい背景は&lt;a href=&#34;http://www.1ft-seabass.jp/memo/2016/04/13/cocobit-first-contact/&#34;&gt;こちらの記事&lt;/a&gt;をどうぞ）&lt;/p&gt;

&lt;h2 id=&#34;さっそくcocoabitでプログラミングしてみよう&#34;&gt;さっそくCocoaBitでプログラミングしてみよう&lt;/h2&gt;

&lt;p&gt;ArduinoIDEを使って、CocoaBitのプログラムを作る流れを紹介します！　まずはArduinoIDEにCocoaBitをインストールするのですが、ArduinoIDEのダウンロード方法などについては&lt;a href=&#34;http://qiita.com/wamisnet/private/15062b2e7b23969797aa&#34;&gt;LIGブログ&lt;/a&gt;の記事で紹介されています。&lt;/p&gt;

&lt;p&gt;Nefryとライブラリーが共通なのでNefryの名前が出てきますが、気にせずに読み進めてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/02_arduino.png&#34; alt=&#34;&#34; /&gt;
まずは、ArduinoIDEの環境設定を開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/03_arduino.png&#34; alt=&#34;&#34; /&gt;
環境設定の &lt;strong&gt;追加のボードマネージャーのURL&lt;/strong&gt; に次のURL を入力します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://wamisnet.github.io/package_nefry_index.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/04_arduino.png&#34; alt=&#34;&#34; /&gt;
入力が終わったら OK をクリックし、ツール内にあるボード選択のボードマネージャーをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/05_arduino.png&#34; alt=&#34;&#34; /&gt;
すると、ボードマネージャーの一覧の下部にNefryが追加されます。検索欄もあるのでそこに &lt;strong&gt;Nefry&lt;/strong&gt; と入力すると簡単に見つけられます。インストールをクリックすると、必要なファイルをダウンロードできます。（2016年8月現在の最新バージョンは2.0.1です）&lt;/p&gt;

&lt;p&gt;インストールが完了すると &lt;strong&gt;INSTALLED&lt;/strong&gt; と表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/08_arduino.png&#34; alt=&#34;&#34; /&gt;
すると、ツール内にあるボードからCocoaBitが選択できるようになっているはずです！　これでボードのインストールも完了です！&lt;/p&gt;

&lt;p&gt;ここまでで開発環境が整いましたので次はプログラムを書いていきます。&lt;/p&gt;

&lt;h2 id=&#34;cocoabitのスイッチを押した時にledを光らせてみよう&#34;&gt;CocoaBitのスイッチを押した時にLEDを光らせてみよう&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/09_littlebits.png&#34; alt=&#34;&#34; /&gt;
CocoaBitに写真のようにlittleBitsのボタンとLEDを繋げて、ボタンを押したらLEDが光るプログラムを書いてみましょう！　以下はプログラムの全体図です。&lt;/p&gt;

&lt;h3 id=&#34;pushsw-ino&#34;&gt;pushSW.ino&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;void setup() {
  pinMode(D0, OUTPUT); //CocoaBitのD0を出力モードにする
}
void loop() {
  //SWを押した時にLEDが点灯する
  if (analogRead(A0) &amp;gt; 500) {//7(押してない)or970(押されてる)中間で分岐します
    //押した時
    digitalWrite(D0, HIGH); //LED点灯
  } else {
    //離した時
    digitalWrite(D0, LOW); //LED消灯
  }
  delay(100);//0.1秒待つ
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プログラムの解説&#34;&gt;プログラムの解説&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;setup()&lt;/strong&gt; の{}で囲まれている箇所は、CocoaBitが起動時に &lt;strong&gt;一度のみおこなう処理&lt;/strong&gt; です。今回はLEDを光らせるためにD0の入出力を使うので、それぞれが入力モードなのか、出力モードなのかを設定しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void setup() {
  pinMode(D0, OUTPUT); //CocoaBitのD0を出力モードにする
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;loop()&lt;/strong&gt; の{}かっこで囲まれている箇所、CocoaBitが起動中に &lt;strong&gt;繰り返しおこなう処理&lt;/strong&gt; です。littleBitsのボタンの状態をanalogRead(A0)というもので取得します。このanalogReadという関数で、0v-5vの電圧の変化を0-1023の範囲でA0から取得できます。&lt;/p&gt;

&lt;p&gt;ボタンを押すとおおよそ970程度、押していないときは7程度になります。これをif文と呼ばれる条件式で処理を分岐します。digitalWriteでピンをHIGHかLOWに変更することができますので、スイッチの状態によりHIGHかLOWに変更していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void loop() {
  //SWを押した時にLEDが点灯する
  if (analogRead(A0) &amp;gt; 500) {//7(押してない)or970(押されてる)中間で分岐します
    //押した時
    digitalWrite(D0, HIGH); //LED点灯
  } else {
    //離した時
    digitalWrite(D0, LOW); //LED消灯
  }
  delay(100);//0.1秒待つ
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プログラムをcocoabitに書いてみよう&#34;&gt;プログラムをCocoaBitに書いてみよう&lt;/h3&gt;

&lt;p&gt;上記のプログラムをArduinoIDEに貼り、CocoaBitで実行してみましょう。CocoaBitにプログラムを書き込んでいく流れを簡単に解説しますが、より詳しい書き込み方は&lt;a href=&#34;http://qiita.com/wamisnet/private/15062b2e7b23969797aa&#34;&gt;LIGブログ&lt;/a&gt;の記事をご覧ください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/10_cocoabit.png&#34; alt=&#34;&#34; /&gt;
まずは、CocoaBitを写真を参考にしてpowerモジュールに繋いでください。しばらくしてWi-Fiを検索すると &lt;strong&gt;CocoaBit-○○○○&lt;/strong&gt; という名前があると思うので、そのWi-Fiに接続してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/11_wifi.png&#34; alt=&#34;&#34; /&gt;
接続すると自動的にこのページに移動します。時にうまくいかないときがあるのでその時はこちらのURLを入力してください。CocoaBitのメインページです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;このページから、さまざまな設定をおこなえます。プログラムを書き込むためには、CocoaBitを書き込みモードにします。（書き込みモードとは、CocoaBitのCoreプログラムだけ動作し、ユーザが書き込んだプログラムを実行しないモードです）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/12_nefry.png&#34; alt=&#34;&#34; /&gt;
書き込みモードに変更するには、&lt;strong&gt;setup Module&lt;/strong&gt; をクリックし、&lt;strong&gt;Write mode&lt;/strong&gt; を選択してください。すると、CocoaBitが再起動します。再起動が終わったら書き込みモードになっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/13_nefry.png&#34; alt=&#34;&#34; /&gt;
CocoaBitが書き込みモードになったところでプログラムを書き込んでいきましょう。メインページの &lt;strong&gt;upload Sketch&lt;/strong&gt; をクリックしてこのページを開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/14_nefry.png&#34; alt=&#34;&#34; /&gt;
開いたらページ中央にある &lt;strong&gt;参照&lt;/strong&gt; となっているボタンをクリックしてファイルを選びます。（Chromeなどブラウザによっては表示が異なることがあります）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/15_nefry.png&#34; alt=&#34;&#34; /&gt;
先ほどプログラムを保存した場所を開き、&lt;strong&gt;arduino.bin&lt;/strong&gt; となっているファイルを選びます。（きちんと確認してアップデートしてください。もし間違えてしまうと、最悪の場合起動しなくなります）&lt;/p&gt;

&lt;p&gt;きちんとファイルを選べると、ファイルの場所を示す表示が出ます。あとは &lt;strong&gt;Upload&lt;/strong&gt; をクリックするだけです！　アップロードが完了すると自動的にCocoaBitが再起動してプログラムが更新されます。&lt;/p&gt;

&lt;p&gt;これでCocoaBitのプログラムを書きかえることができました！　SWを押したときにLEDが光っているはずです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/17_cocoabit.gif&#34; alt=&#34;&#34; /&gt;
LEDは上手く点滅しましたか？　これでCocoaBitから出力できたので、次はCocoaBitに入力をしてみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;cocoabitにスライダーを繋いでみる&#34;&gt;CocoaBitにスライダーを繋いでみる&lt;/h2&gt;

&lt;p&gt;それでは次はCocoaBitを入力モードにして、入力された値をWebページで表示してみようと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/18_littlebits.png&#34; alt=&#34;&#34; /&gt;
今回は入力データを手軽に変更ができるlittleBitsのスライダーを使ってみようと思います。他にもボタンモジュールや明るさセンサーモジュールを繋ぐことも可能です。写真を参考に接続してみてください。&lt;/p&gt;

&lt;p&gt;接続できたら、プログラムを書いていきましょう。&lt;/p&gt;

&lt;h3 id=&#34;read-ino&#34;&gt;read.ino&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
int sensorValue;
void setup() {
}
void loop() {
  sensorValue = analogRead(A0);//アナログの入力を読みます。
  Nefry.print(&amp;quot;sensor = &amp;quot; );
  Nefry.println(sensorValue);//センサーデータを表示します。
  Nefry.ndelay(500);//0.5秒待ちます
  Nefry.setLed(sensorValue/4,255,0);//Red(sensorValue/4),Green(255),Blue(0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プログラムの解説-1&#34;&gt;プログラムの解説&lt;/h3&gt;

&lt;p&gt;analogReadという関数で、0v-5vの電圧の変化を0-1023の範囲でA0から取得することができます。その値をNefry.print関数で表示するようにしています。そのデータはWeb Consoleで見られます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/19_nefry.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nefry.ndelay関数は、指定されたミリ秒処理を止めます。1000ミリ秒で1秒となります。
Nefry.setLed関数は、CocoaBitについているLEDの光る色を指定することができ、赤・緑・青を0（消灯）から255（フル点灯）の範囲で光らせることができます。&lt;/p&gt;

&lt;p&gt;また、例えば赤（255）と緑（255）を選ぶと黄色になるなど、光らせる色と強さの組み合わせによって色を変えられます。今回は、赤色をセンサーの入力により変更（sensorValue/4）、緑色を（255）、Blue（0）にして光らせてみます。Nefryの関数については&lt;a href=&#34;http://qiita.com/wamisnet/items/e44812eb6d6fded7af26&#34;&gt;こちら&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;このプログラムは、0.5秒ごとにA0ピンの状態を取得して、sensor = A0ピンの状態をweb consoleで表示、LEDの色がスライダによって緑から黄色に変化していくプログラムになります。こちらがプログラムの全体になります。&lt;/p&gt;

&lt;h3 id=&#34;実際に動かしてみよう&#34;&gt;実際に動かしてみよう&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/20_cocoabit.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/21_nefry.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;成功するとこのように数値が変わります。&lt;/p&gt;

&lt;p&gt;さて、最後に今のセンサーデータをMilkcocoaに送ってみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;cocoabitにmilkcocoaを繋げてみる&#34;&gt;CocoaBitにMilkcocoaを繋げてみる&lt;/h2&gt;

&lt;p&gt;今度はセンサーの値を表示するだけではなくMilkcocoaの方に送ってみようと思います。&lt;/p&gt;

&lt;h3 id=&#34;milkcocoaとは&#34;&gt;Milkcocoaとは？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/22_milkcocoa.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mlkcca.com&#34;&gt;Milkcocoa&lt;/a&gt;とは、デバイス・スマートフォン・PC間で簡単にリアルタイム通信ができるWebサービスです。リアルタイム通信では複雑なプログラミングが必要ですが、MilkcocoaではJavaScriptを1行追記するだけでデータの保存＆やり取りができるようになるんです。&lt;/p&gt;

&lt;p&gt;さて、Milkcocoaにセンサーの値を送れるようにするため、CocoaBitにWi-Fiを教えてあげましょう。&lt;/p&gt;

&lt;h3 id=&#34;wi-fiの設定&#34;&gt;Wi-Fiの設定&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/23_nefry.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この項目は、一度設定すればアクセスするWi-Fiが変わらない限り再設定する必要はありません。 &lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt; に接続し、Setup WiFiのリンクをクリックします。&lt;/p&gt;

&lt;p&gt;SSIDの入力欄をクリックすると、検出されたWi-Fiを選べます。Passがある場合はそちらも入力して、Saveをクリックします。Saveを押すと再起動するのでしばらく待ちましょう。&lt;/p&gt;

&lt;p&gt;Wi-Fiの設定が完了したところでプログラムを書いていきます。&lt;/p&gt;

&lt;h4 id=&#34;milkcocoabit-ino&#34;&gt;milkcocoabit.ino&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;Nefry_Milkcocoa.h&amp;gt;

Nefry_Milkcocoa *milkcocoa;

char *datastore;
int sensorValue;

void setup() {
  milkcocoa-&amp;gt;print();//Setup ModuleページにAPPIDの表示をする
  milkcocoa = Nefry_Milkcocoa::begin();//milkcocoaと接続に必要になる処理をします。
  datastore = Nefry.getConfStr(3);//Setup Moduleページに入力されたデータストア名を保存します。
 }

void loop() {
  sensorValue = analogRead(A0);//アナログの入力を読みます。
  Nefry.print(&amp;quot;sensor = &amp;quot; );
  Nefry.println(sensorValue);//センサーデータを表示します。
  Nefry.println( milkcocoa-&amp;gt;loop(10000) ? &amp;quot;Milkcocoa Connect OK&amp;quot; : &amp;quot;Milkcocoa Connect NG&amp;quot; ); //10秒以内にMilkcocoaに接続できればokと表示されます。
  DataElement elem = DataElement();
  elem.setValue(&amp;quot;sensor&amp;quot;, sensorValue);//センサーの状態を送信できる形に変換
  milkcocoa-&amp;gt;push(datastore, &amp;amp;elem);//Milkcocoaに送信
  Nefry.setLed(sensorValue/4,255,0);//Red(sensorValue/4),Green(255),Blue(0)
  Nefry.ndelay(2000);//2秒待つ
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にプログラムを書き込み、Web Consoleを確認すると &lt;strong&gt;Milkcocoa Send Data Lack&lt;/strong&gt; と表示されます。Milkcocoaに接続するために、必要な情報が足りないという意味なので、必要な情報を集める必要があります。詳しく知りたい方は&lt;a href=&#34;http://liginc.co.jp/282918&#34;&gt;こちらの記事&lt;/a&gt;をご覧ください。&lt;/p&gt;

&lt;p&gt;MilkcocoaのサイトにアクセスしてそれぞれAPPID、APIKey、APISecretを取得します。その3つが分かったら、今度はCocoaBitのSetup ModuleでAPPID、APIKey、APISecretの入力欄に先ほどのIDとKeyを入力します。もう一つDataStoreという入力欄がありますので、そこには &lt;strong&gt;CocoaBit&lt;/strong&gt; と入力します。&lt;/p&gt;

&lt;p&gt;入力が完了しSaveボタンをクリックすると、自動的に再起動してMilkcocoaにセンサーの値を送ってくれるはずです。うまく送れない場合、CocoaBitがインターネットに繋がっていないか、先ほどの入力が間違っていないかが原因として挙げられます。&lt;/p&gt;

&lt;h3 id=&#34;実際に動かしてみよう-1&#34;&gt;実際に動かしてみよう&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/24_cocoabit.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/25_milkcocoa.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Milkcocoaのデータストアを確認するとlittleBitsで取得した数値が表示されているはずです。このデータを使い、Web連携をすると面白くなるのではないでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/016/01_cocoabit.png&#34; alt=&#34;&#34; /&gt;
ということで今回はCocoaBitについてを紹介しました。CocoaBitを使えば、これくらい簡単にlittleBitsをインターネットと繋げられます。&lt;/p&gt;

&lt;p&gt;CocoaBitはまだ開発中ではありますが、進展があればまたこちらで報告しようと思っております。応援よろしくお願いします！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ちゃんとくのプロフィール</title>
      <link>https://dotstud.io/members/tokutoku393/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:48 +0900</pubDate>
      
      <guid>https://dotstud.io/members/tokutoku393/</guid>
      
      <description>&lt;p&gt;6歳でネットサーフィンを覚え、中学時代をネトゲに費やし、大学でなぜか法学を学んだのち、晴れてWebエンジニアに。「作れる系エンジニア」に憧れて電子工作を勉強中。普段はPHPのLaravelや、かじった程度のJQueryを書いています。
Milkcocoa Girlsやdots女子部などをちょこっと運営中。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>わみのプロフィール</title>
      <link>https://dotstud.io/members/wami/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:48 +0900</pubDate>
      
      <guid>https://dotstud.io/members/wami/</guid>
      
      <description>&lt;p&gt;愛知県でネットワークを勉強している学生のわみです。ハードウエアを作成したり、Arduinoやmbedのプログラムしたりしてます。最近では、ハードウエアとWebを繋げたり、ハードウエアとスマートフォンを繋いだり、ハードウエア×異種のものを繋ぐことを目標に様々なものを作っています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>まおのプロフィール</title>
      <link>https://dotstud.io/members/mao/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:47 +0900</pubDate>
      
      <guid>https://dotstud.io/members/mao/</guid>
      
      <description>&lt;p&gt;タイ人×日本人ハーフ、高校卒業までタイのプーケットに在住していた。現在は静岡県の大学にて電気電子工学を専攻している。dotstudioでは、電子工作で簡単に作れるファッションアイテムを広めようといろいろチャレンジしていきたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>おこめのプロフィール</title>
      <link>https://dotstud.io/members/ocome/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:46 +0900</pubDate>
      
      <guid>https://dotstud.io/members/ocome/</guid>
      
      <description>&lt;p&gt;ロボット女子なライターです。&lt;/p&gt;

&lt;p&gt;趣味：現実逃避&lt;/p&gt;

&lt;p&gt;脳内：
　&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　ぱ
　　　　っ
　　　　　　ぱ
　　　　　　　　ら
　　　　　　　　　　　パー
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>うこのプロフィール</title>
      <link>https://dotstud.io/members/ukkz/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:45 +0900</pubDate>
      
      <guid>https://dotstud.io/members/ukkz/</guid>
      
      <description>&lt;p&gt;幼少期、親にゲーム機をねだったところ「自分で作る以外に認めない」と言われ小2でプログラミングと電子工作の道へ突入させられる。中学高校では常に運動部と文化部を掛け持ちし、現在は大学で運動科学を専攻しながらdotstudioで分野の幅を越えたものづくりに挑戦している。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ちゃちゃまるのプロフィール</title>
      <link>https://dotstud.io/members/chachmaru/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:44 +0900</pubDate>
      
      <guid>https://dotstud.io/members/chachmaru/</guid>
      
      <description>&lt;p&gt;1997年の夏、東京に生まれる。小学校5年生から3年間を中国・蘇州で過ごす。インターナショナルスクールに入れてもらうも中国語も英語も習得できないまま帰国。悔しさと後悔をバネに英語を猛勉強し、英語系の資格をたくさん取る。高校に入ってからグラフィックデザインと出会い、DTPや映像、3Dグラフィックなどを勉強するようになる。あるベンチャー企業でデザイナーとして数ヶ月インターンをしたあと、LIGにアルバイトとして入り、IoTの魅力と可能性に惹かれる。ちなみにここで「ちゃちゃまる」という名前を授かる。理由は「犬っぽかったから」。そして今、dotstudioのデザインとウェブサイトのフロントエンドを担当している。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>うららのプロフィール</title>
      <link>https://dotstud.io/members/urara/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:43 +0900</pubDate>
      
      <guid>https://dotstud.io/members/urara/</guid>
      
      <description>&lt;p&gt;大学2年次にカリフォルニア州立大学へ交換留学、『Global Studies』を専攻。帰国後、月間600万PVのオウンドメディアを運営する株式会社LIGにインターンとして参加する。1年半メディア運営に携わり、2015年に新卒として株式会社LIGに入社。現在はIoT系の記事の編集を担当し、自身もプログラミングやデバイスに触れている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>たかのプロフィール</title>
      <link>https://dotstud.io/members/iwakami/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:42 +0900</pubDate>
      
      <guid>https://dotstud.io/members/iwakami/</guid>
      
      <description>&lt;p&gt;学生時代、モバイルマーケティング、ITベンチャー企業数社に参加する。在学中からアーリーステージを対象とした独立系投資会社にて、投資業務、コンサルティング業務に従事。 2007年、株式会社LIG創業。47ホールディングス株式会社　取締役　／　TokyoMildFoundation株式会社　取締役　を兼務。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>のびすけのプロフィール</title>
      <link>https://dotstud.io/members/n0bisuke/</link>
      <pubDate>Thu, 01 Sep 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/members/n0bisuke/</guid>
      
      <description>

&lt;p&gt;1989年生まれ。岩手県立大学在籍時にITベンチャー企業の役員を務める。&lt;/p&gt;

&lt;p&gt;同大学院を卒業後、株式会社LIGにWebエンジニアとして入社し、Web制作に携わる。
2016年7月よりdotstudio株式会社を立ち上げ、IoT領域を中心に活動している。&lt;/p&gt;

&lt;p&gt;日本最大規模のIoTコミュニティであるIoTLTや、JavaScript RoboticsコミュニティNodeBotsの主催、IoTバックエンドサービスであるMilkcocoaのエバンジェリストとしても活動中。&lt;/p&gt;

&lt;h2 id=&#34;共著書&#34;&gt;共著書&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;「現場のプロが教える　WEBデザイン 新・スタンダードテクニック37」&lt;/li&gt;
&lt;li&gt;「JavaScriptでインタラクティブ3Dコンテンツを作ろう」&lt;/li&gt;
&lt;li&gt;「フロントエンドエンジニアのための現在とこれからの必須知識」&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sparkling Piercing Kit for CLUBBERS</title>
      <link>https://dotstud.io/projects/neopixel-ring-gemma-earrings/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:04 +0900</pubDate>
      
      <guid>https://dotstud.io/projects/neopixel-ring-gemma-earrings/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>クラブで目立つ！Adafruit社のGemmaで光るピアスを作ってみよう</title>
      <link>https://dotstud.io/blog/neopixel-ring-gemma-earrings/</link>
      <pubDate>Fri, 26 Aug 2016 11:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/neopixel-ring-gemma-earrings/</guid>
      
      <description>

&lt;p&gt;みなさんこんにちわ！　dotstudioでインターンをしているマオと申します。今回から、dotstudioのブログにて電子工作についての連載していきたいと思います！  初回の本記事では、Adafruit社の「Gemma」というマイコンボードを使った『フープイヤリング』の作り方を紹介します！&lt;/p&gt;

&lt;p&gt;こちらが完成の動画です＾＾&lt;/p&gt;

&lt;iframe width=&#34;645&#34; height=&#34;363&#34; src=&#34;https://www.youtube.com/embed/30MlFUBgzQo&#34; frameborder=&#34;0&#34; &gt;&lt;/iframe&gt;

&lt;p&gt;それではさっそく作っていきましょう！&lt;/p&gt;

&lt;h2 id=&#34;必要な物&#34;&gt;必要な物&lt;/h2&gt;

&lt;!-- ![](/img/blog/015/01_cs.png) --&gt;

&lt;ul&gt;
&lt;li&gt;光るフープイヤリングのキット（購入は&lt;a href=&#34;https://dotstud.io/projects/neopixel-ring-flora-earrings/&#34;&gt;こちら&lt;/a&gt;から）

&lt;ul&gt;
&lt;li&gt;NeoPixel Ring&lt;/li&gt;
&lt;li&gt;Gemma&lt;/li&gt;
&lt;li&gt;リチュウムイオンポリマー電池&lt;/li&gt;
&lt;li&gt;フックアップワイヤー&lt;/li&gt;
&lt;li&gt;ピアスフック&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;はんだごて、はんだ&lt;/li&gt;
&lt;li&gt;両面テープ&lt;/li&gt;
&lt;li&gt;マイクロUSBケーブル&lt;/li&gt;
&lt;li&gt;パソコン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;準備ができたらさっそく作っていきましょう！&lt;/p&gt;

&lt;h2 id=&#34;1-neopixel-ringの配線をはんだ付けする&#34;&gt;1. NeoPixel Ringの配線をはんだ付けする&lt;/h2&gt;

&lt;p&gt;まずはNeoPixel Ringの配線をはんだ付けしていきます。ここでは付属のフックアップワイヤーを使ってください。はんだ付け初心者の方は&lt;a href=&#34;http://www.murata.com/ja-jp/campaign/ads/japan/elekids/ele/craft/knack/soldering&#34;&gt;こちらのサイト&lt;/a&gt;などを参考にして練習するのをおすすめします。安全メガネなどの装着も心がけましょう。（目をまもろう！）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/02_earring.png&#34; alt=&#34;&#34; /&gt;
実際にはんだ付けをした後の写真はこちらです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/03_fritzing.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/015/04_graph.png&#34; alt=&#34;&#34; /&gt;
はんだ付けの配線はこちらです。表に従って配線してください。&lt;/p&gt;

&lt;h2 id=&#34;2-gemmaに書き込むプログラムを作る&#34;&gt;2. Gemmaに書き込むプログラムを作る&lt;/h2&gt;

&lt;p&gt;今回は「Arduino IDE」というソフトウェアを使って、プログラムをGemmaに書いていきます。Arduino IDEをまだ持っていない方は、&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;公式サイト&lt;/a&gt;からソフトウェアをダウンロードしてください。&lt;/p&gt;

&lt;p&gt;Windowsユーザーの方は Gemmaの開発元のAdafruit社による「Windows Driver」をインストールする必要があります。&lt;a href=&#34;https://learn.adafruit.com/getting-started-with-flora/windows-setup&#34;&gt;こちらのサイト&lt;/a&gt;を参照して進めてください。（Mac・Linuxのユーザーの方はインストールする必要はありません）&lt;/p&gt;

&lt;h3 id=&#34;2-1-ボードのインストレーション&#34;&gt;2-1. ボードのインストレーション&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/05_arduino.png&#34; alt=&#34;&#34; /&gt;
次にArduino IDEを立ち上げてボードをインストールします。Arduino &amp;gt; Preferences をクリックしてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/06_arduino.png&#34; alt=&#34;&#34; /&gt;
&lt;strong&gt;&lt;a href=&#34;https://www.adafruit.com/package_adafruit_index.json&#34;&gt;https://www.adafruit.com/package_adafruit_index.json&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
上記のAdafruitのURLをコピーして、追加のボードマネージャーのURLに貼り、OKをクリックしてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/07_arduino.png&#34; alt=&#34;&#34; /&gt;
コピー＆ペーストが完了したら、ツール &amp;gt; マイコンボード &amp;gt; ボードマネージャーをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/08_arduino.png&#34; alt=&#34;&#34; /&gt;
すると、このような画面が表示されます。検索欄に「Adafruit AVR Boards」を入力し、インストールしましょう。ここまでで、ボードのインストレーションは終わりです。&lt;/p&gt;

&lt;h3 id=&#34;2-2-ライブラリのインストール&#34;&gt;2-2. ライブラリのインストール&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/09_arduino.png&#34; alt=&#34;&#34; /&gt;
次に、NeoPixel Ring を光らせるために必要なライブラリをインストールします。スケッチ &amp;gt; ライブラリをインクルード &amp;gt; ライブラリを管理 をクリックしてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/10_arduino.png&#34; alt=&#34;&#34; /&gt;
画面が表示されるので、検索欄に「Neopixel」と入力しましょう。上記のようになります。「Adafruit Neopixel by Adafruit」を選択してインストールしてください。&lt;/p&gt;

&lt;p&gt;これでプログラムを書く準備ができました。&lt;/p&gt;

&lt;h3 id=&#34;2-3-プログラムをgemmaに書き込む&#34;&gt;2-3.プログラムをGemmaに書き込む&lt;/h3&gt;

&lt;p&gt;ここではGemmaに書き込むための設定をおこないます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/11_arduino.png&#34; alt=&#34;&#34; /&gt;
まずは、ボードを選択するためにツール＞ボード＞Arduino Gemma をクリックしてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/12_arduino.png&#34; alt=&#34;&#34; /&gt;
次に書き込み装置を選択します。ツール＞書込装置＞USBtinyISPをクリックしてください。そして、以下のプログラムをスケッチにコピー&amp;amp;ペーストしてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Adafruit_NeoPixel.h&amp;gt;

#define PIN 0

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(32, PIN);

uint8_t  mode   = 0, // 現在のアニメーション
         offset = 0; // スピンするの位置
uint32_t color  = 0xffae00; // 赤でスタート
uint32_t prevTime;

void setup() {
  pixels.begin();
  pixels.setBrightness(60); // １/３ 明るさ
  prevTime = millis();
}

void loop() {
  uint8_t  i;
  uint32_t t;

  switch(mode) {

   case 0: // ランダムに光る - 一回１LED
    i = random(32);
    pixels.setPixelColor(i, color);
    pixels.show();
    delay(10);
    pixels.setPixelColor(i, 0);
    break;

   case 1: // スピンする輪っか (一回に　８　LEDs )
    for(i=0; i&amp;lt;16; i++) {
      uint32_t c = 0;
      if(((offset + i) &amp;amp; 7) &amp;lt; 2) c = color; // ４ピクセル
      pixels.setPixelColor(   i, c); // 一回目
      pixels.setPixelColor(31-i, c); // ２回目（裏返す）
    }
    pixels.show();
    offset++;
    delay(50);
    break;
  }

  t = millis();
  if((t - prevTime) &amp;gt; 8000) {      // 毎８秒
    mode++;                        // 次のモード
    if(mode &amp;gt; 1) {                 // モードの終わり
      mode = 0;                    // モードスタート
      color &amp;gt;&amp;gt;= 8;                 // 次の色 R-&amp;gt;G-&amp;gt;B
      if(!color) color = 0xffae00; // 赤にリセット
    }
    for(i=0; i&amp;lt;32; i++) pixels.setPixelColor(i, 0);
    prevTime = t;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/13_gemma.gif&#34; alt=&#34;&#34; /&gt;
その後、Gemmaにある小さなボタンを押すと、こちらのように赤いLEDが10秒間点滅します。赤いLEDが点滅している間に、スケッチ＞書込装置を使って書き込む をクリックしましょう。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;※こちらのイメージにはNeoPixel Ringがついていませんが、NeoPixel Ringをはんだ付けしたあとのものへ書き込んでも問題ありません。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/14_arduino.png&#34; alt=&#34;&#34; /&gt;
赤いLEDの点滅が終わったら、Gemmaへのプログラムの書き込み完了となります。この状態になれば、MicroUSBを外しても大丈夫です。&lt;/p&gt;

&lt;h2 id=&#34;3-バッテリー接続-ピアスのフック取り付け&#34;&gt;3. バッテリー接続＆ピアスのフック取り付け&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/15_hello.png&#34; alt=&#34;&#34; /&gt;
最後に、NepPixel Ringとリチュームイオンポリマーバッテリーを接続します。Gemmaボード上に小さなON-OFFスイッチがあるので、スイッチをONにしてきちんと光るかどうかを確かめてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/16_world.png&#34; alt=&#34;&#34; /&gt;
次にバッテリーを固定します。いろいろなやり方があるかと思いますが、私は両面テープを中央に貼り、ピアスフックとバッテリーの線を固定してみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/17_hoge.png&#34; alt=&#34;&#34; /&gt;
その上からまた両面テープを貼り、バッテリーを上から付けています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/18_fuga.png&#34; alt=&#34;&#34; /&gt;
最後にNeoPixel Ringとピアスフックを固定させて、ピアスフックの余った長さを切断すればできあがりです＾＾&lt;/p&gt;

&lt;p&gt;バッテリーは充電可能なものとなっています。キットには充電機が含まれてないため、充電機がほしい方は&lt;a href=&#34;https://www.switch-science.com/catalog/1499/&#34;&gt;スイッチサイエンス&lt;/a&gt;さんのサイトでお求めください。&lt;/p&gt;

&lt;h2 id=&#34;できあがり&#34;&gt;できあがり&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/23_mao.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/20_mao.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/015/19_mao.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;装着して写真を撮ってみました！&lt;br /&gt;
結構ファッショナブルでかわいいですよね！　みなさんもぜひ作ってみてください＾＾&lt;/p&gt;

&lt;p&gt;次回の記事もお楽しみにー！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#MakerFaireTokyo2016 にウェアラブルな電子楽器を出展してきました！</title>
      <link>https://dotstud.io/blog/uko-exhibited-at-mft2016/</link>
      <pubDate>Mon, 08 Aug 2016 10:58:44 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/uko-exhibited-at-mft2016/</guid>
      
      <description>

&lt;p&gt;こんにちは！　dotstudioのメイカーエンジニア・うこです。&lt;br /&gt;
去る8月6-7日の2日間にわたって開催された、国内最大級のモノづくりの祭典「&lt;a href=&#34;http://makezine.jp/event/mft2016/&#34;&gt;Maker Faire Tokyo 2016&lt;/a&gt;」(以下MFT)に作品を出展してきました。&lt;br /&gt;
今回は個人メイカーとして制作したものを出しましたが、弊社エディターのうららがモデルとして一緒に参加してくれました。こちらの記事では、僕が出展した &lt;strong&gt;ウェアラブルなシンセサイザ「Cardiaction」&lt;/strong&gt; について紹介させていただきます。&lt;/p&gt;

&lt;h2 id=&#34;ウェアラブルシンセサイザ-cardiaction-の紹介&#34;&gt;ウェアラブルシンセサイザ「Cardiaction」の紹介&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/011/01_cardiactionurara.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「Cardiaction」とは、「心臓の〜」を意味する接頭辞cardiacと、様々な「動き」を意味するactionを組み合わせた造語です。&lt;br /&gt;
着用することで着ている人の「心電図波形」をリアルタイムに読み取って音に変換し、服表面に描かれている鍵盤を押さえることで実際に演奏することができます。&lt;br /&gt;
また、ボタンの代わりに配置したツマミによって音作りを行うことができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/011/02_myproto.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;出展者応募時は、僕自身がプロトタイプを着てデモを行ったため、&lt;a href=&#34;http://makezine.jp/event/makers2016/u-kokolab/&#34;&gt;出展者紹介ページ&lt;/a&gt;ではこのような写真が紹介されています。&lt;br /&gt;
制作段階において&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MFT本番は最も暑い時期であるため、半袖またはノースリーブであることが望ましい&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;着用モデルはカワイイ女の子のほうが圧倒的にウケがよい(超重要)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上の2点から、弊社エディターのうらら着用モデルとして、ダブルボタンのベストに近い形態のウェアラブルシンセサイザを開発することになりました。&lt;/p&gt;

&lt;p&gt;また応募時には「チーム名」を求められましたが、個人出展予定だったため10秒ほどで思いついた「u.kokolab」という安易な名義で出展することとなりました(笑)。&lt;/p&gt;

&lt;h3 id=&#34;コンセプト&#34;&gt;コンセプト&lt;/h3&gt;

&lt;p&gt;少し哲学的な話になりますので、この節は適宜読み飛ばしてください。&lt;/p&gt;

&lt;h4 id=&#34;1&#34;&gt;1.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;古代より、ヒトの肉体を駆動させている中枢、もしくは「こころ」の核となる部分は &lt;strong&gt;「心臓」&lt;/strong&gt; であると考えられてきました。(&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%BF%83&#34;&gt;Wikipedia:こころ&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;シンセサイザを主とするあらゆるすべての電子楽器は、 &lt;strong&gt;「音源」&lt;/strong&gt; を持っており、これはリアルタイムに生成されるか、メモリにあらかじめ書き込まれた状態にあります。電子楽器類はこの音源を元にして、指定された音色・音程・音量に変換できるモジュールを介して発音されることで楽器としての機能を果たしています。つまり、 &lt;strong&gt;「音源は電子楽器における心臓」&lt;/strong&gt; であるといえます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上2つの理由から、 &lt;strong&gt;「電子楽器における心臓をヒトの心臓に置き換える」&lt;/strong&gt; ことにより、機械である電子楽器とヒトが一体となることによって成立する新たな楽器という構想が生まれました。&lt;/p&gt;

&lt;h4 id=&#34;2&#34;&gt;2.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;心電図は各人が固有に持っていながら電気的に取り出せる生体信号のひとつで、指紋と同様に「同じパターンをもつ人はいない」という理由からセキュリティにも使われた例があります。(&lt;a href=&#34;https://threatpost.com/watch-like-heartbeat-monitor-seeks-to-replace-passwords/102192/&#34;&gt;関連リンク&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;バイオリンのような、奏者が音の発生元である弦に触れるようなアコースティックな楽器では、奏者による微妙な音の表現の違いというものが存在します。しかしシンセサイザのような電子楽器では、同じモデルの機体で同じ音作りのパラメータさえ設定すれば、誰が弾いても基本的には同じ音が出ます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上2つの理由から、&lt;strong&gt;「電気的に取得可能で個々人にユニークである心電図」&lt;/strong&gt; を、&lt;strong&gt;「誰が演奏しても音に違いの出ない電子楽器」&lt;/strong&gt; に適用することで、&lt;strong&gt;誰が演奏しても全く異なった音の出る電子楽器&lt;/strong&gt; を作ることができれば、との考えから「Cardiaction」の制作へとつながりました。&lt;/p&gt;

&lt;h3 id=&#34;デザイン&#34;&gt;デザイン&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/011/03_design.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ベースとした衣服はダブルボタンの制服ベストで、ボタン部分はダブルではなく非対称のシングルとし、ボタンの代わりにツマミを配置しています。また、デザインの都合上レディースモデルながら右前となっています。&lt;br /&gt;
「Cardiaction」の文字を元にしたロゴモチーフを左側に配置し、「C」の文字を電源マークにして心臓の直上に位置させています。&lt;br /&gt;
残りの文字は波形の信号に似せた形をとり、特に「i」の文字を、心電図でよく見られる特徴的なQRS波(&lt;a href=&#34;http://www.geocities.jp/pinpinkorori100/sinzou-q-a/sindenzu.html&#34;&gt;参考:心電図の基本的なみかた&lt;/a&gt;)と同様の形状としています。&lt;/p&gt;

&lt;h3 id=&#34;技術仕様&#34;&gt;技術仕様&lt;/h3&gt;

&lt;p&gt;今回の出展時点での仕様となり、今後アップデートしてゆく予定です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;同時発音数: 単音(モノフォニック)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;鍵盤数: 13鍵&lt;/li&gt;
&lt;li&gt;ピッチベンド・オクターブシフト対応&lt;/li&gt;
&lt;li&gt;オシレーター: 3(標準四肢誘導心電図による第Ⅰ誘導・第Ⅱ誘導・第Ⅲ誘導の各波形からリアルタイムサンプリング)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;音声合成方式: 筋電ノイズを含む心電図波形の減算合成とFM合成の併用&lt;/li&gt;
&lt;li&gt;フィルタ: バンドパスフィルタ*2(24dB/Oct固定、中央周波数・Q値可変)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;エンベローブ: なし&lt;/li&gt;
&lt;li&gt;LFO: なし&lt;/li&gt;
&lt;li&gt;ハードウェア(チップ): RaspberryPi3*1, Arduino Micro*2, AD8232単極誘導心電モニターモジュール*3&lt;/li&gt;
&lt;li&gt;ハードウェア(出力): USB給電ステレオスピーカー4W*1, NeopixelフルカラーLEDモジュール*40, LEDφ10赤黄緑LED*各1&lt;/li&gt;
&lt;li&gt;ハードウェア(入力): 圧力センサ*13, 可変抵抗*4, 接触位置センサ*1, スイッチ*4, 心電図計測用端子*4&lt;/li&gt;
&lt;li&gt;服生地: T/Cツイル(ポリエステル65%,綿35%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;発音に直接的には関わらない部分として、Cardiactionロゴ部分の発光があります。&lt;br /&gt;
こちらは心拍1回に対してC文字部分から一番下までのLED点滅が2周期分光るようになっています。&lt;br /&gt;
また、心起電力ベクトル(&lt;a href=&#34;http://www.udatsu.vs1.jp/axis.htm&#34;&gt;参考:「心電図：心臓電気軸」&lt;/a&gt;)を検出し、3次元ベクトルの各パラメータをそれぞれRGBの値に対応させて色を変化させるように設計しています。この色がそのまま音色の違いにも関連しています。&lt;/p&gt;

&lt;h3 id=&#34;制作課程&#34;&gt;制作課程&lt;/h3&gt;

&lt;p&gt;こちらはかなり長くなる予定ですので、別記事にして後ほどリンクを貼らせていただきたいと思います。&lt;br /&gt;
MFT当日に問い合わせていただいた皆様につきましては、少々お待ち頂ければ幸いです。&lt;/p&gt;

&lt;h2 id=&#34;デモンストレーションの様子&#34;&gt;デモンストレーションの様子&lt;/h2&gt;

&lt;p&gt;当日2日間ともかなり忙しくあまり写真や動画を撮れなかったので、Twitterから以下にいくつか引用させていただきます。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;u.kokolabさんのウェアラブルシンセサイザー。パフォーマンスが楽しそう。かわいい。&lt;a href=&#34;https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash&#34;&gt;#MakerFaireTokyo2016&lt;/a&gt; &lt;a href=&#34;https://t.co/J84vnaDYN7&#34;&gt;pic.twitter.com/J84vnaDYN7&lt;/a&gt;&lt;/p&gt; 五味@NT能登キャンプ (@GomiHgy) &lt;a href=&#34;https://twitter.com/GomiHgy/status/762150380448784385&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;うらら　うこ　お疲れ！&lt;a href=&#34;https://twitter.com/hashtag/mft2016?src=hash&#34;&gt;#mft2016&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/makerfairetokyo2016?src=hash&#34;&gt;#makerfairetokyo2016&lt;/a&gt; @ 東京ビッグサイト西ホール &lt;a href=&#34;https://t.co/XQLaqqPnht&#34;&gt;https://t.co/XQLaqqPnht&lt;/a&gt;&lt;/p&gt; のびすけ / sugawara (@n0bisuke) &lt;a href=&#34;https://twitter.com/n0bisuke/status/762221932624371712&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;間も無くu.kokolabさんのウェアラブルシンセサイザーの&amp;quot;Cardiaction&amp;quot;のデモが始まります。心電図を使ってメロディーを奏でています！&lt;br&gt;D-02-12 ブース &lt;a href=&#34;https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash&#34;&gt;#MakerFaireTokyo2016&lt;/a&gt; &lt;a href=&#34;https://t.co/0I6jDVoe32&#34;&gt;pic.twitter.com/0I6jDVoe32&lt;/a&gt;&lt;/p&gt; カサネタリウム ホリ@ NT東京 &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt; (@kasanetarium) &lt;a href=&#34;https://twitter.com/kasanetarium/status/762151112900096000&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ウェアラブルシンセめっちゃかわい〜 &lt;a href=&#34;https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash&#34;&gt;#MakerFaireTokyo2016&lt;/a&gt; &lt;a href=&#34;https://t.co/yViNlFDh9M&#34;&gt;pic.twitter.com/yViNlFDh9M&lt;/a&gt;&lt;/p&gt; Kunimi Ishii in 一条 (@141923) &lt;a href=&#34;https://twitter.com/141923/status/762193336534900736&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ウェアラブルシンセだ。太ももと腕で取ってる心電波形を音源にする。鍵盤で演奏する。ツマミも効く。実はかなりこったものである。 &lt;a href=&#34;https://twitter.com/hashtag/MFT2016?src=hash&#34;&gt;#MFT2016&lt;/a&gt; &lt;a href=&#34;https://t.co/aibrwdmVp1&#34;&gt;pic.twitter.com/aibrwdmVp1&lt;/a&gt;&lt;/p&gt; 鷲谷憲樹 (@nwashy) &lt;a href=&#34;https://twitter.com/nwashy/status/761901762118688769&#34;&gt;2016年8月6日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ウェアラブル・シンセサイザー『Cardiaction!』。服が鍵盤に、ってだけでなく、心電波形をオシレーターにして音を作っているらしい。&lt;a href=&#34;https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash&#34;&gt;#MakerFaireTokyo2016&lt;/a&gt; &lt;a href=&#34;https://t.co/Zl5TDxRfm1&#34;&gt;https://t.co/Zl5TDxRfm1&lt;/a&gt;&lt;/p&gt; 布施雄一郎 (@MRYF1968) &lt;a href=&#34;https://twitter.com/MRYF1968/status/762389212708560896&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash&#34;&gt;#MakerFaireTokyo2016&lt;/a&gt; で一番工口かった楽器。 &lt;a href=&#34;https://t.co/cGXqUuUNk9&#34;&gt;pic.twitter.com/cGXqUuUNk9&lt;/a&gt;&lt;/p&gt; クランケ (@kranke_t) &lt;a href=&#34;https://twitter.com/kranke_t/status/762296179438686208&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;楽しそうな顔してる笑&lt;a href=&#34;https://twitter.com/hashtag/MFT2016?src=hash&#34;&gt;#MFT2016&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/MakerFaireTokyo2016?src=hash&#34;&gt;#MakerFaireTokyo2016&lt;/a&gt;&lt;a href=&#34;https://t.co/OOi2SZ0nWJ&#34;&gt;https://t.co/OOi2SZ0nWJ&lt;/a&gt;&lt;/p&gt; うらら #MFT2016 (@uraranbon) &lt;a href=&#34;https://twitter.com/uraranbon/status/762181686075416576&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;makerfaireでイケてるひとを発見&lt;a href=&#34;https://twitter.com/uraranbon&#34;&gt;@uraranbon&lt;/a&gt; &lt;a href=&#34;https://twitter.com/harmoniko&#34;&gt;@harmoniko&lt;/a&gt;  &lt;a href=&#34;https://twitter.com/hashtag/MFT2016?src=hash&#34;&gt;#MFT2016&lt;/a&gt; &lt;a href=&#34;https://t.co/Pk57XR43eo&#34;&gt;pic.twitter.com/Pk57XR43eo&lt;/a&gt;&lt;/p&gt; わみ@ものづくり (@wamisnet) &lt;a href=&#34;https://twitter.com/wamisnet/status/762174015167303680&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;うこ氏 &lt;a href=&#34;https://twitter.com/harmoniko&#34;&gt;@harmoniko&lt;/a&gt; プロデュースの&lt;br&gt;LifeSynthJacket　みたいなやつ&lt;br&gt;うらら氏 &lt;a href=&#34;https://twitter.com/uraranbon&#34;&gt;@uraranbon&lt;/a&gt; やばいかわいい &lt;a href=&#34;https://t.co/YKSzfoLl8N&#34;&gt;pic.twitter.com/YKSzfoLl8N&lt;/a&gt;&lt;/p&gt; えむにわ(社会の底辺) (@m2wasabi) &lt;a href=&#34;https://twitter.com/m2wasabi/status/762159724737368064&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;MFTへの出展は今回で2回目ですが、前回以上に余裕がなく、僕自身はあまり他の展示を見て回れなかったのが残念でした。&lt;br /&gt;
そんな中でも手伝って頂いた知り合いの方々や、シンセを着たうららと共に音を出しながら会場を歩いて出しゃばっていったにも関わらず快く対応してくださったメイカーの皆様、本当にありがとうございました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;メーカーフェア、昨年以上に余裕がなくってあまりほかのブースまわれなかったり実況とか告知もできなくって大変だった……あとこの楽器、他人に触られそうになるっていうのを全く想定してなくてかなり焦った(だってギター弾いてる人のそれを触る他人なんていないでしょ)&lt;/p&gt; うこ@MFT2016 (@harmoniko) &lt;a href=&#34;https://twitter.com/harmoniko/status/762338479481065473&#34;&gt;2016年8月7日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;自分のブースに対する個人的な所感ですが……&lt;br /&gt;
MFTにおいては多くの子供たちも見に来られます。&lt;br /&gt;
前回、2015年に出した自身の作品「&lt;a href=&#34;http://ukokoras.tumblr.com/post/125635484342&#34;&gt;Vocaleaper&lt;/a&gt;」は、参加者が触りやすい形で展示をしてあり、また特に何も考えず手をかざすだけで音が鳴るというものでした。そのため、多くの子供たちに触っていただけたのですが、今回は展示の特性からもあまり子供が近寄りたいと思えるようなものでなかったと感じています。&lt;br /&gt;
個人的には、小さな世代にものづくりの楽しさをもっと知ってもらいたいと考えているため、それが実現できるミニマルなプロダクトを追加で用意しておけばよかったかな、と考えております。&lt;/p&gt;

&lt;p&gt;しかし、コンセプトだけでなく見た目にもこだわりを入れたことで、先述のツイートのように多くの方々の目に留めていただくことができました。&lt;br /&gt;
&lt;strong&gt;自分の手で一から作り上げたモノを評価していただけるのは、何十回何百回となくやっていてもとても嬉しいものですね！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;次回出展予定&#34;&gt;次回出展予定&lt;/h2&gt;

&lt;p&gt;ウェアラブルシンセサイザ「Cardiaction」は、次回は8月26日(金)にアスキーの主催による「&lt;a href=&#34;http://ascii.jp/elem/000/001/202/1202368/&#34;&gt;IoT＆H/W BIZ DAY 2 by ASCII STARTUP&lt;/a&gt;」に出展します。&lt;br /&gt;
こちらではメイカー・うこの所属元であるdotstudio株式会社として出展の予定です。なお現時点では販売可能なプロダクトではありませんが、希望者が万が一いらっしゃったら……？ご期待くださいませ。&lt;br /&gt;
ご来場のほどを一同お待ちしております！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JS1行でリアルタイム通信ができる「milkcocoa」のLT大会で登壇してきた！</title>
      <link>https://dotstud.io/blog/milkcocoa-battle-lightning-talk/</link>
      <pubDate>Fri, 05 Aug 2016 09:57:09 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/milkcocoa-battle-lightning-talk/</guid>
      
      <description>

&lt;p&gt;こんにちは！　dotstudioのエディター、うららです。非エンジニアですが、先日バックエンドサービス「&lt;a href=&#34;https://mlkcca.com/&#34;&gt;milkcocoa&lt;/a&gt;」のLT大会「&lt;strong&gt;紅白milkcocoa合戦&lt;/strong&gt;」に参加してきました！&lt;/p&gt;

&lt;p&gt;とても刺激的なイベントだったので、当日の様子をまとめます！&lt;/p&gt;

&lt;h2 id=&#34;男女対抗で戦う-紅白milkcocoa合戦-とは&#34;&gt;男女対抗で戦う「紅白milkcocoa合戦」とは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/005/01_milkcocoa.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;http://mlkcca.connpass.com/event/34936/&#34;&gt;【増枠】紅白 Milkcocoa 合戦！【祭り】&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;バックエンドサービス「milkcocoa」をテーマに、男女5名ずつが紅白チームに分かれて競ったのが「紅白milkcocoa合戦」というイベント。1人5分ずつライトニングトークを繰り広げるという内容でした。&lt;/p&gt;

&lt;p&gt;簡単にmilkcocoaの説明をすると、&lt;strong&gt;JavaScriptのソースコードを1行挿入するだけで、リアルタイム通信ができるようになる&lt;/strong&gt; という感じです。Webサービス、特にリアルタイムな通信を必要とするWebサービスではバックエンドの構築が必要不可欠。そんなとき、milkcocoaを使えばバックエンド未経験の人でも簡単にリアルタイム通信ができるようになるという代物です。&lt;/p&gt;

&lt;h2 id=&#34;わたしが発表したもの&#34;&gt;わたしが発表したもの&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/005/02_urara.png&#34; alt=&#34;&#34; /&gt;
私が発表したのは、がじぇるねが制作しているマイコンボード「&lt;a href=&#34;http://gadget.renesas.com/ja/product/cotton.html&#34;&gt;GR-COTTON&lt;/a&gt;」とmilkcocoaを組み合わせて、
「&lt;strong&gt;パソコン上から部屋の温度がわかる&lt;/strong&gt;」という仕組み。私はHTMLとCSSしかできないので、1990年代風のWebサイトにしてみました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;aa68f3d1934d480f9a3a26a6062ffa9b&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;当日発表したプレゼン資料はこちらです。作り方も書いてあるのでぜひ試してみてください。&lt;/p&gt;

&lt;h2 id=&#34;イベントの様子&#34;&gt;イベントの様子&lt;/h2&gt;

&lt;p&gt;「milkcocoa合戦」では、合計で11名の方が登壇しています。せっかくなので、その中から個人的なベスト3を紹介してみます。&lt;/p&gt;

&lt;h3 id=&#34;たみーさんの-オンラインで名刺を交換できるサービス&#34;&gt;たみーさんの「オンラインで名刺を交換できるサービス」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/005/03_pokemon.png&#34; alt=&#34;&#34; /&gt;
エンジニアって紙文化ないのに、未だに紙の名刺を交換するのはどうなの……？　ということでたみーさんが作ったのは「&lt;strong&gt;オンラインで名刺を交換できる&lt;/strong&gt;」サービス。&lt;strong&gt;自身をポケモンにみたてて、友達になったらくっつく&lt;/strong&gt; というめちゃくちゃかわいいものでした。&lt;/p&gt;

&lt;h3 id=&#34;かよこさんの-笑顔が減るとソウルジェムが濁るツール&#34;&gt;かよこさんの「笑顔が減るとソウルジェムが濁るツール」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/005/04_souljem.png&#34; alt=&#34;&#34; /&gt;
「エンジニアになってから笑っていない」というかよこさんは、&lt;strong&gt;表情を判定し、笑顔が減るとソウルジェムが濁り、笑うと綾野剛からメッセをくれる&lt;/strong&gt; という仕組みを作りました！　ソウルジェムは、アニメ『魔法少女まどかマギカ』で登場する重要なアイテム。アイデアが素晴らしすぎますし、悩みも解決されていて尊敬の念しかありません。&lt;/p&gt;

&lt;h3 id=&#34;うこの-webから色を変えられるランタン&#34;&gt;うこの「Webから色を変えられるランタン」&lt;/h3&gt;

&lt;!-- ![](/img/blog/005/05_lantern.png) --&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-video&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;おー！すげえ！ webから操作 &lt;a href=&#34;https://twitter.com/hashtag/mlkcca?src=hash&#34;&gt;#mlkcca&lt;/a&gt; &lt;a href=&#34;https://t.co/RP2YBn7uOk&#34;&gt;pic.twitter.com/RP2YBn7uOk&lt;/a&gt;&lt;/p&gt; タカシにヒロシ (@bakuonboogie) &lt;a href=&#34;https://twitter.com/bakuonboogie/status/755728357258436608&#34;&gt;2016年7月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;dotstudioのメイカーであるうこは、100円ショップのランタンの光の色を、Webから操作できるという仕組みを作ってました。一斉にみんなで操作をしたので、ランタンが荒ぶる状態に。&lt;/p&gt;

&lt;h3 id=&#34;ほかにもいろいろなltが繰り広げられました&#34;&gt;ほかにもいろいろなLTが繰り広げられました！&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;世界中で大人気の箱庭ゲーム『Minecraft』からスライドをめくれる仕組みをつくったいわたん（ &lt;a href=&#34;http://twitter.com/iwata_n&#34;&gt;@iwata_n&lt;/a&gt; ）さん&lt;/li&gt;
&lt;li&gt;洗濯が終わったら通知がくるようなおうちハックに挑戦してみた、しのはら（ &lt;a href=&#34;https://twitter.com/shanonim&#34;&gt;@shanonim&lt;/a&gt; ）さん&lt;/li&gt;
&lt;li&gt;いま一番ちゃらいらしいReact, redux, redux-sagaをつかってみたという &lt;a href=&#34;http://twitter.com/mookjp&#34;&gt;@mookjp&lt;/a&gt; さん&lt;/li&gt;
&lt;li&gt;milkcocoaでほしかったツールを追加した「bitter-coffee」をつくりあげたもし（ &lt;a href=&#34;https://twitter.com/moshisora990&#34;&gt;@moshisora990&lt;/a&gt;）さん&lt;/li&gt;
&lt;li&gt;麻雀用のアプリを作り、裏側にmilkcocoaを入れたというなつみ（&lt;a href=&#34;https://twitter.com/natsumi_m31&#34;&gt;@natsumi_m31&lt;/a&gt;）さん&lt;/li&gt;
&lt;li&gt;ハムスターのために、milkcocoaで室温を管理してみたへれんさん（3時間経つと自動でエアコンが切れる部屋にいるそうな……）&lt;/li&gt;
&lt;li&gt;マグネットで壁にくっついて、垂直に走るラジコン「うぉーるぼっとESP」を作ったという勝さん&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;結果&#34;&gt;結果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/005/06_m2w.png&#34; alt=&#34;&#34; /&gt;
女性陣の紅組と、男性陣の白組。どちらが勝つかは、えむにわ氏がつくった投票システムで決めました。結果、&lt;strong&gt;紅組（女性陣）の圧倒的な勝利&lt;/strong&gt; となったようです。やったー！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/005/07_sticker.png&#34; alt=&#34;&#34; /&gt;
勝利の記念にもらったのは、mbedステッカーと「GR-SAKURA」。&lt;/p&gt;

&lt;p&gt;登壇だけで終わるのではなく、&lt;strong&gt;投票がおこなわれたり、景品をもらえたり&lt;/strong&gt; といった仕組みは久しぶりでした。ドキドキした。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;milkcocoaの次回開催予定は未定ですが、ほかにも &lt;strong&gt;IoTの勉強会やWebVRのイベントなどが開催予定&lt;/strong&gt; です！　特に &lt;strong&gt;Webエンジニアのみなさん&lt;/strong&gt; にとって実りのあるものがあると思うので、ぜひ参加してみてください！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2016年8月8日（月）&lt;a href=&#34;http://web3dj.connpass.com/event/32568/&#34;&gt;WebVR入門者の会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2016年8月12日（金）&lt;a href=&#34;http://iotlt.connpass.com/event/35436/&#34;&gt;IoT縛りの勉強会! IoTLT vol.18 @ Amazon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;今日はmilkcocoa紅白合戦にご参加くださりありがとうございました😂💫登壇者の方々の発表は全部新しい視点をもらえたり笑えるところがあったり、楽しませてもらいました。ありがとうございます。また次お会いしましょう🙋🍻&lt;a href=&#34;https://twitter.com/hashtag/mlkcca?src=hash&#34;&gt;#mlkcca&lt;/a&gt; &lt;a href=&#34;https://t.co/PdUrDdivbU&#34;&gt;pic.twitter.com/PdUrDdivbU&lt;/a&gt;&lt;/p&gt; Milkcocoa girls (@milkcocoagirls) &lt;a href=&#34;https://twitter.com/milkcocoagirls/status/755757758931095556&#34;&gt;2016年7月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;
では！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>