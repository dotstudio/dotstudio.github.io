<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/blog/</link>
    <description>Recent content in Blogs on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Thu, 08 Feb 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScriptで開発できる！Mongoose OSでNefry BTをLチカしよう</title>
      <link>https://dotstud.io/blog/mongoose-os-nefry-blink/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/mongoose-os-nefry-blink/</guid>
      
      <description>

&lt;p&gt;唐突ですが、森田(&lt;a href=&#34;https://twitter.com/morita_pac&#34;&gt;@morita_pac&lt;/a&gt;)と申します。&lt;/p&gt;

&lt;p&gt;ヘビーNefryBTユーザです。持ち歩いていろんな場所でNefry BTを利用したり、ケースを作ったりもしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/145/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通常Nefry BTはArduino言語でプログラムするのですが、今回はJavaScriptで書き込めるようにしたいと思います。&lt;/p&gt;

&lt;p&gt;※この記事内のプログラムはNefy BT（無印）向けです。Nefry BT R2向けのプログラムは別途準備中です。&lt;/p&gt;

&lt;h2 id=&#34;javascriptで開発できるmongoose-osとは&#34;&gt;JavaScriptで開発できるMongoose OSとは&lt;/h2&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://mongoose-os.com/&#34;&gt;Mongoose OS&lt;/a&gt;というIoTのプロト開発を簡単にできるサービスを利用します。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;https://mongoose-os.com/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/145/2.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
▲ Mongoose OS公式サイト
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Mongoose OSでは、ESP32やESP8266へJavaScript（&lt;a href=&#34;https://github.com/cesanta/mjs&#34;&gt;mJS&lt;/a&gt;）でコードを書き込めます。
さらには、セキュアで、AWS IoTやGoogleのCloud IoT Coreなどとも連携設定がシンプルにできます。&lt;/p&gt;

&lt;p&gt;Mongoose OSをインストールしている間は元のNefry BTのプログラムは利用できなくなります。（Arduino IDEで書き込むことですぐに戻せます。）&lt;/p&gt;

&lt;h2 id=&#34;mongoose-osの開発環境をセットアップ&#34;&gt;Mongoose OSの開発環境をセットアップ&lt;/h2&gt;

&lt;h3 id=&#34;windowsの場合&#34;&gt;Windowsの場合&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://mongoose-os.com/software.html&#34;&gt;Download Page&lt;/a&gt;から、exeをダウンロードするだけで使えます。（アンチウイルス系のソフトが反応するかもしれません。）なお、以降MacOSでの説明になります。
&lt;img src=&#34;https://dotstud.io/img/blog/145/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mac-osの場合&#34;&gt;Mac OSの場合&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://mongoose-os.com/software.html&#34;&gt;Download Page&lt;/a&gt;の、MacOS/Linuxのcurlコマンドをターミナルで実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://mongoose-os.com/downloads/mos/install.sh | /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/145/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ターミナルで以下のようになれば無事完了です。開く場合は、Runの&lt;code&gt;/xxx/.mos/bin/mos&lt;/code&gt;を実行するとWeb UIが開きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://mongoose-os.com/downloads/mos/install.sh | /bin/bash
Downloading https://mongoose-os.com/downloads/mos-release/mac/mos ...
########################################################################
 100.0%
Installing into /xxx/.mos/bin/mos ...
Adding /xxx/.mos/bin to your PATH in /xxx/.profile
SUCCESS: /xxx/.mos/bin/mos is installed.
Run &#39;/xxx/.mos/bin/mos --help&#39; to see all available commands.
Run &#39;/xxx/.mos/bin/mos&#39; without arguments to start a simplified Web UI installer.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;いざ-mongoose-osをnefry-btに入れてみよう&#34;&gt;いざ、Mongoose  OSをNefry BTに入れてみよう&lt;/h2&gt;

&lt;p&gt;Nefry BTをUSBポートに差し込み、Mongose OSとサンプルコードをFlashします。（次回起動時は、ポート選択のみで利用可能です。）&lt;/p&gt;

&lt;p&gt;Mongoose OSのWeb UIは、ブラウザで開きます。①②③の設定が完了すれば無事、JavaScriptで書き込む準備完了です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/145/5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;①は、Nefry BTのポートを選択します。ポートが見つからない場合はUSBを認識させるための&lt;a href=&#34;https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers&#34;&gt;ドライバ&lt;/a&gt;をインストールする必要があります。
②では、Platformで「esp32」とapp「demo-js」を選択し「Flash」ボタンをクリックし、処理が終わるまで待ちます。
③では、Wi-fi設定を行います。（今回は必須ではないです。）
全ての設定が完了したら、「Done」ボタンをおしてdevice setupを閉じます。&lt;/p&gt;

&lt;h1 id=&#34;4-基本的なweb-uiとサンプルプログラム&#34;&gt;4. 基本的なWeb UIとサンプルプログラム&lt;/h1&gt;

&lt;h3 id=&#34;web-uiについて&#34;&gt;Web UIについて&lt;/h3&gt;

&lt;p&gt;まず、画面左側Device Filesを選択します。すると、init.jsが選択され、メインプログラムが表示されます。init.jsファイルをメインで編集します。&lt;/p&gt;

&lt;p&gt;編集後、書き込みたい場合は、Save + Rebootボタンで行えます。このコードやファイルの情報は、端末から読んでいますので、コードを書き換えたら、書き込む前にバックアップを取っておくことをお勧めします。
&lt;img src=&#34;https://dotstud.io/img/blog/145/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;サンプルプログラムについて&#34;&gt;サンプルプログラムについて&lt;/h3&gt;

&lt;p&gt;デフォルトプログラムを僕の感性でコメントしましたので、ご確認ください。なお、色々と制限付きのJSなので、仕様は&lt;a href=&#34;https://github.com/cesanta/mjs&#34;&gt;こちら&lt;/a&gt;で確認ください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js:init.js&#34;&gt;// 利用するAPIを読み出します。Flashした時点のサンプルAPIが呼ばれています。
// 各APIの仕様やサンプルは画面左のファイル一覧で参照可能です。
load(&#39;api_config.js&#39;);
load(&#39;api_events.js&#39;);
load(&#39;api_gpio.js&#39;);
load(&#39;api_mqtt.js&#39;);
load(&#39;api_net.js&#39;);
load(&#39;api_sys.js&#39;);
load(&#39;api_timer.js&#39;);

// 変数宣言はletのみです。const, varは使えません。
let led = Cfg.get(&#39;pins.led&#39;);
let button = Cfg.get(&#39;pins.button&#39;);
let topic = &#39;/devices/&#39; + Cfg.get(&#39;device.id&#39;) + &#39;/events&#39;;

print(&#39;LED GPIO:&#39;, led, &#39;button GPIO:&#39;, button);

let getInfo = function() {
  return JSON.stringify({
    total_ram: Sys.total_ram(),
    free_ram: Sys.free_ram()
  });
};

// 1秒おきにLEDをチカチカさせてます。ついでにチクタク時を刻んでいます。
GPIO.set_mode(led, GPIO.MODE_OUTPUT);
Timer.set(1000 /* 1 sec */, Timer.REPEAT, function() {
  let value = GPIO.toggle(led);
  print(value ? &#39;Tick&#39; : &#39;Tock&#39;, &#39;uptime:&#39;, Sys.uptime(), getInfo());
}, null);

// リセットボタンではない方のボタンを押すとMQTTでpublishします。
GPIO.set_button_handler(button, GPIO.PULL_UP, GPIO.INT_EDGE_NEG, 200, function() {
  let message = getInfo();
  let ok = MQTT.pub(topic, message, 1);
  print(&#39;Published:&#39;, ok, topic, &#39;-&amp;gt;&#39;, message);
}, null);

// ネットワークモニタです。
Event.addGroupHandler(Net.EVENT_GRP, function(ev, evdata, arg) {
  let evs = &#39;???&#39;;
  if (ev === Net.STATUS_DISCONNECTED) {
    evs = &#39;DISCONNECTED&#39;;
  } else if (ev === Net.STATUS_CONNECTING) {
    evs = &#39;CONNECTING&#39;;
  } else if (ev === Net.STATUS_CONNECTED) {
    evs = &#39;CONNECTED&#39;;
  } else if (ev === Net.STATUS_GOT_IP) {
    evs = &#39;GOT_IP&#39;;
  }
  print(&#39;== Net event:&#39;, ev, evs);
}, null);

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nefry-btのフルカラーledを点灯しよう&#34;&gt;Nefry BTのフルカラーLEDを点灯しよう&lt;/h2&gt;

&lt;p&gt;やっと本題に入ります。&lt;/p&gt;

&lt;p&gt;Mongoose OSでは、様々なオープンソースコードがあり、それをインポートすることができます。今回は、NefryBTのフルカラーLEDを点灯させるためにNeoPixelのサンプルコードを入手します。&lt;/p&gt;

&lt;p&gt;画面左のProjectsを選択し、Importをクリックします。
&lt;img src=&#34;https://dotstud.io/img/blog/145/7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;App Managerのサーチ部分に「neopixel」と入力し、HARDWAREから「example-neopixel-js」をimportします。完了したらApp Managerの画面を閉じます。
&lt;img src=&#34;https://dotstud.io/img/blog/145/8.png&#34; alt=&#34;&#34; /&gt;
次に、サンプルプログラムをNefryBTに書き込みます。&lt;/p&gt;

&lt;p&gt;今ImportしたAppが選択されていることを確認し、①Rebuildアイコンと②Flashアイコンを処理が完了次第、順番にクリックすることで書き込み完了です。（それぞれ少々時間がかかります。）
&lt;img src=&#34;https://dotstud.io/img/blog/145/9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Device Filesのinit.jsの内容を以下の内容に書き換えます。Nefry BTのボタンを押したらフルカラーLEDが点灯するという内容のプログラムです。&lt;/p&gt;

&lt;p&gt;※なお、R2に関しては動作確認中ですので、確認次第内容を変更いたします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js:init.js&#34;&gt;load(&#39;api_config.js&#39;);
load(&#39;api_events.js&#39;);
load(&#39;api_gpio.js&#39;);
load(&#39;api_sys.js&#39;);
load(&#39;api_timer.js&#39;);
load(&#39;api_neopixel.js&#39;);

// 今回は一部しか利用していませんが、NefryのピンNoです。
let pin = {
    &amp;quot;nefrybt&amp;quot;:{
      &amp;quot;sw&amp;quot;: 4,
      &amp;quot;d0&amp;quot;:22,
      &amp;quot;d1&amp;quot;:21,
      &amp;quot;d2&amp;quot;:23,
      &amp;quot;d3&amp;quot;:19,
      &amp;quot;d4&amp;quot;:18,
      &amp;quot;a0&amp;quot;:25,
      &amp;quot;a1&amp;quot;:26,
      &amp;quot;a2&amp;quot;:32,
      &amp;quot;a3&amp;quot;:33,
      &amp;quot;a4&amp;quot;:27,
      &amp;quot;a5&amp;quot;:14,
      &amp;quot;a6&amp;quot;:13,
      &amp;quot;a7&amp;quot;:35,
      &amp;quot;LED&amp;quot;:16
    },
    &amp;quot;nefrybtR2&amp;quot;:{
      &amp;quot;sw&amp;quot;: 4,
      &amp;quot;d0&amp;quot;:22,
      &amp;quot;d1&amp;quot;:21,
      &amp;quot;d2&amp;quot;:23,
      &amp;quot;d3&amp;quot;:19,
      &amp;quot;d4&amp;quot;:18,
      &amp;quot;d5&amp;quot;:25,
      &amp;quot;d6&amp;quot;:26,
      &amp;quot;d7&amp;quot;:13,
      &amp;quot;d8&amp;quot;:14,
      &amp;quot;a0&amp;quot;:33,
      &amp;quot;a1&amp;quot;:32,
      &amp;quot;a2&amp;quot;:39,
      &amp;quot;a3&amp;quot;:36,
      &amp;quot;LED&amp;quot;:16
    }
  };


// フルカラーLEDのピンと個数、オーダーを指定しています。
let Lpin = pin.nefrybt.LED, numPixels = 1, colorOrder = NeoPixel.GRB;

// api_neopixel.jsに基づき初期化を行います。
let strip = NeoPixel.create(Lpin, numPixels, colorOrder);
strip.clear();
strip.setPixel(0,0,0,0);
strip.show();

// ボタンを押したら赤色をつけます。setpixel(0,0,0,0)は、ピクセルナンバーとRGBになっています。Redの数字は20としていますが、数字をあげるとかなり明るくなります。
// GPIO.set_button_handlerの仕様は、
GPIO.set_button_handler(4, GPIO.PULL_UP, GPIO.INT_EDGE_NEG, 200, function() {
    strip.clear();
    strip.setPixel(0,20,0,0);
    strip.show();
}, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;困った時は&#34;&gt;困った時は&lt;/h2&gt;

&lt;p&gt;Q. DeviceLogsにエラーがでている。&lt;/p&gt;

&lt;p&gt;A. Mongoose OS画面右上のdevice setupより、ポートを選択し直してください。それでも治らない場合は、ターミナルにて、&lt;code&gt;control+c&lt;/code&gt;でMongoose OSを一度終わらせて、再起動をしてみてください。&lt;/p&gt;

&lt;p&gt;それでもエラーが発生する場合は、一度Arduino IDEからNefry BTをボードに選択し、何も書いていないコードで書き込み直してください。なお、Nefry BTの状態に戻したい場合もArduino IDEから書き込むことで初期状態にもどせます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Nefry BTをJavaScriptでプログラムして、LEDを点灯させるところまでできました。&lt;/p&gt;

&lt;p&gt;ディスプレイも表示させることができるので、次回は、Mongoose OSを使ったディスプレイの表示方法をご紹介しようと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IoTも私らしく！楽しく学べる「IoT女子会」のクリスマスイベント潜入レポ</title>
      <link>https://dotstud.io/blog/iot-girls2-xmas-handson/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/iot-girls2-xmas-handson/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとくです。12月22日にDMM.make AKIBAで開催された「&lt;strong&gt;&lt;a href=&#34;https://peatix.com/event/328302&#34;&gt;IoT女子会 女性限定・お土産付き♡ ディップアートで光る クリスマスオーナメントワークショップ&lt;/a&gt;&lt;/strong&gt;」に参加してきました！&lt;/p&gt;

&lt;p&gt;楽しく学べて内容もりだくさんだったイベントの様子をレポートします！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/10.png&#34; alt=&#34;&#34; /&gt;
３回目の今回も、たくさんの女性で大盛況でした！
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;iot女子会とは&#34;&gt;IoT女子会とは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/140/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;DMM.make AKIBA主催の「IoT女子会」は今回で第3回目。2017年6月の立ち上げを皮切りに、女性ならではのモノづくりやIoT分野で活躍する女性にフォーカスしたイベントを開催されています。&lt;/p&gt;

&lt;p&gt;「IoT」という言葉が流行って久しいですが「便利なモノ・欲しいモノ」は年齢・性別・職業など立場によって違うはず。画一的・汎用的なIoTデバイスだけでなく、「&lt;strong&gt;自分らしいIoTなモノ作りを実現したい&lt;/strong&gt;」と考える女性にぴったりのイベントです。&lt;/p&gt;

&lt;p&gt;第1回・第2回のIoT女子会ではモデレータとして参加させていただきました！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;https://dotstud.io/blog/iot-girls-chantoku-report/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/140/link.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
▲ 第1回IoT女子会イベントレポート
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;https://inside.dmm.com/entry/2017/10/10/iot-girl&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/140/link2.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
▲ 第2回IoT女子会イベントレポート by あくやん氏
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;そのデバイス-本当に私らしい&#34;&gt;そのデバイス、本当に私らしい？&lt;/h2&gt;

&lt;p&gt;まず「私らしいIoTの実現ってなんだろう」を考えるところから会はスタート。TVのリモコンを例に、誰もが使えるように作られた、&lt;strong&gt;機能重視、わかりやすさ重視のデバイスって本当に私らしいだろうか？&lt;/strong&gt; という部分に立ち返って考えてみます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/2.png&#34; alt=&#34;&#34; /&gt;
▲ 講師を務めるのは合同会社techika代表・乙女電芸部部長 矢島佳澄氏
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;例えば朝にはTVでニュースが、夜にはリラックスできる音楽が流れる「私らしい暮らし」、自分の好きなテイストに揃えたインテリアに溶け込む「私らしい見た目」。人それぞれ違う、&lt;strong&gt;好きな見た目と必要な機能だけを備えたデバイスで「私らしい暮らし」を実現&lt;/strong&gt;できればステキですよね。&lt;/p&gt;

&lt;p&gt;テクノロジーで実現する私らしい暮らしの第一歩、ということで、今回は電子工作の基礎を学びつつオーナメント作りに挑戦してみます！&lt;/p&gt;

&lt;h2 id=&#34;ディップアートで光るオーナメントづくり&#34;&gt;ディップアートで光るオーナメントづくり！&lt;/h2&gt;

&lt;p&gt;今回作る「ディップアートで光るオーナメント」は、「ものづくりをエンターテイメントにする」をテーマに活動する&lt;a href=&#34;http://makership.co.jp/&#34;&gt;Makershp Inc.&lt;/a&gt; 発案の子供向けワークショップで作っていたものをアレンジしたもの。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/15.png&#34; alt=&#34;&#34; /&gt;
▲ Makership Inc. CEO 高野 慎太郎氏
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ワイヤーとディップ液（マニキュアのような液）で作る「ディップアート」に、スイッチのON/OFFでライトアップできる機構を加えたオーナメントを作っていきます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/13.png&#34; alt=&#34;&#34; /&gt;
サンプルの作品。実際に作ってみるとわかるが、かなりレベルが高い。
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;まずは回路を作成&#34;&gt;まずは回路を作成&lt;/h3&gt;

&lt;p&gt;入門といえど、しっかり回路設計からお勉強。今回は電池駆動でLEDモジュールを動かすシンプルな機構です。
&lt;img src=&#34;https://dotstud.io/img/blog/140/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「ジャンパワイヤってどれでしょう？」や「ブレッドボードの電流の向き」など、電子工作の基礎の基礎から学んでいきました！
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/4.png&#34; alt=&#34;&#34; /&gt;
▲ 電池はスポンサーのRSコンポーネンツさんのご提供
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ブレッドボードを使って、はんだづけなしで機構は完成。スイッチでLEDがON/OFFできます。
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/5.png&#34; alt=&#34;&#34; /&gt;
▲ 飾るときに外れないよう、ブレッドボード側は全てグルーガンで固定！
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;ディップオーナメントで自由にデコ&#34;&gt;ディップオーナメントで自由にデコ！&lt;/h3&gt;

&lt;p&gt;LED部分ができたら、お楽しみの（？）ディップアート！針金で好きな形を作り、赤・緑・白など好きな色のディップ液に浸していきます。
&lt;img src=&#34;https://dotstud.io/img/blog/140/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;サンプルにあった風船や葉っぱに加えて、立体的なお花やハートなど個性的な作品が次々に生まれていきます！
&lt;img src=&#34;https://dotstud.io/img/blog/140/16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/8.png&#34; alt=&#34;&#34; /&gt;
▲ ある一角には草が量産されていた
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/17.png&#34; alt=&#34;&#34; /&gt;
▲ ファンシーな蝶と風船を作りたかったちゃんとく氏
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;個性的なオーナメントが完成&#34;&gt;個性的なオーナメントが完成！&lt;/h3&gt;

&lt;p&gt;メイソン・ジャーに、ディップアートとLEDを飾ったらオーナメントは完成！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/18.png&#34; alt=&#34;&#34; /&gt;
▲ ちゃんとく作・ディップアートで光るオーナメント
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ちょっとばかり雑で瓶の向きも間違ってるけど、自分で作ったものは愛着が湧いてかわいい……！&lt;/p&gt;

&lt;p&gt;参加者のみなさんの作品それぞれ個性的でとってもステキでした！
&lt;img src=&#34;https://dotstud.io/img/blog/140/19.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;恒例の豪華な懇親会-お土産で交流&#34;&gt;恒例の豪華な懇親会＆お土産で交流！&lt;/h2&gt;

&lt;p&gt;モノづくりのあとは、美味しいご飯で懇親会！いろいろな形でIoTへの思いを持つ女性たちで、モノづくりの聖地・秋葉原の夜が盛り上がりました。
&lt;img src=&#34;https://dotstud.io/img/blog/140/12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/140/20.png&#34; alt=&#34;&#34; /&gt;
▲ お酒はリカーイノベーション株式会社さんからのご提供
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;性別、立場などマイノリティに関係なく、テクノロジーでみんながステキな暮らしを実現できる世界もそう遠くないのでは、と思わされるイベントでした。IoT女子会の最新情報は&lt;a href=&#34;https://www.facebook.com/groups/184023265513094/&#34;&gt;Facebookグループ&lt;/a&gt;をウォッチ！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nefry BT（ESP32）からBLEでNode.jsにデータを送ってみよう</title>
      <link>https://dotstud.io/blog/nefrybt-ble-bluetooth-peripheral/</link>
      <pubDate>Fri, 12 Jan 2018 23:58:16 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nefrybt-ble-bluetooth-peripheral/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表ののびすけ（&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;@n0bisuke&lt;/a&gt;）です。Nefry BTを使ってBluetooth / BLEを利用する方法を紹介します。&lt;/p&gt;

&lt;p&gt;ほぼESP32のコードなので、検証してませんが他のESP32系のボードでも動作すると思います。&lt;/p&gt;

&lt;h2 id=&#34;bleについて&#34;&gt;BLEについて&lt;/h2&gt;

&lt;p&gt;BLEには大きく分け&lt;strong&gt;Peripheral （ペリフェラル）&lt;/strong&gt;と&lt;strong&gt;Central（セントラル）&lt;/strong&gt;という二つの役割があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Peripheral: 発信側端末、ビーコンやBLEタグなど受信端末に対して情報を送る側&lt;/li&gt;
&lt;li&gt;Central: 受信側端末、iPhoneやMacなどBLEデバイスの情報を探して受け取る側&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/143/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nefry BTは書き込むコードによって、PeripheralにもCentralにもなることができます。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Arduino IDE 1.8.5&lt;/li&gt;
&lt;li&gt;Nefry ライブラリ 1.1.4&lt;/li&gt;
&lt;li&gt;Nefry BT R2&lt;/li&gt;
&lt;li&gt;macOS High Sierra&lt;/li&gt;
&lt;li&gt;Node.js v9.2.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;peripheralの作成&#34;&gt;Peripheralの作成&lt;/h2&gt;

&lt;p&gt;情報発信側のPeripheralをNefry BTで作成します。&lt;/p&gt;

&lt;h3 id=&#34;uuidの作成&#34;&gt;UUIDの作成&lt;/h3&gt;

&lt;p&gt;BLEを利用するためには&lt;strong&gt;SERVICE（サービス）&lt;/strong&gt;と&lt;strong&gt;CHARACTERISTIC（キャラクタリスティック）&lt;/strong&gt;という各機能を司るUUIDを設定する必要があります。プログラミングでいうクラスとメソッドの関係だと思うと良いかもしれません。&lt;/p&gt;

&lt;p&gt;BLEデバイスは部屋の中やカフェ、駅などいたるところに存在するのでそれらのデバイスと自分が所持しているデバイスのIDが競合しないようにユニークな値にする必要があります。そこでUUIDを作成し、設定する必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.uuidgenerator.net/&#34;&gt;https://www.uuidgenerator.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/143/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このサイトでUUIDが作成出きるので各自作成しましょう。&lt;/p&gt;

&lt;h3 id=&#34;nefry-btのスケッチ&#34;&gt;Nefry BTのスケッチ&lt;/h3&gt;

&lt;p&gt;大元のコードはnkolban氏の&lt;a href=&#34;https://github.com/nkolban/ESP32_BLE_Arduino/blob/f8fe9d7cdfb20caa54b70849826d1ac6e375ff78/examples/BLE_notify/BLE_notify.ino&#34;&gt;こちらのコード&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#define SERVICE_UUID&lt;/code&gt;の箇所と&lt;code&gt;#define CHARACTERISTIC_UUID&lt;/code&gt;の箇所に先ほど作成したUUIDを指定します。&lt;/p&gt;

&lt;p&gt;また&lt;code&gt;BLEDevice::init(&amp;quot;&amp;quot;);&lt;/code&gt;の箇所にBLEデバイスの名前を設定できます。
以下のコードではNefryBT-n0bisukeという名前を指定しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;BLEDevice.h&amp;gt;
#include &amp;lt;BLEServer.h&amp;gt;
#include &amp;lt;BLEUtils.h&amp;gt;
#include &amp;lt;BLE2902.h&amp;gt;

BLECharacteristic *pCharacteristic;
bool deviceConnected = false;
uint8_t value = 0;

// See the following for generating UUIDs:
// https://www.uuidgenerator.net/

#define SERVICE_UUID        &amp;quot;D5875408-FA51-4763-A75D-7D33CECEBC31&amp;quot;
#define CHARACTERISTIC_UUID &amp;quot;A4F01D8C-A037-43B6-9050-1876A8C23584&amp;quot;

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
    }
};

void setup() {
  Serial.begin(115200);

  // Create the BLE Device
  BLEDevice::init(&amp;quot;NefryBT-n0bisuke&amp;quot;);

  // Create the BLE Server
  BLEServer *pServer = BLEDevice::createServer();
  pServer-&amp;gt;setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  BLEService *pService = pServer-&amp;gt;createService(SERVICE_UUID);

  // Create a BLE Characteristic
  pCharacteristic = pService-&amp;gt;createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );

  // https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml
  // Create a BLE Descriptor
  pCharacteristic-&amp;gt;addDescriptor(new BLE2902());

  // Start the service
  pService-&amp;gt;start();

  // Start advertising
  pServer-&amp;gt;getAdvertising()-&amp;gt;start();
  Serial.println(&amp;quot;Waiting a client connection to notify...&amp;quot;);
}

void loop() {

  if (deviceConnected) {
    Serial.printf(&amp;quot;*** NOTIFY: %d ***\n&amp;quot;, value);
    char buffer[10];
    sprintf(buffer, &amp;quot;{\&amp;quot;val\&amp;quot;:%d}&amp;quot;, value);
    Serial.printf(buffer);
    pCharacteristic-&amp;gt;setValue(buffer);
    pCharacteristic-&amp;gt;notify();
    //pCharacteristic-&amp;gt;indicate();
    value++;
  }
  delay(2000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンパイルエラーが出ないで書き込みが出来ればOKです。&lt;/p&gt;

&lt;h3 id=&#34;確認&#34;&gt;確認&lt;/h3&gt;

&lt;p&gt;デバッグには&lt;a href=&#34;https://itunes.apple.com/jp/app/lightblue/id639944780?mt=12&#34;&gt;LightBlue&lt;/a&gt;などのBLEデバッグ用のアプリケーションを利用することをお勧めします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/143/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nefry BTが起動すると先ほど指定した&lt;strong&gt;NefryBT-n0bisuke&lt;/strong&gt;という名前でBLEデバイスが検出されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/143/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;SERVICEのUUIDやCHARACTERISTICのUUIDも先ほど指定したものが表示されていると思います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;これで問題なく、Nefry BTから情報が発信されていることが確認出来ました。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;centralの作成&#34;&gt;Centralの作成&lt;/h2&gt;

&lt;p&gt;次は受信側のCentralを作成していきます。
データの確認だけであれば先ほどのLightBlueなどのアプリで確認でも良いのですが、自分のサービスに組み込む際には何かしらのプログラミング言語でアクセスできた方が都合が良いです。&lt;/p&gt;

&lt;h3 id=&#34;nobleの利用&#34;&gt;nobleの利用&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sandeepmistry/noble&#34;&gt;noble&lt;/a&gt;はNode.js向けのBLEライブラリです。MacやWindows、Raspberry PiなどのデバイスをBLEのCentralにすることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ble_central
cd ble_central
touch app.js
npm init -y
npm i --save noble
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで準備とnobleのインストールが完了しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;に以下を記述します。SERVICE_UUIDやCHARACTERISTIC_UUIDは自分で作成したNefry BT側に書き込んだUUIDと同様のものを指定しましょう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[WIP] Async/Awaitに書き換えたい。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;

const noble = require(&#39;noble&#39;);
const serviceuuid = `d5875408fa514763a75d7d33cecebc31`;
const charauuid = `a4f01d8ca03743b690501876a8c23584`;

//キャラクタリスティックにアクセスしてデータやりとり
const accessChara = (chara) =&amp;gt; {
    console.log(&#39;-----Start GATT Access-----&#39;)
    chara.notify(true, (err) =&amp;gt; {
        if (err) {
          console.log(&#39;listen notif error&#39;, err)
        } else {
          console.log(&#39;listen notif&#39;)
        }
    });
    chara.on(&#39;data&#39;, (data, isNotif) =&amp;gt; {
        const jsonStr = data.toString(&#39;utf-8&#39;);
        const jsonData = JSON.parse(jsonStr);
        console.log(jsonData);
    });
}


//discovered BLE device
const discovered = (peripheral) =&amp;gt; {
    console.log(`BLE Device Found: ${peripheral.advertisement.localName}(${peripheral.uuid}) RSSI${peripheral.rssi}`);

    if(peripheral.advertisement.localName === &#39;NefryBT-n0bisuke&#39;){
        noble.stopScanning();
        console.log(&#39;device found&#39;);
        console.log(`service discover...`);

        peripheral.connect(error =&amp;gt; {
            if (error) {
                console.log(&amp;quot;connection error:&amp;quot;, error)
            } else {
                console.log(&amp;quot;device connected&amp;quot;);
            }

            peripheral.discoverServices([],(err, services) =&amp;gt; {
                if (error) {
                    console.log(&amp;quot;discover service error&amp;quot;, error)
                }
                console.log(&#39;discover service&#39;);               
                services.forEach(service =&amp;gt; {
                    if(service.uuid === serviceuuid){
                        service.discoverCharacteristics([], (error, charas) =&amp;gt; {
                            console.log(&#39;discover chara&#39;);
                            charas.forEach(chara =&amp;gt; {
                                if(chara.uuid === charauuid){
                                    console.log(&amp;quot;found chara: &amp;quot;, chara.uuid)
                                    accessChara(chara);
                                }
                            });
                        });
                    }
                });
            });
        });
    }
}

//BLE scan start
const scanStart = () =&amp;gt; {
    noble.startScanning();
    noble.on(&#39;discover&#39;, discovered);
}

if(noble.state === &#39;poweredOn&#39;){
    scanStart();
}else{
    noble.on(&#39;stateChange&#39;, scanStart);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;実行&#34;&gt;実行&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で実行します。この時、先ほどのLightBlueなどのアプリでNefryBTにBLEアクセスしていると上手くいかないのでアプリ側の接続は解除しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/143/5.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Mac側のNode.jsのログはこんな感じで表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BLE Device Found: LED(59aa15c3a3274ed7b11d334b5c0d0900) RSSI-68
BLE Device Found: NefryBT-n0bisuke(d0b77d4611f54380b8b63e6d05765ad6) RSSI-49
device found
service discover...
device connected
discover service
discover chara
found chara:  a4f01d8ca03743b690501876a8c23584
-----Start GATT Access-----
listen notif
{ val: 147 }
{ val: 148 }
・
・
・
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;解説&#34;&gt;解説&lt;/h3&gt;

&lt;p&gt;NefryBT側ではデバイスにアクセスがありCentralとのコネクションが確立すると、&lt;code&gt;変数value&lt;/code&gt;の値をセット(pCharacteristic-&amp;gt;setValue)して送信（pCharacteristic-&amp;gt;notify）し、valueの値をインクリメントします。&lt;/p&gt;

&lt;p&gt;これを2秒ごとに行うので2秒間隔でNefryBTからMacのNode.jsに情報が送信されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;・
(省略)
・
・
void loop() {

  if (deviceConnected) {
    Serial.printf(&amp;quot;*** NOTIFY: %d ***\n&amp;quot;, value);
    char buffer[10];
    sprintf(buffer, &amp;quot;{\&amp;quot;val\&amp;quot;:%d}&amp;quot;, value);
    Serial.printf(buffer);
    pCharacteristic-&amp;gt;setValue(buffer);
    pCharacteristic-&amp;gt;notify();
    //pCharacteristic-&amp;gt;indicate();
    value++;
  }
  delay(2000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node.js（noble）側では、PERIPHERAL -&amp;gt; SERVICE -&amp;gt; CHARACTERISTICと階層的にアクセスしていき、CHARACTERISTICまでアクセスが出きると、accessChara関数が呼ばれます。&lt;/p&gt;

&lt;p&gt;この中の&lt;code&gt;chara.on(&#39;data&#39;)&lt;/code&gt;の箇所でデータが送られてくるたびにイベントが発火して、データの中身を確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;・
・
(省略)
・
const accessChara = (chara) =&amp;gt; {
    console.log(&#39;-----Start GATT Access-----&#39;)
    chara.notify(true, (err) =&amp;gt; {
        if (err) {
          console.log(&#39;listen notif error&#39;, err)
        } else {
          console.log(&#39;listen notif&#39;)
        }
    });
    chara.on(&#39;data&#39;, (data, isNotif) =&amp;gt; {
        const jsonStr = data.toString(&#39;utf-8&#39;);
        const jsonData = JSON.parse(jsonStr);
        console.log(jsonData);
    });
}
・
・
(省略)
・
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Nefry BTでBLEを利用する方法を紹介しました。
Nefry BTでセンサーのデータを取得し、Centralに送信する方法なども応用して作れそうですね。&lt;/p&gt;

&lt;p&gt;これを参考にNefry BTとBLEデバイスの連携などに活用していきましょう。&lt;/p&gt;

&lt;p&gt;今回はNefry BTをPeripheralにする実装でしたが、別の機会でCentralにする方法も紹介できればと思っています。&lt;/p&gt;

&lt;p&gt;それでは！&lt;/p&gt;

&lt;h2 id=&#34;所感&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;今回の実装ですが色々と途中でのハマりが多いかつ、調べてもまだまだESP32のBLE利用をArduinoでやってる事例は少なくけっこう大変でした。この辺の大変だった知見はQiitaなどでまとめらたらと思っています。お疲れ様です笑&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>レーザーカッターで自分だけのRaspberryPiケースを作ってみよう！</title>
      <link>https://dotstud.io/blog/raspberry-pi-case-making/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/raspberry-pi-case-making/</guid>
      
      <description>

&lt;p&gt;こんにちは、Webデザイナーの3yakaです。自宅の猫が心配すぎてラズパイ（Raspberry Pi）で監視するアプリを作ったら、&lt;strong&gt;ラズパイにはまってしまったラズパイ女子です&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;ものづくりをする方は、Raspberry PiやらArduinoやら、いろいろ使っているとケースに困ることはないでしょうか？&lt;/p&gt;

&lt;p&gt;しかしなかなか可愛いいケースがない……。&lt;strong&gt;ないなら、作ってしまえばいい！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ということで可愛いケースを作りましょう！今回はレーザーカッターを使ったRaspberry Pi3用ケースの作り方を紹介します。アクリルや型の扱いは他のケースにも応用できるのでぜひ見てみてください！&lt;/p&gt;

&lt;h2 id=&#34;レーザーカッターを使える場所を探そう&#34;&gt;レーザーカッターを使える場所を探そう&lt;/h2&gt;

&lt;p&gt;今回はアクリルをレーザーカッターで切り抜いてケースにします。レーザーカッターを持っている人は少ないと思うので、&lt;strong&gt;工作機械を気軽に利用できるFabスペース&lt;/strong&gt;を利用してみましょう！&lt;/p&gt;

&lt;p&gt;レーザーカッターはとても難しそうですが、実はそんなに難しくないんですよ。細かいデータの作り方のルールは機械によって異なるので、パスでできたデータ（Adobe Illustratorのai形式）さえ持っていけば大丈夫です。（Illustratorも合わせて貸してくれるスペースもあります。）&lt;/p&gt;

&lt;p&gt;何ポイントで何色で……などは、優しい店員さんが使い方をレクチャーしてくれるので心配しなくても大丈夫です。（※使用前に講習があるお店もあります。）&lt;/p&gt;

&lt;h3 id=&#34;レーザーカッターが使える初心者向けオススメfabスペース&#34;&gt;レーザーカッターが使える初心者向けオススメFabスペース&lt;/h3&gt;

&lt;p&gt;初心者の方でも気軽に入れるFabスペースをご紹介します！&lt;/p&gt;

&lt;h4 id=&#34;fabcafe-https-fabcafe-com-tokyo&#34;&gt;&lt;a href=&#34;https://fabcafe.com/tokyo/&#34;&gt;◆FabCafe&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;渋谷のおしゃれカフェといった感じなのでとっても入りやすいです。最初はお茶だけしに行きました。&lt;/p&gt;

&lt;h4 id=&#34;iotlab-https-cami-jp-iotlab&#34;&gt;&lt;a href=&#34;https://cami.jp/iotlab/&#34;&gt;◆IoTLab&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;できたばかりのFabスペース。五反田のオフィス街でふらっと立ち寄れる場所で便利。今回はこちらで作成しました！&lt;/p&gt;

&lt;h4 id=&#34;techshop-http-www-techshop-jp&#34;&gt;&lt;a href=&#34;http://www.techshop.jp/&#34;&gt;◆TechShop&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;プロ仕様です！広いです！UVプリンターもあるので好きなデザインのアクリルから作りたい人にオススメです。&lt;/p&gt;

&lt;h2 id=&#34;ケースの形について調べてみよう&#34;&gt;ケースの形について調べてみよう&lt;/h2&gt;

&lt;p&gt;一口に「ケース」といっても、素材や形などいろいろな種類があります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/1.png&#34; alt=&#34;&#34; /&gt;
「Raspberry Pi  ケース」を検索
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ケースの形によってはかなり難易度が高そうです……。&lt;/p&gt;

&lt;h3 id=&#34;初心者にも作りやすいケースの形&#34;&gt;初心者にも作りやすいケースの形&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;凹凸の多い形や局面のある形のケースは加工が難しそう。&lt;/li&gt;
&lt;li&gt;ラズパイは発熱するので、放熱を考えると覆わない形がよさそう。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで、上蓋・下蓋・支柱で作るシンプルな形が初心者には優しそうです！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/2.png&#34; alt=&#34;&#34; /&gt;
上蓋と下蓋を支柱で支えるタイプのケース　　
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;部材を集めよう&#34;&gt;部材を集めよう&lt;/h2&gt;

&lt;h3 id=&#34;かわいいアクリルで作れば-かわいいケースになる-はず&#34;&gt;かわいいアクリルで作れば、かわいいケースになる（はず）！！&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;かわいいアクリルで作ればかわいいケースになる&lt;/strong&gt;と信じて、素敵なアクリルを用意しましょう。&lt;/p&gt;

&lt;p&gt;アクリルには、透明/色つき透明、不透明/乳白、ミラー、表面プリント、とたくさんの種類があります。ネットではあまりサイズ展開がないことも多いので、&lt;strong&gt;実際に店舗に行ってみるのがオススメ&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;ラメ入りやレース入り、パール入りなどのデザイン性の高いアクリルを取り扱う「&lt;a href=&#34;https://www.miyukiacryl.tokyo/tokyo-acryl&#34;&gt;デザインアクリル専門店 ミユキアクリル&lt;/a&gt;」さんのような&lt;strong&gt;デザインアクリル専門店&lt;/strong&gt;もあるので、興味のある方は覗いてみましょう！&lt;/p&gt;

&lt;p&gt;※デザインアクリルの価格は普通のクリアアクリルの２〜４倍くらい&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/3.png&#34; alt=&#34;&#34; /&gt;
自分好みのアクリルを選ぼう
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;アクリルの厚みは、今回のケースの場合3ミリが一番作りやすくバランスがいいです（アクリルの中に入るものによって厚みが異なります）。5ミリだと重厚感が出て、2ミリだとちょっと薄く感じます。&lt;/p&gt;

&lt;p&gt;厚みを変えて楽しむこともできますが、ネジの長さが変わりますので注意してください！（今回は３ミリで作りますよ！）&lt;/p&gt;

&lt;p&gt;好みのアクリルがない場合は、&lt;strong&gt;UVプリンターを使ってオリジナルのアクリルを作る&lt;/strong&gt;という手もあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/4.png&#34; alt=&#34;&#34; /&gt;
UVプリンターでイラストや写真を転写
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;UVプリンターを使えば写真もイラストもだいたいプリントできます。&lt;/p&gt;

&lt;h3 id=&#34;ネジやスペーサーなどのパーツ&#34;&gt;ネジやスペーサーなどのパーツ&lt;/h3&gt;

&lt;p&gt;支柱となるスペーサーは、プラスチックの白や、金属のシルバー、ゴールドなどがあるので、上のアクリルの色や柄によって好みで選びましょう。ネジも色や素材、形などたくさんの種類があります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/5.png&#34; alt=&#34;&#34; /&gt;
上：真鍮黒ネジ、シルバーの六角スペーサー の組み合わせ&lt;br /&gt;
下：プラネジ、白のプラスチックのスペーサー&lt;br /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;必要なパーツ一覧&#34;&gt;必要なパーツ一覧&lt;/h3&gt;

&lt;p&gt;好みのネジ、スペーサー、アクリルを選んでパーツを揃えましょう！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ラズパイ固定用・ネジ M2.6（8mm）8本&lt;/li&gt;
&lt;li&gt;ラズパイ固定用・両メススペーサー M2.6（7mm）４個&lt;/li&gt;
&lt;li&gt;アクリル板固定・ネジ M3（8mm）8本&lt;/li&gt;
&lt;li&gt;アクリル板固定・両メススペーサー M3（30mm） 4本&lt;/li&gt;
&lt;li&gt;アクリル（今回は厚さ3mmのもの）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アクリルはケースのサイズ分あればOKですが、A4サイズが扱いやすくオススメです！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/142/parts.png&#34; alt=&#34;&#34; /&gt;
デザインによりけりですが、上をデザインアクリル、下をクリアアクリルで作成した場合1,600円ほどで作れることができました！&lt;/p&gt;

&lt;h2 id=&#34;作り方&#34;&gt;作り方&lt;/h2&gt;

&lt;h3 id=&#34;step1-型の準備&#34;&gt;step1. 型の準備&lt;/h3&gt;

&lt;p&gt;Illustratorでアクリルの型データをパスで作ります。Illustratorをお持ちでない方はレーザーカッターと合わせて貸してくれるfabスペースもあるので探してみてください！&lt;/p&gt;

&lt;p&gt;ラズパイの実寸を測りながら、上蓋と下蓋、ネジ穴をそれぞれ型どります。&lt;a href=&#34;https://drive.google.com/open?id=1_jcM5kPaZ1AGNdrkMTUWEc8vrxDtU1-Y&#34;&gt;&lt;strong&gt;こちらのaiデータ&lt;/strong&gt;&lt;/a&gt;をそのまま使うこともできます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/6.png&#34; alt=&#34;&#34; /&gt;
左：下蓋 / 右：上蓋
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;カメラとGPIOがそのまま使えるようしたいので、実寸に少し余裕をもたせて追加します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;カメラ：幅0.9mm × 高さ28mm&lt;/li&gt;
&lt;li&gt;GPIO：幅55mm × 高さ12mm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/7.png&#34; alt=&#34;&#34; /&gt;
上蓋にカメラとGPIOの部分を追加
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;レーザーカッターには切る順番があり、「&lt;strong&gt;彫刻 → 穴 → 切り落とし&lt;/strong&gt;」の順番になります。データもレーザーカッターが切る順番を認識できるように、最初に切る線を赤で、次に切る線を青という風に分けて作ります。&lt;/p&gt;

&lt;p&gt;これはレーザーカッターの機械によってルールが異なるので、お店の人に確認してみてください！&lt;/p&gt;

&lt;h3 id=&#34;step2-アクリルを裁断&#34;&gt;step2. アクリルを裁断&lt;/h3&gt;

&lt;p&gt;今回は彫刻作業はないので最初にネジ穴とカメラの穴から切り、続いて外枠を切り落とします。切った穴は熱でくっついて外れなくなってしまうので、早めに外しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/142/8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step3-組み立てる&#34;&gt;step3. 組み立てる&lt;/h3&gt;

&lt;p&gt;まず下の蓋とラズパイを固定します。短い方のスペーサーを下蓋にM2.6のネジで固定します。ラズパイを乗せ、上からもM2.6のネジで固定します。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/9.png&#34; alt=&#34;&#34; /&gt;
短いスペーサーでラズパイを下蓋に固定
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;次に長い方のスペーサーをM3のネジで下蓋に固定し、上蓋を乗せて上からも固定します。&lt;/p&gt;

&lt;h3 id=&#34;完成&#34;&gt;完成&lt;/h3&gt;

&lt;p&gt;自分だけのラズパイケースが完成しました！カメラもGPIOも問題なく使えますよ〜！
&lt;img src=&#34;https://dotstud.io/img/blog/142/10.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/142/11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/142/12.png&#34; alt=&#34;&#34; /&gt;
アクリルとパーツを選ぶだけで、ケースの雰囲気はずいぶんと変わります！枠線さえ作ればばあとはすんなりと進めますので、ぜひぜひ試してみてください。&lt;/p&gt;

&lt;p&gt;日替わりで変えられるくらいケースを作りすぎてしまいましたが、&lt;strong&gt;どこに連れて行ってもかわいいと言ってもらえる&lt;/strong&gt;ので作りがいがありました。何より愛着がわきますね〜！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nefry BT（ESP32）でMQTTを使ってみよう Subscribe編</title>
      <link>https://dotstud.io/blog/nefry-bt-connect-mqtt/</link>
      <pubDate>Sat, 06 Jan 2018 14:28:04 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nefry-bt-connect-mqtt/</guid>
      
      <description>

&lt;p&gt;あけましておめでとうございます。 代表ののびすけ（&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;@n0bisuke&lt;/a&gt;）です。&lt;/p&gt;

&lt;p&gt;Nefry BTを使ってMQTTを利用する方法を紹介します。&lt;/p&gt;

&lt;p&gt;今回はMQTTでNefry BTに情報を送信してみます。&lt;/p&gt;

&lt;p&gt;ほぼESP32のコードなので、ESP32系の他のボードを利用している人の参考にもなると思います。&lt;/p&gt;

&lt;h2 id=&#34;mqttの登場人物&#34;&gt;MQTTの登場人物&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Broker - 通信のサーバー&lt;/li&gt;
&lt;li&gt;Publisher - 情報の送信側&lt;/li&gt;
&lt;li&gt;Subscriber - 情報の受信側&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WebSocketではサーバーとクライアントだけで双方向通信をしますが、MQTTではサーバーはBrocker、クライアント側が送信者のPublisherと受信者のSubscriberに分かれます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/141/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回はNefry BTをSubscriber（受信者）にして、外部からNefry BTに情報を送ってみたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Arduino IDE 1.8.5&lt;/li&gt;
&lt;li&gt;Nefry ライブラリ 1.1.4&lt;/li&gt;
&lt;li&gt;Nefry BT R2&lt;/li&gt;
&lt;li&gt;macOS High Sierra&lt;/li&gt;
&lt;li&gt;Node.js v9.2.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;subscriberの作成&#34;&gt;Subscriberの作成&lt;/h2&gt;

&lt;h3 id=&#34;arduino向けのmqttライブラリをインストール&#34;&gt;Arduino向けのMQTTライブラリをインストール&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/knolleary/pubsubclient&#34;&gt;knolleary/pubsubclient&lt;/a&gt;を利用します。&lt;/p&gt;

&lt;p&gt;zipファイルをダウンロードしたら、 &lt;code&gt;スケッチ &amp;gt; ライブラリのインポート &amp;gt; .ZIP形式のライブラリをインストール&lt;/code&gt;からArduino IDEにライブラリをインストールします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/141/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;nefry-btのスケッチ&#34;&gt;Nefry BTのスケッチ&lt;/h3&gt;

&lt;p&gt;ブローカーは&lt;a href=&#34;https://mosquitto.org/&#34;&gt;Mosquitto&lt;/a&gt;を利用します。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;mosquitto.org&amp;rdquo;の&amp;rdquo;n0bisuke&amp;rdquo;という名前のトピックに情報が送信されたら受信します。&lt;/p&gt;

&lt;p&gt;MQTTはデフォルト1883ポートを利用するので、1883ポートを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;PubSubClient.h&amp;gt;

WiFiClient httpsClient;
PubSubClient mqttClient(httpsClient);

#define TOPIC &amp;quot;n0bisuke&amp;quot;
#define QOS 0
#define URL &amp;quot;mosquitto.org&amp;quot;
#define PORT 1883

void setup() {
  mqttClient.setServer(URL, PORT);
  mqttClient.setCallback(callback);
}

void loop() {
  if(!mqttClient.connected()) {
    if (mqttClient.connect(TOPIC)) {
      Serial.println(&amp;quot;Connected.&amp;quot;);    
      mqttClient.subscribe(TOPIC, QOS);
      Serial.println(&amp;quot;Subscribed.&amp;quot;);
    }
    else {
      errorReport();
    }
  }

  mqttClient.loop();
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print(&amp;quot;Message arrived [&amp;quot;);
  Serial.print(topic);
  Serial.print(&amp;quot;] &amp;quot;);
  for (int i = 0; i &amp;lt; length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void errorReport(){
  Serial.print(&amp;quot;Failed. Error state = &amp;quot;);

  switch (mqttClient.state()) {
    case MQTT_CONNECT_UNAUTHORIZED:
      Serial.println(&amp;quot;MQTT_CONNECT_UNAUTHORIZED&amp;quot;);
      break;
    case MQTT_CONNECT_BAD_CREDENTIALS:
      Serial.println(&amp;quot;MQTT_CONNECT_BAD_CREDENTIALS&amp;quot;);
      break;
    case MQTT_CONNECT_UNAVAILABLE:
      Serial.println(&amp;quot;MQTT_CONNECT_UNAVAILABLE&amp;quot;);
      break;
    case MQTT_CONNECT_BAD_CLIENT_ID:
      Serial.println(&amp;quot;MQTT_CONNECT_BAD_CLIENT_ID&amp;quot;);
      break;
    case MQTT_CONNECT_BAD_PROTOCOL:
      Serial.println(&amp;quot;MQTT_CONNECT_BAD_PROTOCOL&amp;quot;);
      break;
    case MQTT_CONNECTED:
      Serial.println(&amp;quot;MQTT_CONNECTED&amp;quot;);
      break;
    case MQTT_DISCONNECTED:
      Serial.println(&amp;quot;MQTT_DISCONNECTED&amp;quot;);
      break;
    case MQTT_CONNECT_FAILED:
      Serial.println(&amp;quot;MQTT_CONNECT_FAILED&amp;quot;);
      break;
    case MQTT_CONNECTION_LOST:
      Serial.println(&amp;quot;MQTT_CONNECTION_LOST&amp;quot;);
      break;
    case MQTT_CONNECTION_TIMEOUT:
      Serial.println(&amp;quot;MQTT_CONNECTION_TIMEOUT&amp;quot;);
      break;
  }

  delay(5000); // Wait 5 seconds before retrying
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;publisherの作成&#34;&gt;Publisherの作成&lt;/h2&gt;

&lt;p&gt;情報の送信側であるPublisherは手元のMac Book上のNode.jsで作成しました。&lt;/p&gt;

&lt;p&gt;Node.jsでMQTTを利用する場合は&lt;a href=&#34;https://www.npmjs.com/package/mqtt&#34;&gt;mqtt.js&lt;/a&gt;を利用するのが手頃です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir mqtt-test
cd mqtt-test
npm init -y
npm i --save mqtt
touch publisher.js
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//publisher.js
&#39;use strict&#39;;

const mqtt = require(&#39;mqtt&#39;);
const client = mqtt.connect(&#39;mqtt://mosquitto.org&#39;);

client.on(&#39;connect&#39;, () =&amp;gt; console.log(&#39;publisher.connected.&#39;));

setInterval(() =&amp;gt; {
    const message = Date.now().toString();
    client.publish(&#39;n0bisuke&#39;, message);
    console.log(&#39;publisher.publish:&#39;, message);
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで実行すると、以下のように時間の情報をパブリッシュ（送信）し始めます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node publisher.js

publisher.publish: 1515219086876
publisher.publish: 1515219087879
publisher.publish: 1515219088880
publisher.publish: 1515219089882
・
・
・
(省略)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/141/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;所感&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;思ってたより簡単に実装出来ました。
これを参考にNefry BTとWebサービスの連携などに活用していきましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mosca.io/&#34;&gt;Mosca&lt;/a&gt;などを使うとBrokerも自分で作成することが出来るので試してみると良いかもしれません。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsを始めよう！nodebrewを使って5分で環境構築</title>
      <link>https://dotstud.io/blog/nodejs-install-use-nodebrew/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/nodejs-install-use-nodebrew/</guid>
      
      <description>

&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2017/nodejs2&#34;&gt;Node.js Advent Calendar 2017&lt;/a&gt;に参加しています！&lt;/p&gt;

&lt;p&gt;こんにちは、エンジニアのちゃんとくです。「これからNode.jsを始めたい！」という人向けに導入記事をまとめていきたいと思います。まずは環境構築からはじめましょう！&lt;/p&gt;

&lt;p&gt;今回はNode.jsのバージョンを管理できる「&lt;strong&gt;nodebrew&lt;/strong&gt;」を使ったインストール手順を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;普通のダウンロードじゃダメなの&#34;&gt;普通のダウンロードじゃダメなの？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/ja/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/136/1.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://nodejs.org/ja/&#34;&gt;Node.js公式ページ&lt;/a&gt;にアクセスすると、どーんとダウンロードボタンがありますね。これをクリックすると、表記のバージョンのNode.jsパッケージが降ってきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;しかし！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.jsはバージョンアップの頻度が高く、その都度ダウンロードし直すのは大変ですよね。&lt;/p&gt;

&lt;p&gt;プロジェクトによっては古いバージョンを使いたかったり、プロジェクトごとにバージョンを変えたかったりしたいときもあります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;そこで役に立つのがNode.jsのバージョン管理ツールです&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;今回紹介する&lt;strong&gt;nodebrew&lt;/strong&gt;以外にも、世界的に利用者の多い&lt;strong&gt;NVM&lt;/strong&gt;（Node Version Manager）やWindows向けの&lt;strong&gt;nodist&lt;/strong&gt;などがあります。&lt;/p&gt;

&lt;p&gt;今回は日本人コミッタが多く困ったときにも質問しやすいnodebrewでやってみます！&lt;/p&gt;

&lt;h2 id=&#34;nodebrewをインストール&#34;&gt;nodebrewをインストール&lt;/h2&gt;

&lt;p&gt;さっそくnodebrewをインストールしましょう！以下のコマンドを実行します。（&lt;code&gt;$&lt;/code&gt;マークはCLIであることを表しているのでコピペの際は不要です！）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L git.io/nodebrew | perl - setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完了するとこんなことを言われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/136/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「&lt;code&gt;~/.nodebrew&lt;/code&gt;にインストールしたからPATH通してね！」というようなことを言っています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.bash_profile&lt;/code&gt;などの設定ファイルに&lt;code&gt;export PATH=$HOME/.nodebrew/current/bin:$PATH&lt;/code&gt;を追加しましょう。&lt;/p&gt;

&lt;p&gt;追記したらターミナルを開き直すか&lt;code&gt;source&lt;/code&gt;コマンドで更新します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nodebrewコマンドが使えるか確認してみます。&lt;code&gt;command not found&lt;/code&gt;が出なければOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew help
nodebrew 0.9.8

Usage:
…
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nodebrewでnode-jsをインストール&#34;&gt;nodebrewでNode.jsをインストール&lt;/h2&gt;

&lt;p&gt;まずは&lt;code&gt;nodebrew ls-remote&lt;/code&gt;コマンドでダウンロード可能なNode.jsのバージョンを確認してみます。&lt;/p&gt;

&lt;p&gt;Node.jsは偶数のバージョンがLTS（安定板）、奇数のバージョンが最新版となっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew ls-remote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/136/3.png&#34; alt=&#34;&#34; /&gt;
実行するとべろーっとバージョンが出てきますね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/136/4.png&#34; alt=&#34;&#34; /&gt;
下の方まで見ると2017年12月15日現在はLTSがv8.9.3、最新がv9.3.0であることがわかりました。（io.jsはNode.jsのForkですが、一旦気にしなくてOK）&lt;/p&gt;

&lt;p&gt;今回は最新版のv9.3.0をインストールしてみます。&lt;code&gt;nodebrew install-binary&lt;/code&gt;コマンドを利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew install-binary v9.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1分くらいでインストールは完了します。（ダメ回線なので、もっと速いかもしれません）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nodebrew ls&lt;/code&gt;コマンドで状態を確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew ls
v9.3.0

current: none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用するバージョンの&lt;code&gt;current&lt;/code&gt;がnoneになっているので指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew use v9.3.0
$ node -v
v9.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでNode.jsのインストールは完了です！&lt;/p&gt;

&lt;h2 id=&#34;バージョン切り替え&#34;&gt;バージョン切り替え&lt;/h2&gt;

&lt;p&gt;別のバージョンを使いたくなったら、nodebrewでバージョンを切り替えてみましょう。&lt;/p&gt;

&lt;p&gt;試しにLTSのv8.9.3を使えるようにしてみます。まずはインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew install-binary v8.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;v8.9.3とv9.3.0が使えるようになりましたが、まだ&lt;code&gt;current&lt;/code&gt;はv9.3.0のままです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew list
v8.9.3
v9.3.0

current: v9.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nodebrew use&lt;/code&gt;でv8.9.3を指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew use v8.9.3
$ nodebrew list
v8.9.3
v9.3.0

current: v8.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでバージョンが切り替えられました！listにあるバージョンは再インストールすることなく切り替えられます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ここまで特にむずかしいところなく環境構築できたのではないかと思います！はじめるまでの手軽さもNode.jsの魅力のひとつですよね。&lt;/p&gt;

&lt;p&gt;次回はNode.jsをはじめたばかりの人向けチュートリアルをやってみたいと思います。&lt;/p&gt;

&lt;p&gt;それではまた！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【予測変換】Macで日本語の変換ウィンドウが消えなくなったときの対処法【邪魔】</title>
      <link>https://dotstud.io/blog/mac-nihongo-window-error/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/mac-nihongo-window-error/</guid>
      
      <description>

&lt;p&gt;こんにちは、エンジニア兼ライターのちゃんとくです。日々たくさんのコードや文字を書き続けているわけですが、&lt;strong&gt;突然消えなくなるアレ&lt;/strong&gt;に悩まされています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/137/1.png&#34; alt=&#34;&#34; /&gt;
これ。&lt;/p&gt;

&lt;p&gt;クリックしてもEscapeしてもQuitしても消えなくて本当に邪魔ですよね。&lt;/p&gt;

&lt;p&gt;わりと起こる頻度が高いのでそのたびに再起動するのも面倒です。&lt;/p&gt;

&lt;h2 id=&#34;日本語入力のプロセスをキルする&#34;&gt;日本語入力のプロセスをキルする&lt;/h2&gt;

&lt;p&gt;タイトルが全てですが、日本語入力のプロセスを終了すると消すことができます。&lt;/p&gt;

&lt;p&gt;［アクテビティモニタ］を開いて［日本語入力］を探します。
&lt;img src=&#34;https://dotstud.io/img/blog/137/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ダブルクリックするとウィンドウが開くので［終了］をクリックします。
&lt;img src=&#34;https://dotstud.io/img/blog/137/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;平和がおとずれましたね。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Adventやら原稿やらガリガリ書いているときに邪魔でしょうがないので紹介してみました。&lt;/p&gt;

&lt;p&gt;El Capitanからアップデートしたらなおるのかなぁ。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsでGoogle SpreadSheetsを操作してみよう。【GAS不使用】</title>
      <link>https://dotstud.io/blog/google-spreadsheets-from-nodejs/</link>
      <pubDate>Mon, 04 Dec 2017 13:14:41 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/google-spreadsheets-from-nodejs/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表ののびすけです。&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2017/nodejs&#34;&gt;Node.jsアドベントカレンダー2017&lt;/a&gt;の記事になります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://developers.google.com/apps-script/&#34;&gt;GAS&lt;/a&gt;じゃなくてNode.jsから直接スプレッドシートにアクセスしたい！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;そう思って調べると&lt;a href=&#34;https://developers.google.com/sheets/api/quickstart/nodejs&#34;&gt;Node.js Quickstart | Sheets API | Google Developers&lt;/a&gt;が出て来ますが、JS記述も古いし英語なので少しとっつきにくいです。&lt;/p&gt;

&lt;p&gt;ということでちょっと試して記録残そうと思います。&lt;/p&gt;

&lt;h2 id=&#34;google-sheets-api&#34;&gt;Google Sheets API&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/sheets/guides/concepts?hl=ja&#34;&gt;Google Sheets API&lt;/a&gt;はスプレッドシートにアクセスできるようになるAPIです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/81dd3461cd263ea7e4d63f06fef54747.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google Sheets API を使用すると、スプレッドシートの要素を読み取って変更できます。 スプレッドシートは多くの設定を備えており、美しく機能的なシートを作成することができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;普段慣れている言語でスプレッドシートにアクセス出来まるので、簡単な操作であれば、GASを使う必要もないです。&lt;/p&gt;

&lt;p&gt;今回のサンプルは&lt;a href=&#34;https://github.com/n0bisuke/google-spread-sheet-node.js-sample&#34;&gt;こちら&lt;/a&gt;に置いておきます。&lt;/p&gt;

&lt;h3 id=&#34;環境&#34;&gt;環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Node.js v9.2.0&lt;/li&gt;
&lt;li&gt;macOS High Sierra&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考までに今回の僕の環境です。&lt;/p&gt;

&lt;p&gt;では実際に作っていきます。&lt;/p&gt;

&lt;h2 id=&#34;1-google-sheets-apiを使えるようにする&#34;&gt;1. Google Sheets APIを使えるようにする&lt;/h2&gt;

&lt;p&gt;ちなみに2017年12月時点でのウィザードです。こういうのはアップデートによって画面遷移変わるので適宜読み替えてください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use this wizard to create or select a project in the Google Developers Console and automatically turn on the API. Click Continue, then Go to credentials.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://console.developers.google.com/start/api?id=sheets.googleapis.com&#34;&gt;こちらのリンク&lt;/a&gt;からディベロッパーコンソールにいき、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/31e8011951d1552b8f7126eb459da474.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;新機能のお知らせ、パフォーマンスに関するアドバイス、フィードバック調査、特典に関する最新情報をメールで受け取ります。&lt;/code&gt;の質問はいいえでもたぶん大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/60c5bf6a1e772473dc9fc6d4d7526077.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;認証情報に進む&lt;/code&gt;を選択&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/848f8f79460aac991b46956111f0da07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この画面が出ますが、&lt;code&gt;キャンセル&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/e827d6ab-d728-1016-d22a-76cef4e4972e.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.00.17.png&#34; title=&#34;スクリーンショット 2017-12-03 21.00.17.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OAuth同意画面&lt;/code&gt;のタブを選択し、メールアドレスを確認し、&lt;code&gt;ユーザーに表示するサービス名&lt;/code&gt;を入力します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;保存&lt;/code&gt;を選択しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/1ca3a2d5-b639-bb6c-9508-225d162c96ff.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.01.07.png&#34; title=&#34;スクリーンショット 2017-12-03 21.01.07.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;認証情報&lt;/code&gt;のタブを選択し、 &lt;code&gt;認証情報を作成&lt;/code&gt; -&amp;gt; &lt;code&gt;OAuthクライアントID&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3d5b6da9cf3086b11c728cdc31307268.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;その他&lt;/code&gt;を選択し、任意の名前をつけて&lt;code&gt;作成&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/a8a25dd3-a194-d4a3-ac57-909f8d7712e0.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.06.47.png&#34; title=&#34;スクリーンショット 2017-12-03 21.06.47.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OK&lt;/code&gt;で進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/93c1e777-682e-434e-444d-a3aa8659bd54.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.07.25.png&#34; title=&#34;スクリーンショット 2017-12-03 21.07.25.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client_secret_xxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com.json&lt;/code&gt;のようなファイルがダウンロードされます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;これを&lt;code&gt;client_secret.json&lt;/code&gt;にリネームしましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-node-jsプロジェクトの準備&#34;&gt;2. Node.jsプロジェクトの準備&lt;/h2&gt;

&lt;p&gt;任意のディレクトリを作成して移動します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sheetstest&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir sheetstest
cd sheetstest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;で&lt;code&gt;package.json&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このディレクトリに先ほどの&lt;code&gt;client_secret.json&lt;/code&gt;を移動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls

package.json client_secret.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3d796ef0005ef28b914a83517772c65e.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じです。&lt;/p&gt;

&lt;p&gt;利用するモジュールを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i googleapis google-auth-library --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-トークンの作成-保存-最初だけ&#34;&gt;3. トークンの作成&amp;amp;保存 (最初だけ)&lt;/h2&gt;

&lt;p&gt;本家とは少し違うやり方です。&lt;/p&gt;

&lt;p&gt;本家のコードだと&lt;code&gt;トークンの作成&amp;amp;保存&lt;/code&gt;作業と実際のAPI呼び出しが一緒になったコードですが&lt;code&gt;トークンの作成&amp;amp;保存&lt;/code&gt;は最初のみ行えば良いので手順を分けて紹介します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getAndStoreToken.js&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//getAndStoreToken.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const readline = require(&#39;readline&#39;);
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
const {promisify} = require(&#39;util&#39;);

const google = require(&#39;googleapis&#39;);
const googleAuth = require(&#39;google-auth-library&#39;);

//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const rlQuestionAsync = promisify(rl.question);

const SCOPES = [&#39;https://www.googleapis.com/auth/spreadsheets.readonly&#39;];
const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR+&#39;/sheets.googleapis.com-nodejs-quickstart.json&#39;;

const main = async () =&amp;gt; {
    const content = await readFileAsync(__dirname+&#39;/client_secret.json&#39;);
    const credentials = JSON.parse(content); //クレデンシャル
    //認証
    const clientSecret = credentials.installed.client_secret;
    const clientId = credentials.installed.client_id;
    const redirectUrl = credentials.installed.redirect_uris[0];
    const auth = new googleAuth();
    const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);

    //get new token
    const authUrl = oauth2Client.generateAuthUrl({
        access_type: &#39;offline&#39;,
        scope: SCOPES
    });

    console.log(&#39;Authorize this app by visiting this url: &#39;, authUrl);

    rl.question(&#39;Enter the code from that page here: &#39;, (code) =&amp;gt; {
        rl.close();

        oauth2Client.getToken(code, async (err, token) =&amp;gt; {
            if (err) {
                console.log(&#39;Error while trying to retrieve access token&#39;, err);
                return;
            }

            oauth2Client.credentials = token;

            try {
                fs.mkdirSync(TOKEN_DIR);
            } catch (err) {
                if (err.code != &#39;EEXIST&#39;) throw err;
            }

            await writeFileAsync(TOKEN_PATH, JSON.stringify(token));
            console.log(&#39;Token stored to &#39; + TOKEN_PATH);
        });
    });
};

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このプログラムを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node getAndStoreToken.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/379de8711e19b5510225e167de555ab6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://accounts.google.com/~&lt;/code&gt;で始まるURLが表示されるのでこれをコピーしてブラウザで開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/06afa961-4789-535b-3fee-8eaf67a997af.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.52.54.png&#34; title=&#34;スクリーンショット 2017-12-04 11.52.54.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アカウント選択画面になります。
複数Googleアカウントを持っている人は、今回アクセスしようとしているアカウントを選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/18729d60-e4a6-8996-9519-f9f4750ae1f4.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.02.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.02.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;許可&lt;/code&gt;で進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/6058bd3e-258f-1d8d-a7c6-68962617f1b2.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.09.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.09.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;認証用のコードが発行されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/fd612d7c-0b45-3d09-64ab-c1e02315fe81.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.27.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.27.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これをコピーしてターミナルに貼り付けてエンターキーで進みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Token stored to /Users/n0bisuke/dotstudio/playground/sheetstest/sheets.googleapis.com-nodejs-quickstart.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと表示されてjsonファイルが保存されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/830452dc-ad36-83ef-8cf8-8c80bc9637dd.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.57.50.png&#34; title=&#34;スクリーンショット 2017-12-04 11.57.50.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sheets.googleapis.com-nodejs-quickstart.json&lt;/code&gt;がフォルダ内に確認できればOKです。&lt;/p&gt;

&lt;h2 id=&#34;4-いよいよシートにアクセス&#34;&gt;4. いよいよシートにアクセス&lt;/h2&gt;

&lt;p&gt;さて最後の手順です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getSheetsData.js&lt;/code&gt;を作成しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//getSheetsData.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const {promisify} = require(&#39;util&#39;);
const google = require(&#39;googleapis&#39;);
const googleAuth = require(&#39;google-auth-library&#39;);
const sheets = google.sheets(&#39;v4&#39;);

//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const ssValuesGetAsync = promisify(sheets.spreadsheets.values.get);

const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR + &#39;/sheets.googleapis.com-nodejs-quickstart.json&#39;;

const main = async () =&amp;gt; {
    //クレデンシャル情報の取得
    const content = await readFileAsync(__dirname+&#39;/client_secret.json&#39;);
    const credentials = JSON.parse(content); //クレデンシャル

    //認証
    const clientSecret = credentials.installed.client_secret;
    const clientId = credentials.installed.client_id;
    const redirectUrl = credentials.installed.redirect_uris[0];
    const auth = new googleAuth();
    const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);
    const token = await readFileAsync(TOKEN_PATH);
    oauth2Client.credentials = JSON.parse(token);

    //API経由でシートにアクセス
    const apiOptions = {
        auth: oauth2Client,
        spreadsheetId: &#39;1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms&#39;,
        range: &#39;Class Data!A2:E&#39;,
    };
    const response = await ssValuesGetAsync(apiOptions);

    //結果を表示
    console.log(response);
};

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node getSheetsData.js

{ range: &#39;\&#39;Class Data\&#39;!A2:E101&#39;,
  majorDimension: &#39;ROWS&#39;,
  values:
   [ [ &#39;Alexandra&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;CA&#39;, &#39;English&#39; ],
     [ &#39;Andrew&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;SD&#39;, &#39;Math&#39; ],
     [ &#39;Anna&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NC&#39;, &#39;English&#39; ],
     [ &#39;Becky&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;SD&#39;, &#39;Art&#39; ],
     [ &#39;Benjamin&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;WI&#39;, &#39;English&#39; ],
     [ &#39;Carl&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;MD&#39;, &#39;Art&#39; ],
     [ &#39;Carrie&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;NE&#39;, &#39;English&#39; ],
     [ &#39;Dorothy&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;MD&#39;, &#39;Math&#39; ],
     [ &#39;Dylan&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;MA&#39;, &#39;Math&#39; ],
     [ &#39;Edward&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;FL&#39;, &#39;English&#39; ],
     [ &#39;Ellen&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;WI&#39;, &#39;Physics&#39; ],
     [ &#39;Fiona&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;MA&#39;, &#39;Art&#39; ],
     [ &#39;John&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;CA&#39;, &#39;Physics&#39; ],
     [ &#39;Jonathan&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;SC&#39;, &#39;Math&#39; ],
     [ &#39;Joseph&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;AK&#39;, &#39;English&#39; ],
     [ &#39;Josephine&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Math&#39; ],
     [ &#39;Karen&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;NH&#39;, &#39;English&#39; ],
     [ &#39;Kevin&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;NE&#39;, &#39;Physics&#39; ],
     [ &#39;Lisa&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;SC&#39;, &#39;Art&#39; ],
     [ &#39;Mary&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;AK&#39;, &#39;Physics&#39; ],
     [ &#39;Maureen&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;CA&#39;, &#39;Physics&#39; ],
     [ &#39;Nick&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;NY&#39;, &#39;Art&#39; ],
     [ &#39;Olivia&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;NC&#39;, &#39;Physics&#39; ],
     [ &#39;Pamela&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;RI&#39;, &#39;Math&#39; ],
     [ &#39;Patrick&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Art&#39; ],
     [ &#39;Robert&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;CA&#39;, &#39;English&#39; ],
     [ &#39;Sean&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;NH&#39;, &#39;Physics&#39; ],
     [ &#39;Stacy&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Math&#39; ],
     [ &#39;Thomas&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;RI&#39;, &#39;Art&#39; ],
     [ &#39;Will&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;FL&#39;, &#39;Math&#39; ] ] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このサンプルでは&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit#gid=0&#34;&gt;こちらのワークブック&lt;/a&gt;へアクセスして情報を取得しています。&lt;/p&gt;

&lt;p&gt;ちなみに用語的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ワークブック＝Googleスプレッドシートの１ファイル&lt;/li&gt;
&lt;li&gt;シート＝ワークブック内のタブ、シート&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というニュアンスです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//省略

    const apiOptions = {
        auth: oauth2Client,
        spreadsheetId: &#39;1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms&#39;,
        range: &#39;Class Data!A2:E&#39;,
    };

//省略
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほかのワークブックにアクセスする場合は&lt;code&gt;https://docs.google.com/spreadsheets/d/&lt;/code&gt;の後に続くIDを&lt;code&gt;spreadsheetId&lt;/code&gt;に指定して実行しましょう。&lt;code&gt;range&lt;/code&gt;は&lt;code&gt;シート名:取得する範囲&lt;/code&gt;という形式で指定して、指定したシートの指定した範囲からセルの情報を取得します。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これで次回以降は4番目の手順だけでスプレッドシートにアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client_secret.json&lt;/code&gt;や&lt;code&gt;sheets.googleapis.com-nodejs-quickstart.json&lt;/code&gt;をコピーしてサーバー設置しておけば自動更新する仕組みなども作れます。&lt;/p&gt;

&lt;p&gt;スプレッドシートは色々な場面で利用されているツールなので是非システム連携などに活用してみて下さい。&lt;/p&gt;

&lt;p&gt;応用としてはこちらの内容で使っています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/n0bisuke/items/3313a64c56317932919e&#34;&gt;勉強会( #IoTLT )の登壇者管理でHeadless Chromeを利用している話&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;それでは！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Maker Faire ShenZhen2017】アキバ電気街の30倍！？世界最大の電脳都市”深セン＠中国”に行ってきた！</title>
      <link>https://dotstud.io/blog/maker-faire-shenzhen-report2/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/maker-faire-shenzhen-report2/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioモノづくり担当・うこです。&lt;/p&gt;

&lt;p&gt;日本は秋も終わりだんだんと寒くなってきつつありますが、中国南部・広東省深セン市はまだまだ暑いです。そんな深セン市で11月10日〜12日の3日間、モノづくりの祭典「&lt;strong&gt;Maker Faire Shenzhen&lt;/strong&gt;」が開催され、dotstudioのメンバーで偵察に行ってきましたのでその模様をお伝えします。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/33.png&#34; alt=&#34;&#34; /&gt;
至るところにこのパンダが居た
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;maker-faire-shenzhen-mfsz-について&#34;&gt;Maker Faire Shenzhen(MFSZ) について&lt;/h2&gt;

&lt;p&gt;世界一の電気街を擁するとされる街・中国広東省深セン市で行われる、非常に規模の大きいモノづくりの祭典です。
dotstudioでは過去にも出展したことがあり過去にも記事をいくつか書いておりますので、詳しくはそちらも参照してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-2016/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/link1.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-report/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/link2.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;深センまでの道のり&#34;&gt;深センまでの道のり&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/1.png&#34; alt=&#34;&#34; /&gt;
今回はジェットスター航空で成田空港〜香港国際空港を移動し、さらに機場快線（エアポートエクスプレス）と香港MRTで羅湖駅を経由して深セン市までアクセスしました。香港に入国するとすぐにエアポートエクスプレスのカウンターがあり、クレジットカードで往復に使えるパスを購入できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/2.png&#34; alt=&#34;&#34; /&gt;
香港区域内で観光をしない場合は、空港からバスで直接上水駅まで行き1駅だけMTRに乗り国境を目指すか、香港に入境せずフェリーで深セン側の港に移動する方法もあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/4.png&#34; alt=&#34;&#34; /&gt;
せっかくなので香港の中心部を経由してきました。ここはまだ、日本と同じで車道が左側通行なので違和感がありませんね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/5.png&#34; alt=&#34;&#34; /&gt;
羅湖駅まで移動します。ここは禁区と呼ばれる緩衝地帯の中のため駅の外には出ることができません。「↑深セン」と書かれた看板があり、人の流れに乗って進んでゆくと香港を出境することになります。さらにそのまま100mほどある河の上にかかる通路を通り、中国本土に入国します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/6.png&#34; alt=&#34;&#34; /&gt;
中国側のイミグレーションは、中国国内で最大のものとあって建物はとても立派でした。旅行客のほとんどは中国人のようです。ホテルやタクシーの客引きのしつこさが尋常ではないです。今回は、ここから徒歩5分ほどの好立地のホテルに宿泊しました。&lt;/p&gt;

&lt;h2 id=&#34;会場は大学のキャンパス&#34;&gt;会場は大学のキャンパス&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/7.png&#34; alt=&#34;&#34; /&gt;
今年のMFSZ会場となったのは「深セン職業技術学院」。香港国境の羅湖駅からは地下鉄で1時間ほどかかります。とても大きくて綺麗なキャンパスでした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/8.png&#34; alt=&#34;&#34; /&gt;
日本のMaker Faireと違い、屋外に1つ1つが巨大なオブジェをかなりダイナミックに配置しているのがとても印象的でした。&lt;/p&gt;

&lt;h2 id=&#34;展示物紹介&#34;&gt;展示物紹介&lt;/h2&gt;

&lt;h3 id=&#34;さすが中国-編&#34;&gt;さすが中国！編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/9.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/10.png&#34; alt=&#34;&#34; /&gt;
くまモン（のパチモン）です。やたら腕が細長かったです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/11.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/12.png&#34; alt=&#34;&#34; /&gt;
筋電でドローンなどを制御できる腕輪です。かなり面白かったので購入しようとしたのですが、現金が足りず……。しかしここは中国、&lt;strong&gt;田舎の屋台ですらも電子マネーが使える国&lt;/strong&gt;です。WechatPayでなんとか購入することができました。&lt;/p&gt;

&lt;p&gt;ちなみに日本人がWechatPayを使うためには、「知人から送金してもらいPayアカウントを開設」し、「チャージ」する必要があります。「チャージ」は、本来は中国国内の銀行口座が必要ですが、国内の空港ででも日本円で可能なようです。&lt;/p&gt;

&lt;p&gt;参考 : &lt;a href=&#34;http://japanese.engadget.com/2017/07/27/wechat-pay/&#34;&gt;中国旅行の新定番！ ポケットチェンジでWeChat Payにチャージする：旅人目線のデジタルレポ 中山智 - Engadget 日本版&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ゲーム編&#34;&gt;ゲーム編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/13.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/14.png&#34; alt=&#34;&#34; /&gt;
RaspberryPiを使った超小型のスーファミのようなもの。レスポンスもよく、普通に遊べました。名作はひととおり揃っているようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/15.png&#34; alt=&#34;&#34; /&gt;
縁日で子供達が遊んでそうなおもちゃを作ったのは韓国のメイカーさん。スイッチ類が付いていてゴールしたら光ったりするそうですが、ちょうど修理中とのことでした。メイカーあるあるです。&lt;/p&gt;

&lt;h3 id=&#34;教育ツール編&#34;&gt;教育ツール編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/16.png&#34; alt=&#34;&#34; /&gt;
PCメーカー・acer製の教育用ツールです。PCやタブレットから、Arduinoとそれに接続されたセンサ群をスクラッチでプログラミングできるようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/17.png&#34; alt=&#34;&#34; /&gt;
IoT Brickという、ブロックパーツをつなげて回路を作り、コントローラで制御ができるプロダクトです。すこし昔の日本にもあった、電子ブロックのようなものでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/18.png&#34; alt=&#34;&#34; /&gt;
天津市の企業であるYwRobot社のArduino互換シールドです。ケーブルが一般的によく使用されているもので代替ができて便利で、機能性の高いユニークな基板がたくさん用意されていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/19.png&#34; alt=&#34;&#34; /&gt;
弊社でも取り扱いをしている、上海SeeedStudio社のプロダクトです。Grove Zeroなどの新製品が展示・販売されていました。&lt;/p&gt;

&lt;h3 id=&#34;デザイン編&#34;&gt;デザイン編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/20.png&#34; alt=&#34;&#34; /&gt;
眼球盦子という、こちらを見てくる目玉です。スマホと接続するとカメラが顔を認識し、顔のある方向に目玉がクリクリと動きます。買い換えたあとで余ってしまっているスマホを、インタラクティブな置物に変身させてくれそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/21.png&#34; alt=&#34;&#34; /&gt;
ボルトやらチェーンやらの無骨なパーツで構成されたオブジェが展示されていました。どちらかというと、美大生の作品のような印象です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/22.png&#34; alt=&#34;&#34; /&gt;
レーザーでカットされた木材でできた箱ですが、模様をずらして絵柄を合わせないと開くことができないようになっています。日本にも寄木細工の秘密箱がありますが、それの現代メイカー版といったところでしょうか。&lt;/p&gt;

&lt;h3 id=&#34;パワーを感じる編&#34;&gt;パワーを感じる編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/23.png&#34; alt=&#34;&#34; /&gt;
水上歩行を可能にする靴、いわゆる「忍者の水蜘蛛」です。後ろにはディスプレイがあって実際に水上を歩いている動画が流れていましたが、音と水しぶきだけやたらすごかったです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/24.png&#34; alt=&#34;&#34; /&gt;
Groveのタッチセンサがついていて、うっかり触れると赤い星がキラリと光ります。&lt;/p&gt;

&lt;h3 id=&#34;その他編&#34;&gt;その他編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/25.png&#34; alt=&#34;&#34; /&gt;
女の子が10人ほど、ライブコーディングならぬライブソーイング？で、目の前でミシンを使って作品を作り出していました。意外にも、出展者も来場者も女の子の割合が比較的高めな印象でした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/26.png&#34; alt=&#34;&#34; /&gt;
一般の出展者とは別に、各地の大学からきた学生サークルのブースばかりのエリアがありました。日本の理系大学の学園祭のような雰囲気ですが、ほとんど出払っていて人気があまりありません。どこかのブースではさりげなくただのガンプラとかも置いてあった気がします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/27.png&#34; alt=&#34;&#34; /&gt;
なんと食べ物の屋台もたくさん出ていました！無難に美味しかったです。日本人からすると物価が安いのでほぼ食べ放題ですね。&lt;/p&gt;

&lt;h2 id=&#34;電気街にも行ってきました&#34;&gt;電気街にも行ってきました&lt;/h2&gt;

&lt;p&gt;電子機器産業は深セン市全体で盛んではありますが、小売も卸売もどちらも行う業者が多数入り混じって一大繁華街を形成しているのが、深セン市中心部の華強路です。せっかくなので店舗を巡ってみました！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/28.png&#34; alt=&#34;&#34; /&gt;
去年まで行われていた大規模な工事が完了していて、とても綺麗な街並みでした。路上に落ちているゴミはほとんどなく、治安もとても良いです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/29.png&#34; alt=&#34;&#34; /&gt;
すぐ近くのお店に入ってみると、ケーブルやらコンセントやらがずらり。こんな調子のお店が百店舗近く詰まったビルがいくつも並んでいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/30.png&#34; alt=&#34;&#34; /&gt;
路上の仮設テントで、VRを利用したアトラクションゲームが楽しめます。このテントの前では人の胴体ぐらいの大きさの飛行機のラジコンが通りの上空を猛スピードで飛び回っていました。日本では絶対にできませんね……。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/31.png&#34; alt=&#34;&#34; /&gt;
DHLの集荷所のようです。秋葉原の路上で売られている製品も、ここから旅立っていくものはおそらく少なくないはずです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/32.png&#34; alt=&#34;&#34; /&gt;
最近話題の犬型ロボットだって、安く、早く、手に入ります。そう、深センならね。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;深センのMakerFaireは去年に引き続き2回目の来場でしたが、今年は少し規模が小さめになっており、ビジネス向け製品よりもデザイン寄りの作品がかなり多く出展されている印象でした。深センでは土地柄、新たなプロダクトを求めて来場するバイヤーも多く来場するそうですが、今回は会場が学校だったことが関係しているのかもしれません。&lt;/p&gt;

&lt;p&gt;また、日本人をはじめとする海外メイカー勢も多く見受けられました。中国って少し行きづらそうなイメージがありますが、実際に行ってみると&lt;strong&gt;想像以上に治安がよく、渡航費・滞在費もあまりかからず、どの国からでも意外と参加しやすい&lt;/strong&gt;のかもしれません。特に深センは世界的な国際港である香港に隣接していることもあり、電子工業が加速的に発展していった街でもあります。
ものづくりが好きだけど、まだ中国深センに行ったことがないという方も、この記事でご興味を持たれたらぜひ渡航してみてはいかがでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/34.png&#34; alt=&#34;&#34; /&gt;
現地に残ってお見送りする僕と知らないおじさん&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>オフィス移転したらインターホンがなかったのでRaspbeerry Piでカメラ付きインターホン作ってみた</title>
      <link>https://dotstud.io/blog/office-new-door-notification/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/office-new-door-notification/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioモノづくり担当・うこです。&lt;/p&gt;

&lt;p&gt;dotstudioは&lt;a href=&#34;https://dotstud.io/blog/office-relocation-for-akihabara/&#34;&gt;&lt;strong&gt;めでたく新オフィスに移転したのですが&lt;/strong&gt;&lt;/a&gt;、インターホンがついておらず不便なんですよね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/10.png&#34; alt=&#34;&#34; /&gt;
代表・のびすけ「&lt;strong&gt;うこ先生、これRaspberry Piでインターホン作れない？&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/1.png&#34; alt=&#34;&#34; /&gt;
僕「&lt;strong&gt;秒でいけます&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;ということで作ってみました！&lt;/p&gt;

&lt;h2 id=&#34;全体の構成&#34;&gt;全体の構成&lt;/h2&gt;

&lt;p&gt;今回は&lt;strong&gt;ボタンを押したら室内のスピーカに音がなる機能&lt;/strong&gt;に加えて、&lt;strong&gt;押した人の姿が見えるカメラ機能&lt;/strong&gt;も搭載してみました。&lt;/p&gt;

&lt;p&gt;全体の構成はこんな感じです。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/a7707b67-176f-8dc6-cf32-8323a56e860c.png&#34; alt=&#34;いんたーほん.png&#34; title=&#34;いんたーほん.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Raspberry Pi 3（以下ラズパイ）をベースにして、Grove接続されたタッチセンサに触れると室内のBluetoothスピーカー（今回はBASE EGG）から音が流れる仕組みを作ります。&lt;/p&gt;

&lt;p&gt;さらに、ラズパイカメラをドアの外に出して、外の様子がオフィス内のモニタから見られるようにします。&lt;/p&gt;

&lt;h3 id=&#34;使ったもの&#34;&gt;使ったもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3&lt;/li&gt;
&lt;li&gt;Raspberry Pi カメラモジュール&lt;/li&gt;
&lt;li&gt;Grove タッチセンサ&lt;/li&gt;
&lt;li&gt;Bluetoothオーディオトランスミッタ&lt;/li&gt;
&lt;li&gt;Bluetoothスピーカー（今回はBASS EGG）&lt;/li&gt;
&lt;li&gt;スピーカー（100円）&lt;/li&gt;
&lt;li&gt;オーディオ分岐プラグ（100円）&lt;/li&gt;
&lt;li&gt;マグネット付きプラスチックケース（100円）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;呼び鈴の製作&#34;&gt;呼び鈴の製作&lt;/h2&gt;

&lt;h3 id=&#34;ハードウェア部分&#34;&gt;ハードウェア部分&lt;/h3&gt;

&lt;p&gt;まずはじめに、&lt;strong&gt;来客者がボタンを押すと室内で音が鳴って訪問を知らせるようにする機能&lt;/strong&gt;を作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/12.png&#34; alt=&#34;&#34; /&gt;
ラズパイはマグネット付きのプラスチックケースに入れて、金属製のドアの内側に貼り付けます。ケースはケーブルが引き出せるように適宜加工します。&lt;/p&gt;

&lt;p&gt;次にGroveタッチセンサですが、そのままだとラズパイに接続できないためジャンパワイヤを3本用意します。接続するピンは以下のとおりです。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;タッチセンサのピン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ラズパイGPIO&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VCC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.3V&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;GND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ground&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SIG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ラズパイGPIOのピン番号と位置については、以下の公式ページにある2番目の図を参照してください。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/&#34;&gt;GPIO: MODELS A+, B+, RASPBERRY PI 2 B AND RASPBERRY PI 3 B&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次に、100円程度で売られているオーディオ出力分岐器をラズパイのオーディオ出力に接続し、さらにBluetoothのオーディオトランスミッタと小型のスピーカーに接続します。
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/133/11.png&#34; alt=&#34;&#34; /&gt;
実証の結果、「押した人にも音が鳴ったことがわかる」ことが必要とわかった
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;オーディオトランスミッタは室内に来客を知らせるスピーカーを鳴らす用、小型スピーカーはドアの外に出して来客者に「呼び鈴が鳴った」ことを知らせる用です。USB接続のアンプ付きスピーカーなどで大きな音が出せるのならそれで代用することができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/5.png&#34; alt=&#34;&#34; /&gt;
最後に電源を近くのコンセントからUSBアダプタ経由で接続してハードウェア部分は完了です！&lt;/p&gt;

&lt;h3 id=&#34;ソフトウェア部分&#34;&gt;ソフトウェア部分&lt;/h3&gt;

&lt;p&gt;まず、適当なインターフォンの音となるmp3を用意しましょう。簡単なピンポン音でも、ネタのような効果音でもいいです。dotstudioでは、「ファミマ入店音」が好評だったため採用しました。&lt;/p&gt;

&lt;p&gt;mp3が用意できたら、&lt;code&gt;/home/pi&lt;/code&gt;などのディレクトリに&lt;code&gt;sounds&lt;/code&gt;というフォルダを作ってその中にmp3を入れましょう。&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;sudo apt-get install mpg321&lt;/code&gt;を実行し、サウンド再生用のソフトウェア「mpg321」をインストールします。&lt;code&gt;mpg321 sounds/サウンド.mp3&lt;/code&gt;などと実行して、スピーカーから音が出ていればOKです。もしここで音が小さい場合は、&lt;code&gt;alsamixer&lt;/code&gt;コマンドを実行すると音量調整ができますので、矢印キーで大きくしておきます。&lt;/p&gt;

&lt;p&gt;音の再生が確認できたら、以下のPythonプログラムを&lt;code&gt;sounds&lt;/code&gt;ディレクトリと同じ場所に保存して実行します。タッチセンサを触ると同時に、音が鳴ってターミナル上に&amp;rsquo;Ping-pon!&amp;lsquo;と表示されれば成功です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-/home/pi/interphone.py&#34;&gt;#!/usr/bin/python

import RPi.GPIO as GPIO
import glob
import subprocess
from time import sleep
from random import shuffle

GPIO.setmode(GPIO.BCM)
GPIO.setup(24, GPIO.IN)

# mp3が保存されているディレクトリは適宜変更してください
soundlist = glob.glob(&amp;quot;./sounds/*.mp3&amp;quot;)

while True:
    if GPIO.input(24) == GPIO.HIGH:
        shuffle(soundlist)
        print(&#39;Ping-pon!&#39;)
        subprocess.call(&amp;quot;mpg321 -q &amp;quot;+soundlist[0], shell=True)
    else:
        sleep(0.01)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後に、再起動しても動くように、&lt;code&gt;/etc/rc.local&lt;/code&gt;ファイルの末尾に&lt;code&gt;/usr/bin/python /home/pi/interphone.py &amp;amp;&lt;/code&gt;と追記しておきましょう。
ちなみにですが、上記のコードでは&lt;code&gt;sounds&lt;/code&gt;ディレクトリ内に複数のmp3が入っているとランダムで再生されるような仕組みにしています。&lt;/p&gt;

&lt;h2 id=&#34;監視カメラ部分の製作&#34;&gt;監視カメラ部分の製作&lt;/h2&gt;

&lt;p&gt;監視カメラはラズパイ専用カメラを使用します。接続はとても簡単で、HDMI端子とオーディオ端子の間にある細長い端子にケーブルを差し込むだけです。&lt;code&gt;sudo raspi-config&lt;/code&gt;コマンドで、カメラを使うことができるように設定を変更しておきましょう。&lt;code&gt;raspistill -p&lt;/code&gt;コマンドを実行し、特にエラーが出なければ正常に接続されています。&lt;/p&gt;

&lt;p&gt;今回はカメラと呼び鈴部分は連動させず、カメラは&lt;a href=&#34;https://github.com/ccrisan/motioneye/wiki&#34;&gt;motionEye&lt;/a&gt;というオープンソースウェアを使って単独で動作させます。
motionEyeのインストールは以下を参考にしました。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://qiita.com/mt08/items/96207abfba91954b50d4&#34;&gt;らずぱい motionEye (Web UIベースのカメラサーバ) - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらのページにも書かれていますが、ラズパイのカメラモジュールを使用するので、以下のコマンドを実行しておくのを忘れないようにしましょう。
&lt;code&gt;grep bcm2835-v4l2 /etc/modules || echo bcm2835-v4l2 | sudo tee -a /etc/modules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/4.png&#34; alt=&#34;&#34; /&gt;
インストールが完了して、室内に常設してあるPCのブラウザからアクセスしてみました。
ばっちりドアの外が撮影されていますね！
1秒おきに更新されていますが、python上で動作しているためか、少々重たいようです。&lt;/p&gt;

&lt;h2 id=&#34;試してみる&#34;&gt;試してみる&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/7.png&#34; alt=&#34;&#34; /&gt;
インターホンを押すと……&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/4W4pJ0bZVGY&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;入店っぽい音が流れます！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/13.png&#34; alt=&#34;&#34; /&gt;
旧スタイルに比べるとだいぶ未来になりました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回は数時間ほどでこのシステムを作ることができました。カメラと呼び鈴が独立してしまっていますが、可能ならば「呼び鈴を押した瞬間の画像を保存してhipchatにアップロード」するような仕組みを作ってみたいです。
&lt;img src=&#34;https://dotstud.io/img/blog/133/3.png&#34; alt=&#34;&#34; /&gt;
次は何をつくってやろうか……。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【祝！移転】電気街すぐそこ！dotstudioのオフィスが移転しました！【D.I.Y】</title>
      <link>https://dotstud.io/blog/office-relocation-for-akihabara/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/office-relocation-for-akihabara/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとくです。もうすっかり冬ですね。なかなか出歩くのが億劫な季節になりました。&lt;/p&gt;

&lt;p&gt;でもオフィスから電気街遠い……駅も遠い……ってことで&lt;strong&gt;オフィス移転しましたー！！！&lt;/strong&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/132/1.png&#34; alt=&#34;&#34; /&gt;
今回は新オフィスの様子をたっぷりお伝えしたいと思います！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/2.png&#34; alt=&#34;&#34; /&gt;
ちなみにこちらが入居時の様子です。内装屋さんに頼んで、天井と床を剥いでもらいました。ペンキ塗りと床貼りのさまざまな知見（not IT）を得たのでいずれ記事にしたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;移転場所は電気街すぐ&#34;&gt;移転場所は電気街すぐ！&lt;/h2&gt;

&lt;p&gt;新しいオフィスを選ぶにあたっての一番の条件は「&lt;strong&gt;電気街に近いこと&lt;/strong&gt;」だったので、電気街すぐの場所に移動しました！
&lt;img src=&#34;https://dotstud.io/img/blog/132/5.png&#34; alt=&#34;&#34; /&gt;
秋月、千石、ツクモなどのパーツ屋さんはもちろん、カレーにラーメンにケバブなど、美味しいお店もたくさんあって嬉しいです（泣）&lt;/p&gt;

&lt;h2 id=&#34;オフィス内をチラ見せ&#34;&gt;オフィス内をチラ見せ！&lt;/h2&gt;

&lt;p&gt;オフィスの中を紹介します！改装中なのでなにかとお見苦しいですが、&lt;strong&gt;らしさ&lt;/strong&gt;ということでお願いいたします。
&lt;img src=&#34;https://dotstud.io/img/blog/132/map.png&#34; alt=&#34;&#34; /&gt;
ざっくりとした配置（予定）はこんな感じ。&lt;/p&gt;

&lt;h3 id=&#34;エントランス&#34;&gt;エントランス&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/3.png&#34; alt=&#34;&#34; /&gt;
扉を開けると、ぺっぱーくんがお出迎えしてくれます。生気がないのは気のせいです。&lt;/p&gt;

&lt;p&gt;中が丸見えで残念な感じですが、パーテーションを立てて草で装飾してステキな感じになる予定です。&lt;/p&gt;

&lt;h3 id=&#34;打ち合わせスペース&#34;&gt;打ち合わせスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/4.png&#34; alt=&#34;&#34; /&gt;
入って左は、来客用の打ち合わせスペースです。現状だと&lt;strong&gt;机が足りない&lt;/strong&gt;のでかなりタイトな感じになっています。&lt;/p&gt;

&lt;p&gt;コーヒーメーカーが導入されたのでお客様にコーヒーが出せるようになりました！！（ブラックのみ）&lt;/p&gt;

&lt;h3 id=&#34;ハンズオンスペース&#34;&gt;ハンズオンスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/6.png&#34; alt=&#34;&#34; /&gt;
ここが待望だったハンズオンスペースです。&lt;strong&gt;心の目で見てください&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;壁一面のデバイス棚、巨大モニター、芝生カーペットの上に半田ごて作業スペース……素敵ですよね。ここでイベントを開催する日が待ち遠しいです。&lt;/p&gt;

&lt;p&gt;※dotstudioはいま圧倒的に&lt;a href=&#34;http://amzn.asia/8KHCkEv&#34;&gt;床と照明&lt;/a&gt;が不足しています。&lt;/p&gt;

&lt;h3 id=&#34;キッチンスペース&#34;&gt;キッチンスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/8.png&#34; alt=&#34;&#34; /&gt;
NYはブルックリンスタイルをイメージした自慢のオシャレキッチン（予定地）です。&lt;/p&gt;

&lt;p&gt;テーブルとハイチェアを増設してバーカウンターみたいなやつを作ったり作らなかったりするかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;執務スペース&#34;&gt;執務スペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/9.png&#34; alt=&#34;&#34; /&gt;
会社のメイン機能である執務スペース！個人の引き出しやモニタが追加されました。日当たりがよくて眠かったり画面見えなかったりしますが、わたし的に一番好きな場所です。&lt;/p&gt;

&lt;p&gt;床（自分たちで貼った）が完全に乾いたら、みんな大好きな良いイスが導入されるよ！&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;床が足りなかったり、棚がなかったり、電球少なくて暗かったり……。新オフィスはまだまだ作っている途中です。
旧オフィスにも荷物があるので、こんな感じでちまちまと物を運んでいます。
&lt;img src=&#34;https://dotstud.io/img/blog/132/10.png&#34; alt=&#34;&#34; /&gt;
いつ来ても楽しくくつろいで過ごせるオフィスを目指して頑張っていきます！&lt;/p&gt;

&lt;p&gt;ということで&lt;strong&gt;&lt;a href=&#34;http://amzn.asia/8KHCkEv&#34;&gt;ウィッシュリスト&lt;/a&gt;&lt;/strong&gt;も作りましたのでよかったら応援おねがいします（笑）&lt;/p&gt;

&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/sushi.png&#34; alt=&#34;&#34; /&gt;
慰労寿司パ（定期）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.3</title>
      <link>https://dotstud.io/blog/hexo-static-site-vol3/</link>
      <pubDate>Tue, 31 Oct 2017 17:53:15 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hexo-static-site-vol3/</guid>
      
      <description>

&lt;p&gt;こんにちは、エンジニアのちゃんとくです。ひょんなことから&lt;a href=&#34;https://nodejs.connpass.com/&#34;&gt;&lt;strong&gt;Node女学園&lt;/strong&gt;&lt;/a&gt;というNode.jsを学ぶ女性のためのコミュニティを立ち上げました。&lt;/p&gt;

&lt;p&gt;このシリーズではNode女学園のブログを作りながら、&lt;strong&gt;Node.js製の静的サイトジェネレータ「Hexo」&lt;/strong&gt;の使い方を紹介していきます！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol2&#34;&gt;&lt;strong&gt;前回&lt;/strong&gt;&lt;/a&gt;はデザインを当ててブログのカスタマイズをしてみました。
&lt;img src=&#34;https://dotstud.io/img/blog/108/pre_art.png&#34; alt=&#34;&#34; /&gt;
&lt;center&gt;
&lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol2&#34;&gt;Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.2&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;今回はルートを追加してブログ記事以外のページを作ってみます。&lt;/p&gt;

&lt;h2 id=&#34;今回やること&#34;&gt;今回やること&lt;/h2&gt;

&lt;p&gt;現在はコマンドで記事を追加すると&lt;code&gt;サイトURL/:YYYY/:MM/:DD&lt;/code&gt;という記事が作成されるようになっています。&lt;/p&gt;

&lt;p&gt;これを変更して、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;サイトURL/about/&lt;/code&gt;という情報ページを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;に記事を生成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というのをやってみます。&lt;/p&gt;

&lt;h2 id=&#34;新しいルートを追加&#34;&gt;新しいルートを追加&lt;/h2&gt;

&lt;p&gt;ルートの追加は、&lt;code&gt;hexo new page &amp;quot;[新しいルート]&amp;quot;&lt;/code&gt;というコマンドで簡単にできます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/new_route.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;コマンドを実行すると&lt;code&gt;/source&lt;/code&gt;の下に新しいディレクトリが作成されます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/about_dir.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作成された&lt;code&gt;about/index.md&lt;/code&gt;にページ内容を記載します。&lt;/p&gt;

&lt;p&gt;ローカルサーバを起動して&lt;a href=&#34;http://localhost:4000/about/&#34;&gt;http://localhost:4000/about/&lt;/a&gt; を見てみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/about.png&#34; alt=&#34;&#34; /&gt;
新しいページができました！&lt;/p&gt;

&lt;h2 id=&#34;メニューに追加&#34;&gt;メニューに追加&lt;/h2&gt;

&lt;p&gt;今のままではどこからもリンクがないのでメニューのHomeの横に追加してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu_before.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/themes/pacman/_config.yml&lt;/code&gt;の&lt;code&gt;menu:&lt;/code&gt;に表示名とPATHを記載します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu.png&#34; alt=&#34;&#34; /&gt;
Archivesはしばらく不要なので消しました。ついでにEventsとStaffページも追加してみます。&lt;/p&gt;

&lt;p&gt;表示を確認します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu_after.png&#34; alt=&#34;&#34; /&gt;
メニューができました！各リンクが正しいかも確認しておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;blog記事のurlを変更する&#34;&gt;blog記事のURLを変更する&lt;/h2&gt;

&lt;p&gt;続いてブログ記事が&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;となるように変更していきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;プロジェクト/_config.yml&lt;/code&gt;を変更しましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/108/title.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;permalink:&lt;/code&gt;を&lt;code&gt;/:title/&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new_post_name:&lt;/code&gt;の項目を&lt;code&gt;blog/:title.md&lt;/code&gt;に変更します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/blog_title.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;新しい記事を作成してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/new_post.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;/source/blog&lt;/code&gt;の下に記事が追加されるようになりました。&lt;/p&gt;

&lt;p&gt;トップページを確認してみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/108/top.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; にはブログ一覧が表示されます。&lt;/p&gt;

&lt;p&gt;記事をクリックして飛んでみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/art.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;の形で記事が発行されました！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hexo deploy -g&lt;/code&gt;でデプロイです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/108/done.png&#34; alt=&#34;&#34; /&gt;
今回もコマンドと設定ファイルの編集で簡単にルーティングをすることができました。&lt;/p&gt;

&lt;p&gt;かなりサイトらしくなってきましたね！&lt;/p&gt;

&lt;p&gt;次回はサイドバーをカスタマイズしてみたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>みんなでﾀﾞｧｼｴﾘｲｪｽ！遅延すると光るガジェットをつくるIoTハンズオンを開催しました！</title>
      <link>https://dotstud.io/blog/train-nefry-ihandson-report/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/train-nefry-ihandson-report/</guid>
      
      <description>

&lt;p&gt;どうも、ポキオです。9月27日に、Nefry BTを使ったIoT初心者向けハンズオンを開催しました。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;https://dotstudio.connpass.com/event/61189/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/130/1.png&#34; alt=&#34;IoTハンズオン！【ﾀﾞｧ】Nefry BTで電車遅延すると光るガジェットを作ろう【ｼｪｲﾘｲｪｽ】&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://dotstudio.connpass.com/event/61189/&#34;&gt;IoTハンズオン！【ﾀﾞｧ】Nefry BTで電車遅延すると光るガジェットを作ろう【ｼｪｲﾘｲｪｽ】&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;今回、ハンズオンのお題は&lt;strong&gt;遅延すると光るガジェット&lt;/strong&gt;。IoTLTでおなじみ（？）のガジェットをみんなで作りました！&lt;/p&gt;

&lt;h2 id=&#34;イベント概要&#34;&gt;イベント概要&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/wionode-ifttt-handson-report/&#34;&gt;ゆっきんさんのハンズオン&lt;/a&gt;と同じく、&lt;strong&gt;デジタルハリウッド大学のLabProto&lt;/strong&gt;をお借りしてハンズオンを開催しました。色々なツールが所狭しと並び、机や椅子もまさに&lt;strong&gt;ラボ&lt;/strong&gt;な雰囲気を醸し出してる、お洒落な会場でした。
&lt;img src=&#34;https://dotstud.io/img/blog/130/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;IoTLTでは、私はもっぱら京急ネタで登壇させていただきましたが、今回は参加者の好きな路線を設定して、その路線が遅延したらNefry BTのLEDが光るようなガジェットを作成してみました。&lt;/p&gt;

&lt;h2 id=&#34;nefry-btって&#34;&gt;Nefry BTって？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/nefrybt/&#34;&gt;Nefry BT&lt;/a&gt;とは、ESP32というWi-FiとBLEと搭載したチップが載った、フリスクサイズの開発ボードのこと。&lt;a href=&#34;https://kibidango.com/513&#34;&gt;過去に行われたクラウドファンディング&lt;/a&gt;では437%を達成した、今話題のモジュールです。
&lt;img src=&#34;https://dotstud.io/img/blog/130/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;大切なものはすべて実装済み&#34;&gt;大切なものはすべて実装済み&lt;/h3&gt;

&lt;p&gt;IoTなガジェットを作る上で、ハードウェアの知識が無いと困ることも多いと思います。&lt;/p&gt;

&lt;p&gt;Nefry BTは開発ボードでよくある&lt;strong&gt;GPIO&lt;/strong&gt;はもちろん搭載していて、さらに&lt;strong&gt;フルカラーのLED&lt;/strong&gt;や&lt;strong&gt;ディスプレイ&lt;/strong&gt;、そして半田ごて不要で様々なセンサーを接続できる&lt;strong&gt;Groveシステム&lt;/strong&gt;にも対応。買ってすぐLチカや開発が始められる上に、Groveのセンサーを接続すれば色々なガジェットを作ることができます。&lt;/p&gt;

&lt;h3 id=&#34;便利な関数で楽々プログラミング&#34;&gt;便利な関数で楽々プログラミング&lt;/h3&gt;

&lt;p&gt;Nefry BTは設定がWebブラウザ上からできるなど、&lt;strong&gt;初心者にも非常に優しい作り&lt;/strong&gt;になっています。&lt;/p&gt;

&lt;p&gt;さらに&lt;a href=&#34;https://nefry.studio/&#34;&gt;ドキュメント&lt;/a&gt;では、便利な関数が多数公開されています。たとえば実装済みのフルカラーLEDは、コード上で複雑な初期化不要で、&lt;a href=&#34;https://nefry.studio/NefryLibrary/%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A8%E3%82%A2%E9%96%A2%E9%80%A3%E9%96%A2%E6%95%B0/#setled&#34;&gt;簡単に色を指定&lt;/a&gt;できます。&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;電車のおもちゃ（ダイソーで売ってる&lt;strong&gt;プチ電車シリーズ&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;Nefry BT&lt;/li&gt;
&lt;li&gt;USB延長ケーブル&lt;/li&gt;
&lt;li&gt;トレーシングペーパー&lt;/li&gt;
&lt;li&gt;両面テープ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;筆者の環境&#34;&gt;筆者の環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MacBook Air (13-inch, Mid 2013)&lt;/li&gt;
&lt;li&gt;OS X Yosemite 10.10.5&lt;/li&gt;
&lt;li&gt;Arduino IDE 1.8.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;電車の中にnefry-btをセット&#34;&gt;電車の中にNefry BTをセット&lt;/h2&gt;

&lt;p&gt;そんなNefry BTですが、実はダイソーで売っている電車のおもちゃの内部にピッタリ入ります。
&lt;img src=&#34;https://dotstud.io/img/blog/130/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nefry BTのUSBコネクター部分が電車の外に出るように、電車のおもちゃには少し加工をしています。USBコネクターにはUSB延長ケーブルを接続して、給電を行います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/130/6.png&#34; alt=&#34;&#34; /&gt;
また、LEDの光が拡散するように、電車の窓部分には内側からトレーシングペーパーを貼り付けています。Nefry BTに実装されているLEDだけでも、こんな感じで電車を光らせる事ができます！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/130/5.png&#34; alt=&#34;&#34; /&gt;
皆さん、もくもくと作成中！&lt;/p&gt;

&lt;h2 id=&#34;肝心のコーディング&#34;&gt;肝心のコーディング&lt;/h2&gt;

&lt;p&gt;ハンズオンでは特定の路線に遅延が発生したら光らせるプログラムを書き込みました。書き込みはArduino IDEより行いました。ちなみに、&lt;a href=&#34;https://dotstud.io/docs/nefrybt-wifi-setup/&#34;&gt;&lt;strong&gt;このページ&lt;/strong&gt;&lt;/a&gt;を参考にNefry BTのセットアップを済ませておくと、コード上でWi-Fi接続のシーケンスを実装しなくて済むので、非常に便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;WiFiClientSecure.h&amp;gt; // HTTPS通信のために必要

void setup() {
  // 何もしない
}

void loop() {
  // JSONを取得する
  String trainDelayJson = getTrainDelayJson();

  // JSONに特定の路線名が含まれているか確認する
  if (trainDelayJson.indexOf(&amp;quot;（好きな路線名）&amp;quot;) &amp;gt; 0) {
    blinkFor30Sec(255, 0, 0); // 赤く光らせる
  } else {
    blinkFor30Sec(0, 0, 255); // 青く光らせる
  }
}

// 鉄道遅延情報のjsonさんから、遅延情報（JSON）を取得する
String getTrainDelayJson() {
  WiFiClientSecure client; // 変数を宣言

  // サーバーにHTTPSのデフォルトポート（443）でアクセスしてみる
  if ( !client.connect(&amp;quot;rti-giken.jp&amp;quot;, 443) ) {
    Nefry.println(&amp;quot;接続失敗&amp;quot;);
    return &amp;quot;&amp;quot;;
  }

  client.print(String(&amp;quot;GET /fhc/api/train_tetsudo/delay.json HTTP/1.1\r\n&amp;quot;) +
               &amp;quot;Host: rti-giken.jp\r\n&amp;quot; +
               &amp;quot;Connection: close\r\n\r\n&amp;quot;); // HTTP-GETのリクエストメッセージを書く

  // レスポンスが来るまでちょっと待つ
  Nefry.ndelay(1000);

  // HTTP-GETのレスポンスを保存しておく変数
  String response = &amp;quot;&amp;quot;;

  // レスポンスを変数に格納する
  while (client.available()) {
    response += client.readStringUntil(&#39;\r&#39;);
  }

  Nefry.println(&amp;quot;接続成功&amp;quot;);
  Nefry.println(response);

  return response;
}

// 30秒間、500msecおきに点灯と消灯を繰り返します
void blinkFor30Sec(int r, int g, int b) {
  for (int i = 0; i &amp;lt; 30; i++) {
    Nefry.setLed(r, g, b);
    Nefry.ndelay(500);
    Nefry.setLed(0, 0, 0);
    Nefry.ndelay(500);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nefry BTから定期的にWi-Fi経由で鉄道の遅延情報を取得し、特定の路線が遅れているかどうかを監視するようにしています。遅延情報は&lt;a href=&#34;https://rti-giken.jp/fhc/api/train_tetsudo/&#34;&gt;&lt;strong&gt;鉄道遅延情報のjson&lt;/strong&gt;&lt;/a&gt;さんより、JSON形式のデータを受信することで実現しています。&lt;/p&gt;

&lt;h2 id=&#34;拡張性で広がるiot工作&#34;&gt;拡張性で広がるIoT工作&lt;/h2&gt;

&lt;p&gt;今回は、Nefry BTに乗っているハードウェアを使って工作をしました。前途の通り、Nefry BTにはGPIOとGroveシステムにも対応しているので、LEDを増設したり、センサーを追加するなどして、簡単に拡張できます。&lt;/p&gt;

&lt;p&gt;みなさんもNefry BTでIoT工作に踏み出してみませんか？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>フェスでテンあげ☆ 光るカセットテープ</title>
      <link>https://dotstud.io/blog/gyaruden-kyoko-led-cassette/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/gyaruden-kyoko-led-cassette/</guid>
      
      <description>

&lt;p&gt;みなさん、チョリおつ！ギャル電きょうこです。ギャルによるギャルのための電子工作をテクノロジーを提案するユニット、ギャル電で活動しておりまっす。今回は、フェスに相性ピッタリの光りものアクセの作り方を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;何を光らせたらエモいのか-問題&#34;&gt;何を光らせたらエモいのか?!問題&lt;/h2&gt;

&lt;p&gt;光るとモテる！
でも、なんでも光らせただけでかっこよくなるわけではないのです。
ギャル電も&lt;strong&gt;とりあえず光らせてみたけど全然ぐっと来ないものを作ってしまう&lt;/strong&gt;ことがよくあります。
&lt;img src=&#34;https://dotstud.io/img/blog/129/1.png&#34; alt=&#34;&#34; /&gt;
今回は、まずとりあえず首からさげられる形で単純にＬＥＤテープを貼り付けたものをつくってみましたが&lt;strong&gt;ときめきがゼロ！！！！
こんなもの！！！！！&lt;/strong&gt; 泣きながら窓から投げ捨てて、そっとあとで拾いに行きました。&lt;/p&gt;

&lt;p&gt;そのあと、おやつをたべながらテンションを上げるために&lt;strong&gt;スピードコア&lt;/strong&gt;（めっちゃテンポの速いナイスなミュージック）と&lt;strong&gt;バニラのテーマソング&lt;/strong&gt;を交互に聴いていたら&lt;/p&gt;

&lt;p&gt;天啓が下りてきました。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;カセットテープなら、首から下げる光もののケースにジャストフィット！！そしてエモい&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;ありがとう、スピードコアの神よ！
みんなもアイデアに詰まったときはスピードコア聴くといいよ。&lt;/p&gt;

&lt;h2 id=&#34;材料を揃えよう&#34;&gt;材料を揃えよう&lt;/h2&gt;

&lt;p&gt;今回の材料は、基板や配線以外はだいたい100均で揃えることができます。&lt;/p&gt;

&lt;p&gt;ボードは超小型ボード&lt;strong&gt;Digispark互換機&lt;/strong&gt;を使用しています。最初のセットアップは少し面倒ですが、安くて小さいので気軽に電子工作を作ることができます。&lt;/p&gt;

&lt;h3 id=&#34;材料&#34;&gt;材料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;カセットテープ（光を通すように透明なものか乳白色で透けるものがおすすめです）&lt;/li&gt;
&lt;li&gt;LEDテープ（1m60個ＬＥＤついてるテープを10LED分）&lt;/li&gt;
&lt;li&gt;ひも（ストラップはお好みで。わたしは柄がかわいい靴ひもを使いました）&lt;/li&gt;
&lt;li&gt;リング（事務用品コーナーに売ってる簡単な鉄の輪っか）&lt;/li&gt;
&lt;li&gt;Digispark互換機（amazonとかでこの名前で検索すると買えます）&lt;/li&gt;
&lt;li&gt;線材（普通の電線でOKですが、コネクタは付いてるとプログラムを入れなおすときとかにちょっと便利です）&lt;/li&gt;
&lt;li&gt;インシロック&lt;/li&gt;
&lt;li&gt;両面テープ（超強力）&lt;/li&gt;
&lt;li&gt;ニッパー&lt;/li&gt;
&lt;li&gt;ワイヤストリッパー&lt;/li&gt;
&lt;li&gt;はんだごて&lt;/li&gt;
&lt;li&gt;はんだ線&lt;/li&gt;
&lt;li&gt;ピンバイスまたはハンドドリル（本体穴あけ用）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ledのケース用にカセットテープを加工する&#34;&gt;LEDのケース用にカセットテープを加工する&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;まずはカセットテープの四隅のねじを外して分解します。
このとき、&lt;strong&gt;ねじが超小さいのでなくさないようになんか入れ物にいれたりマスキングテープに貼り付けておく&lt;/strong&gt;と便利です。&lt;/p&gt;

&lt;p&gt;また、&lt;strong&gt;分解する前に元の形がわかるように写真を撮っておくとあとですごい役立つのでおすすめ&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;磁気テープ部分は今回は使わないので軸からはさみで切り離して外します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/3.png&#34; alt=&#34;&#34; /&gt;
配線を通すため2.5センチくらいカセットテープの上端をカットして穴をあけておきます。
磁気テープ以外は、&lt;strong&gt;ディテールとしてエモいので元の位置に収まるように戻して使用&lt;/strong&gt;します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/4.png&#34; alt=&#34;&#34; /&gt;
リングを通すための穴をカットしたほうとは逆の上端にピンバイスであけておきます。&lt;/p&gt;

&lt;p&gt;以上でカセットテープの加工は完了です。&lt;strong&gt;後でさみしい気持ちになってしまうので、ねじは絶対に無くさないように注意です&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ledと基板のはんだ付け&#34;&gt;LEDと基板のはんだ付け&lt;/h2&gt;

&lt;p&gt;カセットテープにおさまるように、LEDテープを半分（LED5個ずつ）にカットして使用します。
&lt;img src=&#34;https://dotstud.io/img/blog/129/5.png&#34; alt=&#34;&#34; /&gt;
写真の丸がついてるところを何も接続しない状態ではんだづけします。
予備はんだってやつで、やっておくとあとで配線と部品をはんだ付けするのがスムーズになります。&lt;/p&gt;

&lt;p&gt;Digispark基板（おもて）は、5V、GND、P0と書いてある穴の上に予備はんだをします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/6.png&#34; alt=&#34;&#34; /&gt;
Digispark基板の裏と9V電池用のスナップ配線も予備はんだをします。
Digispark基板（うら）は、VIN、GNDを予備はんだします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※裏側の配線を間違えて5V,GNDで接続すると基板めっちゃ熱くなってなんか焦げたにおいして超ビビるので要注意です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/7.png&#34; alt=&#34;&#34; /&gt;
予備ハンダ作業が終わったら、まずはDigispark基板の裏側と9V電池用スナップをはんだ付けします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VIN － 赤い配線（電池プラス）&lt;/li&gt;
&lt;li&gt;GND － 黒い配線（電池マイナス）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をそれぞれ接続します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/8.png&#34; alt=&#34;&#34; /&gt;
次は、LEDに接続するための3本の線をDigispark基板の表側にはんだ付けします。
LEDに接続したときに、以下のように配線がつながるようにします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5V － （LED側）5V：今回の作例では赤い配線&lt;/li&gt;
&lt;li&gt;GND － （LED側）GND：今回の作例では白い配線&lt;/li&gt;
&lt;li&gt;P0 － （LED側）DIN：今回の作例では緑の配線&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/9.png&#34; alt=&#34;&#34; /&gt;
2本のLEDテープの間もはんだ付けでつなげます。
このとき、LEDテープの進行方向の矢印の向きを間違えないように注意します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/10.png&#34; alt=&#34;&#34; /&gt;
全体図はこんな感じです。
これで、LED配線のはんだ付けは完了でっす。&lt;/p&gt;

&lt;h2 id=&#34;プログラムの書き込み準備&#34;&gt;プログラムの書き込み準備&lt;/h2&gt;

&lt;p&gt;ここからは、初心者にはちょっと気合いのいる作業になります。&lt;/p&gt;

&lt;p&gt;でも、だいたい大丈夫！
わからない単語が出てきたら&lt;strong&gt;速攻ググるとわりとわかるようになります&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;つらくなったときは、光ってモテる近い将来を想像したりスピードコア聴いて気分転換したりご飯食べたり寝たりしてのりこえていきましょう。&lt;/p&gt;

&lt;p&gt;まずは、Digisparkボードにプログラムを書き込むためにArduino IDEというソフトウェアをPCにインストールします。&lt;/p&gt;

&lt;p&gt;下記リンクはMacでの説明なので、Windowsユーザーはダウンロードするファイルを選択するときに、Windowsのリンクを選んでダウンロードしてインストールを行ってください。&lt;/p&gt;

&lt;p&gt;【参考】&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;Arduino IDEをPCにインストール&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;arduinoideでdigisparkのボードを書き込めるように設定する&#34;&gt;ArduinoIDEでDigisparkのボードを書き込めるように設定する&lt;/h3&gt;

&lt;p&gt;英語のページになりますが、以下のページを参考にインストールを行いました。
&lt;a href=&#34;http://digistump.com/wiki/Digispark/tutorials/connecting&#34;&gt;http://digistump.com/wiki/Digispark/tutorials/connecting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※環境はWindows10（64bit）、ArduinoIDE 1.8.3にて動作を確認しました。&lt;/p&gt;

&lt;p&gt;大雑把にいうとWindowsの場合には、&lt;/p&gt;

&lt;p&gt;①ドライバをダウンロードしてインストールする
&lt;a href=&#34;https://github.com/digistump/DigistumpArduino/tree/master/tools&#34;&gt;https://github.com/digistump/DigistumpArduino/tree/master/tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;②ArduinoIDEを起動し、ファイル→環境設定→「追加のボードマネージャのURL」に
&lt;code&gt;http://digistump.com/package_digistump_index.json&lt;/code&gt;
をコピペで追加して「OK」ボタンで環境設定を閉じる&lt;/p&gt;

&lt;p&gt;③ツール→ボード→ボードマネージャをクリック&lt;/p&gt;

&lt;p&gt;④検索窓をクリックし、タイプの項目で「提供された」を選択。
「Digistump AVR Boards」を検索し、検索結果をクリックして「インストール」をクリック&lt;/p&gt;

&lt;p&gt;⑤インストール後、ツールから
「ボード：Digispark(Default - 16.5mhz)」
をクリックで選択&lt;/p&gt;

&lt;p&gt;上記手順で書き込み準備は完了です。&lt;/p&gt;

&lt;p&gt;プログラムは、以下のものをコピーしてArduinoIDEにペーストします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Adafruit_NeoPixel.h&amp;gt;
#ifdef __AVR__
  #include &amp;lt;avr/power.h&amp;gt;
#endif

//neopixcel用の設定部分

//neopixelを接続するPINを設定
#define PIN_LED 0

//neopixelのLEDの数を設定
#define NUM_LEDS 10

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, PIN_LED, NEO_GRB + NEO_KHZ800);

bool oldState = HIGH;
int showType = 0;

void showStrip() {
 #ifdef ADAFRUIT_NEOPIXEL_H
   strip.show();
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   FastLED.show();
 #endif
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
 #ifdef ADAFRUIT_NEOPIXEL_H
   strip.setPixelColor(Pixel, strip.Color(red, green, blue));
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   leds[Pixel].r = red;
   leds[Pixel].g = green;
   leds[Pixel].b = blue;
 #endif
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i &amp;lt; 17; i++ ) {
    setPixel(i, red, green, blue);
  }
  showStrip();
}

// ここからNeoPixelのアニメーション設定


void FadeInOut(byte red, byte green, byte blue){
  float r, g, b;

  for(int k = 0; k &amp;lt; 256; k=k+1) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }

  for(int k = 255; k &amp;gt;= 0; k=k-2) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }
}

void Strobe(byte red, byte green, byte blue, int StrobeCount, int FlashDelay, int EndPause){
  for(int j = 0; j &amp;lt; StrobeCount; j++) {
    setAll(red,green,blue);
    showStrip();
    delay(FlashDelay);
    setAll(0,0,0);
    showStrip();
    delay(FlashDelay);
  }

 delay(EndPause);
}

void Twinkle(byte red, byte green, byte blue, int Count, int SpeedDelay, boolean OnlyOne) {
  setAll(0,0,0);

  for (int i=0; i&amp;lt;Count; i++) {
     setPixel(random(NUM_LEDS),red,green,blue);
     showStrip();
     delay(SpeedDelay);
     if(OnlyOne) {
       setAll(0,0,0);
     }
   }
}
void TwinkleRandom(int Count, int SpeedDelay, boolean OnlyOne) {
  setAll(0,0,0);

  for (int i=0; i&amp;lt;Count; i++) {
     setPixel(random(NUM_LEDS),random(0,255),random(0,255),random(0,255));
     showStrip();
     delay(SpeedDelay);
     if(OnlyOne) {
       setAll(0,0,0);
     }
   }
}

//

void setup()
{
    pinMode(PIN_LED, OUTPUT);
    digitalWrite(PIN_LED, LOW);
   #if defined (__AVR_ATtiny85__)

   if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
}

void loop()
{
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x36, 0xEB, 0xFF);
    FadeInOut(0x36, 0xEB, 0xFF);
    FadeInOut(0x36, 0xEB, 0xFF);
    Twinkle(0xff, 40, 99, 10, 50, false);
    Twinkle(0xff, 40, 99, 10, 50, false);
    TwinkleRandom(20, 100, false);
    TwinkleRandom(20, 100, false);
    Strobe(0xff, 0xff, 0xff, 10, 50, 1000);
    Strobe(0xff, 0xff, 0xff, 10, 50, 1000);
    Strobe(0xff, 0xAB, 0xf9, 10, 50, 1000);
    Strobe(0xff, 0xAB, 0xf9, 10, 50, 1000);
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードはこの解説を書くのにちょっと疲れちゃったので光る大五郎のコードをセルフコピペしました。同じプログラムで光ります。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;書き込むときの注意ポイント&#34;&gt;書き込むときの注意ポイント&lt;/h4&gt;

&lt;p&gt;PCにDigisparkを差し込まない状態で、ArduinoIDEで「→（マイコンボードに書き込み）」をクリック
以下のメッセージが表示されたらPCにDigisparkを差し込む
&lt;img src=&#34;https://dotstud.io/img/blog/129/ide1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下記のメッセージが表示されたら書き込み完了！
&lt;img src=&#34;https://dotstud.io/img/blog/129/ide2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※うまく書き込みができないときには、「Digispark 互換 Windows10(またはMacとか自分の使ってるPCのOS)」のワードとかで検索するといいよ&lt;/p&gt;

&lt;h2 id=&#34;カセットテープとled配線を合体して組み立てよう&#34;&gt;カセットテープとLED配線を合体して組み立てよう&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/11.png&#34; alt=&#34;&#34; /&gt;
写真のように、配線用に穴をあけたほうのカセットテープ部品にLEDテープを貼ります。
カセットテープの元々の部品を組み込んで、ねじを締めてケースを閉じます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/12.png&#34; alt=&#34;&#34; /&gt;
後ろの配線はフィーリングでまとめて、真ん中の穴にインシロックを通して9V電池を固定します。電池の裏側とDigisparkの裏側に両面テープを貼っておくと、&lt;strong&gt;フェスでテンションが上がりすぎて激しく動いても部品が落ちません&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;LEDの電源を入れるときには、9V電池のスナップをつけて消したいときには外します。
つまり、スナップのつけ外し以外に特にスイッチはありません。&lt;/p&gt;

&lt;p&gt;光り方のプログラムによって、電池の消費量は変わります。
今回のプログラムだとだいたい連続使用で３時間程度で電池がなくなる感じです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/13.png&#34; alt=&#34;&#34; /&gt;
ピンバイスで開けた穴に、無理やりリングを通して好きなひもやストラップをつければ完成です！
やったね！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/14.png&#34; alt=&#34;&#34; /&gt;
この光るカセットテープ、ギャル電は&lt;strong&gt;無人島フェスやULTRAJAPANで実際に使ってみたけどやっぱめっちゃモテた&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;光るとめっちゃ楽しいから、みんなも作っていろんなところに遊びに行ってみてね☆&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#linedevday 2017レポート！ Clova連携で期待のGateboxの技術話を聞いてみたよ</title>
      <link>https://dotstud.io/blog/linedevday-report-2017-gatebox/</link>
      <pubDate>Thu, 28 Sep 2017 14:45:35 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/linedevday-report-2017-gatebox/</guid>
      
      <description>

&lt;p&gt;こんにちは、のびすけです。&lt;/p&gt;

&lt;p&gt;今日は&lt;a href=&#34;http://linedevday.linecorp.com/jp/2017/&#34;&gt;LINE DEVELOPER DAY 2017&lt;/a&gt;にお邪魔しています。&lt;/p&gt;

&lt;p&gt;Gateboxの話を聞いていましたが、&lt;strong&gt;Gateboxの技術にNode.jsが採用されていたことが驚きです。&lt;/strong&gt;って感じの話を書きます。&lt;/p&gt;

&lt;p&gt;(速報のりなので、誤字脱字あったらごめんなさい）&lt;/p&gt;

&lt;h2 id=&#34;line-developer-day-2017&#34;&gt;LINE DEVELOPER DAY 2017&lt;/h2&gt;

&lt;p&gt;LINEが開催している開発者向けのカンファレンスイベントです。&lt;/p&gt;

&lt;p&gt;LINEや周辺サービスの裏側の技術や今後の展開についての発表があるイベントです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3つの会場でパラレルでトークが展開されていきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/1-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;個人的には、今回は&lt;a href=&#34;https://clova.ai&#34;&gt;Clova&lt;/a&gt;やBotの話などを期待しています。（会場で、執筆してるので現在進行形）&lt;/p&gt;

&lt;h2 id=&#34;セッション-gateboxのこれまでとこれから&#34;&gt;セッション「Gateboxのこれまでとこれから」&lt;/h2&gt;

&lt;p&gt;ランチ後の最初のセッションです。&lt;/p&gt;

&lt;p&gt;Gateboxの紹介と今後についてを紹介するセッションでした。ちなみに、当日の発表資料は&lt;a href=&#34;https://www.slideshare.net/linecorp/gatebox-how-we-got-here-and-where-were-going&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gatebox.ai/&#34;&gt;Gatebox&lt;/a&gt;は好きなキャラクターと一緒に暮らせる世界初のバーチャルホームロボットです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/2-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;写真の通り、2次元のキャラクターがパーソナルアシスタントをしてくれるロボットです。
ロックマンエグゼのPETのイメージですね（分かる人いるかな&amp;hellip;）&lt;/p&gt;

&lt;p&gt;iOSのSiriにビジュアルが付いたものをイメージすると良いかもしれません。&lt;/p&gt;

&lt;p&gt;CF映画を彷彿させますね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/2-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Gateboxは2017年3月に&lt;a href=&#34;http://japanese.engadget.com/2017/03/02/line-gatebox-ai/&#34;&gt;LINEと資本提携&lt;/a&gt;をしてClovaとの連携が期待されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;発表はGatebox代表の武地さん。&lt;/p&gt;

&lt;p&gt;「AIやスマートスピーカーが話題になってきているけど人間が話しかけたくなるインターフェイスになっていない」、「実際に話しかけたくなるものを作りたい」という想いで
&lt;strong&gt;人間と同じようにキャラクターと生活できる世界&lt;/strong&gt;を目指してGateboxを開発しているそうです。&lt;/p&gt;

&lt;h2 id=&#34;gateboxとclova&#34;&gt;GateboxとClova&lt;/h2&gt;

&lt;p&gt;世の中のスマートスピーカーはクラウド上のAIなどが処理を行って言葉を返すけれど、Gateboxは性質上、ハードウェア側がリッチである必要があります。&lt;/p&gt;

&lt;p&gt;Gatebox側では見た目のリッチさ、キャラクターの動きなどユーザーと触れる部分の見た目、振る舞いに注力しているのが他のスピーカーデバイスなどとの大きな違いです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;逆にLINEのClovaはクラウド側やAIの仕組みに注力しているので、お互いの得意分野を生かしてより人間味のある仕組みを検討していくとのことです。&lt;/p&gt;

&lt;p&gt;確かに現状のそういったデバイスはどうにも機械的なものが多いので、インターフェイスが自分好みのキャラクターになれば、&lt;strong&gt;話しかけたくなるAI&lt;/strong&gt;ができますね。&lt;/p&gt;

&lt;h2 id=&#34;gateboxの技術話が初公開&#34;&gt;Gateboxの技術話が初公開&lt;/h2&gt;

&lt;p&gt;今回、話を聞けてよかったなぁと特に思ったのがここです。&lt;/p&gt;

&lt;p&gt;ここからは久森さんに交代です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gateboxの技術的な話を対外的にするのは今回が初めて&lt;/strong&gt;だそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;大きく分けるとこれが構成要素になるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクション&lt;/li&gt;
&lt;li&gt;音声発話&lt;/li&gt;
&lt;li&gt;センシング（人感センサやカメラ、マイクなど）&lt;/li&gt;
&lt;li&gt;ネットワーク（Wi-Fi、Bluetooth）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ハードウェア的な部分では中身の基盤部分も紹介してくれました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;また、内部ではLinuxが動いていて、そこに色々なソフトウェアが動いています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unity: キャラクターのアクションなど&lt;/li&gt;
&lt;li&gt;Node.js: 音声認識、センサーとのやりとり、司令塔的なポジション&lt;/li&gt;
&lt;li&gt;C++: 顔認識のライブラリなどとの通信&lt;/li&gt;
&lt;li&gt;SQLite: 顔を覚えたり、発話を記憶させたり&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、クラウド側で連動しているサービスの紹介です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;クラウド側でもNode.jsを中心にAPIを呼び出しています。
フルスクラッチで作るよりも、PaaSやBaaS系のサービスに乗せることでサービスの本質的な機能に集中して開発を進めているらしく、スタートアップのお手本のような開発だなぁと思いました。&lt;/p&gt;

&lt;p&gt;例えば、メールを送る部分はSendGridで、それをAzureなどのPaaSから呼び出したりしているそうです。&lt;/p&gt;

&lt;h3 id=&#34;node-jsをメインで採用している理由&#34;&gt;Node.jsをメインで採用している理由&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;個人的にはC++などではなく中心にNode.jsが利用されていることが驚きでした。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;僕はNode.js大好きなんですけど、実際のハードウェアプロダクトの中でNode.jsが動いているという例をあまり聞いたことがなかったので、パフォーマンス面や安定稼働とかの側面に不安は無いのかなど気になりすぎました。。。笑&lt;/p&gt;

&lt;p&gt;気になったのでセッション後のAsk the Speakerのコーナーで聞きましたが、開発スタート時にNode.jsを使えるエンジニアが多く、開発スピードを優先して選んだそうです。&lt;/p&gt;

&lt;p&gt;確かに内部のソフトウェアではNode.jsからシリアルの値を呼び出して、サーバー側でもNode.jsを動かしてと開発効率はバツグンにいいですし、チームの規模感や文化を優先する選択はさすがだと思いました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;現状は339台作っているそうですが、今後量産体制に入っていくときのアーキテクチャ検討が課題だそうです。&lt;/p&gt;

&lt;p&gt;サーバー側のアクセス数も増えていき、ユーザーの予期せぬ使い方なども増えていくため、安定稼働やスケールの仕組みを考える必要がありそうですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;けっこう込み入った話も気軽に答えてくれてGateboxの皆さんの暖かさを感じました。&lt;/p&gt;

&lt;p&gt;ありがとうございました！&lt;/p&gt;

&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;ClovaもGateboxはすごく未来を感じさせてくれるプロダクトなので、それらの組み合わせは本当に期待ですね。&lt;/p&gt;

&lt;p&gt;APIやSDKが提供され始めたらぜひ使ってみたいです。&lt;/p&gt;

&lt;p&gt;まだLINE DEVELOPER DAYは続いてますが面白いセッションが多いので、ツイートを　#linedevdayのハッシュタグで振り返ると面白いですよ。&lt;/p&gt;

&lt;p&gt;それでは、現場からは以上です :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>