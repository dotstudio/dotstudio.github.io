<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/blog/</link><description>Recent content in Blogs on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Tue, 14 May 2019 00:00:00 +1800</lastBuildDate><atom:link href="/blog/" rel="self" type="application/rss+xml"/><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-piano/</link><pubDate>Tue, 14 May 2019 00:00:00 +1800</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-piano/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。&lt;br /&gt;
&lt;a href=&#34;https://dotstud.io/blog/meeting-via-webrtc-piano/&#34;&gt;前回&lt;/a&gt;は、スタジオからなんとかオンラインミーティングに参加したのですが、当然ながらバレちゃいましたね……&lt;br /&gt;
しかし、新社会人も多いこの季節、同じような境遇に陥る若人も少なくないでしょう！！&lt;br /&gt;
というわけで、今回は市販のMIDIキーボードを使って、簡単にこの仕組みを自作する方法を解説します！&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア部分&#34;&gt;ハードウェア部分&lt;/h2&gt;
&lt;h3 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3B+&lt;/li&gt;
&lt;li&gt;マイクロSDカード（8GB以上）&lt;/li&gt;
&lt;li&gt;USB-MIDIキーボード&lt;br /&gt;
今回はKORG社のnanoKey2を使っていきますが、基本的には何でもOKです。&lt;/li&gt;
&lt;li&gt;Raspberry Pi Camera Module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ハードウェアは特に作成する必要がなく、カメラモジュールを基板にとりつけ、USB-MIDIキーボードを接続するだけでOKです！&lt;br /&gt;
スタジオ編では、実際にYAMAHAのMIDIキーボードを分解して内部にRaspberry Piを組み込んだものを使用しました。余力がある方は試してみてください♪&lt;/p&gt;
&lt;h2 id=&#34;ソフトウェアのインストールと設定&#34;&gt;ソフトウェアのインストールと設定&lt;/h2&gt;
&lt;p&gt;ここからは、すでにRaspberry PiへのOSインストールが完了していて、SSHなどを経由してターミナル操作ができる前提で解説してゆきます。&lt;br /&gt;
よくわからない、という方は、以下の記事の「2. ソフトウェアのインストールと設定」あたりを参照しながら、OSのインストールから始めてみてください。&lt;br /&gt;
&lt;a href=&#34;https://dotstud.io/blog/howto-make-webrtc-pokeberu/&#34;&gt;【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】 | dotstudio&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;映像のストリーミング&#34;&gt;映像のストリーミング&lt;/h3&gt;
&lt;p&gt;まず映像ストリーミングに必要なソフトウェアをインストールします。&lt;br /&gt;
gstreamerというストリーミングソフトウェアを使いますが、Raspberry Piへのインストールは少々複雑になります。
以下をそのままコピペしてターミナルで実行してください。&lt;br /&gt;
&lt;code&gt;$ sudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio libgstreamer-plugins-base1.0-dev&lt;/code&gt;&lt;br /&gt;
（参考：&lt;a href=&#34;https://gstreamer.freedesktop.org/documentation/installing/on-linux.html&#34;&gt;GStreamer Installing on Linux&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;上記のインストールが完了したら、次はラズパイカメラでgstreamerを扱うライブラリをインストールします。以下のコマンドを順番に実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/Documents
$ git clone https://github.com/thaytan/gst-rpicamsrc.git
$ cd gst-rpicamsrc/
$ ./autogen.sh --prefix=/usr --libdir=/usr/lib/arm-linux-gnueabihf/
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;midiキーボードをpythonから扱う&#34;&gt;MIDIキーボードをPythonから扱う&lt;/h3&gt;
&lt;p&gt;MIDIキーボードからの入力を取得できるPythonライブラリをインストールします。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo apt-get install libasound2-dev libjack-jackd2-dev&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ pip3 install mido python-rtmidi&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;プログラム部分の制作&#34;&gt;プログラム部分の制作&lt;/h2&gt;
&lt;h3 id=&#34;midiキーボードの確認&#34;&gt;MIDIキーボードの確認&lt;/h3&gt;
&lt;p&gt;必要なライブラリがインストールできたところで、まずはMIDIキーボードで2タッチ入力ができるか試してみましょう！&lt;br /&gt;
今回は、ソースコードが少し長いので、gitリポジトリからクローンします。&lt;br /&gt;
ディレクトリはあらかじめ適当なものを作成して移動するなどしておいてください。&lt;br /&gt;
&lt;code&gt;$ git clone https://github.com/ukkz/skygate.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;このリポジトリには、今回使う「SkyWay」に関するモジュールが含まれていますので、開発者モードでインストールします。&lt;br /&gt;
&lt;code&gt;$ pip3 install -e skygate/&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ sudo python3 skygate/setup.py develop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;クローンとモジュールのインストールができたら、MIDIキーボードから2タッチ入力ができるサンプルを、Python3で実行してみましょう。&lt;br /&gt;
このサンプルでは、外部MIDIインターフェースからのMIDIメッセージを解析して押されている鍵盤を特定し、鍵盤に割り当てられた数字をもとにして2タッチ入力変換をするものになっています。&lt;br /&gt;
&lt;code&gt;$ python3 skygate/2touch-input-by-midi.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;実行すると入力待ちになります。&lt;br /&gt;
上図を参考にして、&amp;rdquo;41128122##&amp;rdquo; と打ち込んでみてください。すると……&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi@raspberrypi:~ $ python3 skygate/2touch-input-by-midi.py
たいやき
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように表示されましたでしょうか？&lt;br /&gt;
&amp;ldquo;41128122&amp;rdquo; が、2タッチ入力では「たいやき」となり、また &amp;ldquo;##&amp;rdquo; が、ここでは「入力確定」の意味合いで使用するコマンドのようなものになっています。今回は、デバイス側からのメッセージ送信はこれを使って行いますのでぜひ覚えておいてください。&lt;/p&gt;
&lt;h3 id=&#34;skywayを使ってラズパイとブラウザ間でビデオチャット&#34;&gt;SkyWayを使ってラズパイとブラウザ間でビデオチャット&lt;/h3&gt;
&lt;p&gt;今回も、&lt;a href=&#34;https://dotstud.io/blog/howto-make-webrtc-pokeberu/&#34;&gt;以前にポケベルを作成した記事&lt;/a&gt;と同様に、通信部分で&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;というWebRTCプラットホームを利用します。&lt;br /&gt;
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br /&gt;
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong&gt;WebRTC Gateway&lt;/strong&gt; というものが開発されていて、無償で利用することができます。&lt;br /&gt;
詳細は以下をご覧ください。&lt;br /&gt;
&lt;a href=&#34;https://github.com/skyway/skyway-webrtc-gateway&#34;&gt;skyway/skyway-webrtc-gateway: &lt;em&gt;Experimental&lt;/em&gt; WebRTC Gateway for SkyWay&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;skywayのアカウント作成とapiキーの取得&#34;&gt;SkyWayのアカウント作成とAPIキーの取得&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://webrtc.ecl.ntt.com/signup.html&#34;&gt;新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a&gt;&lt;br /&gt;
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Application description: my midi chat client&lt;/code&gt;（一例。任意の名前でよいです）&lt;br /&gt;
&lt;code&gt;Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほどブラウザ上からビデオチャットを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br /&gt;
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;作成後のページはこのように表示されているかと思います。&lt;br /&gt;
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p&gt;
&lt;h4 id=&#34;webrtc-gatewayの取得と起動&#34;&gt;WebRTC Gatewayの取得と起動&lt;/h4&gt;
&lt;p&gt;Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br /&gt;
&lt;code&gt;$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;実行権限を付与してから、バックエンドで起動させます。&lt;br /&gt;
&lt;code&gt;$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;raspberry-pi-とブラウザ間で接続&#34;&gt;Raspberry Pi とブラウザ間で接続&lt;/h4&gt;
&lt;p&gt;以下のコマンドでサンプルスクリプトを実行します。&lt;br /&gt;
&lt;code&gt;$ python3 skygate/sample.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br /&gt;
今回は &amp;ldquo;keyboard&amp;rdquo; という値を使いましょう。&lt;br /&gt;
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Peer created as keyboard: pt-529579b6-1b69-4f81-b213-3400d039a3da&lt;/code&gt;&lt;br /&gt;
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;/p&gt;
&lt;p&gt;では次に、このRaspberry Piと通信したいPCのブラウザなどから、以下のURLを開きましょう。&lt;br /&gt;
&lt;a href=&#34;https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;&gt;SkyWay P2P Video &amp;amp; Text Chat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こちらはWeb側のチャット画面となるページですが、URLは以下のようになっています。&lt;br /&gt;
&lt;code&gt;https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;このうち、&lt;code&gt;apikey=&lt;/code&gt;より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;このような感じになっているかと思います。&lt;br /&gt;
このとき、Raspberry Pi側が正常にSkyWayに認識されていれば、左下のドロップダウンメニューに「keyboard」と表示が出ますので、その右横のcallボタンを押すと……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Raspberry Pi側からの映像が大きく映し出されていれば、問題なく接続されています！&lt;/p&gt;
&lt;h3 id=&#34;ビデオチャットにmidiメッセージングを組み込もう&#34;&gt;ビデオチャットにMIDIメッセージングを組み込もう&lt;/h3&gt;
&lt;p&gt;ここまでくれば、あとはビデオチャットとテキストチャットを結合し、さらにMIDIキーボードの2タッチ入力でテキスト入力ができるようにすれば、「キーボードを弾きながらオンラインミーティングに参加できるマシン」のできあがりです！&lt;br /&gt;
こちらも、ソースコードが少し長くなるのでリポジトリの中にサンプルを置いておきました。これをそのまま利用してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python3 skygate/video-and-text-by-midi.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;こちらのコードでは先ほどのMIDIキーボードの2タッチ入力に加え、WebRTCで着信した相手に対してその入力テキストを送り返すようになっています。&lt;br /&gt;
これを実行すると、以下のようになります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;2タッチ入力で「おつかれさまです！」と入力したのですが、最後だけ間違えて「おつかれさまですW」になってしまいました……　慣れないと難しいですね。&lt;br /&gt;
このまま送信すると、ブラウザ側では以下のようになります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ブラウザ側からも文字列が表示されました！&lt;br /&gt;
もちろん、返事をすることもできます。ここでは「進捗どう？」とブラウザ側から送りましたが、すでに表示されているとおり、Raspberry Pi側にもちゃんと送られていることが確認できます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;WebRTCを使うと、映像・音声のようなメディアストリームのほか、バイナリにすることができるデータならなんでも送ることができます！　また、本来はWebブラウザ同士でしか使えなかったこの技術が、SkyWayのGatewayによってRaspberry PiのようなIoTデバイスでも実現できるようになったため、さらにものづくりの幅が広がります。少し難しいところもありますが、ぜひともWebRTCによる新しい可能性を感じていただければと思います。&lt;/p&gt;</description></item><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【スタジオ編】</title><link>https://dotstud.io/blog/meeting-via-webrtc-piano/</link><pubDate>Mon, 13 May 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/meeting-via-webrtc-piano/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;最近、趣味でバンドを始めました。&lt;br /&gt;
なんとなくキーボードを担当しています。&lt;br /&gt;
いやー、音楽っていいものですね。&lt;br /&gt;
仕事のことを忘れてノリノリになっちゃいますね！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;こちらはギター担当の自給力さんです。&lt;br /&gt;
彼はパワー自慢なので、とても力強い演奏をしてくれるんですよ。&lt;br /&gt;
練習中でも、ヒートアップしてくると周りが見えなくなるぐらい熱いプレイを見せてくれる、素敵なメンバーです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;さて、セッティングも終わったし、そろそろ合わせ練習を始めますか！&lt;br /&gt;
3、2、1、ハイ！！&lt;/p&gt;
&lt;p&gt;………&lt;br /&gt;
……&lt;br /&gt;
…&lt;/p&gt;
&lt;h2 id=&#34;何か忘れているような&#34;&gt;何か忘れているような&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;あれ、スマホが鳴ってるな……&lt;br /&gt;
せっかくノッてきたのに。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;あ！！！！！そういえば！！！！！&lt;br /&gt;
今日ミーティング入ってた気がするぞ……！！&lt;br /&gt;
やばいやばい、完全に忘れてスタジオに来てしまった……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;そういえば、この前もミーティングすっぽかしちゃって、次やらかしたらクビだぞ！！　って社長のびすけに言われたばかりなんだった……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ああ、自給力さん、完全にスイッチ入ったな。&lt;br /&gt;
彼はこうなると、少なくとも1時間はもう戻ってこれなくなっちゃうんだよな。&lt;br /&gt;
どうしたものか……&lt;/p&gt;
&lt;p&gt;………&lt;br /&gt;
……&lt;br /&gt;
…&lt;/p&gt;
&lt;h2 id=&#34;ミーティングをサボらずにバンド練習を続けたい&#34;&gt;ミーティングをサボらずにバンド練習を続けたい&lt;/h2&gt;
&lt;p&gt;＼ｶﾗﾝｶﾗﾝ／&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;しまった、社会人なら必ずポケットに1人1セットは入っていると言われるラズベリーパイと専用カメラを、焦った拍子に落としてしまった。踏まなくてよかった。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;（ハッ！　まてよ、このスタジオはWiFi完備だったはず……　そして今日のミーティングはオンラインで、まだもう少し時間あるじゃないか！　これは、いける！）&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;（さらにノってきた自給力さん）&lt;/p&gt;
&lt;p&gt;〜　30分後　〜&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;できたぞ！！！！&lt;/strong&gt;&lt;br /&gt;
予備で持ってきていたシンセを改造して……&lt;br /&gt;
&lt;strong&gt;バンドをプレイしつつオンラインでミーティングにコミットできるソリューション……ッ！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;これは、ラズパイにつないだカメラの映像を、Webブラウザの画面にWebRTCの&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;を使って送信できる機能がついたシンセなのだ！&lt;br /&gt;
なに？　バンド演奏してたら、音がうるさすぎてマトモに会話できないって？　いーや問題ない！&lt;br /&gt;
このシンセは、打鍵のたびに &lt;strong&gt;「MIDI信号」&lt;/strong&gt; を発することができるのだけど、これをテキストに変換して映像と同時に送信できるような仕組みにしたのだ！　つまり、 &lt;strong&gt;音を出しながらもテキストデータを送信することができる！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;さて、マイクは壊れている、ということにして、映像とテキストチャットだけを送り、あとは自給力さんが映らないようにすれば、まさか仕事をすっぽかしてるなんてバレないでしょう。僕ってば天才！！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;そうこうしてるうちにミーティング時間だ！&lt;br /&gt;
演奏しつつ参加するぞ〜〜&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/15.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;カメラがキーボードの端にあるので、身体の中心を少しずらして目線を合わせて……&lt;br /&gt;
文字列の送信は、キーボードの1オクターブ・12鍵を、「ポケベルの2タッチ入力」のようにして扱うことで行います。&lt;br /&gt;
向こうからの映像は見えないけど、スマホからラズベリーパイにSSH接続することで、向こうから送られたテキストなら確認可能！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/16.png&#34; alt=&#34;16&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
お疲れ様です！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
お疲れ。あれ、音聞こえてないけど。なんでテキストメッセージ？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
マイクの調子が悪いんです。すいませんがテキストで送りますんで……
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あっそう。無理せずに電話かけてくれてもいいよ
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（そっちのが楽だけどかけたらバレる……汗）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/17.png&#34; alt=&#34;17&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
おいおい〜〜さっきから音が変だぞ？　大丈夫か？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ﾍｱｯすみません！！　ちょっとここのフレーズが難しくて！（自給力さんの自己陶酔タイムが切れた！　まずいまずい、しかもなんか近い！）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ああ、ここは俺の超絶技巧が光るところだから、お前はそんなに頑張らなくていいぞ。でももう少し真剣に頼むよ
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
はいぃ……（危なかった、バレてないバレてない）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/18.png&#34; alt=&#34;18&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
〜〜ということで、次回イベントを企画したいんだけど……　聞こえてる？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
だっ大丈夫です！（大丈夫じゃない）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
うおおおーッノッてきたぜッッッ！！！（ｼﾞｬｶｼﾞｬｶｼﾞｬｰﾝ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（ﾋｯ……ここは演奏とチャットを同時に頑張って耐えるんだ……！）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;………&lt;br /&gt;
……&lt;br /&gt;
…&lt;/p&gt;
&lt;h2 id=&#34;なんとか乗り越えられそうだ&#34;&gt;なんとか乗り越えられそうだ&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/19.png&#34; alt=&#34;19&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
……じゃ、今度のイベントはそういう感じになるから。お願いできるね？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
もちろんです！（よし、終わりが見えてきたぞ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（黙々とロックンロールしている）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（自給力さんも気づいてないな……　でもさらに近づいてきててなんか怖い）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あ、そういえばさ、別件で……
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ｱｯﾊｲ！！（まだあるんかーい！）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/20.png&#34; alt=&#34;20&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
♪♪♪♪（激しく頭を振りながらプレイ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（あっ自給力さんそんなに近寄らないで……ちょ、ちょっ…… &lt;b&gt;アッ、アーッ！！！！！！&lt;/b&gt;　ｺﾞﾝｯ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/21.png&#34; alt=&#34;21&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/22.png&#34; alt=&#34;22&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;結局バレてしまいましたが&#34;&gt;結局バレてしまいましたが&lt;/h2&gt;
&lt;p&gt;次回は、今回作った「演奏と同時にWebRTCでビデオ・テキストチャットができるシンセ」の作り方を紹介していきます！&lt;br /&gt;
ミーティングをサボるため以外にも、映像・歌・演奏MIDIデータを同時にリアルタイム配信するなどの（まともな）用途にも使えますので、気になった方はぜひ続きもご覧くださいね！&lt;/p&gt;
&lt;style&gt;
.dialogue {
padding: 10px;
display: table;
}
.image_s, .image_n, .image_u {
width: 75px;
height: 75px;
margin-right: 10px;
display: table-cell;
vertical-align: middle;
}
.image_s img {
border-radius: 50%;
border: 2px solid red;
}
.image_n img {
border-radius: 50%;
border: 2px solid blue;
}
.image_u img {
border-radius: 50%;
border: 2px solid green;
}
.name {
font-weight: bold;
text-align: center;
}
.text {
display: table-cell;
padding: 0;
vertical-align: middle;
padding-left: 20px;
}
&lt;/style&gt;</description></item><item><title>光るサンドバッグ作って◯-monsterの気分を感じたい！</title><link>https://dotstud.io/blog/shining-sandbag-like-bmonster/</link><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/shining-sandbag-like-bmonster/</guid><description>
&lt;p&gt;プログラミングをしていると運動不足になりがちです。&lt;/p&gt;
&lt;p&gt;何か作っている時のストレスもあります。（なんで動かないんだーってw）&lt;/p&gt;
&lt;p&gt;ストレス発散したい！&lt;/p&gt;
&lt;p&gt;手っ取り早くストレス発散して運動ができるのは何でしょう、、サンドバック殴ることですよね！&lt;br /&gt;
（この辺りから、B-◯onsterっぽくしたい欲が出てきます笑）&lt;/p&gt;
&lt;p&gt;サンドバックを買って、叩く毎に光ったり音鳴ったりしたら良い気晴らしになるんじゃないかと。&lt;/p&gt;
&lt;p&gt;ということで、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;光るサンドバッグを作ってB-Mons◯erに行った感じを味わいたい！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ではでは、作っていきましょう&lt;/p&gt;
&lt;h2 id=&#34;完成物のイメージ&#34;&gt;完成物のイメージ&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;パンチしたら全体が光る。&lt;/em&gt;&lt;/strong&gt;
→この記事では、加速度センサを使って音を鳴らすまで作ってみます。仕様としては以下のことができたら達成とします。&lt;/p&gt;
&lt;p&gt;・サンドバックを叩いたら、音が出る&lt;br /&gt;
・５回叩いたら、音が変わる。&lt;br /&gt;
・10回叩いたら、音楽が鳴る。&lt;/p&gt;
&lt;h2 id=&#34;必要な物&#34;&gt;必要な物&lt;/h2&gt;
&lt;p&gt;・サンドバック&lt;br /&gt;
・microbit&lt;br /&gt;
・電子ブザー&lt;br /&gt;
・Micro USB Micro-B&lt;br /&gt;
・ワニ口クリップ&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;サンドバックを作ってみる&#34;&gt;サンドバックを作ってみる&lt;/h2&gt;
&lt;p&gt;まずは、サンドバックを作っていきましょう。&lt;br /&gt;
これを買ってみました（&lt;a href=&#34;http://urx.space/U1ry）&#34;&gt;http://urx.space/U1ry）&lt;/a&gt;&lt;br /&gt;
開けけてみて思ったのですが、なかなかしっかりしてて良い感じのサンドバックです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;中身を確認して、作っていきましょう！！！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;水を使って土台を作るタイプなので、屋外でやりましょう（じゃないと母ちゃんに怒られますよ笑）&lt;br /&gt;
＊ペットボトルたちは猫避けではなく、土台に使う水です。&lt;br /&gt;
凝固剤も入っていて、なかなか本格的！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;土台ができたら、膨らましていきましょう！&lt;br /&gt;
（なんか、いかがわしい形と動きをしますが、、下ネタご了承ください）&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;良い感じに膨らんだらサンドバックは完成です&lt;br /&gt;
センサに移りましょう&lt;/p&gt;
&lt;h2 id=&#34;センサを作ってみる&#34;&gt;センサを作ってみる&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;・micro softアカウントを作ってサインイン&lt;/strong&gt;
microbitはBBCが作ってる教育用のマイコンでして、&lt;br /&gt;
マイクロソフトアカウントが必要なので、持ってない人は作りましょう。&lt;br /&gt;
ここから作れます。&lt;a href=&#34;https://microbit.org/ja/guide/&#34;&gt;https://microbit.org/ja/guide/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・make code エディターでコードを編集します。&lt;/strong&gt;
microbitにコードを書き込むには３つの方法があります。&lt;/p&gt;
&lt;p&gt;JSやPythonで書くこともできますが、一番簡単なのはmake code エディターのブロックで入力することです。&lt;br /&gt;
このエディターを使えば、こんな感じで簡単にコードを書くことができます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ブロックの意味はJSを書いたことなくてもわかるかも。&lt;/p&gt;
&lt;p&gt;マイプロジェクトから新しいプロジェクトを開いて作っていきます。&lt;/p&gt;
&lt;p&gt;「ずっと」のブロックをここでは2つ作ります。&lt;br /&gt;
　・カウントする「ずっと」&lt;br /&gt;
　・音を鳴らすための「ずっと」&lt;br /&gt;
＊１つにまとめるのもできると思いますが、わかり安かったので分けました。&lt;/p&gt;
&lt;p&gt;カウントする「ずっと」の方に、accXという変数を作り、加速度Xという入力ブロックを追加します。&lt;br /&gt;
そして、「もし」ブロックで、accXが500未満であればLEDが点灯し、音楽が鳴るブロックにしていきます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;音を鳴らすための「ずっと」ブロックを作っていきます。&lt;br /&gt;
まず、「最初だけ」ブロックに変数カウントを0にして置いておきます。&lt;br /&gt;
そして、カウントする「ずっと」の方に「もし」ブロックを入れて5回いった時と10回いった時にLEDの点灯と音楽が鳴るようにします。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・microbitとブザーを繋げます&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;おお、っぽくなってきました！&lt;/p&gt;
&lt;p&gt;そして、サンドバックに貼り付ければ、、、&lt;/p&gt;
&lt;h2 id=&#34;できました&#34;&gt;できました！！&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/248/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・デモ動画&lt;/strong&gt;
&lt;a href=&#34;http://www.youtube.com/watch?v=it0159iWUrQ&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/it0159iWUrQ/0.jpg&#34; alt=&#34;IMAGE ALT TEXT HERE&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;あとがき-挫折の数々&#34;&gt;[あとがき] 挫折の数々&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;・最初のイメージを捨てました&lt;/strong&gt;
最初は単純に光るだけのサンドバックデバイスを作ろうと思っていました。でも、プロトタイプを作る際にLEDが光るだけだと、サンドバックを叩いた時にLEDの光を確認できないんですよねww&lt;/p&gt;
&lt;p&gt;なので、一緒に音も出るように変更しました。&lt;br /&gt;
そのおかげで、ゲーム性が高くなって良い感じになりました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;・使う物を変えました&lt;/strong&gt;
最初、microbitではなくwio nodeとグローブで作ろうとしてました。&lt;br /&gt;
でも、「加速度センサ使ってプロトタイプ作るだけならmicrobitで良いんじゃね？」とのびすけしゃちょーにアドバイスもらい試しに使うことにしました。&lt;/p&gt;
&lt;p&gt;結局、変えてみてよかったです！&lt;br /&gt;
microbitはものすごく使いやすい。デプロイの仕方も編集したブロックのhexファイル（microbit用のファイル）をmicrobitのフォルダに入れるだけでできます。&lt;br /&gt;
全部のプログラミングがこうなれば良いのに、、って思うぐらいプログラミングしやすかったです。&lt;/p&gt;</description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。
&lt;a href=&#34;https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/&#34;&gt;前回の記事&lt;/a&gt;では、最新技術でポケベルを作ってみた！　というお話と、Webから2タッチ入力ができる公衆電話アプリの紹介をさせていただきました。&lt;/p&gt;
&lt;p&gt;2回目の今回は「制作編」ということで、パーツさえ用意できれば誰でも作れてしまうポケベルの作り方を紹介したいと思います！&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア部分の制作&#34;&gt;ハードウェア部分の制作&lt;/h2&gt;
&lt;h3 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3B+&lt;/li&gt;
&lt;li&gt;マイクロUSBケーブル&lt;/li&gt;
&lt;li&gt;マイクロSDカード（8GB以上）&lt;/li&gt;
&lt;li&gt;GrovePi+&lt;/li&gt;
&lt;li&gt;Grove Buzzer&lt;/li&gt;
&lt;li&gt;Grove LCD RGB Backlight&lt;/li&gt;
&lt;li&gt;有線LANで作業用PCと接続できる環境（セットアップに使います）&lt;/li&gt;
&lt;li&gt;テープ（ガムテープやセロハンテープ、マスキングできれば何でも可）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前提として、最低限のCLI（ターミナル）操作ができる方を対象として記事を書いています。予めご了承ください。&lt;/p&gt;
&lt;h3 id=&#34;組み立て&#34;&gt;組み立て&lt;/h3&gt;
&lt;h4 id=&#34;grovepi-をraspberry-piとドッキングする&#34;&gt;GrovePi+をRaspberry Piとドッキングする&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ガムテープやセロテープなどで、Raspberry PiのUSB端子の上部を図のように「マスキング」します。&lt;br /&gt;
これは、上に乗せるGrovePi+の基板が直接触れることによるショートを防止するためです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Raspberry Piの端子にGrovePi+のソケットを上から挿し込みます。&lt;br /&gt;
このとき互いの端子の長さが異なりますが、写真のようにカド部分にあわせるようにしてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;斜め上から見るとこのようになります。&lt;/p&gt;
&lt;h4 id=&#34;groveのrgb-lcdとブザーを接続する&#34;&gt;GroveのRGB LCDとブザーを接続する&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Groveのブザーを「D8」と書かれている端子にGroveケーブルで接続します。&lt;br /&gt;
また、Grove LCD RGB BacklightをI2Cと書かれている端子に接続します。こちらはI2C接続なので、I2Cと記述がある端子ならどこでもかまいませんが、写真ではI2C-1という端子に接続しています。&lt;/p&gt;
&lt;h2 id=&#34;ソフトウェアのインストールと設定&#34;&gt;ソフトウェアのインストールと設定&lt;/h2&gt;
&lt;h3 id=&#34;grovepi-向けos-raspbian-for-robots&#34;&gt;GrovePi+向けOS「Raspbian For Robots」&lt;/h3&gt;
&lt;p&gt;このパートは以下のチュートリアルの概略になります。&lt;br /&gt;
&lt;a href=&#34;https://www.dexterindustries.com/GrovePi/get-started-with-the-grovepi/&#34;&gt;Get Started with GrovePi&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;マイクロsdカードへのインストール&#34;&gt;マイクロSDカードへのインストール&lt;/h4&gt;
&lt;p&gt;GrovePi+を動作させられるソフトウェアがプリインストールされたOSが格納されたマイクロSDカードを作成します。&lt;/p&gt;
&lt;p&gt;公式サイトによると、すでにインストール済みのRaspbianも後から追加でGrovePi+用のソフトウェアがインストールできるとのことですが、記事執筆時点の最新ソフトウェアではうまく動作しませんでした。&lt;br /&gt;
すでにRaspbianを使われている方も、お手数ではありますが新しいマイクロSDカードを入手してお試しください。&lt;/p&gt;
&lt;p&gt;まず、以下のページからOSイメージファイルを入手します。&lt;br /&gt;
&lt;a href=&#34;https://sourceforge.net/projects/dexterindustriesraspbianflavor/&#34;&gt;Raspbian For Robots by Dexter Industries download | SourceForge.net&lt;/a&gt;&lt;br /&gt;
圧縮ファイルになっていますので、ダウンロード完了後に解凍しておきましょう。&lt;/p&gt;
&lt;p&gt;このイメージファイルをマイクロSDカードに書き込みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作業PCがWindowsの方は以下を参考に進めてください。&lt;br /&gt;
&lt;a href=&#34;https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/&#34;&gt;最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作業PCがMacの方は以下を参考に進めてください。&lt;br /&gt;
&lt;a href=&#34;https://qiita.com/py_iK/items/9070fc58f69d8c063e44&#34;&gt;MacでRaspberryPi入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールが完了したら、RaspberryPiに挿入して電源を接続し起動させます。&lt;br /&gt;
LANケーブルを使い、Raspberry Piと作業用PCを接続します。最近の小型PCはLANポートがついていないことも多いため、その際はUSBイーサネットアダプタなどを使うとよいでしょう。&lt;/p&gt;
&lt;p&gt;接続が完了し、Raspberry PiとGrovePi+のPWR LEDが点灯していることを確認したら、作業用PCブラウザのURL入力欄に&lt;br /&gt;
&lt;code&gt;http://dex.local/&lt;/code&gt;&lt;br /&gt;
と入力して移動します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ここまででうまくインストールと接続が完了していれば、このような画面が表示されます。&lt;br /&gt;
ブラウザ中段左側の、&amp;rdquo;VNC&amp;rdquo; をクリックすると、ブラウザからRaspberry Piのデスクトップ画面へと直接アクセスすることができます。&lt;/p&gt;
&lt;h4 id=&#34;設定とシステムのアップデート&#34;&gt;設定とシステムのアップデート&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;VNC&amp;rdquo; をクリックします。もしもパスワードが求められたら、&amp;rdquo;robots1234&amp;rdquo; と入力しましょう。&lt;br /&gt;
Raspberry Piの本体にWiFiが内蔵されているモデル以外をお使いの場合は、WiFiドングル（USB接続の子機）を接続します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;右上に上下の矢印2つのアイコンをクリックして、WiFiに接続しましょう。&lt;br /&gt;
有線LANによる接続と別でWiFiに接続していないと、アップデートやSkyWayへの接続などができません。&lt;/p&gt;
&lt;p&gt;次にソフトウェアのアップデートを行います。&lt;br /&gt;
&amp;ldquo;DI Software Update&amp;rdquo; というアイコンをダブルクリックして開き、しばらく待つと以下の画面になります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;以下の作業でダイアログが何回か出ますがすべてOKをクリックしてください。&lt;br /&gt;
ドロップダウンメニューから &amp;ldquo;GrovePi&amp;rdquo; を選択し、&amp;rdquo;Update Firmware&amp;rdquo; をクリックします。&lt;br /&gt;
それが完了したら、&amp;rdquo;Update Dexter Software&amp;rdquo; のボタンもクリックしてアップデートを行います。&lt;/p&gt;
&lt;p&gt;ターミナルウインドウが出てアップデートが進行していきますので、少し時間がかかりますが終わるまで気長に待ちましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ターミナルがこのような画面になったら閉じて、Raspberry Piを再起動します。&lt;br /&gt;
再起動後は同様の手順でブラウザからデスクトップが表示できるところまで進めて、このデスクトップからターミナルを開きましょう。&lt;br /&gt;
あるいは、SSHが使い慣れている方であれば、作業用PCから&lt;br /&gt;
&lt;code&gt;$ ssh pi@dex.local&lt;/code&gt;&lt;br /&gt;
で直接CLI操作をすることも可能ですので、使いやすいほうをお試しください。&lt;/p&gt;
&lt;h2 id=&#34;ポケベルのプログラム部分の制作&#34;&gt;ポケベルのプログラム部分の制作&lt;/h2&gt;
&lt;h3 id=&#34;groveのlcdとブザーを扱う&#34;&gt;GroveのLCDとブザーを扱う&lt;/h3&gt;
&lt;p&gt;さて、ここからはポケベルを実際に動作させるためのプログラムを作成していきます！&lt;br /&gt;
といっても、全てコピー&amp;amp;ペーストで作成していただけますのでご安心を。&lt;/p&gt;
&lt;p&gt;まずは適当なディレクトリを作成して移動します。&lt;br /&gt;
&lt;code&gt;$ mkdir ~/pocketbell; cd ~/pocketbell&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;LCDディスプレイを簡単に扱えるようにしてくれるモジュールをコピーします。&lt;br /&gt;
&lt;code&gt;$ cp ~/Desktop/GrovePi/Software/Python/grove_rgb_lcd/grove_rgb_lcd.py ./&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同じディレクトリに、テスト用スクリプトを作成しましょう。&lt;br /&gt;
&lt;code&gt;$ vi grove_test.py&lt;/code&gt;&lt;br /&gt;
ここではviエディタを使っていますが、vimやemacsなど、編集のできるものであれば何でもかまいません。&lt;br /&gt;
編集画面になったら、以下のソースコードをコピー&amp;amp;ペーストして保存してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ファイル:grove_test.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
try:
setRGB(200, 200, 200)
setText(&amp;quot;Hello PocketBell&amp;quot;)
grovepi.digitalWrite(buzzer, 1)
time.sleep(1)
grovepi.digitalWrite(buzzer, 0)
except KeyboardInterrupt:
grovepi.digitalWrite(buzzer, 0)
except IOError:
print (&amp;quot;Error&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存したら、python3で実行してみましょう。&lt;br /&gt;
&lt;code&gt;$ python3 grove_test.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ブザーからビープ音が鳴ると同時に、LCDに &amp;ldquo;Hello PocketBell&amp;rdquo; と表示されていれば、GroveがRaspberry PiのPythonから正しく扱えていることがわかります。&lt;/p&gt;
&lt;h3 id=&#34;skywayと接続する&#34;&gt;SkyWayと接続する&lt;/h3&gt;
&lt;p&gt;今回のポケベル制作における通信部分は、&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;というWebRTCプラットホームを利用します。&lt;br /&gt;
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br /&gt;
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong&gt;WebRTC Gateway&lt;/strong&gt; というものが開発されていて、無償で利用することができます。&lt;br /&gt;
詳細は以下をご覧ください。&lt;br /&gt;
&lt;a href=&#34;https://github.com/skyway/skyway-webrtc-gateway&#34;&gt;skyway/skyway-webrtc-gateway: &lt;em&gt;Experimental&lt;/em&gt; WebRTC Gateway for SkyWay&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;skywayのアカウント作成とapiキーの取得&#34;&gt;SkyWayのアカウント作成とAPIキーの取得&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://webrtc.ecl.ntt.com/signup.html&#34;&gt;新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a&gt;&lt;br /&gt;
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p&gt;
&lt;p&gt;Application description: my pocketbell（一例。任意の名前でよいです）&lt;br /&gt;
Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/p&gt;
&lt;p&gt;&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほど公衆電話アプリからこのアプリケーションを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br /&gt;
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;作成後のページはこのように表示されているかと思います。&lt;br /&gt;
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p&gt;
&lt;h4 id=&#34;webrtc-gatewayの取得と起動&#34;&gt;WebRTC Gatewayの取得と起動&lt;/h4&gt;
&lt;p&gt;Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br /&gt;
&lt;code&gt;$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;実行権限を付与してから、バックエンドで起動させます。&lt;br /&gt;
&lt;code&gt;$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;gatewayをpythonで扱えるようにするモジュールの取得&#34;&gt;GatewayをPythonで扱えるようにするモジュールの取得&lt;/h4&gt;
&lt;p&gt;今回、WebRTC Gatewayを扱うにあたり、簡単なモジュールを作成しました。&lt;br /&gt;
Gitリポジトリをローカルにクローンします。&lt;br /&gt;
&lt;code&gt;$ git clone https://github.com/ukkz/skygate.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;未完成のモジュールですので、今回は開発者モードでインストールします。&lt;br /&gt;
&lt;code&gt;$ pip3 install -e skygate/&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ sudo python3 skygate/setup.py develop&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;skywayへの接続テスト&#34;&gt;SkyWayへの接続テスト&lt;/h4&gt;
&lt;p&gt;以下のコマンドでサンプルスクリプトを実行します。&lt;br /&gt;
&lt;code&gt;$ python3 skygate/sample.py bell-0000 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br /&gt;
今回は &amp;ldquo;bell-0000&amp;rdquo; という値を使いましょう。&lt;br /&gt;
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Peer created as bell-0000: pt-829aa04e-449d-44a1-94f8-03481741cc5c&lt;/code&gt;&lt;br /&gt;
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;br /&gt;
Ctrl+C でサンプルスクリプトを終了させましょう。&lt;/p&gt;
&lt;h3 id=&#34;skyway接続とgroveを組み合わせる&#34;&gt;SkyWay接続とGroveを組み合わせる&lt;/h3&gt;
&lt;p&gt;以下のソースコードをコピー&amp;amp;ペーストし &amp;ldquo;pocketbell.py&amp;rdquo; という名前のファイルに保存してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ファイル:pocketbell.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import time, sys, skygate, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
if len(sys.argv) &amp;gt;= 3:
peer_id = str(sys.argv[1])
api_key = str(sys.argv[2])
try:
peer = skygate.Peer(peer_id, api_key)
except Exception as e:
print(e)
setRGB(100, 0, 0)
quit()
else:
print(&#39;Peer created as &#39;+peer.id+&#39;: &#39;+peer.token)
setRGB(0, 100, 0)
try:
while True:
for data in peer.getDataConnections():
if not data.getQueue().empty():
mes = data.getQueue().get().decode()
setText(mes)
setRGB(200, 200, 200)
print(mes)
grovepi.digitalWrite(buzzer, 1)
time.sleep(.1)
grovepi.digitalWrite(buzzer, 0)
time.sleep(2)
setRGB(0, 100, 0)
except KeyboardInterrupt:
try:
peer.close()
except Exception as e:
print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続テストのときと同様、ピアIDとAPIキーを指定して実行します。&lt;br /&gt;
ただし、ここではピアIDは &amp;ldquo;bell-0001&amp;rdquo; にしましょう。&lt;br /&gt;
&lt;code&gt;$ python3 pocketbell.py bell-0001 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;さて、ここまででポケベルは完成で、上記のプログラムを実行することで待ち受け状態となります。&lt;br /&gt;
ではさっそく、公衆電話からデータを送ってみましょう！&lt;/p&gt;
&lt;h2 id=&#34;web上の公衆電話から数字を送信しよう&#34;&gt;Web上の公衆電話から数字を送信しよう&lt;/h2&gt;
&lt;p&gt;前回の記事で紹介した、Webから使えて自作ポケベルと通信ができる公衆電話を使います。&lt;br /&gt;
&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この公衆電話のURLは以下のようになっています。&lt;br /&gt;
&lt;code&gt;https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;このうち、&lt;code&gt;apikey=&lt;/code&gt;より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;コインの投入口付近をクリックして、画面上の電話機のディスプレイが &amp;ldquo;CALL&amp;rdquo; になれば問題なくSkyWayに接続されています。&lt;br /&gt;
これが確認できたら、以下の順番で操作を進めてみてください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;ldquo;0001&amp;rdquo;（ポケベルのピアIDであるbell-xxxxのxxxxに相当する4桁の数字）&lt;/li&gt;
&lt;li&gt;電話機ディスプレイが &amp;ldquo;0001&amp;rdquo; 表示に変化&lt;/li&gt;
&lt;li&gt;好きな数字を2〜3文字ほど打ち込んでみる&lt;/li&gt;
&lt;li&gt;受話器を置く部分をクリックして終話する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/14.gif&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ポケベルを確認してみましょう。&lt;br /&gt;
ビープ音とともに、自分で打ち込んだ数字がGrove LCDの画面上に表示されましたでしょうか？&lt;br /&gt;
今回は簡略版ですので、2タッチ入力で送ったカタカナ文字は表示できないという点がありますが、通信の難しさを意識することなくP2Pでのデータ送受信を体験いただけたかと思います。&lt;/p&gt;
&lt;p&gt;ちなみに、前半の紹介記事で作っていたポケベルの動作のようすは以下のようになります。&lt;/p&gt;
&lt;div style=&#34;margin:auto&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;着信音作っただけでまだ通信してなかった &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%9D%E3%82%B1%E3%83%99%E3%83%AB?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ポケベル&lt;/a&gt; ちゃんとメッセージ受信できるようにしました📟送信側の公衆電話はWebで動きます☎️ 2タッチ入力対応・WebAudioでDTMF発音・WebRTCでデータ送信してますよん &lt;a href=&#34;https://t.co/NKauF6wd6E&#34;&gt;https://t.co/NKauF6wd6E&lt;/a&gt; &lt;a href=&#34;https://t.co/e4eOLBYbU1&#34;&gt;pic.twitter.com/e4eOLBYbU1&lt;/a&gt;&lt;/p&gt; うこ (@harmoniko) &lt;a href=&#34;https://twitter.com/harmoniko/status/1100371782152773633?ref_src=twsrc%5Etfw&#34;&gt;2019年2月26日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;WebRTCはWebブラウザ間でリアルタイムなデータの送受信を扱える最新の規格として普及していますが、ブラウザ以外のIoTデバイスでもこんなに簡単に扱えてしまう技術が登場しています。&lt;br /&gt;
今回利用したSkyWayというサービスはJavaScriptのSDKが無償配布されていて、Webブラウザ上で動作するWebRTCアプリケーションを誰でも気軽に作成することができます。また、Raspberry Piから利用したGatewayも、WindowsやLinux上からブラウザを介さずに利用できるようになっています。&lt;br /&gt;
あまり複雑なコードを書かなくてもこのようなP2P送受信ができますので、この機会にWebRTCを活用したものづくりにぜひともチャレンジしてみてくださいね！&lt;/p&gt;</description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【体験編】</title><link>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。&lt;br/&gt;
ここ最近は次の元号が気になって、改元まで眠れません！&lt;/p&gt;
&lt;p&gt;そんな平成の終了を追うように、平成初期に一世を風靡した「ポケベル」が、今年9月末で終了してしまうようですね。&lt;br/&gt;
&lt;a href=&#34;http://www.teleme.co.jp/service/magicmail/index.html&#34;&gt;東京テレメッセージ株式会社｜ページャー（マジックメール）サービス終了のお知らせ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;平成生まれの僕としては、聞いたことはあるけれど、使ったことはないポケベル。&lt;br/&gt;
これは無くなってしまう前に体験しなくては！&lt;br/&gt;
でも、もうポケベル本体は生産されておらず、新規契約もできません。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;ならば…… 作ってしまいましょう！&lt;/b&gt;&lt;/p&gt;
&lt;h2 id=&#34;ポケベルのしくみ&#34;&gt;ポケベルのしくみ&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ガラケー世代、スマホ世代からすれば衝撃なのですが、 &lt;strong&gt;ポケベルは受信専用&lt;/strong&gt;です。&lt;br/&gt;
基本は「無線呼び出し」という、小型の受信機に対し遠隔から合図を送る汎用的な仕組みであったものが発達し、報知局から受信専用の携帯機器のベルを鳴らすことができるようになりました。これがいわゆる「ポケベル」のはじまりです。その後、公衆電話から数字を送ったり、2つの数字の組み合わせで文字を表現する「2タッチ入力」で文字列を送ることができるようになったりして、今の30代〜40代が記憶に残すところのポケベルとなりました。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://ja.wikipedia.org/wiki/無線呼び出し&#34;&gt;無線呼び出し - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;さて、仕組みはわかったものの、現代で手軽に扱える技術で、ハードウェア・ソフトウェア・通信方法をどのようにしたらうまく作れるでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;作ってみた&#34;&gt;作ってみた&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;説明が複雑になりそうなので先に作りました（結論）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;送信側である公衆電話も作りました。こちらはWeb上で動作します。&lt;/p&gt;
&lt;h3 id=&#34;ポケベル側&#34;&gt;ポケベル側&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ポケベル側は、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;レトロ感のあるディスプレイ&lt;/li&gt;
&lt;li&gt;安っぽい音のするブザー&lt;/li&gt;
&lt;li&gt;速いけど確実に届くかは無保証な通信プロトコル&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の3点が課題でした。&lt;/p&gt;
&lt;p&gt;まず最初に、ハードウェア上でLinuxが動作するなら開発も比較的やりやすいので、Raspberry Pi 3 B+ を製作のベースに選択しました。&lt;br/&gt;
次に、1.については、秋葉原でよく売られているのを見かける「16文字×2行」のディスプレイ（1580円）を使いました。しかしながら時代に即して、液晶ではなく有機ELであるところがちょっとナウいですね（死語）。&lt;br/&gt;
2.も、秋葉原でよく見る圧電ブザー（50円）を採用して音のチープ感を重視しました。&lt;br/&gt;
3.は、P2PでUDP伝送を行えばそれっぽくなりそうですが、そのままだと難しいので、NTTコミュニケーションズの提供する&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;を利用したWebRTC通信を採用することにしました。これについては後述します。&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&#34;公衆電話側&#34;&gt;公衆電話側&lt;/h3&gt;
&lt;p&gt;公衆電話は、実機を使おうとすると設置場所を探さなければいけないのと、ハードウェアを作るのが大変そうだったので、Webで実装しました。&lt;br/&gt;
以下より誰でも利用することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;往年のプッシュホンのDTMF音も再現しています。&lt;br/&gt;
これ単体でも2タッチ入力（ポケベル打ち）が体験できますので、ぜひ触ってみてください。&lt;/p&gt;
&lt;h2 id=&#34;ポケベルがさわれそうな世代を探そう&#34;&gt;ポケベルがさわれそうな世代を探そう&lt;/h2&gt;
&lt;p&gt;ネットから情報をできるだけ収集してとりあえず作ってみたものの、同じように作っている事例がまず存在せず、かつてのポケベルをどれだけ再現できているのかまったく自信がありません。&lt;br/&gt;
そこで、実際にポケベルを所持していた世代の方に見ていただくべく、&lt;a href=&#34;https://iotlt.connpass.com/event/118404/&#34;&gt;IoTLT大阪(Vol.10)&lt;/a&gt;でこのポケベルについて発表しました。&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5c62585978ca428f83d0581efb6ae50a&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;当日の参加者は50人前後。&lt;br/&gt;
ここで「実際にポケベルを使っていた方はどれぐらいいらっしゃいますか？」と聞いてみたところ……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;写真幅に収まりきらなかったのですが、およそ5人〜10人の方に挙手いただきました！&lt;br/&gt;
IoTLTは勉強会としては年齢層が若めの部類ではないかと考えているのですが、1割ほどの方が実際にご使用されていたとのこと。今回はポケベル初出のため、できれば今後の勉強会でも調査していきたいと思っております！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;発表の最後に、「実際に利用されていた方、触ってみたい方は懇親会で僕のところにお越しください」と申し上げたところ、多くの人が見に来てくださいました。 &lt;del&gt;おっさんホイホイとはこのことか&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「公衆電話のデザインが地味にリアル！」&lt;/strong&gt;　と、ツボにはまっている方が多かったです。&lt;/p&gt;
&lt;p&gt;「これ（公衆電話）触ってもいいんですか？」「どうぞどうぞ」と、実際に触っていただいたところ、「もう忘れたよ〜〜」と言いつつも「2タッチ入力」を軽々こなせた方が3名ほどいらっしゃいました。&lt;br/&gt;
いまだにブラインドでポケベル打てる（人生の）先輩方、おそるべしです……。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;メッセージ、ちゃんと当時と同じように打てますね！！　と絶賛いただけたので見てみると……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これはリア充しとったやつやな……&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;「アイシテル」は、2タッチ入力では「1112324493」と打ちますが、当時はド定番のメッセージだったそうです。文字が送れるようになる前の数字送信だけだったときには、語呂合わせで「114106」などとも送っていたんだとか。&lt;br/&gt;
その他、お話を伺ったところによると&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公衆電話は時間課金なので、10円でメッセージを送るには、時間内に早打ちをする必要があった。&lt;/li&gt;
&lt;li&gt;いつも20円使ってたけど、10円で打てる人がいて、神のように崇められていた。&lt;/li&gt;
&lt;li&gt;「88」と打てばハートの絵文字が出るのは当たり前（ドコモのポケベルがそうなっていたらしいです）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの思い出があったそうです。&lt;/p&gt;
&lt;p&gt;今も「LINEの既読無視」のように、通信手段の特性に基づいた独特の「あるある」が存在しますが、それは四半世紀前でも変わらなかったんですねえ……。&lt;/p&gt;
&lt;h2 id=&#34;みなさんもポケベル体験してみよう&#34;&gt;みなさんもポケベル体験してみよう！&lt;/h2&gt;
&lt;p&gt;さてそんな手作りのポケベルですが、送信側の公衆電話はWebで実装されているため、 &lt;strong&gt;ブラウザで実際にポケベル打ちを試していただくことが可能&lt;/strong&gt;です！&lt;br/&gt;
先ほど紹介させていただいたページにぜひアクセスしてみてください。&lt;br/&gt;
Google Chromeでの動作のみ確認しています。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;まずコイン投入口をクリックすると、液晶部分に「TEST」という表示が出ることを確認してください。これで、実際の受信端末がなくても、打ったメッセージをブラウザで確認することができるようになります。&lt;br/&gt;
次に、数字ボタンで「*2*2」と打ち込みます。これはフリーメッセージの入力を開始するコマンドのようなものです。これが打てたら、以下のページで紹介されているフリーワードの表を見ながら、数字2つずつ打ち込んでゆきます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.kerokero.net/makosuke/pbcode/docomo.htm&#34;&gt;Tele-Call page / DoCoMo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表の縦列数字が1つめ、横列数字が2つめです。例えば「うに」と入力するときは、まず「13」次に「52」のように2つずつ打ちます。&lt;br/&gt;
定番メッセージ「アイシテル」は「1112324493」と打つと表現することができます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;メッセージが打ち込めたら、最後に「##」と入力し、受話器置きの部分をクリックして「終話」すると、ポップアップでメッセージが表示されます。
うまく入力できたでしょうか？&lt;/p&gt;
&lt;h3 id=&#34;公衆電話の通信について&#34;&gt;公衆電話の通信について&lt;/h3&gt;
&lt;p&gt;このWeb公衆電話は、このままだと通信をしない「テストモード」で動作しますが、実際には&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;を利用したWebRTC通信に対応しています。執筆時点で、WebとRaspberry Piのような組み込み機器をP2Pでリアルタイムに、かつ簡単に繋ぐことのできるサービスはこれがほぼ唯一です。しかもSkyWayのコミュニティ版は完全無料で使うことができます。&lt;br/&gt;
Webと組み込み機器を繋ぐのなら、以前まではWebSocketやMQTTを使うのが主でしたが、こちらは2者とも「サーバー対クライアント」の通信であり、バックエンドを準備するのが大変でした。&lt;br/&gt;
このSkyWayが組み込みに対応したWebRTCエンジン「&lt;a href=&#34;https://support.skyway.io/hc/ja/articles/360008586334--SkyWay-WebRTC-Gateway-試験提供開始&#34;&gt;WebRTC Gateway&lt;/a&gt;」を提供開始したことで、本来はWeb環境同士でしか成立しなかったWebRTC通信を、Raspberry Piのような低レベルのデバイスから直接的に接続させることが可能になりました。&lt;br/&gt;
この記事で作ったポケベルは、実際にこれで文字列をWeb公衆電話からRaspberry Pi製のポケベルへと送信しています。&lt;/p&gt;
&lt;h2 id=&#34;ポケベル本体も-はんだづけなしで作れます&#34;&gt;ポケベル本体も、はんだづけなしで作れます&lt;/h2&gt;
&lt;p&gt;さて、ここまでモノが揃っているのなら、実際のハードウェアに文字列を送信してみたいな、と思われたことではないでしょうか。そこで、今回のポケベルは全てはんだづけを行っていますが、「Grove」と呼ばれる規格に対応したディスプレイやブザーを使うことで、一切はんだづけをせずに同じポケベルを作っていただける方法を準備しました！&lt;br/&gt;
その詳細は次回の記事に書かせていただきますので、ご興味を持たれたかたはぜひ当ブログをチェックしておいてくださいね！&lt;/p&gt;</description></item><item><title>MPU9250で回転角度を検知する</title><link>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</guid><description>
&lt;p&gt;はじめまして。ライターとして起用していただきました、ありか(&lt;a href=&#34;https://twitter.com/hakase0617&#34;&gt;@hakase0617&lt;/a&gt;)です。&lt;/p&gt;
&lt;p&gt;秋田高専で高専ロボコンを5年間やっていました。
ロボコン界隈には卒業後も関わり続けているため、そういった若きエンジニアの手助けができたらと思っています！&lt;/p&gt;
&lt;p&gt;マネジメントや教育に興味があり、その一環でIoT、AIの勉強をしています。
将来的にはエンジニアを育成したり、一緒にお仕事ができたりしたら楽しそうだなって思います。&lt;/p&gt;
&lt;h2 id=&#34;9軸センサとは&#34;&gt;9軸センサとは&lt;/h2&gt;
&lt;p&gt;早速ですが、今日はMPU9250というセンサを紹介します。
これは「9軸センサ」と呼ばれるものです。&lt;/p&gt;
&lt;p&gt;え、9軸ってx,y,zとあとは何！？&lt;/p&gt;
&lt;p&gt;これは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加速度センサ　x,y,z&lt;/li&gt;
&lt;li&gt;角速度センサ　x,y,z&lt;/li&gt;
&lt;li&gt;地磁気センサ　x,y,z&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の3軸ずつ、合わせて9軸というものです。
まずは各センサの紹介からいきます。&lt;/p&gt;
&lt;h2 id=&#34;加速度センサとは&#34;&gt;加速度センサとは&lt;/h2&gt;
&lt;p&gt;加速度とは、&lt;u&gt;「どのくらいの速度が変化しているか」という指標です。&lt;/u&gt;
車を運転しているイメージをしてください。
アクセルを思いっきり踏んで、時速20km/hで走っていた車を時速60km/hまで加速させたとします。
この時、体は後ろに引っ張られる感じがします。
あの感じが加速度です。&lt;/p&gt;
&lt;p&gt;加速度センサでは、物が動いているかどうかということも検出できます。
加速度センサの応用例としてはカメラの手ぶれ補正やスマホの画面回転、ハードディスクの揺れ検知などが該当します。
ロボットの姿勢制御には欠かせない技術でもあります。&lt;/p&gt;
&lt;h2 id=&#34;角速度センサとは&#34;&gt;角速度センサとは&lt;/h2&gt;
&lt;p&gt;角速度とは読んで字のごとく、回転角の速度です。
ものが回っている時の速さの単位に「回転数」（rpmなど）や周波数（Hzなど）がありますが、これらは「何回回ったか」を示す指標です。
&lt;u&gt;回っているものの「角度」に注目して速さを表す指標が角速度です。&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;地磁気センサとは&#34;&gt;地磁気センサとは&lt;/h2&gt;
&lt;p&gt;地磁気センサでは、磁力の強さを検知出来ます。
地球は大きな磁石ですが丸いので、地球上のどの位置にいるかで地磁気の強さは異なります。
そのため、&lt;u&gt;地磁気の強さやら向きやらを測定すると自分がいる位置が分かり、自分が向いている方角も分かるというものです。&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;9軸センサで何が出来るか&#34;&gt;9軸センサで何が出来るか&lt;/h2&gt;
&lt;p&gt;さて、これら3つのセンサが合体した9軸センサで、何ができるのでしょうか？&lt;/p&gt;
&lt;p&gt;&lt;u&gt;角速度センサで「自分がどれだけ回ったのか」が分かります。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;しかし弱点があります。
角速度センサだけでは、今「動いている」のか「止まっている」のかは分かりません。
そこで加速度センサの出番です。加速度センサは上記状態を把握できます。
これらを合わせて「6軸センサ」と呼ぶのですが、&lt;u&gt;この6軸センサを使うと「回転角度」が分かります。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;じゃあ6軸でいいじゃん、と思ってしまいますが、6軸センサには弱点があります。
ずばり、「ドリフト」です。&lt;/p&gt;
&lt;p&gt;角速度センサは「積分方式」で回転角度を検出します。
どういうことかというと、「15度動いた」「20度動いた」「10度動いた」を合わせて「45度動いた」といった風に、足し算で算出します。
しかし、みんなの敵である「誤差」という概念がここで登場します。&lt;/p&gt;
&lt;p&gt;さっきの例で、毎回+1度の誤差が生じてしまうとします。
すると　16度+21度+11度＝48度　となり、誤差がどんどん大きくなっていきます。
つまり、試行回数（時間経過）とともに誤差が大きくなっていくではありませんか。&lt;/p&gt;
&lt;p&gt;これを解決するためには、別の方法で校正を行う必要があります。
そこで「地磁気センサ」を使います。&lt;/p&gt;
&lt;p&gt;地磁気センサは、簡単に言うと「方位磁針」です。そのため、北を向いたまま10分経とうが1時間経とうが、&lt;u&gt;地磁気センサは「北を向いている」という状態を教えてくれます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;まとめると、
　角速度センサ→何度回ったかが分かる
　加速度センサ→回ったかが分かる
　地磁気センサ→ドリフトを打ち消す
といった役割を持ち、回転を検知するセンサとなります。&lt;/p&gt;
&lt;h2 id=&#34;実際に使ってみよう&#34;&gt;実際に使ってみよう&lt;/h2&gt;
&lt;p&gt;MPU9250を使って、実際に回転角度を測定してみましょう。
今回は開発環境にArduinoを選定しました。
ライブラリが公開されており、初心者である僕でもサクッと動作確認が可能な点に魅力を感じました。&lt;/p&gt;
&lt;p&gt;今回は入門として、角速度センサのみで回転角度を検出してみます。&lt;/p&gt;
&lt;h2 id=&#34;開発環境&#34;&gt;開発環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS:Windows10&lt;/li&gt;
&lt;li&gt;ArduinoIDE&lt;/li&gt;
&lt;li&gt;Arduino UNO&lt;/li&gt;
&lt;li&gt;MPU9250&lt;/li&gt;
&lt;li&gt;ジャンパワイヤ5本&lt;/li&gt;
&lt;li&gt;ブレッドボード&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;スケッチ&#34;&gt;スケッチ&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-C:Gyro&#34;&gt;#include &amp;lt;Wire.h&amp;gt;
#define FIL 0.9 //フィルタ
#define AVE 100 //測定回数
#define GYRO 30 //ドリフト許容値
int emp[6] = {};
int data = 0; //生データ格納 1から順に加速度xyz角速度xyz
long datasum = 0; //合計データ格納　平均算出用
int th = 0; //閾値
long integral = 0; //積分値
int degree; //回転角度
int rock; //ロック機構により導かれた初期値
char input;
void setup() {
Wire.begin(); Serial.begin(115200); Wire.begin(0x68);
Wire.beginTransmission(0x68); Wire.write(0x6B); Wire.write(0x00); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1C); Wire.write(0x10); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1B); Wire.write(0x08); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1A); Wire.write(0x05); Wire.endTransmission();
Serial.print(&amp;quot;*****************\nCalibrating now\nplease turn once and press &#39;f&#39;\n&amp;quot;);
while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == &#39;f&#39;) {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
}
void loop() {
reading();
degree = abs(integral / rock);
Serial.println(degree);
datasum = 0;
}
void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;arduinoとの接続&#34;&gt;Arduinoとの接続&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Arduino&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MPU9250&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5V&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;VCC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;GND&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;A2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;INT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;A4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;SDA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;A5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;SCL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;実物&#34;&gt;実物&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/245/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;スケッチ簡易解説&#34;&gt;スケッチ簡易解説&lt;/h2&gt;
&lt;p&gt;今回は角速度センサのｚ軸のみを使用します。
ｚ軸、つまり地面と鉛直な方向の回転が分かる、早い話が自分がどれだけ回ったかが分かります。&lt;/p&gt;
&lt;p&gt;まず、角速度センサを使うにあたって、センサから返ってくる値を調べる必要があります。
センサは「何度回ったよ」とは教えてくれません。
「4253」「71469」みたいな無機質な値を教えてくれます。
そのため、その値がいくつで360度に相当するのかを確認する必要があります。&lt;/p&gt;
&lt;p&gt;どうすればいいのか、答えは「360度回せばいい」のです。そのままです。&lt;/p&gt;
&lt;p&gt;今回はArduinoを起動した際に、まず1回転して値を取得して、それから角度検出をする、というスケッチを作りました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C:while&#34;&gt; while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == &#39;f&#39;) {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reading()関数の中で実際に値を取得するのですが、1回転した合図として「Arduinoのシリアル通信で&amp;rsquo;f&amp;rsquo;を送ってあげた時にwhile()から抜けて角度検出モードに移行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C:reading&#34;&gt;void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのreading()の中では、平均を取るためにAVEで指定された回数値を格納し続けています。
emp[]で色々格納していますが、上から
加速度ｘ軸、ｙ軸、ｚ軸
温度
角速度ｘ軸、ｙ軸、ｚ軸
という風に格納されていきます。そのため今回は角速度ｚ軸のみを取り出すためこういった書き方です。&lt;/p&gt;
&lt;h2 id=&#34;動かしてみよう&#34;&gt;動かしてみよう&lt;/h2&gt;
&lt;p&gt;リード線を数本接続しただけで動作確認が出来るなんて、とっても楽ですね！
早速動かしてみます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/245/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;できました！
角度が表示されています。&lt;/p&gt;
&lt;h2 id=&#34;何に使えるの&#34;&gt;何に使えるの？&lt;/h2&gt;
&lt;p&gt;今回注目したのは、自律移動ロボットの位置制御です。
ロボットコンテストなどでは、コントローラなどを用いず自動でロボットが移動することを求められるケースが多々あります。
その自動ロボットの位置制御には、どのような方法が用いられているのでしょうか。&lt;/p&gt;
&lt;p&gt;おそらく一般的なものは、モータにロータリエンコーダなどを取り付けて
「モータがどのくらい回ったか」
を検出し、位置を割り出す方法だと思います。&lt;/p&gt;
&lt;p&gt;ですが、この方法には弱点があります。
例えば、移動するフィールドが平らではなかったり、滑りやすい障害物（落ち葉など）があったり、タイヤが走行中に滑ったりといった「タイヤとフィールドの関係」で誤差が生じてしまいます。&lt;/p&gt;
&lt;p&gt;この誤差をなんとかしたい！
そんな時に便利なのがこの9軸センサです。&lt;/p&gt;
&lt;p&gt;自身がどれくらい動いたか、どれくらい回ったかが分かるこのセンサがあれば、たとえタイヤが空回りしてしまっても、「今いる位置」を知ることが可能なのです！&lt;/p&gt;
&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;
&lt;p&gt;今回は9軸センサのうちたった1軸しか使っていませんが、回転を検出することができました。
より高度なスケッチを作ることでより高度な測定が可能になるため、これからも勉強を続けていきたいです。&lt;/p&gt;
&lt;style&gt;
.dialogue {
padding: 10px;
display: table;
}
.image_n, .image_s {
width: 75px;
height: 75px;
margin-right: 10px;
display: table-cell;
vertical-align: middle;
}
.image_n img {
border-radius: 50%;
border: 2px solid blue;
}
.image_s img {
border-radius: 50%;
border: 2px solid green;
}
.name {
font-weight: bold;
text-align: center;
}
.text {
display: table-cell;
padding: 0;
vertical-align: middle;
padding-left: 20px;
}
&lt;/style&gt;</description></item><item><title>初めてのArduino〜トレーニングマシンを作る編〜</title><link>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</link><pubDate>Mon, 11 Mar 2019 23:00:00 +0900</pubDate><guid>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</guid><description>
&lt;p&gt;初めまして、今月からdotstudioでお世話になる&lt;a href=&#34;https://dotstud.io/members/jikyuryoku&#34;&gt;自給力&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;プログラミングスクール卒業後でフラフラしてたところを、のびすけしゃちょーから「記事を書いてみない？」と誘っていただきました。これから、バシバシ記事を書いていきますのでよろしくお願いします。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コードの書き方や手順で変なところあるかもしれませんが、許してください……！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;僕はフィットネス業界での事業を考えています！せっかくなので、フィットネスに絡めて何か作って、記事にしていきたいと思います。プログラミングはかじってはいるのですが、IoTのコーディングや電子工作は初めてなので、&lt;u&gt;初心者さん向けに自分の失敗の工程も含めてお伝えできればと思ってます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;そして、まず作ろうと決意したモノは……&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;font size=&#34;3&#34;&gt;&lt;strong&gt;「自宅でのトレーニングで回数を数えてくれるサービス」&lt;/strong&gt;です！！パチパチ〜〜！！&lt;/font&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;意外とスクワットとかダンベルのトレーニングしている時って回数数えるの面倒なんですよね。&lt;/p&gt;
&lt;p&gt;そこで、勝手に回数数えてくれるサービスがあればテレビ見ながらでも回数に気を取られずにトレーニングができる！そんな思いから、サービス作ってみようと思ったわけです。&lt;/p&gt;
&lt;h2 id=&#34;のびすけしゃちょーに相談してみる&#34;&gt;のびすけしゃちょーに相談してみる&lt;/h2&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
というわけで、ダンベルを上げ下げしてる時に回数数える物作りたいっす！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
いいね。じゃあどうやって数えるか考えよう。カウントの仕方としては、&lt;u&gt;赤外線センサ使うとか、腕の動きで変わる気圧を計測する&lt;/u&gt;ってやりかたもあるよ、加速度センサでy軸方向に動いた回数を、、、（etc）&lt;/b&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（おお、なんか凄そうなのが作れそうだ）&lt;br&gt;
なるほど！！面白そうですね！！！！じゃあ加速度センサ使ってみたいです！！！&lt;br&gt;
（理由:かっこいいから）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ま、それは難しいから最初はスイッチだな（バッサリ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（え、なんで他の紹介したん……）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;そんなこんなで、iot初心者の僕は&lt;strong&gt;「磁気スイッチ」を使ったカウントマシン&lt;/strong&gt;を作ることに決まりました！！&lt;/p&gt;
&lt;h2 id=&#34;まずは準備&#34;&gt;まずは準備&lt;/h2&gt;
&lt;p&gt;今回使うのはArduino（写真左）と磁気スイッチ（写真真ん中と右）&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;まず、Arduinoにコードを書き込むためにArduino IDEをインストールしましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/?fbclid=IwAR3BB5HrFh-K6cMGcnGl4rjHIA4u2OJYDDlNjLmN5IrprOn8n3zY6g-Kp8s&#34;&gt;こちらのドキュメント&lt;/a&gt;の通りにやれば簡単にインストールできます。&lt;/p&gt;
&lt;p&gt;そして、磁気スイッチの使い方は&lt;a href=&#34;http://wiki.seeedstudio.com/Grove-Magnetic_Switch/&#34;&gt;こちら&lt;/a&gt;を参考にしました！&lt;/p&gt;
&lt;p&gt;サイト内は英語で書かれていますが、ここでやることしては&lt;strong&gt;ArduinoのD２のピンに刺し、写真のように組み立てる&lt;/strong&gt;のだそうです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;さぁ-数を数えよう&#34;&gt;さぁ、数を数えよう&lt;/h2&gt;
&lt;p&gt;「数なんてすぐに数えられるわい」っと思ったのも束の間……。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「あれ？何を数えるんだ？？？」&lt;/strong&gt;と、なんとも初歩的な壁にぶつかりました。&lt;/p&gt;
&lt;p&gt;ダンベルを動かした回数を頭の中で数えるのは簡単ですが、機械に数えさせるのは訳が違う。まずは何を数えるか考えなければならないのです。&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
のびさん、オレは何を数えるんですか？（語彙力）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
まずは、センサが反応してる時にフラグを立ててみたら？&lt;br&gt;
フラグが立った状態からフラグが無くなったときにカウントできるようにしてみる方法があるよ。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
なるほど！それですね！（フラグって何……？）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;「フラグ」が何を指しているのかが分からなかったので、&lt;strong&gt;「Arduino フラグ」&lt;/strong&gt;でググってみました。どうやらセンサの状態を変数に入れて管理することだということが分かりました。&lt;/p&gt;
&lt;p&gt;（参考１）&lt;a href=&#34;http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html&#34;&gt;アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次に、「Arduino 数える」でググり、「変数でどう数えるのか」について、以下の記事を参考にしました。&lt;/p&gt;
&lt;p&gt;（参考２）&lt;a href=&#34;https://n.mtng.org/ele/arduino/samples/variable2.html&#34;&gt;変数で回数を数える&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;やることとしては、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;センサの状態をフラグ（変数）として認識させる&lt;/li&gt;
&lt;li&gt;フラグがついてる状態から、なくなった状態に「+１」していく&lt;/li&gt;
&lt;li&gt;1と2を繰り返す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;なるほどなるほど。だいたい道筋が見えてきたので、作っていきます！&lt;/p&gt;
&lt;h2 id=&#34;よし-作ろう&#34;&gt;よし、作ろう&lt;/h2&gt;
&lt;p&gt;（参考１）&lt;a href=&#34;http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html&#34;&gt;アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a&gt;からスイッチのon/offで数を数えるためコードがあり、アレンジをしてみました。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;必要なのは&lt;strong&gt;「グローバル変数の定義」「フラグの定義」「フラグからカウントする際のコード」の３つ&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;まずは&lt;strong&gt;「グローバル変数の定義」&lt;/strong&gt;です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int G_state = FLG_OFF;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;簡単ですね。&lt;/p&gt;
&lt;p&gt;次に&lt;strong&gt;「フラグの定義」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;フラグ立っている時は「1」、立っていない時は「0」と教えてあげます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const int FLG_ON = 1;
const int FLG_OFF = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;楽勝！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;それでは、最後に&lt;strong&gt;「フラグからカウントする際のコード」&lt;/strong&gt;を書いてみましょう。&lt;/p&gt;
&lt;p&gt;Void setup()の中に、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Serial.begin(115200);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を書き、
void loop()の中に、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; int val = digitalRead(MAGNECTIC_SWITCH);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を書きます。&lt;/p&gt;
&lt;p&gt;これはつまり、&lt;strong&gt;センサで取得した値を変数valに入れている&lt;/strong&gt;わけです。&lt;/p&gt;
&lt;p&gt;そして&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(G_state == FLG_OFF){
count += 1;
}
Serial.println(count);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と書き、コンパイルして、書き込みをしていきます。&lt;/p&gt;
&lt;p&gt;ちょっとここでケアレスミスがあり、書き込みの際にエラーが何回か出ましたが、難なく解消。&lt;/p&gt;
&lt;p&gt;よし！これで動く！&lt;/p&gt;
&lt;p&gt;ツールの中のシリアルモニタを見てみましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;な、なにーーー！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;なんか勝手に数が増えてる！！！！このままじゃ数字が止まらなくなる！！！（パニック状態）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
助けて！のびさんんんんんんんん！！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ん？？これ、&lt;u&gt;if( G_state == FLG_OFF )で+1&lt;/u&gt;で書かないと、めっちゃ数えるよ。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あ、そうか……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;つまり、コードを日本語訳にすると、&lt;strong&gt;「G_stateの中のフラグがないときは、足していく」&lt;/strong&gt;という意味。フラグが無い状態では+1され続けてしまうんです。そりゃうまくイカンわ！！！&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
&lt;u&gt;if(G_state == FLG_OFF)の一文を消して、elseの中でフラグの判定&lt;/u&gt;した方がいいよ。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;のびさんのご指摘の通り、&lt;strong&gt;elseの中にif文を書いてフラグがonだったら1カウントをするコード&lt;/strong&gt;に書き換えました。&lt;/p&gt;
&lt;p&gt;よし！これでどうだ！！！書き込み開始！！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あれ？？？なんで58から始まるんだ？わけわからん数字だ……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
&lt;u&gt;デフォルトの数字は、setupで数字初期化されるから、setupの定義内でcount=０&lt;/u&gt;にすればいいんじゃない？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ほうほう。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center&gt;
&lt;font size=&#34;3&#34;&gt;実際に書き換えてみると、見事解決！&lt;/font&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;ちゃんと数えてくれるか検証&#34;&gt;ちゃんと数えてくれるか検証&lt;/h2&gt;
&lt;p&gt;磁石をセンサに近づけて、、&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;離すと、、&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;そしてシリアルモニタを見ると&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;font size=&#34;3&#34;&gt;カウント「１」！！！！&lt;/font&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;見事成功です。&lt;/p&gt;
&lt;p&gt;いやぁ、一口に数を数えるとは言っても奥が深いですね！今日のところはこの辺で終わりたいと思います。&lt;/p&gt;
&lt;p&gt;続編をお楽しみに……！&lt;/p&gt;
&lt;style&gt;
.dialogue {
padding: 10px;
display: table;
}
.image_n, .image_s {
width: 75px;
height: 75px;
margin-right: 10px;
display: table-cell;
vertical-align: middle;
}
.image_n img {
border-radius: 50%;
border: 2px solid blue;
}
.image_s img {
border-radius: 50%;
border: 2px solid green;
}
.name {
font-weight: bold;
text-align: center;
}
.text {
display: table-cell;
padding: 0;
vertical-align: middle;
padding-left: 20px;
}
&lt;/style&gt;</description></item><item><title>【どんと来い、列車遅延】 勤怠メールをサクッと送れるオレオレツールを作ってみた</title><link>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</link><pubDate>Wed, 13 Feb 2019 12:50:00 +0900</pubDate><guid>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</guid><description>
&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/pokio&#34;&gt;ポキオ&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;急いでるときに限って、いつも使ってる通勤列車が遅延してたりして、あたふたすることってありますよね？&lt;/p&gt;
&lt;p&gt;そんなときに、勤務先などにサクッとメールを送れるオレオレツールを作ってみました。&lt;/p&gt;
&lt;h2 id=&#34;node-redで簡単に作ってみる&#34;&gt;Node-REDで簡単に作ってみる&lt;/h2&gt;
&lt;p&gt;「ツールを作る」と聞くと、なんだか難しそうな雰囲気がしますよね？&lt;/p&gt;
&lt;p&gt;でも、&lt;strong&gt;Node-RED&lt;/strong&gt;を使うとちょっとのコーディングで簡単にツールが作れてしまいます！&lt;a href=&#34;https://dotstud.io/blog/nefry-servo-handson-takudooon/#node-red-mqtt%E3%81%A7%E3%82%B5%E3%83%BC%E3%83%9C%E3%83%A2%E3%83%BC%E3%82%BF%E3%82%92%E9%81%A0%E9%9A%94%E5%88%B6%E5%BE%A1&#34;&gt;たくろーどんさんの記事&lt;/a&gt;でもNode-REDが使われていましたが、&lt;strong&gt;実行したい処理をフローチャートのように、ノードとノードをつなぐことによって設計できるツール&lt;/strong&gt;になっています。&lt;/p&gt;
&lt;p&gt;Node-REDはその名の通り、&lt;strong&gt;Node.js&lt;/strong&gt;上で動作するツールです。普段使っているPCなどNode.jsが動作している環境であればNode−REDを動かすことができますが、今回は外出先からでもアクセスできるツールを簡単に作成したかったので、&lt;u&gt;Node-REDをサービスとして提供している&lt;strong&gt;enebular&lt;/strong&gt;&lt;/u&gt;を使ってみようと思います。&lt;/p&gt;
&lt;h2 id=&#34;node-redでツールを作ってみる&#34;&gt;Node-REDでツールを作ってみる&lt;/h2&gt;
&lt;p&gt;はじめに、今回作ったツールがこちら。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;このツールの機能は、以下の3つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外出先からでもアクセスできるWebページを作る（念の為、BASIC認証を設けておく）&lt;/li&gt;
&lt;li&gt;そのページ上で勤怠メールの文言をプリセットから選べるようにして、特定の宛先にメール送信できるようにする&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「本当に電車遅延が原因で遅刻するの？」&lt;/strong&gt;と言われないように、京急の遅延証明書ページで発行されている遅延証明書を表示して、メールに遅延証明書へのリンクを貼れるようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遅延状況は例によって&lt;strong&gt;京浜急行&lt;/strong&gt;のWebページ上の情報を取得しています。また、不特定多数の人が勝手にこのツールを使ってしまわないように、BASIC認証を設けてアクセスを制限しています。&lt;/p&gt;
&lt;h2 id=&#34;node-redでwebページを作る&#34;&gt;Node-REDでWebページを作る&lt;/h2&gt;
&lt;p&gt;Node-REDで用意されているノードのなかに、HTTPリクエストを受ける&lt;strong&gt;&lt;code&gt;HTTP In&lt;/code&gt;&lt;/strong&gt;ノードと、それに対するレスポンスを返す&lt;strong&gt;&lt;code&gt;HTTP Response&lt;/code&gt;&lt;/strong&gt;ノードがあります。&lt;/p&gt;
&lt;p&gt;この&lt;code&gt;HTTP In&lt;/code&gt;ノードを作るとHTTPのエンドポイントができます。このノードと&lt;code&gt;HTTP Response&lt;/code&gt;ノードを下の絵のようにつなぎ、レスポンスとなるソースを返すようにすれば、Webページができます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;上の例では、静的な&lt;code&gt;Hello, world!&lt;/code&gt;という文字列を返すだけですが、&lt;strong&gt;&lt;code&gt;HTTP Response&lt;/code&gt;&lt;/strong&gt;ノードで返す情報を動的に変化させたり、Webページ上で動作させるスクリプトを記述してレスポンスとして返せば、よりリッチなWebページをNode-REDで作成することができます。
&lt;/p&gt;
&lt;p&gt;次にBASIC認証ですが、Node-REDに対して追加でモジュールをインストールすることで、簡単に機能を追加することができます。&lt;/p&gt;
&lt;p&gt;Node-REDの設定メニューから、[Settings] &amp;gt; [Palette] &amp;gt; [Install]と進み、&lt;strong&gt;&lt;code&gt;node-red-contrib-httpauth&lt;/code&gt;&lt;/strong&gt;を探します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;これをインストールすることで、BASIC認証が行えるノードを追加できます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;使い方は至ってシンプルで、先程の&lt;code&gt;HTTP In&lt;/code&gt;ノードの後ろにBASIC認証のノードをつけて、BASIC認証で使うユーザー名とパスワードをノードの設定で指定するだけです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;実際に、この状態でエンドポイントにアクセスすると、確かにBASIC認証がワークしています。&lt;/p&gt;
&lt;h2 id=&#34;勤怠メールを送れるようにする&#34;&gt;勤怠メールを送れるようにする&lt;/h2&gt;
&lt;p&gt;ここまでで、&lt;code&gt;Hello, world!&lt;/code&gt;が表示できるWebページができました。ここからは&lt;u&gt;&lt;code&gt;HTTP Response&lt;/code&gt;ノードで返すHTMLをよしなに編集して、勤怠メールを作成できるようにします。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;具体的には、次のような機能をHTMLやJavaScriptで記述して、それをレスポンスで返すようにしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プルダウンメニューで遅刻する理由を選択できるようにする&lt;/li&gt;
&lt;li&gt;選択した理由に応じて、メールの本文を変更する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mailtoスキーム&lt;/strong&gt;を使って、メーラーを起動してメールを送れるようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遅刻の理由も、必ずしも電車遅延だけではないので、体調不良や保育園関係の理由も選択できるようにしました。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;遅刻の理由を選択すると、メール本文が変わるようになっています。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;勤怠メールを送る&lt;/code&gt;&lt;/strong&gt;を押すとメーラーが起動し、ツールで指定した文言をそのままメールとして送ることができます。&lt;/p&gt;
&lt;h2 id=&#34;遅延証明書情報を取得する&#34;&gt;遅延証明書情報を取得する&lt;/h2&gt;
&lt;p&gt;ツール上で表示する京浜急行の運行情報は、&lt;a href=&#34;https://delay.keikyu.co.jp/delay/&#34;&gt;京急線遅延証明書の発行&lt;/a&gt;のページから取得します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;その日に発行されている遅延証明書のリスト化し、その遅延証明書ページへのリンクをメール本文に貼り付けるか選択できるようになっています。&lt;/p&gt;
&lt;p&gt;ただし、下記のような問題があるため、泥臭いワークアラウンドを入れています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遅延証明書ページへのリンクのアドレスに、mailtoスキームでは扱えない文字が含まれているため、&lt;a href=&#34;https://is.gd/&#34;&gt;外部のURL短縮サービス「is.gd」&lt;/a&gt;を使ってアドレスを短く変換している&lt;/li&gt;
&lt;li&gt;URL短縮のWebAPIを叩こうとするとCORSポリシーに引っかかったため、URL短縮のために同じドメインでエンドポイントを作成し、それ経由でアドレスの変換を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;実際のフローはこちら&#34;&gt;実際のフローはこちら&lt;/h2&gt;
&lt;p&gt;Node-REDで作成したフローを、エクスポートしたものはこちらです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;[{&amp;quot;id&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;tab&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Flow 1&amp;quot;,&amp;quot;disabled&amp;quot;:false,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;a45bf2b.b54621&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http request&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;遅延証明書ページ取得&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;GET&amp;quot;,&amp;quot;ret&amp;quot;:&amp;quot;txt&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://delay.keikyu.co.jp/delay/&amp;quot;,&amp;quot;tls&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:360,&amp;quot;y&amp;quot;:180,&amp;quot;wires&amp;quot;:[[&amp;quot;89f0f7a0.a8bda8&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;3a7ae4dc.fc9f5c&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;debug&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;active&amp;quot;:true,&amp;quot;tosidebar&amp;quot;:true,&amp;quot;console&amp;quot;:false,&amp;quot;tostatus&amp;quot;:false,&amp;quot;complete&amp;quot;:&amp;quot;delayData&amp;quot;,&amp;quot;x&amp;quot;:600,&amp;quot;y&amp;quot;:220,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;89f0f7a0.a8bda8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;情報をパース&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let table = msg.payload.split(&#39;&amp;lt;tbody&amp;gt;&#39;)[1];\ntable = table.split(&#39;&amp;lt;/tbody&amp;gt;&#39;)[0];\n\nlet rows = table.split(&#39;\\n&#39;).join(&#39;&#39;);\nrows = rows.split(&#39;&amp;lt;tr&amp;gt;&#39;).join(&#39;&#39;).split(&#39;&amp;lt;/tr&amp;gt;&#39;);\n\nlet data = {};\nlet dateOffset = 0;\ndata.date = rows[0 + 3 * dateOffset].split(&#39;&amp;lt;/td&amp;gt;&#39;)[0].replace(&#39;&amp;lt;tr style=\&amp;quot;background-color:#ADD8E6;\&amp;quot;&amp;gt;&#39;,&#39;&#39;).replace(&#39;&amp;lt;td rowspan=3&amp;gt;&#39;,&#39;&#39;).replace(&#39;&amp;lt;br/&amp;gt;&#39;,&#39;&#39;);\n\nlet morningData = rows[0 + 3 * dateOffset].split(&#39;&amp;lt;/td&amp;gt;&#39;).join(&#39;&#39;).split(&#39;&amp;lt;td&amp;gt;&#39;).slice(1);\nlet dayData = rows[1 + 3 * dateOffset].split(&#39;&amp;lt;/td&amp;gt;&#39;).join(&#39;&#39;).split(&#39;&amp;lt;td&amp;gt;&#39;).slice(1);\nlet nightData = rows[2 + 3 * dateOffset].split(&#39;&amp;lt;/td&amp;gt;&#39;).join(&#39;&#39;).split(&#39;&amp;lt;td&amp;gt;&#39;).slice(1);\nlet dataTitles = [&#39;品川～横浜：上り&#39;,&#39;品川～横浜：下り&#39;,&#39;横浜以南：上り&#39;,&#39;横浜以南：下り&#39;,&#39;空港線内：上り&#39;,&#39;空港線内：下り&#39;];\n\ndata.morningTitle = morningData[0];\ndata.dayTitle = dayData[0];\ndata.nightTitle = nightData[0];\n\nmorningData = morningData.slice(1);\ndayData = dayData.slice(1);\nnightData = nightData.slice(1);\n\ndata.morningData = [];\ndata.dayData = [];\ndata.nightData = [];\ndata.allData = [];\n\nfor(let i = 0; i &amp;lt; 6; i++){\n if(morningData[i] !== &#39;-&#39;){\n let detail = morningData[i].split(&#39;&amp;gt;&#39;)[1].split(&#39;&amp;lt;&#39;)[0];\n let link = &#39;https://delay.keikyu.co.jp&#39; + morningData[i].split(&#39;\&amp;quot;&#39;)[1];\n data.morningData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.morningTitle + &#39; - &#39; + dataTitles[i] + &#39; - &#39; + detail, link : link});\n }\n \n if(dayData[i] !== &#39;-&#39;){\n let detail = dayData[i].split(&#39;&amp;gt;&#39;)[1].split(&#39;&amp;lt;&#39;)[0];\n let link = &#39;https://delay.keikyu.co.jp&#39; + dayData[i].split(&#39;\&amp;quot;&#39;)[1];\n data.dayData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.dayTitle + &#39; - &#39; + dataTitles[i] + &#39; - &#39; + detail, link : link});\n }\n \n if(nightData[i] !== &#39;-&#39;){\n let detail = nightData[i].split(&#39;&amp;gt;&#39;)[1].split(&#39;&amp;lt;&#39;)[0];\n let link = &#39;https://delay.keikyu.co.jp&#39; + nightData[i].split(&#39;\&amp;quot;&#39;)[1];\n data.nightData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.nightTitle + &#39; - &#39; + dataTitles[i] + &#39; - &#39; + detail, link : link});\n }\n}\n\nmsg.delayData = data;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:340,&amp;quot;y&amp;quot;:220,&amp;quot;wires&amp;quot;:[[&amp;quot;e0512d8a.0fe7f&amp;quot;,&amp;quot;3a7ae4dc.fc9f5c&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;5c37249e.aecf1c&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http in&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;HTTPリクエスト&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;/&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;upload&amp;quot;:false,&amp;quot;swaggerDoc&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:120,&amp;quot;y&amp;quot;:180,&amp;quot;wires&amp;quot;:[[&amp;quot;b83cd390.27959&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;bbc86a41.f453e8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http response&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;HTTPレスポンス&amp;quot;,&amp;quot;statusCode&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;headers&amp;quot;:{},&amp;quot;x&amp;quot;:610,&amp;quot;y&amp;quot;:180,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;e0512d8a.0fe7f&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;パースした情報を整形&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let delayBody = &#39;&#39;;\n\ndelayBody += &#39;&amp;lt;h1&amp;gt;&#39; + msg.delayData.date + &#39;&amp;lt;/h1&amp;gt;\\n&#39;;\n\ndelayBody += &#39;&amp;lt;h2&amp;gt;&#39; + msg.delayData.morningTitle + &#39;&amp;lt;/h2&amp;gt;\\n&#39;;\ndelayBody += &#39;&amp;lt;ul&amp;gt;&#39;;\n\nif(msg.delayData.morningData.length === 0){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;遅延情報なし&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n}else{\n msg.delayData.morningData.forEach(function(data){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;a href=\&amp;quot;&#39; + data.link + &#39;\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;&#39;;\n delayBody += data.zone + &#39; (&#39; + data.detail + &#39;)&#39;; \n delayBody += &#39;&amp;lt;/a&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n });\n}\n\ndelayBody += &#39;&amp;lt;/ul&amp;gt;&#39;;\ndelayBody += &#39;&amp;lt;h2&amp;gt;&#39; + msg.delayData.dayTitle + &#39;&amp;lt;/h2&amp;gt;\\n&#39;;\ndelayBody += &#39;&amp;lt;ul&amp;gt;&#39;;\n\nif(msg.delayData.dayData.length === 0){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;遅延情報なし&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n}else{\n msg.delayData.dayData.forEach(function(data){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;a href=\&amp;quot;&#39; + data.link + &#39;\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;&#39;;\n delayBody += data.zone + &#39; (&#39; + data.detail + &#39;)&#39;; \n delayBody += &#39;&amp;lt;/a&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n });\n}\n\ndelayBody += &#39;&amp;lt;/ul&amp;gt;&#39;;\ndelayBody += &#39;&amp;lt;h2&amp;gt;&#39; + msg.delayData.nightTitle + &#39;&amp;lt;/h2&amp;gt;\\n&#39;;\ndelayBody += &#39;&amp;lt;ul&amp;gt;&#39;;\n\nif(msg.delayData.nightData.length === 0){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;遅延情報なし&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n}else{\n msg.delayData.nightData.forEach(function(data){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;a href=\&amp;quot;&#39; + data.link + &#39;\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;&#39;;\n delayBody += data.zone + &#39; (&#39; + data.detail + &#39;)&#39;; \n delayBody += &#39;&amp;lt;/a&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n });\n}\n\ndelayBody += &#39;&amp;lt;/ul&amp;gt;&#39;;\nmsg.delayBody = delayBody;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:360,&amp;quot;y&amp;quot;:260,&amp;quot;wires&amp;quot;:[[&amp;quot;5f89b7b8.249788&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;6e8b7f2.3c2238&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;ページの要素を結合&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let bodyHeader = &#39;&amp;lt;html&amp;gt;&amp;lt;header&amp;gt;&amp;lt;meta name=\&amp;quot;viewport\&amp;quot; content=\&amp;quot;width=device-width, initial-scale=1, shrink-to-fit=no\&amp;quot;&amp;gt;&amp;lt;link rel=\&amp;quot;stylesheet\&amp;quot; href=\&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\&amp;quot; integrity=\&amp;quot;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS\&amp;quot; crossorigin=\&amp;quot;anonymous\&amp;quot;&amp;gt;&amp;lt;/header&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div class=\&amp;quot;container\&amp;quot;&amp;gt;&amp;lt;div class=\&amp;quot;row\&amp;quot;&amp;gt;&amp;lt;div class=\&amp;quot;col-sm my-2\&amp;quot;&amp;gt;&#39;;\nlet bootstrap = &#39;&amp;lt;script src=\&amp;quot;https://code.jquery.com/jquery-3.3.1.slim.min.js\&amp;quot; integrity=\&amp;quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\&amp;quot; crossorigin=\&amp;quot;anonymous\&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\&amp;quot; integrity=\&amp;quot;sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut\&amp;quot; crossorigin=\&amp;quot;anonymous\&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\&amp;quot; integrity=\&amp;quot;sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k\&amp;quot; crossorigin=\&amp;quot;anonymous\&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;;\nlet bodyFooter = &#39;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;;\n\nmsg.payload = bodyHeader + msg.delayBody + msg.mailBody + msg.scriptBody + bootstrap + bodyFooter;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:360,&amp;quot;y&amp;quot;:380,&amp;quot;wires&amp;quot;:[[&amp;quot;bbc86a41.f453e8&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;5f89b7b8.249788&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;メール送信部分&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let mailBody = &#39;&#39;;\n\nmailBody += &#39;&amp;lt;h1&amp;gt;勤怠メールを作成&amp;lt;/h1&amp;gt;&#39;;\n\nmailBody += &#39;&amp;lt;label for=\&amp;quot;reason\&amp;quot;&amp;gt;遅延理由を選択する&amp;lt;/label&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;select class=\&amp;quot;custom-select\&amp;quot; name=\&amp;quot;reason\&amp;quot; id=\&amp;quot;reason\&amp;quot; onchange=\&amp;quot;updateMessage()\&amp;quot;&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;電車遅延のため\&amp;quot; selected&amp;gt;電車遅延&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;腹痛のため\&amp;quot;&amp;gt;体調不良（腹痛）&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;頭痛のため\&amp;quot;&amp;gt;体調不良（頭痛）&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;体調不良のため\&amp;quot;&amp;gt;体調不良（理由なし）&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;保育園登園に時間がかかったため\&amp;quot;&amp;gt;保育園関係&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;家事都合のため\&amp;quot;&amp;gt;家事都合&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;私用のため\&amp;quot;&amp;gt;私用&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;/select&amp;gt;&#39;;\n\nmailBody += &#39;&amp;lt;label for=\&amp;quot;chien\&amp;quot;&amp;gt;遅延証明書へのリンクを貼る&amp;lt;/label&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;select class=\&amp;quot;custom-select\&amp;quot; name=\&amp;quot;chien\&amp;quot; id=\&amp;quot;chien\&amp;quot; onchange=\&amp;quot;updateMessage()\&amp;quot;&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;\&amp;quot; selected&amp;gt;なし&amp;lt;/option&amp;gt;&#39;;\n\nmsg.delayData.allData.forEach(function(value){\n mailBody += &#39;&amp;lt;option value=\&amp;quot;&#39; + value.link + &#39;\&amp;quot;&amp;gt;&#39; + value.title + &#39;&amp;lt;/option&amp;gt;&#39;;\n});\n\nmailBody += &#39;&amp;lt;/select&amp;gt;&#39;;\n\nmailBody += &#39;&amp;lt;label for=\&amp;quot;message\&amp;quot;&amp;gt;メール本文&amp;lt;/label&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;textarea class=\&amp;quot;form-control\&amp;quot; id=\&amp;quot;message\&amp;quot; rows=\&amp;quot;5\&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;br&amp;gt;&amp;lt;button type=\&amp;quot;button\&amp;quot; class=\&amp;quot;btn btn-primary btn-block\&amp;quot; onclick=\&amp;quot;sendMessage()\&amp;quot;&amp;gt;勤怠メールを送る&amp;lt;/button&amp;gt;&#39;;\n\nmsg.mailBody = mailBody;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:340,&amp;quot;y&amp;quot;:300,&amp;quot;wires&amp;quot;:[[&amp;quot;a41aa11e.86e04&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;a41aa11e.86e04&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;スクリプト部分&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let name = global.get(&#39;name&#39;);\nlet address = global.get(&#39;address&#39;);\n\nlet scriptBody = &#39;&amp;lt;script&amp;gt;&#39;;\nscriptBody += &#39;let reasonSelect = document.getElementById(\&amp;quot;reason\&amp;quot;); let chienSelect = document.getElementById(\&amp;quot;chien\&amp;quot;); let textArea = document.getElementById(\&amp;quot;message\&amp;quot;); function updateMessage() { let reasonIndex = reasonSelect.selectedIndex; let chienIndex = chienSelect.selectedIndex; let message = \&amp;quot;\&amp;quot;; message += \&amp;quot;&#39; + name + &#39;です。\\\\n\\\\n\&amp;quot;; message += \&amp;quot;大変申し訳ありませんが、\&amp;quot;; message += reasonSelect.options[reasonIndex].value; message += \&amp;quot;出社が遅れます。\\\\n\&amp;quot;; message += \&amp;quot;何卒宜しくお願いします。\&amp;quot;; if (!chienSelect.options[chienIndex].value) { textArea.value = message; return; } let request = new XMLHttpRequest(); request.onload = function () { message += \&amp;quot;\\\\n\\\\n遅延証明書はこちらです。\\\\n\&amp;quot;; message += request.responseText; textArea.value = message; }; request.open(\&amp;quot;GET\&amp;quot;, \&amp;quot;./encode/\&amp;quot; + encodeURIComponent(chienSelect.options[chienIndex].value.trim()), false, \&amp;quot;USER_NAME\&amp;quot;, \&amp;quot;PASSWORD\&amp;quot;); request.send(); } function sendMessage() { window.open(\&amp;quot;mailto:&#39; + address + &#39;?body=\&amp;quot; + encodeURIComponent(textArea.value)); } updateMessage();&#39;;\nscriptBody += &#39;&amp;lt;/script&amp;gt;&#39;;\n\nmsg.scriptBody = scriptBody;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:340,&amp;quot;y&amp;quot;:340,&amp;quot;wires&amp;quot;:[[&amp;quot;6e8b7f2.3c2238&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;867b9e9b.bb5b8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http in&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;HTTPリクエスト&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;/encode/:url&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;upload&amp;quot;:false,&amp;quot;swaggerDoc&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:120,&amp;quot;y&amp;quot;:480,&amp;quot;wires&amp;quot;:[[&amp;quot;eb246d76.1afeb&amp;quot;,&amp;quot;fdb9da8c.f0ebf8&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;55421d41.0dc1b4&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http response&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;HTTPレスポンス&amp;quot;,&amp;quot;statusCode&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;headers&amp;quot;:{},&amp;quot;x&amp;quot;:610,&amp;quot;y&amp;quot;:480,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;303db0f1.b72bf&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http request&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;APIを叩く&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;GET&amp;quot;,&amp;quot;ret&amp;quot;:&amp;quot;txt&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;tls&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:330,&amp;quot;y&amp;quot;:520,&amp;quot;wires&amp;quot;:[[&amp;quot;55421d41.0dc1b4&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;808e61ff.edc38&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;URL変換&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;msg.url = &#39;https://is.gd/create.php?format=simple&amp;amp;url=&#39; + encodeURIComponent(msg.req.params.url);\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:320,&amp;quot;y&amp;quot;:480,&amp;quot;wires&amp;quot;:[[&amp;quot;303db0f1.b72bf&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;eb246d76.1afeb&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;debug&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;active&amp;quot;:true,&amp;quot;tosidebar&amp;quot;:true,&amp;quot;console&amp;quot;:false,&amp;quot;tostatus&amp;quot;:false,&amp;quot;complete&amp;quot;:&amp;quot;true&amp;quot;,&amp;quot;x&amp;quot;:310,&amp;quot;y&amp;quot;:560,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;b475750f.2c9468&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;ページへのアクセス&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:130,&amp;quot;y&amp;quot;:140,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;b61cb0ab.67446&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;URL短縮&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:100,&amp;quot;y&amp;quot;:440,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;892cd0e6.0c4ae&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;定数の宣言&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:100,&amp;quot;y&amp;quot;:40,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;92da441f.e87958&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;inject&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;起動時&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payload&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payloadType&amp;quot;:&amp;quot;date&amp;quot;,&amp;quot;repeat&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;crontab&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;once&amp;quot;:true,&amp;quot;onceDelay&amp;quot;:0.1,&amp;quot;x&amp;quot;:100,&amp;quot;y&amp;quot;:80,&amp;quot;wires&amp;quot;:[[&amp;quot;7e9e582f.c0d258&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;7e9e582f.c0d258&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;差出人、宛先の設定&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;global.set(&#39;name&#39;, &#39;ポキオ&#39;);\nglobal.set(&#39;address&#39;, &#39;example@example.com&#39;);\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:360,&amp;quot;y&amp;quot;:80,&amp;quot;wires&amp;quot;:[[]]},{&amp;quot;id&amp;quot;:&amp;quot;b83cd390.27959&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;node-red-contrib-httpauth&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;BASIC認証&amp;quot;,&amp;quot;file&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;cred&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;authType&amp;quot;:&amp;quot;Basic&amp;quot;,&amp;quot;realm&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;username&amp;quot;:&amp;quot;USER_NAME&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;PASSWORD&amp;quot;,&amp;quot;hashed&amp;quot;:false,&amp;quot;x&amp;quot;:110,&amp;quot;y&amp;quot;:220,&amp;quot;wires&amp;quot;:[[&amp;quot;a45bf2b.b54621&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;fdb9da8c.f0ebf8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;node-red-contrib-httpauth&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;BASIC認証&amp;quot;,&amp;quot;file&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;cred&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;authType&amp;quot;:&amp;quot;Basic&amp;quot;,&amp;quot;realm&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;username&amp;quot;:&amp;quot;USER_NAME&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;PASSWORD&amp;quot;,&amp;quot;hashed&amp;quot;:false,&amp;quot;x&amp;quot;:110,&amp;quot;y&amp;quot;:520,&amp;quot;wires&amp;quot;:[[&amp;quot;808e61ff.edc38&amp;quot;]]}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;フローエディターは、こんな感じになっています。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;herokuにデプロイして本格運用&#34;&gt;Herokuにデプロイして本格運用&lt;/h2&gt;
&lt;p&gt;今回は、enebularが提供してるNode-REDの仕組みを利用して、フローを設計してみました。&lt;/p&gt;
&lt;p&gt;フロー設計時にはテンポラリのエンドポイントURLが付与されるので、作りながら実際のWebページの挙動を試すことができます。&lt;/p&gt;
&lt;p&gt;また、実際に本格運用しようと思ったときも、enebularからHerokuやAWS Lambdaにフローをデプロイ可能なので、簡単に日々の業務改善ツールとして導入可能です。&lt;u&gt;enebularも無料で始められますし、HerokuやAWSも無料枠で運用することが可能です。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;サクッと業務改善ツールが作れる環境が揃っているので、みなさんもぜひ作ってみてください！&lt;/p&gt;</description></item><item><title>CloudflareのAPIをNode.js&#43;GitLab CIから実行してキャッシュクリアしてみよう</title><link>https://dotstud.io/blog/cloudflare-cache-clear-nodejs/</link><pubDate>Tue, 12 Feb 2019 12:20:03 +0900</pubDate><guid>https://dotstud.io/blog/cloudflare-cache-clear-nodejs/</guid><description>
&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;過去にも書いているように、dotstudioでは&lt;a href=&#34;https://cloudflare.com&#34;&gt;Cloudflare&lt;/a&gt;を使っています。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;239&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/gitlab-vuepress-custom-domain/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/239/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
VuePressのブログをカスタムドメイン&amp;#43;SSL対応させたGitLab Pagesにデプロイする
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2019-01-30
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
VuePressで作成したサイトをGitLab CIを使ってGitLab Pagesにデプロイします。Cloudflareを利用してカスタムドメインとSSL対応もしていきます。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;無料で使えて便利なのですが、&lt;u&gt;キャッシュが強くて中々更新されないといった現象&lt;/u&gt;があります。&lt;/p&gt;
&lt;p&gt;調べてみるとCloudflareのAPIでキャッシュクリアが出来るみたいだったのでNode.jsで叩きつつデプロイ時のCIタスクに乗せてみました。&lt;/p&gt;
&lt;h2 id=&#34;今回の環境&#34;&gt;今回の環境&lt;/h2&gt;
&lt;p&gt;参考までに今回の筆者の環境です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 10.14 Mojave&lt;/li&gt;
&lt;li&gt;Node.js v11.9.0&lt;/li&gt;
&lt;li&gt;npm 6.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cloudflareでのキャッシュクリア方法&#34;&gt;Cloudflareでのキャッシュクリア方法&lt;/h2&gt;
&lt;p&gt;APIを使わない場合は、ページから直接削除できます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/242/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Custom Purgeのボタンを押すと、モーダルウィンドウが出てくるのでキャッシュクリアしたいドメインやページを指定しましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/242/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;こんな感じの指定が出来ます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://dotstud.io&lt;/code&gt;のようにメインドメイン指定が出来ます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;のようにサブドメインでも大丈夫です。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://hogehoge.dotstud.io/hoge.html&lt;/code&gt;のようにファイル指定も可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記述したら&lt;code&gt;Purge&lt;/code&gt;ボタンを押してキャッシュクリアです。&lt;/p&gt;
&lt;p&gt;確認する際ですが、ブラウザ側のキャッシュが残ってしまってる可能性もあるので、ブラウザのシークレットモードなどでページを開いてあげると確実だと思います。&lt;/p&gt;
&lt;h2 id=&#34;api経由でcloudflareのキャッシュをクリア&#34;&gt;API経由でCloudflareのキャッシュをクリア&lt;/h2&gt;
&lt;p&gt;デプロイ時にキャッシュクリアをしたいので、API経由でキャッシュクリアをしてみましょう。&lt;/p&gt;
&lt;h3 id=&#34;cloudflareのapi-キーの取得&#34;&gt;CloudflareのAPI キーの取得&lt;/h3&gt;
&lt;p&gt;まずはAPIキーを取得します。右上のユーザーアイコンから&lt;code&gt;My Profile&lt;/code&gt;を選択し、ページ下部のAPI Keysの箇所を確認します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/242/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Global API KeyのViewボタンを押すとパスワード入力を求められるので、パスワードを入力するとAPIキーが表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/242/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;apiキーを使ってcurlでキャッシュクリアをしてみる&#34;&gt;APIキーを使ってcurlでキャッシュクリアをしてみる&lt;/h3&gt;
&lt;p&gt;参考記事を元に試してみます。最初からNode.jsでやりたい人はスキップでOKです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://blog.mosuke.tech/entry/2017/05/29/how_to_use_cloudflare_api/&#34;&gt;CloudFlare APIを使ってキャッシュを削除する&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CloudflareのAPIの呼び出しはヘッダーには&lt;code&gt;X-Auth-Email&lt;/code&gt;と&lt;code&gt;X-Auth-Key&lt;/code&gt;の指定、&lt;code&gt;Content-Type: application/json&lt;/code&gt;の指定をする必要があります。&lt;/p&gt;
&lt;p&gt;手順としては大きく分けて2つSTEPです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STEP1. ZONE IDと呼ばれるIDを取得&lt;/li&gt;
&lt;li&gt;STEP2. ZONE IDを使ってキャッシュクリア&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下のコマンドをターミナルなどで実行してみましょう。&lt;/p&gt;
&lt;h4 id=&#34;step1-zone-idと呼ばれるidを取得&#34;&gt;STEP1. ZONE IDと呼ばれるIDを取得&lt;/h4&gt;
&lt;p&gt;まずはZONE　IDの取得です。以下のコマンドで取得できます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -s -X GET &amp;quot;https://api.cloudflare.com/client/v4/zones?name=&amp;lt;MY DOMAIN&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Email: &amp;lt;MY EMAIL&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Key: &amp;lt;MY API KEY&amp;gt;&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;MY DOMAIN&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;MY EMAIL&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;MY API KEY&amp;gt;&lt;/code&gt;の箇所を適宜変更して実行して下さい。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;それぞれ、自分が管理しているドメイン、登録しているメールアドレス、先ほど取得したAPIキーです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;実行例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -s -X GET &amp;quot;https://api.cloudflare.com/client/v4/zones?name=dotstud.io&amp;quot; \
-H &amp;quot;X-Auth-Email: hogehoge@gmail.com&amp;quot; \
-H &amp;quot;X-Auth-Key: xxxxxxxxxxxxxxxx&amp;quot; \
-H &amp;quot;Content-Type: application/json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ZONE ID&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コマンドを実行してエラーがなければ、JSONがかえってきます。ここのidの値がZONE IDになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;result&amp;quot;:[{&amp;quot;id&amp;quot;:&amp;quot;yyyyyyyyyyyyyyyyyyyy&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;dotstud.io&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;active&amp;quot;,&amp;quot;paused&amp;quot;:false,&amp;quot;type&amp;quot;:&amp;quot;full&amp;quot;, (......以下省略)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/242/5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;step2-zone-idを使ってキャッシュクリア&#34;&gt;STEP2. ZONE IDを使ってキャッシュクリア&lt;/h4&gt;
&lt;p&gt;次にZONE IDを使ってキャッシュクリアです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -X DELETE &amp;quot;https://api.cloudflare.com/client/v4/zones/&amp;lt;ZONE ID&amp;gt;/purge_cache&amp;quot; -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;X-Auth-Key: &amp;lt;MY EMAIL&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Email: &amp;lt;MY API KEY&amp;gt;&amp;quot; --data &#39;{&amp;quot;files&amp;quot;:[&amp;quot;&amp;lt;TARGET&amp;gt;&amp;quot;]}&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先ほどと同様に適宜変更します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;ZONE ID&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;MY EMAIL&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;MY API KEY&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;TARGET&amp;gt;&lt;/code&gt;の箇所を適宜変更して実行して下さい。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;ZONE ID&amp;gt;&lt;/code&gt;はSTEP1で取得したZONE IDで、&lt;code&gt;&amp;lt;TARGET&amp;gt;&lt;/code&gt;はキャッシュクリアさせたいドメインやファイル名の指定です。最初にAPI利用なしでCloudflareのサイト上でキャッシュクリアをした時に指定したときと同様の指定ができます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;実行例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X DELETE &amp;quot;https://api.cloudflare.com/client/v4/zones/yyyyyyyyyyyyyyyyyyyy/purge_cache&amp;quot; \
-H &amp;quot;Content-Type:application/json&amp;quot; \
-H &amp;quot;X-Auth-Key: xxxxxxxxxxxxxxxx&amp;quot; \
-H &amp;quot;X-Auth-Email: hogehoge@gmail.com&amp;quot; \
--data &#39;{&amp;quot;files&amp;quot;:[&amp;quot;https://hogehoge.dotstud.io/&amp;quot;]}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;成功すると以下のようなレスポンスがあり、キャッシュがクリアされます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;result&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;yyyyyyyyyyyyyyyyyyyy&amp;quot;},&amp;quot;success&amp;quot;:true,&amp;quot;errors&amp;quot;:[],&amp;quot;messages&amp;quot;:[]}%
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;node-jsでapiを叩いてみる&#34;&gt;Node.jsでAPIを叩いてみる&lt;/h3&gt;
&lt;p&gt;まずはフォルダやファイルの準備をしましょう。
mycfフォルダ内に&lt;code&gt;purge_cache.js&lt;/code&gt;というファイルを作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir mycf
cd mycf
touch purge_cache.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HTTPリクエストを利用する為に&lt;a href=&#34;https://www.npmjs.com/package/axios&#34;&gt;axios&lt;/a&gt;をインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm init -y
npm i axios
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;purge_cache.js&lt;/code&gt;に以下の内容をコピペして、&lt;code&gt;YOUREMAIL&lt;/code&gt;、&lt;code&gt;APIKEY&lt;/code&gt;、&lt;code&gt;PURGE_TARGETS&lt;/code&gt;を適宜書き換えましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;
const YOUREMAIL = `hogehoge@gmail.com`; //Cloudflareに登録してるメールアドレス
const APIKEY = `xxxxxxxxxxxxxxxxx`; //CloudflareのAPI KEY
const PURGE_TARGETS = [`https://hogehoge.dotstud.io`]; //消す対象ページ
const axiosBase = require(&#39;axios&#39;);
const axios = axiosBase.create({
baseURL: `https://api.cloudflare.com/client/v4/zones`,
headers: {
&#39;Content-Type&#39;: &#39;application/json&#39;,
&#39;X-Auth-Key&#39;: APIKEY,
&#39;X-Auth-Email&#39;: YOUREMAIL
}
})
const main = async() =&amp;gt; {
try {
//STEP1. ZoneIDの取得
let res = await axios.get(&#39;/&#39;);
const zoneid = res.data.result[0].id;
//STEP2. キャッシュ削除
res = await axios.delete(`/${zoneid}/purge_cache`,{
data: {
files: PURGE_TARGETS
}
});
console.log(res.data);
} catch (error) {
console.log(error.response.data)
}
}
main();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行します。エラーが出なければこれでキャッシュクリアされます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node purge_cache.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでNode.jsからCloudflareのキャッシュクリアをすることが出来ました。&lt;/p&gt;
&lt;h2 id=&#34;gitlab-ciのタスクで実行する&#34;&gt;GitLab CIのタスクで実行する&lt;/h2&gt;
&lt;p&gt;実際にデプロイした際にキャッシュクリアされるようにしたいのでGitLab CIのタスクに入れ込みました。&lt;/p&gt;
&lt;h3 id=&#34;ソースコードの変更&#34;&gt;ソースコードの変更&lt;/h3&gt;
&lt;p&gt;先ほどソースコード上に書いていた&lt;code&gt;YOUREMAIL&lt;/code&gt;などの値は環境変数から取得するように&lt;code&gt;purge_cache.js&lt;/code&gt;を変更しました。また、最後(STEP3)にDiscordにデプロイ成功を通知する処理も追加しています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;
if(!process.env.YOUREMAIL || !process.env.APIKEY || !process.env.PURGE_TARGET){
console.log(&#39;環境変数が足りません&#39;);
return;
}
const YOUREMAIL = process.env.YOUREMAIL; //Cloudflareに登録してるメールアドレス
const APIKEY = process.env.APIKEY; //CloudflareのAPI KEY
const PURGE_TARGETS = [process.env.PURGE_TARGET]; //消す対象ページ
const axiosBase = require(&#39;axios&#39;);
const axios = axiosBase.create({
baseURL: `https://api.cloudflare.com/client/v4/zones`,
headers: {
&#39;Content-Type&#39;: &#39;application/json&#39;,
&#39;X-Auth-Key&#39;: APIKEY,
&#39;X-Auth-Email&#39;: YOUREMAIL
}
})
const main = async() =&amp;gt; {
try {
//STEP1. ZoneIDの取得
let res = await axios.get(&#39;/&#39;);
const zoneid = res.data.result[0].id;
//STEP2. キャッシュ削除
res = await axios.delete(`/${zoneid}/purge_cache`,{
data: {
files: PURGE_TARGETS
}
});
console.log(res.data);
//STEP3. Discordへ通知
res = await axiosBase.post(process.env.DISCORD_WEBHOOK_URL,{
content: &#39;デプロイ成功 &amp;amp; キャッシュクリア&#39;
});
console.log(res.data);
} catch (error) {
console.log(error.response.data)
}
}
main();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;package-jsonの変更&#34;&gt;package.jsonの変更&lt;/h3&gt;
&lt;p&gt;また、先日書いた記事にもあるような、VuePressのデプロイフローに今回のタスクを乗せていきます。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;239&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/gitlab-vuepress-custom-domain/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/239/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
VuePressのブログをカスタムドメイン&amp;#43;SSL対応させたGitLab Pagesにデプロイする
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2019-01-30
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
VuePressで作成したサイトをGitLab CIを使ってGitLab Pagesにデプロイします。Cloudflareを利用してカスタムドメインとSSL対応もしていきます。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;に&lt;code&gt;ci:purge_cache&lt;/code&gt;を追加して&lt;code&gt;purge_cache.js&lt;/code&gt;を実行するスクリプトを追加します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(省略)
&amp;quot;scripts&amp;quot;: {
&amp;quot;dev&amp;quot;: &amp;quot;vuepress dev docs&amp;quot;,
&amp;quot;build&amp;quot;: &amp;quot;vuepress build docs&amp;quot;,
&amp;quot;ci:purge_cache&amp;quot;: &amp;quot;node purge_cache.js&amp;quot;,
},
(省略)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;gitlab-ci-ymlの変更&#34;&gt;.gitlab-ci.ymlの変更&lt;/h3&gt;
&lt;p&gt;GitLab CIの挙動として&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;の記述は以下のようにしています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;after_script&lt;/code&gt;の箇所で&lt;code&gt;npm run ci:purge_cache&lt;/code&gt;をすることで、デプロイが終わった後に&lt;code&gt;purge_cache.js&lt;/code&gt;が実行されてキャッシュクリアがされます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image: node:current-alpine
pages:
cache:
paths:
- node_modules/
before_script:
- node -v
- npm i
script:
- npm run build
- cp docs/robots.txt docs/.vuepress/dist #限定公開の場合
- cp -pr docs/.vuepress/dist public
after_script:
- npm run ci:purge_cache #Cloudflareのキャッシュクリア &amp;amp; Discordへ通知
artifacts:
paths:
- public
only:
- master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;環境変数の登録&#34;&gt;環境変数の登録&lt;/h3&gt;
&lt;p&gt;GitLabのリポジトリから環境変数を追加することができます。&lt;/p&gt;
&lt;p&gt;リポジトリの&lt;code&gt;Settings&amp;gt;CI/CD&lt;/code&gt;から&lt;code&gt;Environment variables&lt;/code&gt;の箇所を開きます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/242/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;各値を名前をソースコードに記述した変数名と一致させつつ設定しましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/242/7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ここまでの手順が出来るとデプロイするたびに、Cloudflareのキャッシュがクリアされて、なかなか更新されない問題が解消できると思います。&lt;/p&gt;
&lt;p&gt;これでもページが更新されない場合はブラウザ側でキャッシュされている可能性が高いのでシークレットモードなどで確認したり、ブラウザを変えてみるのがベターだと思います。&lt;/p&gt;
&lt;p&gt;キャッシュコントロールをしてCloudflareをもっと便利に使っていきましょう。&lt;/p&gt;
&lt;p&gt;それでは！&lt;/p&gt;</description></item><item><title>NefryBTからGoogleDriveにデータをアップロードする方法</title><link>https://dotstud.io/blog/update-nefrybt-to-googledrive/</link><pubDate>Thu, 31 Jan 2019 03:21:47 +0900</pubDate><guid>https://dotstud.io/blog/update-nefrybt-to-googledrive/</guid><description>
&lt;p&gt;こんにちは、NefryBTきっかけでIoTの世界に入った&lt;a href=&#34;https://dotstud.io/members/kuroda&#34;&gt;黒田&lt;/a&gt;と言います。Webとどう接していけばいいのか分からないときにNefryBTと出会い、意外と難しくない(何とかなる)ことを知りました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/members/wami&#34;&gt;わみさん&lt;/a&gt;、ありがとうございます。&lt;/p&gt;
&lt;p&gt;今回は、NefryBTからGoogleDriveにデータをアップロード出来たので紹介したいと思います。&lt;/p&gt;
&lt;p&gt;おそらく&lt;strong&gt;ESP32マイコン搭載モジュール&lt;/strong&gt;であれば、同じ考えで出来ると思います。&lt;/p&gt;
&lt;h2 id=&#34;アップロードまでの手順&#34;&gt;アップロードまでの手順&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/li&gt;
&lt;li&gt;リフレッシュトークンから認証用のアクセストークンを取得する&lt;/li&gt;
&lt;li&gt;http POSTリクエストでデータをアップロードする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;はい、とてもシンプルです。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;httpを全く分からない私としてはここまでたどり着くまでかなり苦労しました・・・先人の方々が様々な実績を残してくれているのを本当に感謝しています。) &lt;/u&gt;&lt;/p&gt;
&lt;p&gt;もう少し詳しく説明します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/drive/api/v3/about-sdk&#34;&gt;Google Drive REST APIのサイト&lt;/a&gt;を読みますと、まずGoogleDriveへアクセスするには認証用のアクセストークンが必要なこと、データをアップロードするときの&lt;a href=&#34;https://developers.google.com/drive/api/v3/multipart-upload&#34;&gt;POSTリクエストの書き方&lt;/a&gt;が決まっていることが分かります。&lt;/p&gt;
&lt;p&gt;そのためアクセストークンで認証を行いつつPOSTリクエストを投げれば、NefryBTからでもデータをアップロード出来ます。&lt;/p&gt;
&lt;p&gt;ここで一つ&lt;strong&gt;トラップ&lt;/strong&gt;があります。
アクセストークンの有効期限は3600秒(1時間)です。当初これを知らなかったので、&lt;u&gt;時間が経つとなぜか認証エラーになる問題&lt;/u&gt;に悩まされました。&lt;/p&gt;
&lt;p&gt;回避策としてリフレッシュトークンからアクセストークンを取得するようにします。すると、アクセストークンが新しくなるので、認証もばっちり通ります。
つまり、&lt;u&gt;アクセストークンよりも再発行用のリフレッシュトークンが欲しい&lt;/u&gt;のです。&lt;/p&gt;
&lt;p&gt;ではでは、具体的な手順を説明していきたいと思います。&lt;/p&gt;
&lt;h3 id=&#34;手順1-リフレッシュトークンなど必要な情報を取得する-最初の一度だけ&#34;&gt;[手順1] リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/h3&gt;
&lt;p&gt;今回はNode.jsで取得します。&lt;/p&gt;
&lt;p&gt;公式サイトの&lt;a href=&#34;https://developers.google.com/drive/api/v3/quickstart/nodejs&#34;&gt;Node.js Quickstart&lt;/a&gt;に従って進めていきます。&lt;/p&gt;
&lt;p&gt;公式サイトにある「ENABLE THE DRIVE API」を押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/0ba2b731-7e29-2db2-7591-6ae56f1a7950.png&#34; alt=&#34;OAuth0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;するとOAuth2.0クライアントIDを作ってくれます。
続けて「DOWNLOAD CLIENT CONFIGURATION」を押してcredentials.jsonを取得します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/d4efa193-e36c-2e83-81f5-590cf105894a.png&#34; alt=&#34;OAuth1.PNG&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(補足)
例えばcredentials.jsonを削除してしまって、もう一度取得したい場合・・・
Google Cloud PlatformのAPI認証情報からダウンロードできます。&lt;/p&gt;
&lt;p&gt;左上のメニューを押して「APIとサービス」を押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/b26bff46-0dea-afba-38cd-51cb6ba8eb68.png&#34; alt=&#34;OAuth2-1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;認証情報の中に先ほど作成したクライアントIDがありますので、ダウンロードします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/901be3e5-b947-c290-e641-8db7dd075dcf.png&#34; alt=&#34;OAuth2-2.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;※ファイル名は「client&lt;em&gt;secret&lt;/em&gt;***.json」となっていますので「credentials.json」に変更します。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;次にNode.jsでアクセストークンなどの情報を取得します。(Node.jsやnpmが動く環境は用意されているものとします。)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;アクセストークンを取得するフォルダを用意して以下のモジュールをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install googleapis@27 --save
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;credentials.jsonも同じフォルダに移動させます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;index.jsを作成します。公式サイトのままではスコープがReadOnlyになっているのでアップロードできるスコープに変更します。それ以外は全く同じです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[変更前]
const SCOPES = [&#39;https://www.googleapis.com/auth/drive.metadata.readonly&#39;];
[変更後]
const SCOPES = [&#39;https://www.googleapis.com/auth/drive&#39;];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スコープについて詳しくは&lt;a href=&#34;https://developers.google.com/drive/api/v2/about-auth&#34;&gt;About Authorization&lt;/a&gt;を参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;準備は整ったのでNode.jsを実行します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;１. credentials.json、index.jsなど一式入っているフォルダです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/52fdf814-f643-1754-9a6c-2a6d9e3fe8bd.png&#34; alt=&#34;AccessToken_0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;２. nodeを実行します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/1ce7b76c-988e-fd6f-c863-eef96b1fa4ac.png&#34; alt=&#34;AccessToken_1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;３. URLが表示されるのでアクセスします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/64852163-ae0f-6156-6d7d-fac9e90c7a27.png&#34; alt=&#34;AccessToken_2.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;４. 紐づけるGoogleアカウントを選択し、GoogleDriveへのアクセスを許可します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/dac52655-b356-073b-96bf-678c073897c1.png&#34; alt=&#34;AccessToken_3.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/55cd28a0-da9b-e5ee-2b91-095030c96f37.png&#34; alt=&#34;AccessToken_4.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;５. 最後に表示されるコードを上記3.の続きに貼り付けます。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/3fd64238-c27d-6412-23f9-d9754bec9ff9.png&#34; alt=&#34;AccessToken_5.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/90f1683d-0731-25e9-e376-cdbb11156e2b.png&#34; alt=&#34;AccessToken_6.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;６.無事token.jsonを取得できました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/7aa8a2bb-b2d0-f5d0-787c-6f142da997a8.png&#34; alt=&#34;AccessToken_7.PNG&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;手順2-リフレッシュトークンから認証用のアクセストークンを取得する&#34;&gt;[手順2] リフレッシュトークンから認証用のアクセストークンを取得する&lt;/h3&gt;
&lt;p&gt;アップロードに必要な情報は揃ったので、あとはNefryBTだけ触っていきます。&lt;/p&gt;
&lt;p&gt;リフレッシュトークンからアクセストークンを取得するhttp POSTリクエストは次の通りとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ヘッダー]
POST /oauth2/v4/token HTTP/1.1
Host: www.googleapis.com:443
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: [POSTするデータの長さ]
[POSTするデータ]
refresh_token=[リフレッシュトークン]&amp;amp;client_id=[クライアントID]&amp;amp;client_secret=[クライアントシークレット]&amp;amp;grant_type=refresh_token
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;クライアントIDとクライアントシークレットは「credentials.json」に書いてあります。もしくはGoogle Cloud PlatformのAPIの認証情報でも確認できます。&lt;/li&gt;
&lt;li&gt;リフレッシュトークンは「token.json」に書いてあります。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;POSTリクエストを投げるとレスポンスがjson形式で返ってきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;access_token&amp;quot;: &amp;quot;***&amp;quot;,
&amp;quot;expires_in&amp;quot;: 3600,
&amp;quot;scope&amp;quot;: &amp;quot;https://www.googleapis.com/auth/drive&amp;quot;,
&amp;quot;token_type&amp;quot;: &amp;quot;Bearer&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;access_token:***が取得したいアクセストークンになります。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上記の内容をNefryBTで書くと次のようになります。&lt;/p&gt;
&lt;p&gt;※&lt;a href=&#34;https://github.com/NearMugi/NefrySample/tree/master/GoogleAPI/%23createLibrary/googleAPI/PostDrive&#34;&gt;プログラムソース&lt;/a&gt;のうち主要な部分を抜粋しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;リフレッシュトークン・クライアントID・クライアントシークレットは個人情報なので、直接プログラムソースに記載するのではなくNefryBTのDataStoreに登録します。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POSTするデータを設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; String postData = &amp;quot;&amp;quot;;
postData += &amp;quot;refresh_token=&amp;quot; + refresh_token;
postData += &amp;quot;&amp;amp;client_id=&amp;quot; + client_id;
postData += &amp;quot;&amp;amp;client_secret=&amp;quot; + client_secret;
postData += &amp;quot;&amp;amp;grant_type=&amp;quot; + String(&amp;quot;refresh_token&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ヘッダーを設定します。
データの長さはPOSTするデータ(postData)から算出します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; String postHeader = &amp;quot;&amp;quot;;
postHeader += (&amp;quot;POST &amp;quot; + token_uri + &amp;quot; HTTP/1.1\r\n&amp;quot;);
postHeader += (&amp;quot;Host: &amp;quot; + String(host) + &amp;quot;:&amp;quot; + String(httpsPort) + &amp;quot;\r\n&amp;quot;);
postHeader += (&amp;quot;Connection: close\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Type: application/x-www-form-urlencoded\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Length: &amp;quot;);
postHeader += (postData.length());
postHeader += (&amp;quot;\r\n\r\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POSTリクエストを投げてレスポンスを取得します。更にレスポンスからアクセストークンを取得します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; String result = postRequest(host, postHeader, postData);
//取得したjsonデータからAccessTokenを取得する
const int BUFFER_SIZE = JSON_OBJECT_SIZE(4) + JSON_ARRAY_SIZE(1);
StaticJsonBuffer&amp;lt;BUFFER_SIZE&amp;gt; jsonBuffer;
char json[result.length() + 1];
result.toCharArray(json, sizeof(json));
JsonObject&amp;amp; root = jsonBuffer.parseObject(json);
const char* tmp = root[&amp;quot;access_token&amp;quot;];
token = tmp;
return token;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POSTリクエストを行っているソース(&lt;code&gt;postRequest&lt;/code&gt;)です。正常に処理が終わればレスポンスを返します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String postRequest(const char* server, String header, String data) {
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
Serial.print(&amp;quot;Connecting to: &amp;quot;); Serial.println(server);
if (!client.connect(server, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return result;
}
Serial.println(&amp;quot;certificate matches&amp;quot;);
Serial.print(&amp;quot;post: &amp;quot;); Serial.println(header + data);
client.print(header + data);
Serial.println(&amp;quot;Receiving response&amp;quot;);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil(&#39;\r&#39;);
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
}
String line = client.readStringUntil(&#39;\r&#39;);
Serial.println(line);
result += line;
}
Serial.println(&amp;quot;closing connection&amp;quot;);
return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だいたいこんな感じで無事アクセストークンを取得できました。&lt;/p&gt;
&lt;h3 id=&#34;手順3-http-postリクエストでデータをアップロードする&#34;&gt;[手順3] http POSTリクエストでデータをアップロードする&lt;/h3&gt;
&lt;p&gt;いよいよデータをアップロードしてみます。今回はテキストファイルとJpegファイルのアップロード方法を紹介します。
公式サイトの&lt;a href=&#34;https://developers.google.com/drive/api/v3/manage-uploads&#34;&gt;Uploading Files&lt;/a&gt;によりますと、アップロード方法は3パターンあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple upload&lt;/li&gt;
&lt;li&gt;Multipart upload&lt;/li&gt;
&lt;li&gt;Resumable upload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;Simple upload&amp;rdquo;の場合、アップロードしたファイル名は全て&amp;rdquo;untitled&amp;rdquo;となってしまい、具合がよろしくありません。
&amp;ldquo;Multipart upload&amp;rdquo;の場合、ファイルに様々な設定を付加できます。今回はファイル名・親フォルダの指定・コメントを設定しました。
(&amp;ldquo;Resumable upload&amp;rdquo;はどんなものか調べていません・・・)&lt;/p&gt;
&lt;p&gt;Multipart uploadのPOSTリクエストは次の通りです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart HTTP/1.1
Authorization: Bearer [YOUR_AUTH_TOKEN]
Content-Type: multipart/related; boundary=foo_bar_baz
Content-Length: [NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]
--foo_bar_baz
Content-Type: application/json; charset=UTF-8
{
&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;
}
--foo_bar_baz
Content-Type: image/jpeg
[JPEG_DATA]
--foo_bar_baz--
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[YOUR_AUTH_TOKEN]はアクセストークンを設定します。&lt;/li&gt;
&lt;li&gt;[NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]は &lt;strong&gt;ヘッダーから最後のデータまですべてのサイズ&lt;/strong&gt; となります。つまり最初のPOSTから最後の&amp;ndash;foo_bar_baz&amp;ndash;まで全てのサイズを設定します。これを間違えると正しくPOSTリクエストを投げることが出来ません。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;&lt;/code&gt; の部分がアップロードするファイルの設定を記載する部分となります。
何を設定できるかは&lt;a href=&#34;https://developers.google.com/drive/api/v3/reference/files&#34;&gt;公式ページの&amp;rdquo;Files&amp;rdquo;&lt;/a&gt;を参照ください。&lt;/li&gt;
&lt;li&gt;その下の&lt;code&gt;Content-Type: image/jpeg&lt;/code&gt; がアップロードするデータの形式となり、その次にデータの中身を記述していきます。&lt;/li&gt;
&lt;li&gt;最後に&lt;code&gt;--foo_bar_baz--&lt;/code&gt; で閉めます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まとめますと、プログラムを書くとき毎回設定しなければならないのは次の4つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセストークン&lt;/li&gt;
&lt;li&gt;POSTリクエスト全体のサイズ&lt;/li&gt;
&lt;li&gt;ファイルの設定(ファイル名・親フォルダ・コメント)&lt;/li&gt;
&lt;li&gt;ファイルの中身&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;テキストファイルをアップロードする&#34;&gt;テキストファイルをアップロードする&lt;/h2&gt;
&lt;p&gt;上記の仕様を踏まえてテキストファイルをアップロードする例を挙げます。この次に紹介するJpegファイルのアップロードと比べるとシンプルで分かりやすいと思います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;POSTリクエストのファイルの指定周り(&lt;code&gt;--foo_bar_baz&lt;/code&gt;部分)を設定します。&lt;/li&gt;
&lt;li&gt;上記1.のあとPOSTリクエスト全体のサイズが分かるのでヘッダー(&lt;code&gt;POST https://&lt;/code&gt;部分)を設定します。&lt;/li&gt;
&lt;li&gt;上記1.と2.をPOSTします。&lt;/li&gt;
&lt;li&gt;データの中身をPOSTします。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最後の&amp;rsquo;&amp;ndash;foo_bar_baz&amp;ndash;&amp;lsquo;をPOSTします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void postDrive_Text(String _fileName, String _textData, String _comment) {
uint8_t DataSize = _textData.length();
uint8_t postData[DataSize];
for (int i = 0; i &amp;lt; DataSize; i++) {
postData[i] = (uint8_t)_textData[i];
}
1. POSTリクエストのファイルの指定周りを設定
String start_request = getStartRequest_Text(_fileName, _comment);
2. ヘッダーを設定
uint16_t full_length;
full_length = start_request.length() + DataSize + end_request.length();
String postHeader = getPostHeader(full_length);
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
if (!client.connect(host, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return ;
}
3. 1.と2.をPOST
client.print(postHeader + start_request);
4. データの中身をPOST
client.write(&amp;amp;postData[0] , DataSize);
5. --foo_bar_baz--をPOST
client.println(end_request);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil(&#39;\r&#39;);
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
} else {
Serial.println(F(&amp;quot;[WARNING] Response Data is Nothing&amp;quot;));
}
String line = client.readStringUntil(&#39;\r&#39;);
Serial.println(line);
result += line;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;実際にテキストファイルをアップロードしている様子&#34;&gt;実際にテキストファイルをアップロードしている様子&lt;/h3&gt;
&lt;p&gt;１. アップロード先のフォルダを作成しておきます。親フォルダIDは「&lt;code&gt;https://drive.google.com/drive/folders/***&lt;/code&gt;」の***の部分です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/c32ed96f-9dc4-59cb-0eef-c1091b088397.png&#34; alt=&#34;GoogleDrive_Text_0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;２. NefryBTのセットアップが完了するのを待ちます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/699a3064-ec88-d560-2429-f5cab310ce9b.jpeg&#34; alt=&#34;DSC_0003.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/3b5bc537-b82a-eb2e-a751-077817386f7e.jpeg&#34; alt=&#34;DSC_0005.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;３. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/cfafe65c-ebb7-d82c-e566-d47436cf7ee9.jpeg&#34; alt=&#34;DSC_0006.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;４. 成功しました！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/97de4845-f602-0aa5-26ac-064cd47609be.jpeg&#34; alt=&#34;DSC_0007.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;５. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/72fae28e-6ac8-4fca-e940-265031c2c8cf.png&#34; alt=&#34;GoogleDrive_Text_1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/5b5cb82b-7dd1-d3e4-bf3b-bb60bfffdb1a.png&#34; alt=&#34;GoogleDrive_Text_2.PNG&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;jpegファイルをアップロードする&#34;&gt;Jpegファイルをアップロードする&lt;/h2&gt;
&lt;p&gt;続いてJpegファイルをアップロードする方法です。&lt;strong&gt;ここからかなり込み入った内容になります。&lt;/strong&gt;
今回JpegファイルにしてアップロードしたものはNefryBTに接続したカメラモジュールで撮った画像となります。そのためカメラモジュールの話とGoogleDriveへアップロードする話が混在しますのでご了承ください・・・&lt;/p&gt;
&lt;h3 id=&#34;カメラモジュールについて&#34;&gt;カメラモジュールについて&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/eeaaa02a-2c36-b131-aa32-eeacef9abb63.jpeg&#34; alt=&#34;ArduCAM.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用したカメラモジュールは&lt;a href=&#34;https://www.switch-science.com/catalog/3780/&#34;&gt;Arducam Miniモジュール(2メガピクセル)&lt;/a&gt;です。ESP32向けのサンプルがあったので動かせるだろうと思って選びました。
(NefryBTのことを考えれば&lt;a href=&#34;https://www.switch-science.com/catalog/1626/&#34;&gt;Groveのカメラ&lt;/a&gt;でも良かったとあとで気づきました・・・)&lt;/p&gt;
&lt;p&gt;初期設定やカメラモジュールからデータを取得するところは&lt;a href=&#34;https://github.com/NearMugi/NefrySample/tree/master/ArduCAM/OV2640&#34;&gt;プログラムソース&lt;/a&gt;を参照ください。&lt;/p&gt;
&lt;p&gt;厄介なのは&lt;strong&gt;取得したデータ全てがJpegデータではない&lt;/strong&gt;ことです。このカメラモジュールの場合、1バイト目に0x00が入っています。これ、要らないデータなのです。きちんとJpegファイルにあたるデータをアップロードしないと正しく表示されません。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.setsuki.com/hsp/ext/jpg.htm&#34;&gt;Jpegファイル&lt;/a&gt;は開始位置(0xFFD8)と終了位置(0xFFD9)が決まっています。この範囲のデータだけをアップロードすればJpegファイルとして正しく表示されます。&lt;/p&gt;
&lt;h3 id=&#34;プログラムのポイント&#34;&gt;プログラムのポイント&lt;/h3&gt;
&lt;p&gt;カメラモジュールの仕様を踏まえてアップロードします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jpegファイルのデータサイズは何十万バイトと膨大なので全て変数に入れて一括でPOSTすることはできません。そのためデータを分割してカメラモジュールから取得、POSTを繰り返します。&lt;/li&gt;
&lt;li&gt;POSTリクエスト全体のサイズとJpegファイルのサイズが異なるので、&lt;strong&gt;POSTリクエスト全体のサイズに足りない分を最後に0x00をPOSTする&lt;/strong&gt;ことで整合性を合わせています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プログラムソースを抜粋します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// ReadSizeはカメラモジュールで取得したデータサイズ
//GoogleDriveへポスト
String start_request = api.getStartRequest_Jpeg(&amp;quot;Capture&amp;quot;, &amp;quot;From ArduCam&amp;quot;);
String end_request = api.getEndRequest();
uint32_t full_length;
full_length = start_request.length() + ReadSize + end_request.length();
String postHeader = api.getPostHeader(full_length);
(中略)
client.print(postHeader + start_request);
//JPEGデータ
static const size_t bufferSize = 2048;
static uint8_t buffer[bufferSize] = {0xFF};
uint32_t index = 0;
uint32_t sizeCnt = 0;
uint8_t now = 0;
uint8_t prev = 0;
myCAM.CS_LOW();
myCAM.set_fifo_burst();
カメラモジュールのデータをPOSTしている部分
bool isHeader = false;
while (ReadSize--) {
prev = now;
now = SPI.transfer(0x00);
//ヘッダーを探す(0xFF,0xD8)
if (!isHeader) {
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD8) {
Serial.println(F(&amp;quot;JPEG First Data is Found&amp;quot;));
buffer[0] = 0xFF;
buffer[1] = 0xD8;
index = 2;
sizeCnt = 2;
isHeader = true;
}
continue;
}
//ヘッダーが見つかったあと
sizeCnt++;
// JPEGファイルの最後を検出したら終了(0xFF,0xD9)
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD9) {
Serial.println(F(&amp;quot;JPEG Last Data is Found&amp;quot;));
buffer[index++] = now;
client.write(&amp;amp;buffer[0], index);
myCAM.CS_HIGH();
break;
}
if (index &amp;lt; bufferSize) {
buffer[index] = now;
index++;
} else {
if (!client.connected()) break;
client.write(&amp;amp;buffer[0], bufferSize);
index = 0;
buffer[index++] = now;
}
}
myCAM.CS_HIGH();
ReadSize += 1;
Serial.print(F(&amp;quot;JPEG Data Size: &amp;quot;)); Serial.println(sizeCnt);
Serial.print(F(&amp;quot;Remaining Data Size: &amp;quot;)); Serial.println(ReadSize);
client.println(end_request);
POSTリクエスト全体のサイズを調整している部分
//バッファーメモリサイズと画像サイズが異なるため、full_lengthに達していない。
//足りない分の帳尻を合わせる
uint8_t tmpbuf[ReadSize] = {0x00};
client.write(&amp;amp;tmpbuf[0], ReadSize);
(以下、省略)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;実際にjpegファイルをアップロードしている様子&#34;&gt;実際にJpegファイルをアップロードしている様子&lt;/h3&gt;
&lt;p&gt;１. アップロード先のフォルダはテキストファイルと同じところにします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/2660eda8-1474-644d-fae2-bba8b87c502d.png&#34; alt=&#34;GoogleDrive_Jpeg_0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;２. カメラで撮ってみます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/c25e4a34-5b9c-44ff-3f78-b390c2c492de.jpeg&#34; alt=&#34;DSC_0015.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;３. NefryBTのセットアップが完了するのを待ちます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/91963234-adc5-7317-654b-41dbd6b8b9ca.jpeg&#34; alt=&#34;DSC_0010.JPG&#34; /&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/a85255a7-e375-2d75-c7d0-4d126e66b60f.jpeg&#34; alt=&#34;DSC_0012.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;４. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/6e91d9ac-0e56-6df0-062b-2d158fd75b3e.jpeg&#34; alt=&#34;DSC_0013.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;５. 成功しました！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/c7291283-ac2a-feb9-d924-9c23963058b1.jpeg&#34; alt=&#34;DSC_0014.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;６. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/b9ed65c6-185b-a57c-1877-1bb079b2400f.png&#34; alt=&#34;GoogleDrive_Jpeg_1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/fac4420d-d91a-3849-f71c-b17ab86d842f.png&#34; alt=&#34;GoogleDrive_Jpeg_2.PNG&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考にしたサイト&#34;&gt;参考にしたサイト&lt;/h2&gt;
&lt;p&gt;大変助かりました。&lt;/p&gt;
&lt;p&gt;*&lt;a href=&#34;https://github.com/jalmeroth/ESP8266-OAUTH2/blob/master/ESP8266-OAUTH2/ESP8266-OAUTH2.ino&#34;&gt;jalmeroth/ESP8266-OAUTH2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*&lt;a href=&#34;https://himakan.net/websites/how_to_google_oauth&#34;&gt;Google APIを使用するためにGoogle OAuth認証をしようよ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*&lt;a href=&#34;https://zudoh.com/trouble-shooting/google-oauth-expired&#34;&gt;時間が立つとGoogle APIのOAuth認証に失敗する&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*&lt;a href=&#34;http://indoor.lolipop.jp/IndoorCorgiElec/ESP-SensorCam.php&#34;&gt;ESP-SensorCam&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;NefryBTから直接GoogleDriveにアクセスできたときは感動しました！こんな小さなボードがネットに繋がるなんて！&lt;/p&gt;
&lt;p&gt;またGmailやスプレッドシートなどの他のアプリケーションにもアクセスできると思います。面白い組み合わせがあるかもしれません。&lt;/p&gt;
&lt;p&gt;みなさんのIoTライフの参考になれば幸いです。ではでは。&lt;/p&gt;</description></item><item><title>VuePressのブログをカスタムドメイン&#43;SSL対応させたGitLab Pagesにデプロイする</title><link>https://dotstud.io/blog/gitlab-vuepress-custom-domain/</link><pubDate>Wed, 30 Jan 2019 10:47:09 +0900</pubDate><guid>https://dotstud.io/blog/gitlab-vuepress-custom-domain/</guid><description>
&lt;p&gt;こんにちは、最近スパにハマっている&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;今日はタイトル通り&lt;strong&gt;VuePressで作ったブログをGitLab Pagesに乗せてカスタムドメイン+SSL対応していきます。&lt;/strong&gt; 2019年1月時点版です。UIなどはガンガン変わっていくと思いますので適宜読み替えましょう。&lt;/p&gt;
&lt;p&gt;過去に書いたこの記事とは別のサイトの運用話です。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;236&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/circleci-hugo-github-pages/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/236/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
Hugo&amp;#43;GitHub Pagesで作ってるブログ運用をGitLabからCircle CI&amp;#43;GitHubに切り替えました。
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2019-01-22
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
Circle CIを使ってHugoのビルドをしてGitHub Pagesにデプロイする手順のメモです。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;気持ち的にHugoブログもVuePressに移行したいと思っている感じですね。&lt;/p&gt;
&lt;h2 id=&#34;gitlab-pagesの基本&#34;&gt;GitLab Pagesの基本&lt;/h2&gt;
&lt;p&gt;GitLab PagesはGitLabで利用できる無料ホスティング環境です。&lt;/p&gt;
&lt;p&gt;GitHub PagesのGitLab版って認識で大丈夫です。&lt;/p&gt;
&lt;h3 id=&#34;gitlab-pagesでサイト公開の仕方&#34;&gt;GitLab Pagesでサイト公開の仕方&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;publicフォルダを作成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリのルートに&lt;code&gt;public&lt;/code&gt;フォルダを作成して、その中にindex.htmlや関連するcssやjsファイルなどを入れていきます。基本的には&lt;code&gt;public/index.html&lt;/code&gt;がプロジェクトのトップページとして認識されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.gitlab-ci.ymlを作成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリのルート（&lt;code&gt;public&lt;/code&gt;フォルダと同じ階層）に&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pages:
stage: deploy
script:
- echo &#39;Nothing to do...&#39;
artifacts:
paths:
- public
only:
- master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あとはGitLabのリポジトリにプッシュするだけです。
この場合masterブランチにプッシュすると更新されます。&lt;/p&gt;
&lt;p&gt;ファイル構成はイメージはこんな感じです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;がある状態でGitLabのリポジトリにプッシュするとCIが動いてごにょごにょやってくれます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://&amp;lt;ユーザー名&amp;gt;.gitlab.io/&amp;lt;リポジトリ名&amp;gt; にアクセス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;https://&amp;lt;ユーザー名&amp;gt;.gitlab.io/&amp;lt;リポジトリ名&amp;gt;&lt;/code&gt;が公開URLです。&lt;/p&gt;
&lt;p&gt;GitLabのリポジトリのURLが&lt;code&gt;https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;&lt;/code&gt;となっているので適宜読み替えましょう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例えば、リポジトリのURLが&lt;code&gt;https://gitlab.com/n0bisuke/akihabara&lt;/code&gt;だとしたら、公開用のGitLab PagesのURLは&lt;code&gt;https://n0bisuke.gitlab.io/akihabara&lt;/code&gt;になります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;プッシュしてから更新まで数分時間が掛かることがあるので少し経ってからまた確認してみましょう。&lt;/p&gt;
&lt;p&gt;うまくいかない場合は&lt;code&gt;https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;/-/jobs&lt;/code&gt;に行くとジョブの確認が出来るので、エラーなどを確認してみましょう。&lt;/p&gt;
&lt;h2 id=&#34;vuepressをgitlab-pagesにデプロイ&#34;&gt;VuePressをGitLab Pagesにデプロイ&lt;/h2&gt;
&lt;p&gt;先ほどの利用したGitLab CIを利用します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vuepress.vuejs.org/&#34;&gt;VuePress&lt;/a&gt;はVue.jsの作者が作ったVue.js製の静的サイトジェネレータです。&lt;/p&gt;
&lt;p&gt;公式のドキュメントに、&lt;a href=&#34;https://vuepress.vuejs.org/guide/deploy.html#gitlab-pages-and-gitlab-ci&#34;&gt;VuePressをGitLab PagesとGitLab CIにデプロイする方法&lt;/a&gt;が載っていますが、個人的には以下の2ステップだけで問題ないと思います。&lt;/p&gt;
&lt;h3 id=&#34;1-vuepressのconfig-jsの設定&#34;&gt;1. VuePressのconfig.jsの設定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docs/.vuepress/config.js&lt;/code&gt;の中に&lt;code&gt;base&lt;/code&gt;というキーがあります。
ここにリポジトリ名をパスとして設定してあげます。&lt;/p&gt;
&lt;p&gt;例えば&lt;code&gt;https://gitlab.com/n0bisuke/hogehoge&lt;/code&gt;というリポジトリで&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;という公開URLになる場合は、&lt;code&gt;base&lt;/code&gt;の箇所を&lt;code&gt;/hogehoge/&lt;/code&gt;にしましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;後述しますが、もし、この後の手順のカスタムドメインまでを設定するならばここの&lt;code&gt;base&lt;/code&gt;は&lt;code&gt;/&lt;/code&gt;の設定のままで大丈夫です。&lt;/p&gt;
&lt;h3 id=&#34;2-gitlab-ci-yml-の記述&#34;&gt;2. &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;の記述&lt;/h3&gt;
&lt;p&gt;以下のyml記述だけで完了です。プッシュして&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;(自分の環境に読み替え)などにアクセスして確認しましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image: node:current-alpine
pages:
cache:
paths:
- node_modules/
before_script:
- node -v
- npm i
script:
- npm run docs:build
- cp -pr docs/.vuepress/dist public
artifacts:
paths:
- public
only:
- master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デフォルトのチュートリアル通りだとビルドのコマンドが&lt;code&gt;npm run docs:build&lt;/code&gt;になっているはずなので、プッシュするとCI環境側で&lt;code&gt;npm run docs:build&lt;/code&gt;でビルドして、ビルド後のdistフォルダをpublicフォルダにコピー、その後publicフォルダをGitLab Pagesとしてデプロイします。&lt;/p&gt;
&lt;p&gt;公式ドキュメントにはビルド先のフォルダをdistではなくpublicにする設定などがありましたが、この記述でも問題ないです。&lt;/p&gt;
&lt;h2 id=&#34;カスタムドメインの利用-ssl対応&#34;&gt;カスタムドメインの利用 &amp;amp; SSL対応&lt;/h2&gt;
&lt;p&gt;現状で、&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;というアドレスが公開URLになっているものを&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;でアクセスさせるようにしていきます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt;を利用します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;を利用する手もあるのですが、更新の手間があるのと既にdotstud.ioでCloudflareを使ってDNSやSSL設定をしていたので&lt;strong&gt;Cloudflareを利用してのGitLab Pagesのカスタムドメイン&amp;amp;SSL対応を紹介&lt;/strong&gt;します。&lt;/p&gt;
&lt;p&gt;GitLab公式の&lt;a href=&#34;https://about.gitlab.com/2017/02/07/setting-up-gitlab-pages-with-cloudflare-certificates/&#34;&gt;Setting up GitLab Pages with CloudFlare Certificates&lt;/a&gt;を見ながら試してみました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNSのAレコードをGitLab Pagesに向けることも出来るみたいですが、今回はCNAMEでサブドメインをリダイレクトさせる形にします。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-証明書の作成&#34;&gt;1. 証明書の作成&lt;/h3&gt;
&lt;p&gt;CloudflareのCrypto画面を開きます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Origin Certificates&lt;/code&gt;の項目にある&lt;code&gt;Create Certificate&lt;/code&gt;(証明書の作成)の青いボタンを押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;モーダルウィンドウが開かれますが、&lt;code&gt;List the hostnames&lt;/code&gt;の箇所だけ変更して、利用したいドメイン名を記述して、NEXTボタンで進みましょう。&lt;/p&gt;
&lt;p&gt;今回は&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;でアクセスしたいので、ここには&lt;code&gt;hogehoge.dotstud.io&lt;/code&gt;などのドメイン名だけを入力しておきます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これで証明書の文字列が生成されます。
&lt;code&gt;Ker format&lt;/code&gt;はデフォルトの&lt;code&gt;PEM&lt;/code&gt;のままで大丈夫です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin certificate&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private key&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;この二種類の文字列をあとで使うのでコピーしておきましょう。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-gitlab-pagesに設定する&#34;&gt;2. GitLab Pagesに設定する&lt;/h3&gt;
&lt;p&gt;GitLabのリポジトリ設定画面からPagesの設定画面に行きます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;/pages&lt;/code&gt;が設定画面です。&lt;/p&gt;
&lt;p&gt;ここから&lt;code&gt;New Domain&lt;/code&gt;ボタンを押してカスタムドメインの設定をします。&lt;/p&gt;
&lt;p&gt;また、この際に&lt;code&gt;Force domains with SSL certificates to use HTTPS&lt;/code&gt;のチェックがありますが、SSL対応させるのでデフォルトのままチェックしておきましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Domain&lt;/code&gt;の項目に設定したいカスタムドメイン（今回は&lt;code&gt;hogehoge.dotstud.io&lt;/code&gt;）を設定します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以下の二箇所には先ほどのCloudflareで生成した証明書文字列を指定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Certificate (PEM): &lt;code&gt;Origin certificate&lt;/code&gt;の文字列&lt;/li&gt;
&lt;li&gt;Key (PEM): &lt;code&gt;Private key&lt;/code&gt;の文字列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;----BEGIN CERTIFICATE----&lt;/code&gt;などの文字を含めて全部コピペしましょう。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ここにさらにCloudflareの証明書の文字列が必要になります。&lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/218689638&#34;&gt;CloudFlare&amp;rsquo;s Origin CA — RSA Root&lt;/a&gt;というらしいです。&lt;/p&gt;
&lt;p&gt;以下の文字列(CloudFlare&amp;rsquo;s Origin CA)をコピーしましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-----BEGIN CERTIFICATE-----
MIID/DCCAuagAwIBAgIID+rOSdTGfGcwCwYJKoZIhvcNAQELMIGLMQswCQYDVQQG
EwJVUzEZMBcGA1UEChMQQ2xvdWRGbGFyZSwgSW5jLjE0MDIGA1UECxMrQ2xvdWRG
bGFyZSBPcmlnaW4gU1NMIENlcnRpZmljYXRlIEF1dGhvcml0eTEWMBQGA1UEBxMN
U2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZvcm5pYTAeFw0xNDExMTMyMDM4
NTBaFw0xOTExMTQwMTQzNTBaMIGLMQswCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xv
dWRGbGFyZSwgSW5jLjE0MDIGA1UECxMrQ2xvdWRGbGFyZSBPcmlnaW4gU1NMIENl
cnRpZmljYXRlIEF1dGhvcml0eTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEG
A1UECBMKQ2FsaWZvcm5pYTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
AMBIlWf1KEKR5hbB75OYrAcUXobpD/AxvSYRXr91mbRu+lqE7YbyyRUShQh15lem
ef+umeEtPZoLFLhcLyczJxOhI+siLGDQm/a/UDkWvAXYa5DZ+pHU5ct5nZ8pGzqJ
p8G1Hy5RMVYDXZT9F6EaHjMG0OOffH6Ih25TtgfyyrjXycwDH0u6GXt+G/rywcqz
/9W4Aki3XNQMUHNQAtBLEEIYHMkyTYJxuL2tXO6ID5cCsoWw8meHufTeZW2DyUpl
yP3AHt4149RQSyWZMJ6AyntL9d8Xhfpxd9rJkh9Kge2iV9rQTFuE1rRT5s7OSJcK
xUsklgHcGHYMcNfNMilNHb8CAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgAGMBIGA1Ud
EwEB/wQIMAYBAf8CAQIwHQYDVR0OBBYEFCToU1ddfDRAh6nrlNu64RZ4/CmkMB8G
A1UdIwQYMBaAFCToU1ddfDRAh6nrlNu64RZ4/CmkMAsGCSqGSIb3DQEBCwOCAQEA
cQDBVAoRrhhsGegsSFsv1w8v27zzHKaJNv6ffLGIRvXK8VKKK0gKXh2zQtN9SnaD
gYNe7Pr4C3I8ooYKRJJWLsmEHdGdnYYmj0OJfGrfQf6MLIc/11bQhLepZTxdhFYh
QGgDl6gRmb8aDwk7Q92BPvek5nMzaWlP82ixavvYI+okoSY8pwdcVKobx6rWzMWz
ZEC9M6H3F0dDYE23XcCFIdgNSAmmGyXPBstOe0aAJXwJTxOEPn36VWr0PKIQJy5Y
4o1wpMpqCOIwWc8J9REV/REzN6Z1LXImdUgXIXOwrz56gKUJzPejtBQyIGj0mveX
Fu6q54beR89jDc+oABmOgg==
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;この&lt;code&gt;CloudFlare&#39;s Origin CA&lt;/code&gt;をコピーしたら、先ほど&lt;code&gt;Certificate (PEM)&lt;/code&gt;のフォームに入れ込んだ文字列の後ろに改行をいれて、&lt;code&gt;CloudFlare&#39;s Origin CA&lt;/code&gt;を貼り付けます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;この画面のような感じです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ここまで出来たら、ページ下部の&lt;code&gt;Create New Domain&lt;/code&gt;のボタンを押して進みましょう。&lt;/p&gt;
&lt;h3 id=&#34;3-dnsの設定&#34;&gt;3. DNSの設定&lt;/h3&gt;
&lt;p&gt;無事に作成出来ると、以下のような確認画面になります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;この画面の指示にしたがってCloudflareのDNS設定画面でCNAMEとTXTレコードを設定してあげる必要があります。&lt;/p&gt;
&lt;h4 id=&#34;cnameレコード設定&#34;&gt;CNAMEレコード設定&lt;/h4&gt;
&lt;p&gt;まずはCNAMEレコードです。 以下のように設定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: CNAME&lt;/li&gt;
&lt;li&gt;Name: 利用したいカスタムドメイン名&lt;/li&gt;
&lt;li&gt;Value: &amp;lt;ユーザー名&amp;gt;.gitlab.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;にしたい場合は&lt;strong&gt;Name&lt;/strong&gt;を&lt;code&gt;hogehoge&lt;/code&gt;にし、元々のGitLabリポジトリが&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;などであれば,&lt;strong&gt;Value&lt;/strong&gt;を&lt;code&gt;n0bisuke.gitlab.io&lt;/code&gt;にします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これで&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;にアクセスした際に&lt;code&gt;https://n0bisuke.gitlab.io&lt;/code&gt;側にリダイレクトされるようになります。&lt;/p&gt;
&lt;h4 id=&#34;txtレコード設定-所有者確認&#34;&gt;TXTレコード設定（所有者確認）&lt;/h4&gt;
&lt;p&gt;GitLab側から見ると&lt;code&gt;hogehoge.dotstud.io&lt;/code&gt;をそのユーザーが所有しているか分からないため、所有権の確認作業が発生します。&lt;/p&gt;
&lt;p&gt;GitLabの設定画面に&lt;code&gt;Verification status&lt;/code&gt;の箇所に&lt;code&gt;_gitlab-pages-verification-code.hogehoge.dotstud.io TXT gitlab-pages-verification-code=xxxxxxxxxxxxxxxxxx&lt;/code&gt;などの文字列が表示されていることが分かります。この情報をCloudflareに登録してあげればOKです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;登録が出来たら、おそらく赤くなっているUnverifiedのボタンを押して確認しましょう。
上手くいくとこんな感じで&lt;code&gt;Successfully verified&lt;/code&gt;などの文字が表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-sslの設定&#34;&gt;4. SSLの設定&lt;/h3&gt;
&lt;p&gt;CloudflareのCrypto画面からSSLの設定が出来ます。&lt;code&gt;Full&lt;/code&gt;もしくは&lt;code&gt;Full(strict)&lt;/code&gt;にしておきましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;あとは、ドメインが浸透したりするのを少し待ちましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;にアクセすると&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;に内部的にリダイレクトされるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;5-vuepressの設定を戻す&#34;&gt;5. VuePressの設定を戻す&lt;/h3&gt;
&lt;p&gt;先ほどの紹介で、VuePressをGitLab Pagesで公開する際に&lt;code&gt;docs/.vuepress/config.js&lt;/code&gt;の&lt;code&gt;base&lt;/code&gt;キーを&lt;code&gt;/リポジトリ名/&lt;/code&gt;とする紹介がありましたが、カスタムドメインまでやった人は&lt;code&gt;base&lt;/code&gt;キーを&lt;code&gt;/&lt;/code&gt;に戻しておいてください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ここの設定を間違えるとCSSやJSが上手く読み込まれなくなってしまいます。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;如何でしょう。GitLab Pagesや周辺ツール/サービスを活用して無料でカスタムドメイン+SSLのVuePressブログを作ることが出来ました。&lt;/p&gt;
&lt;p&gt;この辺のことを試す際の参考になれば幸いです。&lt;/p&gt;</description></item><item><title>Let&#39;s 顔面製造！第二弾！ 歌うサンタ顔面ロボットを作ろう</title><link>https://dotstud.io/blog/face-robot-making-basic2/</link><pubDate>Wed, 30 Jan 2019 04:43:15 +0900</pubDate><guid>https://dotstud.io/blog/face-robot-making-basic2/</guid><description>
&lt;p&gt;みなさん、こんにちは！&lt;a href=&#34;https://dotstud.io/members/maruko&#34;&gt;へっぽこまるこ&lt;/a&gt;です！&lt;/p&gt;
&lt;p&gt;今回は、クリスマスをいい感じに盛り上げてくれるサンタ（っぽい）ロボットを
&lt;strong&gt;obnizとgoogle home mini&lt;/strong&gt;でつくってみました！&lt;/p&gt;
&lt;p&gt;少し遅めの（めっちゃ早めの）サンタクロースをご覧あれ〜！&lt;/p&gt;
&lt;p&gt;以前に「&lt;a href=&#34;https://dotstud.io/blog/face-robot-making-basic/&#34;&gt;Let&amp;rsquo;s 顔面製造！ダンボールとサーボモータで喋る顔面ロボットを作ろう&lt;/a&gt;」でつくった顔面ロボット（的なもの）を改造して作ってみます！&lt;/p&gt;
&lt;h2 id=&#34;完成イメージ&#34;&gt;完成イメージ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=zyrQC8Du9b0&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/zyrQC8Du9b0/0.jpg&#34; alt=&#34;画像が表示できません&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;※LEDが結構強めに光っているので閲覧にはご注意ください&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;obnizでgoogle-home-notifierを使ってgoogle home miniから音源を再生します。
google-home-notifierは、&lt;strong&gt;スキル開発なしでgoogle homeにテキストを読ませたり、MP3などの音源が再生できたりするnode.jsのライブラリ&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;再生された曲に連動して下唇に仕込んだサーボモータを動かして、
歌ってる感じにしてみます。&lt;/p&gt;
&lt;h2 id=&#34;つくってみよう&#34;&gt;つくってみよう&lt;/h2&gt;
&lt;p&gt;###
+ obniz
+ sg90（顔面ロボの流用）
+ LED（顔面ロボの流用）
+ 顔デバイス（顔面ロボの流用）
+ ジャンパワイヤー（顔面ロボの流用）
+ 切ないクリスマスソングの音源
+ 白のファー生地や赤いフェルトなど（デバイス装飾用）&lt;/p&gt;
&lt;p&gt;macOS High Sierraの環境で進めます。&lt;/p&gt;
&lt;h3 id=&#34;サンタデバイス準備&#34;&gt;サンタデバイス準備&lt;/h3&gt;
&lt;p&gt;顔面デバイスをデコります。
毛足10cm程度のファー生地を裂いたものと、
赤いフェルトで適当につくった帽子をくっつけます。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/115325/56e1e21b-16cd-4d5e-0bdf-f8b8afdf4dba.jpeg&#34; alt=&#34;IMG_2790.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;サーボモータとLEDをobnizに接続します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/115325/daae1da4-7ee0-dd52-978e-e64c46026a01.png&#34; alt=&#34;obniz_servo_led.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;ライブラリやら準備&#34;&gt;ライブラリやら準備&lt;/h3&gt;
&lt;p&gt;node.jsがインストールされてる前提で進めます。&lt;/p&gt;
&lt;p&gt;ターミナルで以下のコマンドを叩きます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;//ディレクトリ作成&amp;amp;移動
$ mkdir santa
$ cd santa
//google-home-notifierとobnizのライブラリをインストール
$ npm install google-home-notifier
$ npm install obniz
//メインのプログラムファイルを作成
$ touch face.js
//音源格納用ディレクトリを作成
$ mkdir audio　
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;audioフォルダには音源のkurisumasusong.mp3を格納しておきます。&lt;/p&gt;
&lt;h3 id=&#34;音源準備&#34;&gt;音源準備&lt;/h3&gt;
&lt;p&gt;google-home-notifierを使って簡単に曲を再生するには、
クリスマスソングが入ったMP3をネットにアップして、
URLを取得する必要があります。&lt;/p&gt;
&lt;p&gt;今回は、&lt;a href=&#34;https://qiita.com/n0bisuke/items/0c09ae5da43b551e98b1#%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B&#34;&gt;n0bisuk先生のハンズオン&lt;/a&gt;で教えてもらった
ngork+pythonを使った方法でホスティングします。&lt;/p&gt;
&lt;p&gt;santa ディレクトリ配下で作業します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python -m SimpleHTTPServer 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;別タブで以下を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd santa
$ ngrok http 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行結果です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ngrok by @inconshreveable (Ctrl+C to quit)
Session Status online
Account nougami (Plan: Free)
Version 2.2.8
Region United States (us)
Web Interface http://127.0.0.1:4040
Forwarding http://84019d5b.ngrok.io -&amp;gt; localhost:8080
Forwarding https://84019d5b.ngrok.io -&amp;gt; localhost:8080
Connections ttl opn rt1 rt5 p50 p90
57 0 0.00 0.00 6.51 8.91
HTTP Requests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://84019d5b.ngrok.io/audio/kurisumasusong.mp3&#34;&gt;https://84019d5b.ngrok.io/audio/kurisumasusong.mp3&lt;/a&gt; が音源ファイルのURLになります。&lt;/p&gt;
&lt;h2 id=&#34;へっぽこプログラム&#34;&gt;へっぽこプログラム&lt;/h2&gt;
&lt;p&gt;node.jsでプログラムを書きます。
（async/awaitはまだ勉強中・・・）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript:face.js&#34;&gt;
const googlehome = require(&#39;google-home-notifier&#39;);
const language = &#39;ja&#39;;
const Obniz = require(&amp;quot;obniz&amp;quot;);
const obniz = new Obniz(&amp;quot;××××-××××&amp;quot;);
obniz.onconnect = async function () {
var mouth = obniz.wired(&amp;quot;ServoMotor&amp;quot;, {signal:0, vcc:1, gnd:2});
var leftLed = obniz.wired(&amp;quot;LED&amp;quot;, { anode:3, cathode:4 });
var rigthLed = obniz.wired(&amp;quot;LED&amp;quot;, { anode:5, cathode:6 });
mouthMove = async function (maxDeg, maxDegWait, minDeg, minDegWait) {
await mouth.angle(maxDeg);
await obniz.wait(maxDegWait);
await mouth.angle(minDeg);
await obniz.wait(minDegWait);
}
singMouth = async function () {
//init
await mouthMove(0.0, 1300, 0.0, 0);
//く
await mouthMove(40.0, 400, 0.0, 100);
//り
await mouthMove(40.0, 400, 0.0, 100);
//す
await mouthMove(40.0, 400, 0.0, 100);
//ま
await mouthMove(30.0, 80, 0.0, 100);
//す
await mouthMove(30.0, 80, 0.0, 100);
//きゃ
await mouthMove(50.0, 100, 0.0, 100);
//ろ
await mouthMove(30.0, 100, 0.0, 100);
//る
await mouthMove(30.0, 120, 0.0, 100);
//が
await mouthMove(40.0, 900, 0.0, 500);
//な
await mouthMove(40.0, 400, 0.0, 100);
//が
await mouthMove(40.0, 400, 0.0, 100);
//れ
await mouthMove(40.0, 400, 0.0, 100);
//る
await mouthMove(40.0, 400, 0.0, 100);
//こ
await mouthMove(40.0, 100, 0.0, 100);
//ろ
await mouthMove(40.0, 100, 0.0, 100);
//に
await mouthMove(40.0, 100, 0.0, 100);
//は
await mouthMove(50.0, 1300, 0.0, 500);
//き
await mouthMove(40.0, 100, 0.0, 100);
//い
await mouthMove(40.0, 100, 0.0, 100);
//と
await mouthMove(40.0, 200, 0.0, 100);
//ぼ
await mouthMove(40.0, 100, 0.0, 100);
//く
await mouthMove(40.0, 100, 0.0, 100);
//の
await mouthMove(40.0, 100, 0.0, 100);
//こ
await mouthMove(40.0, 170, 0.0, 100);
//た
await mouthMove(40.0, 170, 0.0, 100);
//え
await mouthMove(40.0, 170, 0.0, 100);
//も
await mouthMove(30.0, 1000, 0.0, 500);
//き
await mouthMove(40.0, 100, 0.0, 100);
//い
await mouthMove(40.0, 100, 0.0, 100);
//と
await mouthMove(40.0, 500, 0.0, 100);
//で
await mouthMove(40.0, 100, 0.0, 100);
//て
await mouthMove(40.0, 100, 0.0, 100);
//い
await mouthMove(40.0, 100, 0.0, 100);
//る
await mouthMove(40.0, 100, 0.0, 100);
//だ
await mouthMove(40.0, 100, 0.0, 100);
//あ
await mouthMove(40.0, 100, 0.0, 100);
//ろ
await mouthMove(40.0, 800, 5.0, 600);
//く
await mouthMove(40.0, 400, 0.0, 100);
//り
await mouthMove(40.0, 400, 0.0, 100);
//す
await mouthMove(40.0, 400, 0.0, 100);
//ま
await mouthMove(30.0, 80, 0.0, 100);
//す
await mouthMove(30.0, 80, 0.0, 100);
//きゃ
await mouthMove(50.0, 100, 0.0, 100);
//ろ
await mouthMove(30.0, 100, 0.0, 100);
//る
await mouthMove(30.0, 120, 0.0, 100);
//が
await mouthMove(40.0, 900, 0.0, 500);
//な
await mouthMove(40.0, 400, 0.0, 100);
//が
await mouthMove(40.0, 400, 0.0, 100);
//れ
await mouthMove(40.0, 400, 0.0, 100);
//る
await mouthMove(40.0, 400, 0.0, 100);
//こ
await mouthMove(40.0, 100, 0.0, 100);
//ろ
await mouthMove(40.0, 100, 0.0, 100);
//に
await mouthMove(40.0, 100, 0.0, 100);
//は
await mouthMove(50.0, 1300, 0.0, 500);
//だ
await mouthMove(40.0, 100, 0.0, 100);
//れ
await mouthMove(40.0, 100, 0.0, 100);
//を
await mouthMove(40.0, 400, 0.0, 100);
//あ
await mouthMove(40.0, 100, 0.0, 100);
//い
await mouthMove(30.0, 100, 0.0, 100);
//し
await mouthMove(30.0, 100, 0.0, 100);
//て
await mouthMove(30.0, 100, 0.0, 100);
//る
await mouthMove(30.0, 100, 0.0, 100);
//の
await mouthMove(40.0, 100, 0.0, 100);
//か
await mouthMove(30.0, 1000, 0.0, 500);
//い
await mouthMove(40.0, 100, 0.0, 100);
//ま
await mouthMove(40.0, 100, 0.0, 100);
//は
await mouthMove(40.0, 500, 0.0, 100);
//み
await mouthMove(40.0, 100, 0.0, 100);
//え
await mouthMove(40.0, 100, 0.0, 100);
//な
await mouthMove(20.0, 100, 0.0, 100);
//く
await mouthMove(20.0, 100, 0.0, 100);
//て
await mouthMove(40.0, 100, 0.0, 100);
//も
await mouthMove(40.0, 100, 0.0, 100);
//お
await mouthMove(50.0, 5000, 50.0, 0);
for (i=49; i&amp;gt;=0; i--){
await mouth.angle(i);
await obniz.wait(80);
}
}
google_home = async function() {
googlehome.device(&#39;Google-Home&#39;, language);
await googlehome.play(&#39;http://×××××.ngrok.io/audio/kurisumasusong.mp3&#39;, function(res) {
console.log(res);
leftLed.on();
rigthLed.on();
singMouth();
});
}
await google_home();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for (i=49; i&amp;gt;=0; i&amp;ndash;){
　await mouth.angle(i);
　await obniz.wait(80);
}
↑はこだわった部分なので、
注目してみてもらえると嬉しいです。&lt;/p&gt;
&lt;h2 id=&#34;実行&#34;&gt;実行&lt;/h2&gt;
&lt;p&gt;サンタデバイスにgoogle home miniをそっと添えて、
以下のコマンドで実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node face.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サンタが歌ってる感じになります。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;哀愁漂うサンタクロースができたのではないでしょうか。&lt;/p&gt;
&lt;p&gt;私にとって、スマートスピーカーは電子部品的存在なので、
今後も色々な作品に仕込んで、へっぽこなモノづくりに一役買ってもらおうと思っています。&lt;/p&gt;
&lt;p&gt;よかったら是非「スマスピ + デバイス」挑戦してみてください！&lt;/p&gt;</description></item><item><title>電池が切れても消えないディスプレイって？電子ペーパーを使ってみた！</title><link>https://dotstud.io/blog/using-e-paper-module/</link><pubDate>Tue, 29 Jan 2019 02:11:45 +0900</pubDate><guid>https://dotstud.io/blog/using-e-paper-module/</guid><description>
&lt;p&gt;こんにちは、わくわくエンジニアの&lt;a href=&#34;https://dotstud.io/members/tomato/&#34;&gt;佐々木さん&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;みなさんは&lt;strong&gt;電子ペーパー&lt;/strong&gt;を知っていますか？&lt;/p&gt;
&lt;p&gt;電子ペーパーはその名の通り、&lt;u&gt;紙のような見た目のディスプレイ&lt;/u&gt;です。低消費電力であることや、最後に表示したものを電源がなくても保持し続けることが特徴として挙げられます。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;身近なものだとAmazonの&lt;a href=&#34;https://www.amazon.co.jp/Kindle-New%E3%83%A2%E3%83%87%E3%83%AB-%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC-Wi-Fi-%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF-%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%9A%E3%83%BC%E3%83%B3%E6%83%85%E5%A0%B1%E3%81%A4%E3%81%8D%E3%83%A2%E3%83%87%E3%83%AB/dp/B0186FESEE/ref=sr_1_1?ie=UTF8&amp;amp;qid=1547970527&amp;amp;sr=8-1&amp;amp;keywords=kindle&#34;&gt;Kindle&lt;/a&gt;で採用されています。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;それでは実際に本題に入っていきましょう！&lt;/p&gt;
&lt;h2 id=&#34;電子ペーパーの仕組み&#34;&gt;電子ペーパーの仕組み&lt;/h2&gt;
&lt;p&gt;今回使用するのは&lt;a href=&#34;https://www.sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-58WG&#34;&gt;2.9inch e-Paper Module&lt;/a&gt;という電子ペーパー。&lt;/p&gt;
&lt;p&gt;電子ペーパーは複数の表示方式がありますが、2.9inch e-Paper Moduleは&lt;strong&gt;電気泳動方式&lt;/strong&gt;というものが採用されているためこちらの説明をしたいと思います。&lt;/p&gt;
&lt;p&gt;電気泳動方式では、ディスプレイの中に&lt;strong&gt;マイクロカプセル&lt;/strong&gt;という&lt;u&gt;色を表現するための透明なカプセル&lt;/u&gt;が隙間なく並んでいます。そのマイクロカプセルの中には色のついた粒子が入っており、かける電圧で粒子を移動させることによって、見える色を変えています。電源がなくなっても粒子は移動しないので、最後に表示したものを保持し続けることができます。&lt;/p&gt;
&lt;p&gt;従来は白黒のディスプレイが主流でしたが、現在では3色のディスプレイも多くなっています。&lt;/p&gt;
&lt;h2 id=&#34;使ったもの&#34;&gt;使ったもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-58WG&#34;&gt;2.9inch e-Paper Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/abfea5c3-70e3-6e80-b108-841ff52824d0.jpeg&#34; alt=&#34;20180810_165537.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;このディスプレイは白黒黄の3色を表現できるディスプレイになっています。この他にも、白黒や白黒赤などを表示することができるディスプレイもあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.switch-science.com/catalog/3646/&#34;&gt;Raspberry Pi Zero WH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/62d5a886-b22e-f1bd-e436-cea221c7c1d8.jpeg&#34; alt=&#34;20190120_192847.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;このRaspberry Pi Zero WHはIoTで使われるボードの１つです。&lt;/p&gt;
&lt;h2 id=&#34;ディスプレイに表示させてみよう&#34;&gt;ディスプレイに表示させてみよう&lt;/h2&gt;
&lt;p&gt;今回は&lt;a href=&#34;https://www.waveshare.com/w/upload/9/98/2.9inch-e-paper-module-user-manual-en.pdf&#34;&gt;2.9inch e-Paper Module User Manual&lt;/a&gt;を参考にして進めていきます。&lt;/p&gt;
&lt;h3 id=&#34;配線&#34;&gt;配線&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;GPIO&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2.9inch e-Paper Module&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3.3V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.3V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MOSI&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SCLK&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CLK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CE0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BUSY&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;環境構築&#34;&gt;環境構築&lt;/h3&gt;
&lt;p&gt;以下のコマンドが今回プログラムを実行するのに必要なものをインストールするコマンドになります。&lt;/p&gt;
&lt;p&gt;ターミナルを開いて実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pip
sudo pip install spidev
sudo apt-get install libjpeg-dev
sudo pip install Image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;strong&gt;&lt;code&gt;/boot/config.txt&lt;/code&gt;&lt;/strong&gt;を編集します。以下のコマンドを実行してください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sudo nano /boot/config.txt&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;すると、nanoエディタが開くので、以下の手順を行なってください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;番下に&lt;strong&gt;&lt;code&gt;dtparam=spi=on&lt;/code&gt;&lt;/strong&gt;を追加&lt;/li&gt;
&lt;li&gt;キーボードの &lt;strong&gt;&lt;code&gt;controlキー&lt;/code&gt;&lt;/strong&gt; と &lt;strong&gt;&lt;code&gt;xキー&lt;/code&gt;&lt;/strong&gt; を同時に押す&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;yキー&lt;/code&gt;&lt;/strong&gt;を押す&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;enterキー&lt;/code&gt;&lt;/strong&gt;を押す&lt;/li&gt;
&lt;li&gt;全て完了したら&lt;strong&gt;&lt;code&gt;reboot&lt;/code&gt;&lt;/strong&gt;コマンドで再起動&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで環境構築は完了です。&lt;/p&gt;
&lt;h3 id=&#34;プログラム&#34;&gt;プログラム&lt;/h3&gt;
&lt;p&gt;デモプログラムが公開されているため、&lt;a href=&#34;https://www.waveshare.com/wiki/File:2.9inch_e-paper_module_b_code.7z&#34;&gt;こちら&lt;/a&gt;からcurrentと書かれているものをダウンロードしてください。&lt;/p&gt;
&lt;p&gt;ダウンロードが完了したら以下のコマンドを実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install p7zip-full
7z x 2.9inch_e-paper_module_b_code.7z
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコマンドで出てきた中の&lt;strong&gt;&lt;code&gt;RaspberryPi/python2&lt;/code&gt;&lt;/strong&gt;を今回は使います。&lt;/p&gt;
&lt;p&gt;ターミナルで&lt;strong&gt;&lt;code&gt;RaspberryPi/python2&lt;/code&gt;&lt;/strong&gt;ディレクトリに移動して&lt;code&gt;python main.py&lt;/code&gt;**を実行すると、デモプログラムが起動します（※何も編集していない状態だとフォントが存在していないためエラーが発生します）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nano main.py&lt;/code&gt;&lt;/strong&gt;でファイルを少し編集します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main.py&lt;/code&gt;には以下のようなプログラムがあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;font24 = ImageFont.truetype(&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;, 24)
font18 = ImageFont.truetype(&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この&lt;strong&gt;&lt;code&gt;&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;&lt;/code&gt;&lt;/strong&gt;という部分を
&lt;strong&gt;&lt;code&gt;&#39;/opt/vc/src/hello_pi/hello_font/Vera.ttf&#39;&lt;/code&gt;&lt;/strong&gt;に変更します。&lt;/p&gt;
&lt;p&gt;もう一度&lt;code&gt;python main.py&lt;/code&gt;を実行すると、画面がピカピカし始め、Hello, worldなどが画像に表示されます。&lt;/p&gt;
&lt;p&gt;では、実際にプログラムを少し変えて見ていきましょう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding:utf-8 -*-
import epd2in9b
import time
from PIL import Image,ImageDraw,ImageFont
import traceback
try:
# ディスプレイの初期化処理をしています。
epd = epd2in9b.EPD()
epd.init()
print &amp;quot;clear&amp;quot;
epd.Clear(0xFF)
# ディスプレイを横に使うように設定しています。
HBlackimage = Image.new(&#39;1&#39;, (epd2in9b.EPD_HEIGHT, epd2in9b.EPD_WIDTH), 255) # 298*126
HRedimage = Image.new(&#39;1&#39;, (epd2in9b.EPD_HEIGHT, epd2in9b.EPD_WIDTH), 255) # 298*126
print &amp;quot;Drawing&amp;quot;
drawblack = ImageDraw.Draw(HBlackimage)
drawred = ImageDraw.Draw(HRedimage)
# １つ目の引数でフォント、2つ目の引数でフォントのサイズを指定しています。
font30 = ImageFont.truetype(&#39;/opt/vc/src/hello_pi/hello_font/Vera.ttf&#39;, 30)
# １つ目の引数で座標、２つ目に表示させたい文字列、３つ目には上記のフォントを指定します。
drawblack.text((10, 0), &#39;Hello, World&#39;, font = font30)
# ディスプレイに表示させます。
epd.display(epd.getbuffer(HBlackimage), epd.getbuffer(HRedimage))
time.sleep(2)
print &amp;quot;read bmp file&amp;quot;
HBlackimage = Image.open(&#39;2in9b-b.bmp&#39;)
epd.display(epd.getbuffer(HBlackimage), epd.getbuffer(HRedimage))
time.sleep(2)
except Exception, e:
print &#39;traceback.format_exc():\n%s&#39; % traceback.format_exc()
exit()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプログラムを実行すると以下のようになります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/45152d05-0b37-6d40-a992-2dc034553d67.gif&#34; alt=&#34;20190121_002653.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/c4b5f8b7-40c1-5145-5ba6-11c9b7a6f69a.gif&#34; alt=&#34;20190121_002722.gif&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;いかがでしたでしょうか？&lt;/p&gt;
&lt;p&gt;電子ペーパーは、低消費電力という特徴があるので、センサからとれるデータを一定時間ごとに表示したり、自分の好きなものを表示して持ち運んだりすることもできます。&lt;/p&gt;
&lt;p&gt;電子部品の販売店に売っていたりしますが、電子ペーパーの使い方はあまり広がっていないように感じるので、この記事を参考にぜひやってみてください！&lt;/p&gt;</description></item><item><title>ArduinoでTwitter連携！愛しのぬいぐるみトンピーちゃんに命を吹き込んでみた</title><link>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</link><pubDate>Mon, 28 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</guid><description>
&lt;p&gt;皆さん、大好きなぬいぐるみが動き出したらいいなと思ったこと、ありませんか？&lt;/p&gt;
&lt;p&gt;今回は私の愛すべきお友達「トンピーちゃん」に命を吹き込むべく、プログラミング初心者の私がArduinoとTwitterの連携に挑戦してみました！&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;こちらです！！&lt;/font&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/721a8190-3ffc-8bca-c4b3-774ee58d45e9.gif&#34; alt=&#34;ezgif.com-video-to-gif.gif&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;今回やること&#34;&gt;今回やること&lt;/h2&gt;
&lt;h3 id=&#34;実装の構成&#34;&gt;実装の構成&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ざっくりの構成です。Node.jsでTwitterの「#tonpy」というハッシュタグを監視し、「move #tonpy」「stop #tonpy」というツイートがあったらArduinoを経由してトンピーちゃんが動いたり止まったりします。&lt;/p&gt;
&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;
&lt;h4 id=&#34;こぐまのトンピーちゃん&#34;&gt;■こぐまのトンピーちゃん&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/210df088-f5f0-6f8a-e9ee-2a63f06e2364.jpeg&#34; alt=&#34;トンピー.jpg&#34; /&gt;
愛用のトンピーちゃんです。乾電池を入れるとピーヒャラドンドンします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入: &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%A4%E3%83%AF%E3%83%A4-%E3%81%93%E3%81%90%E3%81%BE%E3%81%AE%E3%83%88%E3%83%B3%E3%83%94%E3%83%BC/dp/B0002U3OBA&#34;&gt;Amazon.co.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-uno&#34;&gt;■Arduino Uno&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/c26d230d-e320-b73d-f15f-32d813e1294f.jpeg&#34; alt=&#34;Arduino Uno.jpg&#34; /&gt;
Arduino Unoは2010年に発売されたArduinoで、&lt;a href=&#34;https://store.arduino.cc/usa/arduino-uno-rev3&#34;&gt;Arduinoの公式サイト&lt;/a&gt;にも「&lt;strong&gt;電子工作初心者に最適&lt;/strong&gt;」と書いてあったのでこちらに決めました。&lt;/p&gt;
&lt;p&gt;購入にあたっては「Arduino 初心者」と調べヒットした「&lt;a href=&#34;https://www.amazon.co.jp/%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-SSCI-GettingStartedArduinoKit-Arduino%E3%82%92%E3%81%AF%E3%81%98%E3%82%81%E3%82%88%E3%81%86%E3%82%AD%E3%83%83%E3%83%88/dp/B0025Y6C5G/ref=sr_1_fkmr1_2?ie=UTF8&amp;amp;qid=1544321570&amp;amp;sr=8-2-fkmr1&amp;amp;keywords=arduino+%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%AD%E3%83%83%E3%83%88&#34;&gt;Arduinoをはじめようキット&lt;/a&gt;」を購入しました。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/d7099cb0-97aa-8ff1-4e3d-b959e8139fb4.jpeg&#34;&gt;
─ Arduinoをはじめようキット
&lt;/center&gt;
Arduino Unoの他にブレッドボードや抵抗など電子工作を始めるにあたり必要なもの一式が揃っているため、すぐに始める事ができます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;fet-fet-mosfet-2sjs527l-e-60v5a&#34;&gt;■FET（FET MOSFET 2SJS527L-E 60V5A）&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/88510174-eed9-e286-5343-3deeb08a7884.jpeg&#34; alt=&#34;I-08315.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;FETはロードスイッチとも呼ばれ、簡単にいうと外部からの電圧によって電流の流れを制御できるスイッチのようなもののようです。小さな電力で動作させる事ができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/#回路を作成&#34;&gt;回路を作成&lt;/a&gt;で説明しますが、FETには「Pチャネル」と「Nチャネル」の2種類あります。今回はNチャネルのFETを利用します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入: &lt;a href=&#34;http://akizukidenshi.com/catalog/g/gI-07145/&#34;&gt;秋月電子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;node-jsをインストールしたpc&#34;&gt;■Node.jsをインストールしたPC&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/efcdf34b-504e-cc68-125a-0acadd815510.jpeg&#34; alt=&#34;IMG_9204.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;今回はNode.jsでプログラムを動かします。下記記事を参考にインストールしてみてください！&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;136&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/nodejs-install-use-nodebrew/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/136/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
Node.jsを始めよう！nodebrewを使って5分で環境構築
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2017-12-15
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
nodebrewを使ったNode.jsのインストール方法をまとめました。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;筆者PC: mac OS HighSierra バージョン10.13.6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Node.js: v10.10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;その他&#34;&gt;■その他&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/eb369434-a5ff-e44a-c7b9-02a065030098.jpeg&#34; alt=&#34;IMG_9206.jpg&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/docs/breadboard/&#34;&gt;ブレッドボード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/jumperwire/#%E3%83%9F%E3%83%8E%E3%83%A0%E3%82%B7%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97-%E3%83%AF%E3%83%8B%E5%8F%A3&#34;&gt;ワニ口クリップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;抵抗（今回は220Ω）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;トンピーちゃんを解体&#34;&gt;トンピーちゃんを解体&lt;/h2&gt;
&lt;p&gt;まずはトンピーちゃんの導線を確認するため、少し解体します。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/69ccd688-afb6-0715-124a-44d886fe3178.jpeg&#34; alt=&#34;IMG_6786.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/84c4fcd7-8c65-a0dc-1a84-ee75b5c2ef48.jpeg&#34; alt=&#34;IMG_9205.jpg&#34; /&gt;
電池の部分を取り外してみました。すると、導線は電池部分と本体でパックリ分かれている事が確認できました。今回はその部分にArduino Unoを繋げば回路の開/閉が制御できそうですね。&lt;/p&gt;
&lt;h2 id=&#34;arduino-unoとトンピーちゃんを連携&#34;&gt;Arduino Unoとトンピーちゃんを連携&lt;/h2&gt;
&lt;h3 id=&#34;回路を作成&#34;&gt;回路を作成&lt;/h3&gt;
&lt;p&gt;Arduino Unoから直接ON/OFFを制御しようとすると、電流が少なく回路を開/閉できませんでした。そこでArduino Unoとトンピーちゃんの間に&lt;strong&gt;FETを挿入&lt;/strong&gt;します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/230/fet.png&#34; alt=&#34;fet&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;FETは、電圧の加え方の違いによって「Pチャネル」と「Nチャネル」の2種類に分かれます。今回はNチャネルのFETを利用します。&lt;/p&gt;
&lt;p&gt;また、回路の「+側」にFETを繋ぐことを「ハイサイド（スイッチ）」、-側に繋ぐことを「ローサイド（スイッチ）」と呼称します。今回はNチャネルなので、ローサイドにFETを繋ぎます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d32c3f6f4b1de908ceced242cc2ba7f4.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最終的に上記のような回路図になりました。&lt;/p&gt;
&lt;h3 id=&#34;arduino-unoにプログラムを書き込む&#34;&gt;Arduino Unoにプログラムを書き込む&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/b544f541-a5ac-ee97-18a3-de3963210c92.png&#34; alt=&#34;スクリーンショット 2018-12-18 12.35.58.png&#34; /&gt;
ArduinoをUSBケーブルでPCに繋ぎ、アプリケーションでArduino IDEを開きます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/da16043a-121e-52e2-e395-3121a8a3e48f.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.10.09.png&#34; /&gt;
ファイル→新規ファイルを選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/2a42d894-497d-a0c4-5573-6a4c148fc5fe.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.09.45.png&#34; /&gt;
ツール→ボード→繋いだArduino（今回はArduino Uno）を選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/9f5d63e2-454b-c637-ef5d-07550cccf8d5.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.11.33.png&#34; /&gt;
ツール→シリアルポート→接続したArduinoを選択します。&lt;/p&gt;
&lt;p&gt;下記コードを新規ファイルにコピー&amp;amp;ペーストします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// pins
const int tonpyPin = 2;
void setup() {
// initialize serial:
Serial.begin(9600);
// make the pins outputs:
pinMode(tonpyPin, OUTPUT);
}
void loop() {
// if there&#39;s any serial available, read it:
while (Serial.available() &amp;gt; 0) {
char value = Serial.read();
if (value == &#39;p&#39;) {
digitalWrite(tonpyPin, HIGH);
} else if (value == &#39;q&#39;){
digitalWrite(tonpyPin, LOW);
} else{
digitalWrite(tonpyPin, LOW);
}
Serial.println(value);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/8ec32eee-c610-137c-febd-9408f22db6e1.png&#34; alt=&#34;スクリーンショット 2018-12-10 9.25.26.png&#34; /&gt;
左上にある「→」ボタンを押してマイコンボードに書き込みます。&lt;/p&gt;
&lt;p&gt;これでArduino Unoからの信号（p: スイッチON、q: スイッチOFF）でトンピーちゃんが動く/止まるようになりました。&lt;/p&gt;
&lt;p&gt;これをツイートと連動できれば完成です！&lt;/p&gt;
&lt;h2 id=&#34;node-jsのプログラム&#34;&gt;Node.jsのプログラム&lt;/h2&gt;
&lt;p&gt;ハッシュタグ「#tonpy」を取得し、さらに「move」「stop」のツイートがあったらArduino Unoに送るプログラムを作成します。&lt;/p&gt;
&lt;h3 id=&#34;twitter-apiの準備&#34;&gt;Twitter APIの準備&lt;/h3&gt;
&lt;p&gt;API使用には&lt;a href=&#34;https://developer.twitter.com/&#34;&gt;Twitter Developer&lt;/a&gt;へ登録する必要があります。登録の際、用途など英文で書く部分がありました（筆者はGoogle翻訳を駆使しました）。&lt;/p&gt;
&lt;p&gt;手順については下記の記事に詳しく書かれており、そちらに沿って登録しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/kngsym2018/items/2524d21455aac111cdee&#34;&gt;Twitter API 登録 (アカウント申請方法) から承認されるまでの手順まとめ　※2018年9月時点の情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tweetを取得するnode-jsのプログラムを作成&#34;&gt;Tweetを取得するNode.jsのプログラムを作成&lt;/h3&gt;
&lt;h4 id=&#34;ディレクトリを用意&#34;&gt;■ディレクトリを用意&lt;/h4&gt;
&lt;p&gt;任意の保存場所にフォルダを用意します。今回はDesktopにTonpyフォルダを作りました。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;jsファイルを作成&#34;&gt;■JSファイルを作成&lt;/h4&gt;
&lt;p&gt;作成したフォルダに任意の名前のJSファイルを用意します。今回は「app.js」としました。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;twitter-apiを使用するモジュールのインストール&#34;&gt;■Twitter APIを使用するモジュールのインストール&lt;/h4&gt;
&lt;p&gt;Node.jsでTwitter APIが使用できるよう&lt;a href=&#34;https://www.npmjs.com/package/twitter&#34;&gt;Twitterモジュール&lt;/a&gt;をnpmでインストールします。ターミナルで作成したフォルダを開き、下記コマンドを叩きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install twitter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでNode.jsでTwitter APIが使用できるようになりました。&lt;/p&gt;
&lt;p&gt;実際に使用する際はJSファイル内で最初に下記のように書くとTwitter APIが呼び出されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Twitter = require(&#39;twitter&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ツイートを取得するプログラムを作成&#34;&gt;■ツイートを取得するプログラムを作成&lt;/h4&gt;
&lt;p&gt;TwitterAPIには「REST API」と「Streaming API」の2種類があります。&lt;/p&gt;
&lt;p&gt;REST APIはエンドポイントへリクエストして初めて結果が得られるものに対して、Streaming APIはレートのリミットなくツイートを受信し続ける事ができます。&lt;/p&gt;
&lt;p&gt;今回はツイートを常に監視し該当のツイートがあったら結果を取得する、という事がしたいので&lt;strong&gt;Streaming API&lt;/strong&gt;を使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const twitter = require(&amp;quot;twitter&amp;quot;);
const fs = require(&amp;quot;fs&amp;quot;);
const client = new twitter({
consumer_key: &#39;&#39;,//Dev Accountで取得したkeyを書く
consumer_secret: &#39;&#39;,
access_token_key: &#39;&#39;,
access_token_secret: &#39;&#39;,
});
let tweetText =&#39;w&#39;;
client.stream(&#39;statuses/filter&#39;, {track:&amp;quot;#tonpy &amp;quot;}, (stream) =&amp;gt; {//Streaming APIを呼び出す
stream.on(&#39;data&#39;, (tweet) =&amp;gt; {
tweetText = tweet.text;
(~tweetText.indexOf(&#39;move&#39;)) ? (tweetText = &#39;p&#39;) : (~tweetText.indexOf(&#39;stop&#39;)) ? (tweetText = &#39;q&#39;) : (tweetText = &#39;w&#39;);
});
stream.on(&#39;error&#39;, (error) =&amp;gt; {//エラー
console.error(`Error: ${error.message}`);
stream.destroy();
});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ツイートを取得するNode.jsのプログラムが完成しました。&lt;/p&gt;
&lt;h3 id=&#34;arduinoに送るプログラムを作成&#34;&gt;Arduinoに送るプログラムを作成&lt;/h3&gt;
&lt;h4 id=&#34;シリアル通信をするモジュールのインストール&#34;&gt;■シリアル通信をするモジュールのインストール&lt;/h4&gt;
&lt;p&gt;PCとArduino間でシリアル通信をするために、シリアルポートでシリアル通信を行うモジュールもnpmでインストールします。&lt;/p&gt;
&lt;p&gt;シリアルポートとは&lt;strong&gt;シリアル通信を行う時の接続口&lt;/strong&gt;のことで、今回はArduinoと接続したPCのUSBポートにあたります。&lt;/p&gt;
&lt;p&gt;ターミナルで下記コマンドを叩きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install serialport
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでNode.jsでシリアルポートを制御できるようになりました。&lt;/p&gt;
&lt;p&gt;使用する際はJSファイル内で最初に下記のように呼び出します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Serialport = require(&#39;serialport&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;シリアルポートの名前を調べる&#34;&gt;■シリアルポートの名前を調べる&lt;/h4&gt;
&lt;p&gt;プログラム内では、USBポートに挿しているArduino Uno（ttyデバイス）を指定します。&lt;/p&gt;
&lt;p&gt;ターミナルで下記コマンドを打ち、PCのシリアルポートに接続されている機器を表示します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l /dev/tty.*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Auduino Unoを挿し、もう一度先ほどのコマンドを打ちます。新しく出てきたttyデバイス名がArduino Unoです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-unoに送るnode-jsのプログラムを作成&#34;&gt;■ Arduino Unoに送るNode.jsのプログラムを作成&lt;/h4&gt;
&lt;p&gt;下記がシリアル通信するためのコードです。ツイートを取得するためのJSファイルの続きに記述してください。&lt;/p&gt;
&lt;p&gt;1行目の&lt;code&gt;/dev/tty.xxx&lt;/code&gt;には上記のシリアルポート名を記入してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const port = new SerialPort(&#39;/dev/tty.xxx&#39;,{
baudRate: 9600//baudRate:9600は1秒に最大9600ビットを送信するという意味
});
port.write(&#39;main screen turn on&#39;, function(err) {
if (err) {
return console.log(&#39;Error on write: &#39;, err.message);
}
console.log(&#39;message written&#39;);
});
port.on(&#39;open&#39;, () =&amp;gt; {
console.log(&#39;Serial open.&#39;);
setInterval(write, 1000);
});
const write = () =&amp;gt; {
console.log(`Input to Arduino: ${tweetText}`);
port.write(tweetText, (error) =&amp;gt; {
if(error) {
console.error(`Error: ${error.message}`);
}
});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでツイート情報を取得し、Arduinoに信号を送る事ができるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;完成コード&#34;&gt;完成コード&lt;/h3&gt;
&lt;p&gt;ツイートを取得するプログラム、Arduinoを制御するプログラムを合わせた完成コードは下記のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//-----------------------------------------------
// twitterからツイートを取得
//-----------------------------------------------
const twitter = require(&amp;quot;twitter&amp;quot;);
const client = new twitter({
consumer_key: &#39;&#39;,//Dev Accountで取得したkeyを書く
consumer_secret: &#39;&#39;,
access_token_key: &#39;&#39;,
access_token_secret: &#39;&#39;,
});
let tweetText =&#39;w&#39;;
client.stream(&#39;statuses/filter&#39;, {track:&amp;quot;#tonpy &amp;quot;}, (stream) =&amp;gt; {
stream.on(&#39;data&#39;, (tweet) =&amp;gt; {
tweetText = tweet.text;
(~tweetText.indexOf(&#39;move&#39;)) ? (tweetText = &#39;p&#39;) : (~tweetText.indexOf(&#39;stop&#39;)) ? (tweetText = &#39;q&#39;) : (tweetText = &#39;w&#39;);
});
stream.on(&#39;error&#39;, (error) =&amp;gt; {
console.error(`Error: ${error.message}`);
stream.destroy();
});
});
//-----------------------------------------------
// Node.jsからArduinoに送信
//----------------------------------------------
const SerialPort = require(&#39;serialport&#39;);
const port = new SerialPort(&#39;/dev/tty.xxx&#39;,{
baudRate: 9600
});
port.on(&#39;open&#39;, () =&amp;gt; {
console.log(&#39;Serial open.&#39;);
setInterval(write, 1000);
});
port.on(&#39;data&#39;, (data) =&amp;gt; {
console.log(`Data from Arduino: ${data}`);
});
const write = () =&amp;gt; {
console.log(`Input to Arduino: ${tweetText}`);
port.write(tweetText, (error) =&amp;gt; {
if(error) {
console.error(`Error: ${error.message}`);
}
});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;node-jsを実行する&#34;&gt;■Node.jsを実行する&lt;/h4&gt;
&lt;p&gt;Node.jsは、ファイルのある場所で下記コマンドで実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;部分は、ご自身が作成したファイル名に置き換えてください。「Serial open」がターミナル上に表示されたら無事実行されています。&lt;/p&gt;
&lt;h2 id=&#34;動かしてみる&#34;&gt;動かしてみる&lt;/h2&gt;
&lt;p&gt;Node.jsを起動しながら、ツイートしてみましょう……。「&lt;strong&gt;#tonpy move&lt;/strong&gt;」!!!!!
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/9c8c2611-d9b2-e7dd-3710-8d2011c2b424.gif&#34; alt=&#34;ezgif.com-video-to-gif.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;う、動いたーーーー！！！（少々タイムラグがありますが……。）&lt;/p&gt;
&lt;p&gt;初めてのIoTとっっても楽しかったです！電子工作やNode.jsの勉強にもなり一石二鳥ですね。&lt;/p&gt;
&lt;p&gt;これから色々作っていきたいです！&lt;/p&gt;
&lt;style&gt;
.caution {
border: 1px solid #BFBFBF;
padding: 1em 2em;
margin: 2em 0;
color: #474747;
background: whitesmoke;/*背景色*/
border-left: double 7px #0B0B61;/*左線*/
font-size: 90%;
}
.caution &gt; p {
font-weight: bold;
margin: 0 0 10px 0;
padding: 0;
}
blockquote {
font-size:80%;
}
.accbox {
margin: 2em 0;
padding: 0;
max-width: 710px;
}
.accbox label {
display: block;
margin: 1.5px 0;
padding : 11px 12px;
color :#ffffff;
font-weight: bold;
background :#2f2f2f;
cursor :pointer;
transition: all 0.5s;
}
.accbox label:hover {
background :#A4A4A4;
}
.accbox input {
display: none;
}
.accbox .accshow {
height: 0;
padding: 0;
overflow: hidden;
opacity: 0;
transition: 0.8s;
}
.cssacc:checked + .accshow {
height: auto;
padding: 5px;
background: #eaeaea;
opacity: 1;
}
&lt;/style&gt;</description></item><item><title>Moddable SDKを使ってJavaScriptでIoT開発してみた</title><link>https://dotstud.io/blog/developed-iot-using-moddable/</link><pubDate>Thu, 24 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/developed-iot-using-moddable/</guid><description>
&lt;p&gt;どうも。&lt;a href=&#34;https://dotstud.io/members/horihiro&#34;&gt;ほりひろ&lt;/a&gt; です。
dotstudioブログでは、初めましてですね。&lt;/p&gt;
&lt;p&gt;JavaScript や IoT が好きな、でも実は半田付けも抵抗値の計算もろくにできないレベルの週末プログラマーです。
普段は某クラウドベンダーのサポートエンジニアをしています。
よろしくお願いします。&lt;/p&gt;
&lt;p&gt;Twitterアカウントは&lt;a href=&#34;https://twitter.com/hori__hiro&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;年末に自分の中で話題になっていた、&lt;u&gt;&lt;strong&gt;Moddable SDK&lt;/strong&gt;&lt;/u&gt;というものをようやく触ってみました。&lt;/p&gt;
&lt;h2 id=&#34;moddable-sdk-xs&#34;&gt;Moddable SDK &amp;amp; XS&lt;/h2&gt;
&lt;h3 id=&#34;moddable-sdk&#34;&gt;Moddable SDK&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Moddable SDK は、&lt;strong&gt;JavaScript コードを ESP32 や ESP8266 といったマイコン上で動作させるためのビルド環境やライブラリー群&lt;/strong&gt;のこと、、、だと思います。&lt;/p&gt;
&lt;p&gt;これは Moddable 社から提供されていますが、&lt;u&gt;下記 GitHub リポジトリで公開されているので、無料で手に入れられます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable&#34;&gt;https://github.com/Moddable-OpenSource/moddable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;xs&#34;&gt;XS&lt;/h3&gt;
&lt;p&gt;XS は、&lt;strong&gt;Moddable SDK で生成される JavaScript ランタイム環境&lt;/strong&gt; （ドキュメントには &lt;strong&gt;virtual machine&lt;/strong&gt; と記載）で、なんと &lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable#modern-software-development-for-microcontrollers&#34;&gt;ES2018 に 99% 以上準拠&lt;/a&gt;しているらしいです。すごいですね！&lt;/p&gt;
&lt;p&gt;※一部準拠していない部分は、注意事項として&lt;strong&gt;&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/XS%20Conformance.md#caveat&#34;&gt;こちら&lt;/a&gt;&lt;/strong&gt;に記載されています。&lt;/p&gt;
&lt;p&gt;これは&lt;a href=&#34;http://www.moddable.com/XS7-TC-39.php&#34;&gt;公式ドキュメント&lt;/a&gt;にある画像です。「XS は一番小さい」って意味でしょうね。シャレてます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ざっくりとした理解ですが、Moddable SDK のビルドツールで、自分が書いた JavaScript や C のソースコードと組み込みのクラスが含まれた XS を、一つのバイナリーにビルドし、マイコンに書き込んでいるようです。&lt;/p&gt;
&lt;p&gt;これまで JavaScript でのマイコン制御というと、以前から ホスト PC とマイコンをシリアル接続し、ホストPC上の Node.js と Johnny-Five を使ってマイコンを制御する方法があり、最近では obniz の制御をネットワークを介して JavaScript などから行う方法がありますが、いずれもマイコンの外に JavaScript の実行環境を用意する必要があります。&lt;/p&gt;
&lt;p&gt;一方で、Moddable SDK では、&lt;u&gt;JavaScript 実行環境である XS がマイコン上で動作することができます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;この点は、&lt;strong&gt;これまでの実行環境とは大きく違うところですね！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;開発環境の構築&#34;&gt;開発環境の構築&lt;/h2&gt;
&lt;p&gt;基本的に、公式のリポジトリに記載された &lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/Moddable%20SDK%20-%20Getting%20Started.md&#34;&gt;構築手順&lt;/a&gt;通りに実施することで、ビルド ツールなどの環境が構築できます。&lt;/p&gt;
&lt;p&gt;構築手順は macOS/Linux/Windows の各プラットフォーム向けにまとまっており、それぞれが、下記の 3 つのパートに分かれて記載されています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mcconfig&lt;/code&gt; や &lt;code&gt;xsbug&lt;/code&gt; などの開発ツールのビルド&lt;/li&gt;
&lt;li&gt;ESP8266 向けの開発環境の構築&lt;/li&gt;
&lt;li&gt;ESP32 向けの開発環境の構築&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;いずれのプラットフォームでも 1. は必須ですが、2. と 3. は手持ちのボードに合わせて、どちらかを実施するだけでよいです。&lt;/p&gt;
&lt;p&gt;私は Windows 用の環境構築をしましたが、Windows 向けの開発環境構築では、&lt;u&gt;&lt;strong&gt;Windows ネイティブのコマンドを使用することをお勧めします。&lt;/strong&gt;&lt;/u&gt;
WSL から &lt;code&gt;git clone&lt;/code&gt; などをすると、&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/issues/110&#34;&gt;&lt;strong&gt;開発ツールがビルドできない&lt;/strong&gt;&lt;/a&gt;ようで、これに丸一日ハマりました。&lt;/p&gt;
&lt;p&gt;あと、ビルドツールの実行は、必ず&lt;code&gt;開発者コマンドプロンプト for VS2017&lt;/code&gt; を起動し、そのコマンドプロンプトの中でしましょう。&lt;/p&gt;
&lt;h2 id=&#34;サンプル-コード&#34;&gt;サンプル コード&lt;/h2&gt;
&lt;p&gt;マイコンのサンプルと言えば Lチカですが、手元に LED がなかったので、とりあえず ESP32 上での非同期実行を試してみます。&lt;/p&gt;
&lt;h3 id=&#34;ファイルの用意&#34;&gt;ファイルの用意&lt;/h3&gt;
&lt;p&gt;プロジェクト ディレクトリに下記のような構造で、ファイルを作ります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── esp
│ ├── console.c
│ └── console.js
├── main.js
└── manifest.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;main-js&#34;&gt;main.js&lt;/h3&gt;
&lt;p&gt;1 秒おきに &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;10&lt;/code&gt; の数字を、1.5 秒おきに &lt;code&gt;a&lt;/code&gt; から &lt;code&gt;z&lt;/code&gt; の文字を、シリアル コンソールに出力するプログラムです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:main.js&#34;&gt;import Timer from &#39;timer&#39;;
import console from &amp;quot;console&amp;quot;;
const a = &#39;a&#39;;
const z = &#39;z&#39;;
let c = a;
let i = 0;
Timer.repeat(() =&amp;gt; {
console.log(`${String(Date.now()).padStart(15)}:${i}`);
i = (i &amp;gt;= 10) ? 0 : i + 1;
}, 1000);
Timer.repeat(() =&amp;gt; {
console.log(`${String(Date.now()).padStart(15)}:${c}`);
c = (c &amp;gt;= z) ? a : String.fromCharCode(c.charCodeAt(0) + 1);
}, 1500);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Web ブラウザーや Node.js なら、定期的な処理を書くなら &lt;code&gt;setInterval&lt;/code&gt; を使うところだと思いますが、Moddable SDK / XS では、グローバルに &lt;code&gt;setInterval&lt;/code&gt; が定義されていません。&lt;/p&gt;
&lt;p&gt;代わりに、&lt;code&gt;Timer&lt;/code&gt; オブジェクトの &lt;code&gt;repeat&lt;/code&gt; メソッドを使って、同じ処理が似たような感じで書くことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:browser&amp;amp;nodejs&#34;&gt;setInterval(() =&amp;gt; {
:
}, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:XS&#34;&gt;import Timer from &#39;timer&#39;;
Timer.repeat(() =&amp;gt; {
:
}, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;console-js-console-c&#34;&gt;console.js /console.c&lt;/h3&gt;
&lt;p&gt;実は XS では &lt;code&gt;console&lt;/code&gt; オブジェクトもないので、とりあえず、下記の JS ファイルと C ファイルで、シリアルコンソールに 1 行出力できるメソッドを定義しておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c:esp/console.js&#34;&gt;class Console @ &amp;quot;xs_console_destructor&amp;quot; {
constructor() {
}
static log() @ &amp;quot;xs_console_log&amp;quot;
}
Object.freeze(Console.prototype);
export default Console;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JS ファイルはタダのラッパーで、処理本体は C ファイルで定義しています。
JS ファイル内で &lt;code&gt;@ ～&lt;/code&gt; と書くと、C ファイルで宣言した関数とバインディングされます。
これは、XS 独自の実装のようです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c:esp/console.c&#34;&gt;#include &amp;quot;xsAll.h&amp;quot;
#include &amp;quot;xs.h&amp;quot;
void xs_console_destructor(void)
{
}
void xs_console_log(xsMachine *the)
{
int argc = xsToInteger(xsArgc), i;
for (i = 0; i &amp;lt; argc; i++) {
char *str = xsToString(xsArg(i));
do {
uint8_t c = c_read8(str);
if (!c) {
ESP_putc(&#39;\n&#39;);
break;
}
ESP_putc(c);
str++;
} while (1);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;manifest-json&#34;&gt;manifest.json&lt;/h3&gt;
&lt;p&gt;最後は manifest ファイルです。
正直言うと、ここはあまり把握できていません :sweat:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;include&lt;/code&gt; で Moddable SDK で用意されている manifest を、ベースの manifest として読み込み、全プラットフォーム共通のモジュールとして &lt;code&gt;main&lt;/code&gt;(.js) を、&lt;code&gt;esp32&lt;/code&gt; 向けには、&lt;code&gt;./esp/console&lt;/code&gt;(.js) をロードする設定を書いています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:manifest.json&#34;&gt;{
&amp;quot;include&amp;quot;: &amp;quot;$(MODDABLE)/examples/manifest_base.json&amp;quot;,
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;./main&amp;quot;,
]
},
&amp;quot;platforms&amp;quot;: {
&amp;quot;esp32&amp;quot;: {
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;./esp/console&amp;quot;,
],
}
}
},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上の &lt;code&gt;manifest.json&lt;/code&gt; では &lt;code&gt;Timer&lt;/code&gt; クラスをロードしていませんが、&lt;code&gt;main.js&lt;/code&gt; では問題なく import することができます。
これは、Moddable SDK に含まれるベースの manifest でロード設定がされているためです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:$(MODDABLE)/examples/manifest_base.json(抜粋)&#34;&gt;{
:
(略)
:
&amp;quot;platforms&amp;quot;: {
:
(略)
:
&amp;quot;esp32&amp;quot;: {
&amp;quot;include&amp;quot;: &amp;quot;$(BUILD)/devices/esp32/manifest.json&amp;quot;
},
}
:
(略)
:
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:$(BUILD)/devices/esp32/manifest.json(抜粋)&#34;&gt;{
:
(略)
:
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;$(MODULES)/base/time/*&amp;quot;,
&amp;quot;$(MODULES)/base/time/esp/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/mc/*&amp;quot;,
]
},
&amp;quot;preload&amp;quot;: [
&amp;quot;time&amp;quot;,
&amp;quot;timer&amp;quot;,
],
:
(略)
:
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみに manifest についてツイートしたところ、公式アカウントからも返事がありました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ドキュメントは定期的にメンテナンスされそうです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The manifest documentation (&lt;a href=&#34;https://t.co/HTYtMXR33N&#34;&gt;https://t.co/HTYtMXR33N&lt;/a&gt;) is a good place to start, but we&amp;#39;ll put a document with more details together soon. If you have any specific questions, we&amp;#39;d be happy to answer those as well.&lt;/p&gt; Moddable (@moddabletech) &lt;a href=&#34;https://twitter.com/moddabletech/status/1086084032008413184?ref_src=twsrc%5Etfw&#34;&gt;2019年1月18日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行してみる&#34;&gt;実行してみる&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;manifest.json&lt;/code&gt; があるディレクトリで、&lt;code&gt;mcconfig&lt;/code&gt; コマンドを実行します。
大抵は、XS のビルドから始まるので、書き込みが完了するまでだいぶ時間がかかると思います。&lt;/p&gt;
&lt;p&gt;書き込みが完了すると、シリアルモニターに自動的に接続し、&lt;code&gt;console.log&lt;/code&gt; の出力内容が表示されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; mcconfig -m -p esp32
rm: cannot remove &#39;/root/Projects/moddable/build/tmp/esp32/release/xsProj/sdkconfig&#39;: No such file or directory
# Running GENCONFIG...
fatal: Not a git repository (or any of the parent directories): .git
including /root/esp32/esp-idf/components/bootloader/Makefile.projbuild...
:
(略)
:
MONITOR
--- idf_monitor on /dev/ttyUSB0 115200 ---
--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---
ets Jun 8 2016 00:22:57
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0018,len:4
load:0x3fff001c,len:636
load:0x40078000,len:6192
load:0x40080000,len:5152
0x40080000: _iram_start at /root/esp32/esp-idf/components/freertos/xtensa_vectors.S:1685
entry 0x40080264
0x40080264: _Level5Vector at ??:?
1010:1
1510:a
2010:2
3010:3
3011:b
4010:4
4510:c
5010:5
6010:6
:
(略)
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定した時間間隔で、コールバック関数が実行されています！
ES2017 で入った &lt;code&gt;String.prototype.padStart&lt;/code&gt; も正常に動作しているようです。&lt;/p&gt;
&lt;p&gt;なお、マイコンには時計がないので、&lt;code&gt;Date.now()&lt;/code&gt; は起動時からの時間を返します。&lt;/p&gt;
&lt;h3 id=&#34;デバッグ実行&#34;&gt;デバッグ実行&lt;/h3&gt;
&lt;p&gt;先ほど実行したコマンド &lt;code&gt;mcconfig -m -p esp32&lt;/code&gt; にデバッグ オプション &lt;code&gt;-d&lt;/code&gt; を追加すると、デバッグ ビルドを実行し、デバッグ ツールである &lt;code&gt;xsbug&lt;/code&gt; が自動で起動します。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;xsbug&lt;/code&gt; は JavaScript コードにブレークポイントの設定や、ステップ実行、変数の内容などを表示することが
でき、結構本格的なデバッグツールです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;今は独自の GUI ツールとして提供されているようですが、そのうち&lt;strong&gt;VSCode から拡張機能として利用できるようになると嬉しいですね。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;いかがだったでしょうか。
Moddable SDK を使うことで、JavaScript で書いたコードを、ESP8266/32 で動作させることができました。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;Web フロントエンドや Node.js など、JavaScript を書くエンジニア人口は多いでしょうから、そういった方々も気軽にマイコン開発ができるようになりますね。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;あとは、manifest ファイルに関するドキュメントの整備がすすんだり、もう少し簡単に環境構築ができれば、格段に開発しやすくなるのではないでしょうか。&lt;/p&gt;</description></item></channel></rss>