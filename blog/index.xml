<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/blog/index.xml</link>
    <description>Recent content in Blogs on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Mon, 04 Dec 2017 13:14:41 +0900</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GASを使わずにNode.jsでGoogle SpreadSheetsを操作してみよう。</title>
      <link>https://dotstud.io/blog/google-spreadsheets-from-nodejs/</link>
      <pubDate>Mon, 04 Dec 2017 13:14:41 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/google-spreadsheets-from-nodejs/</guid>
      
      <description>

&lt;p&gt;Node.jsでGoogle Spread Sheet&lt;/p&gt;

&lt;p&gt;こんにちは、代表ののびすけです。&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2017/nodejs&#34;&gt;Node.jsアドベントカレンダー2017&lt;/a&gt;の記事になります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://developers.google.com/apps-script/&#34;&gt;GAS&lt;/a&gt;じゃなくてNode.jsから直接スプレッドシートにアクセスしたい！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;そう思って調べると&lt;a href=&#34;https://developers.google.com/sheets/api/quickstart/nodejs&#34;&gt;Node.js Quickstart | Sheets API | Google Developers&lt;/a&gt;が出て来ますが、JS記述も古いし英語なので少しとっつきにくいです。&lt;/p&gt;

&lt;p&gt;ということでちょっと試して記録残そうと思います。&lt;/p&gt;

&lt;h2 id=&#34;google-sheets-api1&#34;&gt;Google Sheets API1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/sheets/guides/concepts?hl=ja&#34;&gt;Google Sheets API&lt;/a&gt;はスプレッドシートにアクセスできるようになるAPIです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/81dd3461cd263ea7e4d63f06fef54747.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google Sheets API を使用すると、スプレッドシートの要素を読み取って変更できます。 スプレッドシートは多くの設定を備えており、美しく機能的なシートを作成することができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;普段慣れている言語でスプレッドシートにアクセス出来まるので、簡単な操作であれば、GASを使う必要もないです。&lt;/p&gt;

&lt;p&gt;今回のサンプルは&lt;a href=&#34;https://github.com/n0bisuke/google-spread-sheet-node.js-sample&#34;&gt;こちら&lt;/a&gt;に置いておきます。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js v9.2.0&lt;/li&gt;
&lt;li&gt;macOS High Sierra&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考までに今回の僕の環境です。&lt;/p&gt;

&lt;p&gt;では実際に作っていきます。&lt;/p&gt;

&lt;h2 id=&#34;1-google-sheets-apiを使えるようにする&#34;&gt;1. Google Sheets APIを使えるようにする&lt;/h2&gt;

&lt;p&gt;ちなみに2017年12月時点でのウィザードです。こういうのはアップデートによって画面遷移変わるので適宜読み替えてください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use this wizard to create or select a project in the Google Developers Console and automatically turn on the API. Click Continue, then Go to credentials.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://console.developers.google.com/start/api?id=sheets.googleapis.com&#34;&gt;こちらのリンク&lt;/a&gt;からディベロッパーコンソールにいき、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/31e8011951d1552b8f7126eb459da474.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;新機能のお知らせ、パフォーマンスに関するアドバイス、フィードバック調査、特典に関する最新情報をメールで受け取ります。&lt;/code&gt;の質問はいいえでもたぶん大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/60c5bf6a1e772473dc9fc6d4d7526077.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;認証情報に進む&lt;/code&gt;を選択&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/848f8f79460aac991b46956111f0da07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この画面が出ますが、&lt;code&gt;キャンセル&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/e827d6ab-d728-1016-d22a-76cef4e4972e.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.00.17.png&#34; title=&#34;スクリーンショット 2017-12-03 21.00.17.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OAuth同意画面&lt;/code&gt;のタブを選択し、メールアドレスを確認し、&lt;code&gt;ユーザーに表示するサービス名&lt;/code&gt;を入力します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;保存&lt;/code&gt;を選択しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/1ca3a2d5-b639-bb6c-9508-225d162c96ff.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.01.07.png&#34; title=&#34;スクリーンショット 2017-12-03 21.01.07.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;認証情報&lt;/code&gt;のタブを選択し、 &lt;code&gt;認証情報を作成&lt;/code&gt; -&amp;gt; &lt;code&gt;OAuthクライアントID&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3d5b6da9cf3086b11c728cdc31307268.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;その他&lt;/code&gt;を選択し、任意の名前をつけて&lt;code&gt;作成&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/a8a25dd3-a194-d4a3-ac57-909f8d7712e0.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.06.47.png&#34; title=&#34;スクリーンショット 2017-12-03 21.06.47.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OK&lt;/code&gt;で進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/93c1e777-682e-434e-444d-a3aa8659bd54.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.07.25.png&#34; title=&#34;スクリーンショット 2017-12-03 21.07.25.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client_secret_xxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com.json&lt;/code&gt;のようなファイルがダウンロードされます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;これを&lt;code&gt;client_secret.json&lt;/code&gt;にリネームしましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-node-jsプロジェクトの準備&#34;&gt;2. Node.jsプロジェクトの準備&lt;/h2&gt;

&lt;p&gt;任意のディレクトリを作成して移動します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sheetstest&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir sheetstest
cd sheetstest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;で&lt;code&gt;package.json&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このディレクトリに先ほどの&lt;code&gt;client_secret.json&lt;/code&gt;を移動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls

package.json client_secret.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3d796ef0005ef28b914a83517772c65e.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じです。&lt;/p&gt;

&lt;p&gt;利用するモジュールを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i googleapis google-auth-library --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-トークンの作成-保存-最初だけ&#34;&gt;3. トークンの作成&amp;amp;保存 (最初だけ)&lt;/h2&gt;

&lt;p&gt;本家とは少し違うやり方です。&lt;/p&gt;

&lt;p&gt;本家のコードだと&lt;code&gt;トークンの作成&amp;amp;保存&lt;/code&gt;作業と実際のAPI呼び出しが一緒になったコードですが&lt;code&gt;トークンの作成&amp;amp;保存&lt;/code&gt;は最初のみ行えば良いので手順を分けて紹介します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getAndStoreToken.js&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//getAndStoreToken.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const readline = require(&#39;readline&#39;);
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
const {promisify} = require(&#39;util&#39;);

const google = require(&#39;googleapis&#39;);
const googleAuth = require(&#39;google-auth-library&#39;);

//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const rlQuestionAsync = promisify(rl.question);

const SCOPES = [&#39;https://www.googleapis.com/auth/spreadsheets.readonly&#39;];
const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR+&#39;/sheets.googleapis.com-nodejs-quickstart.json&#39;;

const main = async () =&amp;gt; {
    const content = await readFileAsync(__dirname+&#39;/client_secret.json&#39;);
    const credentials = JSON.parse(content); //クレデンシャル
    //認証
    const clientSecret = credentials.installed.client_secret;
    const clientId = credentials.installed.client_id;
    const redirectUrl = credentials.installed.redirect_uris[0];
    const auth = new googleAuth();
    const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);
    
    //get new token
    const authUrl = oauth2Client.generateAuthUrl({
        access_type: &#39;offline&#39;,
        scope: SCOPES
    });

    console.log(&#39;Authorize this app by visiting this url: &#39;, authUrl);

    rl.question(&#39;Enter the code from that page here: &#39;, (code) =&amp;gt; {
        rl.close();
        
        oauth2Client.getToken(code, async (err, token) =&amp;gt; {
            if (err) {
                console.log(&#39;Error while trying to retrieve access token&#39;, err);
                return;
            }

            oauth2Client.credentials = token;

            try {
                fs.mkdirSync(TOKEN_DIR);
            } catch (err) {
                if (err.code != &#39;EEXIST&#39;) throw err;
            }

            await writeFileAsync(TOKEN_PATH, JSON.stringify(token));
            console.log(&#39;Token stored to &#39; + TOKEN_PATH);
        });
    });
};

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このプログラムを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node getAndStoreToken.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/379de8711e19b5510225e167de555ab6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://accounts.google.com/~&lt;/code&gt;で始まるURLが表示されるのでこれをコピーしてブラウザで開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/06afa961-4789-535b-3fee-8eaf67a997af.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.52.54.png&#34; title=&#34;スクリーンショット 2017-12-04 11.52.54.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アカウント選択画面になります。
複数Googleアカウントを持っている人は、今回アクセスしようとしているアカウントを選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/18729d60-e4a6-8996-9519-f9f4750ae1f4.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.02.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.02.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;許可&lt;/code&gt;で進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/6058bd3e-258f-1d8d-a7c6-68962617f1b2.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.09.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.09.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;認証用のコードが発行されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/fd612d7c-0b45-3d09-64ab-c1e02315fe81.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.27.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.27.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これをコピーしてターミナルに貼り付けてエンターキーで進みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Token stored to /Users/n0bisuke/dotstudio/playground/sheetstest/sheets.googleapis.com-nodejs-quickstart.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと表示されてjsonファイルが保存されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/830452dc-ad36-83ef-8cf8-8c80bc9637dd.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.57.50.png&#34; title=&#34;スクリーンショット 2017-12-04 11.57.50.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sheets.googleapis.com-nodejs-quickstart.json&lt;/code&gt;がフォルダ内に確認できればOKです。&lt;/p&gt;

&lt;h2 id=&#34;4-いよいよシートにアクセス&#34;&gt;4. いよいよシートにアクセス&lt;/h2&gt;

&lt;p&gt;さて最後の手順です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getSheetsData.js&lt;/code&gt;を作成しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//getSheetsData.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const {promisify} = require(&#39;util&#39;);
const google = require(&#39;googleapis&#39;);
const googleAuth = require(&#39;google-auth-library&#39;);
const sheets = google.sheets(&#39;v4&#39;);

//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const ssValuesGetAsync = promisify(sheets.spreadsheets.values.get);

const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR + &#39;/sheets.googleapis.com-nodejs-quickstart.json&#39;;

const main = async () =&amp;gt; {
    //クレデンシャル情報の取得
    const content = await readFileAsync(__dirname+&#39;/client_secret.json&#39;);
    const credentials = JSON.parse(content); //クレデンシャル

    //認証
    const clientSecret = credentials.installed.client_secret;
    const clientId = credentials.installed.client_id;
    const redirectUrl = credentials.installed.redirect_uris[0];
    const auth = new googleAuth();
    const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);
    const token = await readFileAsync(TOKEN_PATH);
    oauth2Client.credentials = JSON.parse(token);

    //API経由でシートにアクセス
    const apiOptions = {
        auth: oauth2Client,
        spreadsheetId: &#39;1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms&#39;,
        range: &#39;Class Data!A2:E&#39;,
    };
    const response = await ssValuesGetAsync(apiOptions);

    //結果を表示
    console.log(response);
};

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node getSheetsData.js

{ range: &#39;\&#39;Class Data\&#39;!A2:E101&#39;,
  majorDimension: &#39;ROWS&#39;,
  values:
   [ [ &#39;Alexandra&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;CA&#39;, &#39;English&#39; ],
     [ &#39;Andrew&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;SD&#39;, &#39;Math&#39; ],
     [ &#39;Anna&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NC&#39;, &#39;English&#39; ],
     [ &#39;Becky&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;SD&#39;, &#39;Art&#39; ],
     [ &#39;Benjamin&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;WI&#39;, &#39;English&#39; ],
     [ &#39;Carl&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;MD&#39;, &#39;Art&#39; ],
     [ &#39;Carrie&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;NE&#39;, &#39;English&#39; ],
     [ &#39;Dorothy&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;MD&#39;, &#39;Math&#39; ],
     [ &#39;Dylan&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;MA&#39;, &#39;Math&#39; ],
     [ &#39;Edward&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;FL&#39;, &#39;English&#39; ],
     [ &#39;Ellen&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;WI&#39;, &#39;Physics&#39; ],
     [ &#39;Fiona&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;MA&#39;, &#39;Art&#39; ],
     [ &#39;John&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;CA&#39;, &#39;Physics&#39; ],
     [ &#39;Jonathan&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;SC&#39;, &#39;Math&#39; ],
     [ &#39;Joseph&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;AK&#39;, &#39;English&#39; ],
     [ &#39;Josephine&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Math&#39; ],
     [ &#39;Karen&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;NH&#39;, &#39;English&#39; ],
     [ &#39;Kevin&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;NE&#39;, &#39;Physics&#39; ],
     [ &#39;Lisa&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;SC&#39;, &#39;Art&#39; ],
     [ &#39;Mary&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;AK&#39;, &#39;Physics&#39; ],
     [ &#39;Maureen&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;CA&#39;, &#39;Physics&#39; ],
     [ &#39;Nick&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;NY&#39;, &#39;Art&#39; ],
     [ &#39;Olivia&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;NC&#39;, &#39;Physics&#39; ],
     [ &#39;Pamela&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;RI&#39;, &#39;Math&#39; ],
     [ &#39;Patrick&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Art&#39; ],
     [ &#39;Robert&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;CA&#39;, &#39;English&#39; ],
     [ &#39;Sean&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;NH&#39;, &#39;Physics&#39; ],
     [ &#39;Stacy&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Math&#39; ],
     [ &#39;Thomas&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;RI&#39;, &#39;Art&#39; ],
     [ &#39;Will&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;FL&#39;, &#39;Math&#39; ] ] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このサンプルでは&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit#gid=0&#34;&gt;こちらのワークブック&lt;/a&gt;へアクセスして情報を取得しています。&lt;/p&gt;

&lt;p&gt;ちなみに用語的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ワークブック＝Googleスプレッドシートの１ファイル&lt;/li&gt;
&lt;li&gt;シート＝ワークブック内のタブ、シート&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というニュアンスです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//省略

    const apiOptions = {
        auth: oauth2Client,
        spreadsheetId: &#39;1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms&#39;,
        range: &#39;Class Data!A2:E&#39;,
    };

//省略
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほかのワークブックにアクセスする場合は&lt;code&gt;https://docs.google.com/spreadsheets/d/&lt;/code&gt;の後に続くIDを&lt;code&gt;spreadsheetId&lt;/code&gt;に指定して実行しましょう。&lt;code&gt;range&lt;/code&gt;は&lt;code&gt;シート名:取得する範囲&lt;/code&gt;という形式で指定して、指定したシートの指定した範囲からセルの情報を取得します。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これで次回以降は4番目の手順だけでスプレッドシートにアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client_secret.json&lt;/code&gt;や&lt;code&gt;sheets.googleapis.com-nodejs-quickstart.json&lt;/code&gt;をコピーしてサーバー設置しておけば自動更新する仕組みなども作れます。&lt;/p&gt;

&lt;p&gt;スプレッドシートは色々な場面で利用されているツールなので是非システム連携などに活用してみて下さい。&lt;/p&gt;

&lt;p&gt;それでは！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>アキバ電気街の30倍！？世界最大の電脳都市”深セン＠中国”に行ってきた！#MakerFaireShenZhen</title>
      <link>https://dotstud.io/blog/maker-faire-shenzhen-report2/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/maker-faire-shenzhen-report2/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioモノづくり担当・うこです。&lt;/p&gt;

&lt;p&gt;日本は秋も終わりだんだんと寒くなってきつつありますが、中国南部・広東省深セン市はまだまだ暑いです。そんな深セン市で11月10日〜12日の3日間、モノづくりの祭典「&lt;strong&gt;Maker Faire Shenzhen&lt;/strong&gt;」が開催され、dotstudioのメンバーで偵察に行ってきましたのでその模様をお伝えします。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/33.png&#34; alt=&#34;&#34; /&gt;
至るところにこのパンダが居た
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;maker-faire-shenzhen-mfsz-について&#34;&gt;Maker Faire Shenzhen(MFSZ) について&lt;/h2&gt;

&lt;p&gt;世界一の電気街を擁するとされる街・中国広東省深セン市で行われる、非常に規模の大きいモノづくりの祭典です。
dotstudioでは過去にも出展したことがあり過去にも記事をいくつか書いておりますので、詳しくはそちらも参照してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-2016/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/link1.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-report/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/link2.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;深センまでの道のり&#34;&gt;深センまでの道のり&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/1.png&#34; alt=&#34;&#34; /&gt;
今回はジェットスター航空で成田空港〜香港国際空港を移動し、さらに機場快線（エアポートエクスプレス）と香港MRTで羅湖駅を経由して深セン市までアクセスしました。香港に入国するとすぐにエアポートエクスプレスのカウンターがあり、クレジットカードで往復に使えるパスを購入できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/2.png&#34; alt=&#34;&#34; /&gt;
香港区域内で観光をしない場合は、空港からバスで直接上水駅まで行き1駅だけMTRに乗り国境を目指すか、香港に入境せずフェリーで深セン側の港に移動する方法もあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/4.png&#34; alt=&#34;&#34; /&gt;
せっかくなので香港の中心部を経由してきました。ここはまだ、日本と同じで車道が左側通行なので違和感がありませんね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/5.png&#34; alt=&#34;&#34; /&gt;
羅湖駅まで移動します。ここは禁区と呼ばれる緩衝地帯の中のため駅の外には出ることができません。「↑深セン」と書かれた看板があり、人の流れに乗って進んでゆくと香港を出境することになります。さらにそのまま100mほどある河の上にかかる通路を通り、中国本土に入国します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/6.png&#34; alt=&#34;&#34; /&gt;
中国側のイミグレーションは、中国国内で最大のものとあって建物はとても立派でした。旅行客のほとんどは中国人のようです。ホテルやタクシーの客引きのしつこさが尋常ではないです。今回は、ここから徒歩5分ほどの好立地のホテルに宿泊しました。&lt;/p&gt;

&lt;h2 id=&#34;会場は大学のキャンパス&#34;&gt;会場は大学のキャンパス&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/7.png&#34; alt=&#34;&#34; /&gt;
今年のMFSZ会場となったのは「深セン職業技術学院」。香港国境の羅湖駅からは地下鉄で1時間ほどかかります。とても大きくて綺麗なキャンパスでした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/8.png&#34; alt=&#34;&#34; /&gt;
日本のMaker Faireと違い、屋外に1つ1つが巨大なオブジェをかなりダイナミックに配置しているのがとても印象的でした。&lt;/p&gt;

&lt;h2 id=&#34;展示物紹介&#34;&gt;展示物紹介&lt;/h2&gt;

&lt;h3 id=&#34;さすが中国-編&#34;&gt;さすが中国！編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/9.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/10.png&#34; alt=&#34;&#34; /&gt;
くまモン（のパチモン）です。やたら腕が細長かったです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/11.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/12.png&#34; alt=&#34;&#34; /&gt;
筋電でドローンなどを制御できる腕輪です。かなり面白かったので購入しようとしたのですが、現金が足りず……。しかしここは中国、&lt;strong&gt;田舎の屋台ですらも電子マネーが使える国&lt;/strong&gt;です。WechatPayでなんとか購入することができました。&lt;/p&gt;

&lt;p&gt;ちなみに日本人がWechatPayを使うためには、「知人から送金してもらいPayアカウントを開設」し、「チャージ」する必要があります。「チャージ」は、本来は中国国内の銀行口座が必要ですが、国内の空港ででも日本円で可能なようです。&lt;/p&gt;

&lt;p&gt;参考 : &lt;a href=&#34;http://japanese.engadget.com/2017/07/27/wechat-pay/&#34;&gt;中国旅行の新定番！ ポケットチェンジでWeChat Payにチャージする：旅人目線のデジタルレポ 中山智 - Engadget 日本版&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ゲーム編&#34;&gt;ゲーム編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/13.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/14.png&#34; alt=&#34;&#34; /&gt;
RaspberryPiを使った超小型のスーファミのようなもの。レスポンスもよく、普通に遊べました。名作はひととおり揃っているようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/15.png&#34; alt=&#34;&#34; /&gt;
縁日で子供達が遊んでそうなおもちゃを作ったのは韓国のメイカーさん。スイッチ類が付いていてゴールしたら光ったりするそうですが、ちょうど修理中とのことでした。メイカーあるあるです。&lt;/p&gt;

&lt;h3 id=&#34;教育ツール編&#34;&gt;教育ツール編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/16.png&#34; alt=&#34;&#34; /&gt;
PCメーカー・acer製の教育用ツールです。PCやタブレットから、Arduinoとそれに接続されたセンサ群をスクラッチでプログラミングできるようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/17.png&#34; alt=&#34;&#34; /&gt;
IoT Brickという、ブロックパーツをつなげて回路を作り、コントローラで制御ができるプロダクトです。すこし昔の日本にもあった、電子ブロックのようなものでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/18.png&#34; alt=&#34;&#34; /&gt;
天津市の企業であるYwRobot社のArduino互換シールドです。ケーブルが一般的によく使用されているもので代替ができて便利で、機能性の高いユニークな基板がたくさん用意されていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/19.png&#34; alt=&#34;&#34; /&gt;
弊社でも取り扱いをしている、上海SeeedStudio社のプロダクトです。Grove Zeroなどの新製品が展示・販売されていました。&lt;/p&gt;

&lt;h3 id=&#34;デザイン編&#34;&gt;デザイン編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/20.png&#34; alt=&#34;&#34; /&gt;
眼球盦子という、こちらを見てくる目玉です。スマホと接続するとカメラが顔を認識し、顔のある方向に目玉がクリクリと動きます。買い換えたあとで余ってしまっているスマホを、インタラクティブな置物に変身させてくれそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/21.png&#34; alt=&#34;&#34; /&gt;
ボルトやらチェーンやらの無骨なパーツで構成されたオブジェが展示されていました。どちらかというと、美大生の作品のような印象です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/22.png&#34; alt=&#34;&#34; /&gt;
レーザーでカットされた木材でできた箱ですが、模様をずらして絵柄を合わせないと開くことができないようになっています。日本にも寄木細工の秘密箱がありますが、それの現代メイカー版といったところでしょうか。&lt;/p&gt;

&lt;h3 id=&#34;パワーを感じる編&#34;&gt;パワーを感じる編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/23.png&#34; alt=&#34;&#34; /&gt;
水上歩行を可能にする靴、いわゆる「忍者の水蜘蛛」です。後ろにはディスプレイがあって実際に水上を歩いている動画が流れていましたが、音と水しぶきだけやたらすごかったです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/24.png&#34; alt=&#34;&#34; /&gt;
Groveのタッチセンサがついていて、うっかり触れると赤い星がキラリと光ります。&lt;/p&gt;

&lt;h3 id=&#34;その他編&#34;&gt;その他編&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/25.png&#34; alt=&#34;&#34; /&gt;
女の子が10人ほど、ライブコーディングならぬライブソーイング？で、目の前でミシンを使って作品を作り出していました。意外にも、出展者も来場者も女の子の割合が比較的高めな印象でした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/26.png&#34; alt=&#34;&#34; /&gt;
一般の出展者とは別に、各地の大学からきた学生サークルのブースばかりのエリアがありました。日本の理系大学の学園祭のような雰囲気ですが、ほとんど出払っていて人気があまりありません。どこかのブースではさりげなくただのガンプラとかも置いてあった気がします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/27.png&#34; alt=&#34;&#34; /&gt;
なんと食べ物の屋台もたくさん出ていました！無難に美味しかったです。日本人からすると物価が安いのでほぼ食べ放題ですね。&lt;/p&gt;

&lt;h2 id=&#34;電気街にも行ってきました&#34;&gt;電気街にも行ってきました&lt;/h2&gt;

&lt;p&gt;電子機器産業は深セン市全体で盛んではありますが、小売も卸売もどちらも行う業者が多数入り混じって一大繁華街を形成しているのが、深セン市中心部の華強路です。せっかくなので店舗を巡ってみました！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/28.png&#34; alt=&#34;&#34; /&gt;
去年まで行われていた大規模な工事が完了していて、とても綺麗な街並みでした。路上に落ちているゴミはほとんどなく、治安もとても良いです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/29.png&#34; alt=&#34;&#34; /&gt;
すぐ近くのお店に入ってみると、ケーブルやらコンセントやらがずらり。こんな調子のお店が百店舗近く詰まったビルがいくつも並んでいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/30.png&#34; alt=&#34;&#34; /&gt;
路上の仮設テントで、VRを利用したアトラクションゲームが楽しめます。このテントの前では人の胴体ぐらいの大きさの飛行機のラジコンが通りの上空を猛スピードで飛び回っていました。日本では絶対にできませんね……。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/31.png&#34; alt=&#34;&#34; /&gt;
DHLの集荷所のようです。秋葉原の路上で売られている製品も、ここから旅立っていくものはおそらく少なくないはずです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/134/32.png&#34; alt=&#34;&#34; /&gt;
最近話題の犬型ロボットだって、安く、早く、手に入ります。そう、深センならね。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;深センのMakerFaireは去年に引き続き2回目の来場でしたが、今年は少し規模が小さめになっており、ビジネス向け製品よりもデザイン寄りの作品がかなり多く出展されている印象でした。深センでは土地柄、新たなプロダクトを求めて来場するバイヤーも多く来場するそうですが、今回は会場が学校だったことが関係しているのかもしれません。&lt;/p&gt;

&lt;p&gt;また、日本人をはじめとする海外メイカー勢も多く見受けられました。中国って少し行きづらそうなイメージがありますが、実際に行ってみると&lt;strong&gt;想像以上に治安がよく、渡航費・滞在費もあまりかからず、どの国からでも意外と参加しやすい&lt;/strong&gt;のかもしれません。特に深センは世界的な国際港である香港に隣接していることもあり、電子工業が加速的に発展していった街でもあります。
ものづくりが好きだけど、まだ中国深センに行ったことがないという方も、この記事でご興味を持たれたらぜひ渡航してみてはいかがでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/34.png&#34; alt=&#34;&#34; /&gt;
現地に残ってお見送りする僕と知らないおじさん&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>オフィス移転したらインターホンがなかったのでRaspbeerry Piでカメラ付きインターホン作ってみた</title>
      <link>https://dotstud.io/blog/office-new-door-notification/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/office-new-door-notification/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioモノづくり担当・うこです。&lt;/p&gt;

&lt;p&gt;dotstudioは&lt;a href=&#34;https://dotstud.io/blog/office-relocation-for-akihabara/&#34;&gt;&lt;strong&gt;めでたく新オフィスに移転したのですが&lt;/strong&gt;&lt;/a&gt;、インターホンがついておらず不便なんですよね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/10.png&#34; alt=&#34;&#34; /&gt;
代表・のびすけ「&lt;strong&gt;うこ先生、これRaspberry Piでインターホン作れない？&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/1.png&#34; alt=&#34;&#34; /&gt;
僕「&lt;strong&gt;秒でいけます&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;ということで作ってみました！&lt;/p&gt;

&lt;h2 id=&#34;全体の構成&#34;&gt;全体の構成&lt;/h2&gt;

&lt;p&gt;今回は&lt;strong&gt;ボタンを押したら室内のスピーカに音がなる機能&lt;/strong&gt;に加えて、&lt;strong&gt;押した人の姿が見えるカメラ機能&lt;/strong&gt;も搭載してみました。&lt;/p&gt;

&lt;p&gt;全体の構成はこんな感じです。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/a7707b67-176f-8dc6-cf32-8323a56e860c.png&#34; alt=&#34;いんたーほん.png&#34; title=&#34;いんたーほん.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Raspberry Pi 3（以下ラズパイ）をベースにして、Grove接続されたタッチセンサに触れると室内のBluetoothスピーカー（今回はBASE EGG）から音が流れる仕組みを作ります。&lt;/p&gt;

&lt;p&gt;さらに、ラズパイカメラをドアの外に出して、外の様子がオフィス内のモニタから見られるようにします。&lt;/p&gt;

&lt;h3 id=&#34;使ったもの&#34;&gt;使ったもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3&lt;/li&gt;
&lt;li&gt;Raspberry Pi カメラモジュール&lt;/li&gt;
&lt;li&gt;Grove タッチセンサ&lt;/li&gt;
&lt;li&gt;Bluetoothオーディオトランスミッタ&lt;/li&gt;
&lt;li&gt;Bluetoothスピーカー（今回はBASS EGG）&lt;/li&gt;
&lt;li&gt;スピーカー（100円）&lt;/li&gt;
&lt;li&gt;オーディオ分岐プラグ（100円）&lt;/li&gt;
&lt;li&gt;マグネット付きプラスチックケース（100円）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;呼び鈴の製作&#34;&gt;呼び鈴の製作&lt;/h2&gt;

&lt;h3 id=&#34;ハードウェア部分&#34;&gt;ハードウェア部分&lt;/h3&gt;

&lt;p&gt;まずはじめに、&lt;strong&gt;来客者がボタンを押すと室内で音が鳴って訪問を知らせるようにする機能&lt;/strong&gt;を作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/12.png&#34; alt=&#34;&#34; /&gt;
ラズパイはマグネット付きのプラスチックケースに入れて、金属製のドアの内側に貼り付けます。ケースはケーブルが引き出せるように適宜加工します。&lt;/p&gt;

&lt;p&gt;次にGroveタッチセンサですが、そのままだとラズパイに接続できないためジャンパワイヤを3本用意します。接続するピンは以下のとおりです。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;タッチセンサのピン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ラズパイGPIO&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VCC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3.3V&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;GND&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ground&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SIG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ラズパイGPIOのピン番号と位置については、以下の公式ページにある2番目の図を参照してください。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/&#34;&gt;GPIO: MODELS A+, B+, RASPBERRY PI 2 B AND RASPBERRY PI 3 B&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次に、100円程度で売られているオーディオ出力分岐器をラズパイのオーディオ出力に接続し、さらにBluetoothのオーディオトランスミッタと小型のスピーカーに接続します。
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/133/11.png&#34; alt=&#34;&#34; /&gt;
実証の結果、「押した人にも音が鳴ったことがわかる」ことが必要とわかった
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;オーディオトランスミッタは室内に来客を知らせるスピーカーを鳴らす用、小型スピーカーはドアの外に出して来客者に「呼び鈴が鳴った」ことを知らせる用です。USB接続のアンプ付きスピーカーなどで大きな音が出せるのならそれで代用することができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/5.png&#34; alt=&#34;&#34; /&gt;
最後に電源を近くのコンセントからUSBアダプタ経由で接続してハードウェア部分は完了です！&lt;/p&gt;

&lt;h3 id=&#34;ソフトウェア部分&#34;&gt;ソフトウェア部分&lt;/h3&gt;

&lt;p&gt;まず、適当なインターフォンの音となるmp3を用意しましょう。簡単なピンポン音でも、ネタのような効果音でもいいです。dotstudioでは、「ファミマ入店音」が好評だったため採用しました。&lt;/p&gt;

&lt;p&gt;mp3が用意できたら、&lt;code&gt;/home/pi&lt;/code&gt;などのディレクトリに&lt;code&gt;sounds&lt;/code&gt;というフォルダを作ってその中にmp3を入れましょう。&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;sudo apt-get install mpg321&lt;/code&gt;を実行し、サウンド再生用のソフトウェア「mpg321」をインストールします。&lt;code&gt;mpg321 sounds/サウンド.mp3&lt;/code&gt;などと実行して、スピーカーから音が出ていればOKです。もしここで音が小さい場合は、&lt;code&gt;alsamixer&lt;/code&gt;コマンドを実行すると音量調整ができますので、矢印キーで大きくしておきます。&lt;/p&gt;

&lt;p&gt;音の再生が確認できたら、以下のPythonプログラムを&lt;code&gt;sounds&lt;/code&gt;ディレクトリと同じ場所に保存して実行します。タッチセンサを触ると同時に、音が鳴ってターミナル上に&amp;rsquo;Ping-pon!&amp;lsquo;と表示されれば成功です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-/home/pi/interphone.py&#34;&gt;#!/usr/bin/python

import RPi.GPIO as GPIO
import glob
import subprocess
from time import sleep
from random import shuffle

GPIO.setmode(GPIO.BCM)
GPIO.setup(24, GPIO.IN)

# mp3が保存されているディレクトリは適宜変更してください
soundlist = glob.glob(&amp;quot;./sounds/*.mp3&amp;quot;)

while True:
    if GPIO.input(24) == GPIO.HIGH:
        shuffle(soundlist)
        print(&#39;Ping-pon!&#39;)
        subprocess.call(&amp;quot;mpg321 -q &amp;quot;+soundlist[0], shell=True)
    else:
        sleep(0.01)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後に、再起動しても動くように、&lt;code&gt;/etc/rc.local&lt;/code&gt;ファイルの末尾に&lt;code&gt;/usr/bin/python /home/pi/interphone.py &amp;amp;&lt;/code&gt;と追記しておきましょう。
ちなみにですが、上記のコードでは&lt;code&gt;sounds&lt;/code&gt;ディレクトリ内に複数のmp3が入っているとランダムで再生されるような仕組みにしています。&lt;/p&gt;

&lt;h2 id=&#34;監視カメラ部分の製作&#34;&gt;監視カメラ部分の製作&lt;/h2&gt;

&lt;p&gt;監視カメラはラズパイ専用カメラを使用します。接続はとても簡単で、HDMI端子とオーディオ端子の間にある細長い端子にケーブルを差し込むだけです。&lt;code&gt;sudo raspi-config&lt;/code&gt;コマンドで、カメラを使うことができるように設定を変更しておきましょう。&lt;code&gt;raspistill -p&lt;/code&gt;コマンドを実行し、特にエラーが出なければ正常に接続されています。&lt;/p&gt;

&lt;p&gt;今回はカメラと呼び鈴部分は連動させず、カメラは&lt;a href=&#34;https://github.com/ccrisan/motioneye/wiki&#34;&gt;motionEye&lt;/a&gt;というオープンソースウェアを使って単独で動作させます。
motionEyeのインストールは以下を参考にしました。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://qiita.com/mt08/items/96207abfba91954b50d4&#34;&gt;らずぱい motionEye (Web UIベースのカメラサーバ) - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらのページにも書かれていますが、ラズパイのカメラモジュールを使用するので、以下のコマンドを実行しておくのを忘れないようにしましょう。
&lt;code&gt;grep bcm2835-v4l2 /etc/modules || echo bcm2835-v4l2 | sudo tee -a /etc/modules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/4.png&#34; alt=&#34;&#34; /&gt;
インストールが完了して、室内に常設してあるPCのブラウザからアクセスしてみました。
ばっちりドアの外が撮影されていますね！
1秒おきに更新されていますが、python上で動作しているためか、少々重たいようです。&lt;/p&gt;

&lt;h2 id=&#34;試してみる&#34;&gt;試してみる&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/7.png&#34; alt=&#34;&#34; /&gt;
インターホンを押すと……&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/4W4pJ0bZVGY&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;入店っぽい音が流れます！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/133/13.png&#34; alt=&#34;&#34; /&gt;
旧スタイルに比べるとだいぶ未来になりました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回は数時間ほどでこのシステムを作ることができました。カメラと呼び鈴が独立してしまっていますが、可能ならば「呼び鈴を押した瞬間の画像を保存してhipchatにアップロード」するような仕組みを作ってみたいです。
&lt;img src=&#34;https://dotstud.io/img/blog/133/3.png&#34; alt=&#34;&#34; /&gt;
次は何をつくってやろうか……。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【祝！移転】電気街すぐそこ！dotstudioのオフィスが移転しました！【D.I.Y】</title>
      <link>https://dotstud.io/blog/office-relocation-for-akihabara/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/office-relocation-for-akihabara/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとくです。もうすっかり冬ですね。なかなか出歩くのが億劫な季節になりました。&lt;/p&gt;

&lt;p&gt;でもオフィスから電気街遠い……駅も遠い……ってことで&lt;strong&gt;オフィス移転しましたー！！！&lt;/strong&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/132/1.png&#34; alt=&#34;&#34; /&gt;
今回は新オフィスの様子をたっぷりお伝えしたいと思います！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/2.png&#34; alt=&#34;&#34; /&gt;
ちなみにこちらが入居時の様子です。内装屋さんに頼んで、天井と床を剥いでもらいました。ペンキ塗りと床貼りのさまざまな知見（not IT）を得たのでいずれ記事にしたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;移転場所は電気街すぐ&#34;&gt;移転場所は電気街すぐ！&lt;/h2&gt;

&lt;p&gt;新しいオフィスを選ぶにあたっての一番の条件は「&lt;strong&gt;電気街に近いこと&lt;/strong&gt;」だったので、電気街すぐの場所に移動しました！
&lt;img src=&#34;https://dotstud.io/img/blog/132/5.png&#34; alt=&#34;&#34; /&gt;
秋月、千石、ツクモなどのパーツ屋さんはもちろん、カレーにラーメンにケバブなど、美味しいお店もたくさんあって嬉しいです（泣）&lt;/p&gt;

&lt;h2 id=&#34;オフィス内をチラ見せ&#34;&gt;オフィス内をチラ見せ！&lt;/h2&gt;

&lt;p&gt;オフィスの中を紹介します！改装中なのでなにかとお見苦しいですが、&lt;strong&gt;らしさ&lt;/strong&gt;ということでお願いいたします。
&lt;img src=&#34;https://dotstud.io/img/blog/132/map.png&#34; alt=&#34;&#34; /&gt;
ざっくりとした配置（予定）はこんな感じ。&lt;/p&gt;

&lt;h3 id=&#34;エントランス&#34;&gt;エントランス&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/3.png&#34; alt=&#34;&#34; /&gt;
扉を開けると、ぺっぱーくんがお出迎えしてくれます。生気がないのは気のせいです。&lt;/p&gt;

&lt;p&gt;中が丸見えで残念な感じですが、パーテーションを立てて草で装飾してステキな感じになる予定です。&lt;/p&gt;

&lt;h3 id=&#34;打ち合わせスペース&#34;&gt;打ち合わせスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/4.png&#34; alt=&#34;&#34; /&gt;
入って左は、来客用の打ち合わせスペースです。現状だと&lt;strong&gt;机が足りない&lt;/strong&gt;のでかなりタイトな感じになっています。&lt;/p&gt;

&lt;p&gt;コーヒーメーカーが導入されたのでお客様にコーヒーが出せるようになりました！！（ブラックのみ）&lt;/p&gt;

&lt;h3 id=&#34;ハンズオンスペース&#34;&gt;ハンズオンスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/6.png&#34; alt=&#34;&#34; /&gt;
ここが待望だったハンズオンスペースです。&lt;strong&gt;心の目で見てください&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;壁一面のデバイス棚、巨大モニター、芝生カーペットの上に半田ごて作業スペース……素敵ですよね。ここでイベントを開催する日が待ち遠しいです。&lt;/p&gt;

&lt;p&gt;※dotstudioはいま圧倒的に&lt;a href=&#34;http://amzn.asia/8KHCkEv&#34;&gt;床と照明&lt;/a&gt;が不足しています。&lt;/p&gt;

&lt;h3 id=&#34;キッチンスペース&#34;&gt;キッチンスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/8.png&#34; alt=&#34;&#34; /&gt;
NYはブルックリンスタイルをイメージした自慢のオシャレキッチン（予定地）です。&lt;/p&gt;

&lt;p&gt;テーブルとハイチェアを増設してバーカウンターみたいなやつを作ったり作らなかったりするかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;執務スペース&#34;&gt;執務スペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/9.png&#34; alt=&#34;&#34; /&gt;
会社のメイン機能である執務スペース！個人の引き出しやモニタが追加されました。日当たりがよくて眠かったり画面見えなかったりしますが、わたし的に一番好きな場所です。&lt;/p&gt;

&lt;p&gt;床（自分たちで貼った）が完全に乾いたら、みんな大好きな良いイスが導入されるよ！&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;床が足りなかったり、棚がなかったり、電球少なくて暗かったり……。新オフィスはまだまだ作っている途中です。
旧オフィスにも荷物があるので、こんな感じでちまちまと物を運んでいます。
&lt;img src=&#34;https://dotstud.io/img/blog/132/10.png&#34; alt=&#34;&#34; /&gt;
いつ来ても楽しくくつろいで過ごせるオフィスを目指して頑張っていきます！&lt;/p&gt;

&lt;p&gt;ということで&lt;strong&gt;&lt;a href=&#34;http://amzn.asia/8KHCkEv&#34;&gt;ウィッシュリスト&lt;/a&gt;&lt;/strong&gt;も作りましたのでよかったら応援おねがいします（笑）&lt;/p&gt;

&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/sushi.png&#34; alt=&#34;&#34; /&gt;
慰労寿司パ（定期）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.3</title>
      <link>https://dotstud.io/blog/hexo-static-site-vol3/</link>
      <pubDate>Tue, 31 Oct 2017 17:53:15 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hexo-static-site-vol3/</guid>
      
      <description>

&lt;p&gt;こんにちは、エンジニアのちゃんとくです。ひょんなことから&lt;a href=&#34;https://nodejs.connpass.com/&#34;&gt;&lt;strong&gt;Node女学園&lt;/strong&gt;&lt;/a&gt;というNode.jsを学ぶ女性のためのコミュニティを立ち上げました。&lt;/p&gt;

&lt;p&gt;このシリーズではNode女学園のブログを作りながら、&lt;strong&gt;Node.js製の静的サイトジェネレータ「Hexo」&lt;/strong&gt;の使い方を紹介していきます！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol2&#34;&gt;&lt;strong&gt;前回&lt;/strong&gt;&lt;/a&gt;はデザインを当ててブログのカスタマイズをしてみました。
&lt;img src=&#34;https://dotstud.io/img/blog/108/pre_art.png&#34; alt=&#34;&#34; /&gt;
&lt;center&gt;
&lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol2&#34;&gt;Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.2&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;今回はルートを追加してブログ記事以外のページを作ってみます。&lt;/p&gt;

&lt;h2 id=&#34;今回やること&#34;&gt;今回やること&lt;/h2&gt;

&lt;p&gt;現在はコマンドで記事を追加すると&lt;code&gt;サイトURL/:YYYY/:MM/:DD&lt;/code&gt;という記事が作成されるようになっています。&lt;/p&gt;

&lt;p&gt;これを変更して、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;サイトURL/about/&lt;/code&gt;という情報ページを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;に記事を生成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というのをやってみます。&lt;/p&gt;

&lt;h2 id=&#34;新しいルートを追加&#34;&gt;新しいルートを追加&lt;/h2&gt;

&lt;p&gt;ルートの追加は、&lt;code&gt;hexo new page &amp;quot;[新しいルート]&amp;quot;&lt;/code&gt;というコマンドで簡単にできます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/new_route.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;コマンドを実行すると&lt;code&gt;/source&lt;/code&gt;の下に新しいディレクトリが作成されます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/about_dir.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作成された&lt;code&gt;about/index.md&lt;/code&gt;にページ内容を記載します。&lt;/p&gt;

&lt;p&gt;ローカルサーバを起動して&lt;a href=&#34;http://localhost:4000/about/&#34;&gt;http://localhost:4000/about/&lt;/a&gt; を見てみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/about.png&#34; alt=&#34;&#34; /&gt;
新しいページができました！&lt;/p&gt;

&lt;h2 id=&#34;メニューに追加&#34;&gt;メニューに追加&lt;/h2&gt;

&lt;p&gt;今のままではどこからもリンクがないのでメニューのHomeの横に追加してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu_before.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/themes/pacman/_config.yml&lt;/code&gt;の&lt;code&gt;menu:&lt;/code&gt;に表示名とPATHを記載します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu.png&#34; alt=&#34;&#34; /&gt;
Archivesはしばらく不要なので消しました。ついでにEventsとStaffページも追加してみます。&lt;/p&gt;

&lt;p&gt;表示を確認します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu_after.png&#34; alt=&#34;&#34; /&gt;
メニューができました！各リンクが正しいかも確認しておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;blog記事のurlを変更する&#34;&gt;blog記事のURLを変更する&lt;/h2&gt;

&lt;p&gt;続いてブログ記事が&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;となるように変更していきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;プロジェクト/_config.yml&lt;/code&gt;を変更しましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/108/title.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;permalink:&lt;/code&gt;を&lt;code&gt;/:title/&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new_post_name:&lt;/code&gt;の項目を&lt;code&gt;blog/:title.md&lt;/code&gt;に変更します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/blog_title.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;新しい記事を作成してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/new_post.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;/source/blog&lt;/code&gt;の下に記事が追加されるようになりました。&lt;/p&gt;

&lt;p&gt;トップページを確認してみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/108/top.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; にはブログ一覧が表示されます。&lt;/p&gt;

&lt;p&gt;記事をクリックして飛んでみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/art.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;の形で記事が発行されました！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hexo deploy -g&lt;/code&gt;でデプロイです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/108/done.png&#34; alt=&#34;&#34; /&gt;
今回もコマンドと設定ファイルの編集で簡単にルーティングをすることができました。&lt;/p&gt;

&lt;p&gt;かなりサイトらしくなってきましたね！&lt;/p&gt;

&lt;p&gt;次回はサイドバーをカスタマイズしてみたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>みんなでﾀﾞｧｼｴﾘｲｪｽ！遅延すると光るガジェットをつくるIoTハンズオンを開催しました！</title>
      <link>https://dotstud.io/blog/train-nefry-ihandson-report/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/train-nefry-ihandson-report/</guid>
      
      <description>

&lt;p&gt;どうも、ポキオです。9月27日に、Nefry BTを使ったIoT初心者向けハンズオンを開催しました。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;https://dotstudio.connpass.com/event/61189/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/130/1.png&#34; alt=&#34;IoTハンズオン！【ﾀﾞｧ】Nefry BTで電車遅延すると光るガジェットを作ろう【ｼｪｲﾘｲｪｽ】&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://dotstudio.connpass.com/event/61189/&#34;&gt;IoTハンズオン！【ﾀﾞｧ】Nefry BTで電車遅延すると光るガジェットを作ろう【ｼｪｲﾘｲｪｽ】&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;今回、ハンズオンのお題は&lt;strong&gt;遅延すると光るガジェット&lt;/strong&gt;。IoTLTでおなじみ（？）のガジェットをみんなで作りました！&lt;/p&gt;

&lt;h2 id=&#34;イベント概要&#34;&gt;イベント概要&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/wionode-ifttt-handson-report/&#34;&gt;ゆっきんさんのハンズオン&lt;/a&gt;と同じく、&lt;strong&gt;デジタルハリウッド大学のLabProto&lt;/strong&gt;をお借りしてハンズオンを開催しました。色々なツールが所狭しと並び、机や椅子もまさに&lt;strong&gt;ラボ&lt;/strong&gt;な雰囲気を醸し出してる、お洒落な会場でした。
&lt;img src=&#34;https://dotstud.io/img/blog/130/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;IoTLTでは、私はもっぱら京急ネタで登壇させていただきましたが、今回は参加者の好きな路線を設定して、その路線が遅延したらNefry BTのLEDが光るようなガジェットを作成してみました。&lt;/p&gt;

&lt;h2 id=&#34;nefry-btって&#34;&gt;Nefry BTって？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/nefrybt/&#34;&gt;Nefry BT&lt;/a&gt;とは、ESP32というWi-FiとBLEと搭載したチップが載った、フリスクサイズの開発ボードのこと。&lt;a href=&#34;https://kibidango.com/513&#34;&gt;過去に行われたクラウドファンディング&lt;/a&gt;では437%を達成した、今話題のモジュールです。
&lt;img src=&#34;https://dotstud.io/img/blog/130/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;大切なものはすべて実装済み&#34;&gt;大切なものはすべて実装済み&lt;/h3&gt;

&lt;p&gt;IoTなガジェットを作る上で、ハードウェアの知識が無いと困ることも多いと思います。&lt;/p&gt;

&lt;p&gt;Nefry BTは開発ボードでよくある&lt;strong&gt;GPIO&lt;/strong&gt;はもちろん搭載していて、さらに&lt;strong&gt;フルカラーのLED&lt;/strong&gt;や&lt;strong&gt;ディスプレイ&lt;/strong&gt;、そして半田ごて不要で様々なセンサーを接続できる&lt;strong&gt;Groveシステム&lt;/strong&gt;にも対応。買ってすぐLチカや開発が始められる上に、Groveのセンサーを接続すれば色々なガジェットを作ることができます。&lt;/p&gt;

&lt;h3 id=&#34;便利な関数で楽々プログラミング&#34;&gt;便利な関数で楽々プログラミング&lt;/h3&gt;

&lt;p&gt;Nefry BTは設定がWebブラウザ上からできるなど、&lt;strong&gt;初心者にも非常に優しい作り&lt;/strong&gt;になっています。&lt;/p&gt;

&lt;p&gt;さらに&lt;a href=&#34;https://nefry.studio/&#34;&gt;ドキュメント&lt;/a&gt;では、便利な関数が多数公開されています。たとえば実装済みのフルカラーLEDは、コード上で複雑な初期化不要で、&lt;a href=&#34;https://nefry.studio/NefryLibrary/%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A8%E3%82%A2%E9%96%A2%E9%80%A3%E9%96%A2%E6%95%B0/#setled&#34;&gt;簡単に色を指定&lt;/a&gt;できます。&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;電車のおもちゃ（ダイソーで売ってる&lt;strong&gt;プチ電車シリーズ&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;Nefry BT&lt;/li&gt;
&lt;li&gt;USB延長ケーブル&lt;/li&gt;
&lt;li&gt;トレーシングペーパー&lt;/li&gt;
&lt;li&gt;両面テープ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;筆者の環境&#34;&gt;筆者の環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MacBook Air (13-inch, Mid 2013)&lt;/li&gt;
&lt;li&gt;OS X Yosemite 10.10.5&lt;/li&gt;
&lt;li&gt;Arduino IDE 1.8.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;電車の中にnefry-btをセット&#34;&gt;電車の中にNefry BTをセット&lt;/h2&gt;

&lt;p&gt;そんなNefry BTですが、実はダイソーで売っている電車のおもちゃの内部にピッタリ入ります。
&lt;img src=&#34;https://dotstud.io/img/blog/130/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nefry BTのUSBコネクター部分が電車の外に出るように、電車のおもちゃには少し加工をしています。USBコネクターにはUSB延長ケーブルを接続して、給電を行います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/130/6.png&#34; alt=&#34;&#34; /&gt;
また、LEDの光が拡散するように、電車の窓部分には内側からトレーシングペーパーを貼り付けています。Nefry BTに実装されているLEDだけでも、こんな感じで電車を光らせる事ができます！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/130/5.png&#34; alt=&#34;&#34; /&gt;
皆さん、もくもくと作成中！&lt;/p&gt;

&lt;h2 id=&#34;肝心のコーディング&#34;&gt;肝心のコーディング&lt;/h2&gt;

&lt;p&gt;ハンズオンでは特定の路線に遅延が発生したら光らせるプログラムを書き込みました。書き込みはArduino IDEより行いました。ちなみに、&lt;a href=&#34;https://dotstud.io/docs/nefrybt-wifi-setup/&#34;&gt;&lt;strong&gt;このページ&lt;/strong&gt;&lt;/a&gt;を参考にNefry BTのセットアップを済ませておくと、コード上でWi-Fi接続のシーケンスを実装しなくて済むので、非常に便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;WiFiClientSecure.h&amp;gt; // HTTPS通信のために必要

void setup() {
  // 何もしない
}

void loop() {
  // JSONを取得する
  String trainDelayJson = getTrainDelayJson();

  // JSONに特定の路線名が含まれているか確認する
  if (trainDelayJson.indexOf(&amp;quot;（好きな路線名）&amp;quot;) &amp;gt; 0) {
    blinkFor30Sec(255, 0, 0); // 赤く光らせる
  } else {
    blinkFor30Sec(0, 0, 255); // 青く光らせる
  }
}

// 鉄道遅延情報のjsonさんから、遅延情報（JSON）を取得する
String getTrainDelayJson() {
  WiFiClientSecure client; // 変数を宣言

  // サーバーにHTTPSのデフォルトポート（443）でアクセスしてみる
  if ( !client.connect(&amp;quot;rti-giken.jp&amp;quot;, 443) ) {
    Nefry.println(&amp;quot;接続失敗&amp;quot;);
    return &amp;quot;&amp;quot;;
  }

  client.print(String(&amp;quot;GET /fhc/api/train_tetsudo/delay.json HTTP/1.1\r\n&amp;quot;) +
               &amp;quot;Host: rti-giken.jp\r\n&amp;quot; +
               &amp;quot;Connection: close\r\n\r\n&amp;quot;); // HTTP-GETのリクエストメッセージを書く

  // レスポンスが来るまでちょっと待つ
  Nefry.ndelay(1000);

  // HTTP-GETのレスポンスを保存しておく変数
  String response = &amp;quot;&amp;quot;;

  // レスポンスを変数に格納する
  while (client.available()) {
    response += client.readStringUntil(&#39;\r&#39;);
  }

  Nefry.println(&amp;quot;接続成功&amp;quot;);
  Nefry.println(response);

  return response;
}

// 30秒間、500msecおきに点灯と消灯を繰り返します
void blinkFor30Sec(int r, int g, int b) {
  for (int i = 0; i &amp;lt; 30; i++) {
    Nefry.setLed(r, g, b);
    Nefry.ndelay(500);
    Nefry.setLed(0, 0, 0);
    Nefry.ndelay(500);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nefry BTから定期的にWi-Fi経由で鉄道の遅延情報を取得し、特定の路線が遅れているかどうかを監視するようにしています。遅延情報は&lt;a href=&#34;https://rti-giken.jp/fhc/api/train_tetsudo/&#34;&gt;&lt;strong&gt;鉄道遅延情報のjson&lt;/strong&gt;&lt;/a&gt;さんより、JSON形式のデータを受信することで実現しています。&lt;/p&gt;

&lt;h2 id=&#34;拡張性で広がるiot工作&#34;&gt;拡張性で広がるIoT工作&lt;/h2&gt;

&lt;p&gt;今回は、Nefry BTに乗っているハードウェアを使って工作をしました。前途の通り、Nefry BTにはGPIOとGroveシステムにも対応しているので、LEDを増設したり、センサーを追加するなどして、簡単に拡張できます。&lt;/p&gt;

&lt;p&gt;みなさんもNefry BTでIoT工作に踏み出してみませんか？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>フェスでテンあげ☆ 光るカセットテープ</title>
      <link>https://dotstud.io/blog/gyaruden-kyoko-led-cassette/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/gyaruden-kyoko-led-cassette/</guid>
      
      <description>

&lt;p&gt;みなさん、チョリおつ！ギャル電きょうこです。ギャルによるギャルのための電子工作をテクノロジーを提案するユニット、ギャル電で活動しておりまっす。今回は、フェスに相性ピッタリの光りものアクセの作り方を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;何を光らせたらエモいのか-問題&#34;&gt;何を光らせたらエモいのか?!問題&lt;/h2&gt;

&lt;p&gt;光るとモテる！
でも、なんでも光らせただけでかっこよくなるわけではないのです。
ギャル電も&lt;strong&gt;とりあえず光らせてみたけど全然ぐっと来ないものを作ってしまう&lt;/strong&gt;ことがよくあります。
&lt;img src=&#34;https://dotstud.io/img/blog/129/1.png&#34; alt=&#34;&#34; /&gt;
今回は、まずとりあえず首からさげられる形で単純にＬＥＤテープを貼り付けたものをつくってみましたが&lt;strong&gt;ときめきがゼロ！！！！
こんなもの！！！！！&lt;/strong&gt; 泣きながら窓から投げ捨てて、そっとあとで拾いに行きました。&lt;/p&gt;

&lt;p&gt;そのあと、おやつをたべながらテンションを上げるために&lt;strong&gt;スピードコア&lt;/strong&gt;（めっちゃテンポの速いナイスなミュージック）と&lt;strong&gt;バニラのテーマソング&lt;/strong&gt;を交互に聴いていたら&lt;/p&gt;

&lt;p&gt;天啓が下りてきました。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;カセットテープなら、首から下げる光もののケースにジャストフィット！！そしてエモい&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;ありがとう、スピードコアの神よ！
みんなもアイデアに詰まったときはスピードコア聴くといいよ。&lt;/p&gt;

&lt;h2 id=&#34;材料を揃えよう&#34;&gt;材料を揃えよう&lt;/h2&gt;

&lt;p&gt;今回の材料は、基板や配線以外はだいたい100均で揃えることができます。&lt;/p&gt;

&lt;p&gt;ボードは超小型ボード&lt;strong&gt;Digispark互換機&lt;/strong&gt;を使用しています。最初のセットアップは少し面倒ですが、安くて小さいので気軽に電子工作を作ることができます。&lt;/p&gt;

&lt;h3 id=&#34;材料&#34;&gt;材料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;カセットテープ（光を通すように透明なものか乳白色で透けるものがおすすめです）&lt;/li&gt;
&lt;li&gt;LEDテープ（1m60個ＬＥＤついてるテープを10LED分）&lt;/li&gt;
&lt;li&gt;ひも（ストラップはお好みで。わたしは柄がかわいい靴ひもを使いました）&lt;/li&gt;
&lt;li&gt;リング（事務用品コーナーに売ってる簡単な鉄の輪っか）&lt;/li&gt;
&lt;li&gt;Digispark互換機（amazonとかでこの名前で検索すると買えます）&lt;/li&gt;
&lt;li&gt;線材（普通の電線でOKですが、コネクタは付いてるとプログラムを入れなおすときとかにちょっと便利です）&lt;/li&gt;
&lt;li&gt;インシロック&lt;/li&gt;
&lt;li&gt;両面テープ（超強力）&lt;/li&gt;
&lt;li&gt;ニッパー&lt;/li&gt;
&lt;li&gt;ワイヤストリッパー&lt;/li&gt;
&lt;li&gt;はんだごて&lt;/li&gt;
&lt;li&gt;はんだ線&lt;/li&gt;
&lt;li&gt;ピンバイスまたはハンドドリル（本体穴あけ用）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ledのケース用にカセットテープを加工する&#34;&gt;LEDのケース用にカセットテープを加工する&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;まずはカセットテープの四隅のねじを外して分解します。
このとき、&lt;strong&gt;ねじが超小さいのでなくさないようになんか入れ物にいれたりマスキングテープに貼り付けておく&lt;/strong&gt;と便利です。&lt;/p&gt;

&lt;p&gt;また、&lt;strong&gt;分解する前に元の形がわかるように写真を撮っておくとあとですごい役立つのでおすすめ&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;磁気テープ部分は今回は使わないので軸からはさみで切り離して外します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/3.png&#34; alt=&#34;&#34; /&gt;
配線を通すため2.5センチくらいカセットテープの上端をカットして穴をあけておきます。
磁気テープ以外は、&lt;strong&gt;ディテールとしてエモいので元の位置に収まるように戻して使用&lt;/strong&gt;します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/4.png&#34; alt=&#34;&#34; /&gt;
リングを通すための穴をカットしたほうとは逆の上端にピンバイスであけておきます。&lt;/p&gt;

&lt;p&gt;以上でカセットテープの加工は完了です。&lt;strong&gt;後でさみしい気持ちになってしまうので、ねじは絶対に無くさないように注意です&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ledと基板のはんだ付け&#34;&gt;LEDと基板のはんだ付け&lt;/h2&gt;

&lt;p&gt;カセットテープにおさまるように、LEDテープを半分（LED5個ずつ）にカットして使用します。
&lt;img src=&#34;https://dotstud.io/img/blog/129/5.png&#34; alt=&#34;&#34; /&gt;
写真の丸がついてるところを何も接続しない状態ではんだづけします。
予備はんだってやつで、やっておくとあとで配線と部品をはんだ付けするのがスムーズになります。&lt;/p&gt;

&lt;p&gt;Digispark基板（おもて）は、5V、GND、P0と書いてある穴の上に予備はんだをします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/6.png&#34; alt=&#34;&#34; /&gt;
Digispark基板の裏と9V電池用のスナップ配線も予備はんだをします。
Digispark基板（うら）は、VIN、GNDを予備はんだします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※裏側の配線を間違えて5V,GNDで接続すると基板めっちゃ熱くなってなんか焦げたにおいして超ビビるので要注意です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/7.png&#34; alt=&#34;&#34; /&gt;
予備ハンダ作業が終わったら、まずはDigispark基板の裏側と9V電池用スナップをはんだ付けします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VIN － 赤い配線（電池プラス）&lt;/li&gt;
&lt;li&gt;GND － 黒い配線（電池マイナス）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をそれぞれ接続します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/8.png&#34; alt=&#34;&#34; /&gt;
次は、LEDに接続するための3本の線をDigispark基板の表側にはんだ付けします。
LEDに接続したときに、以下のように配線がつながるようにします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5V － （LED側）5V：今回の作例では赤い配線&lt;/li&gt;
&lt;li&gt;GND － （LED側）GND：今回の作例では白い配線&lt;/li&gt;
&lt;li&gt;P0 － （LED側）DIN：今回の作例では緑の配線&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/9.png&#34; alt=&#34;&#34; /&gt;
2本のLEDテープの間もはんだ付けでつなげます。
このとき、LEDテープの進行方向の矢印の向きを間違えないように注意します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/10.png&#34; alt=&#34;&#34; /&gt;
全体図はこんな感じです。
これで、LED配線のはんだ付けは完了でっす。&lt;/p&gt;

&lt;h2 id=&#34;プログラムの書き込み準備&#34;&gt;プログラムの書き込み準備&lt;/h2&gt;

&lt;p&gt;ここからは、初心者にはちょっと気合いのいる作業になります。&lt;/p&gt;

&lt;p&gt;でも、だいたい大丈夫！
わからない単語が出てきたら&lt;strong&gt;速攻ググるとわりとわかるようになります&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;つらくなったときは、光ってモテる近い将来を想像したりスピードコア聴いて気分転換したりご飯食べたり寝たりしてのりこえていきましょう。&lt;/p&gt;

&lt;p&gt;まずは、Digisparkボードにプログラムを書き込むためにArduino IDEというソフトウェアをPCにインストールします。&lt;/p&gt;

&lt;p&gt;下記リンクはMacでの説明なので、Windowsユーザーはダウンロードするファイルを選択するときに、Windowsのリンクを選んでダウンロードしてインストールを行ってください。&lt;/p&gt;

&lt;p&gt;【参考】&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;Arduino IDEをPCにインストール&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;arduinoideでdigisparkのボードを書き込めるように設定する&#34;&gt;ArduinoIDEでDigisparkのボードを書き込めるように設定する&lt;/h3&gt;

&lt;p&gt;英語のページになりますが、以下のページを参考にインストールを行いました。
&lt;a href=&#34;http://digistump.com/wiki/Digispark/tutorials/connecting&#34;&gt;http://digistump.com/wiki/Digispark/tutorials/connecting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※環境はWindows10（64bit）、ArduinoIDE 1.8.3にて動作を確認しました。&lt;/p&gt;

&lt;p&gt;大雑把にいうとWindowsの場合には、&lt;/p&gt;

&lt;p&gt;①ドライバをダウンロードしてインストールする
&lt;a href=&#34;https://github.com/digistump/DigistumpArduino/tree/master/tools&#34;&gt;https://github.com/digistump/DigistumpArduino/tree/master/tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;②ArduinoIDEを起動し、ファイル→環境設定→「追加のボードマネージャのURL」に
&lt;code&gt;http://digistump.com/package_digistump_index.json&lt;/code&gt;
をコピペで追加して「OK」ボタンで環境設定を閉じる&lt;/p&gt;

&lt;p&gt;③ツール→ボード→ボードマネージャをクリック&lt;/p&gt;

&lt;p&gt;④検索窓をクリックし、タイプの項目で「提供された」を選択。
「Digistump AVR Boards」を検索し、検索結果をクリックして「インストール」をクリック&lt;/p&gt;

&lt;p&gt;⑤インストール後、ツールから
「ボード：Digispark(Default - 16.5mhz)」
をクリックで選択&lt;/p&gt;

&lt;p&gt;上記手順で書き込み準備は完了です。&lt;/p&gt;

&lt;p&gt;プログラムは、以下のものをコピーしてArduinoIDEにペーストします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Adafruit_NeoPixel.h&amp;gt;
#ifdef __AVR__
  #include &amp;lt;avr/power.h&amp;gt;
#endif

//neopixcel用の設定部分

//neopixelを接続するPINを設定
#define PIN_LED 0

//neopixelのLEDの数を設定
#define NUM_LEDS 10

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, PIN_LED, NEO_GRB + NEO_KHZ800);

bool oldState = HIGH;
int showType = 0;

void showStrip() {
 #ifdef ADAFRUIT_NEOPIXEL_H
   strip.show();
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   FastLED.show();
 #endif
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
 #ifdef ADAFRUIT_NEOPIXEL_H
   strip.setPixelColor(Pixel, strip.Color(red, green, blue));
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   leds[Pixel].r = red;
   leds[Pixel].g = green;
   leds[Pixel].b = blue;
 #endif
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i &amp;lt; 17; i++ ) {
    setPixel(i, red, green, blue);
  }
  showStrip();
}

// ここからNeoPixelのアニメーション設定


void FadeInOut(byte red, byte green, byte blue){
  float r, g, b;

  for(int k = 0; k &amp;lt; 256; k=k+1) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }

  for(int k = 255; k &amp;gt;= 0; k=k-2) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }
}

void Strobe(byte red, byte green, byte blue, int StrobeCount, int FlashDelay, int EndPause){
  for(int j = 0; j &amp;lt; StrobeCount; j++) {
    setAll(red,green,blue);
    showStrip();
    delay(FlashDelay);
    setAll(0,0,0);
    showStrip();
    delay(FlashDelay);
  }

 delay(EndPause);
}

void Twinkle(byte red, byte green, byte blue, int Count, int SpeedDelay, boolean OnlyOne) {
  setAll(0,0,0);

  for (int i=0; i&amp;lt;Count; i++) {
     setPixel(random(NUM_LEDS),red,green,blue);
     showStrip();
     delay(SpeedDelay);
     if(OnlyOne) {
       setAll(0,0,0);
     }
   }
}
void TwinkleRandom(int Count, int SpeedDelay, boolean OnlyOne) {
  setAll(0,0,0);

  for (int i=0; i&amp;lt;Count; i++) {
     setPixel(random(NUM_LEDS),random(0,255),random(0,255),random(0,255));
     showStrip();
     delay(SpeedDelay);
     if(OnlyOne) {
       setAll(0,0,0);
     }
   }
}

//

void setup()
{
    pinMode(PIN_LED, OUTPUT);
    digitalWrite(PIN_LED, LOW);
   #if defined (__AVR_ATtiny85__)

   if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
}

void loop()
{
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x36, 0xEB, 0xFF);
    FadeInOut(0x36, 0xEB, 0xFF);
    FadeInOut(0x36, 0xEB, 0xFF);
    Twinkle(0xff, 40, 99, 10, 50, false);
    Twinkle(0xff, 40, 99, 10, 50, false);
    TwinkleRandom(20, 100, false);
    TwinkleRandom(20, 100, false);
    Strobe(0xff, 0xff, 0xff, 10, 50, 1000);
    Strobe(0xff, 0xff, 0xff, 10, 50, 1000);
    Strobe(0xff, 0xAB, 0xf9, 10, 50, 1000);
    Strobe(0xff, 0xAB, 0xf9, 10, 50, 1000);
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードはこの解説を書くのにちょっと疲れちゃったので光る大五郎のコードをセルフコピペしました。同じプログラムで光ります。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;書き込むときの注意ポイント&#34;&gt;書き込むときの注意ポイント&lt;/h4&gt;

&lt;p&gt;PCにDigisparkを差し込まない状態で、ArduinoIDEで「→（マイコンボードに書き込み）」をクリック
以下のメッセージが表示されたらPCにDigisparkを差し込む
&lt;img src=&#34;https://dotstud.io/img/blog/129/ide1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下記のメッセージが表示されたら書き込み完了！
&lt;img src=&#34;https://dotstud.io/img/blog/129/ide2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※うまく書き込みができないときには、「Digispark 互換 Windows10(またはMacとか自分の使ってるPCのOS)」のワードとかで検索するといいよ&lt;/p&gt;

&lt;h2 id=&#34;カセットテープとled配線を合体して組み立てよう&#34;&gt;カセットテープとLED配線を合体して組み立てよう&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/11.png&#34; alt=&#34;&#34; /&gt;
写真のように、配線用に穴をあけたほうのカセットテープ部品にLEDテープを貼ります。
カセットテープの元々の部品を組み込んで、ねじを締めてケースを閉じます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/12.png&#34; alt=&#34;&#34; /&gt;
後ろの配線はフィーリングでまとめて、真ん中の穴にインシロックを通して9V電池を固定します。電池の裏側とDigisparkの裏側に両面テープを貼っておくと、&lt;strong&gt;フェスでテンションが上がりすぎて激しく動いても部品が落ちません&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;LEDの電源を入れるときには、9V電池のスナップをつけて消したいときには外します。
つまり、スナップのつけ外し以外に特にスイッチはありません。&lt;/p&gt;

&lt;p&gt;光り方のプログラムによって、電池の消費量は変わります。
今回のプログラムだとだいたい連続使用で３時間程度で電池がなくなる感じです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/13.png&#34; alt=&#34;&#34; /&gt;
ピンバイスで開けた穴に、無理やりリングを通して好きなひもやストラップをつければ完成です！
やったね！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/129/14.png&#34; alt=&#34;&#34; /&gt;
この光るカセットテープ、ギャル電は&lt;strong&gt;無人島フェスやULTRAJAPANで実際に使ってみたけどやっぱめっちゃモテた&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;光るとめっちゃ楽しいから、みんなも作っていろんなところに遊びに行ってみてね☆&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#linedevday 2017レポート！ Clova連携で期待のGateboxの技術話を聞いてみたよ</title>
      <link>https://dotstud.io/blog/linedevday-report-2017-gatebox/</link>
      <pubDate>Thu, 28 Sep 2017 14:45:35 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/linedevday-report-2017-gatebox/</guid>
      
      <description>

&lt;p&gt;こんにちは、のびすけです。&lt;/p&gt;

&lt;p&gt;今日は&lt;a href=&#34;http://linedevday.linecorp.com/jp/2017/&#34;&gt;LINE DEVELOPER DAY 2017&lt;/a&gt;にお邪魔しています。&lt;/p&gt;

&lt;p&gt;Gateboxの話を聞いていましたが、&lt;strong&gt;Gateboxの技術にNode.jsが採用されていたことが驚きです。&lt;/strong&gt;って感じの話を書きます。&lt;/p&gt;

&lt;p&gt;(速報のりなので、誤字脱字あったらごめんなさい）&lt;/p&gt;

&lt;h2 id=&#34;line-developer-day-2017&#34;&gt;LINE DEVELOPER DAY 2017&lt;/h2&gt;

&lt;p&gt;LINEが開催している開発者向けのカンファレンスイベントです。&lt;/p&gt;

&lt;p&gt;LINEや周辺サービスの裏側の技術や今後の展開についての発表があるイベントです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3つの会場でパラレルでトークが展開されていきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/1-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;個人的には、今回は&lt;a href=&#34;https://clova.ai&#34;&gt;Clova&lt;/a&gt;やBotの話などを期待しています。（会場で、執筆してるので現在進行形）&lt;/p&gt;

&lt;h2 id=&#34;セッション-gateboxのこれまでとこれから&#34;&gt;セッション「Gateboxのこれまでとこれから」&lt;/h2&gt;

&lt;p&gt;ランチ後の最初のセッションです。&lt;/p&gt;

&lt;p&gt;Gateboxの紹介と今後についてを紹介するセッションでした。ちなみに、当日の発表資料は&lt;a href=&#34;https://www.slideshare.net/linecorp/gatebox-how-we-got-here-and-where-were-going&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gatebox.ai/&#34;&gt;Gatebox&lt;/a&gt;は好きなキャラクターと一緒に暮らせる世界初のバーチャルホームロボットです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/2-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;写真の通り、2次元のキャラクターがパーソナルアシスタントをしてくれるロボットです。
ロックマンエグゼのPETのイメージですね（分かる人いるかな&amp;hellip;）&lt;/p&gt;

&lt;p&gt;iOSのSiriにビジュアルが付いたものをイメージすると良いかもしれません。&lt;/p&gt;

&lt;p&gt;CF映画を彷彿させますね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/2-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Gateboxは2017年3月に&lt;a href=&#34;http://japanese.engadget.com/2017/03/02/line-gatebox-ai/&#34;&gt;LINEと資本提携&lt;/a&gt;をしてClovaとの連携が期待されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;発表はGatebox代表の武地さん。&lt;/p&gt;

&lt;p&gt;「AIやスマートスピーカーが話題になってきているけど人間が話しかけたくなるインターフェイスになっていない」、「実際に話しかけたくなるものを作りたい」という想いで
&lt;strong&gt;人間と同じようにキャラクターと生活できる世界&lt;/strong&gt;を目指してGateboxを開発しているそうです。&lt;/p&gt;

&lt;h2 id=&#34;gateboxとclova&#34;&gt;GateboxとClova&lt;/h2&gt;

&lt;p&gt;世の中のスマートスピーカーはクラウド上のAIなどが処理を行って言葉を返すけれど、Gateboxは性質上、ハードウェア側がリッチである必要があります。&lt;/p&gt;

&lt;p&gt;Gatebox側では見た目のリッチさ、キャラクターの動きなどユーザーと触れる部分の見た目、振る舞いに注力しているのが他のスピーカーデバイスなどとの大きな違いです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;逆にLINEのClovaはクラウド側やAIの仕組みに注力しているので、お互いの得意分野を生かしてより人間味のある仕組みを検討していくとのことです。&lt;/p&gt;

&lt;p&gt;確かに現状のそういったデバイスはどうにも機械的なものが多いので、インターフェイスが自分好みのキャラクターになれば、&lt;strong&gt;話しかけたくなるAI&lt;/strong&gt;ができますね。&lt;/p&gt;

&lt;h2 id=&#34;gateboxの技術話が初公開&#34;&gt;Gateboxの技術話が初公開&lt;/h2&gt;

&lt;p&gt;今回、話を聞けてよかったなぁと特に思ったのがここです。&lt;/p&gt;

&lt;p&gt;ここからは久森さんに交代です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gateboxの技術的な話を対外的にするのは今回が初めて&lt;/strong&gt;だそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;大きく分けるとこれが構成要素になるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクション&lt;/li&gt;
&lt;li&gt;音声発話&lt;/li&gt;
&lt;li&gt;センシング（人感センサやカメラ、マイクなど）&lt;/li&gt;
&lt;li&gt;ネットワーク（Wi-Fi、Bluetooth）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ハードウェア的な部分では中身の基盤部分も紹介してくれました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;また、内部ではLinuxが動いていて、そこに色々なソフトウェアが動いています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unity: キャラクターのアクションなど&lt;/li&gt;
&lt;li&gt;Node.js: 音声認識、センサーとのやりとり、司令塔的なポジション&lt;/li&gt;
&lt;li&gt;C++: 顔認識のライブラリなどとの通信&lt;/li&gt;
&lt;li&gt;SQLite: 顔を覚えたり、発話を記憶させたり&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、クラウド側で連動しているサービスの紹介です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;クラウド側でもNode.jsを中心にAPIを呼び出しています。
フルスクラッチで作るよりも、PaaSやBaaS系のサービスに乗せることでサービスの本質的な機能に集中して開発を進めているらしく、スタートアップのお手本のような開発だなぁと思いました。&lt;/p&gt;

&lt;p&gt;例えば、メールを送る部分はSendGridで、それをAzureなどのPaaSから呼び出したりしているそうです。&lt;/p&gt;

&lt;h3 id=&#34;node-jsをメインで採用している理由&#34;&gt;Node.jsをメインで採用している理由&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;個人的にはC++などではなく中心にNode.jsが利用されていることが驚きでした。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;僕はNode.js大好きなんですけど、実際のハードウェアプロダクトの中でNode.jsが動いているという例をあまり聞いたことがなかったので、パフォーマンス面や安定稼働とかの側面に不安は無いのかなど気になりすぎました。。。笑&lt;/p&gt;

&lt;p&gt;気になったのでセッション後のAsk the Speakerのコーナーで聞きましたが、開発スタート時にNode.jsを使えるエンジニアが多く、開発スピードを優先して選んだそうです。&lt;/p&gt;

&lt;p&gt;確かに内部のソフトウェアではNode.jsからシリアルの値を呼び出して、サーバー側でもNode.jsを動かしてと開発効率はバツグンにいいですし、チームの規模感や文化を優先する選択はさすがだと思いました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/5-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;現状は339台作っているそうですが、今後量産体制に入っていくときのアーキテクチャ検討が課題だそうです。&lt;/p&gt;

&lt;p&gt;サーバー側のアクセス数も増えていき、ユーザーの予期せぬ使い方なども増えていくため、安定稼働やスケールの仕組みを考える必要がありそうですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/128/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;けっこう込み入った話も気軽に答えてくれてGateboxの皆さんの暖かさを感じました。&lt;/p&gt;

&lt;p&gt;ありがとうございました！&lt;/p&gt;

&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;ClovaもGateboxはすごく未来を感じさせてくれるプロダクトなので、それらの組み合わせは本当に期待ですね。&lt;/p&gt;

&lt;p&gt;APIやSDKが提供され始めたらぜひ使ってみたいです。&lt;/p&gt;

&lt;p&gt;まだLINE DEVELOPER DAYは続いてますが面白いセッションが多いので、ツイートを　#linedevdayのハッシュタグで振り返ると面白いですよ。&lt;/p&gt;

&lt;p&gt;それでは、現場からは以上です :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【報告】青山学院大学で4日間集中IoT講習を行いました</title>
      <link>https://dotstud.io/blog/aogaku-iot-summer-report/</link>
      <pubDate>Tue, 26 Sep 2017 19:31:51 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/aogaku-iot-summer-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃちゃまるです。
&lt;a href=&#34;https://dotstud.io/blog/aogaku-iot-course-report/&#34;&gt;前回の体験講習会&lt;/a&gt;に引き続き、青山学院大学でIoT講習会を行ったので、その様子をお伝えしたいと思います！&lt;/p&gt;

&lt;h2 id=&#34;テーマは-宅配便の不在通知を自分のlineに送る&#34;&gt;テーマは「宅配便の不在通知を自分のLINEに送る」&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.aim.aoyama.ac.jp/info/lect/7141/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/124/title.png&#34; alt=&#34;title.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IoT講習会は3時間 x 4日間で実施しました。「IoT」「電子工作」「プログラミング」の基礎知識を固めながら「宅配便の不在通知を自分のLINEに送る」仕組みを作るのが目標です。&lt;/p&gt;

&lt;p&gt;まずは座学で「IoT」の定義や概要を学んでアイデアを実現する方法を探り、その後は実際にセンサを使ったりLINE通知を送るプログラムを作ったりしながら実装を学んでいきます。&lt;/p&gt;

&lt;h2 id=&#34;1日目-基礎知識を身につける&#34;&gt;1日目：基礎知識を身につける&lt;/h2&gt;

&lt;p&gt;講座の序章として、まずは座学で基礎を学習していきます。
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/iot.png&#34; alt=&#34;iot.png&#34; /&gt;
世界各国の事例 - 画像は「ゴミの量を計測して収集を最適化する街」の例。
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;IoTの定義や概要、世界各国のIoT事例を紹介し、IoTへの理解を深めます。電子工作、プログラミング、開発環境の構築についても学び、1日目はNode.jsの環境を作成して実行するところまでトライしました。&lt;/p&gt;

&lt;h2 id=&#34;2日目-電子工作にトライ&#34;&gt;2日目：電子工作にトライ&lt;/h2&gt;

&lt;p&gt;続いて2日目からは、「不在通知を受け取ったことの取得」と「LINE通知」の実装に必要な仕組みを実際に作りながら学んでいきます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/overview.png&#34; alt=&#34;overview.png&#34; /&gt;
実装の構成を説明
&lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;音のデータを取得する&lt;/li&gt;
&lt;li&gt;取得したデータをWi-Fi通信でサーバに送る&lt;/li&gt;
&lt;li&gt;サーバにデータが送られたらLINEで通知する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったように、機能ごとに分けてトライしていきます。&lt;/p&gt;

&lt;h3 id=&#34;使用したのはwionodeとarduino-uno&#34;&gt;使用したのはWioNodeとArduino UNO&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/device2.png&#34; alt=&#34;device2.png&#34; /&gt;
今回使用したデバイスの一部
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;今回は「Arduino UNO」という入門向きのデバイスに、「Grove」というコネクタの拡張シールドを取り付け実装してみます。Wi-Fi接続には、こちらもGroveで配線できるWioNodeを利用。難しい配線やプログラミングを行わずとも自作IoTデバイスを作ることができます。&lt;/p&gt;

&lt;p&gt;Arduino UNOを使った簡単なプログラムから始め、ステップバイステップで学んでいきます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/device.png&#34; alt=&#34;device.png&#34; /&gt;
Arduino UNOでLチカ（初歩的なプログラム）を試している様子
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;今回は上記の入門向きなデバイスやセンサ、パーツ類をセットにしたキットを用意しました。
&lt;img src=&#34;https://dotstud.io/img/blog/124/kit.png&#34; alt=&#34;kit.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arduino UNO&lt;/strong&gt;・・・専用ソフトウェアを使い、簡単にプログラムを書き込むことができるマイコンボード&lt;br /&gt;
&lt;strong&gt;Grove&lt;/strong&gt;・・・Seeed社が作ったセンサ等を繋げるコネクタ規格。様々なセンサとの配線部分を規格化することで難しい配線が不要に&lt;br /&gt;
&lt;strong&gt;Groveベースシールド&lt;/strong&gt;・・・Arduino UNOに取り付けることで、Groveコネクタを使えるようにする基盤&lt;br /&gt;
&lt;strong&gt;WioNode&lt;/strong&gt;・・・専用スマホアプリのみで設定ができるGrove対応マイコンボード&lt;/p&gt;

&lt;h2 id=&#34;3日目-デバイスを使ってiotを体感する&#34;&gt;3日目：デバイスを使ってIoTを体感する&lt;/h2&gt;

&lt;p&gt;3日目は実際にデバイスを使って人の動きや音を感知するセンサのデータを取得し、LINEやブラウザで確認してIoTを肌で体験してもらいました。&lt;/p&gt;

&lt;p&gt;Arduinoへのプログラムの書き込みやNode.jsを使ったサーバ構築に少し苦戦する学生もいましたが、徐々に慣れ参加者全員がデバイスの使い方とプログラミングの基本をマスターすることができました。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/jinkan.png&#34; alt=&#34;jinkan.png&#34; /&gt;
手元の照度センサが光を検知するとブラウザ上のLEDが光るプログラムを試している様子
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/teach2.png&#34; alt=&#34;teach2.png&#34; /&gt;
講師をつとめたちゃちゃまると参加してくれた学生さん。一様に真剣に取り組んでくれました。
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;柔軟なアイデアが飛び出した-不在通知を取得する方法&#34;&gt;柔軟なアイデアが飛び出した「不在通知を取得する方法」&lt;/h3&gt;

&lt;p&gt;基本を学んだあとはグループに分かれ、どうやったら「不在通知を受け取ったこと」がわかるかアイデアを出し合いました。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/idea.png&#34; alt=&#34;idea.png&#34; /&gt;
考えたアイデアを発表して共有
&lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ポストが開けられた時の光の変化を取得する&lt;/li&gt;
&lt;li&gt;不在の場合は2回インターホンを押してもらう&lt;/li&gt;
&lt;li&gt;配達のトラックの音を機械学習で判定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など、独創的なアイデアがたくさん飛び出しました。&lt;/p&gt;

&lt;p&gt;一緒に参加していただいていた根本先生、槌屋先生から「夜で照度の違いがない場合はどうするか」「車じゃなかった場合はどうか」などのフィードバックをいただきましたが、&lt;strong&gt;自分で出したアイデアだからこそIoTの課題が身近に見えてくる&lt;/strong&gt;ように感じました！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/award.png&#34; alt=&#34;award.png&#34; /&gt;
優秀チームに先生方から授賞式！
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;4日目-iotの課題や精度を考える&#34;&gt;4日目：IoTの課題や精度を考える&lt;/h2&gt;

&lt;p&gt;全ての機能の実装とデプロイが完了したあとは、発展として「不在通知を受け取ったこと」を取得する際の精度について考えてみました。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/124/data.png&#34; alt=&#34;data.png&#34; /&gt;
音センサを使った場合の閾値について
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;IoTデバイスは、昼・夜、静かな場所・うるさい場所など様々な環境で使われることが想定されます。今回は環境に順応できる相対的なデータを利用した実装方法を学びました。&lt;/p&gt;

&lt;p&gt;追加課題として出したArduinoの発展的なプログラムを解いてきてくれた学生さんもいて、今後につながる学習ができたのではないかと思います。&lt;/p&gt;

&lt;h2 id=&#34;文系でもiot&#34;&gt;文系でもIoT！？&lt;/h2&gt;

&lt;p&gt;参加してくれた学生さんのほとんどが文系で、今回の講習会で初めてプログラミングをしたという方もちらほら。
&lt;img src=&#34;https://dotstud.io/img/blog/124/teach.png&#34; alt=&#34;teach.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ArduinoやGroveなどの登場で、もはや専門知識ゼロでもIoTの仕組みを作ることができてしまう時代です。&lt;/p&gt;

&lt;h2 id=&#34;まとめと感想&#34;&gt;まとめと感想&lt;/h2&gt;

&lt;p&gt;四日間を通して、ほぼ全ての工程でスムーズに講習会を行うことができ、最後には無事参加してくれた全員がカリキュラムを完了することができました。&lt;/p&gt;

&lt;p&gt;想定していたペースよりかなり早く進めることができ、学生さんたちの知識の吸収力・応用力に僕たちも驚きました！
&lt;img src=&#34;https://dotstud.io/img/blog/124/all.png&#34; alt=&#34;all.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;弊社dotstudioでは、このような形で大学や企業でのIoT研修を行っております。ご興味のある方は是非弊社までお問い合わせください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsとNefry BTで監視システムを作ろう！ for Pepper #iotlt</title>
      <link>https://dotstud.io/blog/nefrybt-pepper-monitoring-system/</link>
      <pubDate>Thu, 21 Sep 2017 18:40:38 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nefrybt-pepper-monitoring-system/</guid>
      
      <description>

&lt;p&gt;こんにちは、のびすけです。&lt;/p&gt;

&lt;p&gt;IoTLT vol31で話をしたNefry BT（ESP32系ボード）を使ってネットワークカメラを作ってみたいと思います。&lt;/p&gt;

&lt;p&gt;発表資料もご参照ください。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a4d673e00b57428ebe22543efda38f6f&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/n0bisuke/pepperlian-xi-falsejian-shi-sisutemu-number-iotlt&#34;&gt;Pepper連携の監視システム? #iotlt by n0bisuke&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstudio.connpass.com/event/61189/&#34;&gt;Nefry BTのハンズオン&lt;/a&gt;も開催しますので合わせてご覧ください。&lt;/p&gt;

&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pepperを監視したい。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;謎ですが、Pepperを監視したいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://iotlt.connpass.com/event/65379/&#34;&gt;IoTLT vol31&lt;/a&gt;で話をした内容ですが、Pepperが動いてくれないので、Pepperがいつ動き出しても大丈夫なように&lt;strong&gt;Pepperを見守り&lt;/strong&gt;します。&lt;/p&gt;

&lt;p&gt;巷では「Pepperが見守り」だったり、「Pepperが防犯」みたいな先進的な取り組みがありますが、僕は&lt;strong&gt;あえてPepperを見守ります。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;完成イメージ&#34;&gt;完成イメージ&lt;/h2&gt;

&lt;p&gt;こんな感じで見守ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/c3fa7c7bb7dbdd5bba505e7a3de3b54b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そして、外からでもブラウザでPepperを見守るストリーミングサービスっぽいものを作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/09e912583e26710a13f0d49f4a866b55.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;使うもの&#34;&gt;使うもの&lt;/h2&gt;

&lt;p&gt;デバイスはNefry BTとGroveカメラの二つです。
（ちょっとジャンパワイヤ使います。）&lt;/p&gt;

&lt;h3 id=&#34;nefry-bt&#34;&gt;Nefry BT&lt;/h3&gt;

&lt;p&gt;ESP32ベースのArduino互換開発ボードです。
&lt;a href=&#34;http://sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-55W8&#34;&gt;千石電商さん&lt;/a&gt;でも購入できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d43d9926b0e5293b1045890bdd7fbc6c.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;grove-シリアルカメラキット&#34;&gt;Grove シリアルカメラキット&lt;/h3&gt;

&lt;p&gt;Grove対応のカメラです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.switch-science.com/catalog/1626/&#34;&gt;スイッチサイエンスさん&lt;/a&gt;などで購入できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/99ad24d2ffcfd62c8407d7db7fb753c5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;構成イメージ&#34;&gt;構成イメージ&lt;/h2&gt;

&lt;p&gt;カメラで撮影した画像をNefry BT経由でサーバーにアップロードします。
アップロードされた画像はNode.jsで立てたサーバーで受け取り、WebSocket(Socket.io)でブラウザに配信します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/bfdd4f3e37898144268c2edd086320dc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;作り方&#34;&gt;作り方&lt;/h2&gt;

&lt;p&gt;3つに分けて紹介します。&lt;/p&gt;

&lt;p&gt;デバイス（Nefry BT）で撮影した画像をサーバーに送りサーバーからブラウザに配信します。&lt;/p&gt;

&lt;p&gt;データの流れ的に&lt;code&gt;デバイス -&amp;gt; サーバー -&amp;gt; ブラウザ&lt;/code&gt;という流れです。&lt;/p&gt;

&lt;p&gt;全体のコードは&lt;a href=&#34;https://github.com/dotstudio/nefrybt_camera_server&#34;&gt;こちらのGitHubリポジトリ&lt;/a&gt;にあります。&lt;/p&gt;

&lt;h3 id=&#34;デバイス側-arduino&#34;&gt;デバイス側 - Arduino&lt;/h3&gt;

&lt;p&gt;デバイス側は&lt;a href=&#34;http://wiki.seeed.cc/Grove-Serial_Camera_Kit/&#34;&gt;Grove - Serial Camera Kitの公式Wiki&lt;/a&gt;にあるサンプルコードをもとに作っています。&lt;/p&gt;

&lt;p&gt;dotstudioの&lt;a href=&#34;https://dotstud.io/members/ukkz/&#34;&gt;ものづくりアーティストうこ&lt;/a&gt;さんがメインで作ってくれました。&lt;/p&gt;

&lt;p&gt;少し長いので&lt;a href=&#34;https://github.com/dotstudio/nefrybt_camera_server/blob/master/nefry/nefrybt_grove_camera/nefrybt_grove_camera.ino&#34;&gt;GitHubのリポジトリ&lt;/a&gt;を参照しましょう。&lt;/p&gt;

&lt;p&gt;このプログラムをNefry BTに書き込みましょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host&lt;/code&gt;の箇所に画像アップロード先のサーバーを指定します。&lt;/p&gt;

&lt;h4 id=&#34;配線&#34;&gt;配線&lt;/h4&gt;

&lt;p&gt;配線はD3,D4に繋ぎます。&lt;/p&gt;

&lt;p&gt;プログラム的には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define SEREAL_RX 19 //Nefry BT D3
#define SEREAL_TX 18 //Nefry BT D4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分が該当します。NefryBTの&lt;a href=&#34;https://drive.google.com/file/d/0B_mvDQF8yaQRLVprUHl4WTFLWVE/view&#34;&gt;仕様書&lt;/a&gt;を見ると分かりますが、ESP32のGPIO 19番がNefryBTのD3にあたり、18番がD4になります。&lt;/p&gt;

&lt;h3 id=&#34;サーバー側-node-js&#34;&gt;サーバー側 - Node.js&lt;/h3&gt;

&lt;p&gt;Node.jsで画像を受信するサーバーを作ります。&lt;/p&gt;

&lt;p&gt;無難にSocket.ioとexpressを使います。 Node.jsのバージョンは8.4です。
7系以前だと動かない可能性があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i --save socket.io express
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//server.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const app = require(&#39;express&#39;)();
const http = require(&#39;http&#39;).Server(app);
const io = require(&#39;socket.io&#39;)(http);
const express = require(&#39;express&#39;);
const PORT = process.env.PORT || 3000;
app.use(express.static(__dirname));

const {promisify} = require(&#39;util&#39;);
const writeFileAsync = promisify(fs.writeFile);

io.on(&#39;connection&#39;, (socket) =&amp;gt; console.log(&#39;a user connected&#39;)); //socket.ioのコネクション

app.get(&#39;/&#39;, (req, res) =&amp;gt; res.sendFile(&#39;./index.thml&#39;));
app.post(&#39;/&#39;, (req, res) =&amp;gt; {
    let buffers = [];
    let cur = 0;
    const len = parseInt(req.headers[&#39;content-length&#39;], 10);

    req.on(&#39;data&#39;, (chunk) =&amp;gt; {
        buffers.push(chunk);
        cur += chunk.length;
        console.log(`Downloading...${(100.0 * cur / len).toFixed(2)}%`);
    });

    req.on(&#39;end&#39;, async () =&amp;gt; {
        console.log(`\n[done] Image upload`);
        req.rawBody = Buffer.concat(buffers);
        const base64image = req.rawBody.toString(&#39;base64&#39;); //base64変換
        await writeFileAsync(&#39;./img.jpeg&#39;, req.rawBody, &#39;utf-8&#39;)
        console.log(`[done] Image Save`);
        io.sockets.emit(&#39;new image&#39;,base64image); //画像送信
    });
    
});
 
http.listen(PORT, () =&amp;gt; console.log(`listening on *:${PORT}`));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常Expressを使う際に&lt;a href=&#34;https://github.com/expressjs/body-parser&#34;&gt;body-parser&lt;/a&gt;をよく使いますが、今回はあえて使わずに、&lt;code&gt;dataイベント&lt;/code&gt;で&lt;code&gt;chunk&lt;/code&gt;を拾って画像アップロードのプログレス表示を実装しています。&lt;/p&gt;

&lt;p&gt;Nefry BTも含めてこういったマイコンボードはスマートフォンやPCに比べるとCPUパワーが弱いため、画像アップロードに時間がかかることがあります。&lt;/p&gt;

&lt;p&gt;サーバー側でどれくらいのデータ送信が完了しているのかの進捗が分かると安心して開発できます。
画像を受信したら&lt;code&gt;toString(&#39;base64&#39;)&lt;/code&gt;でBase64の文字列に変換をしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;io.sockets.emit()&lt;/code&gt;の箇所では変換した文字列をSocket.io経由でブラウザに配信しています。&lt;/p&gt;

&lt;h3 id=&#34;ブラウザ側-javascript&#34;&gt;ブラウザ側 - JavaScript&lt;/h3&gt;

&lt;p&gt;ブラウザ側では、文字列で送られた画像データを受け取り、Canvasに流し込みます。
HTML側では&lt;code&gt;id=&amp;quot;myCanvas&amp;quot;&lt;/code&gt;のcanvasを作り、&lt;code&gt;socket.io&lt;/code&gt;の読み込みと以下で作る&lt;code&gt;app.js&lt;/code&gt;の読み込みをします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Nefry BT Camera&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body style=&amp;quot;background-color:#D0D0D0;&amp;quot;&amp;gt;
    &amp;lt;canvas id=&amp;quot;myCanvas&amp;quot; width=&amp;quot;640&amp;quot; height=&amp;quot;480&amp;quot; style=&amp;quot;background-color:#FFFFFF;&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
    &amp;lt;script src=&amp;quot;/socket.io/socket.io.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;/public/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;draw()&lt;/code&gt;では、canvasに&lt;code&gt;drawImage()&lt;/code&gt;で画像を描画します。
Base64の場合はsrcが画像パスではなく&lt;code&gt;data:image/jpeg;base64,~~~~~&lt;/code&gt;という指定方法です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// /public/app.js
&#39;use strict&#39;;

const socket = io();

const draw = (imageData = &#39;&#39;) =&amp;gt; {
    const canvas = document.getElementById(&#39;myCanvas&#39;);
    const ctx = canvas.getContext(&#39;2d&#39;);
    const img = new Image();
    img.src = `data:image/jpeg;base64,${imageData}`; //基本base64の文字列
    if(imageData === &#39;init&#39;) img.src = `./img.jpeg`; //初期実行時のみサーバーのimg.jpegを取得
    img.onload = () =&amp;gt; {
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0, 640, 480);
    }
    console.log(`update ${new Date()}`);
}

socket.on(&#39;new image&#39;, draw); //画像更新時
draw(&#39;init&#39;); //初期実行
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;socket.on(&#39;new image&#39;, draw)&lt;/code&gt;でサーバーからデータが送られてくるたびに&lt;code&gt;draw()&lt;/code&gt;を実行します。&lt;/p&gt;

&lt;h2 id=&#34;使ってみた感想&#34;&gt;使ってみた感想&lt;/h2&gt;

&lt;p&gt;1週間ほど動かしていますが、問題なくずっと稼働写真を送り続けてくれるので意外と&lt;strong&gt;ラズパイなどで作るシステムより安定しているかも&lt;/strong&gt;しれません。&lt;/p&gt;

&lt;p&gt;あと、発表のオチだったのですが、Pepperの調子が悪く被写体が動かないので成功してるのか分かりにくいです苦笑&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b2fb0a60f31c12e61e99b51d442dd563.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Nefry BTとNode.jsを使ってネットワークカメラを作ることができました。&lt;/p&gt;

&lt;p&gt;GroveのカメラとNefry V2を使って過去に&lt;a href=&#34;https://am-our.com/love/110/13945/&#34;&gt;【大島薫×IoT】浮気男を社会的に制裁するマシーンを作ってみた&lt;/a&gt;こともありましたが、ネットワークカメラを作りたい需要はそこそこあると思うので、その際の参考になれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【報告】セゾン情報システムズでIoT研修として体験会を行いました</title>
      <link>https://dotstud.io/blog/saison-iot-course-report/</link>
      <pubDate>Fri, 15 Sep 2017 14:52:26 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/saison-iot-course-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃちゃまるです。先日、セゾン情報システムズさんにてIoT体験会を開かせていただきました。&lt;/p&gt;

&lt;p&gt;当日の概要や雰囲気をレポートします！
&lt;img src=&#34;https://dotstud.io/img/blog/121/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;要望に沿ったカリキュラムを作成&#34;&gt;要望に沿ったカリキュラムを作成&lt;/h2&gt;

&lt;p&gt;今回のIoT体験会開催を進めてくださったのは、IoTLTでも良くお話をしてくださる松岡さん！事前に伺った「&lt;strong&gt;IoTの楽しさを社内に広めて、新しいことに挑むモチベーションを高めたい&lt;/strong&gt;」という要望に沿ってカリキュラムを作成しました。&lt;/p&gt;

&lt;p&gt;まずは兎にも角にも楽しんでもらうということで、マイコンボードとセンサーを使って色々な仕組みを作っていく体験会にしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/121/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;二時間のお手軽カリキュラム&#34;&gt;二時間のお手軽カリキュラム&lt;/h2&gt;

&lt;p&gt;最初30分は座学で、IoTの事例の紹介やWeb技術の話などをしました。&lt;/p&gt;

&lt;p&gt;その後は実際にマイコンボードとセンサーやLEDなどを使い、配線とプログラミングを実践しました。今回はとりあえずIoTに向け第一歩を、ということだったので、インターネットには繋げず電子工作のみのハンズオンとなっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/121/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用したのは-gravity&#34;&gt;使用したのは「Gravity」&lt;/h2&gt;

&lt;p&gt;今回使用したのはDFRobot社製の「Gravityシリーズ」。Gravityとはマイコンボードとセンサー等を繋ぐコネクタ規格で、これにより難しい配線知識無しで電子工作を行うことができます。
&lt;img src=&#34;https://dotstud.io/img/blog/121/gravity.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;電子工作やプログラミングが初めての方もいましたが、サポートをしつつ順調に進めることができました。
&lt;img src=&#34;https://dotstud.io/img/blog/121/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;二時間と短い時間ではありましたが、全員が記事の最後まで到達することができました。余裕がある人向けに用意した追加課題もクリアした方もちらほら。楽しかったという声をたくさんいただけたので、何らかのモチベーションに繋がっていれば幸いです。&lt;/p&gt;

&lt;p&gt;弊社ではこのような研修を企業や大学に向けて行っています。ご興味のある方は、ぜひお問い合わせください！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>流通科学大学にて高校生向けIoT講習会を実施しました！</title>
      <link>https://dotstud.io/blog/ryuka-iot-handson-report/</link>
      <pubDate>Wed, 13 Sep 2017 14:55:22 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/ryuka-iot-handson-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、のびすけです。&lt;/p&gt;

&lt;p&gt;dotstudioではここ最近大学生や高校生向けにIoT講習会を実施していますが、&lt;strong&gt;今回は初の神戸&lt;/strong&gt;での開催でした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/668dd83eb46c3ed82dcf47c8a6d2a98d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;既に掲載されているレポートもあるのでご参照下さい！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.umds.ac.jp/news/2017/0824_01.html&#34;&gt;【高大連携事業】上田ゼミ　「LINE×IoT」をテーマにワークショップを実施&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/mayumiueda.lab/posts/3471027566252228&#34;&gt;上田ゼミレポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;流通科学大学&#34;&gt;流通科学大学&lt;/h2&gt;

&lt;p&gt;兵庫県神戸市西区に本部を置く私立大学です。大学の略称は流科大、流通科学、RYUKA、UMDSなどがあるようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/1ef21a086ccf64a78ee0b40f5ed18015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ダイエーグループ創始者が設立した大学で、学内にはダイエーホークス（現ソフトバンクホークス）の王貞治さんのユニホームが飾ってあったのが印象的でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.umds.ac.jp/&#34;&gt;流通科学大学公式HP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%B5%81%E9%80%9A%E7%A7%91%E5%AD%A6%E5%A4%A7%E5%AD%A6&#34;&gt;流通科学大学Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;高大連携の一環として高校生向けに講習を実施&#34;&gt;高大連携の一環として高校生向けに講習を実施&lt;/h2&gt;

&lt;p&gt;大学ではオープンキャンパスなどを実施して、高校生向けに大学の紹介をしたりしますが、似たような文脈で流通科学大学では大学での取り組みを高校生向けに体験させる高大連携という取り組みを行なっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/327c8954b0e6050860f8bd09764fcf64.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この日、流通科学大学に来たのは&lt;a href=&#34;http://www.hyogo-c.ed.jp/~hikami-hs/&#34;&gt;兵庫県立氷上高等学校&lt;/a&gt;の学生さんたちです。&lt;/p&gt;

&lt;p&gt;今回は僕が大学時代から大変お世話になっている&lt;a href=&#34;https://www.facebook.com/mayumiueda.lab/&#34;&gt;上田先生&lt;/a&gt;にお声がけ頂き、開催することができました。&lt;/p&gt;

&lt;h2 id=&#34;wionode-line-bot&#34;&gt;WioNode + LINE BOT&lt;/h2&gt;

&lt;p&gt;内容は&lt;a href=&#34;http://www.aim.aoyama.ac.jp/info/lect/6889/?cat=18&#34;&gt;青山学院大学で実施した内容&lt;/a&gt;と同様でWioNodeとLINE BOTを使ったワークショップです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/fca6cefaa997d7f97515d2efcfbf02e9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;始めて触る機器たちに高校生たちは戸惑いながらも、上田先生やゼミの学生さん（大学生）がサポートしてくれてスムーズに進めることができました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/ba47706bb7a75016572f0902ee699ccf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;前半のIoT概論的な座学は学生さんの反応が薄くて戸惑いましたが、ハンズオンに入ってからはすごく反応がよく、LINEでセンサーの測定結果が届くと高校生から「凄い！面白い！」といった声が上がりました。&lt;/p&gt;

&lt;p&gt;やはりLINEをやっている人は100%で、FacebookやTwitterと比べて若年層の普及率が圧倒的でした。高校生や大学生向けにはしばらくはLINEが使えるなと再認識です。&lt;/p&gt;

&lt;h2 id=&#34;アイディアワークショップ&#34;&gt;アイディアワークショップ&lt;/h2&gt;

&lt;p&gt;最後に今回体験した内容をもとにアイディアワークショップ。&lt;/p&gt;

&lt;p&gt;今回のテーマは上田先生から提示して頂いた &lt;strong&gt;「お年寄りを助ける」&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;3人人組みでディスカッションしてお年寄りの課題をIoTでどう解決できるかを考えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/80f77bc1abd75471d0c7ab798a36f77d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最後に全チームから発表してもらい、表彰までを行いました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d87d47fa6d6f00f1365e45d2c0315a05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;色々なアイディアが出たのですが、個人的には枕にセンサーを仕込んで寝相などで健康管理や見守りを行う&lt;strong&gt;IoT枕&lt;/strong&gt;が好きでした。&lt;/p&gt;

&lt;p&gt;他の機会でもこういったワークショップはやるのですが、アンケートを取るとアイディアワークショップが特に楽しいという意見が多く、&lt;strong&gt;ハンズオンで手を動かすだけよりも自分たちで考える時間を取る&lt;/strong&gt;ことも重要だなと思っています。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/sugawara.ryousuke/posts/1645855885449406&#34;&gt;こんな感じ&lt;/a&gt;で高校生向けに講習会を実施してきました。&lt;/p&gt;

&lt;p&gt;普段は関東圏でしか活動できてないので西側での活動ももっと増やしていきたいですね。&lt;/p&gt;

&lt;p&gt;dotstudioでは教育機関や企業向けのIoT研修、講習などを実施していますので、気になる方がいたら是非お問い合わせください！&lt;/p&gt;

&lt;p&gt;こちらも合わせて見ていただけると幸いです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/aogaku-iot-course-report/&#34;&gt;【報告】青山学院大学でIoT体験講習会を開催しました。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;それでは！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【検証】光るまつげ！？クラブで目立つこと間違いなしのLEDまつげを試してみた</title>
      <link>https://dotstud.io/blog/led-eyelash-gadget-report/</link>
      <pubDate>Mon, 11 Sep 2017 20:00:37 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/led-eyelash-gadget-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、バックエンドエンジニアのちゃんとくです。突然ですが、&lt;strong&gt;もっと光りたいなって思いませんか？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;私は思います。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;なぜなら、ギャル電先輩が「&lt;strong&gt;とりま光っとけばモテる&lt;/strong&gt;」って言ってたから。&lt;/p&gt;

&lt;p&gt;そんな折に秋葉原のとあるお店でうってつけなものを見つけました。
&lt;img src=&#34;https://dotstud.io/img/blog/126/box1.png&#34; alt=&#34;&#34; /&gt;
&lt;center&gt;&lt;font size=&#34;4&#34;&gt;その名も「LEDまつげ（ピンク）」！！！&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;かなり斬新！パッと見た感じ、&lt;strong&gt;どういう仕組みになっているのか全然わかりません&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;もし&lt;strong&gt;イメージ通りオシャレにまつげを光らせる&lt;/strong&gt;ことができれば、クラブでモテること間違いなしです！&lt;/p&gt;

&lt;p&gt;実際に使えるかどうか、普段からつけまつげを愛用しているちゃんとくがレポートしてみたいと思います！&lt;/p&gt;

&lt;h2 id=&#34;開封の儀&#34;&gt;開封の儀&lt;/h2&gt;

&lt;p&gt;さっそく中身を確認していきましょう！&lt;/p&gt;

&lt;p&gt;箱を開けると、電池BOXと一体になったLEDテープとクリップが入っています。
&lt;img src=&#34;https://dotstud.io/img/blog/126/box2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;電池BOX内にはリチウム電池が二つ。気合いで交換できそう。
&lt;img src=&#34;https://dotstud.io/img/blog/126/box6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;LED部分。&lt;font size=&#34;3&#34;&gt;&lt;strong&gt;なんか思ってたんと違う。&lt;/strong&gt;&lt;/font&gt;パッケージのようなまつげ感はゼロです。
&lt;img src=&#34;https://dotstud.io/img/blog/126/box3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このままマブタに貼り付けるわけにはいかないので、手持ちのつけまつげと合体させてみました。
&lt;img src=&#34;https://dotstud.io/img/blog/126/box4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;とりあえず光らせてみる。
&lt;img src=&#34;https://dotstud.io/img/blog/126/box5.png&#34; alt=&#34;&#34; /&gt;
&lt;strong&gt;おお、イメージに近づいた！&lt;/strong&gt; これでまぶたにくっつけられそうです！&lt;/p&gt;

&lt;h2 id=&#34;装着してみる&#34;&gt;装着してみる&lt;/h2&gt;

&lt;p&gt;いよいよ装着！普通のつけまつげを着けるときのように、一通り化粧しておきましょう。&lt;/p&gt;

&lt;p&gt;クリップで電池BOXを髪の毛に止めます。うまくやれば隠せそう。
&lt;img src=&#34;https://dotstud.io/img/blog/126/face2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通常のつけまつげのようにキワの部分にのりづけして付けていきます。
&lt;img src=&#34;https://dotstud.io/img/blog/126/face3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;おりゃっ！
&lt;img src=&#34;https://dotstud.io/img/blog/126/face4.png&#34; alt=&#34;&#34; /&gt;
&lt;strong&gt;LEDテープが固い&lt;/strong&gt;ので、形が決まっていてちょっとつけづらい……。しっかり乾くまで長めに抑えました。&lt;/p&gt;

&lt;p&gt;両方装着。明るいところだとテープがめっちゃ目立つけど、暗いところだと割といい感じ。
&lt;img src=&#34;https://dotstud.io/img/blog/126/face5.png&#34; alt=&#34;&#34; /&gt;
うまくまつげを上向きにできればあんまり違和感はありません。&lt;/p&gt;

&lt;p&gt;いよいよ、光らせてみます！！&lt;/p&gt;

&lt;h2 id=&#34;ピカらせてみる&#34;&gt;ピカらせてみる&lt;/h2&gt;

&lt;p&gt;スイッチオン！！
&lt;img src=&#34;https://dotstud.io/img/blog/126/led1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;font size=&#34;6&#34;&gt;えっ……怖っ…………&lt;/font&gt;&lt;/center&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ドアップで見ると得も言われぬ感じですが、ほどほどに離れて見ればまあまあ大丈夫です。
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/126/led2.png&#34; alt=&#34;&#34; /&gt;
あまりのシュールさに思わず笑みがこぼれる
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;電池BOXのスイッチで光り方を切り替えられます。（手動で切り替えています）
&lt;img src=&#34;https://i.gyazo.com/287b53d0c718f2f867321827303cd2e5.gif&#34; alt=&#34;&#34; /&gt;
&lt;center&gt;&lt;font size=&#34;4&#34;&gt;ロ○ットレストランみたいだ！！！&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;実際に試してみた感想は以下のような感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;つけているときの違和感はあんまりない&lt;/li&gt;
&lt;li&gt;ちょっと眩しいかな？くらいだけど目のチカチカが尾を引く&lt;/li&gt;
&lt;li&gt;まつげののりが残る感は2倍増し&lt;/li&gt;
&lt;li&gt;（LED的な意味で）かなり盛れる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;検証のために30分ぐらいつけていましたが、特に違和感なく装着していることができました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目立つことは間違いなしなので気になる方はぜひ試してみてください！！！&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【報告】子供も大人も楽しめる！モノづくりの祭典「Maker Faire Tokyo2017」に出展してきました！</title>
      <link>https://dotstud.io/blog/maker-fair-tokyo-2017/</link>
      <pubDate>Mon, 11 Sep 2017 14:51:21 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/maker-fair-tokyo-2017/</guid>
      
      <description>

&lt;p&gt;こんにちは！バックエンドエンジニアのちゃんとくです。8月5日・6日に実施された&lt;strong&gt;モノづくりの祭典・Maker Faire Tokyo 2017&lt;/strong&gt;にdostudioで出展してきました！&lt;/p&gt;

&lt;p&gt;会場の雰囲気も交えつつ、当日の様子をレポートしたいと思います！&lt;/p&gt;

&lt;h2 id=&#34;maker-faire-tokyoとは&#34;&gt;Maker Faire Tokyoとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/120/mft1.png&#34; alt=&#34;&#34; /&gt;
雑誌「Make」を発端に、世界の190ヶ所以上で開催されているDIYイベント「Maker Faire」の東京版です！&lt;/p&gt;

&lt;p&gt;「モノづくり」のイベントとしてクラフト、工作から最新のガジェットまで550組もの出展者が2日間に渡って出展します。&lt;/p&gt;

&lt;p&gt;世界最大の電脳都市・&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-report/&#34;&gt;&lt;strong&gt;深センのMaker Faireの様子&lt;/strong&gt;&lt;/a&gt;や&lt;a href=&#34;https://dotstud.io/blog/uko-exhibited-at-mft2016/&#34;&gt;&lt;strong&gt;Maker Faire Tokyo 2016に出展した様子&lt;/strong&gt;&lt;/a&gt;も合わせてご覧ください！&lt;/p&gt;

&lt;h2 id=&#34;dotstudioとしてブースを出展&#34;&gt;dotstudioとしてブースを出展！&lt;/h2&gt;

&lt;p&gt;今年のMaker Faire Tokyoは、dotstudioとして初出展しました！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/120/dotstudio_booth.png&#34; alt=&#34;&#34; /&gt;
dotstudioブースの様子。お陰さまで大盛況でした。
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;当日はdotstudioで開発しているAndroid開発者向けボード「&lt;a href=&#34;https://dotstud.io/shop/android-iot-board-waffle/&#34;&gt;&lt;strong&gt;Waffle&lt;/strong&gt;&lt;/a&gt;」やESP8266の乗ったWi-fiボード「&lt;a href=&#34;https://dotstud.io/shop/nefry-connect-internet/&#34;&gt;&lt;strong&gt;Nefry v2.0&lt;/strong&gt;&lt;/a&gt;」を展示・販売。&lt;/p&gt;

&lt;p&gt;さらに、かねてより開発中だったESP32ボード「&lt;a href=&#34;https://dotstud.io/shop/nefry-bt-single/&#34;&gt;&lt;strong&gt;Nefry BT&lt;/strong&gt;&lt;/a&gt;」の先行販売を行いました！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/120/dotstudio_booth2.png&#34; alt=&#34;&#34; /&gt;
ブースではNefryシリーズ、Waffle、Wio Nodeなどを販売。
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;現在はWaffle・Nefryともにdotstudioのショップや千石電商さん、ツクモさん等で購入できますが、買ってくれる方の生の声を聞けるのはとても嬉しいですね。&lt;/p&gt;

&lt;p&gt;dotstudioで制作した「&lt;a href=&#34;https://dotstud.io/blog/gyaruden-hadeike-display-cap/&#34;&gt;IoT派手イケディスプレーキャップ&lt;/a&gt;」も展示し、ギャル電マオが登場するサプライズもありました！
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/120/mft_cap.png&#34; alt=&#34;&#34; /&gt;
Maker Faire TokyoバージョンのIoT派手イケディスプレーキャップ。
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/120/mao_uko.png&#34; alt=&#34;&#34; /&gt;
ギャル電マオ×ギャル男uko
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;お声がけしてくださったみなさま、本当にありがとうございました！！&lt;/p&gt;

&lt;h2 id=&#34;変なモノからガチなモノまで今年も盛りだくさんだった&#34;&gt;変なモノからガチなモノまで今年も盛りだくさんだった&lt;/h2&gt;

&lt;p&gt;会場はとにかくたくさんのアイデアで溢れていて、どのブースも個性的な展示が盛りだくさんでした！&lt;/p&gt;

&lt;p&gt;実際に手を動かしてつくれるブースや、かわいい工作グッズを購入できるブースもあります。
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/120/girls_booth.png&#34; alt=&#34;&#34; /&gt;
ちょっと未来なドレッサー（乙女電芸部）や、LEDを使ったアクセサリー、デコジャンパなど
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;子供が遊んで楽しめるおもちゃやプログラミングを学べるプロダクトも販売されていました。
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/120/kids_booth.png&#34; alt=&#34;&#34; /&gt;
壁を走るライントレースロボ、楽しくプログラミングを学べるPETS、ストローを使った工作
&lt;/centr&gt;&lt;/p&gt;

&lt;p&gt;お祭りらしく、ブースを飛び越えた展示？も盛りだくさん。
&lt;center&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/120/others.png&#34; alt=&#34;&#34; /&gt;
会場を飛び回るツル、リズムロボ？、ロボットに連れられた人？？
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;まだまだ紹介しきれませんが、たくさんの素敵な展示が行われていました！実際に体験できるブースも多く、大人も子供も新しい発見を楽しめること間違いなしです！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;2日間のイベントを通して、たくさんのアイデアや愛に溢れたプロダクトに出会うことができました。モノづくりをする側にとっても、作ったモノをたくさんの人に発表できる場があるのは素晴らしいことですね。&lt;/p&gt;

&lt;p&gt;最新技術に触れたい人、体験してみたい人、とにかく変なモノを見てみたい人、ぜひ来年のMaker Faire Tokyoも参加してみてください！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>日本上陸！littleBits cloudBitモジュールでIFTTT連携してみた！</title>
      <link>https://dotstud.io/blog/littlebits-cloudbit-ifttt-blink/</link>
      <pubDate>Tue, 22 Aug 2017 19:43:42 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/littlebits-cloudbit-ifttt-blink/</guid>
      
      <description>

&lt;p&gt;littleBits cloudBitモジュールの技適が通りまして、ついに日本でも使えることになったということで、早速littleBits cloudBitモジュールを購入してIFTTTと連携してみました。
&lt;img src=&#34;https://dotstud.io/img/blog/119/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;littlebits-cloudbitモジュールとは&#34;&gt;littleBits cloudBitモジュールとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/2.png&#34; alt=&#34;&#34; /&gt;
littleBits cloudBitモジュールは、磁石でつなげて簡単に電子工作ができる知育ブロックlittleBitsのモジュールのひとつ、littleBits Cloudが橋渡しとなってインターネットとやり取りできるモジュールです。&lt;/p&gt;

&lt;p&gt;詳しくはこちら → &lt;a href=&#34;https://littlebits.cc/cloudstart&#34;&gt;Getting Started with your CloudBit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/3.png&#34; alt=&#34;&#34; /&gt;
橋渡しとなるlittleBits Cloudは、スマートフォンやPCからWEBアクセスできる CLOUD CONTROL APP や、LITTLEBITS APIによってREST APIでさらに深いところまで操作できるプログラミングできるLITTLEBITS APIといった入り口があります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/4.png&#34; alt=&#34;&#34; /&gt;
今回ご紹介するのは、もうひとつ。ノンプログラミングでインターネットのいろいろなことに接続できる&lt;a href=&#34;https://ifttt.com/login&#34;&gt;IFTTT&lt;/a&gt;とlittleBitsの連携についてお伝えします。&lt;/p&gt;

&lt;p&gt;たとえば、littleBitsモジュールでボタンを押すとメールが送られたり、SNSでいいねが押されるとlittleBitsのLEDが反応するようなIoTの仕組みをさっと作ることができます。&lt;/p&gt;

&lt;h2 id=&#34;今回の仕組み&#34;&gt;今回の仕組み&lt;/h2&gt;

&lt;p&gt;今回の仕組みはGitHubでissueが上がるとBARGRAPH LEDが点灯する仕組みです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/5.png&#34; alt=&#34;&#34; /&gt;
ですが、ただBARGRAPH LEDが光るだけだと見落としてしまうので、100円ショップで買った光で動くソーラーゆらゆら（がいこつ）にLEDを照らして動かしてよりわかりやすくします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/6.png&#34; alt=&#34;&#34; /&gt;
このような仕組みです。&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;h3 id=&#34;littlebitsの準備&#34;&gt;littleBitsの準備&lt;/h3&gt;

&lt;p&gt;セットアップについてはすでに行われているものとします。&lt;a href=&#34;http://www.1ft-seabass.jp/memo/2017/08/09/cloudbit-setup-step-memo/&#34;&gt;cloudBitモジュールのセットアップについてのメモ&lt;/a&gt;についてもご参考下さい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/7.png&#34; alt=&#34;&#34; /&gt;
CLOUDBITパッケージに入っているものはcloudBitモジュール関連だけなので、別途写真のようにlittleBitから入力させるボタンモジュールや、出力を反応させるBARGRAPHモジュールは別途揃えておきましょう。また今回はソーラーゆらゆら（がいこつ）へうまくつなげるためにWIREモジュールも用意しておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CLOUDBITパッケージにあるもの

&lt;ul&gt;
&lt;li&gt;USB power adapter ケーブル&lt;/li&gt;
&lt;li&gt;USB POWER モジュール&lt;/li&gt;
&lt;li&gt;cloudBitモジュール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;別途必要なもの

&lt;ul&gt;
&lt;li&gt;ボタンモジュール&lt;/li&gt;
&lt;li&gt;BARGRAPHモジュール&lt;/li&gt;
&lt;li&gt;WIREモジュール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/8.png&#34; alt=&#34;&#34; /&gt;
ソーラーゆらゆらを準備します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/9.png&#34; alt=&#34;&#34; /&gt;
コンセントをつないだアダプターからUSBケーブルを差し込みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/10.png&#34; alt=&#34;&#34; /&gt;
USB POWERモジュールにUSBケーブルをつなぎます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/11.png&#34; alt=&#34;&#34; /&gt;
USB POWERモジュール→ボタンモジュール→cloudBitモジュールまでつないで、接続されるまで待ちます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/12.png&#34; alt=&#34;&#34; /&gt;
つづいて、cloudBitモジュールの先にWIREモジュールとBARGRAPH LEDモジュールをつなぎます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/13.png&#34; alt=&#34;&#34; /&gt;
ソーラーゆらゆら（がいこつ）のソーラーパネル部分にガッとBARGRAPH LEDモジュールを当てます。マスキングテープで補強します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/14.png&#34; alt=&#34;&#34; /&gt;
これで準備完了です。&lt;/p&gt;

&lt;h3 id=&#34;cloud-control-appの準備&#34;&gt;CLOUD CONTROL APPの準備&lt;/h3&gt;

&lt;p&gt;cloudBitを管理している CLOUD CONTROL APP ページにログインしておきます。
&lt;img src=&#34;https://dotstud.io/img/blog/119/15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/17.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;iftttの準備&#34;&gt;IFTTTの準備&lt;/h3&gt;

&lt;p&gt;IFTTTもlittleBitsとの関連付けを行うのでログインしておきます。
&lt;img src=&#34;https://dotstud.io/img/blog/119/18.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらで準備完了です。&lt;/p&gt;

&lt;h2 id=&#34;littlebits-cloudbitモジュールとiftttの関連付け&#34;&gt;littleBits CloudBitモジュールとIFTTTの関連付け&lt;/h2&gt;

&lt;p&gt;さきほどログインしたCLOUD CONTROL APP ページでlittleBits CloudBitモジュールとIFTTTの関連付けを行います。
&lt;img src=&#34;https://dotstud.io/img/blog/119/19.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下部のメニューでAUTOMATEを押します。
&lt;img src=&#34;https://dotstud.io/img/blog/119/20.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;AUTOMATEページに遷移するとIFTTTとのアクティベートを促されるので GO TO IFTTT.COM ボタンを押します。
&lt;img src=&#34;https://dotstud.io/img/blog/119/21.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;IFTTTのlittleBitsチャンネルに遷移するので、CONNECTを押します。
&lt;img src=&#34;https://dotstud.io/img/blog/119/22.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;すでにIFTTTとCLOUD CONTROL APPがログインしてあるので、アクティベート確認ページに遷移します。AUTHORIZEボタンを押して認証します。
&lt;img src=&#34;https://dotstud.io/img/blog/119/23.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ログインが完了します。これで、IFTTTでlittleBitsと連携することができます。&lt;/p&gt;

&lt;h2 id=&#34;githubサービスのiftttでの認証をする&#34;&gt;GitHubサービスのIFTTTでの認証をする&lt;/h2&gt;

&lt;p&gt;GitHubでもIFTTTで使えるようにしておきましょう。上部のSearchからgithubを検索します。
&lt;img src=&#34;https://dotstud.io/img/blog/119/24.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Servicesに出てきたGitHubをクリックします。
&lt;img src=&#34;https://dotstud.io/img/blog/119/25.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHubのページに移動するのでConnectボタンを押します。
&lt;img src=&#34;https://dotstud.io/img/blog/119/26.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHubのAuthrize IFTTTページに移動します。
&lt;img src=&#34;https://dotstud.io/img/blog/119/27.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Authrize IFTTTCHannelsボタンを押して認証を済ませておきます。&lt;/p&gt;

&lt;h2 id=&#34;littlebitsのifttt連携の設定&#34;&gt;littleBitsのIFTTT連携の設定&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/28.png&#34; alt=&#34;&#34; /&gt;
右上にある自分のプロフィールメニューからNew Appletを選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/29.png&#34; alt=&#34;&#34; /&gt;
New Appletをつくる画面に行きます。thisボタンをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/30.png&#34; alt=&#34;&#34; /&gt;
Choose a serviceではgitと検索しGitHubをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/31.png&#34; alt=&#34;&#34; /&gt;
今回は自分にissueが来たときに動作するようにしたいので、Any new issueをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/32.png&#34; alt=&#34;&#34; /&gt;
つづいて動作のきっかけ this が作れたので、なにが起こるかの that を設定するため that ボタンを押します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/33.png&#34; alt=&#34;&#34; /&gt;
Choose action service画面になるので、littleBitsと検索し、littleBitsアクションをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/34.png&#34; alt=&#34;&#34; /&gt;
Choose action画面になるので、Set Output Levelをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/35.png&#34; alt=&#34;&#34; /&gt;
Complete action fields画面になるので以下のように設定します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which cloudBit?

&lt;ul&gt;
&lt;li&gt;動かしたいcloudBit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Level

&lt;ul&gt;
&lt;li&gt;100&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Duration

&lt;ul&gt;
&lt;li&gt;20 seconds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/36.png&#34; alt=&#34;&#34; /&gt;
設定が終わったら、下の方のCreate Actionボタンを押します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/37.png&#34; alt=&#34;&#34; /&gt;
Review and finish画面に来るので、設定を確認します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/38.png&#34; alt=&#34;&#34; /&gt;
問題なければ、下の方のFinishボタンを押します。&lt;/p&gt;

&lt;p&gt;これで設定は完了です。&lt;/p&gt;

&lt;h2 id=&#34;動かしてみる&#34;&gt;動かしてみる&lt;/h2&gt;

&lt;p&gt;早速試しにissueをGitHubで作ってみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/119/39.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回は適当に作ってみます。
&lt;img src=&#34;https://dotstud.io/img/blog/119/40.png&#34; alt=&#34;&#34; /&gt;
issues発行します。&lt;/p&gt;

&lt;p&gt;多少タイムラグがあるので5～10秒ほど待ってみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/119/demo.gif&#34; alt=&#34;&#34; /&gt;
無事動きました！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ということで、技適が通り日本上陸となった、littleBits cloudBitモジュールのIFTTT連携をお伝えしました。&lt;/p&gt;

&lt;p&gt;今回はIoTでも実装に手間がかかるインターネット上の反応をlittleBitsに降ろす仕組みを軸にお伝えしましたがIFTTTとlittleBits Cloudの連携は手軽に作れますね。IoTにおけるいろいろな技術要素が裏側でしっかり作られています。&lt;/p&gt;

&lt;p&gt;もちろん、IFTTTと連携するとAmazon Dash Buttonのような、ボタンを押すとツイートがされるようなlittleBitsからインターネットを動かす仕組みについても実現可能です。&lt;/p&gt;

&lt;p&gt;littleBitsの持つブロックを組み合わせて電子工作ができる手軽さに加えて、IFTTTが組み合わさることでインターネットもあたかもブロックのように扱えてるlittleBits cloudBitモジュール、ぜひ試してみてください！&lt;/p&gt;

&lt;p&gt;※今回の図表の一部では&lt;a href=&#34;http://icooon-mono.com/&#34;&gt;アイコン素材ダウンロードサイト「icooon-mono」&lt;/a&gt;さんの画像を利用いたしました。ありがとうございます。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>