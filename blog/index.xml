<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/blog/</link><description>Recent content in Blogs on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Wed, 30 Jan 2019 10:47:09 +0900</lastBuildDate><atom:link href="/blog/" rel="self" type="application/rss+xml"/><item><title>VuePressのブログをカスタムドメイン&#43;SSL対応させたGitLab Pagesにデプロイする</title><link>https://dotstud.io/blog/gitlab-vuepress-custom-domain/</link><pubDate>Wed, 30 Jan 2019 10:47:09 +0900</pubDate><guid>https://dotstud.io/blog/gitlab-vuepress-custom-domain/</guid><description>
&lt;p&gt;こんにちは、最近スパにハマっている&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;今日はタイトル通り&lt;strong&gt;VuePressで作ったブログをGitLab Pagesに乗せてカスタムドメイン+SSL対応していきます。&lt;/strong&gt; 2019年1月時点版です。UIなどはガンガン変わっていくと思いますので適宜読み替えましょう。&lt;/p&gt;
&lt;p&gt;過去に書いたこの記事とは別のサイトの運用話です。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;236&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/circleci-hugo-github-pages/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/236/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
Hugo&amp;#43;GitHub Pagesで作ってるブログ運用をGitLabからCircle CI&amp;#43;GitHubに切り替えました。
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2019-01-22
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
Circle CIを使ってHugoのビルドをしてGitHub Pagesにデプロイする手順のメモです。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;p&gt;気持ち的にHugoブログもVuePressに移行したいと思っている感じですね。&lt;/p&gt;
&lt;h2 id=&#34;gitlab-pagesの基本&#34;&gt;GitLab Pagesの基本&lt;/h2&gt;
&lt;p&gt;GitLab PagesはGitLabで利用できる無料ホスティング環境です。&lt;/p&gt;
&lt;p&gt;GitHub PagesのGitLab版って認識で大丈夫です。&lt;/p&gt;
&lt;h3 id=&#34;gitlab-pagesでサイト公開の仕方&#34;&gt;GitLab Pagesでサイト公開の仕方&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;publicフォルダを作成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリのルートに&lt;code&gt;public&lt;/code&gt;フォルダを作成して、その中にindex.htmlや関連するcssやjsファイルなどを入れていきます。基本的には&lt;code&gt;public/index.html&lt;/code&gt;がプロジェクトのトップページとして認識されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.gitlab-ci.ymlを作成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリのルート（&lt;code&gt;public&lt;/code&gt;フォルダと同じ階層）に&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;を作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pages:
stage: deploy
script:
- echo &#39;Nothing to do...&#39;
artifacts:
paths:
- public
only:
- master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あとはGitLabのリポジトリにプッシュするだけです。
この場合masterブランチにプッシュすると更新されます。&lt;/p&gt;
&lt;p&gt;ファイル構成はイメージはこんな感じです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;がある状態でGitLabのリポジトリにプッシュするとCIが動いてごにょごにょやってくれます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://&amp;lt;ユーザー名&amp;gt;.gitlab.io/&amp;lt;リポジトリ名&amp;gt; にアクセス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;https://&amp;lt;ユーザー名&amp;gt;.gitlab.io/&amp;lt;リポジトリ名&amp;gt;&lt;/code&gt;が公開URLです。&lt;/p&gt;
&lt;p&gt;GitLabのリポジトリのURLが&lt;code&gt;https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;&lt;/code&gt;となっているので適宜読み替えましょう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例えば、リポジトリのURLが&lt;code&gt;https://gitlab.com/n0bisuke/akihabara&lt;/code&gt;だとしたら、公開用のGitLab PagesのURLは&lt;code&gt;https://n0bisuke.gitlab.io/akihabara&lt;/code&gt;になります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;プッシュしてから更新まで数分時間が掛かることがあるので少し経ってからまた確認してみましょう。&lt;/p&gt;
&lt;p&gt;うまくいかない場合は&lt;code&gt;https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;/-/jobs&lt;/code&gt;に行くとジョブの確認が出来るので、エラーなどを確認してみましょう。&lt;/p&gt;
&lt;h2 id=&#34;vuepressをgitlab-pagesにデプロイ&#34;&gt;VuePressをGitLab Pagesにデプロイ&lt;/h2&gt;
&lt;p&gt;先ほどの利用したGitLab CIを利用します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vuepress.vuejs.org/&#34;&gt;VuePress&lt;/a&gt;はVue.jsの作者が作ったVue.js製の静的サイトジェネレータです。&lt;/p&gt;
&lt;p&gt;公式のドキュメントに、&lt;a href=&#34;https://vuepress.vuejs.org/guide/deploy.html#gitlab-pages-and-gitlab-ci&#34;&gt;VuePressをGitLab PagesとGitLab CIにデプロイする方法&lt;/a&gt;が載っていますが、個人的には以下の2ステップだけで問題ないと思います。&lt;/p&gt;
&lt;h3 id=&#34;1-vuepressのconfig-jsの設定&#34;&gt;1. VuePressのconfig.jsの設定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docs/.vuepress/config.js&lt;/code&gt;の中に&lt;code&gt;base&lt;/code&gt;というキーがあります。
ここにリポジトリ名をパスとして設定してあげます。&lt;/p&gt;
&lt;p&gt;例えば&lt;code&gt;https://gitlab.com/n0bisuke/hogehoge&lt;/code&gt;というリポジトリで&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;という公開URLになる場合は、&lt;code&gt;base&lt;/code&gt;の箇所を&lt;code&gt;/hogehoge/&lt;/code&gt;にしましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;後述しますが、もし、この後の手順のカスタムドメインまでを設定するならばここの&lt;code&gt;base&lt;/code&gt;は&lt;code&gt;/&lt;/code&gt;の設定のままで大丈夫です。&lt;/p&gt;
&lt;h3 id=&#34;2-gitlab-ci-yml-の記述&#34;&gt;2. &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;の記述&lt;/h3&gt;
&lt;p&gt;以下のyml記述だけで完了です。プッシュして&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;(自分の環境に読み替え)などにアクセスして確認しましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image: node:current-alpine
pages:
cache:
paths:
- node_modules/
before_script:
- node -v
- npm i
script:
- npm run docs:build
- cp -pr docs/.vuepress/dist public
artifacts:
paths:
- public
only:
- master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デフォルトのチュートリアル通りだとビルドのコマンドが&lt;code&gt;npm run docs:build&lt;/code&gt;になっているはずなので、プッシュするとCI環境側で&lt;code&gt;npm run docs:build&lt;/code&gt;でビルドして、ビルド後のdistフォルダをpublicフォルダにコピー、その後publicフォルダをGitLab Pagesとしてデプロイします。&lt;/p&gt;
&lt;p&gt;公式ドキュメントにはビルド先のフォルダをdistではなくpublicにする設定などがありましたが、この記述でも問題ないです。&lt;/p&gt;
&lt;h2 id=&#34;カスタムドメインの利用-ssl対応&#34;&gt;カスタムドメインの利用 &amp;amp; SSL対応&lt;/h2&gt;
&lt;p&gt;現状で、&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;というアドレスが公開URLになっているものを&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;でアクセスさせるようにしていきます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt;を利用します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;を利用する手もあるのですが、更新の手間があるのと既にdotstud.ioでCloudflareを使ってDNSやSSL設定をしていたので&lt;strong&gt;Cloudflareを利用してのGitLab Pagesのカスタムドメイン&amp;amp;SSL対応を紹介&lt;/strong&gt;します。&lt;/p&gt;
&lt;p&gt;GitLab公式の&lt;a href=&#34;https://about.gitlab.com/2017/02/07/setting-up-gitlab-pages-with-cloudflare-certificates/&#34;&gt;Setting up GitLab Pages with CloudFlare Certificates&lt;/a&gt;を見ながら試してみました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNSのAレコードをGitLab Pagesに向けることも出来るみたいですが、今回はCNAMEでサブドメインをリダイレクトさせる形にします。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-証明書の作成&#34;&gt;1. 証明書の作成&lt;/h3&gt;
&lt;p&gt;CloudflareのCrypto画面を開きます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Origin Certificates&lt;/code&gt;の項目にある&lt;code&gt;Create Certificate&lt;/code&gt;(証明書の作成)の青いボタンを押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;モーダルウィンドウが開かれますが、&lt;code&gt;List the hostnames&lt;/code&gt;の箇所だけ変更して、利用したいドメイン名を記述して、NEXTボタンで進みましょう。&lt;/p&gt;
&lt;p&gt;今回は&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;でアクセスしたいので、ここには&lt;code&gt;hogehoge.dotstud.io&lt;/code&gt;などのドメイン名だけを入力しておきます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これで証明書の文字列が生成されます。
&lt;code&gt;Ker format&lt;/code&gt;はデフォルトの&lt;code&gt;PEM&lt;/code&gt;のままで大丈夫です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin certificate&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private key&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;この二種類の文字列をあとで使うのでコピーしておきましょう。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-gitlab-pagesに設定する&#34;&gt;2. GitLab Pagesに設定する&lt;/h3&gt;
&lt;p&gt;GitLabのリポジトリ設定画面からPagesの設定画面に行きます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;/pages&lt;/code&gt;が設定画面です。&lt;/p&gt;
&lt;p&gt;ここから&lt;code&gt;New Domain&lt;/code&gt;ボタンを押してカスタムドメインの設定をします。&lt;/p&gt;
&lt;p&gt;また、この際に&lt;code&gt;Force domains with SSL certificates to use HTTPS&lt;/code&gt;のチェックがありますが、SSL対応させるのでデフォルトのままチェックしておきましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Domain&lt;/code&gt;の項目に設定したいカスタムドメイン（今回は&lt;code&gt;hogehoge.dotstud.io&lt;/code&gt;）を設定します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以下の二箇所には先ほどのCloudflareで生成した証明書文字列を指定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Certificate (PEM): &lt;code&gt;Origin certificate&lt;/code&gt;の文字列&lt;/li&gt;
&lt;li&gt;Key (PEM): &lt;code&gt;Private key&lt;/code&gt;の文字列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;----BEGIN CERTIFICATE----&lt;/code&gt;などの文字を含めて全部コピペしましょう。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ここにさらにCloudflareの証明書の文字列が必要になります。&lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/218689638&#34;&gt;CloudFlare&amp;rsquo;s Origin CA — RSA Root&lt;/a&gt;というらしいです。&lt;/p&gt;
&lt;p&gt;以下の文字列(CloudFlare&amp;rsquo;s Origin CA)をコピーしましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-----BEGIN CERTIFICATE-----
MIID/DCCAuagAwIBAgIID+rOSdTGfGcwCwYJKoZIhvcNAQELMIGLMQswCQYDVQQG
EwJVUzEZMBcGA1UEChMQQ2xvdWRGbGFyZSwgSW5jLjE0MDIGA1UECxMrQ2xvdWRG
bGFyZSBPcmlnaW4gU1NMIENlcnRpZmljYXRlIEF1dGhvcml0eTEWMBQGA1UEBxMN
U2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZvcm5pYTAeFw0xNDExMTMyMDM4
NTBaFw0xOTExMTQwMTQzNTBaMIGLMQswCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xv
dWRGbGFyZSwgSW5jLjE0MDIGA1UECxMrQ2xvdWRGbGFyZSBPcmlnaW4gU1NMIENl
cnRpZmljYXRlIEF1dGhvcml0eTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEG
A1UECBMKQ2FsaWZvcm5pYTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
AMBIlWf1KEKR5hbB75OYrAcUXobpD/AxvSYRXr91mbRu+lqE7YbyyRUShQh15lem
ef+umeEtPZoLFLhcLyczJxOhI+siLGDQm/a/UDkWvAXYa5DZ+pHU5ct5nZ8pGzqJ
p8G1Hy5RMVYDXZT9F6EaHjMG0OOffH6Ih25TtgfyyrjXycwDH0u6GXt+G/rywcqz
/9W4Aki3XNQMUHNQAtBLEEIYHMkyTYJxuL2tXO6ID5cCsoWw8meHufTeZW2DyUpl
yP3AHt4149RQSyWZMJ6AyntL9d8Xhfpxd9rJkh9Kge2iV9rQTFuE1rRT5s7OSJcK
xUsklgHcGHYMcNfNMilNHb8CAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgAGMBIGA1Ud
EwEB/wQIMAYBAf8CAQIwHQYDVR0OBBYEFCToU1ddfDRAh6nrlNu64RZ4/CmkMB8G
A1UdIwQYMBaAFCToU1ddfDRAh6nrlNu64RZ4/CmkMAsGCSqGSIb3DQEBCwOCAQEA
cQDBVAoRrhhsGegsSFsv1w8v27zzHKaJNv6ffLGIRvXK8VKKK0gKXh2zQtN9SnaD
gYNe7Pr4C3I8ooYKRJJWLsmEHdGdnYYmj0OJfGrfQf6MLIc/11bQhLepZTxdhFYh
QGgDl6gRmb8aDwk7Q92BPvek5nMzaWlP82ixavvYI+okoSY8pwdcVKobx6rWzMWz
ZEC9M6H3F0dDYE23XcCFIdgNSAmmGyXPBstOe0aAJXwJTxOEPn36VWr0PKIQJy5Y
4o1wpMpqCOIwWc8J9REV/REzN6Z1LXImdUgXIXOwrz56gKUJzPejtBQyIGj0mveX
Fu6q54beR89jDc+oABmOgg==
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;この&lt;code&gt;CloudFlare&#39;s Origin CA&lt;/code&gt;をコピーしたら、先ほど&lt;code&gt;Certificate (PEM)&lt;/code&gt;のフォームに入れ込んだ文字列の後ろに改行をいれて、&lt;code&gt;CloudFlare&#39;s Origin CA&lt;/code&gt;を貼り付けます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;この画面のような感じです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ここまで出来たら、ページ下部の&lt;code&gt;Create New Domain&lt;/code&gt;のボタンを押して進みましょう。&lt;/p&gt;
&lt;h3 id=&#34;3-dnsの設定&#34;&gt;3. DNSの設定&lt;/h3&gt;
&lt;p&gt;無事に作成出来ると、以下のような確認画面になります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;この画面の指示にしたがってCloudflareのDNS設定画面でCNAMEとTXTレコードを設定してあげる必要があります。&lt;/p&gt;
&lt;h4 id=&#34;cnameレコード設定&#34;&gt;CNAMEレコード設定&lt;/h4&gt;
&lt;p&gt;まずはCNAMEレコードです。 以下のように設定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: CNAME&lt;/li&gt;
&lt;li&gt;Name: 利用したいカスタムドメイン名&lt;/li&gt;
&lt;li&gt;Value: &amp;lt;ユーザー名&amp;gt;.gitlab.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;にしたい場合は&lt;strong&gt;Name&lt;/strong&gt;を&lt;code&gt;hogehoge&lt;/code&gt;にし、元々のGitLabリポジトリが&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;などであれば,&lt;strong&gt;Value&lt;/strong&gt;を&lt;code&gt;n0bisuke.gitlab.io&lt;/code&gt;にします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これで&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;にアクセスした際に&lt;code&gt;https://n0bisuke.gitlab.io&lt;/code&gt;側にリダイレクトされるようになります。&lt;/p&gt;
&lt;h4 id=&#34;txtレコード設定-所有者確認&#34;&gt;TXTレコード設定（所有者確認）&lt;/h4&gt;
&lt;p&gt;GitLab側から見ると&lt;code&gt;hogehoge.dotstud.io&lt;/code&gt;をそのユーザーが所有しているか分からないため、所有権の確認作業が発生します。&lt;/p&gt;
&lt;p&gt;GitLabの設定画面に&lt;code&gt;Verification status&lt;/code&gt;の箇所に&lt;code&gt;_gitlab-pages-verification-code.hogehoge.dotstud.io TXT gitlab-pages-verification-code=xxxxxxxxxxxxxxxxxx&lt;/code&gt;などの文字列が表示されていることが分かります。この情報をCloudflareに登録してあげればOKです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;登録が出来たら、おそらく赤くなっているUnverifiedのボタンを押して確認しましょう。
上手くいくとこんな感じで&lt;code&gt;Successfully verified&lt;/code&gt;などの文字が表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-sslの設定&#34;&gt;4. SSLの設定&lt;/h3&gt;
&lt;p&gt;CloudflareのCrypto画面からSSLの設定が出来ます。&lt;code&gt;Full&lt;/code&gt;もしくは&lt;code&gt;Full(strict)&lt;/code&gt;にしておきましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/239/14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;あとは、ドメインが浸透したりするのを少し待ちましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://hogehoge.dotstud.io&lt;/code&gt;にアクセすると&lt;code&gt;https://n0bisuke.gitlab.io/hogehoge&lt;/code&gt;に内部的にリダイレクトされるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;5-vuepressの設定を戻す&#34;&gt;5. VuePressの設定を戻す&lt;/h3&gt;
&lt;p&gt;先ほどの紹介で、VuePressをGitLab Pagesで公開する際に&lt;code&gt;docs/.vuepress/config.js&lt;/code&gt;の&lt;code&gt;base&lt;/code&gt;キーを&lt;code&gt;/リポジトリ名/&lt;/code&gt;とする紹介がありましたが、カスタムドメインまでやった人は&lt;code&gt;base&lt;/code&gt;キーを&lt;code&gt;/&lt;/code&gt;に戻しておいてください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ここの設定を間違えるとCSSやJSが上手く読み込まれなくなってしまいます。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;如何でしょう。GitLab Pagesや周辺ツール/サービスを活用して無料でカスタムドメイン+SSLのVuePressブログを作ることが出来ました。&lt;/p&gt;
&lt;p&gt;この辺のことを試す際の参考になれば幸いです。&lt;/p&gt;</description></item><item><title>電池が切れても消えないディスプレイって？電子ペーパーを使ってみた！</title><link>https://dotstud.io/blog/using-e-paper-module/</link><pubDate>Tue, 29 Jan 2019 02:11:45 +0900</pubDate><guid>https://dotstud.io/blog/using-e-paper-module/</guid><description>
&lt;p&gt;こんにちは、わくわくエンジニアの&lt;a href=&#34;https://dotstud.io/members/tomato/&#34;&gt;佐々木さん&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;みなさんは&lt;strong&gt;電子ペーパー&lt;/strong&gt;を知っていますか？&lt;/p&gt;
&lt;p&gt;電子ペーパーはその名の通り、&lt;u&gt;紙のような見た目のディスプレイ&lt;/u&gt;です。低消費電力であることや、最後に表示したものを電源がなくても保持し続けることが特徴として挙げられます。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;身近なものだとAmazonの&lt;a href=&#34;https://www.amazon.co.jp/Kindle-New%E3%83%A2%E3%83%87%E3%83%AB-%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC-Wi-Fi-%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF-%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%9A%E3%83%BC%E3%83%B3%E6%83%85%E5%A0%B1%E3%81%A4%E3%81%8D%E3%83%A2%E3%83%87%E3%83%AB/dp/B0186FESEE/ref=sr_1_1?ie=UTF8&amp;amp;qid=1547970527&amp;amp;sr=8-1&amp;amp;keywords=kindle&#34;&gt;Kindle&lt;/a&gt;で採用されています。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;それでは実際に本題に入っていきましょう！&lt;/p&gt;
&lt;h2 id=&#34;電子ペーパーの仕組み&#34;&gt;電子ペーパーの仕組み&lt;/h2&gt;
&lt;p&gt;今回使用するのは&lt;a href=&#34;https://www.sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-58WG&#34;&gt;2.9inch e-Paper Module&lt;/a&gt;という電子ペーパー。&lt;/p&gt;
&lt;p&gt;電子ペーパーは複数の表示方式がありますが、2.9inch e-Paper Moduleは&lt;strong&gt;電気泳動方式&lt;/strong&gt;というものが採用されているためこちらの説明をしたいと思います。&lt;/p&gt;
&lt;p&gt;電気泳動方式では、ディスプレイの中に&lt;strong&gt;マイクロカプセル&lt;/strong&gt;という&lt;u&gt;色を表現するための透明なカプセル&lt;/u&gt;が隙間なく並んでいます。そのマイクロカプセルの中には色のついた粒子が入っており、かける電圧で粒子を移動させることによって、見える色を変えています。電源がなくなっても粒子は移動しないので、最後に表示したものを保持し続けることができます。&lt;/p&gt;
&lt;p&gt;従来は白黒のディスプレイが主流でしたが、現在では3色のディスプレイも多くなっています。&lt;/p&gt;
&lt;h2 id=&#34;使ったもの&#34;&gt;使ったもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-58WG&#34;&gt;2.9inch e-Paper Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/abfea5c3-70e3-6e80-b108-841ff52824d0.jpeg&#34; alt=&#34;20180810_165537.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;このディスプレイは白黒黄の3色を表現できるディスプレイになっています。この他にも、白黒や白黒赤などを表示することができるディスプレイもあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.switch-science.com/catalog/3646/&#34;&gt;Raspberry Pi Zero WH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/62d5a886-b22e-f1bd-e436-cea221c7c1d8.jpeg&#34; alt=&#34;20190120_192847.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;このRaspberry Pi Zero WHはIoTで使われるボードの１つです。&lt;/p&gt;
&lt;h2 id=&#34;ディスプレイに表示させてみよう&#34;&gt;ディスプレイに表示させてみよう&lt;/h2&gt;
&lt;p&gt;今回は&lt;a href=&#34;https://www.waveshare.com/w/upload/9/98/2.9inch-e-paper-module-user-manual-en.pdf&#34;&gt;2.9inch e-Paper Module User Manual&lt;/a&gt;を参考にして進めていきます。&lt;/p&gt;
&lt;h3 id=&#34;配線&#34;&gt;配線&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;GPIO&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2.9inch e-Paper Module&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3.3V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.3V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MOSI&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SCLK&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CLK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CE0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BUSY&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;環境構築&#34;&gt;環境構築&lt;/h3&gt;
&lt;p&gt;以下のコマンドが今回プログラムを実行するのに必要なものをインストールするコマンドになります。&lt;/p&gt;
&lt;p&gt;ターミナルを開いて実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pip
sudo pip install spidev
sudo apt-get install libjpeg-dev
sudo pip install Image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;strong&gt;&lt;code&gt;/boot/config.txt&lt;/code&gt;&lt;/strong&gt;を編集します。以下のコマンドを実行してください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sudo nano /boot/config.txt&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;すると、nanoエディタが開くので、以下の手順を行なってください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;番下に&lt;strong&gt;&lt;code&gt;dtparam=spi=on&lt;/code&gt;&lt;/strong&gt;を追加&lt;/li&gt;
&lt;li&gt;キーボードの &lt;strong&gt;&lt;code&gt;controlキー&lt;/code&gt;&lt;/strong&gt; と &lt;strong&gt;&lt;code&gt;xキー&lt;/code&gt;&lt;/strong&gt; を同時に押す&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;yキー&lt;/code&gt;&lt;/strong&gt;を押す&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;enterキー&lt;/code&gt;&lt;/strong&gt;を押す&lt;/li&gt;
&lt;li&gt;全て完了したら&lt;strong&gt;&lt;code&gt;reboot&lt;/code&gt;&lt;/strong&gt;コマンドで再起動&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで環境構築は完了です。&lt;/p&gt;
&lt;h3 id=&#34;プログラム&#34;&gt;プログラム&lt;/h3&gt;
&lt;p&gt;デモプログラムが公開されているため、&lt;a href=&#34;https://www.waveshare.com/wiki/File:2.9inch_e-paper_module_b_code.7z&#34;&gt;こちら&lt;/a&gt;からcurrentと書かれているものをダウンロードしてください。&lt;/p&gt;
&lt;p&gt;ダウンロードが完了したら以下のコマンドを実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install p7zip-full
7z x 2.9inch_e-paper_module_b_code.7z
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコマンドで出てきた中の&lt;strong&gt;&lt;code&gt;RaspberryPi/python2&lt;/code&gt;&lt;/strong&gt;を今回は使います。&lt;/p&gt;
&lt;p&gt;ターミナルで&lt;strong&gt;&lt;code&gt;RaspberryPi/python2&lt;/code&gt;&lt;/strong&gt;ディレクトリに移動して&lt;code&gt;python main.py&lt;/code&gt;**を実行すると、デモプログラムが起動します（※何も編集していない状態だとフォントが存在していないためエラーが発生します）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nano main.py&lt;/code&gt;&lt;/strong&gt;でファイルを少し編集します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main.py&lt;/code&gt;には以下のようなプログラムがあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;font24 = ImageFont.truetype(&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;, 24)
font18 = ImageFont.truetype(&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この&lt;strong&gt;&lt;code&gt;&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;&lt;/code&gt;&lt;/strong&gt;という部分を
&lt;strong&gt;&lt;code&gt;&#39;/opt/vc/src/hello_pi/hello_font/Vera.ttf&#39;&lt;/code&gt;&lt;/strong&gt;に変更します。&lt;/p&gt;
&lt;p&gt;もう一度&lt;code&gt;python main.py&lt;/code&gt;を実行すると、画面がピカピカし始め、Hello, worldなどが画像に表示されます。&lt;/p&gt;
&lt;p&gt;では、実際にプログラムを少し変えて見ていきましょう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding:utf-8 -*-
import epd2in9b
import time
from PIL import Image,ImageDraw,ImageFont
import traceback
try:
# ディスプレイの初期化処理をしています。
epd = epd2in9b.EPD()
epd.init()
print &amp;quot;clear&amp;quot;
epd.Clear(0xFF)
# ディスプレイを横に使うように設定しています。
HBlackimage = Image.new(&#39;1&#39;, (epd2in9b.EPD_HEIGHT, epd2in9b.EPD_WIDTH), 255) # 298*126
HRedimage = Image.new(&#39;1&#39;, (epd2in9b.EPD_HEIGHT, epd2in9b.EPD_WIDTH), 255) # 298*126
print &amp;quot;Drawing&amp;quot;
drawblack = ImageDraw.Draw(HBlackimage)
drawred = ImageDraw.Draw(HRedimage)
# １つ目の引数でフォント、2つ目の引数でフォントのサイズを指定しています。
font30 = ImageFont.truetype(&#39;/opt/vc/src/hello_pi/hello_font/Vera.ttf&#39;, 30)
# １つ目の引数で座標、２つ目に表示させたい文字列、３つ目には上記のフォントを指定します。
drawblack.text((10, 0), &#39;Hello, World&#39;, font = font30)
# ディスプレイに表示させます。
epd.display(epd.getbuffer(HBlackimage), epd.getbuffer(HRedimage))
time.sleep(2)
print &amp;quot;read bmp file&amp;quot;
HBlackimage = Image.open(&#39;2in9b-b.bmp&#39;)
epd.display(epd.getbuffer(HBlackimage), epd.getbuffer(HRedimage))
time.sleep(2)
except Exception, e:
print &#39;traceback.format_exc():\n%s&#39; % traceback.format_exc()
exit()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプログラムを実行すると以下のようになります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/45152d05-0b37-6d40-a992-2dc034553d67.gif&#34; alt=&#34;20190121_002653.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/c4b5f8b7-40c1-5145-5ba6-11c9b7a6f69a.gif&#34; alt=&#34;20190121_002722.gif&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;いかがでしたでしょうか？&lt;/p&gt;
&lt;p&gt;電子ペーパーは、低消費電力という特徴があるので、センサからとれるデータを一定時間ごとに表示したり、自分の好きなものを表示して持ち運んだりすることもできます。&lt;/p&gt;
&lt;p&gt;電子部品の販売店に売っていたりしますが、電子ペーパーの使い方はあまり広がっていないように感じるので、この記事を参考にぜひやってみてください！&lt;/p&gt;</description></item><item><title>ArduinoでTwitter連携！愛しのぬいぐるみトンピーちゃんに命を吹き込んでみた</title><link>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</link><pubDate>Mon, 28 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</guid><description>
&lt;p&gt;皆さん、大好きなぬいぐるみが動き出したらいいなと思ったこと、ありませんか？&lt;/p&gt;
&lt;p&gt;今回は私の愛すべきお友達「トンピーちゃん」に命を吹き込むべく、プログラミング初心者の私がArduinoとTwitterの連携に挑戦してみました！&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;こちらです！！&lt;/font&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/721a8190-3ffc-8bca-c4b3-774ee58d45e9.gif&#34; alt=&#34;ezgif.com-video-to-gif.gif&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;今回やること&#34;&gt;今回やること&lt;/h2&gt;
&lt;h3 id=&#34;実装の構成&#34;&gt;実装の構成&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ざっくりの構成です。Node.jsでTwitterの「#tonpy」というハッシュタグを監視し、「move #tonpy」「stop #tonpy」というツイートがあったらArduinoを経由してトンピーちゃんが動いたり止まったりします。&lt;/p&gt;
&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;
&lt;h4 id=&#34;こぐまのトンピーちゃん&#34;&gt;■こぐまのトンピーちゃん&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/210df088-f5f0-6f8a-e9ee-2a63f06e2364.jpeg&#34; alt=&#34;トンピー.jpg&#34; /&gt;
愛用のトンピーちゃんです。乾電池を入れるとピーヒャラドンドンします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入: &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%A4%E3%83%AF%E3%83%A4-%E3%81%93%E3%81%90%E3%81%BE%E3%81%AE%E3%83%88%E3%83%B3%E3%83%94%E3%83%BC/dp/B0002U3OBA&#34;&gt;Amazon.co.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-uno&#34;&gt;■Arduino Uno&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/c26d230d-e320-b73d-f15f-32d813e1294f.jpeg&#34; alt=&#34;Arduino Uno.jpg&#34; /&gt;
Arduino Unoは2010年に発売されたArduinoで、&lt;a href=&#34;https://store.arduino.cc/usa/arduino-uno-rev3&#34;&gt;Arduinoの公式サイト&lt;/a&gt;にも「&lt;strong&gt;電子工作初心者に最適&lt;/strong&gt;」と書いてあったのでこちらに決めました。&lt;/p&gt;
&lt;p&gt;購入にあたっては「Arduino 初心者」と調べヒットした「&lt;a href=&#34;https://www.amazon.co.jp/%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-SSCI-GettingStartedArduinoKit-Arduino%E3%82%92%E3%81%AF%E3%81%98%E3%82%81%E3%82%88%E3%81%86%E3%82%AD%E3%83%83%E3%83%88/dp/B0025Y6C5G/ref=sr_1_fkmr1_2?ie=UTF8&amp;amp;qid=1544321570&amp;amp;sr=8-2-fkmr1&amp;amp;keywords=arduino+%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%AD%E3%83%83%E3%83%88&#34;&gt;Arduinoをはじめようキット&lt;/a&gt;」を購入しました。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/d7099cb0-97aa-8ff1-4e3d-b959e8139fb4.jpeg&#34;&gt;
─ Arduinoをはじめようキット
&lt;/center&gt;
Arduino Unoの他にブレッドボードや抵抗など電子工作を始めるにあたり必要なもの一式が揃っているため、すぐに始める事ができます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;fet-fet-mosfet-2sjs527l-e-60v5a&#34;&gt;■FET（FET MOSFET 2SJS527L-E 60V5A）&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/88510174-eed9-e286-5343-3deeb08a7884.jpeg&#34; alt=&#34;I-08315.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;FETはロードスイッチとも呼ばれ、簡単にいうと外部からの電圧によって電流の流れを制御できるスイッチのようなもののようです。小さな電力で動作させる事ができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/#回路を作成&#34;&gt;回路を作成&lt;/a&gt;で説明しますが、FETには「Pチャネル」と「Nチャネル」の2種類あります。今回はNチャネルのFETを利用します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入: &lt;a href=&#34;http://akizukidenshi.com/catalog/g/gI-07145/&#34;&gt;秋月電子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;node-jsをインストールしたpc&#34;&gt;■Node.jsをインストールしたPC&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/efcdf34b-504e-cc68-125a-0acadd815510.jpeg&#34; alt=&#34;IMG_9204.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;今回はNode.jsでプログラムを動かします。下記記事を参考にインストールしてみてください！&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;136&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/nodejs-install-use-nodebrew/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/136/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
Node.jsを始めよう！nodebrewを使って5分で環境構築
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2017-12-15
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
nodebrewを使ったNode.jsのインストール方法をまとめました。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;ul&gt;
&lt;li&gt;筆者PC: mac OS HighSierra バージョン10.13.6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Node.js: v10.10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;その他&#34;&gt;■その他&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/eb369434-a5ff-e44a-c7b9-02a065030098.jpeg&#34; alt=&#34;IMG_9206.jpg&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/docs/breadboard/&#34;&gt;ブレッドボード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/jumperwire/#%E3%83%9F%E3%83%8E%E3%83%A0%E3%82%B7%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97-%E3%83%AF%E3%83%8B%E5%8F%A3&#34;&gt;ワニ口クリップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;抵抗（今回は220Ω）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;トンピーちゃんを解体&#34;&gt;トンピーちゃんを解体&lt;/h2&gt;
&lt;p&gt;まずはトンピーちゃんの導線を確認するため、少し解体します。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/69ccd688-afb6-0715-124a-44d886fe3178.jpeg&#34; alt=&#34;IMG_6786.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/84c4fcd7-8c65-a0dc-1a84-ee75b5c2ef48.jpeg&#34; alt=&#34;IMG_9205.jpg&#34; /&gt;
電池の部分を取り外してみました。すると、導線は電池部分と本体でパックリ分かれている事が確認できました。今回はその部分にArduino Unoを繋げば回路の開/閉が制御できそうですね。&lt;/p&gt;
&lt;h2 id=&#34;arduino-unoとトンピーちゃんを連携&#34;&gt;Arduino Unoとトンピーちゃんを連携&lt;/h2&gt;
&lt;h3 id=&#34;回路を作成&#34;&gt;回路を作成&lt;/h3&gt;
&lt;p&gt;Arduino Unoから直接ON/OFFを制御しようとすると、電流が少なく回路を開/閉できませんでした。そこでArduino Unoとトンピーちゃんの間に&lt;strong&gt;FETを挿入&lt;/strong&gt;します。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/230/fet.png&#34; alt=&#34;fet&#34;&gt;
&lt;/center&gt;
&lt;p&gt;FETは、電圧の加え方の違いによって「Pチャネル」と「Nチャネル」の2種類に分かれます。今回はNチャネルのFETを利用します。&lt;/p&gt;
&lt;p&gt;また、回路の「+側」にFETを繋ぐことを「ハイサイド（スイッチ）」、-側に繋ぐことを「ローサイド（スイッチ）」と呼称します。今回はNチャネルなので、ローサイドにFETを繋ぎます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d32c3f6f4b1de908ceced242cc2ba7f4.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最終的に上記のような回路図になりました。&lt;/p&gt;
&lt;h3 id=&#34;arduino-unoにプログラムを書き込む&#34;&gt;Arduino Unoにプログラムを書き込む&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/b544f541-a5ac-ee97-18a3-de3963210c92.png&#34; alt=&#34;スクリーンショット 2018-12-18 12.35.58.png&#34; /&gt;
ArduinoをUSBケーブルでPCに繋ぎ、アプリケーションでArduino IDEを開きます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/da16043a-121e-52e2-e395-3121a8a3e48f.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.10.09.png&#34; /&gt;
ファイル→新規ファイルを選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/2a42d894-497d-a0c4-5573-6a4c148fc5fe.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.09.45.png&#34; /&gt;
ツール→ボード→繋いだArduino（今回はArduino Uno）を選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/9f5d63e2-454b-c637-ef5d-07550cccf8d5.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.11.33.png&#34; /&gt;
ツール→シリアルポート→接続したArduinoを選択します。&lt;/p&gt;
&lt;p&gt;下記コードを新規ファイルにコピー&amp;amp;ペーストします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// pins
const int tonpyPin = 2;
void setup() {
// initialize serial:
Serial.begin(9600);
// make the pins outputs:
pinMode(tonpyPin, OUTPUT);
}
void loop() {
// if there&#39;s any serial available, read it:
while (Serial.available() &amp;gt; 0) {
char value = Serial.read();
if (value == &#39;p&#39;) {
digitalWrite(tonpyPin, HIGH);
} else if (value == &#39;q&#39;){
digitalWrite(tonpyPin, LOW);
} else{
digitalWrite(tonpyPin, LOW);
}
Serial.println(value);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/8ec32eee-c610-137c-febd-9408f22db6e1.png&#34; alt=&#34;スクリーンショット 2018-12-10 9.25.26.png&#34; /&gt;
左上にある「→」ボタンを押してマイコンボードに書き込みます。&lt;/p&gt;
&lt;p&gt;これでArduino Unoからの信号（p: スイッチON、q: スイッチOFF）でトンピーちゃんが動く/止まるようになりました。&lt;/p&gt;
&lt;p&gt;これをツイートと連動できれば完成です！&lt;/p&gt;
&lt;h2 id=&#34;node-jsのプログラム&#34;&gt;Node.jsのプログラム&lt;/h2&gt;
&lt;p&gt;ハッシュタグ「#tonpy」を取得し、さらに「move」「stop」のツイートがあったらArduino Unoに送るプログラムを作成します。&lt;/p&gt;
&lt;h3 id=&#34;twitter-apiの準備&#34;&gt;Twitter APIの準備&lt;/h3&gt;
&lt;p&gt;API使用には&lt;a href=&#34;https://developer.twitter.com/&#34;&gt;Twitter Developer&lt;/a&gt;へ登録する必要があります。登録の際、用途など英文で書く部分がありました（筆者はGoogle翻訳を駆使しました）。&lt;/p&gt;
&lt;p&gt;手順については下記の記事に詳しく書かれており、そちらに沿って登録しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/kngsym2018/items/2524d21455aac111cdee&#34;&gt;Twitter API 登録 (アカウント申請方法) から承認されるまでの手順まとめ　※2018年9月時点の情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tweetを取得するnode-jsのプログラムを作成&#34;&gt;Tweetを取得するNode.jsのプログラムを作成&lt;/h3&gt;
&lt;h4 id=&#34;ディレクトリを用意&#34;&gt;■ディレクトリを用意&lt;/h4&gt;
&lt;p&gt;任意の保存場所にフォルダを用意します。今回はDesktopにTonpyフォルダを作りました。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;jsファイルを作成&#34;&gt;■JSファイルを作成&lt;/h4&gt;
&lt;p&gt;作成したフォルダに任意の名前のJSファイルを用意します。今回は「app.js」としました。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;twitter-apiを使用するモジュールのインストール&#34;&gt;■Twitter APIを使用するモジュールのインストール&lt;/h4&gt;
&lt;p&gt;Node.jsでTwitter APIが使用できるよう&lt;a href=&#34;https://www.npmjs.com/package/twitter&#34;&gt;Twitterモジュール&lt;/a&gt;をnpmでインストールします。ターミナルで作成したフォルダを開き、下記コマンドを叩きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install twitter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでNode.jsでTwitter APIが使用できるようになりました。&lt;/p&gt;
&lt;p&gt;実際に使用する際はJSファイル内で最初に下記のように書くとTwitter APIが呼び出されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Twitter = require(&#39;twitter&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ツイートを取得するプログラムを作成&#34;&gt;■ツイートを取得するプログラムを作成&lt;/h4&gt;
&lt;p&gt;TwitterAPIには「REST API」と「Streaming API」の2種類があります。&lt;/p&gt;
&lt;p&gt;REST APIはエンドポイントへリクエストして初めて結果が得られるものに対して、Streaming APIはレートのリミットなくツイートを受信し続ける事ができます。&lt;/p&gt;
&lt;p&gt;今回はツイートを常に監視し該当のツイートがあったら結果を取得する、という事がしたいので&lt;strong&gt;Streaming API&lt;/strong&gt;を使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const twitter = require(&amp;quot;twitter&amp;quot;);
const fs = require(&amp;quot;fs&amp;quot;);
const client = new twitter({
consumer_key: &#39;&#39;,//Dev Accountで取得したkeyを書く
consumer_secret: &#39;&#39;,
access_token_key: &#39;&#39;,
access_token_secret: &#39;&#39;,
});
let tweetText =&#39;w&#39;;
client.stream(&#39;statuses/filter&#39;, {track:&amp;quot;#tonpy &amp;quot;}, (stream) =&amp;gt; {//Streaming APIを呼び出す
stream.on(&#39;data&#39;, (tweet) =&amp;gt; {
tweetText = tweet.text;
(~tweetText.indexOf(&#39;move&#39;)) ? (tweetText = &#39;p&#39;) : (~tweetText.indexOf(&#39;stop&#39;)) ? (tweetText = &#39;q&#39;) : (tweetText = &#39;w&#39;);
});
stream.on(&#39;error&#39;, (error) =&amp;gt; {//エラー
console.error(`Error: ${error.message}`);
stream.destroy();
});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ツイートを取得するNode.jsのプログラムが完成しました。&lt;/p&gt;
&lt;h3 id=&#34;arduinoに送るプログラムを作成&#34;&gt;Arduinoに送るプログラムを作成&lt;/h3&gt;
&lt;h4 id=&#34;シリアル通信をするモジュールのインストール&#34;&gt;■シリアル通信をするモジュールのインストール&lt;/h4&gt;
&lt;p&gt;PCとArduino間でシリアル通信をするために、シリアルポートでシリアル通信を行うモジュールもnpmでインストールします。&lt;/p&gt;
&lt;p&gt;シリアルポートとは&lt;strong&gt;シリアル通信を行う時の接続口&lt;/strong&gt;のことで、今回はArduinoと接続したPCのUSBポートにあたります。&lt;/p&gt;
&lt;p&gt;ターミナルで下記コマンドを叩きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install serialport
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでNode.jsでシリアルポートを制御できるようになりました。&lt;/p&gt;
&lt;p&gt;使用する際はJSファイル内で最初に下記のように呼び出します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Serialport = require(&#39;serialport&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;シリアルポートの名前を調べる&#34;&gt;■シリアルポートの名前を調べる&lt;/h4&gt;
&lt;p&gt;プログラム内では、USBポートに挿しているArduino Uno（ttyデバイス）を指定します。&lt;/p&gt;
&lt;p&gt;ターミナルで下記コマンドを打ち、PCのシリアルポートに接続されている機器を表示します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l /dev/tty.*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Auduino Unoを挿し、もう一度先ほどのコマンドを打ちます。新しく出てきたttyデバイス名がArduino Unoです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-unoに送るnode-jsのプログラムを作成&#34;&gt;■ Arduino Unoに送るNode.jsのプログラムを作成&lt;/h4&gt;
&lt;p&gt;下記がシリアル通信するためのコードです。ツイートを取得するためのJSファイルの続きに記述してください。&lt;/p&gt;
&lt;p&gt;1行目の&lt;code&gt;/dev/tty.xxx&lt;/code&gt;には上記のシリアルポート名を記入してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const port = new SerialPort(&#39;/dev/tty.xxx&#39;,{
baudRate: 9600//baudRate:9600は1秒に最大9600ビットを送信するという意味
});
port.write(&#39;main screen turn on&#39;, function(err) {
if (err) {
return console.log(&#39;Error on write: &#39;, err.message);
}
console.log(&#39;message written&#39;);
});
port.on(&#39;open&#39;, () =&amp;gt; {
console.log(&#39;Serial open.&#39;);
setInterval(write, 1000);
});
const write = () =&amp;gt; {
console.log(`Input to Arduino: ${tweetText}`);
port.write(tweetText, (error) =&amp;gt; {
if(error) {
console.error(`Error: ${error.message}`);
}
});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでツイート情報を取得し、Arduinoに信号を送る事ができるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;完成コード&#34;&gt;完成コード&lt;/h3&gt;
&lt;p&gt;ツイートを取得するプログラム、Arduinoを制御するプログラムを合わせた完成コードは下記のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//-----------------------------------------------
// twitterからツイートを取得
//-----------------------------------------------
const twitter = require(&amp;quot;twitter&amp;quot;);
const client = new twitter({
consumer_key: &#39;&#39;,//Dev Accountで取得したkeyを書く
consumer_secret: &#39;&#39;,
access_token_key: &#39;&#39;,
access_token_secret: &#39;&#39;,
});
let tweetText =&#39;w&#39;;
client.stream(&#39;statuses/filter&#39;, {track:&amp;quot;#tonpy &amp;quot;}, (stream) =&amp;gt; {
stream.on(&#39;data&#39;, (tweet) =&amp;gt; {
tweetText = tweet.text;
(~tweetText.indexOf(&#39;move&#39;)) ? (tweetText = &#39;p&#39;) : (~tweetText.indexOf(&#39;stop&#39;)) ? (tweetText = &#39;q&#39;) : (tweetText = &#39;w&#39;);
});
stream.on(&#39;error&#39;, (error) =&amp;gt; {
console.error(`Error: ${error.message}`);
stream.destroy();
});
});
//-----------------------------------------------
// Node.jsからArduinoに送信
//----------------------------------------------
const SerialPort = require(&#39;serialport&#39;);
const port = new SerialPort(&#39;/dev/tty.xxx&#39;,{
baudRate: 9600
});
port.on(&#39;open&#39;, () =&amp;gt; {
console.log(&#39;Serial open.&#39;);
setInterval(write, 1000);
});
port.on(&#39;data&#39;, (data) =&amp;gt; {
console.log(`Data from Arduino: ${data}`);
});
const write = () =&amp;gt; {
console.log(`Input to Arduino: ${tweetText}`);
port.write(tweetText, (error) =&amp;gt; {
if(error) {
console.error(`Error: ${error.message}`);
}
});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;node-jsを実行する&#34;&gt;■Node.jsを実行する&lt;/h4&gt;
&lt;p&gt;Node.jsは、ファイルのある場所で下記コマンドで実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;部分は、ご自身が作成したファイル名に置き換えてください。「Serial open」がターミナル上に表示されたら無事実行されています。&lt;/p&gt;
&lt;h2 id=&#34;動かしてみる&#34;&gt;動かしてみる&lt;/h2&gt;
&lt;p&gt;Node.jsを起動しながら、ツイートしてみましょう……。「&lt;strong&gt;#tonpy move&lt;/strong&gt;」!!!!!
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/9c8c2611-d9b2-e7dd-3710-8d2011c2b424.gif&#34; alt=&#34;ezgif.com-video-to-gif.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;う、動いたーーーー！！！（少々タイムラグがありますが……。）&lt;/p&gt;
&lt;p&gt;初めてのIoTとっっても楽しかったです！電子工作やNode.jsの勉強にもなり一石二鳥ですね。&lt;/p&gt;
&lt;p&gt;これから色々作っていきたいです！&lt;/p&gt;
&lt;style&gt;
.caution {
border: 1px solid #BFBFBF;
padding: 1em 2em;
margin: 2em 0;
color: #474747;
background: whitesmoke;/*背景色*/
border-left: double 7px #0B0B61;/*左線*/
font-size: 90%;
}
.caution &gt; p {
font-weight: bold;
margin: 0 0 10px 0;
padding: 0;
}
blockquote {
font-size:80%;
}
.accbox {
margin: 2em 0;
padding: 0;
max-width: 710px;
}
.accbox label {
display: block;
margin: 1.5px 0;
padding : 11px 12px;
color :#ffffff;
font-weight: bold;
background :#2f2f2f;
cursor :pointer;
transition: all 0.5s;
}
.accbox label:hover {
background :#A4A4A4;
}
.accbox input {
display: none;
}
.accbox .accshow {
height: 0;
padding: 0;
overflow: hidden;
opacity: 0;
transition: 0.8s;
}
.cssacc:checked + .accshow {
height: auto;
padding: 5px;
background: #eaeaea;
opacity: 1;
}
&lt;/style&gt;</description></item><item><title>Moddable SDKを使ってJavaScriptでIoT開発してみた</title><link>https://dotstud.io/blog/developed-iot-using-moddable/</link><pubDate>Thu, 24 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/developed-iot-using-moddable/</guid><description>
&lt;p&gt;どうも。&lt;a href=&#34;https://dotstud.io/members/horihiro&#34;&gt;ほりひろ&lt;/a&gt; です。
dotstudioブログでは、初めましてですね。&lt;/p&gt;
&lt;p&gt;JavaScript や IoT が好きな、でも実は半田付けも抵抗値の計算もろくにできないレベルの週末プログラマーです。
普段は某クラウドベンダーのサポートエンジニアをしています。
よろしくお願いします。&lt;/p&gt;
&lt;p&gt;Twitterアカウントは&lt;a href=&#34;https://twitter.com/hori__hiro&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;年末に自分の中で話題になっていた、&lt;u&gt;&lt;strong&gt;Moddable SDK&lt;/strong&gt;&lt;/u&gt;というものをようやく触ってみました。&lt;/p&gt;
&lt;h2 id=&#34;moddable-sdk-xs&#34;&gt;Moddable SDK &amp;amp; XS&lt;/h2&gt;
&lt;h3 id=&#34;moddable-sdk&#34;&gt;Moddable SDK&lt;/h3&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/1.png&#34; alt=&#34;1&#34;&gt;
&lt;/center&gt;
&lt;p&gt;Moddable SDK は、&lt;strong&gt;JavaScript コードを ESP32 や ESP8266 といったマイコン上で動作させるためのビルド環境やライブラリー群&lt;/strong&gt;のこと、、、だと思います。&lt;/p&gt;
&lt;p&gt;これは Moddable 社から提供されていますが、&lt;u&gt;下記 GitHub リポジトリで公開されているので、無料で手に入れられます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable&#34;&gt;https://github.com/Moddable-OpenSource/moddable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;xs&#34;&gt;XS&lt;/h3&gt;
&lt;p&gt;XS は、&lt;strong&gt;Moddable SDK で生成される JavaScript ランタイム環境&lt;/strong&gt; （ドキュメントには &lt;strong&gt;virtual machine&lt;/strong&gt; と記載）で、なんと &lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable#modern-software-development-for-microcontrollers&#34;&gt;ES2018 に 99% 以上準拠&lt;/a&gt;しているらしいです。すごいですね！&lt;/p&gt;
&lt;p&gt;※一部準拠していない部分は、注意事項として&lt;strong&gt;&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/XS%20Conformance.md#caveat&#34;&gt;こちら&lt;/a&gt;&lt;/strong&gt;に記載されています。&lt;/p&gt;
&lt;p&gt;これは&lt;a href=&#34;http://www.moddable.com/XS7-TC-39.php&#34;&gt;公式ドキュメント&lt;/a&gt;にある画像です。「XS は一番小さい」って意味でしょうね。シャレてます。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/2.png&#34; alt=&#34;2&#34;&gt;
&lt;/center&gt;
&lt;p&gt;ざっくりとした理解ですが、Moddable SDK のビルドツールで、自分が書いた JavaScript や C のソースコードと組み込みのクラスが含まれた XS を、一つのバイナリーにビルドし、マイコンに書き込んでいるようです。&lt;/p&gt;
&lt;p&gt;これまで JavaScript でのマイコン制御というと、以前から ホスト PC とマイコンをシリアル接続し、ホストPC上の Node.js と Johnny-Five を使ってマイコンを制御する方法があり、最近では obniz の制御をネットワークを介して JavaScript などから行う方法がありますが、いずれもマイコンの外に JavaScript の実行環境を用意する必要があります。&lt;/p&gt;
&lt;p&gt;一方で、Moddable SDK では、&lt;u&gt;JavaScript 実行環境である XS がマイコン上で動作することができます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;この点は、&lt;strong&gt;これまでの実行環境とは大きく違うところですね！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;開発環境の構築&#34;&gt;開発環境の構築&lt;/h2&gt;
&lt;p&gt;基本的に、公式のリポジトリに記載された &lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/Moddable%20SDK%20-%20Getting%20Started.md&#34;&gt;構築手順&lt;/a&gt;通りに実施することで、ビルド ツールなどの環境が構築できます。&lt;/p&gt;
&lt;p&gt;構築手順は macOS/Linux/Windows の各プラットフォーム向けにまとまっており、それぞれが、下記の 3 つのパートに分かれて記載されています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mcconfig&lt;/code&gt; や &lt;code&gt;xsbug&lt;/code&gt; などの開発ツールのビルド&lt;/li&gt;
&lt;li&gt;ESP8266 向けの開発環境の構築&lt;/li&gt;
&lt;li&gt;ESP32 向けの開発環境の構築&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;いずれのプラットフォームでも 1. は必須ですが、2. と 3. は手持ちのボードに合わせて、どちらかを実施するだけでよいです。&lt;/p&gt;
&lt;p&gt;私は Windows 用の環境構築をしましたが、Windows 向けの開発環境構築では、&lt;u&gt;&lt;strong&gt;Windows ネイティブのコマンドを使用することをお勧めします。&lt;/strong&gt;&lt;/u&gt;
WSL から &lt;code&gt;git clone&lt;/code&gt; などをすると、&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/issues/110&#34;&gt;&lt;strong&gt;開発ツールがビルドできない&lt;/strong&gt;&lt;/a&gt;ようで、これに丸一日ハマりました。&lt;/p&gt;
&lt;p&gt;あと、ビルドツールの実行は、必ず&lt;code&gt;開発者コマンドプロンプト for VS2017&lt;/code&gt; を起動し、そのコマンドプロンプトの中でしましょう。&lt;/p&gt;
&lt;h2 id=&#34;サンプル-コード&#34;&gt;サンプル コード&lt;/h2&gt;
&lt;p&gt;マイコンのサンプルと言えば Lチカですが、手元に LED がなかったので、とりあえず ESP32 上での非同期実行を試してみます。&lt;/p&gt;
&lt;h3 id=&#34;ファイルの用意&#34;&gt;ファイルの用意&lt;/h3&gt;
&lt;p&gt;プロジェクト ディレクトリに下記のような構造で、ファイルを作ります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── esp
│ ├── console.c
│ └── console.js
├── main.js
└── manifest.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;main-js&#34;&gt;main.js&lt;/h3&gt;
&lt;p&gt;1 秒おきに &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;10&lt;/code&gt; の数字を、1.5 秒おきに &lt;code&gt;a&lt;/code&gt; から &lt;code&gt;z&lt;/code&gt; の文字を、シリアル コンソールに出力するプログラムです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:main.js&#34;&gt;import Timer from &#39;timer&#39;;
import console from &amp;quot;console&amp;quot;;
const a = &#39;a&#39;;
const z = &#39;z&#39;;
let c = a;
let i = 0;
Timer.repeat(() =&amp;gt; {
console.log(`${String(Date.now()).padStart(15)}:${i}`);
i = (i &amp;gt;= 10) ? 0 : i + 1;
}, 1000);
Timer.repeat(() =&amp;gt; {
console.log(`${String(Date.now()).padStart(15)}:${c}`);
c = (c &amp;gt;= z) ? a : String.fromCharCode(c.charCodeAt(0) + 1);
}, 1500);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Web ブラウザーや Node.js なら、定期的な処理を書くなら &lt;code&gt;setInterval&lt;/code&gt; を使うところだと思いますが、Moddable SDK / XS では、グローバルに &lt;code&gt;setInterval&lt;/code&gt; が定義されていません。&lt;/p&gt;
&lt;p&gt;代わりに、&lt;code&gt;Timer&lt;/code&gt; オブジェクトの &lt;code&gt;repeat&lt;/code&gt; メソッドを使って、同じ処理が似たような感じで書くことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:browser&amp;amp;nodejs&#34;&gt;setInterval(() =&amp;gt; {
:
}, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:XS&#34;&gt;import Timer from &#39;timer&#39;;
Timer.repeat(() =&amp;gt; {
:
}, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;console-js-console-c&#34;&gt;console.js /console.c&lt;/h3&gt;
&lt;p&gt;実は XS では &lt;code&gt;console&lt;/code&gt; オブジェクトもないので、とりあえず、下記の JS ファイルと C ファイルで、シリアルコンソールに 1 行出力できるメソッドを定義しておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c:esp/console.js&#34;&gt;class Console @ &amp;quot;xs_console_destructor&amp;quot; {
constructor() {
}
static log() @ &amp;quot;xs_console_log&amp;quot;
}
Object.freeze(Console.prototype);
export default Console;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JS ファイルはタダのラッパーで、処理本体は C ファイルで定義しています。
JS ファイル内で &lt;code&gt;@ ～&lt;/code&gt; と書くと、C ファイルで宣言した関数とバインディングされます。
これは、XS 独自の実装のようです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c:esp/console.c&#34;&gt;#include &amp;quot;xsAll.h&amp;quot;
#include &amp;quot;xs.h&amp;quot;
void xs_console_destructor(void)
{
}
void xs_console_log(xsMachine *the)
{
int argc = xsToInteger(xsArgc), i;
for (i = 0; i &amp;lt; argc; i++) {
char *str = xsToString(xsArg(i));
do {
uint8_t c = c_read8(str);
if (!c) {
ESP_putc(&#39;\n&#39;);
break;
}
ESP_putc(c);
str++;
} while (1);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;manifest-json&#34;&gt;manifest.json&lt;/h3&gt;
&lt;p&gt;最後は manifest ファイルです。
正直言うと、ここはあまり把握できていません :sweat:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;include&lt;/code&gt; で Moddable SDK で用意されている manifest を、ベースの manifest として読み込み、全プラットフォーム共通のモジュールとして &lt;code&gt;main&lt;/code&gt;(.js) を、&lt;code&gt;esp32&lt;/code&gt; 向けには、&lt;code&gt;./esp/console&lt;/code&gt;(.js) をロードする設定を書いています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:manifest.json&#34;&gt;{
&amp;quot;include&amp;quot;: &amp;quot;$(MODDABLE)/examples/manifest_base.json&amp;quot;,
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;./main&amp;quot;,
]
},
&amp;quot;platforms&amp;quot;: {
&amp;quot;esp32&amp;quot;: {
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;./esp/console&amp;quot;,
],
}
}
},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上の &lt;code&gt;manifest.json&lt;/code&gt; では &lt;code&gt;Timer&lt;/code&gt; クラスをロードしていませんが、&lt;code&gt;main.js&lt;/code&gt; では問題なく import することができます。
これは、Moddable SDK に含まれるベースの manifest でロード設定がされているためです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:$(MODDABLE)/examples/manifest_base.json(抜粋)&#34;&gt;{
:
(略)
:
&amp;quot;platforms&amp;quot;: {
:
(略)
:
&amp;quot;esp32&amp;quot;: {
&amp;quot;include&amp;quot;: &amp;quot;$(BUILD)/devices/esp32/manifest.json&amp;quot;
},
}
:
(略)
:
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:$(BUILD)/devices/esp32/manifest.json(抜粋)&#34;&gt;{
:
(略)
:
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;$(MODULES)/base/time/*&amp;quot;,
&amp;quot;$(MODULES)/base/time/esp/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/mc/*&amp;quot;,
]
},
&amp;quot;preload&amp;quot;: [
&amp;quot;time&amp;quot;,
&amp;quot;timer&amp;quot;,
],
:
(略)
:
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみに manifest についてツイートしたところ、公式アカウントからも返事がありました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ドキュメントは定期的にメンテナンスされそうです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The manifest documentation (&lt;a href=&#34;https://t.co/HTYtMXR33N&#34;&gt;https://t.co/HTYtMXR33N&lt;/a&gt;) is a good place to start, but we&amp;#39;ll put a document with more details together soon. If you have any specific questions, we&amp;#39;d be happy to answer those as well.&lt;/p&gt; Moddable (@moddabletech) &lt;a href=&#34;https://twitter.com/moddabletech/status/1086084032008413184?ref_src=twsrc%5Etfw&#34;&gt;2019年1月18日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行してみる&#34;&gt;実行してみる&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;manifest.json&lt;/code&gt; があるディレクトリで、&lt;code&gt;mcconfig&lt;/code&gt; コマンドを実行します。
大抵は、XS のビルドから始まるので、書き込みが完了するまでだいぶ時間がかかると思います。&lt;/p&gt;
&lt;p&gt;書き込みが完了すると、シリアルモニターに自動的に接続し、&lt;code&gt;console.log&lt;/code&gt; の出力内容が表示されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; mcconfig -m -p esp32
rm: cannot remove &#39;/root/Projects/moddable/build/tmp/esp32/release/xsProj/sdkconfig&#39;: No such file or directory
# Running GENCONFIG...
fatal: Not a git repository (or any of the parent directories): .git
including /root/esp32/esp-idf/components/bootloader/Makefile.projbuild...
:
(略)
:
MONITOR
--- idf_monitor on /dev/ttyUSB0 115200 ---
--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---
ets Jun 8 2016 00:22:57
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0018,len:4
load:0x3fff001c,len:636
load:0x40078000,len:6192
load:0x40080000,len:5152
0x40080000: _iram_start at /root/esp32/esp-idf/components/freertos/xtensa_vectors.S:1685
entry 0x40080264
0x40080264: _Level5Vector at ??:?
1010:1
1510:a
2010:2
3010:3
3011:b
4010:4
4510:c
5010:5
6010:6
:
(略)
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定した時間間隔で、コールバック関数が実行されています！
ES2017 で入った &lt;code&gt;String.prototype.padStart&lt;/code&gt; も正常に動作しているようです。&lt;/p&gt;
&lt;p&gt;なお、マイコンには時計がないので、&lt;code&gt;Date.now()&lt;/code&gt; は起動時からの時間を返します。&lt;/p&gt;
&lt;h3 id=&#34;デバッグ実行&#34;&gt;デバッグ実行&lt;/h3&gt;
&lt;p&gt;先ほど実行したコマンド &lt;code&gt;mcconfig -m -p esp32&lt;/code&gt; にデバッグ オプション &lt;code&gt;-d&lt;/code&gt; を追加すると、デバッグ ビルドを実行し、デバッグ ツールである &lt;code&gt;xsbug&lt;/code&gt; が自動で起動します。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;xsbug&lt;/code&gt; は JavaScript コードにブレークポイントの設定や、ステップ実行、変数の内容などを表示することが
でき、結構本格的なデバッグツールです。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/3.png&#34; alt=&#34;3&#34;&gt;
&lt;/center&gt;
&lt;p&gt;今は独自の GUI ツールとして提供されているようですが、そのうち&lt;strong&gt;VSCode から拡張機能として利用できるようになると嬉しいですね。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;いかがだったでしょうか。
Moddable SDK を使うことで、JavaScript で書いたコードを、ESP8266/32 で動作させることができました。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;Web フロントエンドや Node.js など、JavaScript を書くエンジニア人口は多いでしょうから、そういった方々も気軽にマイコン開発ができるようになりますね。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;あとは、manifest ファイルに関するドキュメントの整備がすすんだり、もう少し簡単に環境構築ができれば、格段に開発しやすくなるのではないでしょうか。&lt;/p&gt;</description></item><item><title>Hugo&#43;GitHub Pagesで作ってるブログ運用をGitLabからCircle CI&#43;GitHubに切り替えました。</title><link>https://dotstud.io/blog/circleci-hugo-github-pages/</link><pubDate>Tue, 22 Jan 2019 12:27:36 +0900</pubDate><guid>https://dotstud.io/blog/circleci-hugo-github-pages/</guid><description>
&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;タイトル通り、dotstudioのブログの構成を変更したのでメモを残しておこうとおもいます。&lt;/p&gt;
&lt;h2 id=&#34;今までの構成とデプロイの流れ&#34;&gt;今までの構成とデプロイの流れ&lt;/h2&gt;
&lt;p&gt;基本は静的サイトジェネレーターの&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;を利用しています。&lt;/p&gt;
&lt;p&gt;基本はHugoで手元でビルドして&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;でデプロイするという流れです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/8512cf9fd941dc733f9e6611f8863cd0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CIを特に利用しないでやってて大変さがありました。&lt;/p&gt;
&lt;h2 id=&#34;gitlab-ciの限界があった&#34;&gt;GitLab CIの限界があった&lt;/h2&gt;
&lt;p&gt;GitLabを内部では利用していたので、GitLab CIでビルドをいい感じにしようかとしていたらハマりました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/a58d60565109438f7d9356a9e83bddae.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Running with gitlab-runner 11.7.0-rc1 (6e20bd76)
on docker-auto-scale ed2dce3a
Using Docker executor with image monachus/hugo ...
Pulling docker image monachus/hugo ...
Using docker image sha256:a76936cdfb56aa7587fb4839d92e1e5964a2a42f8f1034d46378c4d4e7705e1f for monachus/hugo ...
Running on runner-ed2dce3a-project-10358631-concurrent-0 via runner-ed2dce3a-srm-1547609018-d23d2aef...
Cloning repository...
Cloning into &#39;/builds/n0bisuke/web&#39;...
Checking out ca3fd857 as master...
Updating/initializing submodules recursively...
$ hugo
Building sites …
| JA
+------------------+------+
Pages | 470
Paginator pages | 14
Non-page files | 0
Static files | 2839
Processed images | 0
Aliases | 22
Sitemaps | 1
Cleaned | 0
Total in 36971 ms
Uploading artifacts...
public: found 4092 matching files
ERROR: Uploading artifacts to coordinator... too large archive id=146361688 responseStatus=413 Request Entity Too Large status=413 Request Entity Too Large token=ALM-jHM4
FATAL: Too large
ERROR: Job failed: exit code 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Maximum artifacts size (MB)&lt;/code&gt;って設定があるみたいですが、&lt;a href=&#34;https://github.com/sameersbn/docker-gitlab/issues/1726&#34;&gt;413 Request Entity Too Large #1726&lt;/a&gt;などを見て調べていくと、どうやらサービス版の&lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab.com&lt;/a&gt;ではCIのサーバー設定が出来ず、&lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-ce&#34;&gt;GitLab CE&lt;/a&gt;など自分のサーバーにインストールする方式じゃないと設定が出来なさそうでした。&lt;/p&gt;
&lt;h2 id=&#34;circleciに乗り換えとgithubのプライベートリポジトリ無償化&#34;&gt;CircleCIに乗り換えとGitHubのプライベートリポジトリ無償化&lt;/h2&gt;
&lt;p&gt;ということで&lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt;に乗り換えしようと思ったんですけど、&lt;/p&gt;
&lt;p&gt;ちなみに、有名どころで&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;と一瞬悩みましたが&lt;strong&gt;大学の研究室の先輩の&lt;a href=&#34;https://twitter.com/ganezasan&#34;&gt;伊藤マネージャー(@ganezasan)&lt;/a&gt;がCircleCIに転職した&lt;/strong&gt;という話を先日聞いたのでCircleCIを選びました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ちなみにマネージャーというアダ名だったのですが現職でマネージャーではないそうです（笑）&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ツール選びで悩んだ時に、近くに聞ける人がいるのはすごく大事だと思ってます。&lt;/p&gt;
&lt;h3 id=&#34;circleciはgitlabから叩けない&#34;&gt;CircleCIはGitLabから叩けない&lt;/h3&gt;
&lt;p&gt;現時点(2019年1月)でCircleCIはGitHubとBitbucketからのみ叩ける模様です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/6cb3b835660849ea4bf2a91c64477700.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ちなみにこれは仲がいいので個人的に聞いてますが、みんなこれやっちゃうと彼をパンクさせてしまうので&lt;a href=&#34;https://support.circleci.com/hc/ja/requests/new&#34;&gt;問い合わせ&lt;/a&gt;から質問しましょうね。&lt;/p&gt;
&lt;p&gt;内部でGitLabを使ってたのでぐぬぬって感じでしたが&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;githubプライベードリポジトリ無償化&#34;&gt;GitHubプライベードリポジトリ無償化&lt;/h3&gt;
&lt;p&gt;GitLabを採用していた理由は無料でプライベートリポジトリが使えて高機能だったってところだったんですけど、 &lt;strong&gt;&lt;a href=&#34;https://gigazine.net/news/20190108-github-private-repositories/&#34;&gt;GitHubの無料ユーザーもプライベートリポジトリを無制限で使用可能に&lt;/a&gt;のニュース&lt;/strong&gt;がありましたよね。&lt;/p&gt;
&lt;p&gt;リポジトリにアクセスできるメンバー数は3人までと少ないのですが、現状の編集フローを考えると全然問題なかったので &lt;strong&gt;内部で利用するリポジトリをGitHubのプライベードに切り替えてCircleCI利用をする方向に&lt;/strong&gt;しました。&lt;/p&gt;
&lt;h2 id=&#34;circleciでhugoをビルドしてgithub-pagesにデプロイ&#34;&gt;CircleCIでHugoをビルドしてGitHub Pagesにデプロイ&lt;/h2&gt;
&lt;p&gt;ということでこんな構成が出来ました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7697772135a0b0f9dfa4adbd1b040220.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;自動デプロイいいですね。楽しい。&lt;/p&gt;
&lt;p&gt;参考までにデプロイ部分の&lt;code&gt;config.yml&lt;/code&gt;を載せておきます。&lt;/p&gt;
&lt;p&gt;流れとしては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hugoが動くdocker imageで起動&lt;/li&gt;
&lt;li&gt;内部用GitHubリポジトリにPushしたリポジトリにチェックアウト&lt;/li&gt;
&lt;li&gt;publicフォルダを一旦削除&lt;/li&gt;
&lt;li&gt;公開用GitHub PagesリポジトリをCloneしてpublicフォルダとして保存&lt;/li&gt;
&lt;li&gt;hugoでビルド(&amp;ndash;minifyオプション付き)してpublicフォルダを更新&lt;/li&gt;
&lt;li&gt;GitHub Pages用のCNAMEファイルを作成&lt;/li&gt;
&lt;li&gt;Gitの設定をしてadd&amp;amp;commit&amp;amp;push&lt;/li&gt;
&lt;li&gt;成功したらLINE Notifyに通知&lt;/li&gt;
&lt;li&gt;失敗したらDiscordに通知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった流れです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defaults: &amp;amp;defaults
working_directory: ~/repo
docker:
- image: monachus/hugo
version: 2.1
jobs:
deploy:
&amp;lt;&amp;lt;: *defaults
steps:
- checkout
- run: pwd
- run: echo $USERNAME
- run:
name: Print the Current Time
command: date
- run:
name: Hugo Version Check
command: hugo version
- run: rm -rf public
- run:
name: Git Clone
command: git clone --depth 1 https://$TEAMNAME:$GITHUB_TOKEN@github.com/$TEAMNAME/$TEAMNAME.github.io.git public
- run:
name: Hugo Build
command: hugo --minify
- run: cd public &amp;amp;&amp;amp; touch CNAME &amp;amp;&amp;amp; echo &amp;quot;$DOMAIN&amp;quot; &amp;gt; CNAME
- run: cd public &amp;amp;&amp;amp; pwd
- run: cd public &amp;amp;&amp;amp; git config user.email &amp;quot;$EMAIL&amp;quot;
- run: cd public &amp;amp;&amp;amp; git config user.name &amp;quot;$USERNAME&amp;quot;
- run: cd public &amp;amp;&amp;amp; git add -A
- run: cd public &amp;amp;&amp;amp; git commit -m &amp;quot;deploy from CI&amp;quot;
- run: cd public &amp;amp;&amp;amp; git push origin master
- run:
name: Deploy Success Notification to DISCORD
command: |
curl -d &amp;quot;{\&amp;quot;content\&amp;quot;:\&amp;quot;デプロイが失敗しました。\&amp;quot;}&amp;quot; $DISCORD_URL -H &#39;Content-Type:application/json&#39;
when: on_fail
- run:
name: Deploy Success Notification to LINE
command: |
curl -X POST -H &amp;quot;Authorization: Bearer $LINE_NOTIFY_TOKEN&amp;quot; -F &amp;quot;message=デプロイ成功&amp;quot; https://notify-api.line.me/api/notify
workflows:
version: 2.1
build:
jobs:
- deploy:
filters:
branches:
only: master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下の記事が参考になりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hori-ryota.com/blog/create-blog-with-hugo-and-circleci/&#34;&gt;HugoとCircleCIでGitHub PagesにBlogを公開してみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/ardianta/deploy-hugo-from-gitlab-ci-to-github-pages-5aml&#34;&gt;Deploy Hugo from Gitlab CI to Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ganezasan/shumatsu.github.io/blob/master/.circleci/config.yml&#34;&gt;伊藤マネージャーのJekyllサンプル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、workflowsの設定でmasterブランチにプッシュしたときだけdeployジョブが動くように出来るのでこれも利用しています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;・
・
(省略)
・
・
- deploy:
filters:
branches:
only: master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;色々なトークン周りはCircleCIの環境変数に詰め込みましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/6525eeb67ec16f9340fb5eae83e26b83.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ちなみに、GitHubのアクセストークンは&lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;こちら&lt;/a&gt;から取得できます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;CircleCI導入することでかなり作業量減った感じがします。感謝。&lt;/p&gt;
&lt;p&gt;そもそもがCI導入出来てなかったってのもあるとは思いますが（苦笑）それはまぁ生ぬるい目で見てやって下さい。&lt;/p&gt;
&lt;p&gt;他にもブログの画像の最適化などのジョブも埋め込んだりとやれること色々と自動化進めています。&lt;/p&gt;</description></item><item><title>アップデートの速い深セン技術をフル活用！深セン旅TIPSまとめ #MakerFaireShenzhen</title><link>https://dotstud.io/blog/shenzhen-technology-2018-report/</link><pubDate>Tue, 18 Dec 2018 04:11:33 +0900</pubDate><guid>https://dotstud.io/blog/shenzhen-technology-2018-report/</guid><description>
&lt;p&gt;こんにちは、dotstudioモノづくり担当・うこです。&lt;/p&gt;
&lt;p&gt;dotstudioでは2016年、2017年に引き続き、今年も&lt;strong&gt;深センのMaker Faireと、最先端の街を偵察&lt;/strong&gt;に行ってきました！&lt;/p&gt;
&lt;p&gt;交通や決済システムのアップデートが速い深セン。現地で困らないために、旅程と旅TIPSをまとめてみました。深センに行きたい方はぜひ参考にしてみてください！&lt;/p&gt;
&lt;p&gt;ちなみに2016年版には、ホテルや航路などの詳細もまとめています。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;027&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-2016&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/027/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
秋はモノづくりの聖地、中国・深センへ行こう！ #MakerFaireShenzhen に参加したい日本人向けまとめ
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2016-10-03
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
2016年10月21〜23日に中国・広東省深セン市で開催される「Maker Faire shenzhen 2016」。深センへの行き方…
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;p&gt;Maker Faire Shenzhen 2018と、深セン市街地の様子はこちらの記事にまとめました！&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;231&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-2018/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/231/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
今年も行ってきました！　〜モノ創りの祭典 #MakerFaireShenzhen in 中国・深セン〜
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-12-13
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
今年も行ってきましたMFSZ！直前に日程が変わったこともあり色々と大変でしたが、今年も新しい出会いと発見がありました。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;h2 id=&#34;今回のルート&#34;&gt;今回のルート&lt;/h2&gt;
&lt;h3 id=&#34;lccで安旅をチョイス&#34;&gt;LCCで安旅をチョイス&lt;/h3&gt;
&lt;p&gt;深センに行くには深セン市や広州市に直接行くよりも、LCCが数多く乗り入れる&lt;strong&gt;香港国際空港への発着便の利用&lt;/strong&gt;が、安くて選択肢も多いです。今回はメンバーの都合上、成田空港と関西空港から、香港に向かいました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/c1f65f1cee8193af4cb421774063c82b.jpg&#34; alt=&#34;Image from Gyazo&#34; /&gt;
社長のびすけ &amp;amp; ライターのちゃんとくは、成田からお手頃なJetstarで向かいます。成田第3ターミナルなのでちょっと大変ですが、安さはお墨付きですね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/e56230c4-8e61-69ab-4a2a-0b7ff7fd4f19.jpeg&#34; alt=&#34;IMG_20181011_2024284.jpg&#34; title=&#34;IMG_20181011_2024284.jpg&#34; /&gt;
一方、うこは関西人なので、お好み焼きを食べてから香港エクスプレスで関西空港を出発しました。&lt;/p&gt;
&lt;h3 id=&#34;香港をサクッと観光&#34;&gt;香港をサクッと観光&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/9de85a1f-12a4-53a5-ac33-ce4644600e17.jpeg&#34; alt=&#34;IMG_4208.jpg&#34; title=&#34;IMG_4208.jpg&#34; /&gt;
香港空港に到着後、香港側を軽く観光したかったので、入国手続きをして市街地に向かいました。香港に入境せず、フェリーなどで直接深センに向かう方法もあります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/04c90681-994a-d18d-419f-5058119badbd.jpeg&#34; alt=&#34;IMG_4236.jpg&#34; title=&#34;IMG_4236.jpg&#34; /&gt;
香港ローカルなカフェで朝ごはんです。糖度MAXなカフェラテはサービスでついてきました。スタッフのおばちゃんの目線から察するに、地元民しか来ないような雰囲気のお店でした。&lt;/p&gt;
&lt;h3 id=&#34;香港メトロで国境越え&#34;&gt;香港メトロで国境越え&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/c15d20f335f02010d660685ae8c0fb3f.jpg&#34; alt=&#34;Image from Gyazo&#34; /&gt;
香港メトロを使って深セン方面に向かいます。今回の会場は、2年前の会場だった深セン市西部にある綺麗なショッピングセンターの「&lt;strong&gt;海上世界&lt;/strong&gt;」の一部である「&lt;strong&gt;文化芸術センター&lt;/strong&gt;」というところです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/ecbebde7cef394f40948e2c6b4f30490.jpg&#34; alt=&#34;Image from Gyazo&#34; /&gt;
香港メトロは「&lt;strong&gt;オクトパス&lt;/strong&gt;（八達通）」という、Suicaと同じICカードが利用できます。香港中心部から国境まで1時間ほど電車で移動します。&lt;/p&gt;
&lt;h3 id=&#34;深センの鉄道-深圳通-もicカード-wechatpayに対応&#34;&gt;深センの鉄道「深圳通」もICカード＆WeChatPayに対応！&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/38509d31-7383-99d6-2e17-834c3376d3bb.jpeg&#34; alt=&#34;IMG_20181012_1124314.jpg&#34; title=&#34;IMG_20181012_1124314.jpg&#34; /&gt;
深センでは「深圳通」という、&lt;strong&gt;新しいICカードが使えるようになっていました&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;去年まで券売機に列ができていたのが嘘みたいです。&lt;/p&gt;
&lt;p&gt;（詳しい方にコメントを貰ったのですが、去年時点でも深圳通は既に出来ていて、券売機があるところでは今も列ができているとのことです。）&lt;/p&gt;
&lt;p&gt;ICカードのほかにWeChatPayという電子マネーで購入したQRコードのスマホ画面をかざして通過することもできます。国境から西側に30〜40分ほど、地下鉄を乗り継いで向かいます。
（また、こちらも詳しい方にコメントを貰ったのですが、中国の銀行口座が無いとこれは現時点では出来ない模様なので試す際には色々と情報を調べてご自身で判断してください。）&lt;/p&gt;
&lt;h3 id=&#34;海上世界-に到着&#34;&gt;「海上世界」に到着&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/c7b73ef6-c369-6cb0-23c4-c040b077e298.jpeg&#34; alt=&#34;IMG_4257.jpg&#34; title=&#34;IMG_4257.jpg&#34; /&gt;
2018年の会場である「&lt;strong&gt;海上世界&lt;/strong&gt;」に到着です！&lt;/p&gt;
&lt;h2 id=&#34;今回の中国tips&#34;&gt;今回の中国tips&lt;/h2&gt;
&lt;h3 id=&#34;ポケットチェンジでwechatpayにチャージしてから行こう&#34;&gt;ポケットチェンジでWeChatPayにチャージしてから行こう！&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/86c776cb-eaf2-de3c-7d4f-85fbda4d71d0.jpeg&#34; alt=&#34;IMG_20181011_1944199.jpg&#34; title=&#34;IMG_20181011_1944199.jpg&#34; /&gt;
本来は「余った外貨の小銭を電子マネーに還元する」のが目的の&lt;a href=&#34;https://www.pocket-change.jp/&#34;&gt;&lt;strong&gt;ポケットチェンジ&lt;/strong&gt;&lt;/a&gt;ですが、日本円を投入して、中国で利用可能な電子マネー「&lt;strong&gt;WeChatPay&lt;/strong&gt;」にチャージすることも可能です。&lt;/p&gt;
&lt;p&gt;今回は関西空港に設置してある端末で1万円ぶんだけチャージしていったところ、Maker Faire内のブースでの買い物から、市街地の露店でギョウザを食べるときまで、非常に便利に利用できました。&lt;/p&gt;
&lt;p&gt;ただし便利ではありますが、&lt;strong&gt;レートが比較的悪いため、大量に交換するのは避けたほうが無難&lt;/strong&gt;です。&lt;/p&gt;
&lt;h3 id=&#34;lcc旅こそプライオリティパスが便利でした&#34;&gt;LCC旅こそプライオリティパスが便利でした&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/dfc23a7c-c5f5-c021-fcda-a76fb65a3ac8.jpeg&#34; alt=&#34;IMG_20181013_1909429.jpg&#34; title=&#34;IMG_20181013_1909429.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;LCCで安い便を狙うと、深夜早朝便に当たることが多かったりして休みづらかったり、機内食がないのであらかじめごはんを食べたり、などの難点があります。そこで、アメックスや楽天プレミアムカードを持っている方は「プライオリティパス」を申請しておくと、各所の空港ラウンジが無料で使えて便利です。&lt;/p&gt;
&lt;p&gt;特に関西から香港に向かう場合は、「ぼでぢゅう（関西・お好み焼き屋）」→「KALラウンジ（関西・軽食と生ビール）」→「保安検査後ラウンジ（関西・フリードリンクと充電）」→（飛行機）→「PLAZA PREMIUM到着ラウンジ（香港・軽食と生ビール）」という&lt;strong&gt;黄金のタダ飯コース&lt;/strong&gt;が辿れますのでかなりオススメです。&lt;/p&gt;
&lt;h3 id=&#34;中華simをamazonなどで買っておくとgood&#34;&gt;中華SIMをAmazonなどで買っておくとgood&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/db600cf4-7a6c-5cbb-d7bc-b09c701d930c.jpeg&#34; alt=&#34;IMG_20181012_0044013.jpg&#34; title=&#34;IMG_20181012_0044013.jpg&#34; /&gt;
海外でのインターネット利用はWi-Fiレンタルが主流ですが、昨今増えてきているSIMフリースマホをお持ちであれば、中国専用のプリペイドSIMカードをあらかじめ買っておくのもいいでしょう。&lt;/p&gt;
&lt;p&gt;1日あたりでもかなり安く使えますし、スピードも出ます。中国では検閲の影響もあり、ホテルのWiFiなどでは我々が普段使っているGoogleやFacebookは使えませんが、旅行客向けの専用SIMではこれらの制限を回避することができます。&lt;/p&gt;
&lt;p&gt;以上、中国・香港などに行かれる際は参考にしてみてくださいね！&lt;/p&gt;</description></item><item><title>久留米高専でLINE Clovaスキル開発体験ハンズオンを開催！</title><link>https://dotstud.io/blog/line-clova-handson-kurume/</link><pubDate>Thu, 13 Dec 2018 11:54:30 +0900</pubDate><guid>https://dotstud.io/blog/line-clova-handson-kurume/</guid><description>
&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;久留米高専でClovaのハンズオンを実施してきました。
記録用兼レポートです。&lt;/p&gt;
&lt;p&gt;先にアナウンスですが、 &lt;strong&gt;こんな感じで全国の高校や高専で授業やっていきたいので各地域の方で気になった方いたらぜひご一報ください！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;https://twitter.com/n0bisuke&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;あとジーズアカデミーの福岡校（&lt;a href=&#34;https://gsbase.jp/&#34;&gt;ジーズベースフクオカ&lt;/a&gt;）にも顔だしてきたので&lt;a href=&#34;https://qiita.com/advent-calendar/2018/gsacademy&#34;&gt;ジーズアカデミーアドベントカレンダー&lt;/a&gt;にも載せておきます！&lt;/p&gt;
&lt;h2 id=&#34;久留米高専&#34;&gt;久留米高専&lt;/h2&gt;
&lt;p&gt;正式名称は&lt;a href=&#34;http://www.kurume-nct.ac.jp/&#34;&gt;久留米工業高等専門学校&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;九州の福岡、南の方です。
佐賀が近いので佐賀から通っている学生も多いとのこと。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/234/1.png&#34; alt=&#34;kurume&#34; /&gt;&lt;/p&gt;
&lt;p&gt;秋葉原からだと福岡空港まで飛行機で行って、そこから電車移動って形になります。&lt;/p&gt;
&lt;p&gt;西鉄っていうのが向こうは有名みたいですね。
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E8%A5%BF%E9%89%84%E4%B9%85%E7%95%99%E7%B1%B3%E9%A7%85&#34;&gt;西鉄久留米駅&lt;/a&gt;が最寄りでしたが少し距離があるのでそこからタクシー移動でした。&lt;/p&gt;
&lt;h2 id=&#34;clovaを使った授業&#34;&gt;Clovaを使った授業&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://clova.line.me/&#34;&gt;LINE Clova&lt;/a&gt;のスキル開発体験ハンズオンです。&lt;/p&gt;
&lt;p&gt;過去にもチュートリアル記事を使ってハンズオンをしたことがありますが、今回はノンコーディングで実施しました。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;instagram-media&#34; data-instgrm-captioned data-instgrm-permalink=&#34;https://www.instagram.com/p/BrEv4e0jDkN/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; data-instgrm-version=&#34;12&#34; style=&#34; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&#34;&gt;&lt;div style=&#34;padding:16px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BrEv4e0jDkN/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&#34; target=&#34;_blank&#34;&gt; &lt;div style=&#34; display: flex; flex-direction: row; align-items: center;&#34;&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 19% 0;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;display:block; height:50px; margin:0 auto 12px; width:50px;&#34;&gt;&lt;svg width=&#34;50px&#34; height=&#34;50px&#34; viewBox=&#34;0 0 60 60&#34; version=&#34;1.1&#34; xmlns=&#34;https://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;https://www.w3.org/1999/xlink&#34;&gt;&lt;g stroke=&#34;none&#34; stroke-width=&#34;1&#34; fill=&#34;none&#34; fill-rule=&#34;evenodd&#34;&gt;&lt;g transform=&#34;translate(-511.000000, -20.000000)&#34; fill=&#34;#000000&#34;&gt;&lt;g&gt;&lt;path d=&#34;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&#34;padding-top: 8px;&#34;&gt; &lt;div style=&#34; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&#34;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 12.5% 0;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&#34;&gt;&lt;div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: 8px;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: auto;&#34;&gt; &lt;div style=&#34; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&#34; margin:8px 0 0 0; padding:0 4px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BrEv4e0jDkN/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&#34; target=&#34;_blank&#34;&gt;久留米高専でこれからClovaハンズオンやるよ！ #clova_cek #line_dev&lt;/a&gt;&lt;/p&gt; &lt;p style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&#34;&gt;&lt;a href=&#34;https://www.instagram.com/n0bisuke/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&#34; target=&#34;_blank&#34;&gt; n0bisuke&lt;/a&gt;さん(@n0bisuke)がシェアした投稿 - &lt;time style=&#34; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&#34; datetime=&#34;2018-12-07T05:21:34+00:00&#34;&gt;2018年12月月6日午後9時21分PST&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//www.instagram.com/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;コードが書きたい人はこちらの記事でチャレンジしてみましょう。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;195&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/clova-cek-nodejs-tutorial/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/195/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
Clova CEKでのスキル開発の始め方〜Node.jsで開発スタート編〜
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-08-03
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
Clova CEKのNode.jsチュートリアルです。カレースキルを作ります。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class=&#34;link&#34; id=&#34;220&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/clova-cek-python-tutorial/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/220/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
Clova CEKでのスキル開発の始め方〜Pythonで開発スタート編〜
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-09-15
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
Clova CEKのPythonチュートリアルです。奈良先端科学技術大学院大学でのハッカソンでやったチュートリアルを記事にしました。倦怠期スキルを作ります。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;h2 id=&#34;enebularを用いてノンコーディングチャレンジ&#34;&gt;enebularを用いてノンコーディングチャレンジ&lt;/h2&gt;
&lt;p&gt;最近よくお世話になっています。&lt;a href=&#34;http://enebular.com&#34;&gt;enebular&lt;/a&gt;です。
実はこのブログで話題に出るのは初めてかもしれません。&lt;/p&gt;
&lt;p&gt;enebularはIoTデバイスの統合管理を目指したサービスで、各デバイスの制御を&lt;a href=&#34;https://nodered.org/&#34;&gt;NodeRED&lt;/a&gt;を持ちいて行うことができます。というのが本来の使い方なのですが、&lt;/p&gt;
&lt;p&gt;今回はenebularのNodeRED上でClovaスキルを作るというWebライクな使い方をしていきます。&lt;/p&gt;
&lt;p&gt;ちなみに今回の資料は&lt;a href=&#34;http://twitter.com/enta0701&#34;&gt;@enta0701&lt;/a&gt;くんが中学生向けに開催した資料をもとに肉付けしています。&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;bfe7bbc244ac4a8bacbac21455211b2b&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;blockquote&gt;
&lt;p&gt;資料: &lt;a href=&#34;https://speakerdeck.com/n0bisuke/clovasukiruwofalsenkodeingudezuo-rou&#34;&gt;https://speakerdeck.com/n0bisuke/clovasukiruwofalsenkodeingudezuo-rou&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;enebularにはディスカバーフローという機能があってそこで作ったフロー（プログラム）を公開することが出来ます。&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;21&#34; data-id=&#34;bfe7bbc244ac4a8bacbac21455211b2b&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;参加者にはこのフローをフォークしてもらって手元に展開してもらうことで、参加者はほぼ出来上がった状態のスキルを見て改良できます。&lt;/p&gt;
&lt;p&gt;また、内部ではJavaScriptのコードが動いていて中身（functionノード）も見れるので、
自分で改造していってアレンジ作品も作ることが出来ます。&lt;/p&gt;
&lt;p&gt;皆さんも試してみてください！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;時間が無い時のClovaスキル開発にenebularが何故良いのか&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;って感じで気が向いたらまとめてみたいと思います。&lt;/p&gt;
&lt;h2 id=&#34;最終到達できた割合が高い-制限時間90分&#34;&gt;最終到達できた割合が高い（制限時間90分）&lt;/h2&gt;
&lt;p&gt;enebularを使った時短がよかったのと、彼らが優秀だったのと二つ要因がありそうですが、&lt;/p&gt;
&lt;p&gt;かなり到達出来た人が多かったです。&lt;/p&gt;
&lt;p&gt;ほぼ100%だったんじゃないかな。&lt;/p&gt;
&lt;p&gt;普通にコード書いてのハンズオンだと90分だとなかなかこうは行かないのでいい体験になりました。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;instagram-media&#34; data-instgrm-captioned data-instgrm-permalink=&#34;https://www.instagram.com/p/BrFMvLxDg7x/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; data-instgrm-version=&#34;12&#34; style=&#34; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&#34;&gt;&lt;div style=&#34;padding:16px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BrFMvLxDg7x/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&#34; target=&#34;_blank&#34;&gt; &lt;div style=&#34; display: flex; flex-direction: row; align-items: center;&#34;&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 19% 0;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;display:block; height:50px; margin:0 auto 12px; width:50px;&#34;&gt;&lt;svg width=&#34;50px&#34; height=&#34;50px&#34; viewBox=&#34;0 0 60 60&#34; version=&#34;1.1&#34; xmlns=&#34;https://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;https://www.w3.org/1999/xlink&#34;&gt;&lt;g stroke=&#34;none&#34; stroke-width=&#34;1&#34; fill=&#34;none&#34; fill-rule=&#34;evenodd&#34;&gt;&lt;g transform=&#34;translate(-511.000000, -20.000000)&#34; fill=&#34;#000000&#34;&gt;&lt;g&gt;&lt;path d=&#34;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&#34;padding-top: 8px;&#34;&gt; &lt;div style=&#34; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&#34;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 12.5% 0;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&#34;&gt;&lt;div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: 8px;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: auto;&#34;&gt; &lt;div style=&#34; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&#34; margin:8px 0 0 0; padding:0 4px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BrFMvLxDg7x/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&#34; target=&#34;_blank&#34;&gt;久留米高専でのClovaハンズオン 無事に終了！ #enebular を使ってほぼ全員がスキル作ることできた！ なごやか雰囲気で楽しかったなぁ&lt;/a&gt;&lt;/p&gt; &lt;p style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&#34;&gt;&lt;a href=&#34;https://www.instagram.com/n0bisuke/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&#34; target=&#34;_blank&#34;&gt; n0bisuke&lt;/a&gt;さん(@n0bisuke)がシェアした投稿 - &lt;time style=&#34; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&#34; datetime=&#34;2018-12-07T09:33:42+00:00&#34;&gt;2018年12月月7日午前1時33分PST&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//www.instagram.com/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;もっと書きたいという人もちらほら&#34;&gt;もっと書きたいという人もちらほら&lt;/h2&gt;
&lt;p&gt;今回ノンコーディングだったので、もっとコード書きたいっていうアンケート回答も多かったです（笑）&lt;/p&gt;
&lt;p&gt;そんな子達には&lt;a href=&#34;https://join.slack.com/t/linedevelopers/shared_invite/enQtNDUzMTE1NzMxOTA0LWYzODQ2NWVlYmNiNzMyNDY4MzVhYmU3Yjk0ZmUzM2YwYWM3YWY2MzYzOWVkYmM4MTVmYTdiOWQ5NjJjNzI0ZDY&#34;&gt;LINEディベロッパーSlack&lt;/a&gt;を紹介しましたが、ちゃんと入って来てくれて意欲の高さを感じるやつです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/234/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;授業終わりに知ったんですけど、今回は授業というよりもプログラミングサークルの子たち向けのハンズオンになっていたそうです。&lt;/p&gt;
&lt;p&gt;純度が高い。&lt;/p&gt;
&lt;h2 id=&#34;今度もやっていき&#34;&gt;今度もやっていき&lt;/h2&gt;
&lt;p&gt;という感じで、一人で回したわりには安定感あるハンズオンとなりました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://linecorp.com/ja/pr/news/ja/2018/2472&#34;&gt;LINE BOOT Awardsで高校生がグランプリ獲った&lt;/a&gt;んだよ！という話もしたので、彼らが継続的に開発をして世の中で活躍してくれるといいなぁとしみじみ感じつつラーメン食べて終了です。&lt;/p&gt;
&lt;p&gt;久留米ラーメン美味しかったなぁーー&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;instagram-media&#34; data-instgrm-captioned data-instgrm-permalink=&#34;https://www.instagram.com/p/BrGo-UTjbFA/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; data-instgrm-version=&#34;12&#34; style=&#34; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&#34;&gt;&lt;div style=&#34;padding:16px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BrGo-UTjbFA/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&#34; target=&#34;_blank&#34;&gt; &lt;div style=&#34; display: flex; flex-direction: row; align-items: center;&#34;&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 19% 0;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;display:block; height:50px; margin:0 auto 12px; width:50px;&#34;&gt;&lt;svg width=&#34;50px&#34; height=&#34;50px&#34; viewBox=&#34;0 0 60 60&#34; version=&#34;1.1&#34; xmlns=&#34;https://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;https://www.w3.org/1999/xlink&#34;&gt;&lt;g stroke=&#34;none&#34; stroke-width=&#34;1&#34; fill=&#34;none&#34; fill-rule=&#34;evenodd&#34;&gt;&lt;g transform=&#34;translate(-511.000000, -20.000000)&#34; fill=&#34;#000000&#34;&gt;&lt;g&gt;&lt;path d=&#34;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&#34;padding-top: 8px;&#34;&gt; &lt;div style=&#34; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&#34;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 12.5% 0;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&#34;&gt;&lt;div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: 8px;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: auto;&#34;&gt; &lt;div style=&#34; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&#34; margin:8px 0 0 0; padding:0 4px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BrGo-UTjbFA/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&#34; target=&#34;_blank&#34;&gt;昨日の久留米ラーメン こっちのとんこつは店内の匂いからすごい&lt;/a&gt;&lt;/p&gt; &lt;p style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&#34;&gt;&lt;a href=&#34;https://www.instagram.com/n0bisuke/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&#34; target=&#34;_blank&#34;&gt; n0bisuke&lt;/a&gt;さん(@n0bisuke)がシェアした投稿 - &lt;time style=&#34; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&#34; datetime=&#34;2018-12-07T22:59:40+00:00&#34;&gt;2018年12月月7日午後2時59分PST&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//www.instagram.com/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけ-途中でジーズアカデミーの福岡校-gs-base-fukuoka-にも寄ってきたよ&#34;&gt;おまけ: 途中でジーズアカデミーの福岡校（Gs BASE FUKUOKA）にも寄ってきたよ&lt;/h2&gt;
&lt;p&gt;福岡空港についてから、久留米にたどり着くまでに少し時間があったので&lt;a href=&#34;https://gsbase.jp/&#34;&gt;Gs BASE FUKUOKA&lt;/a&gt;に寄ってきました。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;instagram-media&#34; data-instgrm-captioned data-instgrm-permalink=&#34;https://www.instagram.com/p/BrEZh57jOW1/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; data-instgrm-version=&#34;12&#34; style=&#34; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&#34;&gt;&lt;div style=&#34;padding:16px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BrEZh57jOW1/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&#34; target=&#34;_blank&#34;&gt; &lt;div style=&#34; display: flex; flex-direction: row; align-items: center;&#34;&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 19% 0;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;display:block; height:50px; margin:0 auto 12px; width:50px;&#34;&gt;&lt;svg width=&#34;50px&#34; height=&#34;50px&#34; viewBox=&#34;0 0 60 60&#34; version=&#34;1.1&#34; xmlns=&#34;https://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;https://www.w3.org/1999/xlink&#34;&gt;&lt;g stroke=&#34;none&#34; stroke-width=&#34;1&#34; fill=&#34;none&#34; fill-rule=&#34;evenodd&#34;&gt;&lt;g transform=&#34;translate(-511.000000, -20.000000)&#34; fill=&#34;#000000&#34;&gt;&lt;g&gt;&lt;path d=&#34;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&#34;padding-top: 8px;&#34;&gt; &lt;div style=&#34; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&#34;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 12.5% 0;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&#34;&gt;&lt;div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: 8px;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: auto;&#34;&gt; &lt;div style=&#34; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&#34; margin:8px 0 0 0; padding:0 4px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BrEZh57jOW1/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&#34; target=&#34;_blank&#34;&gt;G’s BASE FUKUOKAにきた！！ #gsacademy&lt;/a&gt;&lt;/p&gt; &lt;p style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&#34;&gt;&lt;a href=&#34;https://www.instagram.com/n0bisuke/?utm_source=ig_embed&amp;amp;utm_medium=loading&#34; style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&#34; target=&#34;_blank&#34;&gt; n0bisuke&lt;/a&gt;さん(@n0bisuke)がシェアした投稿 - &lt;time style=&#34; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&#34; datetime=&#34;2018-12-07T02:06:14+00:00&#34;&gt;2018年12月月6日午後6時06分PST&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//www.instagram.com/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;おしゃれでいい感じの場所なので皆さんもぜひ遊びに行ってみてください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特出事項としてはジーズアカデミー福岡でGoogle Mapで検索すると絶妙に違う駅に飛ばされるので注意です。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/234/3.png&#34; width=&#34;300px&#34;&gt;&lt;/p&gt;
&lt;p&gt;最寄りは天神駅なので注意してください。&lt;/p&gt;</description></item><item><title>今年も行ってきました！　〜モノ創りの祭典 #MakerFaireShenzhen in 中国・深セン〜</title><link>https://dotstud.io/blog/maker-faire-shenzhen-2018/</link><pubDate>Thu, 13 Dec 2018 05:20:55 +0900</pubDate><guid>https://dotstud.io/blog/maker-faire-shenzhen-2018/</guid><description>
&lt;p&gt;こんにちは、dotstudioモノづくり担当・うこです。肌寒くなってきて一段と秋を感じるようになってきましたね。&lt;/p&gt;
&lt;p&gt;秋といえば！そう！&lt;/p&gt;
&lt;p&gt;もちろん&lt;strong&gt;モノづくりの秋&lt;/strong&gt;でございます。&lt;/p&gt;
&lt;p&gt;世界最大級の電気街を擁する街、中国・深セン市では、毎年秋になると「&lt;strong&gt;Maker Faire Shenzhen&lt;/strong&gt;」が開催されています。&lt;/p&gt;
&lt;p&gt;dotstudioでは2016年、2017年に引き続き、今年もこの&lt;strong&gt;深センのMaker Faireと、最先端の街を偵察&lt;/strong&gt;に行ってまいりましたので、その模様をお伝えいたします！&lt;/p&gt;
&lt;h2 id=&#34;maker-faire-shenzhen-mfsz-について&#34;&gt;Maker Faire Shenzhen（MFSZ）について&lt;/h2&gt;
&lt;p&gt;世界一の電気街を擁するとされる街・中国広東省深セン市で行われる、&lt;strong&gt;非常に規模の大きいモノづくりの祭典&lt;/strong&gt;です。世界的に行われている「Maker Faire」の深セン版になります。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;http://www.shenzhenmakerfaire.com&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/8475337cc54b94358aca6dfc595c5af2.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://www.shenzhenmakerfaire.com&#34;&gt;Maker Faire Shenzhen 深圳制汇节– October 12~14 , 2018&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;dotstudioでは、出展と見学で&lt;strong&gt;深センに3年連続で訪問&lt;/strong&gt;しております。&lt;/p&gt;
&lt;h3 id=&#34;2016年&#34;&gt;2016年&lt;/h3&gt;
&lt;section class=&#34;link&#34; id=&#34;051&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-report/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/051/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
かなり盛り上がった！ものづくりの祭典＠中国 #MakerFaireShenZhen
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2016-11-08
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
2016年12月に中国の深センでおこなわれたMaker Faire Shenzhen 2016に参加してきましたのでレポします！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;予習編&#34;&gt;■予習編&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-2016/&#34;&gt;秋はモノづくりの聖地、中国・深センへいこう！ #MakerFaireShenzhen に参加したい日本人向けまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深セン市街地編&#34;&gt;■深セン市街地編&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/shenzhen-technology-examples-diary/&#34;&gt;中国・深センの街で見た、日本にはないテクノロジーに感動した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/shenzhen-event-diary-vol1/&#34;&gt;中国・深セン日記 その１&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;へんなもの編&#34;&gt;■へんなもの編&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/wall-climbing-toy-car/&#34;&gt;すごいじゃん深セン。怪しさMAXの壁を登るラジコン？WALL CLIMBERを試してみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/4k-camera-gopro-fake/&#34;&gt;まさかのGoPro？4Kのカメラを265元（4,000円程度）で買えた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/led-lantern-and-torch/&#34;&gt;使い所が分からなすぎる（笑）LEDで光るマルチリンガルなUSB扇風機を買ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/led-multilingual-confessing-fan/&#34;&gt;これは掘り出し物かも？ ソーラーバッテリ駆動でスマホ充電もできるLEDランタン！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2017年&#34;&gt;2017年&lt;/h3&gt;
&lt;section class=&#34;link&#34; id=&#34;134&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-report2/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/134/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
【Maker Faire ShenZhen2017】アキバ電気街の30倍！？世界最大の電脳都市”深セン＠中国”に行ってきた！
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2017-11-24
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
世界最大の電脳都市と言われる中国は深センのMakerFaireに参加してきました！経路や観光も含めたっぷりレポートします！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;h2 id=&#34;今年の会場は-海上世界&#34;&gt;今年の会場は「海上世界」&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/c7b73ef6-c369-6cb0-23c4-c040b077e298.jpeg&#34; alt=&#34;IMG_4257.jpg&#34; title=&#34;IMG_4257.jpg&#34; /&gt;
2018年は「&lt;strong&gt;海上世界&lt;/strong&gt;」という、屋外型複合施設の一部が会場でした。最寄りの地下鉄駅から出て来て目に入ったのはまさかのくまモンでした。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/24d93795-4486-590f-397f-7cb65a4bcd4f.jpeg&#34; alt=&#34;IMG_20181012_1352220.jpg&#34; title=&#34;IMG_20181012_1352220.jpg&#34; /&gt;
「中国改革開放」と書かれたこの建物全体が会場となっていました。&lt;/p&gt;
&lt;h2 id=&#34;mfsz展示物紹介&#34;&gt;MFSZ展示物紹介&lt;/h2&gt;
&lt;h3 id=&#34;教育系デバイスが多い-編&#34;&gt;教育系デバイスが多い！編&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/23542cd6-657f-4232-b612-121b65f78c9e.jpeg&#34; alt=&#34;IMG_3354.JPG&#34; title=&#34;IMG_3354.JPG&#34; /&gt;
micro:bitを利用したロボット達です。いろんなタイプがあって、ロボット好きにはそそられます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/0827cd9f-8178-34a9-f058-098b70778049.jpeg&#34; alt=&#34;IMG_3391 2.JPG&#34; title=&#34;IMG_3391 2.JPG&#34; /&gt;
ハンズオンコーナーも大盛況。小学生ぐらいのお子さんが非常に多かったです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/fea92533-52fe-5525-66c9-fe26159f9dcb.jpeg&#34; alt=&#34;IMG_4306.jpg&#34; title=&#34;IMG_4306.jpg&#34; /&gt;
小学生ぐらいの集団が、課外学習のようなもので来ているようでした。自分も小さいときにこんなところに来たかったなあ……。と思って眺めているだけです。決して怪しくはありません。&lt;/p&gt;
&lt;h3 id=&#34;なにかに似ている編&#34;&gt;なにかに似ている編&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/8ea94ff5-b544-c98f-2bcb-26eaad564f49.jpeg&#34; alt=&#34;IMG_4292.jpg&#34; title=&#34;IMG_4292.jpg&#34; /&gt;
3Dプリンタによるクマモンのパチモンです。だいたい毎回、何匹か見ますね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/e9e083fb-55b5-cee9-3612-c8a394d046ab.jpeg&#34; alt=&#34;IMG_4303.jpg&#34; title=&#34;IMG_4303.jpg&#34; /&gt;
個人製作の、Philipsのhueみたいな遠隔操作できる照明のようです。アプリまでしっかりと作り込まれています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/53fe1905-f41d-3e42-06ab-d864fdaa80d9.jpeg&#34; alt=&#34;IMG_3352.JPG&#34; title=&#34;IMG_3352.JPG&#34; /&gt;
&lt;a href=&#34;https://dotstud.io/shop/nefry-bt-single/&#34;&gt;Nefry&lt;/a&gt;がたくさん並んでいる……？？&lt;/p&gt;
&lt;h3 id=&#34;ついつい買ってしまったもの編&#34;&gt;ついつい買ってしまったもの編&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/2860901a-3134-d3b3-d882-bbb47de23958.jpeg&#34; alt=&#34;IMG_20181012_1434199.jpg&#34; title=&#34;IMG_20181012_1434199.jpg&#34; /&gt;
大変気持ち悪い俊敏な（※褒め言葉）動きをするテントウムシ型ロボットです。タイヤではなく、リアルに足を動かして猛烈にダッシュします。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;iframe src=&#34;https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fsugawara.ryousuke%2Fvideos%2F2185613864806936%2F&amp;show_text=0&amp;width=380&#34; width=&#34;380&#34; height=&#34;476&#34; style=&#34;border:none;overflow:hidden&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; allowTransparency=&#34;true&#34; allowFullScreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/9d8a2c30-a9a9-c3e8-5643-ac10dc12f7c7.jpeg&#34; alt=&#34;IMG_20181012_1748544.jpg&#34; title=&#34;IMG_20181012_1748544.jpg&#34; /&gt;
日本では見ないメーカーのオリジナルドローンも買ってみました。数年前にドローンが流行りだして以降、&lt;strong&gt;小型化、高性能化、そして平均価格の低下&lt;/strong&gt;が著しくなっているように感じます。&lt;/p&gt;
&lt;h3 id=&#34;日本からの出展も&#34;&gt;日本からの出展も&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/747b0560-b80a-f94d-672d-aa4f37c317c0.jpeg&#34; alt=&#34;IMG_4277.JPG&#34; title=&#34;IMG_4277.JPG&#34; /&gt;
国内最大級のIoT勉強会「IoTLT」のブースもありましたが、主催側の急な予定変更により出展できなかったそうです。中国あるあるですね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/afcf8bcd-a4f2-f174-8c28-ca0f770c645c.jpeg&#34; alt=&#34;IMG_4282.jpg&#34; title=&#34;IMG_4282.jpg&#34; /&gt;
あの噂の外骨格も輸出！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/18b236c5-ccaf-57ed-3fc2-bf8f00b95286.jpeg&#34; alt=&#34;IMG_4325.jpg&#34; title=&#34;IMG_4325.jpg&#34; /&gt;
FlashAirを買ってしまいました。わざわざこんなところで……！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/6bc62707-35b7-47f8-4e34-92436101e384.jpeg&#34; alt=&#34;IMG_20181012_1652401.jpg&#34; title=&#34;IMG_20181012_1652401.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ditch.school/iiis&#34;&gt;iiis（良いイス）&lt;/a&gt;という、座って乗るタイプの新しい電動スケートボード。めちゃめちゃ速かったです。長野にサーキットがあり、試乗できるそうですよ。&lt;/p&gt;
&lt;p&gt;今年は、全体的にも例年と比べて規模がとても小さく、出展者数も半分ほどになっている印象でした。去年、一昨年と盛りだくさんの内容を見ている身としては少々残念ではありましたが、来年に期待したいですね。&lt;/p&gt;
&lt;h2 id=&#34;市街地にも行ってきました&#34;&gt;市街地にも行ってきました&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/792c8c4d-ed4c-83db-820e-c92cdda10c18.jpeg&#34; alt=&#34;IMG_4389.jpg&#34; title=&#34;IMG_4389.jpg&#34; /&gt;
無印◯品とダ◯ソーとユニ◯ロを足して3で割った感じだと話題のお店です。3年ぐらい前に中国で見かけてから今回は久々なのですが、急激に商品のクオリティが上がっておりびっくりしました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/acbbb05e-0854-5d80-0de9-e41ff8d23503.jpeg&#34; alt=&#34;IMG_20181012_1906160.jpg&#34; title=&#34;IMG_20181012_1906160.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b23e313fc3c6faaac95fc0c4d835a18b.jpg&#34; alt=&#34;Image from Gyazo&#34; /&gt;
中国では規制がかかっていて使えないLINEですが、キャラクターは非常に人気らしく、なんと公式カフェ＆バーがありました。ちなみにLINE PAYでの支払いはできませんでした（笑）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/ad495d0b-199d-03a5-e5ca-d30f86237d39.jpeg&#34; alt=&#34;IMG_20181012_2118583.jpg&#34; title=&#34;IMG_20181012_2118583.jpg&#34; /&gt;
コンビニです。限りなくアウトなんじゃないでしょうか。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/c254b81f-16ec-aa8c-c2fd-7cc07330b1ab.jpeg&#34; alt=&#34;IMG_4559.jpg&#34; title=&#34;IMG_4559.jpg&#34; /&gt;
既視感のある、不安にさせるデザインのロボットが多数売られています。けっこう高い。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/e2a8bfee-0367-f679-904c-7be97fa5081d.jpeg&#34; alt=&#34;IMG_20181013_1143465.jpg&#34; title=&#34;IMG_20181013_1143465.jpg&#34; /&gt;
成長の速度が速いがゆえに、来るたびに見たことのない商品が増殖していく深セン電気街ですが、この山積みのケーブルだけはいつ見ても安心感があります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/46b93798-7147-55d1-e6b3-30e1881cce43.jpeg&#34; alt=&#34;IMG_20181013_1154375.jpg&#34; title=&#34;IMG_20181013_1154375.jpg&#34; /&gt;
商品配置の密度が相変わらずすごいです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/52887781-e6dd-0bf2-098c-ec9602e6a2d9.jpeg&#34; alt=&#34;IMG_4593.jpg&#34; title=&#34;IMG_4593.jpg&#34; /&gt;
電気街の通路で足を引っ掛けたと思ったら、やばそうな箱がおいてありました。中身がなんなのか、まったく想像がつきません……。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/d59a3574-7b48-cd36-0fcc-ee29e7607ba2.jpeg&#34; alt=&#34;IMG_20181013_1411523.jpg&#34; title=&#34;IMG_20181013_1411523.jpg&#34; /&gt;
去年あたりから非常に綺麗になった華強北の電気街筋です。だいたいビル2個で秋葉原の電気店をまるごと収めることができるんじゃないでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/46eb3c01-45fb-3abb-4fb5-4d03e63eb5dd.jpeg&#34; alt=&#34;IMG_4363.jpg&#34; title=&#34;IMG_4363.jpg&#34; /&gt;
今年のMaker Faireは、やはり規模が小さかっただけあり、少しだけ残念ではありました。出展可能な内容の基準がゆるく、日本では見たり体験したりできないようなモノはありましたが、そのぶん開催ごとのクオリティを一定に保つのが難しいようです。&lt;/p&gt;
&lt;p&gt;一方で市街地はどんどん綺麗になっていっており、QRコードの使える改札機、常にプロジェクションマッピングがあてられているビル群など、最先端技術が惜しみなく取り入れられています。&lt;/p&gt;
&lt;p&gt;深センでのMaker Faireは秋だけですが、市街では常に最新鋭の取り組みを感じられますので、興味を持たれた方はぜひ足を踏み入れてはいかがでしょうか。&lt;/p&gt;</description></item><item><title>【ハンズオン資料】GR-LYCHEEとOpenCVで画像認識やってみよう</title><link>https://dotstud.io/blog/gr-lychee-opencv-handson/</link><pubDate>Thu, 13 Dec 2018 05:17:31 +0900</pubDate><guid>https://dotstud.io/blog/gr-lychee-opencv-handson/</guid><description>
&lt;p&gt;この記事は12/07の&lt;a href=&#34;https://ai-iot-bol-fukui.connpass.com/event/109573/&#34;&gt;AI×IoT ハンズオン with IoTLT&amp;amp;ふくもく会 in 福井&lt;/a&gt;向け資料です。記事を読んで試せる内容になっているので、終了後や参加されていない方もぜひ試してみてください！&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■ハンズオンの進行について&lt;/p&gt;
ハンズオンはこのページに沿って進めます。進められる方は、どんどん進めていきましょう！リンクは別タブや別ウィンドウで開くのがオススメです。
&lt;/section&gt;
&lt;p&gt;この記事はがじぇっとるねさすさんの「&lt;a href=&#34;http://gadget.renesas.com/ja/product/e-ai/mnist_tutorial.html&#34;&gt;e-AIトランスレータ チュートリアル GRボードで実行してみよう！&lt;/a&gt;」を参考に作成しています。&lt;/p&gt;
&lt;h2 id=&#34;今回やってみること&#34;&gt;今回やってみること&lt;/h2&gt;
&lt;p&gt;PythonとTensorflow、数字認識のデータライブラリMNISTを使い、数字認識する学習モデルを作成します。&lt;strong&gt;Pythonなしでもコピペで試せる内容&lt;/strong&gt;になっています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/233/result.gif&#34; alt=&#34;demo&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;
&lt;h4 id=&#34;マイコンボード-gr-lychee&#34;&gt;■マイコンボード「GR-LYCHEE」&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/714caa81da618bf491f460087f27d3cb.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;がじぇっとるねさす（通称がじぇるね）が提供している高性能マイコンボードです。電子工作でよく使われるArduino UNOとピンが互換になっていて、Wi-Fi・BLE通信モジュール「ESP32」を搭載しています。&lt;/p&gt;
&lt;p&gt;わりと手軽にIoTプロトタイピングを試せる高性能マイコンボード、な立ち位置です。（ちゃんとく所感）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入: &lt;a href=&#34;http://akizukidenshi.com/catalog/g/gM-12850/&#34;&gt;秋月電子&lt;/a&gt;（¥10,580）&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■実行するGRボードについて&lt;/p&gt;
他のGRシリーズのボードでも今回のプログラムを試すことができますが、GR-KURUMI、GR-COTTON、GR-ADZUKIはROM容量不足で実行できないようです。
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;usbケーブル-microb&#34;&gt;■USBケーブル（microB）&lt;/h4&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/usb.png&#34; alt=&#34;usb&#34;&gt;
&lt;/center&gt;
&lt;p&gt;PCとGR-LYCHEEの通信（プログラムの書き込み、カメラ映像の出力など）には、Android端末などに使われているmicroBタイプのUSBケーブルを使います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入: &lt;a href=&#34;http://akizukidenshi.com/catalog/g/gC-09312/&#34;&gt;秋月電子&lt;/a&gt;（¥100）&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■USBケーブルについて&lt;/p&gt;
ご自身で用意する場合、&lt;b&gt;シリアル通信ができるタイプ&lt;/b&gt;のものか確認してください。安価なものだと一方向の給電専用タイプのものが多いです。
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;h3 id=&#34;displayapp-をインストール&#34;&gt;「DisplayApp」をインストール&lt;/h3&gt;
&lt;p&gt;GR-LYCHEEのカメラで映している映像を確認するために利用します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://gadget.renesas.com/ja/product/lychee.html#displayapp&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/5cf7140ebfb5221592c1ca7f6aa7f839.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;がじぇるね公式ページの&lt;a href=&#34;http://gadget.renesas.com/ja/product/lychee.html#displayapp&#34;&gt;こちら&lt;/a&gt;からご自身のOSに合ったものをダウンロードし、ZIPファイルを展開します。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;macosの方&#34;&gt;■MacOSの方&lt;/h4&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/app.png&#34; alt=&#34;app&#34;&gt;
&lt;/center&gt;
ZIPファイルを展開し、Macの方は「アプリケーション」に移動させます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;windowsの方&#34;&gt;■Windowsの方&lt;/h4&gt;
&lt;p&gt;展開したファイル内の「〜.exe」をダブルクリックで実行します。インストーラが起動するので、手順通り進めます。&lt;/p&gt;
&lt;h2 id=&#34;はじめてのプログラムを書き込んでみる&#34;&gt;はじめてのプログラムを書き込んでみる&lt;/h2&gt;
&lt;p&gt;最初のプログラムとして、Lチカをやってみます。LEDチカチカの略で、入門向けのプログラムとして汎用的に紹介されています。&lt;/p&gt;
&lt;p&gt;簡単なプログラムを書き込むことで、ボードが正常に動くか試す際に利用することも多いです。WebでいうHello, worldです。&lt;/p&gt;
&lt;h3 id=&#34;webコンパイラの準備&#34;&gt;Webコンパイラの準備&lt;/h3&gt;
&lt;p&gt;GRシリーズでは「Webコンパイラ」という、ブラウザ上で利用できるコンパイラが利用できます。面倒な環境構築が不要なので楽チンですね。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://gadget.renesas.com/ja/&#34;&gt;がじぇるねのページ&lt;/a&gt;から、「ログイン」または「ゲストログイン」をクリックし移動します。
&lt;img src=&#34;https://i.gyazo.com/bcf47b506593c244633350381c30422f.png&#34; alt=&#34;compiler&#34; /&gt;&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■ログインボタンが見つからない！という方&lt;/p&gt;
ブラウザを横に広げてみてください。ひょこっとボタンが出てきます。
&lt;/section&gt;
&lt;p&gt;プロジェクト作成画面になるので、「LYCHEE」でフィルターをかけてみます。
&lt;img src=&#34;https://i.gyazo.com/9fbdd84ff53037965a358bc646d3923c.png&#34; alt=&#34;create project&#34; /&gt;
「GR-LYCHEE_mbed…」と「GR-LYCHEE_Sketch…」という2タイプあるので、&lt;strong&gt;Sketchの方を選択&lt;/strong&gt;します（mbed OSのプログラムを利用したいときは前者を選びましょう）。&lt;/p&gt;
&lt;h3 id=&#34;プログラム&#34;&gt;プログラム&lt;/h3&gt;
&lt;p&gt;メニュー左側の「〜.cpp」という拡張子のファイルがメインのプログラムファイルになります。&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/edit_cpp.png&#34; alt=&#34;edit_cpp&#34;&gt;
&lt;/center&gt;
「〜.cpp」をダブルクリックすると、中央に編集画面が表示されます。&lt;/p&gt;
&lt;p&gt;表示されたサンプルコードを&lt;strong&gt;一旦全て消してから&lt;/strong&gt;、下記のプログラムを貼り付けます。&lt;/p&gt;
&lt;div class=&#34;accbox&#34;&gt;
&lt;label for=&#34;label1&#34;&gt;クリックしてコードを表示&lt;/labe&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;label1&#34; class=&#34;cssacc&#34; /&gt;
&lt;div class=&#34;accshow&#34;&gt;
&lt;pre&gt;
&lt;code class=&#34;hljs hljs-cpp&#34;&gt;
/* GR-LYCHEE Sketch Template V1.04 */
#include &amp;lt;Arduino.h&amp;gt;
#define INTERVAL 50
void setup()
{
Serial.begin(9600);
pinMode(LED_RED, OUTPUT);
pinMode(LED_ORANGE, OUTPUT);
pinMode(LED_YELLOW, OUTPUT);
pinMode(LED_GREEN, OUTPUT);
pinMode(USER_BUTTON0, INPUT);
}
void loop()
{
while(digitalRead(USER_BUTTON0) == 0){
digitalWrite(LED_GREEN, 1);
delay(INTERVAL);
digitalWrite(LED_GREEN, 0);
delay(INTERVAL);
Serial.println(&#34;I&#39;m LYCHEE!&#34;);
}
digitalWrite(LED_RED, 1);
delay(INTERVAL);
digitalWrite(LED_RED, 0);
digitalWrite(LED_ORANGE, 1);
delay(INTERVAL);
digitalWrite(LED_ORANGE, 0);
digitalWrite(LED_YELLOW, 1);
delay(INTERVAL);
digitalWrite(LED_YELLOW, 0);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/build.png&#34; alt=&#34;build&#34;&gt;
&lt;/center&gt;
貼り付けたら、右側の「ビルド実行」ボタンをクリックし、記述したプログラムをコンパイルします。&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/compiled.png&#34; alt=&#34;compiled&#34;&gt;
&lt;/center&gt;
コンパイルが完了すると、「コンパイルが完了しました」というメッセージと実行ログが表示されるので、「&lt;strong&gt;閉じる&lt;/strong&gt;」ボタンで完了します。&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/download_bin.png&#34; alt=&#34;download_bin&#34;&gt;
&lt;/center&gt;
「〜.bin」というファイルが作成されているので、右クリックしダウンロードします。&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■コンパイルについて&lt;/p&gt;
プログラムを、&lt;b&gt;機械が実行可能な機械語に変換すること&lt;/b&gt;です。プログラムは人間に理解しやすい形、機械語は機械が理解しやすい形に最適化されています。
&lt;/section&gt;
&lt;h3 id=&#34;pcとgr-lycheeを接続&#34;&gt;PCとGR-LYCHEEを接続&lt;/h3&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/connect.png&#34; alt=&#34;connect&#34;&gt;
&lt;/center&gt;
&lt;p&gt;GR-LYCHEEとPCをUSBケーブルで接続しましょう。GR-LYCHEEのUSBソケットは&lt;strong&gt;真ん中の方&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/recog.png&#34; alt=&#34;recog&#34;&gt;
&lt;/center&gt;
PCに「MBED」という名前で認識されます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;デバイスが認識されない-windows&#34;&gt;■デバイスが認識されない（Windows）&lt;/h4&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/usb_driver.png&#34; alt=&#34;usb_driver&#34;&gt;
&lt;/center&gt;
&lt;a href=&#34;https://os.mbed.com/docs/latest/tutorials/windows-serial-driver.html&#34;&gt;こちら&lt;/a&gt;のページから「Arm Mbed Windows serial port driver」をクリックし、インストールしてください。&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■USBドライバについて&lt;/p&gt;
PCに、USBで接続した機器を認識・通信させるためのツールです。
&lt;/section&gt;
&lt;h3 id=&#34;プログラムを書き込み&#34;&gt;プログラムを書き込み&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/drop.png&#34; alt=&#34;drop&#34;&gt;
&lt;/center&gt;
ダウンロードした「〜.bin」ファイルを「MBED」にドラッグ＆ドロップでコピーします。コピー後、ファイルはMBEDフォルダ内には表示されません。&lt;/p&gt;
&lt;h3 id=&#34;再起動して実行&#34;&gt;再起動して実行&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/reset.png&#34; alt=&#34;reset&#34;&gt;
&lt;/center&gt;
リセットボタンを押し、GR-LYCHEEを再起動させます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/233/blink.gif&#34; alt=&#34;blink&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Lチカプログラムが実行されました！&lt;/p&gt;
&lt;h2 id=&#34;gr-lycheeカメラの映像をdisplayappに表示&#34;&gt;GR-LYCHEEカメラの映像をdisplayAppに表示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/233/display.gif&#34; alt=&#34;display&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GR-LYCHEEにカメラを取り付けて、PC上で映る映像を確認してみましょう。&lt;/p&gt;
&lt;h3 id=&#34;カメラの取り付け&#34;&gt;カメラの取り付け&lt;/h3&gt;
&lt;h4 id=&#34;カメラ本体&#34;&gt;■カメラ本体&lt;/h4&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/camera.png&#34; alt=&#34;camera&#34;&gt;
&lt;/center&gt;
&lt;ol&gt;
&lt;li&gt;カメラ本体のソケット部を持ち上げます&lt;/li&gt;
&lt;li&gt;フレキシブルケーブルの無地面を上に、ソケットに差し込みます&lt;/li&gt;
&lt;li&gt;ソケット部を元に戻します&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;gr-lychee&#34;&gt;■GR-LYCHEE&lt;/h4&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/camera2.png&#34; alt=&#34;camera2&#34;&gt;
&lt;/center&gt;
&lt;ol&gt;
&lt;li&gt;GR-LYCHEE背面のソケット部を上にずらします&lt;/li&gt;
&lt;li&gt;フレキシブルケーブルの文字面を上に、ソケットに差し込みます&lt;/li&gt;
&lt;li&gt;ソケット部を下に戻します&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;プログラム-1&#34;&gt;プログラム&lt;/h3&gt;
&lt;p&gt;Webコンパイラでプログラムを下記に置き換え、先ほど同様書き込みます。&lt;/p&gt;
&lt;div class=&#34;accbox&#34;&gt;
&lt;label for=&#34;label2&#34;&gt;クリックしてコードを表示&lt;/labe&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;label2&#34; class=&#34;cssacc&#34; /&gt;
&lt;div class=&#34;accshow&#34;&gt;
&lt;pre&gt;
&lt;code class=&#34;hljs hljs-cpp&#34;&gt;
// Sample for GR-PEACH, GR-LYCHEE
// Required hardware: Camera, USB
// Public Domain
#include &amp;lt;Arduino.h&amp;gt;
#include &amp;lt;Camera.h&amp;gt;
#include &#34;DisplayApp.h&#34;
#define LOOP_WAITTIME 17 // 17ms for 60 fps of camera spec.
Camera camera(640, 480);
static DisplayApp display_app;
void setup() {
Serial.begin(9600);
Serial.println(&#34;start&#34;);
camera.begin();
}
void loop() {
static unsigned long last_time = millis();
while ((millis() - last_time) &lt; LOOP_WAITTIME);
last_time = millis();
display_app.SendJpeg(camera.getJpegAdr(), (int)camera.createJpeg());
delay(1);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;usbを付け替えて実行&#34;&gt;USBを付け替えて実行&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/connect2.png&#34; alt=&#34;connect2&#34;&gt;
&lt;/center&gt;
書き込んだら、GR-LYCHEE側のUSBソケットを外側に付け替えます。（通信用）&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/port.png&#34; alt=&#34;port&#34;&gt;
&lt;/center&gt;
DisplayAppでシリアルポートを選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/233/display.gif&#34; alt=&#34;display&#34; /&gt;
カメラの画像がDisplayAppに表示されます。高画質！&lt;/p&gt;
&lt;h2 id=&#34;数字認識の学習モデルを作ろう&#34;&gt;数字認識の学習モデルを作ろう&lt;/h2&gt;
&lt;p&gt;MNISTとTensorflowを使って学習モデルを作り、カメラに映った数字を判定するプログラムを作成してみます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python+Tensorflowをインストールせず試してみたい&lt;/strong&gt;、という方は、「&lt;a href=&#34;#完成コード&#34;&gt;完成コード&lt;/a&gt;」の章から進めてください。&lt;/p&gt;
&lt;h3 id=&#34;作業用ディレクトリを作成&#34;&gt;作業用ディレクトリを作成&lt;/h3&gt;
&lt;p&gt;今回のプログラムを試すディレクトリ（フォルダ）を作ります。&lt;/p&gt;
&lt;p&gt;プログラムを実行する上では&lt;strong&gt;今どこで作業しているか&lt;/strong&gt;というのが重要です。最初のうちはわかりづらいので、意識するようにしましょう。&lt;/p&gt;
&lt;p&gt;コマンドラインに不慣れである方は、下記記事を参照してみてください。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;158&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/how-to-use-cli/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/158/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
【Mac向け】「黒い画面」の苦手意識を克服しよう！コマンドラインインタフェースの基本操作
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-04-09
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
Macユーザ向けコマンドラインインタフェースの使い方！実は難しくない「黒い画面」の操作方法を覚えていきましょう。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;windowsの方-1&#34;&gt;■Windowsの方&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;デスクトップで右クリックし、&lt;code&gt;gr-tutorial&lt;/code&gt;というファイルを作成&lt;/li&gt;
&lt;li&gt;Windowsメニューから「コマンドラインプロンプト」を検索し開く（「cmd」で候補にでてきます）&lt;/li&gt;
&lt;li&gt;下記コマンドを1行ずつ実行（&lt;code&gt;$&lt;/code&gt;は不要。コマンドラインであることを表しています）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ cd Desktop
$ cd gr-tutorial
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt;はディレクトリを移動するコマンドです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;macの方&#34;&gt;■Macの方&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;「ターミナル」を起動（⌘+スペースで「ターミナル」を検索すると便利）&lt;/li&gt;
&lt;li&gt;下記コマンドを1行ずつ順に打ち込む（&lt;code&gt;$&lt;/code&gt;は不要。コマンドラインであることを表しています）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/Desktop
$ mkdir gr-tutorial
$ cd gr-tutorial
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デスクトップに「gr-tutorial」というフォルダができているかと思います（右クリックで作成してもOKです）。&lt;code&gt;cd&lt;/code&gt;コマンドは移動するコマンド、&lt;code&gt;mkdir&lt;/code&gt;コマンドはディレクトリを作成するコマンドです。&lt;/p&gt;
&lt;h3 id=&#34;python-tensorflow環境構築&#34;&gt;Python＆Tensorflow環境構築&lt;/h3&gt;
&lt;p&gt;今回はご自身の環境に、以下の内容を用意し進めます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python実行環境&lt;/li&gt;
&lt;li&gt;Tensorflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;環境構築はおそらく&lt;strong&gt;このハンズオンで1番大変なところ&lt;/strong&gt;です。乗り越えたらサクッと試せるようになるので頑張りましょう！&lt;/p&gt;
&lt;p&gt;PCの状態に合わせて場合分けしましたので、ご自身に合う部分を読んでください。&lt;/p&gt;
&lt;h3 id=&#34;まずは現在の環境を確認する&#34;&gt;まずは現在の環境を確認する&lt;/h3&gt;
&lt;p&gt;下記コマンドを試して、PythonとTensorFlowがインストールされているか確認しましょう。コマンドは&lt;code&gt;$&lt;/code&gt;マークの後ろの部分です。（↓の場合は&lt;code&gt;python -V&lt;/code&gt;と打ち込む）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python -V
Python X.X.X
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pythonのバージョンが表示されればOKです。「command not found」や「実行する〜〜が見つかりません」などと表示された方は、インストールされていない（または正しくインストールできていない）のでPythonの環境構築手順を進めます。&lt;/p&gt;
&lt;p&gt;インストールされていなかった方は、「&lt;a href=&#34;#Pythonをインストール&#34;&gt;Pythonをインストール&lt;/a&gt;」へ進んでください。&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■Pythonのバージョンについて&lt;/p&gt;
Pythonのバージョンは2系、3系どちらでも実行可能ですが、Python3.7系ではTensorflowがうまく実行できないようです。
&lt;/section&gt;
&lt;p&gt;続いて、Tensorflowモジュールがインストールされているかの確認です。&lt;code&gt;pip list&lt;/code&gt;と打ち込んでみましょう。（表示されるものは一例）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip list
Package Version
---------------------- ---------
absl-py 0.6.1
bleach 1.5.0
html5lib 0.9999999
Markdown 3.0.1
nose 1.3.7
numpy 1.15.3
pip 18.1
protobuf 3.6.1
setuptools 39.0.1
six 1.11.0
tensorflow 1.5.0
…
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一覧に&lt;code&gt;tensorflow&lt;/code&gt;とあればOKです。バージョンが古い場合は、下記コマンドで更新をしておきましょう（最新は1.5系です）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python2系の場合&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ pip install --upgrade tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Python3系の場合&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ pip3 install --upgrade tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PythonがインストールされているがTensorflowはインストールされていない場合は、「&lt;a href=&#34;#tensorflowをインストール&#34;&gt;Tensorflowをインストール&lt;/a&gt;」へ進んでください。&lt;/p&gt;
&lt;p&gt;どちらもインストールされていた場合は、「&lt;a href=&#34;#MNISTで学習モデルを作成&#34;&gt;MNISTで学習モデルを作成&lt;/a&gt;」へ進みます。&lt;/p&gt;
&lt;h3 id=&#34;pythonをインストール&#34;&gt;Pythonをインストール&lt;/h3&gt;
&lt;h4 id=&#34;windowsの方-2&#34;&gt;■Windowsの方&lt;/h4&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/install_python.png&#34; alt=&#34;install_python&#34;&gt;
&lt;/center&gt;
&lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;Pythonの公式ページ&lt;/a&gt;へ移動し、インストールしたいPythonのバージョンをクリックします。（Tensorflowがうまく動かないので&lt;strong&gt;Python3.7系は避けてください&lt;/strong&gt;。3.6.xがオススメです。）&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/233/select_version.png&#34; alt=&#34;select_version&#34;&gt;
&lt;/center&gt;
&lt;p&gt;移動先のページ下部のリストから、「Windows x86-64 web-based installer」をダウンロードします。32bit版の場合は「Windows x86 web-based installer」を選択してください。&lt;/p&gt;
&lt;p&gt;ダウンロードされたパッケージを実行し、「&lt;strong&gt;Add Python xxx to PATH&lt;/strong&gt;」をチェックしてインストールを実行します。&lt;/p&gt;
&lt;p&gt;完了したら、コマンドプロンプトで&lt;code&gt;python -V&lt;/code&gt;を打ち、任意のバージョンが表示されるか確認します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python -V
Python X.X.X
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表示されない方はコマンドプロンプトを再起動して試してみてください。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;macの方-1&#34;&gt;■Macの方&lt;/h4&gt;
&lt;p&gt;デフォルトでPython2系がインストールされているはずですが、何かのタイミングで消してしまった可能性があります。&lt;/p&gt;
&lt;p&gt;ターミナルで下記コマンドを実行し、Homebrewがインストールされているか確認します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew -v
Homebrew x.x.x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールされていない場合は下記コマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;続いてHomebrewでpyenvをインストールします。pyenvはPythonのバージョン管理を行うツールです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew install pyenv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールされたら下記コマンドで確認します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pyenv -v
pyenv x.x.x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pyenvでPythonをインストールします。バージョンは任意のものでよいですが、Tensorflowがうまく動かないので&lt;strong&gt;3.7系は避けてください&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pyenv install 3.6.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完了したら、選択したバージョンを設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pyenv global 3.6.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ターミナルで下記コマンドを実行し、バージョンが表示されるか確認してみてください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python -V
Python 3.6.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tensorflowをインストール&#34;&gt;TensorFlowをインストール&lt;/h3&gt;
&lt;p&gt;コマンドラインで下記コマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;だらだらと実行文が表示され、最後の行に &lt;code&gt;Successfully installed tensorflow-X.X.X&lt;/code&gt;などと表示されればOKです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip list&lt;/code&gt;というコマンドを打って、インストールされたか確認してみます。（表示されるものは一例）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip list
Package Version
---------------------- ---------
absl-py 0.6.1
bleach 1.5.0
html5lib 0.9999999
Markdown 3.0.1
nose 1.3.7
numpy 1.15.3
pip 18.1
protobuf 3.6.1
setuptools 39.0.1
six 1.11.0
tensorflow 1.5.0
…
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一覧に、&lt;code&gt;tensorflow&lt;/code&gt;とあればOKです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;実行したらエラーが出た&#34;&gt;■実行したらエラーが出た&lt;/h4&gt;
&lt;p&gt;長い実行文が表示されたあと、最後の一行が下記のようなエラー文になることがあります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Could not install packages due to an EnvironmentError: [Errno 13] Permission denied: &#39;/Library/Python/2.7/site-packages/tensorflow-1.11.0.dist-info&#39; Consider using the --user option or check the permissions.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下記コマンドを再度実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo pip install tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;パスワードを求められるので、PCのユーザのパスワードを入力します。（入力したパスワードは表示されません）&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;エラーが出てインストールが実行されない①&#34;&gt;■エラーが出てインストールが実行されない①&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pip install tensorflow&lt;/code&gt;を実行すると、&lt;code&gt;command not found&lt;/code&gt;といったエラーが出る場合があります。以下のコマンドを実行し、pipをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python -m ensurepip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;エラーが出てインストールが実行されない②&#34;&gt;■エラーが出てインストールが実行されない②&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pip install tensorflow&lt;/code&gt;を実行すると、下記のようなエラーが出る場合があります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Could not find a version that satisfies the requirement tensorflow (from versions: )
No matching distribution found for tensorflow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下のコマンドを再度実行しましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python2系&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ pip install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.11.0-py2-none-any.wh
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Python3系&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ python3 -m pip install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.5.0-py3-none-any.whl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;インストールしたのにlistに表示されない&#34;&gt;■インストールしたのにlistに表示されない&lt;/h4&gt;
&lt;p&gt;主にMacで、Python環境がPC上に複数あり、意図する場所にインストールできていない可能性があります。&lt;/p&gt;
&lt;p&gt;主に下記の記事を参考にしてみてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/ta_ta_ta_miya/items/e24394c6b0022405a126&#34;&gt;pyenvでPythonがSystemバージョンから切り替わらない時の対処&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/mckyhrs/items/94a2db3506287df0420e&#34;&gt;pythonのバージョンが切り替わらない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mnistで学習モデルを作成&#34;&gt;MNISTで学習モデルを作成&lt;/h3&gt;
&lt;p&gt;画像認識向けに、大量の画像を自分で収集し学習用に加工するのはとても大変です。&lt;/p&gt;
&lt;p&gt;MNIST（Mixed National Institute of Standards and Technology database）は、手書き数字画像60,000枚とテスト画像10,000枚を集めたデータセットです。&lt;/p&gt;
&lt;p&gt;手軽に入手でき簡単に扱えるので、AI入門のサンプルデータとしてオススメです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;mnist用pythonコードを作成&#34;&gt;■MNIST用Pythonコードを作成&lt;/h4&gt;
&lt;p&gt;作成した作業用ディレクトリに、コマンドか右クリックなどで&lt;code&gt;mnist_softmax_for_e-ai.py&lt;/code&gt;というファイルを作成します。&lt;/p&gt;
&lt;p&gt;プログラム向けのエディタでファイルを開き、下記のプログラムを貼り付けます。&lt;/p&gt;
&lt;div class=&#34;accbox&#34;&gt;
&lt;label for=&#34;label3&#34;&gt;クリックしてコードを表示&lt;/labe&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;label3&#34; class=&#34;cssacc&#34; /&gt;
&lt;div class=&#34;accshow&#34;&gt;
&lt;pre&gt;
&lt;code class=&#34;hljs python&#34;&gt;
# Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
&#34;&#34;&#34;A very simple MNIST classifier.
See extensive documentation at
https://www.tensorflow.org/get_started/mnist/beginners
&#34;&#34;&#34;
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import argparse
import sys
from tensorflow.examples.tutorials.mnist import input_data
import tensorflow as tf
FLAGS = None
def main(_):
# Import data
mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)
# Create the model
x = tf.placeholder(tf.float32, [None, 784])
#Add Renesas 2 --------- ----------
# change
# x_ = tf.placeholder(tf.float32, [None, 784])
# x = tf.reshape(x_, [-1])
# --------- ----------
W = tf.Variable(tf.zeros([784, 10]))
b = tf.Variable(tf.zeros([10]))
y = tf.matmul(x, W) + b
# Define loss and optimizer
y_ = tf.placeholder(tf.float32, [None, 10])
# The raw formulation of cross-entropy,
#
# tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(tf.nn.softmax(y)),
# reduction_indices=[1]))
#
# can be numerically unstable.
#
# So here we use tf.nn.softmax_cross_entropy_with_logits on the raw
# outputs of &#39;y&#39;, and then average across the batch.
cross_entropy = tf.reduce_mean(
tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)
sess = tf.InteractiveSession()
tf.global_variables_initializer().run()
# Train
for _ in range(1000):
batch_xs, batch_ys = mnist.train.next_batch(100)
sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
# Test trained model
correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
print(sess.run(accuracy, feed_dict={x: mnist.test.images,
y_: mnist.test.labels}))
#Add Renesas 1 --------- ----------
import os
#Save Learned AI
out_dir = &#34;./tf_LearnedModel&#34;
if os.path.isdir(out_dir) is False:
os.makedirs(out_dir)
saver = tf.train.Saver()
saver.save(sess, out_dir+&#34;/tf_LearnedModel&#34;)
# --------- ----------
if __name__ == &#39;__main__&#39;:
parser = argparse.ArgumentParser()
parser.add_argument(&#39;--data_dir&#39;, type=str, default=&#39;/tmp/tensorflow/mnist/input_data&#39;,
help=&#39;Directory for storing input data&#39;)
FLAGS, unparsed = parser.parse_known_args()
tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;今回はがじぇるねさんの&lt;a href=&#34;http://gadget.renesas.com/ja/product/e-ai/mnist_tutorial.html#%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%81%AE%E5%AE%9F%E8%A1%8C&#34;&gt;チュートリアルのサンプルコード&lt;/a&gt;をお借りしました！&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;tensorflowで実行&#34;&gt;■Tensorflowで実行&lt;/h4&gt;
&lt;p&gt;下記コマンドで学習モデルを作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python mnist_softmax_for_e-ai.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pythonコマンドはPythonで書かれたプログラムを実行するコマンドです。ファイルの中のプログラムが実行され、学習モデルが作成されます。&lt;/p&gt;
&lt;p&gt;Windowsの方は&lt;code&gt;dir&lt;/code&gt;、Macの方は&lt;code&gt;ls&lt;/code&gt;というコマンドを実行し、「tf_LearnedModel」というフォルダが作成されたことを確認してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls
mnist_softmax_for_e-ai.py
tf_LearnedModel/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Windowsは&lt;code&gt;dir tf_LearnedModel&lt;/code&gt;、Macは&lt;code&gt;ls tf_LearnedModel&lt;/code&gt;のコマンドを実行すると、4つのファイルが入っていることがわかります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls tf_LearnedModel
checkpoint
tf_LearnedModel.data-00000-of-00001
tf_LearnedModel.index
tf_LearnedModel.meta
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;学習モデルをgrボードで扱う&#34;&gt;学習モデルをGRボードで扱う&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/045295f6fe6ebda3cbed3d0150650c27.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;
Webコンパイラを開き、右側のリストから「e-AI Translator」をクリックします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/1ae615bd6f71338dab09647185d3bcb5.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;
アップロードボタンを押し、先ほど作成された「tf_LearnedModel」を選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/2d54b87b9a6c9852f31c1afb14132614.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;
その他はデフォルト選択のまま、「トランスレート」をクリックします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/27fe23312950242e2eee4ff2e6e7ee79.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;
表示されたプログラムを全て選択してコピーします。&lt;/p&gt;
&lt;h2 id=&#34;完成コード&#34;&gt;完成コード&lt;/h2&gt;
&lt;p&gt;上記で生成されたプログラムに、displayAppに表示させるためのコードを加えたプログラムです。USBケーブルは真ん中に接続し、GR-LYCHEEに書き込みましょう。&lt;/p&gt;
&lt;div class=&#34;accbox&#34;&gt;
&lt;label for=&#34;label4&#34;&gt;クリックしてコードを表示&lt;/labe&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;label4&#34; class=&#34;cssacc&#34; /&gt;
&lt;div class=&#34;accshow&#34;&gt;
&lt;pre&gt;
&lt;code class=&#34;hljs hljs-cpp&#34;&gt;
#include &amp;lt;Arduino.h&amp;gt;
#include &amp;lt;Camera.h&amp;gt;
#include &amp;lt;opencv.hpp&amp;gt;
#include &amp;lt;DisplayApp.h&amp;gt;
#ifdef __cplusplus
extern &#34;C&#34; {
#endif
#include &#34;eAI_translated/Typedef.h&#34;
#include &#34;eAI_translated/input_image_0.h&#34;
#include &#34;eAI_translated/layer_graph.h&#34;
TPrecision* dnn_compute(TPrecision* input_img);
#ifdef __cplusplus
}
#endif
// To monitor realtime on PC, you need DisplayApp on following site.
// Connect USB0(not for mbed interface) to your PC
// os.mbed.com/.../
using namespace cv;
#define IMAGE_HW 320
#define IMAGE_VW 240
#define INPUT_HEIGHT 28
#define INPUT_WIDTH 28
Camera camera(IMAGE_HW, IMAGE_VW);
DisplayApp display_app;
void paste(cv::Mat dst, cv::Mat src, int x, int y, int width, int height) {
cv::Mat resized_img;
cv::resize(src, resized_img, cv::Size(width, height));
if (x &gt;= dst.cols || y &gt;= dst.rows) return;
int w = (x &gt;= 0) ? std::min(dst.cols - x, resized_img.cols) : std::min(std::max(resized_img.cols + x, 0), dst.cols);
int h = (y &gt;= 0) ? std::min(dst.rows - y, resized_img.rows) : std::min(std::max(resized_img.rows + y, 0), dst.rows);
int u = (x &gt;= 0) ? 0 : std::min(-x, resized_img.cols - 1);
int v = (y &gt;= 0) ? 0 : std::min(-y, resized_img.rows - 1);
int px = std::max(x, 0);
int py = std::max(y, 0);
cv::Mat roi_dst = dst(cv::Rect(px, py, w, h));
cv::Mat roi_resized = resized_img(cv::Rect(u, v, w, h));
roi_resized.copyTo(roi_dst);
}
int max_array(TPrecision* array, int length){
int i;
float max = array[0];
int index = 0;
for(i = 0; i &lt; length; i++){
if(array[i] &gt; max){
max = array[i];
index = i;
}
}
return index;
}
void setup() {
Serial.begin(9600);
camera.begin();
}
void loop() {
Scalar red(0, 0, 255), green(0, 255, 0), blue(255, 0, 0);
Scalar yellow = red + green;
Scalar white = Scalar::all(255);
Scalar black = Scalar::all(0);
Scalar pink = Scalar(154, 51, 255);
Mat img_raw(IMAGE_VW, IMAGE_HW, CV_8UC2, camera.getImageAdr());
Mat pic, gray;
cvtColor(img_raw, pic, COLOR_YUV2BGR_YUYV); //covert YUV to RGB
cvtColor(img_raw, gray, COLOR_YUV2GRAY_YUYV); //covert from YUV to GRAY
Mat roi(gray, Rect(80, 0, 240, 240));
threshold(roi, roi, 90, 255, THRESH_BINARY);
resize(roi, roi, Size(INPUT_WIDTH, INPUT_HEIGHT));
for(int i = 0; i &lt; 784; i++){
data_in[i] = 1 - (float)roi.data[i] / 255;
}
TPrecision *prediction;
TPrecision *input_img;
TsInt i;
input_img = data_in;
prediction = (TPrecision*) (intptr_t) dnn_compute( input_img);
// Drawing
rectangle(pic, Rect(0, 0, 80, 240), white, FILLED);
rectangle(pic, Rect(80, 0, 240, 240), red, 2);
Mat roi2;
cvtColor(roi, roi2, COLOR_GRAY2BGR);
paste(pic, roi2, 5, 5, roi2.rows, roi2.cols);
rectangle(pic, Rect(4, 4, 30, 30), red, 1);
int max_index = max_array(prediction, 10);
for(i = 0;i &lt; 10;i++){
Serial.print(i); Serial.print(&#34;:&#34;);
Serial.println(prediction[i]);
stringstream ss;
ss &lt;&lt; i;
if(max_index == i){
putText(pic, ss.str(), Point(0, 20 * i + 50), FONT_HERSHEY_SCRIPT_SIMPLEX, 0.5, pink, 1);
rectangle(pic, Rect(20, 20 * i + 40, prediction[i] * 80, 10), pink, FILLED);
} else {
putText(pic, ss.str(), Point(0, 20 * i + 50), FONT_HERSHEY_SCRIPT_SIMPLEX, 0.5, black, 1);
rectangle(pic, Rect(20, 20 * i + 40, prediction[i] * 80, 10), blue, FILLED);
}
}
size_t jpegSize = camera.createJpeg(320, 240, pic.data,
Camera::FORMAT_RGB888);
display_app.SendJpeg(camera.getJpegAdr(), jpegSize);
delay(10);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;これまでの手順と同様、書き込んでみましょう。&lt;/p&gt;
&lt;h2 id=&#34;手書き数字の認識を試してみる&#34;&gt;手書き数字の認識を試してみる&lt;/h2&gt;
&lt;p&gt;USBケーブルを外側につけかえ、試してみます。&lt;/p&gt;
&lt;h3 id=&#34;displayappで表示&#34;&gt;displayAppで表示&lt;/h3&gt;
&lt;p&gt;紙に書く文字は、マッキーペンなどで太くハッキリと書いてみてください。&lt;/p&gt;
&lt;p&gt;カメラに数字を映すと……&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/233/result.gif&#34; alt=&#34;demo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数字を推論してくれます。お疲れ様でした！&lt;/p&gt;
&lt;h3 id=&#34;シリアルモニタで表示&#34;&gt;シリアルモニタで表示&lt;/h3&gt;
&lt;p&gt;GR-LYCHEEで実行されている内容を、シリアル通信を介してPCで確認してみます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;macの方-2&#34;&gt;■Macの方&lt;/h4&gt;
&lt;p&gt;下記コマンドを実行し、USB接続されている場所を調べます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls /dev/tty.usb*
/dev/tty.usbmodem~~~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続されている場所をコピーし、下記コマンドで接続します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ screen /dev/tty.usbmodem~~~~ 9600
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;windowsの方-3&#34;&gt;■Windowsの方&lt;/h4&gt;
&lt;p&gt;「TeraTerm」というシリアル通信対応のソフトをダウンロード＆インストールします。「Arduino IDE」がインストールされている方は、そちらでも確認できます。&lt;/p&gt;
&lt;p&gt;下記リンクを参考に、TeraTermを起動しシリアル接続します。&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://www.j-oosk.com/teraterm/serial/346/&#34;&gt;Tera Termでシリアル接続を行う手順&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考情報&#34;&gt;参考情報&lt;/h2&gt;
&lt;p&gt;がじぇるねさんのページでは、その他のGR-LYCHEEチュートリアルも紹介されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gadget.renesas.com/ja/product/lychee_sp/4.html&#34;&gt;Webカメラにしてみよう!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gadget.renesas.com/ja/product/lychee_sp/5.html&#34;&gt;Bluetoothでスマホとつなげよう!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gadget.renesas.com/ja/product/lychee_sp/8.html&#34;&gt;OpenCTの応用 輪郭検出、HSV色空間&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ぜひ試してみてください！&lt;/p&gt;
&lt;style&gt;
.caution {
border: 1px solid #BFBFBF;
padding: 1em 2em;
margin: 2em 0;
color: #474747;
background: whitesmoke;/*背景色*/
border-left: double 7px #0B0B61;/*左線*/
font-size: 90%;
}
.caution &gt; p {
font-weight: bold;
margin: 0 0 10px 0;
padding: 0;
}
blockquote {
font-size:80%;
}
.accbox {
margin: 2em 0;
padding: 0;
max-width: 710px;
}
.accbox label {
display: block;
margin: 1.5px 0;
padding : 11px 12px;
color :#ffffff;
font-weight: bold;
background :#2f2f2f;
cursor :pointer;
transition: all 0.5s;
}
.accbox label:hover {
background :#A4A4A4;
}
.accbox input {
display: none;
}
.accbox .accshow {
height: 0;
padding: 0;
overflow: hidden;
opacity: 0;
transition: 0.8s;
}
.cssacc:checked + .accshow {
height: auto;
padding: 5px;
background: #eaeaea;
opacity: 1;
}
&lt;/style&gt;</description></item><item><title>【ハンズオン資料】NefryBTでハジメテノIoT開発やってみよう！</title><link>https://dotstud.io/blog/handson-nefry-ma-kanazawa/</link><pubDate>Thu, 01 Nov 2018 10:07:13 +0900</pubDate><guid>https://dotstud.io/blog/handson-nefry-ma-kanazawa/</guid><description>
&lt;p&gt;この記事は11/1の&lt;a href=&#34;https://mashupawards.connpass.com/event/103791/&#34;&gt;ハジメテノIoTハンズオン&lt;/a&gt;向け資料です。記事を読んで試せる内容になっているので、終了後や参加されていない方もぜひ試してみてください！&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■ハンズオンの進行について&lt;/p&gt;
ハンズオンはこのページに沿って進めます。進められる方は、どんどん進めていきましょう！リンクは別タブや別ウィンドウで開くのがオススメです。
&lt;/section&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■Nefry BTドキュメントについて&lt;/p&gt;
&lt;a href=&#34;https://dotstud.io/docs/nefrybt/&#34;&gt;Nefry BTドキュメント&lt;/a&gt;: NefryBTの使い方に関するドキュメントページです。基本の動作や、調べ方、質問できる場所なども案内しています。
&lt;/section&gt;
&lt;h2 id=&#34;今回やってみること&#34;&gt;今回やってみること&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;湿度が高くなると自分のLINEに通知がくる仕組み&lt;/strong&gt;を、Nefry BT、温湿度センサ、IFTTTというWebサービスを使って作ってみます。室内の状態が異常になったときに通知する仕組みのようなイメージです。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/architecture.png&#34; alt=&#34;architecture&#34;&gt;
&lt;/center&gt;
&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;
&lt;h4 id=&#34;nefry-bt-ディスプレイ&#34;&gt;■Nefry BT＆ディスプレイ&lt;/h4&gt;
&lt;p&gt;Nefry BTは「ESP-WROOM-32」というWi-Fi・BLE通信モジュールを搭載した、Arduinoと同じように開発できるマイコンボードです。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/nefry.png&#34; alt=&#34;nefry&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/grove/&#34;&gt;Grove&lt;/a&gt;という刺すだけで配線できるモジュール対応のコネクタを搭載していて、&lt;strong&gt;ハードウェアをあまり意識せず&lt;/strong&gt;に開発できます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;grove-温湿度センサ&#34;&gt;■Grove 温湿度センサ&lt;/h4&gt;
&lt;p&gt;刺すだけで配線できる&lt;a href=&#34;https://dotstud.io/docs/grove/&#34;&gt;Grove&lt;/a&gt;シリーズの、温度と湿度を取得できるセンサです。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/motion_sensor.png&#34; alt=&#34;motion_sensor&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;安価で扱いやすいセンサですが、高い精度や細かいデータの取得には向きません。プロトタイプ向きなセンサです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-ide&#34;&gt;■Arduino IDE&lt;/h4&gt;
&lt;p&gt;開発（プログラムの書き込み）には&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;Arduino IDE&lt;/a&gt;というフリーソフトウェアを利用します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;こちら&lt;/a&gt;の手順を見ながらご自身のPCにインストールしてください。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-ide-1&#34;&gt;■Arduino IDE&lt;/h4&gt;
&lt;p&gt;開発（プログラムの書き込み）には&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;Arduino IDE&lt;/a&gt;というフリーソフトウェアを利用します。&lt;/p&gt;
&lt;p&gt;まだインストールしていない方は、&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;こちら&lt;/a&gt;の手順を見ながら進めてください。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;iftttアカウント&#34;&gt;■IFTTTアカウント&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt;（いふと）は、モノとWebやWebサービス同士を簡単に連携できるサービスです。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/ifttt.png&#34; alt=&#34;ifttt&#34;&gt;
&lt;/center&gt;
&lt;p&gt;他の人が作ったアプレット（連携レシピ）を使ったり、自分で新たに作成したりできます。Nefry BTでは、簡単にIFTTT連携できるツールを用意しています。&lt;/p&gt;
&lt;p&gt;ページトップの「&lt;strong&gt;Sign Up&lt;/strong&gt;」からアカウントをご作成ください。&lt;/p&gt;
&lt;h2 id=&#34;事前準備-セットアップ&#34;&gt;事前準備（セットアップ）&lt;/h2&gt;
&lt;h3 id=&#34;nefry-btのwi-fi設定&#34;&gt;Nefry BTのWi-Fi設定&lt;/h3&gt;
&lt;p&gt;まずはNefry BTがインターネットにつながるよう、会場のWi-Fi情報をNefry BTに教えてあげます。スマホやPCを使う時と同じですね。&lt;/p&gt;
&lt;p&gt;Nefry BTとPCを直接通信させ（アドホックモード）、立ち上がるNefryポータル（設定ウィンドウ）からSSIDとパスワードを入力する手順です。&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■Nefry BTが接続できるWi-Fi&lt;/p&gt;
Nefry BTが接続できるWi-Fiは2.5GHz帯のWi-Fiのみです。新しい5GHz帯は利用できません（ほとんどのIoT機器が同様）。接続後にブラウザで再度ログインの必要なWi-Fiも、利用できません。
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ディスプレイを取り付け電源を入れる&#34;&gt;■ディスプレイを取り付け電源を入れる&lt;/h4&gt;
&lt;p&gt;Nefry BTにディスプレイを取り付けます。4本の足をNefryの4本のピンソケットにさします。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/display2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;このような形でささります。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/display3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Nefry BTに、PCやモバイルバッテリーなどから給電を開始します。ディスプレイに表示荒れる「NefryBT-XXXX」という部分が、&lt;strong&gt;ご自身のNefry BTが出す無線の名称&lt;/strong&gt;になります。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/nefry.png&#34; alt=&#34;nefry&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;pcをnefry-btの無線に接続する&#34;&gt;■PCをNefry BTの無線に接続する&lt;/h4&gt;
&lt;p&gt;PCのWi-Fi接続設定から、ディスプレイに表示されている「NefryBT-XXXX」という無線を選び接続します。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/nefry_wifi.png&#34; alt=&#34;&#34; /&gt;
セットアップ中PCはインターネットに繋がらなくなるので、この説明ページは開いたまま進めるのがオススメです。&lt;/p&gt;
&lt;p&gt;ちなみにSSIDは自由に変更することができます。（参照：&lt;a href=&#34;https://dotstud.io/docs/nefrybt-conv-change-ssid/&#34;&gt;SSIDを変更する&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;nefryポータルで設定する&#34;&gt;■Nefryポータルで設定する&lt;/h4&gt;
&lt;p&gt;Nefry BTのWi-Fiに接続すると、自動でNefryポータルのウィンドウが立ち上がります（立ち上がらない場合はブラウザで&lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt; にアクセスします）。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/setup_page.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;「お探しのページは…」と表示された場合は、「Move to main page」を洗濯してください。「Setup WiFi」をクリックし、利用するWi-FiのSSIDとパスワードを入力して「Save」で保存します。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/setup_wifi.png&#34; alt=&#34;&#34; /&gt;
保存すると、Nefry BTは自動で再起動します。緑の点滅が終了し再起動が完了したら、Wi-Fiのセットアップは完了です。&lt;/p&gt;
&lt;p&gt;一度設定したら、同じWi-Fiを使っている間は起動するだけで接続されます。Wi-Fi情報は5つまで保存でき、消去もできます。&lt;/p&gt;
&lt;h3 id=&#34;開発環境-arduino-ide-にボードを追加&#34;&gt;開発環境（Arduino IDE）にボードを追加&lt;/h3&gt;
&lt;p&gt;Nefty BTの開発にはフリーソフトウェアの&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;Arduino IDE&lt;/a&gt;を利用します。インストールがまだの方は「&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;Arduino IDEのインストール&lt;/a&gt;」を見ながら進めてください。&lt;/p&gt;
&lt;p&gt;Arduino IDEには、Nefry BTのボード情報の追加が必要です。「&lt;a href=&#34;https://dotstud.io/docs/nefrybt-setup-arduino-ide/&#34;&gt;環境構築（Arduino IDE）&lt;/a&gt;」を見ながら追加してください。&lt;/p&gt;
&lt;h2 id=&#34;はじめてのプログラムを書き込んでみる&#34;&gt;はじめてのプログラムを書き込んでみる&lt;/h2&gt;
&lt;p&gt;まずはNefry BTに簡単なプログラムを書き込んでみましょう。Nefry BTは、最初から下記の機能が搭載されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内蔵フルカラーLED&lt;/li&gt;
&lt;li&gt;スイッチ（SW/RST）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nefry-btを起動&#34;&gt;Nefry BTを起動&lt;/h3&gt;
&lt;p&gt;一度Nefry BTを電源から外し、ディスプレイを外します（内蔵LEDが隠れてしまうため）。マイコンボードに配線する時は、&lt;strong&gt;常に電源OFFの状態で操作&lt;/strong&gt;してください。&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/222/off.png&#34; alt=&#34;off&#34;&gt;
&lt;/center&gt;
マイコンボードは基本的に、給電によって電源のON/OFFを制御します。再起動時には最後に書き込んだプログラムが実行されます。プログラムは書き込むたびに上書きされます。&lt;/p&gt;
&lt;p&gt;再度給電します。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/222/on.png&#34; alt=&#34;on&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;緑色のLEDが点滅したあと、ランダムに光ります。&lt;/p&gt;
&lt;h3 id=&#34;まずはlチカ&#34;&gt;まずはLチカ&lt;/h3&gt;
&lt;p&gt;最初のプログラムとして、Lチカをやってみます。LEDチカチカの略で、入門向けのプログラムとして汎用的に紹介されています。&lt;/p&gt;
&lt;p&gt;簡単なプログラムを書き込むことで、ボードが正常に動くか試す際に利用することも多いです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-ideでプログラムを書く&#34;&gt;■Arduino IDEでプログラムを書く&lt;/h4&gt;
&lt;p&gt;Arduino IDEを立ち上げ、メニューから&lt;strong&gt;&lt;code&gt;ファイル &amp;gt; 新規ファイル&lt;/code&gt;&lt;/strong&gt;を選択します。下記のような画面が開きます。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/ide.png&#34; alt=&#34;ide&#34;&gt;
&lt;/center&gt;
&lt;p&gt;エディタ部分に、下記のプログラムをコピーして貼り付けましょう（行番号までコピーしてしまわないようご注意ください）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
void setup() {
}
void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下記でプログラムの内容を解説しています。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ボードを選択&#34;&gt;■ボードを選択&lt;/h4&gt;
&lt;p&gt;メニューの&lt;strong&gt;&lt;code&gt;ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code&gt;&lt;/strong&gt;を選択します。この際、ボードは使っているリビジョンに合わせて選択してください。（参照：&lt;a href=&#34;https://dotstud.io/docs/nefrybt-setup-revision/&#34;&gt;リビジョンを確認&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;例えば、使っている基板がR3の場合は&lt;strong&gt;&lt;code&gt;ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code&gt;&lt;/strong&gt;を選択します（ハンズオンでは全てR3を使用しています）。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/select_board.png&#34; alt=&#34;select_board&#34;&gt;
&lt;/center&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/select_board2.png&#34; alt=&#34;select_board2&#34;&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;シリアルポートを選択&#34;&gt;■シリアルポートを選択&lt;/h4&gt;
&lt;p&gt;Nefry BTをPCのUSBポートにさします。プログラムはこのポートを介して、シリアル通信でNefry BTに流し込まれます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/power_supply.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Macの場合は、メニューの&lt;strong&gt;&lt;code&gt;ツール &amp;gt; シリアルポート &amp;gt; /dev/cu.usbserial-xxxxxx&lt;/code&gt;&lt;/strong&gt;を選択します。環境によっては&lt;strong&gt;&lt;code&gt;/dev/tty.usbserial-xxxxxx&lt;/code&gt;&lt;/strong&gt;などの場合もあります。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/select_port.png&#34; alt=&#34;select_port&#34;&gt;
&lt;/center&gt;
&lt;p&gt;Windowsの場合は、&lt;strong&gt;&lt;code&gt;ツール &amp;gt; シリアルポート &amp;gt; /dev/COM-XX&lt;/code&gt;&lt;/strong&gt;を選択します。&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;2&#34;&gt;
※Nefry BTを抜き差しすると、シリアルポートの選択が解除される場合があります。適宜確認しましょう。
&lt;/font&gt;&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■シリアルポートが選択できない方&lt;/p&gt;
USBドライバのインストールが必要な場合があります。「&lt;a href=&#34;https://dotstud.io/docs/nefrybt-error-faq/#arduino-ideでシリアルポートが見つからない-書き込めない&#34;&gt;Arduino IDEでシリアルポートが見つからない・書き込めない&lt;/a&gt;」を参照して、USBを認識させるためのドライバをインストールしてください。また、Arduino IDEの再起動やUSBの抜き差しで認識する場合があります。
&lt;/section&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■PCにUSB接続できない方&lt;/p&gt;
セキュリティやポートの問題でPCにUSB接続できない方は、&lt;a href=&#34;https://dotstud.io/docs/nefrybt-program-zip/&#34;&gt;Wi-Fi経由でプログラムのアップロード&lt;/a&gt;が可能です。その場合、下記の書き込み手順は不要です。給電はコンセントやモバイルバッテリーから直接行ってください。
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;名前をつけて保存&#34;&gt;■名前をつけて保存&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ファイル&amp;gt;名前をつけて保存&lt;/code&gt;&lt;/strong&gt;を選択して保存します。「NefryLedBlink」など、後からみてわかりやすい名前がオススメです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;プログラムを書き込む&#34;&gt;■プログラムを書き込む&lt;/h4&gt;
&lt;p&gt;「✔️」を押してプログラムをコンパイルします。コンパイルとは、プログラムを機械が理解できる（人間には読みづらい）形式に変換することです。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/compile.png&#34; alt=&#34;compile&#34;&gt;
&lt;/center&gt;
この手順は省略しても大丈夫ですが、シンタックス（文法）チェックをしてくれるので実施するのがオススメです。&lt;/p&gt;
&lt;p&gt;左上の「→」ボタンを押してNefry BTにプログラムを書き込みます。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/write.png&#34; alt=&#34;write&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;ESP32モジュールの特性上、書き込みに1分ほどかかります。エラーが出てしまうときは、「&lt;a href=&#34;https://dotstud.io/docs/nefrybt-error-handling-2/&#34;&gt;コンパイルは成功するのに書き込みが失敗する&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;p&gt;3分以上かかる場合、Nefry BTの不良の可能性があるので申し出てください。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;動作を確認&#34;&gt;■動作を確認&lt;/h4&gt;
&lt;p&gt;起動したら、「青いLEDが1秒ごとに光る」ことを確認しましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3.gif&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LEDがチカチカしました！&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;プログラムの解説&#34;&gt;■プログラムの解説&lt;/h4&gt;
&lt;p&gt;プログラムの要所を説明していきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;冒頭でライブラリを読み込んでいます。Nefry BTのライブラリでできることは「&lt;a href=&#34;https://dotstud.io/docs/nefrybt-liblary/&#34;&gt;Nefryのライブラリ&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void setup() {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;起動時に処理される部分です。今回はなにもしません。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;起動時に繰り返し実行する部分です。&lt;code&gt;//&lt;/code&gt;の後ろには任意のコメントを記入することができます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nefry.setLed()&lt;/code&gt;という関数で、光らせる色合いをRGBの順で指定します。始めにR=0, G=0, B=255を渡しているので、青く光ります。&lt;/p&gt;
&lt;p&gt;続いて&lt;code&gt;Nefry.ndelay()&lt;/code&gt;という関数で次の処理まで指定した時間待ちます。Arduinoでは時間はミリ秒で指定するので、1000は1秒です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nefry.setLed()&lt;/code&gt;に0, 0, 0を渡すことで、LEDはオフになります。オンとオフのあと1秒ずつ待つことで、点滅を表現しています。&lt;/p&gt;
&lt;p&gt;このように、マイコンボードは&lt;strong&gt;①起動時に行う処理&lt;/strong&gt;、&lt;strong&gt;②起動中に繰り返される処理&lt;/strong&gt;をプログラムして扱います。意外と簡単ではないですか……？&lt;/p&gt;
&lt;h3 id=&#34;スイッチを押したらlチカ&#34;&gt;スイッチを押したらLチカ&lt;/h3&gt;
&lt;h4 id=&#34;arduino-ideでプログラムを書く-1&#34;&gt;■Arduino IDEでプログラムを書く&lt;/h4&gt;
&lt;p&gt;同様の手順で新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。おさらいがてら、やってみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
void setup() {
// スイッチを有効化
Nefry.enableSW();
}
void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下記でプログラムの内容を解説しています。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;動作を確認-1&#34;&gt;■動作を確認&lt;/h4&gt;
&lt;p&gt;スイッチ（RSTではない方）を押したら、LEDが赤く光ることを確認します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/73185cad56d6374e6ad394eafbfef51d&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/73185cad56d6374e6ad394eafbfef51d.gif&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;プログラムの解説-1&#34;&gt;■プログラムの解説&lt;/h4&gt;
&lt;p&gt;プログラムの要所を説明します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void setup() {
// スイッチを有効化
Nefry.enableSW();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;起動時の処理では、&lt;code&gt;Nefry.enableSW()&lt;/code&gt;という関数でスイッチを有効化しています。マイコンボードでは、入力・出力に使うピンなどは&lt;code&gt;setup()&lt;/code&gt;関数内で有効化します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0);//色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;if(){}&lt;/code&gt;という条件式で、なにか動作させたいときの条件を決めます。&lt;code&gt;Nefry.readSW()&lt;/code&gt;でスイッチが押されたことを取得し、スイッチが押されたら&lt;code&gt;{}&lt;/code&gt;内を実行します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt;内ではLEDを赤く光らせ、1秒間待つ処理をしています。1秒後はまた&lt;code&gt;void loop()&lt;/code&gt;内を実行し、スイッチが押されているかどうか判定します。&lt;/p&gt;
&lt;p&gt;スイッチが押されている以外のときは、青色のLEDを光らせます。&lt;/p&gt;
&lt;h2 id=&#34;オフラインでgroveセンサを試す&#34;&gt;オフラインでGroveセンサを試す&lt;/h2&gt;
&lt;p&gt;次は、配線してセンサのデータを取得してみます。&lt;strong&gt;まずはインターネットに繋がらない電子工作&lt;/strong&gt;、です。&lt;/p&gt;
&lt;p&gt;エラーの切り分け（どこでエラーが起こっているか）を特定するために、自分で開発するときもステップバイステップでできているか確認しつつ進めるのがオススメです。&lt;/p&gt;
&lt;h3 id=&#34;grove-温湿度センサを接続&#34;&gt;Grove 温湿度センサを接続&lt;/h3&gt;
&lt;p&gt;Groveは刺すだけで配線できるのでGNDや信号線などの確認は必要ありませんが、デジタル・アナログ・I2Cなどの通信方法はGroveモジュールによって違います。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/seeed_wiki.png&#34; alt=&#34;seeed_wiki&#34;&gt;
&lt;/center&gt;
&lt;p&gt;通信方式は温湿度センサの製造元・SeeedStudioの&lt;a href=&#34;http://wiki.seeedstudio.com/Grove-TemperatureAndHumidity_Sensor/&#34;&gt;Wikiページ&lt;/a&gt;を見て確認しましょう。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/connect.png&#34; alt=&#34;connect&#34;&gt;
&lt;/center&gt;
&lt;p&gt;今回は「A0」というソケットに差し込みます。少し硬いですが、カチッと言うまで押し込めます。&lt;strong&gt;配線作業は常に電源オフの状態&lt;/strong&gt; で行います。&lt;/p&gt;
&lt;h3 id=&#34;温湿度センサを扱うライブラリを読み込む&#34;&gt;温湿度センサを扱うライブラリを読み込む&lt;/h3&gt;
&lt;p&gt;温湿度センサを扱うためのライブラリ（※）を追加でダウンロードします。リンク先のページで「Clone or Download」から「Download ZIP」を選択します（2つのページから両方ダウンロードしてください）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adafruit/DHT-sensor-library&#34;&gt;https://github.com/adafruit/DHT-sensor-library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_Sensor&#34;&gt;https://github.com/adafruit/Adafruit_Sensor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/download.png&#34; alt=&#34;download&#34;&gt;
&lt;/center&gt;
&lt;p&gt;Arduino IDEの&lt;strong&gt;&lt;code&gt;スケッチ &amp;gt; ライブラリをインクルード &amp;gt; .ZIP形式のライブラリをインストール&lt;/code&gt;&lt;/strong&gt;から、ダウンロードされたZIPファイルを2つとも追加して完了です。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/library.png&#34; alt=&#34;library&#34;&gt;
&lt;/center&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■ライブラリとは&lt;/p&gt;
センサや外部サービスを使うために、あらかじめプログラムを書きパッケージ化したものです。既に誰かが作ってくれているものを取り込んだり、自作したりできます。
&lt;/section&gt;
&lt;h3 id=&#34;プログラムを書き込む-1&#34;&gt;プログラムを書き込む&lt;/h3&gt;
&lt;p&gt;新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。書き込み手順は、上記の「&lt;a href=&#34;#まずはLチカ&#34;&gt;まずはLチカ&lt;/a&gt;」を参照してくださいね。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
#define DHTPIN A0
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
void setup() {
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
dht.begin();
}
void loop() {
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
if (isnan(h) || isnan(t)) {
Nefry.println(&amp;quot;読み取りに失敗しました…&amp;quot;);
return;
}
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
}
if (t &amp;gt; 30) {
Nefry.println(&amp;quot;すっごく部屋が暑いよ！&amp;quot;);
}
Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;動作を確認-2&#34;&gt;動作を確認&lt;/h3&gt;
&lt;p&gt;メニューの&lt;strong&gt;&lt;code&gt;ツール&amp;gt;シリアルモニタ&lt;/code&gt;&lt;/strong&gt; を選択して開きます。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/serial_monitor.png&#34; alt=&#34;serial_monitor&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;右下のbps設定を「115200bps」に変更します。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/bps.png&#34; alt=&#34;bps&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;2秒ごとに、シリアルモニタに温度と湿度が表示されて行きます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/1d912b8d68ca7b63eb0c991c262d83f0&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/1d912b8d68ca7b63eb0c991c262d83f0.gif&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;あまり動きがないですが、息を吹きかけると湿度が上がることを確認できます。湿度や温度が上がるとアラートメッセージが出ることを確認できたでしょうか？&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;プログラムの解説-2&#34;&gt;■プログラムの解説&lt;/h4&gt;
&lt;p&gt;プログラムの要所を解説します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ライブラリの読み込み部分です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define DHTPIN A0
#define DHTTYPE DHT11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;#define&lt;/code&gt;で、配線したピンの場所を定義しています。「DHTPIN」という名前の箱に「A0」という値を入れているイメージです。&lt;/p&gt;
&lt;p&gt;こうしておくことで、あとでピンの場所を変えても、ここの値だけ変更すればOKになります。DHTTYPEの値はWikiを参考に入れているだけなので、覚えなくて大丈夫です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void setup()
{
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
dht.begin();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;setup関数内ではセンサの読み込みの開始と、シリアルモニタへの表示メッセージを指定しています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop()
{
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
// 省略
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;loop関数では、まず2秒ごとにループすることを指定しています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dht&lt;/code&gt;関数で湿度と温度の値を読み取っていて、値を&lt;code&gt;h&lt;/code&gt;と&lt;code&gt;t&lt;/code&gt;という変数にそれぞれ入れています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop()
{
// 省略
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
}
if (t &amp;gt; 30) {
Nefry.println(&amp;quot;すっごく部屋が暑いよ！&amp;quot;);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;if() {}&lt;/code&gt; の条件式で、湿度が70を超えた時、温度が30を超えたときの処理をそれぞれ指定しています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;それ以外のときは温度・湿度を表示させます。&lt;/p&gt;
&lt;h2 id=&#34;webサービスと連携してみる&#34;&gt;Webサービスと連携してみる&lt;/h2&gt;
&lt;p&gt;それでは、湿度が70％を超えたら自分のメールやチャットに通知がくるようにしてみましょう。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/ifttt_action.png&#34; alt=&#34;ifttt_action&#34;&gt;
&lt;/center&gt;
&lt;p&gt;&lt;a href=&#34;https://ifttt.com/discover&#34;&gt;IFTTT&lt;/a&gt;で提供されているサービスであれば、LINE、メール、SMS、Twitter、Facebookなどなど、自由に通知先を設定することができます。この記事では、例としてLINEへの通知方法を紹介します。&lt;/p&gt;
&lt;p&gt;余裕のある方は好きな通知先を選択してみてください！&lt;/p&gt;
&lt;h3 id=&#34;iftttにアプレットを作成&#34;&gt;IFTTTにアプレットを作成&lt;/h3&gt;
&lt;p&gt;まずはIFTTTにアプレット（レシピ）を作成します。IFTTTのアカウントを持っていない場合はアカウント取得から進めてください。&lt;/p&gt;
&lt;p&gt;IFTTTのアプレットは「〇〇が起きたら△△する」というようにトリガー（〇〇）とアクション（△△）に分けられます。&lt;/p&gt;
&lt;p&gt;今回は自作のサービスを利用できる「Webhooks」という機能を使い、「Webhooksを受け取ったらLINEに通知する」というアプレットを作ってみます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;トリガーの作成&#34;&gt;■トリガーの作成&lt;/h4&gt;
&lt;p&gt;IFTTTの&lt;a href=&#34;https://ifttt.com/create&#34;&gt;アプレット作成ページ&lt;/a&gt;から「+this」部分をクリックし、トリガーの作成をします。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/1.png&#34; alt=&#34;1&#34;&gt;
&lt;/center&gt;
&lt;p&gt;「Webhooks」を検索しましょう。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/2.png&#34; alt=&#34;2&#34;&gt;
&lt;/center&gt;
&lt;p&gt;「Receive a web request」を選択します。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/3.png&#34; alt=&#34;3&#34;&gt;
&lt;/center&gt;
&lt;p&gt;任意のイベント名をつけます。後ほどNefry BTにも登録するのでメモ帳などにコピーしておきましょう（大文字・小文字の区別があるのでコピー＆ペーストがオススメです）。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/4.png&#34; alt=&#34;4&#34;&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;アクションの作成&#34;&gt;■アクションの作成&lt;/h4&gt;
&lt;p&gt;続いてアクションを作成します。「+that」から進めましょう。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/5.png&#34; alt=&#34;5&#34;&gt;
&lt;/center&gt;
&lt;p&gt;Nefry BTからの送信を受け取ったら実行したいWebサービスを自由に選びます。今回はサンプルとしてLINEを連携してみますが、Twitter、Slack、Gmail、Googleカレンダー、Facebookなどなど、たぶん思いつく有名Webサービスはだいたいあります。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/6.png&#34; alt=&#34;6&#34;&gt;
&lt;/center&gt;
&lt;p&gt;起こしたいアクションを選びます。LINEは「メッセージを送る」機能のみですが、サービスによってはさまざまなアクションが起こせます。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/7.png&#34; alt=&#34;7&#34;&gt;
&lt;/center&gt;
&lt;p&gt;クリックすると、初回はアカウント認証を求められる気がします。LINEのログインメールアドレスがわからない、という方は、スマホのLINEアプリの設定から確認できます（&lt;strong&gt;&lt;code&gt;友だちタブ &amp;gt; 設定（歯車）ボタン &amp;gt; アカウント&amp;gt;メールアドレス・パスワード&lt;/code&gt;&lt;/strong&gt;）。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/8.png&#34; alt=&#34;8&#34;&gt;
&lt;/center&gt;
&lt;p&gt;メッセージを送るルーム、メッセージ内容を設定します。「1:1で〜」を選択すると自分個人宛てにメッセージが届きます。メッセージは「LINE Notify」というアカウントから送られる仕組みです。&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/9.png&#34; alt=&#34;9&#34;&gt;
&lt;/center&gt;
通知先は自分個人の他に、グループも選択できます。&lt;/p&gt;
&lt;p&gt;メッセージを自由に作成します。Nefry BTから値を送信し受け取りたい場合は、「Add Ingredient」から&lt;code&gt;Value1&lt;/code&gt;を選択します。下記のような場合は、NefryBT側のプログラムで1つ目の値に湿度を送るよう設定します。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/10.png&#34; alt=&#34;10&#34;&gt;
&lt;/center&gt;
&lt;p&gt;このような感じで設定したら、「Create action」で作成します。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/11.png&#34; alt=&#34;11&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;最終確認がされるので「Finish」で登録しましょう。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/12.png&#34; alt=&#34;12&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;webhooksのsecretkeyを取得&#34;&gt;■WebhooksのSecretKeyを取得&lt;/h4&gt;
&lt;p&gt;Nefry BTとWebhooksと紐付けるための「Secret Key」を取得します。パスワードのようなものです。上部の検索欄からWebhooksを検索しましょう。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/13.png&#34; alt=&#34;13&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;Webhooksのページに移動します（初回は認証画面が表示されるので「Connect」で開始しましょう）。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/14.png&#34; alt=&#34;14&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;右上の「Setting」に移動します。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/15.png&#34; alt=&#34;15&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;「URL」の末尾に自身のSecret Keyが記載されているのでコピーし、メモしておきます。このKeyは漏れると他人が自分にLINEを送れるようになってしまうので、&lt;strong&gt;Web上に公開しないよう注意&lt;/strong&gt;してください。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/16.png&#34; alt=&#34;16&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;h3 id=&#34;プログラムを書き込む-2&#34;&gt;プログラムを書き込む&lt;/h3&gt;
&lt;h4 id=&#34;プログラム&#34;&gt;■プログラム&lt;/h4&gt;
&lt;p&gt;以下のプログラムをNefry BTに書き込みます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;NefryIFTTT.h&amp;gt;
#define DHTPIN A0
#define DHTTYPE DHT11
String Event, SecretKey;
DHT dht(DHTPIN, DHTTYPE);
void setup() {
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;, 0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;, 1);
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
dht.begin();
}
void loop() {
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
if (isnan(h) || isnan(t)) {
Nefry.println(&amp;quot;読み取りに失敗しました…&amp;quot;);
return;
}
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
bool sendData = IFTTT.send(Event, SecretKey, (String)h);
if (!sendData) { //IFTTTにデータ送信が成功したかの判定
Nefry.setLed(255, 0, 0); //エラーの時、赤色点灯
delay(3000);
} else {
Nefry.setLed(0, 255, 0); //成功の時、緑色点灯
delay(3000);
}
Nefry.ndelay(1000 * 30);
}
Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nefry-btにiftttのアカウント情報を設定&#34;&gt;Nefry BTにIFTTTのアカウント情報を設定&lt;/h3&gt;
&lt;p&gt;Nefry BTにディスプレイを取り付けてから起動し、表示されているIPアドレスにアクセスします（画像の場合は&lt;code&gt;http://192.168.4.1/&lt;/code&gt;。人によって違います。 ）。
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/ip.png&#34; alt=&#34;ip&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;「Data Store」に移動します。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/ifttt_setup1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;先ほど取得したWebhooksの「Secret Key」と「Event Name」をそれぞれ入力し保存します。Event Nameは大文字・小文字の区別があります。&lt;/p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/console.png&#34; alt=&#34;console&#34;&gt;
&lt;/center&gt;
&lt;p&gt;「Save」で保存するとNefry BTが再起動し、準備は完了です。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&#34;動作を確認-3&#34;&gt;動作を確認&lt;/h3&gt;
&lt;p&gt;さっそく完成したものを動かしてみましょう。&lt;/p&gt;
&lt;p&gt;湿度の値が高くなると……&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/bd6a5ae77bc93459b3c602d82fb00faa&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/bd6a5ae77bc93459b3c602d82fb00faa.gif&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINEに通知されました！&lt;/p&gt;
&lt;p&gt;お疲れ様でした〜！&lt;/p&gt;
&lt;h3 id=&#34;プログラムの解説-3&#34;&gt;プログラムの解説&lt;/h3&gt;
&lt;p&gt;要所を説明します。大事なところはちょっとだけです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void setup() {
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;, 0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;, 1);
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Nefry.setStoreTitle({タイトル}, {チャンネル番号})&lt;/code&gt;関数を使い、Nefry BTのDataStore機能に場所を作っています。この値はNefryポータル側から入力でき、変更があってもプログラムを書き換える必要はありません。&lt;/p&gt;
&lt;p&gt;また値を&lt;code&gt;getStoreStr({チャンネル番号})&lt;/code&gt;で、ポータル側で設定した値を受け取っています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop() {
// 省略
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
bool sendData = IFTTT.send(Event, SecretKey, (String)h);
if (!sendData) { //IFTTTにデータ送信が成功したかの判定
Nefry.setLed(255, 0, 0); //エラーの時、赤色点灯
delay(3000);
} else {
Nefry.setLed(0, 255, 0); //成功の時、緑色点灯
delay(3000);
}
Nefry.ndelay(1000 * 30);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先ほど同様湿度が70%を超えたとき、という条件文を作っています。&lt;code&gt;IFTTT.send()&lt;/code&gt;関数を使い、もし送れなかったときは赤いLEDを光らせるという処理をしています（&lt;code&gt;!&lt;/code&gt;は&lt;code&gt;!==&lt;/code&gt;と同義で、&lt;code&gt;FALSE&lt;/code&gt;が返ったときに実行されます）。&lt;/p&gt;
&lt;p&gt;何度も連続して通知が来るとウザいので、一度送ったあとは30秒（1000ミリ秒×30）待ちます。場合によっては30分待つ、1日待つ、などに変更します。&lt;/p&gt;
&lt;h2 id=&#34;応用-いろいろなセンサを試してみる&#34;&gt;応用: いろいろなセンサを試してみる&lt;/h2&gt;
&lt;p&gt;刺すだけで配線できるGroveモジュールは100種類以上あり、いろいろなデータを手軽に扱うことができます。下記ではモジュールと利用例を紹介します。&lt;/p&gt;
&lt;h3 id=&#34;磁気スイッチ&#34;&gt;磁気スイッチ&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/magnetic.png&#34; alt=&#34;magnetic&#34;&gt;
&lt;/center&gt;
磁石がくっついているか否か、を検知するセンサです。ドアの開閉検知によく使われ、市販の開閉検知装置も磁気センサを使っていることが多いです。&lt;/p&gt;
&lt;p&gt;ドアが閉まっているときは磁石とセンサが接着、開いたときは離れるように設置することで開閉を検知できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例: 開閉検知&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1806/26/news001.html&#34;&gt;磁気スイッチを使ってポストの開閉をメールで通知&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;人感センサ&#34;&gt;人感センサ&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/pir.png&#34; alt=&#34;pir&#34;&gt;
&lt;/center&gt;
人が近くにいることを検知するセンサです。防犯用の近づくと光るなどに使われます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例: 防犯灯&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://dotstud.io/blog/nefrybt-handson-pir-linebot/&#34;&gt;Nefry BTと人感センサで防犯LINE BOTを作ってみよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;光センサ&#34;&gt;光センサ&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/luminance.png&#34; alt=&#34;luminance&#34;&gt;
&lt;/center&gt;
照度（光の度合い）を検知します。暗くなったら明かりをつける仕組みや、異常のときに光るパトランプの近くに起き通知するなど、異常検知にも利用できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例: 異常検知&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/n0bisuke/items/257126448cf4db482d43&#34;&gt;NefryでGrove Luminance Sensor(照度センサ)を触るメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超音波距離センサ&#34;&gt;超音波距離センサ&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/wave.png&#34; alt=&#34;wave&#34;&gt;
&lt;/center&gt;
センサからモノへの距離を測るセンサです。超音波をぶつけて跳ね返りを調べる仕組みです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/HiroyukiYasui/items/cf477e9ce83682513ab1&#34;&gt;NefryBTでGroveセンサーをつなげる時の？について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;サーボモータ&#34;&gt;サーボモータ&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/servo.png&#34; alt=&#34;servo&#34;&gt;
&lt;/center&gt;
角度を指定して回転させることができるアクチュエータです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://poche-magique.com/2018/05/06/nefrybt_grove_servo/&#34;&gt;[Nefry BTとGrove接続実験] サーボモータ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;カメラ&#34;&gt;カメラ&lt;/h3&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/camera.png&#34; alt=&#34;camera&#34;&gt;
&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;例: 機械学習で画像認識&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/nefrybt-pepper-monitoring-system/&#34;&gt;Node.jsとNefry BTで監視システムを作ろう！ for Pepper #iotlt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;関連情報&#34;&gt;関連情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dotstud.io/shop/nefry-bt-set/&#34;&gt;Nefr BTの購入&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nefry BTはこちらから購入できます（送料無料）。その他にも千石電商、ツクモ、若松通商、共立電子などの実店舗やECサイトで購入できます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dotstud.io/docs/nefrybt/&#34;&gt;Nefry BTドキュメント&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nefry BTでは、IFTTTを使ったWebサービスとの連携や、その他のクラウドサービスとの連携も簡単です。ディスプレイを使ったイラスト描画や、100以上あるGroveモジュールの活用なども、ぜひ試してみてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.facebook.com/groups/nefry&#34;&gt;Nefryユーザーグループ（FB）&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nefryユーザ同士が交流するページです。質問を投稿して解決した事例もたくさんありますので、困った際などはぜひお気軽にご利用ください。開発者もよく登場します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://nefry.connpass.com/event/97692/&#34;&gt;Nefry User Meetup!&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nefryユーザによる開催イベントです。ハンズオンやLT会、もくもく会などを実施しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dotstudio.connpass.com/&#34;&gt;dotstudioイベント&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;dotstudioによる開催イベントです。Nefry BT以外の題材を扱うことも多いです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;style&gt;
.caution {
border: 1px solid #BFBFBF;
padding: 1em 2em;
margin: 2em 0;
color: #474747;
background: whitesmoke;/*背景色*/
border-left: double 7px #0B0B61;/*左線*/
font-size: 90%;
}
.caution &gt; p {
font-weight: bold;
margin: 0 0 10px 0;
padding: 0;
}
blockquote {
font-size:80%;
}
.accbox {
margin: 2em 0;
padding: 0;
max-width: 710px;
}
.accbox label {
display: block;
margin: 1.5px 0;
padding : 11px 12px;
color :#ffffff;
font-weight: bold;
background :#2f2f2f;
cursor :pointer;
transition: all 0.5s;
}
.accbox label:hover {
background :#A4A4A4;
}
.accbox input {
display: none;
}
.accbox .accshow {
height: 0;
padding: 0;
overflow: hidden;
opacity: 0;
transition: 0.8s;
}
.cssacc:checked + .accshow {
height: auto;
padding: 5px;
background: #eaeaea;
opacity: 1;
}
&lt;/style&gt;</description></item><item><title>加速度センサとマイコン内蔵LEDで魔法の杖を作ってみた！</title><link>https://dotstud.io/blog/halloween-gadget-witch-stick/</link><pubDate>Wed, 31 Oct 2018 10:07:13 +0900</pubDate><guid>https://dotstud.io/blog/halloween-gadget-witch-stick/</guid><description>
&lt;p&gt;みなさんこんにちは。トボリです。&lt;/p&gt;
&lt;p&gt;私は電子工作が大好きで、いろいろいじったり、&lt;a href=&#34;http://toboli.hatenablog.com/&#34;&gt;ブログ&lt;/a&gt;を書いたりして暮らしています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ところで、みなさん魔法は好きですか？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;電子工作と魔法ってかなり相性いいと思うんですよ。勝手に光る、勝手に動く、勝手にしゃべる……とか！&lt;/p&gt;
&lt;p&gt;気づけばもう10月31日。そう、本日はハロウィンです！電子工作を愛し、電子工作に愛された者として、このイベントで魔法っぽいものを作りたい！！&lt;/p&gt;
&lt;p&gt;魔法といえば、そう、杖ですよね！！&lt;/p&gt;
&lt;p&gt;ということで、今回はみんなが一度は憧れたであろう、&lt;strong&gt;『魔法の杖』&lt;/strong&gt; を作ってみました！&lt;/p&gt;
&lt;h2 id=&#34;振ると光る杖-を作ることにした&#34;&gt;「振ると光る杖」を作ることにした&lt;/h2&gt;
&lt;p&gt;『魔法の杖』っていうからには、できるだけかっこいいことがしたい！
トボリも想像力だけは無駄に豊かなので、うきうきいろんな機能をイメージしました。&lt;/p&gt;
&lt;p&gt;家電を操作したり、一振りでカーテン開けられたりできたらいいなあ～！何か浮かせられたらもっとおもしろいかも……。&lt;/p&gt;
&lt;p&gt;しかし。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 200%&#34;&gt;時間と技術力は限られている！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;今のトボリの技術力でハロウィンまでに作れそうなものといえば、「振ると光る」杖です。&lt;/p&gt;
&lt;p&gt;想像よりだいぶスケールが小さくなりましたが、どんなにささやかな物でもまずは作ることが大事！
と自分に言い聞かせ、とにかく作ってみることにしました！&lt;/p&gt;
&lt;h2 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h2&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/parts.png&#34; alt=&#34;parts&#34;&gt;
&lt;/center&gt;
電子工作初心者の味方、Arduinoを使って作ろうと思います！&lt;/p&gt;
&lt;p&gt;また、なぜミニブレッドボードを使用するかというと……これを見てください！
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/breadboard.png&#34; alt=&#34;breadboard&#34;&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;p&gt;たまたま買った電池ボックスとミニブレッドボードのサイズがほぼ同じ！&lt;/p&gt;
&lt;p&gt;これを見た瞬間、絶対に使おう！と固く決意したのです。
（本当はユニバーサル基板に半田付けしてたんですが、完成間近にピンヘッダの取り付けミスが発覚し、安心安全のブレッドボードでやり直したという経緯があります。つらい。）&lt;/p&gt;
&lt;h2 id=&#34;魔法の杖を作る&#34;&gt;魔法の杖を作る&lt;/h2&gt;
&lt;p&gt;魔法の杖は、下記の3ステップで作って行きます！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;プログラムを書く&lt;/li&gt;
&lt;li&gt;ブレッドボードに回路を作る&lt;/li&gt;
&lt;li&gt;見た目をそれっぽく造形する&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;プログラムを書く&#34;&gt;プログラムを書く&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;Arduino IDE&lt;/a&gt;を使ってプログラムを書いていきます。&lt;/p&gt;
&lt;p&gt;加速度センサのサンプルプログラムと、フルカラーLEDのサンプルプログラムをただ合体しただけのお手軽コードです！&lt;/p&gt;
&lt;div class=&#34;accbox&#34;&gt;
&lt;label for=&#34;label1&#34;&gt;クリックしてコードを表示&lt;/labe&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;label1&#34; class=&#34;cssacc&#34; /&gt;
&lt;div class=&#34;accshow&#34;&gt;
&lt;pre&gt;
&lt;code class=&#34;hljs hljs-line-numbers&#34;&gt;
#include &amp;lt;Wire.h&amp;gt;
#include &amp;lt;SparkFun_MMA8452Q.h&amp;gt;
#include &amp;lt;Adafruit_NeoPixel.h&amp;gt;
#define PIN 2
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(1, PIN, NEO_GRB + NEO_KHZ800);
MMA8452Q accel;
void setup() {
Serial.begin(9600);
Serial.println(&#34;MMA8452Q Test Code!&#34;);
pixels.begin();
pixels.show();
accel.init();
}
void loop() {
if(accel.available()) {
accel.read();
printCalculatedAccels();
printOrientation();
Serial.println();
}
}
void printOrientation() {
byte pl = accel.readPL();
switch (pl) {
case PORTRAIT_U:
Serial.print(&#34;Portrait Up&#34;);
break;
case PORTRAIT_D:
Serial.print(&#34;Portrait Down&#34;);
break;
case LANDSCAPE_R:
Serial.print(&#34;Landscape Right&#34;);
rainbow(20);
break;
case LANDSCAPE_L:
Serial.print(&#34;Landscape Left&#34;);
rainbow(20);
break;
case LOCKOUT:
Serial.print(&#34;Flat&#34;);
pixels.show();
break;
}
}
void rainbow(uint8_t wait) {
uint16_t i, j;
for(j=0; j&amp;lt;256; j++) {
for(i=0; i&amp;lt;pixels.numPixels(); i++) {
pixels.setPixelColor(i, Wheel((i+j) &amp; 255));
}
pixels.show();
delay(wait);
}
}
uint32_t Wheel(byte WheelPos) {
WheelPos = 255 - WheelPos;
if(WheelPos &amp;lt; 85) {
return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
}
if(WheelPos &amp;lt; 170) {
WheelPos -= 85;
return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
}
WheelPos -= 170;
return pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ブレッドボードに回路を作る&#34;&gt;ブレッドボードに回路を作る&lt;/h3&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/fritzing.png&#34; alt=&#34;fritzing&#34;&gt;
&lt;/center&gt;
まずはブレッドボードに配線していきます！配線図はこんな感じ。&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/circuit.png&#34; alt=&#34;circuit&#34;&gt;
&lt;/center&gt;
実際に配線したものがこちらです！
LEDの部分だけ基板から離れてしまうので、後で半田付けをします。&lt;/p&gt;
&lt;p&gt;みなさん半田付けって好きですか？トボリは電子工作作業の中で半田付けが一番好きです！
半田の香りは下手なアロマより癒される気がします。&lt;/p&gt;
&lt;h3 id=&#34;見た目をそれっぽく造形する&#34;&gt;見た目をそれっぽく造形する&lt;/h3&gt;
&lt;p&gt;杖はそれっぽい形になればなんでもいいので、3Dプリンタを使える方は使ってもいいし、お好きなやり方で大丈夫です！今回は、粘土をこねて作ってみたので、参考までに材料と作り方も載せておきます！&lt;/p&gt;
&lt;h4 id=&#34;用意するもの-1&#34;&gt;■ 用意するもの&lt;/h4&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick1.png&#34; alt=&#34;stick1&#34;&gt;
&lt;/center&gt;
石粉粘土・トイレットペーパーの芯・市販のスティックを用意します。これらは全て百均で買うことができました！いい時代ですね！&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick2.png&#34; alt=&#34;stick2&#34;&gt;
&lt;/center&gt;
この市販のスティックを分解し、筒状の棒だけ取り出します。&lt;/p&gt;
&lt;h4 id=&#34;杖の形に造形する&#34;&gt;■ 杖の形に造形する&lt;/h4&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick3.png&#34; alt=&#34;stick3&#34;&gt;
&lt;/center&gt;
市販の棒とトイレットペーパーの芯をくっつけます。トイレットペーパーの芯の先に切れ込みを入れて、画像のように内側に折り込みます。トイレットペーパーの芯に棒を差し込んで、テープで固定します。&lt;/p&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick4.png&#34; alt=&#34;stick4&#34;&gt;
&lt;/center&gt;
中に基板を入れ、筒の中にLEDのワイヤーを通してから、LEDを半田付けします。&lt;/p&gt;
&lt;p&gt;動作チェックをして問題なさそうだったら、どんどん土台に石粉粘土を貼り付けていきます！少しずつ貼り付けて、時々手でなでて滑らかにしていきます。&lt;/p&gt;
&lt;p&gt;乾いたら、カッターで傷をつけ、茶色と黒のアクリル絵の具をインスピレーションに従っていい感じに塗ります。&lt;/p&gt;
&lt;h4 id=&#34;完成&#34;&gt;■ 完成！&lt;/h4&gt;
&lt;p&gt;
&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick5.png&#34; alt=&#34;stick5&#34;&gt;
&lt;/center&gt;
できた～～～！！！
どう見ても、魔法の杖！！少なくとも自分にとっては手塩にかけた最愛の杖！！&lt;/p&gt;
&lt;h2 id=&#34;魔法を発動する&#34;&gt;魔法を発動する&lt;/h2&gt;
&lt;p&gt;さっそく魔法を発動していきましょう！
左右に杖を振ると……虹色の光が出ます！やった～～！魔法っぽい！
&lt;img src=&#34;https://dotstud.io/img/blog/228/demo.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;次こそはもっとうまく作りたい-それが電子工作沼&#34;&gt;次こそはもっとうまく作りたい……それが電子工作沼&lt;/h2&gt;
&lt;p&gt;LEDとセンサーひとつですが、結構楽しいものができました！&lt;/p&gt;
&lt;p&gt;でも、やっぱり本当はこうしたい……もっとかっこいい機能搭載したい……という欲望はとめどなく溢れ、「次こそもっといいものを！」という気持ちになります。&lt;/p&gt;
&lt;p&gt;もうこうなったらズブズブですよね。&lt;b&gt;電子工作沼&lt;/b&gt;に。このハロウィンは今自分が作れる楽しいものを作りまくって、一緒に電子工作沼で溺れましょう！&lt;/p&gt;
&lt;p&gt;ではでは、トボリでした！&lt;/p&gt;
&lt;style&gt;
.accbox {
margin: 2em 0;
padding: 0;
max-width: 710px;
}
.accbox label {
display: block;
margin: 1.5px 0;
padding : 11px 12px;
color :#ffffff;
font-weight: bold;
background :#2f2f2f;
cursor :pointer;
transition: all 0.5s;
}
.accbox label:hover {
background :#A4A4A4;
}
.accbox input {
display: none;
}
.accbox .accshow {
height: 0;
padding: 0;
overflow: hidden;
opacity: 0;
transition: 0.8s;
}
.cssacc:checked + .accshow {
height: auto;
padding: 5px;
background: #eaeaea;
opacity: 1;
}
&lt;/style&gt;</description></item><item><title>macOS MojaveとiOSの連携カメラが使えない時のトラブルシューティング</title><link>https://dotstud.io/blog/macos-mojave-ios-camera/</link><pubDate>Tue, 09 Oct 2018 11:50:42 +0900</pubDate><guid>https://dotstud.io/blog/macos-mojave-ios-camera/</guid><description>
&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;先日MacのバージョンをアップグレードしてMojaveにしてみました。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;224&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/macos-mojave-update-process/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/224/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
人柱覚悟でさっそくmacOS Mojaveにしてみました。
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-09-25
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
macOS Mojaveにアップデートしてみました！人柱覚悟でしたがめちゃいい感じです。ライターや編集者など記事書く人にはオススメポイントが多いです。アップデート方法・手順も記事で紹介します。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;p&gt;Mojaveのダークモードにも慣れてきてけっこう快適なMacライフを送っています。&lt;/p&gt;
&lt;p&gt;連携カメラ機能がかなり優秀なんですけどたまに使えない時があって挙動を調べてみました。&lt;/p&gt;
&lt;h2 id=&#34;連携カメラ-continuity-camera&#34;&gt;連携カメラ（Continuity Camera）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.apple.com/jp/macos/mojave/&#34;&gt;Mojaveのサイト&lt;/a&gt;にも乗っていますがMacとiPhoneを連動させて、iPhoneで撮影した写真を即座にMacで利用することができます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/49f5868118a7d628f31bd735a9eef1ea.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;使ってみた&#34;&gt;使ってみた&lt;/h2&gt;
&lt;p&gt;デスクトップやKeynote上で右クリックを押すとiPhoneで写真を撮る選択肢が出てきます。&lt;/p&gt;
&lt;p&gt;選択するとiPhone側でカメラが起動するの撮影して「写真を使用」を選択するだけです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d1ff48f1acf47b56882ee1da3f743eb5.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使ってみるとこんな感じです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;転送めちゃ早いですよね。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;使えない時のトラブルシューティング&#34;&gt;使えない時のトラブルシューティング&lt;/h2&gt;
&lt;p&gt;通常はデスクトップやKeynote上で右クリックを押すとiPhoneで写真を撮る選択肢が出てきますが、グレーアウトして選択できない場合があります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/e35cf3e811144774761eacd429b4da37.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;mojave-ios12になっていないと使えない&#34;&gt;Mojave &amp;amp; iOS12になっていないと使えない&lt;/h3&gt;
&lt;p&gt;この機能はmacOS MojaveとiOS12以上じゃないと利用できません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Macのバージョンを確認しましょう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b79ffcadc6e4d1e6b3da8aa3f6701c41.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOSのバージョンも確認しましょう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/6fc7c466986e4e725bcf02314f95cc9b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;mac-iosが同じicloud-apple-id-でサインインしている必要がある&#34;&gt;Mac &amp;amp; iOSが同じiCloud（Apple ID）でサインインしている必要がある&lt;/h3&gt;
&lt;p&gt;MacとiPhoneを連携するために同じアカウントでそれぞれの端末にサインインしている必要があります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逆にサインインさえしておけばよく、iCloud Driveやフォトストリームなどの連携はオフにしていても問題ないです。&lt;/strong&gt; 最初うまくいかないときにこれを疑ってiCloud Driveをオンにしてみたりしましたが関係ありませんでした（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac側でiCloudにサインインしておきます&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/5d5b30a445c7b124ca0cb16b535f6e74.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS側でも同じアカウントでサインインしておきましょう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/2460370ca57c66f14562e2e9195dd600.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;wi-fi-bluetoothが両端末でオンになってないと使えない&#34;&gt;Wi-Fi &amp;amp; Bluetoothが両端末でオンになってないと使えない&lt;/h3&gt;
&lt;p&gt;この機能はAirDropと同様で &lt;strong&gt;Wi-FiとBluetoothがオンになってないと利用できません。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://news.mynavi.jp/article/20150510-iphone_why1/&#34;&gt;「AirDrop」はなぜBluetoothとWi-Fiの両方が必要なの? - いまさら聞けないiPhoneのなぜ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ざっくり言うとBluetoothでデバイスを検索し、Wi-Fiでデータを送る仕様になっているようです。&lt;/p&gt;
&lt;p&gt;iPhoneとMacのそれぞれのWi-FiとBluetoothをオンにしておきましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/f0836287a49153cfd59ee91d3ea1225e.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;オンにするだけで問題なく、特定のアクセスポイントに接続しておく必要はないです。&lt;/p&gt;
&lt;h4 id=&#34;macのbluetoothがオフの場合&#34;&gt;・MacのBluetoothがオフの場合&lt;/h4&gt;
&lt;p&gt;MacのBluetoothがオフの場合はデバイスの検索ができずグレーアウトになります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/aa571b80c3768e03705e541bc5d105b4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;macのwi-fiがオフでbluetoothがオンの場合&#34;&gt;・MacのWi-FiがオフでBluetoothがオンの場合&lt;/h4&gt;
&lt;p&gt;MacのBluetoothがオンになっているのでデバイスの検索は出来ますが、Wi-Fiがオフになっているとデバイスとのデータ通信が出来ずタイムアウトになります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/8d1bc4cb4cbadafa2c4e8fbb8544f5a6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;iphoneのbluetoothがオフの場合&#34;&gt;・iPhoneのBluetoothがオフの場合&lt;/h4&gt;
&lt;p&gt;Mac側でWi-FiとBluetoothがオンになっていてもiPhone側でBluetoothがオンになっていないとタイムアウトになります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/8d1bc4cb4cbadafa2c4e8fbb8544f5a6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;iphoneのwi-fiがオフの場合&#34;&gt;・iPhoneのWi-Fiがオフの場合&lt;/h4&gt;
&lt;p&gt;Mac側でWi-FiとBluetoothがオンになっていてもiPhone側でWi-Fiがオンになっていないと「デバイスでWi-Fiが有効になっていません」とエラーが出ます。これは分かりやすいですね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/42154f84e23618717b62040cab805ea4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;勘違いしてた内容&#34;&gt;勘違いしてた内容&lt;/h2&gt;
&lt;p&gt;ちなみに、MacとiPhoneの連携なので使えないときに以下を疑っていましたが全くもって関係ないです。&lt;/p&gt;
&lt;h3 id=&#34;ケーブルでつなげる必要はない&#34;&gt;ケーブルでつなげる必要はない&lt;/h3&gt;
&lt;p&gt;MacとiPhoneをライトニングケーブルなどで物理的に接続する必要性はないです。&lt;/p&gt;
&lt;h3 id=&#34;同一のwi-fiに繋げる必要もない&#34;&gt;同一のWi-Fiに繋げる必要もない&lt;/h3&gt;
&lt;p&gt;MacとiPhoneを同一ネットワークに接続する必要もないです。&lt;/p&gt;
&lt;h3 id=&#34;bluetoothで接続する必要もない&#34;&gt;Bluetoothで接続する必要もない&lt;/h3&gt;
&lt;p&gt;MacとiPhoneをBluetoothでペアリングなどをする必要もないです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;連携カメラ（Continuity Camera）が使えないときはiCloudもしくはWi-Fi&amp;amp;Bluetoothを疑うと良さそうです。&lt;/p&gt;
&lt;p&gt;それでもダメな場合はMacの再起動をしてみるとうまくいく時があるようです。&lt;/p&gt;
&lt;p&gt;この機能すごく便利なので&lt;a href=&#34;https://dotstud.io/blog/macos-mojave-update-process&#34;&gt;前回の記事&lt;/a&gt;の画像編集などと組み合わせると編集やライターさんはかなり重宝すると思います！&lt;/p&gt;
&lt;p&gt;それでは！&lt;/p&gt;</description></item><item><title>【あのバズマイコンを最速？レポート】極小マイコンのトリリオンノード・エンジンを使ってみた！</title><link>https://dotstud.io/blog/trillion-node-engine-sugoi/</link><pubDate>Fri, 05 Oct 2018 02:39:17 +0900</pubDate><guid>https://dotstud.io/blog/trillion-node-engine-sugoi/</guid><description>
&lt;p&gt;こんにちは、宇宙エンジニアのたくろーどんです。&lt;/p&gt;
&lt;p&gt;夏休みなので「何かハッカソンに出てみたい！モノづくりしたい！」と思いつつ、&lt;a href=&#34;http://www.mcpc-jp.org/&#34;&gt;MCPC（モバイルコンピューティング推進コンソーシアム）&lt;/a&gt;が主催する&lt;strong&gt;第1回ナノコン応用ハッカソン&lt;/strong&gt;に参加しました。&lt;/p&gt;
&lt;p&gt;なんとこのハッカソンで&lt;strong&gt;これから流行りそうな凄い開発ボード&lt;/strong&gt;に出会ったので、紹介します。その名も&lt;u&gt;&lt;strong&gt;トリリオンノード・エンジン&lt;/strong&gt;&lt;/u&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;トリリオンノード-エンジン-のここが凄い&#34;&gt;「トリリオンノード・エンジン」のここが凄い！&lt;/h2&gt;
&lt;h3 id=&#34;小さい&#34;&gt;小さい！&lt;/h3&gt;
&lt;p&gt;特筆すべきポイントは、&lt;strong&gt;トリリオンノード・エンジンの小ささ&lt;/strong&gt;でしょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/d8655c77-c996-4684-adb8-61f8799cbce4.jpeg&#34; alt=&#34;P_20180831_162041_vHDR_On.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;そうです、写真でわかるように&lt;strong&gt;本当に小さい&lt;/strong&gt;です。
決して、手が大きいわけではありません。&lt;/p&gt;
&lt;h3 id=&#34;拡張性が高い&#34;&gt;拡張性が高い！&lt;/h3&gt;
&lt;p&gt;ハッカソンの際は、写真のようにキットが渡されました。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/ab86e180-f0c0-afdd-c320-baa25fa92140.jpeg&#34; alt=&#34;P_20180831_100142_vHDR_On.jpg&#34; /&gt;
トリリオンノード・エンジンは、&lt;strong&gt;リーフ&lt;/strong&gt;というパーツで構成され、そのリーフの1つ1つに&lt;strong&gt;センサモジュールやBLE（Bluetooth）、Wi-Fi&lt;/strong&gt;といった機能を持っています。それを&lt;u&gt;&lt;strong&gt;重ねていくことで簡単に機能を拡張することができる&lt;/strong&gt;&lt;/u&gt;仕組みです。&lt;/p&gt;
&lt;p&gt;プログラムは&lt;strong&gt;Arduino IDE&lt;/strong&gt;で書きます。これは、Arduinoを触ったことがある人にやさしいですね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/0c71d1f5-486a-a6c7-d408-1aafa14afcdf.jpeg&#34; alt=&#34;P_20180831_100406_vHDR_On.jpg&#34; /&gt;
評価用キットなので、すべてのリーフが入っているわけではありません。今後は、もっとリーフが増えるようです。例えば、&lt;strong&gt;Groveセンサ用のリーフ&lt;/strong&gt;も予定されているそうです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/725d14ea-0149-83c4-87bd-cdade631bf64.jpeg&#34; alt=&#34;P_20181001_002408_vHDR_On.jpg&#34; /&gt;
Arduinoシールドのリーフもあります。プロトタイプをつくる際に役立ちますね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/6bd3b78b-ca6c-7bce-83bd-cb8a76319c44.jpeg&#34; alt=&#34;P_20181001_002538_vHDR_On.jpg&#34; /&gt;
「29TH Leaf」というリーフを使えば基板に直接実装できます。これもArduino互換リーフの一つです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/371ec114-1346-7596-1d0e-f2c12fa5d0e1.jpeg&#34; alt=&#34;P_20181001_002505_vHDR_On.jpg&#34; /&gt;
電源はUSB給電だけなく、&lt;strong&gt;専用のリーフで単3電池やボタン電池駆動&lt;/strong&gt;させることができます。実装には一手間かかるので、専用のリーフがあるのはとてもありがたいですね。&lt;/p&gt;
&lt;p&gt;例えば&lt;strong&gt;ウェアラブルなものをつくりたい&lt;/strong&gt;と思ったときに、必要な電圧にもよりますが電源回路を実装する必要がなくなります。&lt;/p&gt;
&lt;p&gt;重ねるだけでなく、横方向につなげるリーフもあります。発想の幅が広がりますね。&lt;/p&gt;
&lt;h2 id=&#34;試してみた&#34;&gt;試してみた&lt;/h2&gt;
&lt;p&gt;加速度センサとLEDテープを組み合わせてLチカさせてみました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/44f0d940-e547-66b5-bc20-020f64550d0d.gif&#34; alt=&#34;84472b66eb294f495cb1060bfda8c512.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ハッカソンでは、犬につけてコミュニケーションを加速させることを目的としたウェアラブルデバイスを考えました（完成には程遠かったですが……）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/973f6f0e-7487-ba0d-2aef-e2f245826ef9.jpeg&#34; alt=&#34;42142867_568541853564424_1201723650328231936_n.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;このサイズだから出来ることを考えてみると、様々なところに応用できそう&lt;/strong&gt;ですね。&lt;/p&gt;
&lt;h2 id=&#34;そして平成最後の夏-twitterでバズった&#34;&gt;そして平成最後の夏、Twitterでバズった&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;「トリリオンノード・エンジンが凄い！」といったことをつぶやいてみたら、バズりました&lt;/strong&gt;。
小型で使いやすそうなマイコンに対する関心の高さがうかがえます。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;今日つかったマイコン、やばやばなほど小さいんだけど、BLEも照度センサ、加速度センサ、温度センサ、スタックしていけばwifiモジュールもつくし、ボタン電池で駆動できて、Arduinoで開発できる。拡張も自由自在。スタックするだけでなく、横につなげてウェアラブルも可能。凄すぎるん😳😳😳 &lt;a href=&#34;https://t.co/DGqssgNkCF&#34;&gt;pic.twitter.com/DGqssgNkCF&lt;/a&gt;&lt;/p&gt; たくろーどん (@takudooon) &lt;a href=&#34;https://twitter.com/takudooon/status/1035474814696222722?ref_src=twsrc%5Etfw&#34;&gt;2018年8月31日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;そしてバズったら&lt;strong&gt;「トリリオンノード・エンジンの普及に貢献した」としてハッカソンで特別賞を貰いました&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/aa12c34d-e3f2-a9df-92b8-f4eccb6befb9.jpeg&#34; alt=&#34;IMG_20181001_011537_066.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;人生、何が起こるかわからないですね。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;まだまだドキュメントの整備や使用例はこれからのようです。
来年から販売予定だそうなので、目が離せませんね！&lt;/p&gt;</description></item><item><title>気分はセレブ！手を叩くとディナーを出してくれるデバイスを作ろう</title><link>https://dotstud.io/blog/device-of-celebrity-dinner/</link><pubDate>Thu, 27 Sep 2018 12:34:10 +0900</pubDate><guid>https://dotstud.io/blog/device-of-celebrity-dinner/</guid><description>
&lt;p&gt;こんにちは、たいしょーです。&lt;/p&gt;
&lt;p&gt;いきなりですが、&lt;u&gt;高級なレストランで指パッチンや手を叩いて合図するとウェイターがディナーを出してくれるシーン&lt;/u&gt;を見たことありませんか？&lt;/p&gt;
&lt;h2 id=&#34;憧れのシーンを実現したい&#34;&gt;憧れのシーンを実現したい&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/a7be6476-4059-9a5e-b3d6-9aeaff37db85.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;どこで見たかわからないけどなんとなく想像できる人も多いと思います。&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;&lt;strong&gt;で、私はそのシーンをめっちゃ再現したいわけです。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;何も言わずとも合図を送るだけで自分の好みを把握したウェイターがスッとディナーを出してくれる&amp;hellip;そんなセレブ気分を味わいたい…………！
しかし、高級レストランに行くお金もなければ、行けたとしても恥ずかしくてそんなことやる勇気も出ないので自宅で再現してみましょう。&lt;/p&gt;
&lt;h2 id=&#34;設計&#34;&gt;設計&lt;/h2&gt;
&lt;p&gt;先ほどのイメージ画像通り「合図するとディナーを出してくれる」のが完成イメージですが、より具体的な実現方法を考えてみます。&lt;/p&gt;
&lt;p&gt;考えた結果、&lt;u&gt;手を叩いたことをセンサーで認識して、「&lt;strong&gt;Amazon Dash Button&lt;/strong&gt;」を押すことでディナーをネット注文することにしました。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/0af2d3f4-e6a0-9053-7048-c3968bef281e.jpeg&#34; alt=&#34;概要図&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;準備するもの&#34;&gt;準備するもの&lt;/h2&gt;
&lt;h3 id=&#34;準備するものリスト&#34;&gt;準備するものリスト&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;名前&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;個数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Amazon Dash Button　&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Arduino Uno&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.aitendo.com/product/4070&#34;&gt;拍手制御スイッチ [AKIT-107]&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.aitendo.com/product/3277&#34;&gt;トランジスタ（S8050）&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;デジタル・マイクロサーボ SG90&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ジャンパー線（オス）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;最低6本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;太い輪ゴム&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;半田付けセット&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;手を叩くことを認識するセンサー部分は、aitendo様に「&lt;strong&gt;拍手制御スイッチ&lt;/strong&gt;」というまんま目的に合った素敵キットがあったので注文しました。&lt;/p&gt;
&lt;h2 id=&#34;拍手制御スイッチを組み立てる&#34;&gt;拍手制御スイッチを組み立てる&lt;/h2&gt;
&lt;h3 id=&#34;半田付けする&#34;&gt;半田付けする&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#34;Red&#34;, font size=&#34;3&#34;&gt;&lt;strong&gt;はやく半田付けをしたい人も、このセクションの【注意点!!】を読んでから半田付けをはじめてください。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;拍手制御スイッチは自分で部品を半田付けするキットで届くので組み立てていきましょう。&lt;/p&gt;
&lt;p&gt;半田付けの基本については村田製作所様のこちらのページが参考になります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.murata.com/ja-jp/campaign/ads/japan/elekids/ele/craft/knack/soldering&#34;&gt;電子工作のコツ/はんだ付け | 村田製作所 - Murata&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;さて、今回用意した半田付けセットはこちら。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/8f09c0ef-4ad5-ef26-4aed-b5a74f2b4fd3.jpeg&#34; alt=&#34;はんだセット&#34; /&gt;&lt;/p&gt;
&lt;p&gt;はんだは&lt;strong&gt;線径0.6mm&lt;/strong&gt;のもの、半田ごては温度を&lt;strong&gt;350度&lt;/strong&gt;に設定したものを用意しました。
洗濯バサミみたいな道具はヒートシンクといい、半田ごての熱から熱に弱い部品を守るものですが今回は使いませんでした。&lt;/p&gt;
&lt;p&gt;どの部品を基板のどこにつけるかなのですが、aitendo様のWebページに&lt;a href=&#34;http://www.aitendo.com/product/4070&#34;&gt;部品リストと回路図&lt;/a&gt;が載っているのでこれを見ながら組み立てて行くしかありません……。&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;&lt;strong&gt;これが滅茶苦茶大変です。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;オススメのやり方は最初に部品リストの順番通りに部品を並べてから半田付けを始めることです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/7ff3ab54-423f-7402-cad2-c53d798258f9.jpeg&#34; alt=&#34;部品並べ&#34; /&gt;&lt;/p&gt;
&lt;p&gt;抵抗などは下記のページで抵抗値を入力して5本色帯カラーコードに変換しながら照らし合わせると間違いづらいです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.desmots.net/hitme/audio/iroobi.php&#34;&gt;抵抗 - カラーコード（4本・5本色帯）変換 - 計算ツール&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;font-color-red-注意点-font&#34;&gt;&lt;font color=&#34;red&#34;&gt;注意点!!&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;さて、いよいよ半田付け・・・&lt;strong&gt;と、ちょっと待ってください!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;部品を整理したら&lt;font color=&#34;Red&#34;&gt;&lt;strong&gt;&lt;u&gt;Q4の場所につけるトランジスタ（S9014）をトランジスタ（S8050）に差し替えてください。&lt;/u&gt;&lt;/strong&gt;&lt;/font&gt;
組み立ててから気づいたのですが、ここの部品をすり替えないと組み上がった後正常に動作しません。（予備に2つ基板を買って試しましたがどちらも同じ結果でした）&lt;/p&gt;
&lt;p&gt;部品を差し替えたら今度こそ半田付けをします。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;電解コンデンサ、LED、ダイオード&lt;/strong&gt;は取り付け向きが決まっているので注意しましょう。
電解コンデンサ、LEDは2本ある足の長い方が+側。ダイオードは黒く模様がついている方向を基板の模様と合わせてください。&lt;/p&gt;
&lt;p&gt;無事、組み終わったものがこちらです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/7d0c5023-7edd-ee18-68de-ce8716f791c5.jpeg&#34; alt=&#34;センサ完成&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;試してみる&#34;&gt;試してみる&lt;/h3&gt;
&lt;p&gt;図のような簡単な回路を組んで、ちゃんと動くか試して見ましょう。
拍手スイッチの&lt;strong&gt;Power（入力電圧）は5Vではなく3.3V&lt;/strong&gt;であることに注意してください。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/ff0c1050-c860-4a07-46e8-7ef7e59306d4.png&#34; alt=&#34;AKIT_TEST.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;2&#34;&gt;&lt;u&gt;今回Fritzing用に拍手制御スイッチ（AKIT-107）のカスタムパーツを作りましたので&lt;a href=&#34;https://github.com/TakedaHiromasa/Fritzing/blob/master/aitendo_AKIT-107.fzpz&#34;&gt;こちら&lt;/a&gt;からDLできます。
よかったらどうぞ。&lt;/u&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;回路を組んだらセンサの上で手を叩いて見ます。手を叩くたびにLEDが点灯・消灯すれば成功です！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/50c1369b-9a73-538a-d7da-c8730fc0f0d0.gif&#34; alt=&#34;Claptest.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;（これが楽しくて、30分ぐらいセンサーの上で手を叩いてました。）&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;サーボの原点合わせ&#34;&gt;サーボの原点合わせ&lt;/h2&gt;
&lt;p&gt;今回用意した「デジタル・マイクロサーボ SG90」は「Amazon Dash Button」を押すのに使います。まずはサーボの原点合わせを行いましょう。&lt;/p&gt;
&lt;p&gt;今回使用するSG90は0~180°まで回るのですが、買った初期状態ではどこを向いているのかわからないので原点として初めに&lt;strong&gt;90°&lt;/strong&gt;に位置合わせを行います。&lt;/p&gt;
&lt;p&gt;まず以下のようにサーボとArduinoを繋ぎましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/7de1f622-c738-1667-9575-601c877556e3.png&#34; alt=&#34;sarvo.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;そして以下のプログラムを書き込んで実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;Servo.h&amp;gt;
Servo myservo;
void setup() {
myservo.attach( 10 );
}
void loop() {
myservo.write( 90 );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでサーボの原点が決まったので、付属のホーンを以下のように真上を向くようにつけます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/a66bca6c-f673-4f92-adea-23871a836489.jpeg&#34; alt=&#34;DSC_0577.JPG&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;全体の配線&#34;&gt;全体の配線&lt;/h3&gt;
&lt;p&gt;いよいよ全体の配線！
以下のように配線します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/16a09bda-31dc-1e91-ec16-cdaa9535296b.png&#34; alt=&#34;全体&#34; /&gt;&lt;/p&gt;
&lt;p&gt;「サーボ」と「Amazon Dash Button」は輪ゴムで合体させました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/aa85d4a4-ac2d-4800-dcfe-f248b70bbe7c.png&#34; alt=&#34;Screenshot_2018-09-17-00-05-37.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;プログラム&#34;&gt;プログラム&lt;/h3&gt;
&lt;p&gt;以下のプログラムを書き込みます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;Servo.h&amp;gt;
Servo myservo;
volatile int flag = 0;
void interruptsw()
{
flag = 1;
}
void setup() {
myservo.attach( 10 );
attachInterrupt(0, interruptsw, CHANGE);
}
void loop() {
if(flag == 1){
myservo.write( 45 );
delay(500);
flag = 0;
}else{
myservo.write( 90 );
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回のプログラムのポイントは&lt;strong&gt;割り込み処理&lt;/strong&gt;と&lt;strong&gt;volatile&lt;/strong&gt;です。&lt;/p&gt;
&lt;h3 id=&#34;割り込み処理&#34;&gt;割り込み処理&lt;/h3&gt;
&lt;p&gt;割り込み処理とは簡単に言えば、&lt;strong&gt;「イベントが起こった時に、コンピュータがどんな処理をしていようと無理やり別の処理を割り込ませる」&lt;/strong&gt;というもの。&lt;/p&gt;
&lt;p&gt;今回のプログラムの場合&lt;strong&gt;attachInterrupt(0, interruptsw, CHANGE);&lt;/strong&gt;で、&lt;strong&gt;どのピンのどんなイベントを監視するか指定&lt;/strong&gt;しています。指定の仕方は、&lt;strong&gt;attachInterrupt([監視するピン], [割り込ませる処理], [反応するイベントの種類]);&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;Arduino Unoでは監視するピンは&lt;strong&gt;0か１&lt;/strong&gt;しか指定できなく、それぞれ&lt;strong&gt;pin2, pin3&lt;/strong&gt;に対応しています。&lt;/p&gt;
&lt;p&gt;今回のプログラムの&lt;strong&gt;attachInterrupt(0, interruptsw, CHANGE);&lt;/strong&gt;とは&lt;strong&gt;「&lt;font color=&#34;Red&#34;&gt;2pin&lt;/font&gt;の信号が&lt;font color=&#34;Red&#34;&gt;CHANGE&lt;/font&gt;（変化するたび）&lt;font color=&#34;Red&#34;&gt;interruptsw&lt;/font&gt;を実行してね」&lt;/strong&gt;という指定をしていることになります。&lt;/p&gt;
&lt;h3 id=&#34;volatile&#34;&gt;volatile&lt;/h3&gt;
&lt;p&gt;volatileとは&lt;strong&gt;「この変数に関係する部分は消さないで！」&lt;/strong&gt;という指定。&lt;/p&gt;
&lt;p&gt;どういうことかというと、プログラムをよく見てもらうと&lt;u&gt;volatileをつけているflagという変数はloop()の中で、何の計算にも使われていません（足すとか引くとか）。&lt;/u&gt;loop()の中では、&lt;strong&gt;if(flag == 1)&lt;/strong&gt;の部分でフラグが１になることを待っていますが、コンピュータはかしこい？ので、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flagはloop()の中で計算に使ってない&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;↓&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;計算に使ってないならflagの値が増えたり減ったりすることは一生ないんじゃね？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;↓&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;じゃあ「flag == 1」になることはありえんね、無駄なんでif文消しまーす&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;↓&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;俺優秀☆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;という具合に&lt;strong&gt;最悪の場合勝手にif文を消します&lt;/strong&gt;。
私たちからすれば「そこは割り込みが起こった時に1が代入されるんだけど・・・」と思いますがコンピュータは知ったこっちゃありません。ということで、計算には使ってないけど割り込みなどで確実に値が変化する変数については&lt;strong&gt;volatile&lt;/strong&gt;をつけて消されないようにしてあげます。&lt;/p&gt;
&lt;h2 id=&#34;実際に使ってみる&#34;&gt;実際に使ってみる&lt;/h2&gt;
&lt;p&gt;さて、難しい話はこれぐらいにして早速完成したデバイスを使ってみましょう！&lt;/p&gt;
&lt;p&gt;より雰囲気を出すために&lt;u&gt;フリー素材のおじさまウェイターの画像をA3用紙4枚刷りで印刷し、そこにデバイスを貼り付けました。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/f505fed2-0763-3db7-4e7c-6e9df474b17e.jpeg&#34; alt=&#34;DSC_0571.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size =&#34;4&#34;&gt;いざ起動・・・・！！！&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/XlFNMBB7lt4&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size =&#34;4&#34;&gt;&lt;strong&gt;無事、手を叩いただけでディナーが届きました！！！！！&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;「シーチキン」の「Amazon Dash Button」を使ったのでシーチキンが届きました。今回使った拍手センサは使い方も簡単なので、他にも音で動くデバイスを作ってみると面白いと思います！&lt;/p&gt;
&lt;p&gt;それでは、みなさん良きセレブライフをー！&lt;/p&gt;</description></item><item><title>人柱覚悟でさっそくmacOS Mojaveにしてみました。</title><link>https://dotstud.io/blog/macos-mojave-update-process/</link><pubDate>Tue, 25 Sep 2018 05:46:01 +0900</pubDate><guid>https://dotstud.io/blog/macos-mojave-update-process/</guid><description>
&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;macOS Mojaveが出ましたね。前にSierraのアップデートをした時も初日くらいにやってみたので今回もアップデートしてみたいと思います。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;022&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/macos-sierra-update-process/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/022/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
人柱覚悟でさっそくmacOS Sierraにしてみました。
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2016-09-23
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
macOS Sierraに早速してみました。Sierraにアップデートする手順とアップデート後の不具合なども載せてます。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;p&gt;&lt;strong&gt;ちなみに今回は「実際にmacOS Mojaveにアップデートしてみたレポート」ですので、試す際にもしトラブルが発生しても当メディアでは責任は負いません。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;結論から先に言うと &lt;strong&gt;Sierraのときはそこまでアップデートしなくてもよいかもなぁって感じの〆だったんですけど、Mojaveは（今のところは）積極的にオススメしたいアップデートだと思っています。&lt;/strong&gt; 記事書く人にはオススメポイントが多いです。&lt;/p&gt;
&lt;h2 id=&#34;macos-mojave-モハベ&#34;&gt;macOS Mojave （モハベ）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/4ddc01da4d7dd237928e955545b624a5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「モハベ」&lt;/strong&gt;と読むみたいです。モジャべじゃないよ！&lt;/p&gt;
&lt;p&gt;macOSの新しいやつですね。 新機能などは他のメディアで色々紹介されてるので見てみると良いと思います。&lt;/p&gt;
&lt;p&gt;バージョンは10.14でHigh Sierraの後続版です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gizmodo.jp/2018/09/darkmode-macos-mojave-release.html&#34;&gt;ダークモードがやってきた！ ｢macOS Mojave｣正式リリース&lt;/a&gt;
&lt;a href=&#34;https://applech2.com/archives/20180921-before-upgrade-macos-10-14-mojave.html&#34;&gt;macOS 10.14 Mojaveへアップグレードする前の注意点まとめ。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ダークモードが使えるようになったよ！ってのが大きい気がします。&lt;/p&gt;
&lt;p&gt;詳細は&lt;a href=&#34;https://ja.wikipedia.org/wiki/MacOS_Mojave&#34;&gt;Wikipedia&lt;/a&gt;なども見てみましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/e74d7131d56f3a275fcd41b1216471a3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;アップデートする僕のmacbookのマシンスペック&#34;&gt;アップデートする僕のMacBookのマシンスペック&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MacBook Pro （Retina 13-inch、 Early2015）&lt;/li&gt;
&lt;li&gt;macOS High Sierra v10.13&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;では人柱覚悟でアップデートしていきます&#34;&gt;では人柱覚悟でアップデートしていきます&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.apple.com/jp/macos/mojave/&#34;&gt;公式サイト&lt;/a&gt;からアップデートしてみます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「パワーに満ちたシンプル。」&lt;/strong&gt;というキャッチコピーはすごくツッコミ入れたいですがスルーして右上の「今すぐアップグレード」からアップグレードします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/8deca35f31807137d53ec5cfacc3e340.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;App StoreのWeb版が開かれて、App Storeアプリで開きますかと聞かれるので開きましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b2db8ec54b706e1fb17c64a96b703408.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;App Storeアプリが起動するのでまずはダウンロードします。 ネットワーク環境にもよると思いますが、15分くらいかかった印象です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3a83f39b45e0d77a9eaf3f3fdc16c5b6.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ダウンロードが完了するとインストーラーが起動します。&lt;/p&gt;
&lt;p&gt;「続ける」を押して進みます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/41a0a7ba691b1e564495bb1693024517.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;規約画面になります。「同意する」で進みます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7626ed2f4bdddd6adcc20455470ea629.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/65bc8dcb6cf4c205c63fd51fed9772cb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;インストールするディスクを選択します。このときディスクの空き領域が無いとインストールできないので空き領域の確保をしておきましょう。僕は全然空いてなくて詰まりました苦笑&lt;/p&gt;
&lt;p&gt;ちなみに、セーフモードで再起動すると容量確保出来る場合が多いです。キャッシュが容量を喰ってる場合が多いのですが、再起動してshiftを押しっぱなしで起動することでセーフモード起動になります。大体の場合はこれでキャッシュがクリアされて容量が劇的に削減出来ます。 僕の場合は10GBほど削減できました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/76a1366f2c5e54b2a6bb8b8147429de9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;容量確保が出来たらハードディスクのアイコンがアクティブになり「インストール」ボタンが押せる状態になります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/55669f85f995f6ea45d5301e17110bd2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;スタートすると残り時間などが表示されるので少し待ちましょう。 僕の場合は17分と表示されましたが、実際はもっと早く終わった気がします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/ee68b983019fd74e9777bc399efc2559.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;インストールする準備ができました。と表示されたら再起動ボタンで再起動しましょう。何回か再起動することもあります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/ff083cef222998991d6321dd5abfbd80.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再起動中です。 40分くらいかかった印象です。ご飯でも食べて戻ってくるとちょうどよいかもしれません。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/de6217ddbcd2b8f2fb479adad1b7c9c7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;しばらくして起動しました！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/320e7c9449a4d5f249ca3187c0fba164.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;mojavaの初期設定&#34;&gt;Mojavaの初期設定&lt;/h3&gt;
&lt;p&gt;Mojavaの初期設定でApple IDでサインインします。
ちなみに、ここの画面撮り忘れたのでSierraのときのキャプチャです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/022/08_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;iCloudキーチェーンの設定です。あとで設定しても大丈夫だと思います。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/80782a5bbec79762ed6fe450ec3247a9.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解析ログの提供チェックです。チェックしなくても問題無いです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/5b7f08971e8ff1486112666f44024b35.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ここの最後でやっとダークモードの選択肢が出てきました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d9d7e78c1ee29f3c714bbab6c51649f1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ダークを選択するとウィンドウが黒基調になります。かっこいい。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/94dd59c13387880d3f2640d3ceb9eb22.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これで完了です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/488a451308d535eda27068fad694d7f1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;起動すると無事にバージョンが上がっていることが分かります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b79ffcadc6e4d1e6b3da8aa3f6701c41.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;そしてFinderなども黒い。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/8cb8e22ace2cb6150cf99f0f2d18182d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;もちろんそのままライトテーマで利用することもできます。&lt;/p&gt;
&lt;h2 id=&#34;新機能を試してみる&#34;&gt;新機能を試してみる&lt;/h2&gt;
&lt;p&gt;少し新機能を試してみます。&lt;/p&gt;
&lt;h3 id=&#34;デスクトップをダイナミックデスクトップに&#34;&gt;デスクトップをダイナミックデスクトップに&lt;/h3&gt;
&lt;p&gt;時間帯によってデスクトップ画像の風景が変わるダイナミックデスクトップが追加されています。&lt;/p&gt;
&lt;p&gt;システム環境設定の「デスクトップとスクリーンセーバー」から設定しましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7c3725fdb0bd0723f9394af17b716c33.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;クイックアクション&#34;&gt;クイックアクション&lt;/h3&gt;
&lt;p&gt;個人的には &lt;strong&gt;めちゃ便利です。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;アプリを開かなくてもFinderからそのまま処理を実行できます。&lt;/p&gt;
&lt;p&gt;例えば画像をプレビューアプリで編集したい場合などは今まではアプリが起動して編集する流れになっていましたがFinderから編集用のウィンドウが出てきてシュッと編集できます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/74a47bbca1477a1a9e767108bb37fc8f.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;編集者やライターさんはかなり重宝する機能な気がします。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;スクリーンショットのプレビュー-編集&#34;&gt;スクリーンショットのプレビュー&amp;amp;編集&lt;/h3&gt;
&lt;p&gt;これも &lt;strong&gt;めちゃ便利&lt;/strong&gt; です。&lt;/p&gt;
&lt;p&gt;今まではスクリーンショットを撮影したらそのまま保存されてましたが、プレビューが右下に出てきて、そこをクリックするとそのまま編集して保存したり、保存しないっていう選択肢も選択できます。&lt;/p&gt;
&lt;p&gt;ちなみにこの画像自体もプレビュー&amp;amp;編集で作ってます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/be73658467a0094f93db5a9608ed251f.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これ、最近のiPhoneだと使える機能なんですけどMacでも早く使いたいなぁと思ってました。&lt;/p&gt;
&lt;p&gt;これも &lt;strong&gt;編集者やライターさんはかなり重宝する機能な気がします。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;スクリーンショットの強化-画面収録&#34;&gt;スクリーンショットの強化&amp;amp;画面収録&lt;/h3&gt;
&lt;p&gt;command+shift+5で起動するスクリーンショットが範囲選択や保存先のフォルダ変更など歯がゆい部分が強化されています。&lt;/p&gt;
&lt;p&gt;また同じコマンドから画面収録もそのままやれるようになっています。
今まではQuick Time Playerの機能などを使ってましたが圧倒的にこっちの方が楽です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3ca9f6c7528e2bc36573bde86ed7240e.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これも &lt;strong&gt;編集者やライターさんはかなり重宝する機能な気がします。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;気になる不具合など&#34;&gt;気になる不具合など&lt;/h2&gt;
&lt;p&gt;今のところ大きな不具合はないですが恒例な感じでGitが動かなくなりました。&lt;/p&gt;
&lt;p&gt;その他発見したら追記していきます。&lt;/p&gt;
&lt;h3 id=&#34;git問題&#34;&gt;Git問題&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/n0bisuke/items/1c60084c8c07b690d693&#34;&gt;macOS MojaveにしたらGitコマンドが動かなくなった&lt;/a&gt;に書きましたが&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;で入れ直すと直ります。&lt;/p&gt;
&lt;h3 id=&#34;パフォーマンスなどは&#34;&gt;パフォーマンスなどは?&lt;/h3&gt;
&lt;p&gt;むしろ快適になった気がしています。もしかしたら直前のキャッシュクリアの影響なのかもしれないですが文章書いている程度ですが前よりもスムーズPCが動いてる気がしています。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;こんな感じでアップデートできました。&lt;/p&gt;
&lt;p&gt;今回のアップデートですが、画像を扱う人たちにはすごくよい機能アップデートな気がしました。
あと、 &lt;strong&gt;ダークモードはなんかカッコいい&lt;/strong&gt;のでおすすめです笑&lt;/p&gt;
&lt;p&gt;iPhoneのカメラの写真がそのまま取り込まれる機能もあるみたいですがまだ試せて無いのでそのうち試してみたいと思います。これもまた &lt;strong&gt;編集者やライターさんはかなり重宝する機能な気がします。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sierraのときはそこまでアップデートしなくてもよいかもなぁって感じの〆だったんですけど、Mojaveは（今のところは）積極的にオススメしたいアップデートだと思っています。&lt;/p&gt;
&lt;p&gt;使っていくうちに不具合出てきそうですが笑&lt;/p&gt;
&lt;p&gt;僕は問題ありませんでしたが、ハードウェア的な問題などでデータが消えてしまうとかもあるかもしれないので、アップデートする方はくれぐれもお気をつけて自己責任でお願いします！&lt;/p&gt;</description></item></channel></rss>