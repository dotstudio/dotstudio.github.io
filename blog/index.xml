<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/blog/index.xml</link>
    <description>Recent content in Blogs on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Sat, 24 Jun 2017 00:30:36 +0900</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【報告】青山学院大学でIoT体験講習会を開催しました。</title>
      <link>https://dotstud.io/blog/aogaku-iot-course-report/</link>
      <pubDate>Sat, 24 Jun 2017 00:30:36 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/aogaku-iot-course-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、デザインエンジニアの&lt;a href=&#34;https://twitter.com/chachmaru&#34;&gt;ちゃちゃまる&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;先日、青山学院大学でdotstudioとしてIoT体験講習会を開催しました。今日はその報告です。&lt;/p&gt;

&lt;h2 id=&#34;line-x-iotがテーマ&#34;&gt;LINE x IoTがテーマ&lt;/h2&gt;

&lt;p&gt;開催概要は以下の通りとなっています。
最近は大学生の間でも耳にする機会が増えて来た「IoT」と大学生はほぼ全員がやっている「LINE」を使って &lt;strong&gt;プログラミング不要なIoT体験講習会&lt;/strong&gt;をしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/112/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;パソコン無し-スマホだけでできるwio-node&#34;&gt;パソコン無し、スマホだけでできるWio Node&lt;/h2&gt;

&lt;p&gt;当日は弊社でも販売やハンズオンを行なっているSeeed社製の&lt;a href=&#34;https://dotstud.io/shop/wionode-social-remote-control/&#34;&gt;Wio Node&lt;/a&gt;を用いました。&lt;/p&gt;

&lt;p&gt;Wio Nodeはスマートフォンアプリだけでネットワーク設定ができ、Grove規格に対応しているため、センサ周りの難しい配線は不要です。&lt;/p&gt;

&lt;p&gt;当日は、 &lt;strong&gt;Wio Nodeで温湿度センサの値を取得し、その値をLINEで確認する&lt;/strong&gt;という内容の体験を行いました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/112/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;当日は20名の学生さんが参加&#34;&gt;当日は20名の学生さんが参加&lt;/h2&gt;

&lt;p&gt;学生さんは「IoT」という言葉を就活で耳にする機会が多いようで、 &lt;strong&gt;「IoTという言葉がそもそも何なのか」というところにも興味がある&lt;/strong&gt;ようでした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/112/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;前半はIoTについての座学、後半はハンズオンという形式で講習会を展開しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/112/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;パソコン持ち込み不要&lt;/strong&gt;という形で募集を掛けましたが、参加者は女性の受講生が多く、僕が見たことがある通常のIoTハンズオンなどとは違う雰囲気で新鮮でした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/112/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめと感想&#34;&gt;まとめと感想&lt;/h2&gt;

&lt;p&gt;アンケートも取りましたが、全体的に満足度が高く、入り口としては良い体験会になったのではないかなと思っています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/112/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;途中、Seeed社が提供しているWio Nodeのサーバがダウンしてバタバタすることもありましたが、なんとか回避して大半の参加者が最後まで進めることができました。（数名アプリ不具合があり最後まで到達できない人もいたのでSeeed社にフィードバックしつつクオリティを上げていきたいです。）&lt;/p&gt;

&lt;p&gt;dotstudioではこんな形で大学や企業での研修、講習会を行なっています。
気になった方がいましたらぜひお問い合わせください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>完成しなくても気持ちが大事！愛があれば基板も作れる回まとめ #IoTLT vol.28</title>
      <link>https://dotstud.io/blog/iotlt-vol28-chantoku-report/</link>
      <pubDate>Thu, 15 Jun 2017 03:00:07 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/iotlt-vol28-chantoku-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとくです。6月13日に開催されたIoTLT vol28（&lt;a href=&#34;https://iotlt.connpass.com/event/56270/&#34;&gt;IoT縛りの勉強会! IoTLT vol.28 @ サイボウズ&lt;/a&gt;）の様子をお届けします！&lt;/p&gt;

&lt;p&gt;当日のツイートまとめは&lt;a href=&#34;https://togetter.com/li/1119952&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;さいぼーずちほーのオフィスは壮大でした まる &lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; &lt;a href=&#34;https://t.co/zubvZjHt01&#34;&gt;pic.twitter.com/zubvZjHt01&lt;/a&gt;&lt;/p&gt; ( ✿   ﾐ⁰ ⌓ ⁰ﾔ   ✿) (@Otogami_417) &lt;a href=&#34;https://twitter.com/Otogami_417/status/874658170974621697&#34;&gt;2017年6月13日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
ジャパリ感が強いと噂のサイボウズさんにて。&lt;/p&gt;

&lt;h2 id=&#34;iotltとは&#34;&gt;IoTLTとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/01_iotlt.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;（写真: 集合写真家・武市真拓氏）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;dotstudio代表のびすけとリレーションズの土屋氏が開催しているIoTの勉強会です。各回12名程度の登壇者が5分でLTをしており、参加者は毎回200人規模！&lt;/p&gt;

&lt;p&gt;某研究所調べだと国内最大規模になっていて、年間の参加者で5000人くらいの規模になっています。
「&lt;a href=&#34;http://www.slideshare.net/ssuserafaef6/connpasssummit2017&#34;&gt;connpass運営が選ぶこのコミュニティがすごい&lt;/a&gt;」では、コミュニティメンバー数と開催数の多さから「高橋名人級」認定をしていただきました！&lt;/p&gt;

&lt;p&gt;今回は、&lt;strong&gt;会場は&lt;a href=&#34;https://cybozu.co.jp/&#34;&gt;サイボウズ株式会社&lt;/a&gt;さん&lt;/strong&gt;、&lt;strong&gt;懇親会は&lt;a href=&#34;https://job-draft.jp/&#34;&gt;転職ドラフト&lt;/a&gt;さん&lt;/strong&gt; に提供して頂きました。ありがとうございます！&lt;/p&gt;

&lt;h2 id=&#34;完成できなかった-けど気持ちが大事&#34;&gt;完成できなかった……けど気持ちが大事！&lt;/h2&gt;

&lt;p&gt;インターネットに繋がらなくても、ライブラリ間に合わなくても、禁酒できなくても？ &lt;strong&gt;やりたい気持ちが大事なんです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ということで初心者でも玄人でも実現したい夢いっぱいな回でした！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;/p&gt;

&lt;p&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;スポンサーlt-金斗雲-vs-kintone-by-サイボウズ様&#34;&gt;スポンサーLT: 「金斗雲 vs kintone」 by サイボウズ様&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt;  &lt;br&gt;&lt;br&gt;ん？ &lt;a href=&#34;https://t.co/Uivu6C1XMk&#34;&gt;pic.twitter.com/Uivu6C1XMk&lt;/a&gt;&lt;/p&gt; まえぷー (@kmaepu) &lt;a href=&#34;https://twitter.com/kmaepu/status/874576350752919552&#34;&gt;2017年6月13日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;強すぎるビジュアル&lt;/strong&gt;の方が出てきましたが、このLTのために大阪からいらっしゃったそうです！&lt;/p&gt;

&lt;p&gt;ドラッグ＆ドロップでフォームを作れて、心が清い人もそうでない人もアカウントがあればみんな使えて、コミュニケーションもバッチリなツールだそう。最近は心に刺さる広告が目立ってますよね！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;金斗雲と比べても勝ってるkintoneさん&lt;/strong&gt;はTwitterを始められたそうなのでぜひ！&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/kintonedevjp&#34;&gt;@kintone developer JP&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;project-f-iot-water-flow-model-by-海老原氏&#34;&gt;Project °F ～IoT Water Flow Model～ by 海老原氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/ebi.png&#34; alt=&#34;&#34; /&gt;
お風呂の自動化を目指す、というところでまずは栓を閉める部分をIoT化！栓を落とすのには球状のゴム排水栓がオススメだそうです。&lt;/p&gt;

&lt;p&gt;ご友人には「感謝の気持ちを込めて栓を閉めるためにあえて自動化しないもんだ」と諭されたとか（笑）&lt;/p&gt;

&lt;h3 id=&#34;初めてのiot-by-村田氏&#34;&gt;初めてのIoT!!! by 村田氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/murata.png&#34; alt=&#34;&#34; /&gt;
IoTで家主の権限を守りたい村田氏。&lt;/p&gt;

&lt;p&gt;がじぇるね賞でプレゼントされたGR-AZDUKI+サーボモータでセキュリティ管理を目指すそうです！&lt;/p&gt;

&lt;h3 id=&#34;lチカを卒業してalexaスキルを作った話-by-菊地氏&#34;&gt;Lチカを卒業してAlexaスキルを作った話 by 菊地氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/elec1.png&#34; alt=&#34;&#34; /&gt;
ボードを買って試してばかりで&lt;strong&gt;自称Lチカ評論家&lt;/strong&gt;という菊池氏。&lt;/p&gt;

&lt;p&gt;Lチカの次は「Alexa + Electric Imp」で飴ちゃんを出してもらうIoT！いきなりのレベルアップがすごいですね。&lt;/p&gt;

&lt;p&gt;Alexaは喋り方がおばちゃんっぽいので、実装もお菓子をねだりすぎると怒られるおばちゃん仕様です（笑）&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/IVgPStbpTOtPFO&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/bywaysideway1/l-alexa&#34; title=&#34;Lチカを卒業して Alexaスキルを作った話&#34; target=&#34;_blank&#34;&gt;Lチカを卒業して Alexaスキルを作った話&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://www.slideshare.net/bywaysideway1&#34;&gt;Hitoshi Kikuchi&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;感情認識ポラロイドカメラ-by-ソニア氏&#34;&gt;感情認識ポラロイドカメラ by ソニア氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/camera.png&#34; alt=&#34;&#34; /&gt;
&lt;center&gt;
&lt;strong&gt;＼ Printer Phone Pie Camera ／&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ソニア氏はPPAPになぞらえてポラロイドカメラを楽しくハック！ラズパイカメラで写真を撮って、感情認識した結果付きの写真がプリントできるガジェットです。&lt;/p&gt;

&lt;p&gt;スマホで写真が撮れる時代ですけど、「インスタで自撮り」文化のおかげで今すごく古いカメラが流行ってるらしいですね。若者すごい。&lt;/p&gt;

&lt;h3 id=&#34;節酒iotしたかった話-by-やまちょ氏&#34;&gt;節酒IoTしたかった話 by やまちょ氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/yamacho.png&#34; alt=&#34;&#34; /&gt;
結果にコミットする人でお馴染みやまちょ氏は、飲んだお酒の量をTwitterに自動でつぶやき&lt;strong&gt;「飲み過ぎですよ」って誰かに心配してもらう&lt;/strong&gt;ことで節酒を目指すIoT。発想が斜め上です。&lt;/p&gt;

&lt;p&gt;ロードセルを使ったところ値が安定せず頓挫中とのこと。早めに実現させてご自愛ください！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;IoTに委ねるしかないよね。 &lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; &lt;a href=&#34;https://t.co/gHowOSBLu3&#34;&gt;pic.twitter.com/gHowOSBLu3&lt;/a&gt;&lt;/p&gt; 大熊 元気 (@JNTEST23) &lt;a href=&#34;https://twitter.com/JNTEST23/status/874585471405273088&#34;&gt;2017年6月13日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
節酒（禁酒ではない）&lt;/p&gt;

&lt;h3 id=&#34;元汎用機エンジニアが語るiot-jafug紹介も-by-チャラ電mitz氏&#34;&gt;元汎用機エンジニアが語るIoT／JaFUG紹介も by チャラ電Mitz氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/mitz.png&#34; alt=&#34;&#34; /&gt;
こっそり改名したチャラ電Mitz氏は「&lt;strong&gt;ノンプログラミングでできるIoT&lt;/strong&gt;」ということでMaBeeを使ったガジェットを持って登場。&lt;/p&gt;

&lt;p&gt;近日FitBitユーザグループJaFUGの&lt;a href=&#34;https://jafug.connpass.com/event/58898/&#34;&gt;第1回Fitbit User Conference&lt;/a&gt;を開催されるそうです！&lt;/p&gt;

&lt;h3 id=&#34;スポンサーlt-転職ドラフト-by-リブセンス様&#34;&gt;スポンサーLT: 「転職ドラフト」 by リブセンス様&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;転職ドラフトビール！！ &lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; &lt;a href=&#34;https://t.co/reJfvIcH91&#34;&gt;pic.twitter.com/reJfvIcH91&lt;/a&gt;&lt;/p&gt; おかもとけいじ (@mokusatsu) &lt;a href=&#34;https://twitter.com/mokusatsu/status/874603451728056320&#34;&gt;2017年6月13日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
＼Ʊ&amp;rdquo;-ʓ／＼Ʊ&amp;rdquo;-ʓ／&lt;br /&gt;
ʕ•̫͡•ʕ•̫͡•ʔ•̫͡•ʔ•̫͡•ʕ•̫͡•ʔ•̫͡•ʔ&lt;/p&gt;

&lt;p&gt;懇親会は転職ドラフト様にスポンサーしていただきました！&lt;/p&gt;

&lt;p&gt;これまでの業務やスキルについて匿名で登録すると企業が年収で入札するシステムのITエンジニア向け転職サービス。今なら&lt;strong&gt;お友達紹介する人もされた人もオライリー本プレゼント&lt;/strong&gt;だそうです！最高！！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://job-draft.jp/&#34;&gt;転職DRAFT - 企業があなたを奪い合う&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ﾀﾞｧ-ｼｴﾘｲｪｽなiot基板-by-ポキオ氏&#34;&gt;ﾀﾞｧ ｼｴﾘｲｪｽなIoT基板 by ポキオ氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/pokio.png&#34; alt=&#34;&#34; /&gt;
ダァのIoTでお馴染みポキオ氏がついにKQな基板を作ってしまいましたー！&lt;/p&gt;

&lt;p&gt;KiCadで回路をモデリングして中国にポイっすれば2500円程度で意外と簡単に作れるらしい！&lt;/p&gt;

&lt;p&gt;ver.1の回路は路線図になっていて、ご実家の駅には&lt;strong&gt;無駄な抵抗&lt;/strong&gt;、直通運転でない部分は&lt;strong&gt;なぜか回路も切れている&lt;/strong&gt;こだわりっぷりです。&lt;strong&gt;愛が強すぎる&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;db8ff9d63fd74ede8887e1cb1debc3f1&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;ノリと後悔と色々と-by-d氏&#34;&gt;ノリと後悔と色々と by D氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/pasori.png&#34; alt=&#34;&#34; /&gt;
卒論の締め切りで厳しいが「PaSoRi + NFC（学生証）」で授業の出席登録ができるカードリーダ制作にトライした、という学生さんらしい発表でした。やりたいと思った時がIoTを始める時ですね！&lt;/p&gt;

&lt;h3 id=&#34;iot初心者のwebエンジニアが夢を持って挑んでみたお話-part3-by-cymer氏&#34;&gt;IoT初心者のWEBエンジニアが夢を持って挑んでみたお話 Part3 by cymer氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/cymer.png&#34; alt=&#34;&#34; /&gt;
上体起こしを計測する筋肉IoTを目指すしーめる氏。ESP8266にピンヘッダを半田付けしたら直角じゃなくなってブレッドボードに刺さらないらしい（笑）&lt;/p&gt;

&lt;p&gt;次回はAndroidエンジニア向け開発ボードWaffleを使う予定だそうです！&lt;/p&gt;

&lt;h3 id=&#34;hololensに日本語聞いてもらいたい-by-えむにわ氏&#34;&gt;HoloLensに日本語聞いてもらいたい by えむにわ氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/m2wa.png&#34; alt=&#34;&#34; /&gt;
HoloLensユーザのえむにわ氏はコルタナさんに日本語でお話ししたい。ということでGoogle Cloud Speech APIを使って音声認識を文字に起こせるように！&lt;/p&gt;

&lt;p&gt;当初ライブラリを作ろうとしたがさすがに2週間では無理だったそう。無理のレベルがすごい。&lt;/p&gt;

&lt;h3 id=&#34;メルヘンチックをハックする-with-thingspeak-by-ふくも氏&#34;&gt;メルヘンチックをハックする　with ThingSpeak by ふくも氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/fukumo.png&#34; alt=&#34;&#34; /&gt;
「ThingSpeak 色」と呟くと色が変わるガジェットを持って登場！すごいのにLTとは無関係でした（笑）&lt;/p&gt;

&lt;p&gt;本筋はIoTで不審者撃退装置を作るお話。誤作動して怪我をしても困るので撮った方法が&lt;strong&gt;シャボン玉で撃退&lt;/strong&gt;！！確かにメルヘン！&lt;/p&gt;

&lt;p&gt;ガジェットや撃退に使っていた&lt;a href=&#34;https://thingspeak.com/&#34;&gt;&lt;strong&gt;ThingSpeak&lt;/strong&gt;&lt;/a&gt;はビジュアライゼーション、プログラミング、スクレイピング、トリガー作成などかなり色々なことができるらしいです！&lt;/p&gt;

&lt;h3 id=&#34;waffle製作記とハンズオンのお知らせ-by-浜谷氏&#34;&gt;Waffle製作記とハンズオンのお知らせ by 浜谷氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/waffle.png&#34; alt=&#34;&#34; /&gt;
遠隔吐息装置「fuufuu」、シェアできる「ソーシャルお弁当箱」など様々なガジェットを作ってきた浜谷氏はAndroid開発者向けボード「&lt;strong&gt;Waffle&lt;/strong&gt;」の制作秘話を公開！&lt;/p&gt;

&lt;p&gt;基板の設計だけでなくパーツの調達、手作業での半田付け、箱詰め、発送などなど製造業はかなり大変なことが多いそう……。そんな時たくさんの「応援メッセージ」に励まされたそうです。気持ちを声に出していくの、大事ですね！&lt;/p&gt;

&lt;p&gt;Waffleハンズオンは今週末開催です！&lt;a href=&#34;https://dotstudio.connpass.com/event/51365/&#34;&gt;&lt;strong&gt;Android端末に直挿しできる開発ボード「Waffle」ハンズオン&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;勉強会やセミナーで使えるデバイス検討-by-のびすけ-at-dotstudio&#34;&gt;勉強会やセミナーで使えるデバイス検討 by のびすけ at dotstudio&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/n0bi1.png&#34; alt=&#34;&#34; /&gt;
LT発表にリアルタイムに会場の声を拾いたいのびすけ氏。&lt;/p&gt;

&lt;p&gt;Googleスライドにコメントできる&lt;a href=&#34;http://nabettu.github.io/niconicocoa/&#34;&gt;niconicocoa&lt;/a&gt;やTwitterタイムラインを表示させる&lt;a href=&#34;http://qiita.com/n0bisuke/items/8a453a331ac8bd55ba1a&#34;&gt;自作ツール&lt;/a&gt;は既にあるけど、スライドの種類を選ばず事前インストールも不要でコメント表示できるツールを作りたい！&lt;/p&gt;

&lt;p&gt;と言うことで「↓この辺」に噛ませるデバイスを開発中だそうです！
&lt;img src=&#34;https://dotstud.io/img/blog/111/n0bi2.png&#34; alt=&#34;&#34; /&gt;
欲しい、けど、私の場合なに言っても「電気風呂」って書かれそう。炎上怖い。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;次回は7/13（木）サムライインキュベートさんで開催です！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://iotlt.connpass.com/event/56277/&#34;&gt;IoT縛りの勉強会! IoTLT vol.29 @ サムライインキュベート&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;今回はデモが多いので懇親会がいい感じ！ &lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; &lt;a href=&#34;https://t.co/HRk2nzrIUg&#34;&gt;pic.twitter.com/HRk2nzrIUg&lt;/a&gt;&lt;/p&gt; うこ (@harmoniko) &lt;a href=&#34;https://twitter.com/harmoniko/status/874607924303155201&#34;&gt;2017年6月13日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
懇親会も大盛り上がりでした！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/111/pokio_sugoi.png&#34; alt=&#34;&#34; /&gt;
&lt;center&gt;圧倒的ポキオ人気に嫉妬。&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ESP8266を使って京急が遅延すると光るガジェットを作ってみた</title>
      <link>https://dotstud.io/blog/pokio-esp-keikyu-chien/</link>
      <pubDate>Tue, 13 Jun 2017 19:28:32 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/pokio-esp-keikyu-chien/</guid>
      
      <description>

&lt;p&gt;こんにちは、京急が大好きなポキオです。&lt;/p&gt;

&lt;p&gt;普段はAndroidエンジニアをやってますが、週末は趣味でArduinoやESP8266を触って心を落ち着かせています。先日、「京急が遅延すると光るガジェット」を作って&lt;a href=&#34;https://iotlt.connpass.com/&#34;&gt;IoTLT&lt;/a&gt;で発表を行ってきました。&lt;/p&gt;

&lt;p&gt;今回は、そこで発表したガジェットの作成段階や、技術的な仕組みを紹介します。（発表後に一部パーツ・コーディングを変更しています）&lt;/p&gt;

&lt;h2 id=&#34;今回作るもの&#34;&gt;今回作るもの&lt;/h2&gt;

&lt;p&gt;ESP8266というWi-Fiモジュールを搭載した開発ボード「ESPr® Developer」を使って京急のホームページから運行情報を取得し、遅延していたらLEDを光らせる仕組みを作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/01_map.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;筆者の環境&#34;&gt;筆者の環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MacBook Air（13-inch、Mid 2013）&lt;/li&gt;
&lt;li&gt;OS X Yosemite（v10.10.5）&lt;/li&gt;
&lt;li&gt;Arduino IDE 1.8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ESPr® DeveloperESP8266&lt;/li&gt;
&lt;li&gt;マイコン内臓RGB LED&lt;/li&gt;
&lt;li&gt;光らせたいガジェット（今回はBトレインショーティ）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;主なパーツ&#34;&gt;主なパーツ&lt;/h2&gt;

&lt;h3 id=&#34;espr-developer&#34;&gt;ESPr® Developer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/02_esper.png&#34; alt=&#34;画像&#34; /&gt;
&lt;a href=&#34;https://www.switch-science.com/catalog/2500/&#34;&gt;スイッチサイエンス&lt;/a&gt;さんで売られている、ESP8266というWi-Fiモジュールを搭載した開発ボードです。素のESP8266を直接触るのはハードルが高いですが、USB-シリアル変換やレギュレータ、リセットスイッチなど実装済みで、Arduino IDEでも開発できるため便利です。&lt;/p&gt;

&lt;p&gt;ただし、筆者の開発環境ではArduino IDEからコードを流し込む際に、一手間必要でした。詳しくはこちら。&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://qiita.com/shanonim/items/68fab6dc28b72b31a258&#34;&gt;ESPr Developer（ESP-WROOM-02開発ボード）で &amp;ldquo;warning: espcomm_sync failed&amp;rdquo; と表示される場合の対処&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;マイコン内蔵rgb-led&#34;&gt;マイコン内蔵RGB LED&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/03_led.png&#34; alt=&#34;画像&#34; /&gt;
秋葉原の&lt;a href=&#34;http://akizukidenshi.com/catalog/g/gI-08412/&#34;&gt;秋月電子通商&lt;/a&gt;さんで1個40円で売られているものを使用します。通常のLEDは足が2本ですが、こちらは足が4本。これらを制御することで、様々な色でLEDを光らせることができます。ESP8266（Arduino）向けに便利なライブラリが公開されているので、今回はこれを使ってコーディングしていきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_NeoPixel&#34;&gt;Adafruit NeoPixel Library&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;bトレインショーティー&#34;&gt;Bトレインショーティー&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/04_train.png&#34; alt=&#34;画像&#34; /&gt;
&lt;a href=&#34;https://bandai-hobby.net/train/&#34;&gt;Bトレインショーティー&lt;/a&gt;はバンダイさんから発売されている、自分で組み立てるタイプの鉄道模型です。特徴は、何と言っても可愛さ。実車のディテールを表現しつつ、車両の長さをギュッと縮めてコミカルなルックスになっています。今回は（もちろん京急の）2100形をチョイス。京急の中で好きな車両の一つです。&lt;/p&gt;

&lt;h2 id=&#34;ガジェットを作ってみる&#34;&gt;ガジェットを作ってみる&lt;/h2&gt;

&lt;h3 id=&#34;京急の2100形車両の組み立て&#34;&gt;京急の2100形車両の組み立て&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/05_keikyu1.png&#34; alt=&#34;画像&#34; /&gt;
なにはともあれ、京急の車両を組み立てるところから始めます。Bトレインショーティーの京急2100形は、塗装済みで接着剤不要で組み立てができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/06_keikyu2.png&#34; alt=&#34;画像&#34; /&gt;
久しぶりのプラモデルにテンションがアガります。&lt;/p&gt;

&lt;h3 id=&#34;マイコン内蔵rgb-ledを埋め込む&#34;&gt;マイコン内蔵RGB LEDを埋め込む&lt;/h3&gt;

&lt;p&gt;出来上がった京急の車両にLEDを埋め込んでいきます。ここで便利なのがサンハヤトさんの&lt;a href=&#34;http://www.sunhayato.co.jp/material2/index.php/item?cell003=%E3%83%A6%E3%83%8B%E3%83%90%E3%83%BC%E3%82%B5%E3%83%AB%E5%9F%BA%E6%9D%BF%E8%A3%BD%E5%93%81&amp;amp;cell004=%E4%B8%AD%E5%9E%8B%E3%83%A6%E3%83%8B%E3%83%90%E3%83%BC%E3%82%B5%E3%83%AB%E5%9F%BA%E6%9D%BF&amp;amp;name=%E8%96%84%E5%9E%8B%E3%83%A6%E3%83%8B%E3%83%90%E3%83%BC%E3%82%B5%E3%83%AB%E5%9F%BA%E6%9D%BF+UB-THN01&amp;amp;id=722&amp;amp;label=1&#34;&gt;ハサミで切れるユニバーサル基板&lt;/a&gt;です。
&lt;img src=&#34;https://dotstud.io/img/blog/099/07_universal1.png&#34; alt=&#34;画像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;謳い文句の通り、ハサミで自由にカットができて、今回のような小さい車両にも基板を収めることができます。
&lt;img src=&#34;https://dotstud.io/img/blog/099/08_universal2.png&#34; alt=&#34;画像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで簡単に、そしてその場で車両ピッタリの基板ができました。
&lt;img src=&#34;https://dotstud.io/img/blog/099/09_rgb_led.png&#34; alt=&#34;画像&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配線&#34;&gt;配線&lt;/h3&gt;

&lt;p&gt;マイコン内蔵RGB LEDは先述の通り足が4本あり、電源（VDD）とグラウンド（GND）に加えて、制御信号の入出力（DIN・DO）があります。DIN・DOは図のように数珠つなぎで配線します。
&lt;img src=&#34;https://dotstud.io/img/blog/099/10_rgb_led2.png&#34; alt=&#34;画像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;電源とグラウンドは共通で、それぞれESPr® DeveloperのVOUTとGNDに接続します。大元のDINはPIN4に接続します。&lt;/p&gt;

&lt;h3 id=&#34;遅延情報の取得ロジック&#34;&gt;遅延情報の取得ロジック&lt;/h3&gt;

&lt;p&gt;WebAPI等は使用せずに、10分に一度、&lt;a href=&#34;http://unkou.keikyu.co.jp/&#34;&gt;京急の運行情報ページ&lt;/a&gt;にアクセスして情報を取得します。&lt;/p&gt;

&lt;p&gt;ESPr® Developerから運行情報の文言をHTTP-GETで取得して、その文言に&lt;strong&gt;特定の文字列&lt;/strong&gt;が含まれるかどうかで運行状態を推測します。具体的には・・・&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「&lt;strong&gt;受託&lt;/strong&gt;」という文字列が含まれていたら、他社線からの振替輸送受託のために遅延していると判断する&lt;/li&gt;
&lt;li&gt;「&lt;strong&gt;見合わせ&lt;/strong&gt;」という文字列が含まれていたら、運転見合わせが発生していると判断する&lt;/li&gt;
&lt;li&gt;「&lt;strong&gt;乱れ&lt;/strong&gt;」という文字列が含まれていたら、ダイヤが大幅に乱れていると判断する&lt;/li&gt;
&lt;li&gt;「&lt;strong&gt;遅れ&lt;/strong&gt;」や「&lt;strong&gt;運休&lt;/strong&gt;」が含まれていたら、ダイヤが少し乱れていると判断する&lt;/li&gt;
&lt;li&gt;「&lt;strong&gt;平常&lt;/strong&gt;」が含まれていたら、平常運転であると判断する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このような感じです。そして、運転見合わせであれば赤い点滅、ダイヤが少し乱れているときは黄色い点滅をさせるといった感じで、運行状態に応じてマイコン内蔵RGB LEDの光り方を変えることで、運行状態をひと目で把握することができます。&lt;/p&gt;

&lt;p&gt;ちなみに、他社線からの振替輸送受託が理由で京急が遅延しているときは、個人的にすこし残念な気持ちになるので、光り方を変えています（笑）&lt;/p&gt;

&lt;h3 id=&#34;espr-developerのコーディング&#34;&gt;ESPr® Developerのコーディング&lt;/h3&gt;

&lt;p&gt;かなり無理矢理ですが、こんな感じでコーディングしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;ESP8266WiFi.h&amp;gt;
#include &amp;lt;WiFiClient.h&amp;gt;
#include &amp;lt;Adafruit_NeoPixel.h&amp;gt;

#define PIN 4 // DINを接続しているPIN
#define NUMLED 4 // マイコン内蔵RGB LEDの個数
#define SSID &amp;quot;（Wi-FiアクセスポイントのSSID）&amp;quot;
#define PASSWORD &amp;quot;（Wi-Fiアクセスポイントのパスワード）&amp;quot;
#define KEIKYU_PAGE &amp;quot;unkou.keikyu.co.jp&amp;quot; // 運行情報のページ
#define INTERVAL_SEC 10 * 60 // ポーリング間隔

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMLED, PIN, NEO_RGB + NEO_KHZ800);

void setup() {
  // Serialの初期化
  Serial.begin(115200);
  Serial.println(&amp;quot;&amp;quot;);

  // マイコン内蔵RGB LEDの初期化
  pixels.begin();
}

void loop() {
  // Wi-Fi接続開始
  connectWifi();

  // 京急の運行ページから運行情報取得
  String trainInfo = getTrainInfo();

  // Wi-Fi接続終了
  disconnectWifi();

  // 「受託」という文字が含まれていたら、他社からの振替輸送受託で遅延していると判断
  if (trainInfo.indexOf(&amp;quot;受託&amp;quot;) &amp;gt; 0) {
    Serial.println(&amp;quot;振替輸送受託！&amp;quot;);
    blinkLikePartyPeople(INTERVAL_SEC);
    return;
  }

  // 「見合わせ」という文字が含まれていたら、運転見合わせが発生していると判断
  if (trainInfo.indexOf(&amp;quot;見合わせ&amp;quot;) &amp;gt; 0) {
    Serial.println(&amp;quot;運転見合わせ！&amp;quot;);
    blinkRed(INTERVAL_SEC);
    return;
  }

  // 「乱れ」という文字が含まれていたら、ダイヤが大幅に乱れていると判断
  if (trainInfo.indexOf(&amp;quot;乱れ&amp;quot;) &amp;gt; 0) {
    Serial.println(&amp;quot;大幅に乱れている！&amp;quot;);
    blinkYellowAndRed(INTERVAL_SEC);
    return;
  }

  // 「遅れ」「運休」という文字が含まれていたら、ダイヤが少し乱れていると判断
  if (trainInfo.indexOf(&amp;quot;遅れ&amp;quot;) &amp;gt; 0 || trainInfo.indexOf(&amp;quot;運休&amp;quot;) &amp;gt; 0) {
    Serial.println(&amp;quot;遅延！&amp;quot;);
    blinkYellow(INTERVAL_SEC);
    return;
  }

  // 「平常」という文字が含まれていたら、平常運転をしていると判断
  if (trainInfo.indexOf(&amp;quot;平常&amp;quot;) &amp;gt; 0) {
    Serial.println(&amp;quot;たぶん平常通り運転！&amp;quot;);
    delay(INTERVAL_SEC * 1000);
    return;
  }

  // 運行情報取得エラーかもしれないので、10秒待ってもう一度取得する
  blinkWhite(10);
}

// Wi-Fi接続
void connectWifi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(SSID, PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(&amp;quot;.&amp;quot;);
    blinkWhite(3);
  }

  Serial.println(&amp;quot;Wi-Fi接続完了&amp;quot;);
}

// Wi-Fi切断
void disconnectWifi() {
  WiFi.disconnect();
  Serial.println(&amp;quot;Wi-Fi切断完了&amp;quot;);
}

// 運行情報の文字列取得
String getTrainInfo() {
  WiFiClient client;

  if ( !client.connect(KEIKYU_PAGE, 80) ) {
    // 接続エラー
    return String(&amp;quot;&amp;quot;);
  }

  // HTTP-GET
  // レスポンスのLengthが長すぎるとエラーになることがあったのでRangeを指定している
  client.print(String(&amp;quot;GET &amp;quot;) + &amp;quot;/&amp;quot; + &amp;quot; HTTP/1.1\r\n&amp;quot; +
               &amp;quot;Host: &amp;quot; + KEIKYU_PAGE + &amp;quot;\r\n&amp;quot; +
               &amp;quot;Range: bytes=8000-9000\r\n&amp;quot; +
               &amp;quot;Connection: close\r\n\r\n&amp;quot;);
  client.println();

  delay(1000);

  String body = &amp;quot;&amp;quot;;
  String trainInfo = &amp;quot;&amp;lt;!-- ======================== 運行情報 =================================== --&amp;gt;&amp;quot;;

  while (client.available()) {
    body += client.readStringUntil(&#39;\r&#39;);
  }

  // レスポンスから運行情報部分だけを切り抜く
  body = body.substring(body.indexOf(trainInfo) + trainInfo.length());
  body = body.substring(0, body.indexOf(trainInfo));

  return body;
}

// 白い点滅
void blinkWhite(int sec) {
  int count = 0;

  while (count &amp;lt; sec) {
    for (int i = 0; i &amp;lt; 256; i += 5) {
      setColor( i, i, i);
    }

    for (int i = 255; i &amp;gt;= 0; i -= 5) {
      setColor( i, i, i);
    }

    count++;
  }
}

//　黄色い点滅
void blinkYellow(int sec) {
  int count = 0;

  while (count &amp;lt; sec) {
    for (int i = 0; i &amp;lt; 256; i += 5) {
      setColor( i, i, 0);
    }

    for (int i = 255; i &amp;gt;= 0; i -= 5) {
      setColor( i, i, 0);
    }

    count++;
  }
}

// 黄色と赤の点滅
void blinkYellowAndRed(int sec) {
  int count = 0;

  while (count &amp;lt; sec) {
    for (int i = 0; i &amp;lt; 256; i += 5) {
      setColor( i, 0, 0);
    }

    for (int i = 255; i &amp;gt;= 0; i -= 5) {
      setColor( i, 0, 0);
    }

    for (int i = 0; i &amp;lt; 256; i += 5) {
      setColor( i, i, 0);
    }

    for (int i = 255; i &amp;gt;= 0; i -= 5) {
      setColor( i, i, 0);
    }

    count++;
    count++;
  }
}

// 赤い点滅
void blinkRed(int sec) {
  int count = 0;

  while (count &amp;lt; sec) {
    for (int i = 0; i &amp;lt; 256; i += 5) {
      setColor( i, 0, 0);
    }

    for (int i = 255; i &amp;gt;= 0; i -= 5) {
      setColor( i, 0, 0);
    }

    count++;
  }
}

// パリピな輝き
void blinkLikePartyPeople(int sec) {
  int count = 0;

  while (count &amp;lt; sec) {
    for (int i = 0; i &amp;lt; 20; i++) {
      setRandomColor();
      delay(50);
    }

    count++;
  }
}

// LEDを指定した色で光らせる
void setColor(int r, int g, int b) {
  for (int i = 0 ; i &amp;lt; NUMLED; i++) {
    pixels.setPixelColor(i, pixels.Color(r, g, b));
    pixels.show();
  }
  delay(10);
}

// LEDをランダムな色で光らせる
void setRandomColor() {
  for (int i = 0 ; i &amp;lt; NUMLED; i++) {
    pixels.setPixelColor(i, pixels.Color(64 * random(1, 5) - 1 , 64 * random(1, 5) - 1 , 64 * random(1, 5) - 1 ));
    pixels.show();
  }
  delay(10);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際に光らせてみたのがこちら。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/11_setting.png&#34; alt=&#34;画像&#34; /&gt;
情報取得中に実行される白い点滅。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/12_late.png&#34; alt=&#34;画像&#34; /&gt;
運転見合わせ時に実行される赤い点滅。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/099/13_transport.png&#34; alt=&#34;画像&#34; /&gt;
最後は他社線からの振替輸送受託時に実行されるパリピ点滅。画像では少しわかりづらいですね……。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回は、京急が遅延していると光るガジェットをESPr® Developerをつかって作成しました。情報の取得方法はかなり力技でしたが、WEB上の情報を簡単に可視化できたことは良かったです。&lt;/p&gt;

&lt;p&gt;実際にこのガジェットは、職場のデスクで稼働していて、いつも京急の運行情報を知らせてくれます。今後は他社線バージョンの作成を検討しています。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>電子工作でパリピな夏を独り占め！サイバーパンク大五郎！！</title>
      <link>https://dotstud.io/blog/gyaruden-party-people-daigoro/</link>
      <pubDate>Thu, 08 Jun 2017 20:03:04 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/gyaruden-party-people-daigoro/</guid>
      
      <description>

&lt;p&gt;はじめまして、ギャル電きょうこです。ギャルによるギャルのためのテクノロジーを提案する電子工作ユニット、ギャル電で活動しておりまっす。夢はドンキでアルドゥイーノが買える世の中です。&lt;/p&gt;

&lt;p&gt;この記事では、&lt;strong&gt;”Lチカ以上、IoT未満”&lt;/strong&gt; な電子工作テクニックでも楽しく作れてすぐに遊べるアイテムを紹介していきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;今回の工作は夏フェスでパリピにめっちゃモテるやつ&#34;&gt;今回の工作は夏フェスでパリピにめっちゃモテるやつ！&lt;/h2&gt;

&lt;p&gt;夏といえば、夏フェス！夏フェスといえばパリピ！パリピといえば酒！！！です。&lt;/p&gt;

&lt;p&gt;ということで、今回はパリピに激モテな電子工作、&lt;strong&gt;甲類焼酎大五郎４ℓペットボトル&lt;/strong&gt;を作ってみました。&lt;/p&gt;

&lt;h2 id=&#34;なぜ大五郎なのか&#34;&gt;なぜ大五郎なのか&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/109/1.png&#34; alt=&#34;&#34; /&gt;
渋谷の街を歩いていたらセンター街で片手にスマホ、片手に4ℓの大五郎（半分減ってる）をもっているギャルをみかけました。&lt;/p&gt;

&lt;p&gt;デニムのショーパンにベアトップ、そして大五郎。強めギャルファッションにこんなにも大五郎がジャストフィットしていてエモさしかありませんでした。&lt;/p&gt;

&lt;p&gt;このエモさにさらにLEDを加えたら、絶対に最高なものができる！光る大五郎とか超未来！！なんでみんな光らせないわけ？！超機会損失してる！！！！&lt;/p&gt;

&lt;p&gt;ないなら今すぐ作るしかない！というわけで、とりあえず大五郎を光らせることにしたのです。&lt;/p&gt;

&lt;h2 id=&#34;とりあえず光らす方法&#34;&gt;とりあえず光らす方法&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/109/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;材料&#34;&gt;材料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;モバイルバッテリー&lt;/li&gt;
&lt;li&gt;LEDテープ（WS2812B）&lt;/li&gt;
&lt;li&gt;MicroUSBケーブル&lt;/li&gt;
&lt;li&gt;ArduinoまたはArduino互換機（今回はGR-CITRUSとAdafruit Trinket５Vを使用しました）&lt;/li&gt;
&lt;li&gt;ジャンパワイヤと電線&lt;/li&gt;
&lt;li&gt;ブレッドボード&lt;/li&gt;
&lt;li&gt;両面テープ&lt;/li&gt;
&lt;li&gt;ダクトテープ&lt;/li&gt;
&lt;li&gt;大五郎4ℓ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ボードについては、わたしは小さくてUSBケーブルを差す口がもともとついているやつが好みなので、今回は&lt;strong&gt;GR-CITRUS&lt;/strong&gt;と&lt;strong&gt;Adafruit Trinket５V&lt;/strong&gt;を使ってみました。USBケーブルの口が付いたボードは、モバイルバッテリーをつなげば動くのでめっちゃ便利です。&lt;/p&gt;

&lt;p&gt;環境導入については、ボードの名前と自分の使っているPCのOSのバージョン（Windows XXとかMac OS XXとか）でググるとだいたい親切な先人の情報がみつかると思いまっす。&lt;/p&gt;

&lt;h3 id=&#34;配線は3本だからそんなに難しくない&#34;&gt;配線は3本だからそんなに難しくない&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/109/3.png&#34; alt=&#34;&#34; /&gt;
NeoPixel LEDテープ（WS2812B）は、GND、５V、信号（D0）の三本の線をそれぞれArduino（または互換機）のGND、５V、デジタルピンにつなぐと光らせることができます。&lt;/p&gt;

&lt;p&gt;今回の光る大五郎のように、底面とハンドルの部分だけLEDを使いたい場合は、LEDテープを光らせたい部分の長さに切ってテープとテープの間を電線で3本つなぎなおしたらオッケーです。&lt;/p&gt;

&lt;p&gt;配線に必要な電線の長さは、適当に実物において測りました。仮置きするときはマスキングテープで貼るとやりやすいです。&lt;/p&gt;

&lt;h3 id=&#34;ledを光らせるプログラムを入れる&#34;&gt;LEDを光らせるプログラムを入れる&lt;/h3&gt;

&lt;h4 id=&#34;gr-citrus&#34;&gt;GR-CITRUS&lt;/h4&gt;

&lt;p&gt;GR-CITRUSはWebコンパイラを使ってブラウザでスケッチを作成することができます。詳しい書き込み方法は下記を参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;http://gadget.renesas.com/ja/product/citrus_sp2.html&#34;&gt;GR-CITRUS 特設Webコンパイラでスケッチ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Adafruit_NeoPixcel.cpp&lt;/code&gt;と&lt;code&gt;Adafruit_NeoPixel.h&lt;/code&gt;の二つのファイルを下記ページからダウンロードして、GR-CITRUSで作成したプロジェクトにアップロードする必要があります。（Webコンパイラ使用時）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_NeoPixel&#34;&gt;https://github.com/adafruit/Adafruit_NeoPixel&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Arduino.h&amp;gt;
#include &amp;lt;Adafruit_NeoPixel.h&amp;gt;
#ifdef __AVR__
  #include &amp;lt;avr/power.h&amp;gt;
#endif

//neopixcel用の設定部分
//neopixelを接続するPINを設定
#define PIN_LED 12
//neopixelのLEDの数を設定
#define NUM_LEDS 12

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, PIN_LED, NEO_GRB + NEO_KHZ800);

bool oldState = HIGH;
int showType = 0;

void showStrip() {
 #ifdef ADAFRUIT_NEOPIXEL_H
   strip.show();
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   FastLED.show();
 #endif
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
 #ifdef ADAFRUIT_NEOPIXEL_H
   strip.setPixelColor(Pixel, strip.Color(red, green, blue));
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   leds[Pixel].r = red;
   leds[Pixel].g = green;
   leds[Pixel].b = blue;
 #endif
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i &amp;lt; 17; i++ ) {
    setPixel(i, red, green, blue);
  }
  showStrip();
}

// ここからNeoPixelのアニメーション設定


void FadeInOut(byte red, byte green, byte blue){
  float r, g, b;

  for(int k = 0; k &amp;lt; 256; k=k+1) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }

  for(int k = 255; k &amp;gt;= 0; k=k-2) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }
}


void Strobe(byte red, byte green, byte blue, int StrobeCount, int FlashDelay, int EndPause){
  for(int j = 0; j &amp;lt; StrobeCount; j++) {
    setAll(red,green,blue);
    showStrip();
    delay(FlashDelay);
    setAll(0,0,0);
    showStrip();
    delay(FlashDelay);
  }

 delay(EndPause);
}


void Sparkle(byte red, byte green, byte blue, int SpeedDelay) {
  int Pixel = random(NUM_LEDS);
  setPixel(Pixel,red,green,blue);
  showStrip();
  delay(SpeedDelay);
  setPixel(Pixel,0,0,0);
}

void RunningLights(byte red, byte green, byte blue, int WaveDelay) {
  int Position=0;

  for(int i=0; i&amp;lt;NUM_LEDS*2; i++)
  {
      Position++; // = 0; //Position + Rate;
      for(int i=0; i&amp;lt;NUM_LEDS; i++) {
        // sine wave, 3 offset waves make a rainbow!
        //float level = sin(i+Position) * 127 + 128;
        //setPixel(i,level,0,0);
        //float level = sin(i+Position) * 127 + 128;
        setPixel(i,((sin(i+Position) * 127 + 128)/255)*red,
                   ((sin(i+Position) * 127 + 128)/255)*green,
                   ((sin(i+Position) * 127 + 128)/255)*blue);
      }

      showStrip();
      delay(WaveDelay);
  }
}

byte * Wheel(byte WheelPos) {
  static byte c[3];

  if(WheelPos &amp;lt; 85) {
   c[0]=WheelPos * 3;
   c[1]=255 - WheelPos * 3;
   c[2]=0;
  } else if(WheelPos &amp;lt; 170) {
   WheelPos -= 85;
   c[0]=255 - WheelPos * 3;
   c[1]=0;
   c[2]=WheelPos * 3;
  } else {
   WheelPos -= 170;
   c[0]=0;
   c[1]=WheelPos * 3;
   c[2]=255 - WheelPos * 3;
  }

  return c;
}


void rainbowCycle(int SpeedDelay) {
  byte *c;
  uint16_t i, j;

  for(j=0; j&amp;lt;256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i&amp;lt; NUM_LEDS; i++) {
      c=Wheel(((i * 256 / NUM_LEDS) + j) &amp;amp; 255);
      setPixel(i, *c, *(c+1), *(c+2));
    }
    showStrip();
    delay(SpeedDelay);
  }
}


void Twinkle(byte red, byte green, byte blue, int Count, int SpeedDelay, boolean OnlyOne) {
  setAll(0,0,0);

  for (int i=0; i&amp;lt;Count; i++) {
     setPixel(random(NUM_LEDS),red,green,blue);
     showStrip();
     delay(SpeedDelay);
     if(OnlyOne) {
       setAll(0,0,0);
     }
   }
}
void TwinkleRandom(int Count, int SpeedDelay, boolean OnlyOne) {
  setAll(0,0,0);

  for (int i=0; i&amp;lt;Count; i++) {
     setPixel(random(NUM_LEDS),random(0,255),random(0,255),random(0,255));
     showStrip();
     delay(SpeedDelay);
     if(OnlyOne) {
       setAll(0,0,0);
     }
   }
}

void setup()
{
    pinMode(PIN_LED0, OUTPUT);
    digitalWrite(PIN_LED, LOW);
   #if defined (__AVR_ATtiny85__)
   if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
}

void loop()
{
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x36, 0xEB, 0xFF);
    FadeInOut(0x36, 0xEB, 0xFF);
    FadeInOut(0x36, 0xEB, 0xFF);
    Twinkle(0xff, 40, 99, 10, 50, false);
    Twinkle(0xff, 40, 99, 10, 50, false);
    TwinkleRandom(20, 100, false);
    TwinkleRandom(20, 100, false);
    TwinkleRandom(20, 100, false);
    TwinkleRandom(20, 100, false);
    TwinkleRandom(20, 100, false);
    TwinkleRandom(20, 100, false);
    RunningLights(0x26,0xFF,0x7D, 50);
   RunningLights(0x26,0xFF,0x7D, 50);
    RunningLights(0x26,0xFF,0x7D, 50);
    RunningLights(0xDD,0xFF,0x33, 50);
     RunningLights(0xDD,0xFF,0x33, 50);
      RunningLights(0xDD,0xFF,0x33, 50);
    RunningLights(0xFF,0xAE,0x0D, 50);
    RunningLights(0xFF,0xAE,0x0D, 50);
    RunningLights(0xFF,0xAE,0x0D, 50);
    RunningLights(0xFF,0x21,0x21, 50);
    RunningLights(0xFF,0x21,0x21, 50);
    RunningLights(0xFF,0x21,0x21, 50);
    RunningLights(0xFF,0x54,0x93, 50);
    RunningLights(0xFF,0x54,0x93, 50);
    RunningLights(0xFF,0x54,0x93, 50);
    RunningLights(0x7A,0x7F,0xFF, 50);
    RunningLights(0x7A,0x7F,0xFF, 50);
    RunningLights(0x7A,0x7F,0xFF, 50);
    Strobe(0xff, 0xff, 0xff, 10, 50, 1000);
    Strobe(0xff, 0xff, 0xff, 10, 50, 1000);
    Strobe(0xff, 0xAB, 0xf9, 10, 50, 1000);
    Strobe(0xff, 0xAB, 0xf9, 10, 50, 1000);
    rainbowCycle(20);

  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;adafruit-trinket&#34;&gt;Adafruit Trinket&lt;/h4&gt;

&lt;p&gt;TrinketはArduino IDEでスケッチを作成し書き込みます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://learn.adafruit.com/introducing-trinket&#34;&gt;Introduction Trinket&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;Adafruit_NeoPixel.h&amp;gt;
#ifdef __AVR__
  #include &amp;lt;avr/power.h&amp;gt;
#endif

//neopixcel用の設定部分

//neopixelを接続するPINを設定
#define PIN_LED 4

//neopixelのLEDの数を設定
#define NUM_LEDS 12

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, PIN_LED, NEO_GRB + NEO_KHZ800);

bool oldState = HIGH;
int showType = 0;

void showStrip() {
 #ifdef ADAFRUIT_NEOPIXEL_H
   strip.show();
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   FastLED.show();
 #endif
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
 #ifdef ADAFRUIT_NEOPIXEL_H
   strip.setPixelColor(Pixel, strip.Color(red, green, blue));
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   leds[Pixel].r = red;
   leds[Pixel].g = green;
   leds[Pixel].b = blue;
 #endif
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i &amp;lt; 17; i++ ) {
    setPixel(i, red, green, blue);
  }
  showStrip();
}

// ここからNeoPixelのアニメーション設定


void FadeInOut(byte red, byte green, byte blue){
  float r, g, b;

  for(int k = 0; k &amp;lt; 256; k=k+1) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }

  for(int k = 255; k &amp;gt;= 0; k=k-2) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }
}

void Strobe(byte red, byte green, byte blue, int StrobeCount, int FlashDelay, int EndPause){
  for(int j = 0; j &amp;lt; StrobeCount; j++) {
    setAll(red,green,blue);
    showStrip();
    delay(FlashDelay);
    setAll(0,0,0);
    showStrip();
    delay(FlashDelay);
  }

 delay(EndPause);
}

void Twinkle(byte red, byte green, byte blue, int Count, int SpeedDelay, boolean OnlyOne) {
  setAll(0,0,0);

  for (int i=0; i&amp;lt;Count; i++) {
     setPixel(random(NUM_LEDS),red,green,blue);
     showStrip();
     delay(SpeedDelay);
     if(OnlyOne) {
       setAll(0,0,0);
     }
   }
}
void TwinkleRandom(int Count, int SpeedDelay, boolean OnlyOne) {
  setAll(0,0,0);

  for (int i=0; i&amp;lt;Count; i++) {
     setPixel(random(NUM_LEDS),random(0,255),random(0,255),random(0,255));
     showStrip();
     delay(SpeedDelay);
     if(OnlyOne) {
       setAll(0,0,0);
     }
   }
}

//

void setup()
{
    pinMode(PIN_LED, OUTPUT);
    digitalWrite(PIN_LED, LOW);
   #if defined (__AVR_ATtiny85__)

   if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  strip.begin();
  strip.show();
}

void loop()
{
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x1C, 0xFF, 0xB3);
    FadeInOut(0x36, 0xEB, 0xFF);
    FadeInOut(0x36, 0xEB, 0xFF);
    FadeInOut(0x36, 0xEB, 0xFF);
    Twinkle(0xff, 40, 99, 10, 50, false);
    Twinkle(0xff, 40, 99, 10, 50, false);
    TwinkleRandom(20, 100, false);
    TwinkleRandom(20, 100, false);
    Strobe(0xff, 0xff, 0xff, 10, 50, 1000);
    Strobe(0xff, 0xff, 0xff, 10, 50, 1000);
    Strobe(0xff, 0xAB, 0xf9, 10, 50, 1000);
    Strobe(0xff, 0xAB, 0xf9, 10, 50, 1000);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TrinketはGR-CITRUS用に書いたコードをコピペしたらスケッチが大きすぎ！って怒られたのでだいぶコードを削りました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/109/4.png&#34; alt=&#34;&#34; /&gt;
配線のはんだ付けと動作テストが終わったら、ダクトテープで部品を大五郎に貼り付けます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/109/5.png&#34; alt=&#34;&#34; /&gt;
大五郎の背面に貼り付けられたバッテリーとボード、LEDテープ類。ダクトテープと両面テープがあればなんでも貼り付けられて超便利です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一般的には不審物としかいいようのない見た目&lt;/strong&gt;のため、電車や駅のトイレ等の公共の場所への置き忘れは要注意です。&lt;/p&gt;

&lt;h2 id=&#34;実際にパーティで大五郎を光らせてみよう&#34;&gt;実際にパーティで大五郎を光らせてみよう！&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/109/6.png&#34; alt=&#34;&#34; /&gt;
作成した光る大五郎をさっそく現場(パーティ)に投入してみました。&lt;/p&gt;

&lt;p&gt;結果、&lt;strong&gt;最＆高&lt;/strong&gt;！！！！！&lt;/p&gt;

&lt;p&gt;暗いところで幻想的に光る大五郎は、インテリアとしても飲み物としても威力を発揮し新しいパーティアイテムとして流行る予感しかありませんでした。&lt;/p&gt;

&lt;p&gt;残念ながら盛り上がって飲みすぎたため、写真があまり残っていません……。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4ℓはなかなかに重い&lt;/strong&gt;ということと、&lt;strong&gt;酔っぱらったパリピにブレッドボードから配線を抜かれがち&lt;/strong&gt;ということ以外には特に問題なく使用できました。&lt;/p&gt;

&lt;p&gt;飲み終わったら、ダクトテープをはがして新しい大五郎にLEDユニットを貼るスタイルでいつでも光る大五郎が楽しめるので、改良してまた新たなパーティに出かけようと思います。&lt;/p&gt;

&lt;p&gt;みんなもさっそく作ってパーティにでかけちゃおう！パリピに超モテるよ☆&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.1</title>
      <link>https://dotstud.io/blog/hexo-static-site-vol1/</link>
      <pubDate>Wed, 07 Jun 2017 17:15:30 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hexo-static-site-vol1/</guid>
      
      <description>

&lt;p&gt;こんにちは、エンジニアのちゃんとくです。ひょんなことから&lt;a href=&#34;https://nodejs.connpass.com/&#34;&gt;&lt;strong&gt;Node女学園&lt;/strong&gt;&lt;/a&gt;というNode.jsを学ぶ女性のためのコミュニティを立ち上げました。&lt;/p&gt;

&lt;p&gt;イベントを数回開催しましたが、毎回のナレッジが流れていくのがもったいない……。ということでNode女学園のブログを開設しました！
&lt;img src=&#34;https://dotstud.io/img/blog/105/blog.png&#34; alt=&#34;&#34; /&gt;
現在公開しているページは&lt;a href=&#34;https://nodegirls-jp.github.io/&#34;&gt;&lt;strong&gt;こちら&lt;/strong&gt;&lt;/a&gt;、ブログのレポジトリは&lt;a href=&#34;https://github.com/nodegirls-jp/nodegirls-jp.github.io&#34;&gt;&lt;strong&gt;こちら&lt;/strong&gt;&lt;/a&gt;。（鋭意開発中です）&lt;/p&gt;

&lt;p&gt;こちらのページはNode.js製の静的サイトジェネレータ「&lt;strong&gt;Hexo&lt;/strong&gt;」で開発して「&lt;strong&gt;Github Pages&lt;/strong&gt;」で公開しています。手軽に無料で公開できますので、制作過程を紹介していきたいと思います！&lt;/p&gt;

&lt;p&gt;今回は環境構築からGithub Pagesで公開するところまでやってみます。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;h3 id=&#34;静的サイトジェネレータって&#34;&gt;静的サイトジェネレータって？&lt;/h3&gt;

&lt;p&gt;静的サイトジェネレータは、HTML/CSS/JavaScriptで構築される静的サイトをコマンドラインで簡単に生成することができるツールです。ヘッダやフッタの共通化、簡易ルーティング、MarkdownファイルのHTML変換など&lt;strong&gt;面倒な部分をよしなにやってくれます&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Ruby製のJekyllやGo製のHUGO、React.js製のGatsby……と様々な言語で組まれたジェネレータがありますが、試してみる分にはあまり大きな違いはないので好みに合わせて選びましょう！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;Static Site Generators&lt;/a&gt;というサイトで静的サイトジェネレータの一覧が見れます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/ranking.png&#34; alt=&#34;&#34; /&gt;
スター順に並べてみると、Jekyll、HUGOに続いてかなり人気ですね！&lt;/p&gt;

&lt;p&gt;ちなみに&lt;strong&gt;dotstudioのサイトはHUGO&lt;/strong&gt;で生成されています。こちらの入門についてはデザイナーのちゃちゃまるくんが頑張っているのでご参照ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/hugo-for-designers-vol1/&#34;&gt;デザイナーの僕がHugoを使ってポートフォリオサイトを作ってみる #1【準備編】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;github-pagesって&#34;&gt;Github Pagesって？&lt;/h3&gt;

&lt;p&gt;Githubが提供する、&lt;strong&gt;無料で静的サイトを公開できるホスティングサービス&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;Githubのアカウントやorgnization、プロジェクトごとにサイトを制作することができ、&lt;strong&gt;pushしていくだけ&lt;/strong&gt;で公開できるのでgit管理に慣れている人にとってはかなり手軽ですね！&lt;/p&gt;

&lt;p&gt;今回はGithub Pagesを作成するアカウント（またはorgnization）が作成されている前提で進めますので、お持ちでない方は登録から始めてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;またプロジェクトに紐付けて公開する場合は手順が異なりますが本記事では割愛します。&lt;/p&gt;

&lt;h2 id=&#34;githubにレポジトリを作成しよう&#34;&gt;Githubにレポジトリを作成しよう&lt;/h2&gt;

&lt;p&gt;まずはGithubにGithub Pages用のレポジトリを作成しましょう。&lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;にアクセスし、[New Repository]を選択します。
&lt;img src=&#34;https://dotstud.io/img/blog/105/new.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「Create a new repository」のページに移動します。
&lt;img src=&#34;https://dotstud.io/img/blog/105/create.png&#34; alt=&#34;&#34; /&gt;
「&lt;strong&gt;Owner&lt;/strong&gt;」にはGithub Pagesを作成したいアカウントやorgnizationを指定します。今回はnodegirls-jpというorgnizationを指定します。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;Repository name&lt;/strong&gt;」には&lt;code&gt;owner名.github.io&lt;/code&gt;と入力します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;このフォーマットに従わないとGithub Pagesが作成されない&lt;/strong&gt;ので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/105/repos.png&#34; alt=&#34;&#34; /&gt;
レポジトリができました！公開URLは&lt;code&gt;https://owner名.github.io&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;SSHのアドレスは後ほど使うのでメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;雛形を作ってみよう&#34;&gt;雛形を作ってみよう&lt;/h2&gt;

&lt;p&gt;続いてGithub Pagesで公開するブログをHexoで作っていきます。&lt;/p&gt;

&lt;h3 id=&#34;開発環境構築&#34;&gt;開発環境構築&lt;/h3&gt;

&lt;p&gt;Hexoの開発は&lt;strong&gt;Node.jsが動く環境&lt;/strong&gt;で行います。まずはNode.jsをインストールしましょう。&lt;/p&gt;

&lt;p&gt;Node.jsのインストールには「nvm」や「nodebrew」を使うと便利です。下記ではnodebrewを使ったインストール方法を紹介しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/setup-new-mac-app/#node-js環境整備&#34;&gt;僕がMacを買い換えてすぐにいれるツール&amp;amp;すぐにする初期設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;続いてHexoのインストールです。下記のコマンドを実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g hexo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-g&lt;/code&gt;オプションをつけることでグローバルにインストールすることができます。&lt;/p&gt;

&lt;h3 id=&#34;コマンドで雛形生成&#34;&gt;コマンドで雛形生成&lt;/h3&gt;

&lt;p&gt;Hexoのコマンドでブログの雛形を生成します。&lt;/p&gt;

&lt;p&gt;プロジェクトを作りたい場所へ移動し、&lt;code&gt;hexo init [ブログ名]&lt;/code&gt;で作成です。今回は「nodegirls-jp」というブログ名にします。
&lt;img src=&#34;https://dotstud.io/img/blog/105/init.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;実行すると自動で&lt;code&gt;nodegirls-jp&lt;/code&gt;ディレクトリが作成されます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/ls.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ディレクトリの下へ移動して見てみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/105/files.png&#34; alt=&#34;&#34; /&gt;
ファイルとフォルダが作成されています。&lt;/p&gt;

&lt;p&gt;ここで&lt;code&gt;npm install&lt;/code&gt;を実行してモジュールをインストールします。
&lt;img src=&#34;https://dotstud.io/img/blog/105/npm.png&#34; alt=&#34;&#34; /&gt;
これだけで雛形が完成です！&lt;/p&gt;

&lt;h3 id=&#34;ローカルで確認する&#34;&gt;ローカルで確認する&lt;/h3&gt;

&lt;p&gt;ローカルサーバを立ち上げてブログを確認してみます。（この状態ではまだ公開されません。）
&lt;img src=&#34;https://dotstud.io/img/blog/105/server.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;起動したまま&lt;a href=&#34;http://localhost:4000/&#34;&gt;http://localhost:4000/&lt;/a&gt; へアクセスしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/105/sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ブログの雛形が作成されました！簡単…簡単……ッ！&lt;/p&gt;

&lt;h3 id=&#34;ブログの設定を追加&#34;&gt;ブログの設定を追加&lt;/h3&gt;

&lt;p&gt;主な設定は&lt;code&gt;_config.yml&lt;/code&gt;というファイルに記述します。エディタで&lt;code&gt;_config.yml&lt;/code&gt;を開きましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/105/config.png&#34; alt=&#34;&#34; /&gt;
こんな感じでブログに関する説明がずらっと記載されているので編集します。&lt;/p&gt;

&lt;p&gt;urlは先ほど作った&lt;code&gt;https://owner名.github.io&lt;/code&gt;を設定します。title, subtitle, authorなどはお好みで設定しましょう。日本語ブログの場合&lt;code&gt;language&lt;/code&gt;は&lt;code&gt;ja&lt;/code&gt;、&lt;code&gt;timezone&lt;/code&gt;は&lt;code&gt;Asia/Tokyo&lt;/code&gt;がおすすめです。&lt;/p&gt;

&lt;p&gt;今回の設定はこのようにしました。参考までに。
&lt;img src=&#34;https://dotstud.io/img/blog/105/config_sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一番下まで行くと&lt;code&gt;#Deployment&lt;/code&gt;の項目があります。デプロイのためにここを修正します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deploy:
  type: git
  repo: git@github.com:nodegirls-jp/nodegirls-jp.github.io.git
  branch: master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;repoには&lt;strong&gt;先ほど作成したレポジトリのSSHアドレスを記述&lt;/strong&gt;します。&lt;/p&gt;

&lt;p&gt;設定をローカルで確認するとこんな感じになっています。
&lt;img src=&#34;https://dotstud.io/img/blog/105/sample_local.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;反映されていない場合は一度&lt;code&gt;control&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt;でサーバを止め、&lt;code&gt;hexo server&lt;/code&gt;で起動しなおしてみてください。&lt;/p&gt;

&lt;h2 id=&#34;公開してみよう&#34;&gt;公開してみよう&lt;/h2&gt;

&lt;p&gt;いよいよ公開してみましょう。下記コマンドでビルド、公開を一度に行ってくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hexo deploy -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでエラーが出る場合は、以下のコマンドでデプロイツールをインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;公開されたページを確認してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/deploy.png&#34; alt=&#34;&#34; /&gt;
公開できました！&lt;/p&gt;

&lt;h2 id=&#34;記事を追加しよう&#34;&gt;記事を追加しよう&lt;/h2&gt;

&lt;p&gt;記事を追加してみましょう。&lt;code&gt;hexo new 記事名&lt;/code&gt;というコマンドで生成できます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/about.png&#34; alt=&#34;&#34; /&gt;
最初の記事なので&lt;code&gt;about&lt;/code&gt;という記事を作ってみました。デフォルトの設定では&lt;code&gt;サイトURL/YYYY/MM/DD/タイトル&lt;/code&gt;というURLになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/105/new_post.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;_posts&lt;/code&gt;の下に&lt;code&gt;about.md&lt;/code&gt;が作成されました。このファイルを編集します。&lt;/p&gt;

&lt;p&gt;title, dataには自動で値が付与されており、tagsには任意のタグを追加できます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/header.png&#34; alt=&#34;&#34; /&gt;
titleを修正して、「info」というタグを設定してみました。&lt;code&gt;---&lt;/code&gt;の下から記事本文をマークダウンで記述します。（HTMLも可）&lt;/p&gt;

&lt;p&gt;記事を&lt;code&gt;hexo d -g&lt;/code&gt;でデプロイします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/105/post_sample.png&#34; alt=&#34;&#34; /&gt;
記事が公開できました！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;サーバの整備やデプロイなどをほとんど意識せずに公開することができました！コマンドを使い慣れている人は本当に&lt;strong&gt;爆速開発&lt;/strong&gt;だったと思います。&lt;/p&gt;

&lt;p&gt;テーマやプラグインの追加で簡単に拡張できるので、どんどんカスタマイズしてみましょう。&lt;/p&gt;

&lt;p&gt;次回はテーマを当ててブログのデザインを変更してみます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wio NodeとIFTTTで簡単IoT！紫外線情報を取得してみよう</title>
      <link>https://dotstud.io/blog/wionode-ifttt-uv-ornament/</link>
      <pubDate>Tue, 06 Jun 2017 20:26:13 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/wionode-ifttt-uv-ornament/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioライターのゆっきん（&lt;a href=&#34;https://twitter.com/yukkin4649&#34;&gt;@yukkin4649&lt;/a&gt;）です。普段はシステムエンジニアをしています！&lt;/p&gt;

&lt;p&gt;IoTLTでのびすけさんから「電子工作でかわいいもの作ってくれ」という無茶ぶりを受けたので（笑）、女子の天敵&lt;strong&gt;紫外線指数を光って知らせてくれるオーナメント&lt;/strong&gt;を作ってみます！&lt;/p&gt;

&lt;p&gt;今回は「Wio Node」というスマホから設定できるデバイスと、ノンプログラミングでサービス連携ができる「IFTTT」というWebサービスを使います。初心者の私でも簡単にできたので是非挑戦してみてください。&lt;/p&gt;

&lt;h2 id=&#34;wio-nodeとは&#34;&gt;Wio Nodeとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/wio.png&#34; alt=&#34;&#34; /&gt;
「Wio Node」とはSeeed Studio社が開発したIoTデバイスで、Wi-Fiモジュールが初期搭載されています。対応のモジュールをさすだけで使え、スマートフォンで設定できるシンプルな設計が特徴です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.seeedstudio.com/Wio-Node-p-2637.html&#34;&gt;公式サイト&lt;/a&gt;によると&lt;strong&gt;IoTアプリケーション構築までたったの５分&lt;/strong&gt;だそうです。如何に簡単にできるのかが伺えます。&lt;/p&gt;

&lt;h2 id=&#34;iftttとは&#34;&gt;IFTTTとは&lt;/h2&gt;

&lt;p&gt;「IFTTT」では多数あるWebサービス同士を連携させ、自分好みの連携機能を作成することが出来ます。例えば【&lt;strong&gt;Twitterでお気に入りしたツイートをEvernoteに保存する&lt;/strong&gt;】等があります。&lt;/p&gt;

&lt;p&gt;他の人が作成した連携（ここではレシピと呼ぶ）も利用することができ、カスタマイズも可能。今回はこの「IFTTT」を使って紫外線取得サービスとWio Nodeを連携します。&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;① Wio Node本体（&lt;a href=&#34;https://dotstud.io/shop/wionode-social-remote-control/&#34;&gt;購入ページ&lt;/a&gt;）&lt;br /&gt;
② Grove LED Bar v2.0（型番：SEEED-104020006）&lt;br /&gt;
③給電用のMicro USBケーブル&lt;br /&gt;
④ スマートフォン（iOSまたはAndroid端末）&lt;br /&gt;
⑤ グリーンオーナメント SS（100円均一で購入）&lt;br /&gt;
⑥ 紙&lt;br /&gt;
⑦ テープ&lt;br /&gt;
⑧ ペン&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;筆者の環境&#34;&gt;筆者の環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MacBook Air 11-inch Early 2014&lt;/li&gt;
&lt;li&gt;OS X El Capitan　v10.11.6&lt;/li&gt;
&lt;li&gt;iPhone6（iOS 10.3.1）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;作り方&#34;&gt;作り方&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/2.png&#34; alt=&#34;&#34; /&gt;
ざっくりとした構成です。IFTTTを使って「Today&amp;rsquo;s weather report」からUV値を取得し、Wio NodeのLED Barで表示させます。&lt;/p&gt;

&lt;p&gt;それでは早速作っていきましょう。&lt;/p&gt;

&lt;h3 id=&#34;1-wio-nodeの設定&#34;&gt;1. Wio Nodeの設定&lt;/h3&gt;

&lt;h4 id=&#34;インストールとセットアップ&#34;&gt;インストールとセットアップ&lt;/h4&gt;

&lt;p&gt;ここではWio Node開発用アプリのインストールと設定をしていきます。Wio NodeはPC・モバイルバッテリー等からUSBケーブルで接続し給電しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/3.png&#34; alt=&#34;&#34; /&gt;
App Store等でWio Nodeアプリを検索し、インストールします。iOSでは「Wio Link」、Androidでは「Wio」と言う名称です。&lt;/p&gt;

&lt;p&gt;本記事ではiOSの「Wio Link」の画面で説明していきます。&lt;/p&gt;

&lt;p&gt;iOS: &lt;a href=&#34;https://itunes.apple.com/jp/app/wio-link/id1054893491?mt=8&#34;&gt;https://itunes.apple.com/jp/app/wio-link/id1054893491?mt=8&lt;/a&gt;&lt;br /&gt;
Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=cc.seeed.iot.ap&amp;amp;hl=ja&#34;&gt;https://play.google.com/store/apps/details?id=cc.seeed.iot.ap&amp;amp;hl=ja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/4.png&#34; alt=&#34;&#34; /&gt;
インストール後、アプリを立ち上げるとログイン画面が表示されるので〔SIGN UP〕のタブに切り替えてメールアドレスとパスワードを入力し〔SIGN UP〕のボタンを押下します。２回目以降は〔LOG IN〕タブから登録した情報を入力してログインして下さい。&lt;/p&gt;

&lt;p&gt;※他のサービスと連携が上手くいかないこともあるのでGoogleアカウントやFacebookアカウントの連携によるユーザー登録は非推奨とします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/5.png&#34; alt=&#34;&#34; /&gt;
Device Listの画面が表示されたら、右上の〔+〕又は中央の〔Add Your First Device〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/6.png&#34; alt=&#34;&#34; /&gt;
デバイスの選択画面が表示されるので〔Wio Node〕を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/7.png&#34; alt=&#34;&#34; /&gt;
セットアップ画面の図と同様にWio Node本体のボタンを４秒程押下します。青いライトの光り方が変わることを確認後、次の手順に移ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/8.png&#34; alt=&#34;&#34; /&gt;
iPhoneの〔設定〕アプリを起動します。〔Wi-Fi〕設定画面でWi-FiをONにし、〔Wio_XXXXXX〕を選択します。XXXXXXには割り当てられた文字列が入ります。（Android版はアプリの画面内で選択します。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/9.png&#34; alt=&#34;&#34; /&gt;
Wio Nodeアプリに戻り、〔Goto wifi list〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/10.png&#34; alt=&#34;&#34; /&gt;
現在利用できる任意のWi-Fiを選択します。表示されない場合は右上の〔Refresh〕を押下して下さい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/11.png&#34; alt=&#34;&#34; /&gt;
選択したWi-Fiのパスワードを入力し、〔Join〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/12.png&#34; alt=&#34;&#34; /&gt;
この画面では、デバイスの名前をつけます。任意の名前を入力し、〔Start Wio-ing〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/13.png&#34; alt=&#34;&#34; /&gt;
Wio Nodeが認識され、モジュールの設定画面に移りました。最初のセットアップは以上です。&lt;/p&gt;

&lt;p&gt;もしセットアップが上手くいかない場合は&lt;a href=&#34;https://dotstud.io/docs/wionode-wiosetup/&#34;&gt;こちら&lt;/a&gt;からセットアップしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;モジュールの設定&#34;&gt;モジュールの設定&lt;/h4&gt;

&lt;p&gt;続いて今回使うモジュールを設定していきます。
&lt;img src=&#34;https://dotstud.io/img/blog/106/14.png&#34; alt=&#34;&#34; /&gt;
次にLED Barを取り付けます。Wio Node本体を画面と同じ向きに見た時、左側（PORT0）にLED Barを接続します。アプリ画面では、〔UART〕タブの〔LED Bar〕を選択し、〔Update Firmware〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/15.png&#34; alt=&#34;&#34; /&gt;
〔OK〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/16.png&#34; alt=&#34;&#34; /&gt;
設定が完了すると〔View API〕というリンクが表示されます。&lt;/p&gt;

&lt;p&gt;APIを試してみましょう。〔View API〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;apiを試してみる&#34;&gt;APIを試してみる&lt;/h4&gt;

&lt;p&gt;View APIのページではあらかじめ用意されているAPIを使ってWio Nodeとモジュールの挙動を試すことができます。
&lt;img src=&#34;https://dotstud.io/img/blog/106/17.png&#34; alt=&#34;&#34; /&gt;
今回利用する〔level〕APIの〔Test Request〕に「10」と入力します。〔GET〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/led.png&#34; alt=&#34;&#34; /&gt;
LED Barが10個すべて光りました！数値を変えると光るBarの個数が変わります。&lt;/p&gt;

&lt;p&gt;モジュールの設定は以上です。&lt;/p&gt;

&lt;h3 id=&#34;2-iftttの設定&#34;&gt;2. IFTTTの設定&lt;/h3&gt;

&lt;h4 id=&#34;インストールとセットアップ-1&#34;&gt;インストールとセットアップ&lt;/h4&gt;

&lt;p&gt;次にIFTTT側の設定をしていきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/18.png&#34; alt=&#34;&#34; /&gt;
最初にIFTTTのアプリをダウンロードします。&lt;strong&gt;ブラウザから設定する場合はアプリのインストールは不要&lt;/strong&gt;です。ブラウザで「IFTTT」を検索してIFTTTの画面に遷移してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/19.png&#34; alt=&#34;&#34; /&gt;
ダウンロード後、アプリを起動します。アカウントを持っていない場合は、〔Sign up〕を押下します。アカウントを既に取得している場合は、〔Sign in〕を押下してログインしてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/20.png&#34; alt=&#34;&#34; /&gt;
アカウントを新規登録する場合はメールアドレスと任意のパスワードを入力し、〔Sign up〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;レシピを作成する&#34;&gt;レシピを作成する&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/21.png&#34; alt=&#34;&#34; /&gt;
それでは早速レシピを作ってみましょう。〔My Applets〕に移動し、右上の〔＋〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/22.png&#34; alt=&#34;&#34; /&gt;
IFTTTでは「if this then that」という構文を使って、サービスを連携させていきます。熊本弁で言うと「こぎゃん（こう）したら、あぎゃん（ああ）なる」みたいな感じです。&lt;/p&gt;

&lt;p&gt;まずは「こうしたら」のトリガー部分を作っていきましょう。最初に〔this〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/23.png&#34; alt=&#34;&#34; /&gt;
IFTTTでは連携に利用できるWebサービスのことをチャンネルと言います。&lt;/p&gt;

&lt;p&gt;トリガーとして利用できるチャンネルが表示されるので、「Wether Underground」チャンネルを検索し、選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/24.png&#34; alt=&#34;&#34; /&gt;
「Wether Underground」で利用できるトリガーの一覧が表示されます。今回は〔Today&amp;rsquo;s weather report〕を使うので、選択してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/25.png&#34; alt=&#34;&#34; /&gt;
「Today&amp;rsquo;s weather report」は今日の現在の天気情報を取得できます。この画面では取得する時間を設定します。好きな時間に設定してください。&lt;/p&gt;

&lt;p&gt;私の場合は昼休みで外に出る時の時間を設定しました。&lt;/p&gt;

&lt;p&gt;続いて「こうなる」の部分を作ります。
&lt;img src=&#34;https://dotstud.io/img/blog/106/26.png&#34; alt=&#34;&#34; /&gt;
「if this then that」の〔that〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/27.png&#34; alt=&#34;&#34; /&gt;
アクション（発動条件を満たした後の動作）として利用できるチャンネルが表示されます。〔Search services〕に「seeed」と入力して検索しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/28.png&#34; alt=&#34;&#34; /&gt;
「Seeed」チャンネルを選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/29.png&#34; alt=&#34;&#34; /&gt;
〔connect〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/30.png&#34; alt=&#34;&#34; /&gt;
アカウント設定画面が表示されます。ここにWio Nodeで設定したアカウント情報を入力し、〔Sign in〕を押下します。&lt;/p&gt;

&lt;p&gt;Wio Node側でGoogleやFacebook連携でログインしていて上手く連携できない場合は、Wio Nodeのアプリからメールアドレスで登録しなおしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/31.png&#34; alt=&#34;&#34; /&gt;
「Seeed」チャンネルで利用できるアクションの一覧が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/32.png&#34; alt=&#34;&#34; /&gt;
一覧の下の方にある〔Drive any Grove〕を選択してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/33.png&#34; alt=&#34;&#34; /&gt;
詳細設定をしていきます。functionを選択するプルダウンでは〔level（float level）〕を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/34.png&#34; alt=&#34;&#34; /&gt;
次にFirst Parameterを設定します。〔Add Ingredient〕を押下すると、設定できる候補が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/35.png&#34; alt=&#34;&#34; /&gt;
今回取得するのはUV値なので〔UVindex〕を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/36.png&#34; alt=&#34;&#34; /&gt;
〔Next〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/37.png&#34; alt=&#34;&#34; /&gt;
タイトルが自動生成されるので、変更する場合は〔Edit title〕から編集します。最後に〔Finish〕を押下します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/38.png&#34; alt=&#34;&#34; /&gt;
これでレシピは完成です！&lt;/p&gt;

&lt;h3 id=&#34;3-オーナメント作り&#34;&gt;3. オーナメント作り&lt;/h3&gt;

&lt;p&gt;最後に見せ方の部分である、オーナメント作りをしていきます。&lt;/p&gt;

&lt;p&gt;では、グリーンオーナメントにWio Nodeを巻いていきます。この時、一度Wio NodeからUSBケーブルを抜いておくと良いでしょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/39.png&#34; alt=&#34;&#34; /&gt;
購入したグリーンオーナメントにもよりますが、グリーンオーナメントの中の構成を把握してWio Nodeを取り付けるとコードが目立たないようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/40.png&#34; alt=&#34;&#34; /&gt;
今回の場合は、グリーンオーナメントの中心軸を避けたところにWio Nodeを設置し、コードを軸に這わせながら巻きつけていきます。巻きつけた後は、葉っぱでコードを隠します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/41.png&#34; alt=&#34;&#34; /&gt;
LEDもコードがなるべく見えないように周りの葉っぱで隠します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/42.png&#34; alt=&#34;&#34; /&gt;
次に目を用意します。自分の好きな目を書いてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/43.png&#34; alt=&#34;&#34; /&gt;
目を作成したら、グリーンオーナメントに装着します。両面テープや養生テープを使うと、目の位置等を簡単に変えられます。目の位置によって表情が変わるので好きな位置に取り付けましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/44.png&#34; alt=&#34;&#34; /&gt;
最後にUSBケーブルと接続します。オーナメントによりますが、USBケーブルに色が移ることもあるので気をつけてください。&lt;/p&gt;

&lt;p&gt;オーナメント作りはこれで完成です！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;カスタマイズ&#34;&gt;カスタマイズ&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/45.png&#34; alt=&#34;&#34; /&gt;
目だけでなく、ちょっとした花を付け加えるとより個性が出ます。色々試してみてください。&lt;/p&gt;

&lt;h2 id=&#34;試してみる&#34;&gt;試してみる&lt;/h2&gt;

&lt;p&gt;さて、一通り完成したので動作検証してみます。&lt;/p&gt;

&lt;p&gt;IFTTTの〔My Applets〕で自分の作成したアプレットが確認できます。今回はテストなので時間を12時45分にしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/46.png&#34; alt=&#34;&#34; /&gt;
実行されるとIFTTTから通知が来ます。確認してみると正常に動いているようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/47.png&#34; alt=&#34;&#34; /&gt;
UVindexの値を確認すると「9」となっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/106/48.png&#34; alt=&#34;&#34; /&gt;
LED Barは&amp;hellip;レベル9まで光っています！&lt;strong&gt;外に出る時は紫外線対策をしっかりしましょう！！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;今回は「Wio Node」と「IFTTT」を使ってノンプログラミングでUV（紫外線）のレベルをLED Barで表示させました。初心者の方でも簡単にできたのではないでしょうか。「IFTTT」で取得する値を変えたりアクションを変えたりするともっと色んなことができそうですね。&lt;/p&gt;

&lt;p&gt;また、「IFTTT」で取得する値は0〜16ですが、現状は10以上の場合もLED Barは10までの表示です。これ以上細かい表示をする場合はプログラムを組んでみましょう。そちらの方も是非挑戦してみてください。&lt;/p&gt;

&lt;p&gt;最後まで読んで頂きありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TEDもマイクも自分の手も。これぞインターネットオブシングス回？まとめ #IoTLT vol.27</title>
      <link>https://dotstud.io/blog/iotlt-vol27-chantoku-report/</link>
      <pubDate>Mon, 22 May 2017 21:24:36 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/iotlt-vol27-chantoku-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとく（&lt;a href=&#34;https://twitter.com/tokutoku393&#34;&gt;@tokutoku393&lt;/a&gt;）です。&lt;/p&gt;

&lt;p&gt;5月19日に開催されたIoTLT vol27（&lt;a href=&#34;https://iotlt.connpass.com/event/52082/&#34;&gt;IoT縛りの勉強会! IoTLT vol.27 @ ヤフー&lt;/a&gt;]）の様子をお届けします！&lt;/p&gt;

&lt;p&gt;当日のツイートまとめは&lt;a href=&#34;https://togetter.com/li/1112435&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;サイクロプス感 &lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; &lt;a href=&#34;https://t.co/mO85drZpkj&#34;&gt;pic.twitter.com/mO85drZpkj&lt;/a&gt;&lt;/p&gt; keiji (本体) (@1027kg) &lt;a href=&#34;https://twitter.com/1027kg/status/865525476546101254&#34;&gt;2017年5月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
IoTはどこへ向かうのか。&lt;/p&gt;

&lt;h2 id=&#34;iotltとは&#34;&gt;IoTLTとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/01_iotlt.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;（写真: 集合写真家・武市真拓氏）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;dotstudio代表のびすけとリレーションズの土屋さんが開催しているIoTの勉強会です。各回12名程度の登壇者が5分でLTをしており、参加者は毎回200人規模！&lt;/p&gt;

&lt;p&gt;某研究所調べだと国内最大規模になっていて、年間の参加者で5000人くらいの規模になっています。
「&lt;a href=&#34;http://www.slideshare.net/ssuserafaef6/connpasssummit2017&#34;&gt;connpass運営が選ぶこのコミュニティがすごい&lt;/a&gt;」では、コミュニティメンバー数と開催数の多さから「高橋名人級」認定をしていただきました！&lt;/p&gt;

&lt;p&gt;今回は、&lt;strong&gt;会場は&lt;a href=&#34;https://about.yahoo.co.jp/&#34;&gt;ヤフー株式会社&lt;/a&gt;さん&lt;/strong&gt;、&lt;strong&gt;懇親会は&lt;a href=&#34;https://forkwell.com/&#34;&gt;Forkwell&lt;/a&gt;さん&lt;/strong&gt; に提供して頂きました。噂のLODGE同ビルの新オフィスで開催です！&lt;/p&gt;

&lt;h2 id=&#34;wi-fi-ble盛りだくさん回&#34;&gt;Wi-Fi・BLE盛りだくさん回&lt;/h2&gt;

&lt;p&gt;マイクもTEDも自分の手も……！？なんでもインターネットに繋がっちゃう回でした！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LINE Beacon&lt;/strong&gt;や、&lt;strong&gt;ESP32を搭載したあのデバイスの新シリーズ&lt;/strong&gt; 発表もあります！&lt;/p&gt;

&lt;h3 id=&#34;スポンサーlt-ひょうたんにひたすら話しかけてみた-by-くぬぎ氏-at-yahoo&#34;&gt;スポンサーLT: ひょうたんにひたすら話しかけてみた by くぬぎ氏 at YAHOO!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/02_hyotan.png&#34; alt=&#34;&#34; /&gt;
先日の&lt;a href=&#34;https://dotstud.io/blog/yoro-hack-ukkz-report/&#34;&gt;養老乃瀧ハッカソン&lt;/a&gt;に参加していたくぬぎ氏。ひょうたんに話しかけると注文からお会計からちょっとしたお喋りまでこなしてくれます！&lt;/p&gt;

&lt;p&gt;喋りかけるとピカっとするのかわいい。&lt;/p&gt;

&lt;h3 id=&#34;esp-wroom-02とマイクをつないでみた-by-まさとか氏&#34;&gt;ESP-WROOM-02とマイクをつないでみた。 by まさとか氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/03_voice.png&#34; alt=&#34;&#34; /&gt;
ESP-WROOM-02（ESP8266）を使ってマイクで音を拾うデバイス作り。&lt;/p&gt;

&lt;p&gt;ロジアナを使ってArduinoのライブラリを作成して、、うーむ、レベルが高い……。（すみません）
&lt;center&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;cc6aa93738794302ac9668e48a24ab22&#34; data-ratio=&#34;1.2994923857868&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;kobots-フリスクとwioとpiでコミュニケーション-ロボット-by-ヨシケン氏&#34;&gt;Kobots - フリスクとWioとPiでコミュニケーション・ロボット by ヨシケン氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/04_kobots.png&#34; alt=&#34;&#34; /&gt;
子供向けということでとにかく見た目がかわいい。！MESHとかWio Nodeでも組み合わせでここまで動くものができるんですね。&lt;/p&gt;

&lt;p&gt;のちにイベント中TEDが突然暴れだす事件も。かわいい。&lt;/p&gt;

&lt;h3 id=&#34;e-aiもできるけど-短いことも大事な話-by-鈴木氏-at-がじぇるね&#34;&gt;e-AIもできるけど、短いことも大事な話 by 鈴木氏 at がじぇるね&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/05_lychee.png&#34; alt=&#34;&#34; /&gt;
GR-LYCHEEには組み込みで動作するAIが乗っている！&lt;/p&gt;

&lt;p&gt;とりあえず今回は回転数をリアルタイム取得するデモ。が、そのために買ったハンドスピナーは届かず（笑）
&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;デモが一発でちゃんと動いてしまって嬉しいがじぇるね鈴木さん &lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; &lt;a href=&#34;https://t.co/ZVsJHVReGZ&#34;&gt;pic.twitter.com/ZVsJHVReGZ&lt;/a&gt;&lt;/p&gt; うこ (@harmoniko) &lt;a href=&#34;https://twitter.com/harmoniko/status/865523149864960005&#34;&gt;2017年5月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;GR-LYCHEEの動画、リアルタイムで超高画質すごい。&lt;/p&gt;

&lt;h3 id=&#34;wio-nodeのwifi設定を頑張った話-by-ほりひろ氏&#34;&gt;Wio NodeのWiFi設定を頑張った話 by ほりひろ氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/06_wio.png&#34; alt=&#34;&#34; /&gt;
先日のWio Nodeハンズオンにも参加してくれたほりひろ氏。当日、Androidの方はWi-Fi設定がなかなかできず大変だったんです……。&lt;/p&gt;

&lt;p&gt;うまく設定するコツと、なんと&lt;strong&gt;自作した設定ツールの紹介&lt;/strong&gt;！！素晴らしいです！（泣）&lt;/p&gt;

&lt;p&gt;ツールはこちら: &lt;a href=&#34;https://github.com/horihiro/wio-setup&#34;&gt;github&lt;/a&gt; / &lt;a href=&#34;https://www.npmjs.com/package/wio-setup&#34;&gt;npm&lt;/a&gt;&lt;br /&gt;
使い方はこちら: &lt;a href=&#34;https://dotstud.io/docs/wionode-wiosetup&#34;&gt;Wio Node設定 - 繋がらない場合&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;元汎用機エンジニアが語るiot-まずはノンプログラミング編-by-松岡氏&#34;&gt;元汎用機エンジニアが語るIoT／まずはノンプログラミング編 by 松岡氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/07_matz.png&#34; alt=&#34;&#34; /&gt;
チャラ電結成の松岡氏改めMatz氏。LTは至極マジメです（笑）&lt;/p&gt;

&lt;p&gt;プログラミングができなくてもIoTはできる！楽しみながら、プログラミングも勉強していこうね！という熱いお話。&lt;/p&gt;

&lt;h3 id=&#34;スポンサーlt-幸せに働くitエンジニアを増やしたい-by-forkwell&#34;&gt;スポンサーLT: 幸せに働くITエンジニアを増やしたい by Forkwell&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/08_forkwell.png&#34; alt=&#34;&#34; /&gt;
「&lt;strong&gt;スパムみたいなスカウトとさようなら！&lt;/strong&gt;」をテーマにした新しいスカウトサービスをリリースされるそうです！&lt;/p&gt;

&lt;p&gt;自分の市場価値を定期的にチェックすることが大事らしい。耳が痛い。&lt;/p&gt;

&lt;h3 id=&#34;生体認証でお出かけチェック-初心者が語る初心者向けtips-by-わんこ-氏&#34;&gt;生体認証でお出かけチェック＆初心者が語る初心者向けTips by わんこ。氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/09_wanko.png&#34; alt=&#34;&#34; /&gt;
登場と同時に会場がざわつくわんこ。氏。&lt;strong&gt;両手がIoTの人&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;とにかく忘れ物が多くこの日もデモ用のRasPiを忘れてしまったわんこ。氏は生体認証を使ってお出かけチェックを自作していました！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;スマホは忘れるけど、手は忘れない、やばい &lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt;&lt;/p&gt; のびすけ / sugawara (@n0bisuke) &lt;a href=&#34;https://twitter.com/n0bisuke/status/865531826424619009&#34;&gt;2017年5月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
やばい。&lt;/p&gt;

&lt;h3 id=&#34;line-beaconの機能追加の紹介とesp32を使って実装してみた話-by-古田氏&#34;&gt;LINE Beaconの機能追加の紹介とESP32を使って実装してみた話 by 古田氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/10_line.png&#34; alt=&#34;&#34; /&gt;
LINE BeaconにDM（Direct Message）というフィールドが追加されたらしい！&lt;/p&gt;

&lt;p&gt;ESP32安いし、BLEも強くなってるし、Beaconも活用事例が増えてきそうですね〜。&lt;/p&gt;

&lt;h3 id=&#34;かわいいは作れる-by-ちゃんとく&#34;&gt;かわいいは作れる by ちゃんとく&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/11_me.png&#34; alt=&#34;&#34; /&gt;
毎度お騒がせしております。今回は光るネコミミづくりのためにNode.js実装とはんだづけをした話。&lt;/p&gt;

&lt;p&gt;日本語のハッシュタグ取得の検証には流れの早い#loveliveが便利ですよ……！&lt;/p&gt;

&lt;h3 id=&#34;初めてのiot-by-村田氏&#34;&gt;初めてのIoT!! by 村田氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/12_murata.png&#34; alt=&#34;&#34; /&gt;
自宅を（物理的に）乗っ取られた村田氏。&lt;/p&gt;

&lt;p&gt;普段Linuxを使っているので、Raspberry Piでセキュリティ強化を試した話でした！（結果は不明）&lt;/p&gt;

&lt;h3 id=&#34;esp32でble-by-わみ氏&#34;&gt;ESP32でBLE！ by わみ氏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/13_wami.png&#34; alt=&#34;&#34; /&gt;
Nefryの作者わみ氏！！私のネコミミもNefryで実装（予定）です。&lt;/p&gt;

&lt;p&gt;ESP32を搭載したWi-Fi/BLE対応の新Nefry BTをクラウドファンディングするそうです！！
&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;おー、Nefry BT！ &lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; &lt;a href=&#34;https://t.co/h8tG6ARrhT&#34;&gt;pic.twitter.com/h8tG6ARrhT&lt;/a&gt;&lt;/p&gt; Masaki Koyanagi (@mascii_k) &lt;a href=&#34;https://twitter.com/mascii_k/status/865538826634055680&#34;&gt;2017年5月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;欲しい〜〜欲しい〜〜〜！&lt;/p&gt;

&lt;p&gt;クラウドファンディングページ: &lt;a href=&#34;https://kibidango.com/513&#34;&gt;&lt;strong&gt;プロジェクトの種&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;居酒屋-iotな養老乃瀧ハッカソンなど報告と思ったこと-by-のびすけ-at-dotstudio&#34;&gt;居酒屋×IoTな養老乃瀧ハッカソンなど報告と思ったこと by のびすけ at dotstudio&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/103/14_n0bi.png&#34; alt=&#34;&#34; /&gt;
先日開催された養老乃瀧ハッカソンの運営視点まとめ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プレゼンだけで勝たない&lt;/strong&gt;ために、審査員が触って試せるタッチ＆トライを設けたそうです！&lt;/p&gt;

&lt;p&gt;ハッカソンは&lt;strong&gt;技術先行しない・シンプルなものを作る&lt;/strong&gt;ことが大事。次は、次は勝つぞ……！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;次回は6/13（火）サイボウズさんで開催です！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://iotlt.connpass.com/event/56270/&#34;&gt;&lt;strong&gt;IoT縛りの勉強会! IoTLT vol.28 @ サイボウズ&lt;/strong&gt;&lt;/a&gt;（超満員ありがとうございます！）&lt;/p&gt;

&lt;p&gt;ネタとデモに富んだLTが多く今回も大盛り上がりでした！次回もよろしくお願いします！&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;即席wionode講習会！&lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; &lt;a href=&#34;https://t.co/Jlyj0vN9Zk&#34;&gt;pic.twitter.com/Jlyj0vN9Zk&lt;/a&gt;&lt;/p&gt; へっぽこまるこ (@hepppook) &lt;a href=&#34;https://twitter.com/hepppook/status/865549478001991680&#34;&gt;2017年5月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;
懇親会も有用なお話がたくさん聞けます！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dotstudioオリジナルのパッケージができました！〜使い方編〜</title>
      <link>https://dotstud.io/blog/howto-use-original-package/</link>
      <pubDate>Mon, 22 May 2017 21:20:43 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/howto-use-original-package/</guid>
      
      <description>

&lt;p&gt;こんにちは！デザイナーのちゃちゃまる（&lt;a href=&#34;https://twitter.com/chachmaru&#34;&gt;@chachmaru&lt;/a&gt;）です。&lt;/p&gt;

&lt;p&gt;僕の&lt;del&gt;わがまま&lt;/del&gt;こだわりが詰まった、dotstudioオリジナルのIoTデバイス向けパッケージが完成しました！
&lt;img src=&#34;https://dotstud.io/img/blog/102/01_complete.png&#34; alt=&#34;&#34; /&gt;
一番値段の高い黒のダンボールに銀の箔押し。かっこいい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;見た目だけでなく機能もたっぷり&lt;/strong&gt;なので、こだわりポイントに沿って使い方を紹介します！&lt;/p&gt;

&lt;h3 id=&#34;こだわりポイント1-シールで箱がビリビリにならない&#34;&gt;こだわりポイント1: シールで箱がビリビリにならない！&lt;/h3&gt;

&lt;p&gt;dotstudioからは箱に直接テープ止めして発送されます。なので開けると箱がビリビリに……&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;なりません！（笑）&lt;/strong&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/102/02_side.png&#34; alt=&#34;&#34; /&gt;
裏のテープをカッターで切り取り、ミシン目に沿って左右の羽を外すと、破らずに開けることができます！&lt;/p&gt;

&lt;h3 id=&#34;こだわりポイント2-部品の大きさによって中の仕切りのサイズが変えられる&#34;&gt;こだわりポイント2: 部品の大きさによって中の仕切りのサイズが変えられる&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/102/03_usage.png&#34; alt=&#34;&#34; /&gt;
箱の中は間仕切りで縦3部屋・横4部屋、さらにミニ仕切りを使って小部屋に分けられます。&lt;/p&gt;

&lt;p&gt;大きなマイコンボードや小さいセンサなどフレキシブルに対応でき、箱の強度も増すので一石二鳥ですね！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/102/04_ordinary.png&#34; alt=&#34;&#34; /&gt;
煩雑になりがちなスタジオの作業机も、箱を使えばスッキリするはず？（※僕の作業机はもっとキレイです。）&lt;/p&gt;

&lt;h3 id=&#34;こだわりポイント3-持ち運びしやすい&#34;&gt;こだわりポイント3: 持ち運びしやすい！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/102/05_carry.png&#34; alt=&#34;&#34; /&gt;
箱は薄いA4サイズなのでカバンに入れて持ち運びやすいサイズです。ノートPCとも一緒に使いやすいですね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;僕の作ったオシャレでかっこいい新パッケージ、ぜひ持ち歩いて自慢してください！&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dotstudioオリジナルのパッケージができました！〜制作編〜</title>
      <link>https://dotstud.io/blog/make-dotstudio-original-package/</link>
      <pubDate>Mon, 22 May 2017 21:19:48 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/make-dotstudio-original-package/</guid>
      
      <description>

&lt;p&gt;こんにちは！デザイナーのちゃちゃまる（&lt;a href=&#34;https://twitter.com/chachmaru&#34;&gt;@chachmaru&lt;/a&gt;）です。&lt;/p&gt;

&lt;p&gt;この度dotstudioオリジナルのIoTデバイス向けパッケージが完成しました！
&lt;img src=&#34;https://dotstud.io/img/blog/101/01_complete.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回はデザイナーの僕がこだわりを込めた制作秘話をお届けします。これからパッケージを制作しようと思っている方はぜひ参考にしてください（笑）&lt;/p&gt;

&lt;h2 id=&#34;パッケージづくりのきっかけ&#34;&gt;パッケージづくりのきっかけ&lt;/h2&gt;

&lt;p&gt;これまでdotstudioから発送するキットやデバイスはこんな感じで送られていました。
&lt;img src=&#34;https://dotstud.io/img/blog/101/02_package_regacy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;パッケージが…ダサい……。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;買ってくれた人の目に最初に入るのはパッケージで、パッケージは会社の顔でもありブランドイメージでもあり大事な……とにかく、&lt;strong&gt;電子工作のワクワクは、届いた時から始まっているんです！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ということで、オリジナルパッケージを制作することにしました！&lt;/p&gt;

&lt;h2 id=&#34;作ってみる&#34;&gt;作ってみる&lt;/h2&gt;

&lt;p&gt;パッケージ制作に当たっての要件は以下のような感じでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;届いた後も使えるものにしたい&lt;/li&gt;
&lt;li&gt;持ち運びもできるようにしたい&lt;/li&gt;
&lt;li&gt;箱のままクリップポストで郵送したい&lt;/li&gt;
&lt;li&gt;かっこいい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;せっかく箱を作ったら届いた後も使って欲しい、ということで収納ボックスとして利用できて使いやすいものを目指しました。&lt;/p&gt;

&lt;p&gt;dotstudioではパッキングも自分たちで行っているので、郵送の手間を省くのもポイントです。&lt;strong&gt;最後の項目はデザイナーとして譲れませんね。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;外形を決めよう&#34;&gt;外形を決めよう&lt;/h3&gt;

&lt;p&gt;今回はダンボール制作を専門に行っている&lt;strong&gt;&lt;a href=&#34;http://www.jk-inc.co.jp/&#34;&gt;株式会社JK&lt;/a&gt;&lt;/strong&gt;さんに依頼して制作しました。&lt;/p&gt;

&lt;p&gt;まずは外形から決めていきます。
&lt;img src=&#34;https://dotstud.io/img/blog/101/03_clickpost.png&#34; alt=&#34;&#34; /&gt;
僕たちは普段クリックポストを使っているので、&lt;strong&gt;そのまま郵送できて持ち運びもできるサイズにしたいな〜&lt;/strong&gt; という要望をJKさんに伝えると……&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/101/05_sample1.png&#34; alt=&#34;&#34; /&gt;
JKさんが作ってくれたサンプルがこちら！&lt;strong&gt;雑な要望をまるっと叶えてくれています。すごい……。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この外形に沿って、色やロゴをデザインします。
&lt;img src=&#34;https://dotstud.io/img/blog/101/04_outline.png&#34; alt=&#34;&#34; /&gt;
見開きの形にしてJKさんに入稿しました！&lt;/p&gt;

&lt;h3 id=&#34;ダンボールの値段は色によって違う&#34;&gt;ダンボールの値段は色によって違う！？&lt;/h3&gt;

&lt;p&gt;ダンボールは実は色によって費用が変わります。
&lt;img src=&#34;https://dotstud.io/img/blog/101/06_colors.png&#34; alt=&#34;&#34; /&gt;
dotstudioのロゴに合わせて黒にしたいところですが、実は黒のダンボールは一番高いらしい……。&lt;/p&gt;

&lt;p&gt;でも&lt;strong&gt;大事なのはブランドイメージなので黒にしてもらいました&lt;/strong&gt;。ケチってはダメです！（のびさんありがとうございます）&lt;/p&gt;

&lt;h3 id=&#34;サンプル完成&#34;&gt;サンプル完成！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/101/01_complete.png&#34; alt=&#34;&#34; /&gt;
色とロゴを乗せたサンプルが完成しました！黒い本体に、銀の箔押しです！（これも高いらしい）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ブランドイメージに合わせたこだわりのデザインです&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;次回は機能と使い方を紹介します！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nefry BTとIFTTTでスイッチを押したらLINEを送る仕組みを作ってみよう</title>
      <link>https://dotstud.io/blog/nefry-ifttt-push-line/</link>
      <pubDate>Thu, 18 May 2017 02:51:27 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nefry-ifttt-push-line/</guid>
      
      <description>

&lt;p&gt;こんにちは。外部ライターのわみ（&lt;a href=&#34;https://twitter.com/wamisnet&#34;&gt;@wamisnet&lt;/a&gt;）です。Unirobot株式会社でロボットのソフトウェアエンジニアをやりながら、dotstudioでは私が作成しているIoTデバイス「Nefry」シリーズの販売やチュートリアル記事の執筆をしています。&lt;/p&gt;

&lt;p&gt;Nefryは、ユーザの皆様からのフィードバックを頂き成長しています。新たなWi-Fi・BLEモジュール「ESP-WROOM-32」の発売もあり、このたび&lt;strong&gt;新機能と改良を加えた次世代の「Nefry BT」を発表&lt;/strong&gt;する事になりました。&lt;/p&gt;

&lt;p&gt;今回は新しい「Nefry BT」を使って、Amazon Dash Buttonのようにスイッチを押した時にLINEに通知が行く仕組みを作ってみます。&lt;/p&gt;

&lt;h2 id=&#34;nefry-btとは&#34;&gt;Nefry BTとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/100/01_nefry.png&#34; alt=&#34;&#34; /&gt;
Nefryシリーズは、「&lt;strong&gt;簡単にインターネットにつながること&lt;/strong&gt;」をテーマにしたFRISKサイズのIoTデバイスです。Nefry BTからはWi-Fiに加えてBLE（Bluetooth Low Energy）に対応し、I/O機能も増えて開発の幅がさらに広がりました！&lt;/p&gt;

&lt;p&gt;ハードウェアをできるだけ意識しなくて済むよう設計され、はんだづけや複雑な接続なしで動かすことができるため、初めてハードウェアを触る方にオススメのデバイスです。&lt;/p&gt;

&lt;h2 id=&#34;作ってみる&#34;&gt;作ってみる&lt;/h2&gt;

&lt;p&gt;今回試す流れは以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IFTTTにレシピを作成する&lt;/li&gt;
&lt;li&gt;開発環境（Arduino IDE）を整える&lt;/li&gt;
&lt;li&gt;プログラムを書き込む&lt;/li&gt;
&lt;li&gt;Nefry BTとIFTTTを紐付ける&lt;/li&gt;
&lt;li&gt;スイッチを押してLINEにメッセージを送ってみる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Nefry BT&lt;/li&gt;
&lt;li&gt;IFTTTのアカウント&lt;/li&gt;
&lt;li&gt;LINEのアカウント&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;筆者の環境&#34;&gt;筆者の環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Nefry BT library Version 0.6.1&lt;/li&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;Arduino IDE 1.8.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;

&lt;p&gt;Nefry BTは開発中のため、実際のコードや画面と異なる可能性があります。&lt;/p&gt;

&lt;h3 id=&#34;iftttにレシピを作成する&#34;&gt;IFTTTにレシピを作成する&lt;/h3&gt;

&lt;p&gt;IFTTTは様々なWebサービス同士を簡単に連携できるサービスです。連携したものは「レシピ」と呼ばれ、自分で新しいレシピを作成することもできます。今回はNefry BTとLINEを連携するレシピを作ってみます。&lt;/p&gt;

&lt;p&gt;アカウントを持っていない場合は下記の記事を参考にアカウントを取得してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://liginc.co.jp/263899&#34;&gt;Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アカウントを取得したら、Nefry BTとLINEを連携させるレシピを登録していきましょう。&lt;/p&gt;

&lt;p&gt;IFTTTのレシピは「〇〇が起きたら△△する」というようにトリガーとアクションに分けられます。今回のトリガーは「&lt;strong&gt;Nefry BTのスイッチをクリックしたら&lt;/strong&gt;」、アクションは「&lt;strong&gt;LINEに通知する&lt;/strong&gt;」となります。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;トリガーとnefry-btを紐付けるキーの取得&#34;&gt;トリガーとNefry BTを紐付けるキーの取得&lt;/h4&gt;

&lt;p&gt;今回はトリガーとして自作のWebサービスを利用できる「Maker Webhooks」を使います。&lt;/p&gt;

&lt;p&gt;まずはMaker WebhooksをあとでNefry BTと紐付けるために、Secret Keyというキーを取得します。&lt;a href=&#34;https://ifttt.com/discover&#34;&gt;IFTTT公式サイト&lt;/a&gt;上部の「Search」から、Maker Webhooksを検索しクリックしましょう。（&amp;rdquo;make&amp;rdquo;で候補に出てきます。）
&lt;img src=&#34;https://dotstud.io/img/blog/100/02_ifttt1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Maker Webhooksのページに移動したら右上にある「Setting」から設定します。
&lt;img src=&#34;https://dotstud.io/img/blog/100/03_ifttt2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;設定ページに移動しました。このとき初めての方はこのような認証画面が表示されます。ページ中央の「Connect」をクリックしてMaker Webhooksを有効にしましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/100/04_ifttt3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有効になるとAccount Infoのページに移動します。
&lt;img src=&#34;https://dotstud.io/img/blog/100/05_ifttt4.png&#34; alt=&#34;&#34; /&gt;
アカウントごとに割り当てられるSecret KeyがURLのuse/以下に記載されているのでコピーしておきます。今回の例ではSecret Keyは &lt;code&gt;c1kgN-ZOhUAxA6B7TpyiKc&lt;/code&gt; の部分です。（このSecret Keyはサンプルです。既に無効になっていますので自身で取得してください。）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;トリガーの作成&#34;&gt;トリガーの作成&lt;/h4&gt;

&lt;p&gt;続いてトリガーとなるMaker Webhooksの詳細を作成します。
&lt;img src=&#34;https://dotstud.io/img/blog/100/06_ifttt5.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://ifttt.com/create&#34;&gt;IFTTTのレシピ作成ページ&lt;/a&gt;から、「+this」のリンクをクリックします。&lt;/p&gt;

&lt;p&gt;「Choose a service」から再度Maker Webhooksを検索しましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/100/07_ifttt6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Maker WebhooksはEventという単位でトリガーとなります。今回はEvent Nameを&amp;rdquo;Nefry&amp;rdquo;とし、「Create trigger」をクリックし作成します。Event NameはあとでNefry BTにも同じ名前で入力します。
&lt;img src=&#34;https://dotstud.io/img/blog/100/08_ifttt7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;アクションの作成&#34;&gt;アクションの作成&lt;/h4&gt;

&lt;p&gt;最後に、トリガーが生じた時に起こすアクションを登録します。
&lt;img src=&#34;https://dotstud.io/img/blog/100/09_ifttt8.png&#34; alt=&#34;&#34; /&gt;
「+that」のリンクをクリックして、検索欄からLINEを検索しましょう。ここでTwitterやGmailなどを選択すると、それぞれのサービスと連携させることが出来ます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/100/10_ifttt9.png&#34; alt=&#34;&#34; /&gt;
Recipientと書かれた欄にメッセージを送るLINEの送信先を選択します。&lt;/p&gt;

&lt;p&gt;Messageと書かれた欄には送信するメッセージを入力します。MessageのValueにはプログラムから値を渡すことができるので、温度センサや明るさセンサなどの値をメッセージに組み込むことが可能です。写真のURLがあれば写真を送信することもできます。&lt;/p&gt;

&lt;p&gt;入力が完了したら、Create actionをクリックして保存します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/100/11_ifttt10.png&#34; alt=&#34;&#34; /&gt;
最後にFinishを押し、IFTTTのレシピの作成は完了です。&lt;/p&gt;

&lt;h3 id=&#34;開発環境-arduino-ide-を整える&#34;&gt;開発環境（Arduino IDE）を整える&lt;/h3&gt;

&lt;p&gt;続いてNefy BTにプログラムを書く環境を整えます。プログラムの書き込みにはArduino IDEと呼ばれるエディタを使用します。&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;公式サイト&lt;/a&gt;からダウンロードし、以下の手順でNefry BT用の設定を追加してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/100/12_program.png&#34; alt=&#34;&#34; /&gt;
Arduino IDEの「環境設定」のページから、「追加のボードマネージャのURL」に以下のリンクを入力して検索します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://nefry.studio/package_nefrybt_index.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;メニューバーの[ツール]から、[ボード] -&amp;gt; [ボードマネージャー]を選択します。選択肢に「Nefry by Nefry Community」が表示されているので、インストールします。
&lt;img src=&#34;https://dotstud.io/img/blog/100/13_library.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これでプログラムを書き込む準備が整いました。&lt;/p&gt;

&lt;h3 id=&#34;プログラムを書き込む&#34;&gt;プログラムを書き込む&lt;/h3&gt;

&lt;p&gt;以下はNefry BTに搭載されている「スイッチ」を押したときにIFTTTのEventを呼ぶプログラムです。&lt;/p&gt;

&lt;p&gt;Arduino IDEを開き、以下のコードを貼り付けます。（//以降の部分はコメントです。）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp:&#34;&gt;#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;NefryIFTTT.h&amp;gt;
String Event, SecretKey;
int counter =0;                       //送信データのカウンタ

void setup() {
  Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;,0); //Nefry DataStoreのタイトルを指定
  Nefry.setStoreTitle(&amp;quot;Event&amp;quot;,1);     //Nefry DataStoreのタイトルを指定
  SecretKey = Nefry.getStoreStr(0);   //Nefry DataStoreからデータを取得
  Event = Nefry.getStoreStr(1);       //Nefry DataStoreからデータを取得
  Nefry.enableSW();                   //SW有効化
}

void loop() {
  if (Nefry.readSW()) {               //SWを押した時
    counter++;                        //送信回数加算
    bool sendData = IFTTT.send(Event, SecretKey,&amp;quot;Nefry&amp;quot;,(String)(micros()/1000000)+&amp;quot;秒&amp;quot;,(String)counter);//IFTTTにデータを送信
                                      //Value1:Nefry,Value2:Nefryが起動してからの秒数,Value3:送信カウンタ
    if (!sendData) {//IFTTTにデータを送信が成功したか失敗したかの判定
      Nefry.setLed(255, 0, 0);        //Errの時、赤色点灯
    }
    Nefry.ndelay(1000);               //送信後1秒間待つ
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;貼り付けできたら[ツール] -&amp;gt; [ボード]から「Nefry BT」を選択します。Nefry BTとPCを繋ぎ、[ツール] -&amp;gt; [シリアルポート]でNefry BTのシリアルポートを選択しましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/100/14_arduinoide.png&#34; alt=&#34;&#34; /&gt;
ボードとシリアルポートを選んだらArduino IDEの左上にある「→」を押しプログラムを書き込みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/100/15_arduinoide2.png&#34; alt=&#34;&#34; /&gt;
「ボードへの書き込みが完了しました。」と表示されたら、Nefry BTへのプログラムの書き込みは完了です。&lt;/p&gt;

&lt;p&gt;最後にNefry BTにIFTTTとの連携情報を入力します。あと少しですので頑張っていきましょう！&lt;/p&gt;

&lt;h3 id=&#34;nefry-btとiftttを紐付ける&#34;&gt;Nefry BTとIFTTTを紐付ける&lt;/h3&gt;

&lt;p&gt;Nefry BTから&amp;rdquo;Nefry-OOOO&amp;rdquo;というWi-Fiの信号が発信されているので接続します。
&lt;img src=&#34;https://dotstud.io/img/blog/100/16_wifi.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接続できたらChromeやIEなどのWebブラウザで&lt;a href=&#34;http://192.168.4.1&#34;&gt;Nefry BTのサイト&lt;/a&gt;にアクセスしましょう。&lt;code&gt;http://192.168.4.1&lt;/code&gt;にアクセスするとNefry BTの設定サイトが表示されます。このページからNefry BTに関する様々な設定ができます。
&lt;img src=&#34;https://dotstud.io/img/blog/100/17_nefry.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;まずは「Setup WiFi」をクリックし、Wi-Fiの設定をしましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/100/18_nefry.png&#34; alt=&#34;&#34; /&gt;
接続するWi-Fiを入力して「Save」をクリックすると、Nefry BTに設定を保存＆再起動します。Wi-Fiが切断したら再接続してください。&lt;/p&gt;

&lt;p&gt;設定が完了したら、トップページに戻り「Data Store」のページに移動します。
&lt;img src=&#34;https://dotstud.io/img/blog/100/19_nefry.png&#34; alt=&#34;&#34; /&gt;
SecretKeyにはMaker Webhooksで確認した値を、EventにはLINEと連携した際に入力したEvent Name（今回は”Nefry”）を入力します。Saveをクリックし値を保存するとNefry BTが再起動します。&lt;/p&gt;

&lt;p&gt;いよいよNefry BTについているスイッチを押してLINEにメッセージを送ってみましょう！&lt;/p&gt;

&lt;h3 id=&#34;スイッチを押してlineにメッセージを送ってみる&#34;&gt;スイッチを押してLINEにメッセージを送ってみる&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/100/20_nefry.gif&#34; alt=&#34;&#34; /&gt;
Nefry BTのスイッチを押すとLEDの色が変わり送信を始めます。送信が完了するとLEDが水色になり、LINEに通知されました！IFTTTのサーバ状態により応答が悪い場合もありますが、その時はIFTTTのページにてリロードをすると反応してくれます。&lt;/p&gt;

&lt;p&gt;初回は登録が多く時間がかかりますが、今後はサクっと作れるでしょう。&lt;/p&gt;

&lt;h2 id=&#34;さいごに&#34;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;半田付けや複雑な設定なしで、ハードウェアをきっかけにしてLINEへメッセージを投稿する連携をサクッと試すことができました。今回紹介したNefry BTとIFTTTの連携を応用すればTwitterやGmailなどにもメッセージを送信できます。&lt;/p&gt;

&lt;p&gt;リアルタイム通信が得意な「Milkcocoa」やクラウドサービスMicrosoft AzureのIoT向け機能である「Azure IoT Hub」などを使うとより幅広い開発ができるでしょう。&lt;/p&gt;

&lt;p&gt;今後の更新で簡単に接続できるライブラリやサンプルコードを追加していく予定です。生まれたばかりでまだまだヒヨッコですが、進化していくNefry BTを応援していただけたらと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【業界初！？】居酒屋大手「養老乃瀧」とハッカソンを共催しました！</title>
      <link>https://dotstud.io/blog/yoro-hack-ukkz-report/</link>
      <pubDate>Sat, 06 May 2017 12:01:42 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/yoro-hack-ukkz-report/</guid>
      
      <description>

&lt;p&gt;こんにちは、ものづくり担当のうこ（&lt;a href=&#34;https://twitter.com/harmoniko&#34;&gt;@harmoniko&lt;/a&gt;）です。お花見の季節は終わってしまいましたが、暖かくなってますますお酒が美味しく感じる今日この頃ですね！&lt;/p&gt;

&lt;p&gt;ゴールデンウィーク真っ只中の5月3日〜4日に、業界初と思われる &lt;strong&gt;「居酒屋×IoT」がテーマの「養老乃瀧ハッカソン」&lt;/strong&gt;を実施しました。ハックにお酒にと大盛り上がりだった様子を報告します！&lt;/p&gt;

&lt;h2 id=&#34;養老乃瀧ハッカソンについて&#34;&gt;養老乃瀧ハッカソンについて&lt;/h2&gt;

&lt;p&gt;おそらく業界初の &lt;strong&gt;「居酒屋×IoT」&lt;/strong&gt;をテーマにしたハッカソンです。しかも、朝から乾杯をしたあとにハックを始めるという、今までにない斬新な流れで行われました。&lt;/p&gt;

&lt;p&gt;養老乃瀧の全面協力のもと、池袋は養老乃瀧の本社ビル・研修センターで開催。厨房も併設されていて、豪華な昼食と夕食も用意されていました。&lt;/p&gt;

&lt;p&gt;イベント概要の詳細はこちらの募集ページをご覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://connpass.com/event/52842/&#34;&gt;【居酒屋 x IoT】業界初！？ 養老乃瀧ハッカソン！ - connpass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yoronotaki.co.jp/news/201703/20170324_213.html&#34;&gt;新着情報｜養老乃瀧グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;開発風景1日目&#34;&gt;開発風景1日目&lt;/h2&gt;

&lt;h3 id=&#34;乾杯-チームビルディング&#34;&gt;乾杯＆チームビルディング&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/01_kaijo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/02_kaijo.png&#34; alt=&#34;&#34; /&gt;
会場は池袋の養老乃瀧本社にある研修センターでした。池袋の西口から歩いてすぐそばで、ビル全体が養老乃瀧グループの店舗と本社というメッカな建物です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/03_kanpai.png&#34; alt=&#34;&#34; /&gt;
まさかの開始早々にカンパイ（※朝です）。早速、イベントにおける居酒屋感をだしてゆきます。&lt;/p&gt;

&lt;h3 id=&#34;アイデア出し&#34;&gt;アイデア出し&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/04_onigiri.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/05_onigiri.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/06_onigiri.png&#34; alt=&#34;&#34; /&gt;
昼食は料理長さんの心遣いで「開発中も食べやすいように」とおにぎりが！食べたあとはアイデアソンの時間、どんどんアイデアを出して話し合い、具体的なプロダクトへと詰めてゆきます。&lt;/p&gt;

&lt;h3 id=&#34;1分間の中間発表タイム&#34;&gt;1分間の中間発表タイム&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/07_pitch.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/08_pitch.png&#34; alt=&#34;&#34; /&gt;
15時ごろからは中間発表があり、実際に作る前に各チームごとのアイデアと進捗を確認します。&lt;/p&gt;

&lt;h3 id=&#34;本格的なハック開始&#34;&gt;本格的なハック開始！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/09_hack.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/10_hack.png&#34; alt=&#34;&#34; /&gt;
夕食を味わいつつ、夜遅くまで開発は続きました。&lt;/p&gt;

&lt;h2 id=&#34;開発風景2日目&#34;&gt;開発風景2日目&lt;/h2&gt;

&lt;h3 id=&#34;朝からフル稼働&#34;&gt;朝からフル稼働！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/11_asa.png&#34; alt=&#34;&#34; /&gt;
2日目は朝8時半からと早い会場オープンですが、ハッカソンはできるだけ時間を有効活用したいもの。お昼頃にはもうプロトタイプが出来上がってきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/12_hiru.png&#34; alt=&#34;&#34; /&gt;
この日の昼食はこちらも食べやすくておしゃれな一品です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/13_hack.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/14_hack.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/15_hack.png&#34; alt=&#34;&#34; /&gt;
お昼を過ぎるともう会場はピリピリした雰囲気に。ソフトウェア・ハードウェアの実装やプレゼンテーションの作成でPCとにらめっこです。&lt;/p&gt;

&lt;h3 id=&#34;ハッカソンはゴールを見失わないことが大事&#34;&gt;ハッカソンはゴールを見失わないことが大事&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/16_mentor.png&#34; alt=&#34;&#34; /&gt;
ハッカソンの運営と参加の経験から、発表までのアドバイスがありました。時間のない中で制作に集中していると、見落としてしまう点はとても多いです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/17_hack.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/18_hack.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/19_hack.png&#34; alt=&#34;&#34; /&gt;
夕方が近づくと開発は大詰めに突入し、参加者の方々の表情が険しくなっていくのがわかります。個人的には、この時間帯のエンジニアの顔つきがとても好きです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/20_guest.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;審査員の方々が揃い、17時になってハックタイムは終了、作品発表にうつります。&lt;/p&gt;

&lt;h2 id=&#34;作品の紹介&#34;&gt;作品の紹介&lt;/h2&gt;

&lt;h3 id=&#34;ひょうぞう-チーム-ひょうたんおじさん&#34;&gt;「ひょうぞう」（チーム：ひょうたんおじさん）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/21_hyozo.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/22_hyozo.png&#34; alt=&#34;&#34; /&gt;
ひょうたんに話しかけると注文や雑談ができてしまう、万能音声アシスタント。機械による音声アシスタントはスマホに搭載されていたり人型だったりすることが多いですが、ひょうたんが喋るなんて、可愛らしさがありながら居酒屋的な要素もしっかり表現されています。&lt;/p&gt;

&lt;h3 id=&#34;光-るんです-チーム-スマートドランカー&#34;&gt;「光゜るんです」（チーム：スマートドランカー）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/23_pikaru.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/24_pikaru.png&#34; alt=&#34;&#34; /&gt;
実際の居酒屋で客側と店側それぞれが抱える問題に着目し、それらを同時に解決するための光るIoTプロダクト。透明なジョッキに相性の良いフルカラーLEDを組み合わせて映える見た目にするとともに、Webとも連動させて注文を効率化することができます。デモではその名の通りとにかく光って目立っていました。&lt;/p&gt;

&lt;h3 id=&#34;チーズ-チーム-laddermatch&#34;&gt;「チーズ」（チーム：LadderMatch）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/25_cheez.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/26_cheez.png&#34; alt=&#34;&#34; /&gt;
飲み会で自動で写真を撮ってくれるサービス。集合写真を撮影するときはタイマーを使うのが主流ですが、こちらは「チーズ」と一言発するだけで撮影してくれるというものです。各席にカメラが設置されていて、撮影された写真を自動で加工したりダウンロードできたりといったことを想定されているそうです。&lt;/p&gt;

&lt;h3 id=&#34;バックンにバクッとおまかせ-チーム-養老が大事なので4回言いました&#34;&gt;「バックンにバクッとおまかせ！」（チーム：養老が大事なので4回言いました）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/27_bakkun.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/28_bakkun.png&#34; alt=&#34;&#34; /&gt;
客側の「適当に色々頼みたい」に応じてメニューを自動注文してくれるスマホアプリ。来店した客にお互い気を遣わせないようにしたいということで、コースとアラカルトの中間のようなサービスを提供します。店がオススメしたいと考えるメニューを優先的に盛り込むこともでき、客側も店側もハッピーになれそうなプロダクトでした。&lt;/p&gt;

&lt;h3 id=&#34;love-ジョッキ-チーム-シナモン乃瀧&#34;&gt;「LOVE-ジョッキ」（チーム：シナモン乃瀧）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/29_love.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/30_love.png&#34; alt=&#34;&#34; /&gt;
ジョッキにセンサがついていて、乾杯の瞬間をセンシング。個々人の性格を判定して相性を診断し席順まで決定するという、リアルマッチングサービスです。合コンで使うととても楽しくなりそうですが、メカ好きな僕としてはセンサや電子ワイヤが絡みついたジョッキが出てくるだけで大歓喜（？）ですね！&lt;/p&gt;

&lt;h3 id=&#34;相手を身近に感じる遠隔お酌-チーム-おさけのたき&#34;&gt;「相手を身近に感じる遠隔お酌」（チーム：おさけのたき）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/31_remote.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/32_remote.png&#34; alt=&#34;&#34; /&gt;
東京の店舗で徳利を傾けると、遠く離れた支店でも用意された徳利が同時に傾いてお酌ができるというシステム。養老乃瀧の社是のひとつである「親孝行」をIoTシステムを使って実現しています。遠くの相手とテレビ電話をしながら飲むといった方法はありますが、実際にお酌ができる臨場感はその比ではないでしょう。&lt;/p&gt;

&lt;h3 id=&#34;仲間提灯-チーム-ちょうちんなかま&#34;&gt;「仲間提灯」（チーム：ちょうちんなかま）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/33_chochin.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/34_chochin.png&#34; alt=&#34;&#34; /&gt;
居酒屋のシンボルでもある提灯を各テーブルに配置し、客が色を変えることで様々な店内イベントに参加できるというもの。たとえば店内のテレビで野球観戦をしているときに、どちらのチームを応援しているかを色で示す「消極的な意思表現」をすることで、気負うことなく一体感を味わうことができます。&lt;/p&gt;

&lt;h3 id=&#34;養tv-チーム-yotuber&#34;&gt;「養TV」（チーム：Yotuber）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/35_yotube.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/36_yotube.png&#34; alt=&#34;&#34; /&gt;
新しい職業として徐々に広がりを見せているユーチューバーに対し、店舗での配信サポートとファンからの差し入れを実現するシステム。始めたばかりのユーチューバーは収入がほとんどなくご飯を食べるのも厳しい状況だそうですが、養TVから配信すれば、面白いと思ってもらえたユーザーから直接ご飯を奢ってもらえるという夢のようなプロダクトです。&lt;/p&gt;

&lt;h3 id=&#34;kanpai-チーム-sake&#34;&gt;「KANPAI」（チーム：SAKE）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/37_kanpai.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/38_kanpai.png&#34; alt=&#34;&#34; /&gt;
とにかく早く乾杯したい！という要望に応えるべく、入店直後すぐにビールが用意されるサービス。アプリを使って居酒屋の空席照会をし、空いていれば予約とともにファーストドリンクを頼んでおくことができます。着席と同時の乾杯はしたくてもなかなかできないので、実用性がとても高そうですね。&lt;/p&gt;

&lt;h3 id=&#34;養老乃城-チーム-ビンジョルノ&#34;&gt;「養老乃城」（チーム：ビンジョルノ）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/39_shiro.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/40_shiro.png&#34; alt=&#34;&#34; /&gt;
養老乃瀧のメニュー注文と連動させたスマホゲーム。店舗ごとに現れるモンスターを捕まえ、商品を注文することでモンスターを強化し、別の店舗にいる客同士で対戦させることができます。スマホゲーム市場は今熱いビジネスのひとつですが、このようにリアルソーシャルゲームとすることで、飲食産業と連携した様々なサービスに発展させられそうですね。&lt;/p&gt;

&lt;h3 id=&#34;46phone-チーム-team46phone&#34;&gt;「46Phone」（チーム：Team46Phone）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/41_phone.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/098/42_phone.png&#34; alt=&#34;&#34; /&gt;
居酒屋で飲んだ後にありがちな忘れ物を、電話を使って確認ができるサービス。自動応答と発話認識機能を使っていて、お店側の管理も簡単です。タイムサービスの応募も電話を使ってできるんだとか。インターフェースをスマホアプリではなく電話とすることで、どの年代の客層も利用しやすい仕様となっています。&lt;/p&gt;

&lt;h2 id=&#34;結果発表&#34;&gt;結果発表！&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/43_matome.png&#34; alt=&#34;&#34; /&gt;
まずはこのハッカソンの目指すところを確認。「居酒屋を楽しく、便利にするツール」というテーマに沿っているプロダクトを選出します。優秀なプロダクトは店舗での実稼働を目指すことを前提にしています。
それでは結果発表！&lt;/p&gt;

&lt;h3 id=&#34;twilio賞-youtuber-養tv&#34;&gt;Twilio賞：Youtuber「養TV」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/44_twilio.png&#34; alt=&#34;&#34; /&gt;
協賛としてサービスを提供していただいたTwilioからは、可愛らしいハンドセットが贈られました。&lt;/p&gt;

&lt;h3 id=&#34;dmm-make-akiba賞-sake-kanpai&#34;&gt;DMM.make AKIBA賞：SAKE「KANPAI」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/45_dmm.png&#34; alt=&#34;&#34; /&gt;
審査員の岡島さん曰く、様々な欲望を提供してゆくDMMとしては、酒飲みの欲望を受け止めるほかなかったとのことです。賞品は「岡島さんと一緒に飲める賞」。&lt;/p&gt;

&lt;h3 id=&#34;mashup-award賞-シナモン乃瀧-love-ジョッキ&#34;&gt;Mashup Award賞：シナモン乃瀧「LOVE-ジョッキ」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/46_ma.png&#34; alt=&#34;&#34; /&gt;
デモではうまく動かないなどのトラブルがありましたが、ハッカソンならではのチャレンジが評価されました。賞品は「好きなマイコンをプレゼント」。&lt;/p&gt;

&lt;h3 id=&#34;特別賞その1-ひょうたんおじさん-ひょうぞう&#34;&gt;特別賞その1：ひょうたんおじさん「ひょうぞう」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/47_beer.png&#34; alt=&#34;&#34; /&gt;
実用性を勘案し、お店側としても楽しいなと思えるものとして、一軒目酒場の店長である千葉さんから選出されました。&lt;/p&gt;

&lt;h3 id=&#34;特別賞その2-スマートドランカー-光-るんです&#34;&gt;特別賞その2：スマートドランカー「光゜るんです」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/48_beer.png&#34; alt=&#34;&#34; /&gt;
とにかくピカピカ光っている「パリピ感」が審査員の池澤あやかさんにウケたそうです。&lt;/p&gt;

&lt;h3 id=&#34;最優秀賞は-おさけのたき-相手を身近に感じる遠隔お酌&#34;&gt;最優秀賞は……　おさけのたき「相手を身近に感じる遠隔お酌」&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/49_winner.png&#34; alt=&#34;&#34; /&gt;
優勝は遠隔でお酌ができるプロダクト。ただただ居酒屋体験を楽しくするだけでなく、最新の技術をうまく使って養老乃瀧の社是「親孝行」をサポートするという素晴らしいアイデアでした。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/098/50_kanpai.png&#34; alt=&#34;&#34; /&gt;
IT業界と飲食業界とのコラボがおそらく初であろう「養老乃瀧ハッカソン」でしたが、参加者の皆さんからも主催者側からも「とても楽しかった」という声をとても多くいただくことができました。
優勝プロダクトが実際に店舗に登場するのはまだしばらく先にはなりますが、今後もこのようなイノベーションを加速するイベントをどんどん実施していきたいですね。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;業界初だと思われる養老の瀧ハッカソン &lt;a href=&#34;https://twitter.com/hashtag/yoro_hack?src=hash&#34;&gt;#yoro_hack&lt;/a&gt; 無事に終了いたしました、お疲れ様でした！第2回もあるかも…？だそうですのでもしその際はまた奮ってご参加くださいませ〜 &lt;a href=&#34;https://twitter.com/hashtag/dotstudio?src=hash&#34;&gt;#dotstudio&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/hackathon?src=hash&#34;&gt;#hackathon&lt;/a&gt; &lt;a href=&#34;https://t.co/GEOaMmAmQ3&#34;&gt;pic.twitter.com/GEOaMmAmQ3&lt;/a&gt;&lt;/p&gt; うこ (@harmoniko) &lt;a href=&#34;https://twitter.com/harmoniko/status/860113158186311684&#34;&gt;2017年5月4日&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;懇親会に養老乃瀧の本気を見た&#34;&gt;懇親会に養老乃瀧の本気を見た&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;IoTベンチャーdotstudioが養老の瀧とコラボしてハッカソンしてしまった結果をご査収ください &lt;a href=&#34;https://twitter.com/hashtag/yoro_hack?src=hash&#34;&gt;#yoro_hack&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/dotstudio?src=hash&#34;&gt;#dotstudio&lt;/a&gt; &lt;a href=&#34;https://t.co/nSAd1vs5Yu&#34;&gt;pic.twitter.com/nSAd1vs5Yu&lt;/a&gt;&lt;/p&gt; うこ (@harmoniko) &lt;a href=&#34;https://twitter.com/harmoniko/status/860088526141915136&#34;&gt;2017年5月4日&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;解体ショー。 &lt;a href=&#34;https://twitter.com/hashtag/yoro_hack?src=hash&#34;&gt;#yoro_hack&lt;/a&gt; &lt;a href=&#34;https://t.co/v672AAN0QD&#34;&gt;pic.twitter.com/v672AAN0QD&lt;/a&gt;&lt;/p&gt; 4689 (@4689thon) &lt;a href=&#34;https://twitter.com/4689thon/status/860099962503176196&#34;&gt;2017年5月4日&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;おおよそハッカソンでは出ないような、というより、誕生日にビュッフェに食事しに行くよりも豪華ではないかとすら思われる素晴らしき食事を提供していただきました。ステマではなく、養老乃瀧ってなんて素敵なんだと感じずにはいられませんでした。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;おいしそうな料理と総料理長！ありがとうございました！ &lt;a href=&#34;https://twitter.com/hashtag/yoro_hack?src=hash&#34;&gt;#yoro_hack&lt;/a&gt; &lt;a href=&#34;https://t.co/NRvYjaP7Lh&#34;&gt;pic.twitter.com/NRvYjaP7Lh&lt;/a&gt;&lt;/p&gt; 4689 (@4689thon) &lt;a href=&#34;https://twitter.com/4689thon/status/860098794163118080&#34;&gt;2017年5月4日&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【話題の土善旅館】Go開発合宿2017 #golangjp</title>
      <link>https://dotstud.io/blog/go-beginners-camp-report/</link>
      <pubDate>Thu, 27 Apr 2017 22:08:08 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/go-beginners-camp-report/</guid>
      
      <description>

&lt;p&gt;【Go合宿】 土善旅館は最高だったしさらにパワーアップしていた【25人でGo！】&lt;/p&gt;

&lt;h2 id=&#34;4-22-4-23-goビギナーズ開発合宿&#34;&gt;4/22〜4/23 Goビギナーズ開発合宿！&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/01_event_page.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://go-beginners.connpass.com/event/47481/&#34;&gt;Go合宿募集ページ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Swift愛好会の&lt;a href=&#34;http://qiita.com/gotou015/items/40081f33b68f616491b8&#34;&gt;開発合宿&lt;/a&gt;に当てられて、&lt;strong&gt;Goビギナーズでも開発合宿を開催した&lt;/strong&gt;のでレポートします！&lt;/p&gt;

&lt;p&gt;なおあまりビギナーはいなかった模様。&lt;/p&gt;

&lt;p&gt;土善旅館さんの神っぷりについては至る所でまとめられているのですが、&lt;strong&gt;想像よりずっと神だった&lt;/strong&gt;&amp;amp;&amp;amp;&lt;strong&gt;さらにパワーアップしていた&lt;/strong&gt;のでみんなマジで行こう！という思いで綴ります。そして&lt;strong&gt;合宿を開催したい幹事さん向け&lt;/strong&gt;に備忘録を！&lt;/p&gt;

&lt;p&gt;当日のTogetterまとめはこちら。 -&amp;gt; &lt;a href=&#34;https://togetter.com/li/1104119&#34;&gt;【土善旅館】25人でGo開発合宿！【isGOD】&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;短いまとめ&#34;&gt;短いまとめ&lt;/h2&gt;

&lt;p&gt;長くなること必至なので、絶対に知って欲しい点だけ先にまとめ。&lt;/p&gt;

&lt;h3 id=&#34;土善旅館は最高&#34;&gt;土善旅館は最高&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;思ってたよりずっとキレイ、かつキレイにしようとしている感がある（至る所がリフォーム済み）&lt;/li&gt;
&lt;li&gt;静か。広い。庭がすごい。&lt;/li&gt;
&lt;li&gt;ご飯超豪華。夜は前菜にお造りに煮付けにしゃぶしゃぶに、とただ最高だった。&lt;/li&gt;
&lt;li&gt;設備充。お風呂は24H、いつでもコーヒー、マンガ、マッサージ機。できなかったけど卓球も。&lt;/li&gt;
&lt;li&gt;旅館の人の対応がすごい。送迎も人数変更も超柔軟で、&lt;strong&gt;冷蔵庫（本体）まで貸してくれた&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;土善旅館の開発環境はまじ最高&#34;&gt;土善旅館の開発環境はまじ最高&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;備品言うことなし、且つ高機能&lt;/strong&gt;。爆速のWi-Fi、でかいスクリーン、モニタ複数、変換ケーブル、Macでも競合しない延長コンセントetc.&lt;/li&gt;
&lt;li&gt;開発部屋がめちゃ広い。椅子と畳がいい感じ。&lt;/li&gt;
&lt;li&gt;クッション（&lt;a href=&#34;https://yogibo.jp/&#34;&gt;Yogibo&lt;/a&gt;）・毛布等充実。&lt;/li&gt;
&lt;li&gt;開発部屋は&lt;strong&gt;ずーっと開放で一律500円。ヤッッッッス&lt;/strong&gt;。寝たり起きたりもうここで仕事したい。&lt;/li&gt;
&lt;li&gt;いい塩梅でにゃーんが癒しを運んでくる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ありがとうline&#34;&gt;ありがとうLINE&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;全体連絡はLINEグループ&amp;amp;金銭徴収はLINE Pay。（一部希望者はPayPal）&lt;/li&gt;
&lt;li&gt;LINE Payは手数料なし・徴収が簡単・履歴が残る・キャッシュバックも簡単。&lt;/li&gt;
&lt;li&gt;LINEアルバムで写真即シェア。&lt;/li&gt;
&lt;li&gt;スタンプ押せるので会話が盛り上がりやすい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;安定のスプレッドシート&#34;&gt;安定のスプレッドシート&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;connpassIDとLINEアカウントの照合、集金済みフラグなど管理&lt;/li&gt;
&lt;li&gt;支払い金額を管理&lt;/li&gt;
&lt;li&gt;LTエントリーを各自記入してもらう&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;行程を追いながら要点まとめ&#34;&gt;行程を追いながら要点まとめ&lt;/h2&gt;

&lt;h3 id=&#34;募集-集金&#34;&gt;募集&amp;amp;集金&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/02_pay_sheet.png&#34; alt=&#34;&#34; /&gt;
募集はconnpass＆集金はLINE PayとPayPalで。&lt;/p&gt;

&lt;p&gt;connpassで申し込みがあっても連絡がつかないとまずいので、今回は&lt;strong&gt;集金した人を宿泊人数として計算&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;アカウントと集金フラグはスプレッドシートで管理。&lt;/p&gt;

&lt;p&gt;旅館さんに&lt;strong&gt;男女の数（部屋割り）を聞かれる&lt;/strong&gt;のでconnpassなら申込時アンケートにするといいかも。&lt;/p&gt;

&lt;h3 id=&#34;役割分担&#34;&gt;役割分担&lt;/h3&gt;

&lt;p&gt;結構やることが多いのでしっかり分担。今回は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リーダー、コンテンツ企画: tenntennさん&lt;/li&gt;
&lt;li&gt;旅館との連絡: しーめるさん&lt;/li&gt;
&lt;li&gt;買い出し: 木下さん&lt;/li&gt;
&lt;li&gt;LINE招待, 会計: のびすけさん&lt;/li&gt;
&lt;li&gt;賑やかし: ちゃんとく&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すみませんすみません&lt;/p&gt;

&lt;h3 id=&#34;旅のプランを考える&#34;&gt;旅のプランを考える&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/03_time_schedule.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://gist.github.com/tokutoku393/1afea0a7f4649bd5b0349e76a78833df&#34;&gt;Go合宿2017しおり&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;時間や持ち物共有のためのしおりがこちら。Swift愛好会のしおりを&lt;del&gt;パク&lt;/del&gt;参考に作成。後藤神まじ感謝！&lt;/p&gt;

&lt;p&gt;基本的に時間はゆるふわ、旅館さんも「来て欲しい頃に送迎呼んで〜」とかなり柔軟に対応してくれる。&lt;/p&gt;

&lt;p&gt;旅館とのやりとりは電話。&lt;strong&gt;電話できるタイプのエンジニアがいるとつよい&lt;/strong&gt;。しーめるさん本当にありがとう！&lt;/p&gt;

&lt;h2 id=&#34;1日目&#34;&gt;1日目&lt;/h2&gt;

&lt;h3 id=&#34;10-10-日暮里駅集合&#34;&gt;10:10 日暮里駅集合&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/04_nippori.png&#34; alt=&#34;&#34; /&gt;
渋谷を経由すると遠くなる人が多かったので、日暮里駅に集合。&lt;/p&gt;

&lt;p&gt;JR日暮里駅-&amp;gt;京成日暮里駅の乗り換え改札が大きくて集合しやすい感じ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;この時点で数人は遅刻する&lt;/strong&gt;。まあ異国に行くわけではないのでOKだ！&lt;/p&gt;

&lt;h3 id=&#34;11-25-成田組合流&#34;&gt;11:25 成田組合流&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/05_narita.png&#34; alt=&#34;&#34; /&gt;
京成成田駅-&amp;gt;JR成田駅への乗り換えポイントで合流する人ちらほら。恒例（？）の記念写真を撮る。&lt;/p&gt;

&lt;p&gt;乗り換え時間が短い中で焦ってコンビニで買い物したけど、&lt;strong&gt;笹川にも普通にコンビニはあるぞ！&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;11-40-笹川まで鈍行に揺られる&#34;&gt;11:40 笹川まで鈍行に揺られる&lt;/h3&gt;

&lt;p&gt;外はのどかな田園風景、電車の乗客も少なくなって合宿感にテンション上がる。&lt;/p&gt;

&lt;p&gt;全員では無理だったけどちょこちょこ固まって座って開発したりお喋りしたり。&lt;/p&gt;

&lt;p&gt;Wantedly風写真撮りポイント。&lt;/p&gt;

&lt;h3 id=&#34;12-30-笹川駅着-青柳亭で腹ごしらえ&#34;&gt;12:30 笹川駅着、青柳亭で腹ごしらえ！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/06_aoyagi.png&#34; alt=&#34;&#34; /&gt;
駅から歩いて数分の青柳亭で昼食。手前にアオヤギっていう服屋があるけどそれは偽物だ！（見ればわかる）&lt;/p&gt;

&lt;p&gt;Swift愛好会の方で「メニュー取りまとめが大変なので全員同じにすればよかった」とあったけど、私が違うのを注文したかったので取りまとめを申し出た。&lt;strong&gt;すぐに後悔した。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「丼もの+セット麺」が基本のメニューで、種類がありすぎてまじで大変。あつ/ひや/うどん/そば/かけ/もり、などなど色々あるし違うのもできるよって言ってくれる。&lt;/p&gt;

&lt;p&gt;メニューを入手したので参考にしてください。（※変更の可能性大いにありです）
&lt;img src=&#34;https://dotstud.io/img/blog/097/07_menu.png&#34; alt=&#34;&#34; /&gt;
（これ以外にもあるよ！）&lt;/p&gt;

&lt;h3 id=&#34;14-00-食事後にコンビニへ&#34;&gt;14:00 食事後にコンビニへ&lt;/h3&gt;

&lt;p&gt;青柳亭の目の前にセブンイレブンがある。みんなで歩いて行って適宜買い物。&lt;/p&gt;

&lt;p&gt;土善旅館さんへ伝えると&lt;strong&gt;こちらへお迎えに来てくれた&lt;/strong&gt;。GOD。&lt;/p&gt;

&lt;p&gt;ここで一次遅刻組合流。&lt;/p&gt;

&lt;h3 id=&#34;14-30-旅館着-充実っぷりに驚愕&#34;&gt;14:30 旅館着、充実っぷりに驚愕&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/08_ryokan_all.png&#34; alt=&#34;&#34; /&gt;
長旅を経て旅館着！看板の合宿感にテンション上がる！&lt;/p&gt;

&lt;p&gt;とりあえず男女それぞれお部屋に移動。&lt;/p&gt;

&lt;p&gt;女子4人だったのでお部屋を相当広く使えて最高だった。部屋内に洗面台×2とトイレもある充実っぷり。ドライヤー、ヘアアイロン、選べる浴衣とネコみみを貸してもらえた。（男性は同じお部屋を10人で使ったっぽい）
&lt;img src=&#34;https://dotstud.io/img/blog/097/09_ryokan_heya.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;男性の浴衣と、タオル、歯ブラシは有料なので忘れずにね！&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;memo-お会計&#34;&gt;memo: お会計&lt;/h4&gt;

&lt;p&gt;到着した時点でお会計。&lt;/p&gt;

&lt;p&gt;Go合宿時のお値段は、&lt;strong&gt;宿泊費8200円＋設備使用量500円/1人+税&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;それ以外に夕食時のお酒を&lt;strong&gt;全体で7000円分&lt;/strong&gt;と、2日目にお願いした&lt;strong&gt;おにぎり250円/1人&lt;/strong&gt;を合わせても安すぎる！！！しかもなぜか70円引きされていた。&lt;/p&gt;

&lt;h3 id=&#34;15-00-乾杯-開発スタート&#34;&gt;15:00 乾杯＆開発スタート！&lt;/h3&gt;

&lt;p&gt;ハイネケンのビールサーバで乾杯して開発スタート！
&lt;img src=&#34;https://dotstud.io/img/blog/097/10_kanpai1.png&#34; alt=&#34;&#34; /&gt;
乾杯後一人ずつ軽く自己紹介と旅の目標共有。&lt;/p&gt;

&lt;p&gt;開発部屋ひんろい！！足りないものがないくらい充実！&lt;/p&gt;

&lt;p&gt;延長コード、変換ケーブル、モニタ、クッション等々欲しいものは一通り揃ってる。&lt;/p&gt;

&lt;p&gt;そして「この後買い出しに行く」旨を伝えると、&lt;strong&gt;冷蔵庫（本体）を貸してくれる&lt;/strong&gt;という神ハプニング。代車で運ばれてきました。&lt;/p&gt;

&lt;h3 id=&#34;15-15-初心者講座開催&#34;&gt;15:15 初心者講座開催&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/11_wantedly.png&#34; alt=&#34;&#34; /&gt;
主催tenntennさんによりGo初めての人向け講座。&lt;/p&gt;

&lt;p&gt;基本の項目をザックリまとめて30分くらい（体感）で教えてくれました。圧倒的感謝……！
&lt;center&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/efg9YT4fSkYUU6&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/takuyaueda967/2016-go&#34; title=&#34;Go入門&#34; target=&#34;_blank&#34;&gt;Go入門&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://www.slideshare.net/takuyaueda967&#34;&gt;Takuya Ueda&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;17-00-買い出し班スーパーへ&#34;&gt;17:00 買い出し班スーパーへ&lt;/h3&gt;

&lt;p&gt;土善旅館さんのご好意で車を借りて買い出しへ。飲まない運転者が必要だね！&lt;/p&gt;

&lt;p&gt;と思いきや旅館さんが「&lt;strong&gt;買い出しも送迎しますよ&lt;/strong&gt;」と言ってくれる。&lt;/p&gt;

&lt;p&gt;なぜかちょうどよく運営の木下さんが現れたので、今回はお気持ちだけいただきスーパーへ。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;memo-買い出しの量決めるの結構大変&#34;&gt;memo: 買い出しの量決めるの結構大変&lt;/h4&gt;

&lt;p&gt;事前にビール飲まない人だけアンケート取って車で5分くらいのスーパーへ買い出しへ。&lt;/p&gt;

&lt;p&gt;だいたい人数×3本くらいのお酒を購入。ビール7:カクテル3くらいか。ボトル等は特になし。&lt;/p&gt;

&lt;p&gt;つまみを8000円分くらい購入。PC触るので、お値段はるけどスナックよりチーズとかサラミとかナッツとかが嬉しいかも。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;スーパーはクレジットカード使えないので要注意&lt;/strong&gt;。（※合宿時点）&lt;/p&gt;

&lt;p&gt;今回お酒の量はちょうどいい感じだったけど、参加者の雰囲気によってかなり前後しそう。&lt;/p&gt;

&lt;h3 id=&#34;17-30-夕飯までもくもく&#34;&gt;17:30 夕飯までもくもく&lt;/h3&gt;

&lt;p&gt;買い出し後、仕切り直し乾杯！&lt;/p&gt;

&lt;p&gt;夕飯を19:00（遅い方）にしたので、それまでもくもく。&lt;/p&gt;

&lt;p&gt;Yogiboを駆使したゴロ寝スタイルとか、ヘッドフォンで集中したりとか、思い思いに開発。
&lt;img src=&#34;https://dotstud.io/img/blog/097/12_mkmk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;19-00-豪勢なお夕飯&#34;&gt;19:00 豪勢なお夕飯！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/13_dinner.png&#34; alt=&#34;&#34; /&gt;
結構お菓子食べてしまっていたのを後悔。つまみ解放は夕食後が正解だったか？&lt;/p&gt;

&lt;p&gt;前菜、お造り、天ぷら、肉、魚、本当にたまらんでした。&lt;/p&gt;

&lt;p&gt;夕食後はそのまま飲んだりお風呂はいったり自由時間。&lt;/p&gt;

&lt;h3 id=&#34;21-00-仕切り直し乾杯&#34;&gt;21:00 仕切り直し乾杯&lt;/h3&gt;

&lt;p&gt;改めて乾杯！ここで旅の締めとして&lt;strong&gt;2日目にLT大会を開催&lt;/strong&gt;することを告知、参加者を募る。&lt;/p&gt;

&lt;p&gt;タイムリミットがあると頑張れるしプレッシャーも少なくていいね！&lt;/p&gt;

&lt;h3 id=&#34;24-00-峠越え&#34;&gt;24:00 峠越え&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/14_allnight.png&#34; alt=&#34;&#34; /&gt;
24時だよ全員集合！！&lt;/p&gt;

&lt;p&gt;飲んだり書いたり飲んだり書いたり、最終組はその後4:30頃まで開発していた模様。&lt;/p&gt;

&lt;p&gt;Swift愛好会の時は開発部屋で雑魚寝班が多かったみたいだけど、今回は結構お部屋に戻っていました。&lt;/p&gt;

&lt;p&gt;開発部屋でゴロ寝してたらこんなハプニングも(//ω//)
&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;開発部屋で寝てたらこうなってた☺️ &lt;a href=&#34;https://twitter.com/hashtag/golangjp?src=hash&#34;&gt;#golangjp&lt;/a&gt; &lt;a href=&#34;https://t.co/vbAkRUCIiK&#34;&gt;pic.twitter.com/vbAkRUCIiK&lt;/a&gt;&lt;/p&gt; ちゃんとく( ˙꒳​˙ ) (@tokutoku393) &lt;a href=&#34;https://twitter.com/tokutoku393/status/855918202760474625&#34;&gt;2017年4月22日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;2日目&#34;&gt;2日目&lt;/h2&gt;

&lt;h3 id=&#34;8-00-朝食&#34;&gt;8:00 朝食&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/15_morning.png&#34; alt=&#34;&#34; /&gt;
朝からお鍋（アサリ出汁湯豆腐）とか最高か！！&lt;/p&gt;

&lt;p&gt;今回は朝早かったからか5人くらい来なかったかな？なんだかんだ8:30くらいまでに来れば食べれた。&lt;/p&gt;

&lt;h3 id=&#34;9-00-追い込みもくもく開始&#34;&gt;9:00 追い込みもくもく開始&lt;/h3&gt;

&lt;p&gt;開発合宿も終盤、気合いを入れ直す乾杯！&lt;/p&gt;

&lt;p&gt;みんなちゃんと起きて開発してた。エンジニアのそういうとこ最高。（その間朝風呂してた）&lt;/p&gt;

&lt;h3 id=&#34;11-00-lt大会で成果発表&#34;&gt;11:00 LT大会で成果発表&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/16_lt.png&#34; alt=&#34;&#34; /&gt;
計14名がエントリー！成果出せた人も出せなかった人も和やかなムードで発表。&lt;/p&gt;

&lt;p&gt;今回は「一番楽しかったを感じたLT」「一番今後頑張って欲しいと思ったLT」「一番Goへの愛を感じたLT」へ投票を用意。（googleフォーム）&lt;/p&gt;

&lt;p&gt;初心者〜玄人までいろんな話を聞けたし投票も結構ばらけてかなり良かったのでは！！&lt;/p&gt;

&lt;h3 id=&#34;11-30-追いうちの神デザート&#34;&gt;11:30 追いうちの神デザート&lt;/h3&gt;

&lt;p&gt;ここで旅館さんサービスのデザート登場。
&lt;img src=&#34;https://dotstud.io/img/blog/097/17_desert.png&#34; alt=&#34;&#34; /&gt;
聞いていた話よりグレードアップしている。しゅごい。。&lt;/p&gt;

&lt;h3 id=&#34;12-30-お昼-まったり開発&#34;&gt;12:30 お昼＆まったり開発&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/18_onigiri.png&#34; alt=&#34;&#34; /&gt;
お願いしたおにぎり+残りのお酒でラスト乾杯！&lt;/p&gt;

&lt;p&gt;おにぎりの沁みる美味しさ・・。&lt;/p&gt;

&lt;p&gt;そして全てのお会計が終わったので余った分一人当たり494円をキャッシュバック。&lt;/p&gt;

&lt;p&gt;端数のキャッシュバックも簡単、&lt;strong&gt;そうLINE Payならね&lt;/strong&gt;。
（一括送金はできないようなので個別対応。ありがとうのびすけさん！）&lt;/p&gt;

&lt;h3 id=&#34;14-10-宿発-笹川駅へ&#34;&gt;14:10 宿発、笹川駅へ&lt;/h3&gt;

&lt;p&gt;チェックアウトは15:00＆電車は1時間に一本なので、時間を決めて送迎をお願いすればok。&lt;/p&gt;

&lt;h3 id=&#34;14-30-笹川駅で恒例のやつ&#34;&gt;14:30 笹川駅で恒例のやつ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/097/19_sasagawa.png&#34; alt=&#34;&#34; /&gt;
Swift愛好会に敬意を払い、恒例の集合写真。守りたいこの伝統。&lt;/p&gt;

&lt;h3 id=&#34;after-記事書くまでが合宿&#34;&gt;After 記事書くまでが合宿！&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ShirataHikaru/items/639ed865ee30765c7f43&#34;&gt;GoビギナーがPDFのクローラー作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@maro_kt/go%E5%90%88%E5%AE%BF-%E5%9C%9F%E5%96%84%E6%97%85%E9%A4%A8%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8D%E3%81%9F-7607bf5d8342&#34;&gt;Go合宿＠土善旅館に参加してきた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tikasan.hatenablog.com/entry/2017/04/23/231512&#34;&gt;Go合宿でビール駆動開発してきた@土善旅館&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shanonim.hatenablog.com/entry/2017/04/24/000648&#34;&gt;Go合宿2017@ 土善旅館に参加しました #golangjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その日のうちにたくさんまとめブログを書いてもらいました！！！&lt;/p&gt;

&lt;p&gt;充実した旅になったようでよかったです（泣）&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;土善旅館最高とは聞いていたが、よもやここまでとは……。本当に言うこと無しな旅でした。&lt;/p&gt;

&lt;p&gt;百聞は一見にしかず、&lt;strong&gt;みんなとにかく土善旅館さんに行ってくれ。最高だけが待っている！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（ちなみにちゃんとくは体調不良で合宿中12時間くらい寝て過ごしたのでハロー世界しかできませんでした。みんな体調管理はしっかりね！！）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>「Wio Node」で半田付けなしの電子工作！温度計作りでIoTはじめの一歩</title>
      <link>https://dotstud.io/blog/seeed-wionode-hands-on/</link>
      <pubDate>Fri, 21 Apr 2017 22:18:36 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/seeed-wionode-hands-on/</guid>
      
      <description>

&lt;p&gt;こんにちは、バックエンドエンジニアのちゃんとく（&lt;a href=&#34;https://twitter.com/tokutoku393&#34;&gt;@tokutoku393&lt;/a&gt;）です。&lt;/p&gt;

&lt;p&gt;今回は、難しいプログラミングや半田付けなしで簡単に試せる「Wio Node」を使って温度表示計を作ってみます！この記事は「&lt;strong&gt;&lt;a href=&#34;https://dotstudio.connpass.com/event/53388/&#34;&gt;WioNodeで始めよう！挫折しないIoT入門ハンズオン
&lt;/a&gt;&lt;/strong&gt;」の資料にもなっています。&lt;/p&gt;

&lt;p&gt;かなり長いですが、詳細な手順を載せていますので根気よく頑張りましょう！&lt;/p&gt;

&lt;h2 id=&#34;wio-nodeとは&#34;&gt;Wio Nodeとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/01_wio_node.png&#34; alt=&#34;&#34; /&gt;
今回使うWio Nodeは、中国のSeeed Studio社が開発した&lt;strong&gt;Wi-Fiモジュール初期搭載のIoTデバイス&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grove規格のモジュールをそのまま挿せるコネクタを搭載&lt;/strong&gt;していて、はんだづけなしで動かすことができます。モジュールのセットアップも&lt;strong&gt;公式のスマートフォンアプリから行うことができ&lt;/strong&gt;、電子工作初心者でも簡単に試せます。&lt;/p&gt;

&lt;h2 id=&#34;動かしてみる&#34;&gt;動かしてみる&lt;/h2&gt;

&lt;p&gt;早速Wio Nodeを動かしてみましょう。今回は、温度センサと7セグメントディスプレイを使って簡易温度計を作ってみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/02_map.png&#34; alt=&#34;&#34; /&gt;
Wio Nodeに接続したモジュール同士は一見つながっているように見えますが、&lt;strong&gt;内部で連携する仕組みはありません&lt;/strong&gt;。それぞれWi-Fiを使ってAPIからインプットやアウトプットを制御します。&lt;/p&gt;

&lt;p&gt;以下の手順で作っていきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wio Nodeのセットアップ&lt;/li&gt;
&lt;li&gt;Wio Nodeにモジュールを接続する&lt;/li&gt;
&lt;li&gt;アプリからAPIを試す&lt;/li&gt;
&lt;li&gt;Node.jsでプログラムを書く&lt;/li&gt;
&lt;li&gt;試してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Wio Node -&amp;gt; &lt;a href=&#34;https://dotstud.io/shop/wionode-social-remote-control/&#34;&gt;購入ページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Micro USBケーブル&lt;/li&gt;
&lt;li&gt;Grove 温度センサ（型番: SEEED-101020015）&lt;/li&gt;
&lt;li&gt;Grove 7セグメントディスプレイ（型番: SEEED-104030003）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;類似のセンサがたくさんありますので、型番をよくご確認ください。&lt;/strong&gt;（Wio Nodeに対応していない場合があります。）&lt;/p&gt;

&lt;h4 id=&#34;筆者の環境&#34;&gt;筆者の環境&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;MacBook Pro（Retina 13-inch、Early 2015）&lt;/li&gt;
&lt;li&gt;OS X El Capitan（v10.11.6）&lt;/li&gt;
&lt;li&gt;iOS10.31&lt;/li&gt;
&lt;li&gt;Node.js v7.9.0&lt;/li&gt;
&lt;li&gt;npm 4.5.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wio-nodeのセットアップ&#34;&gt;Wio Nodeのセットアップ&lt;/h3&gt;

&lt;p&gt;まずはWio Nodeの初期設定から進めていきます。&lt;/p&gt;

&lt;p&gt;Wio Nodeは&lt;strong&gt;モバイルバッテリ・PCなどからUSBケーブルで電源を供給しましょう&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;開発用アプリのインストール&#34;&gt;開発用アプリのインストール&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/02_wio_app.png&#34; alt=&#34;&#34; /&gt;
Wio Nodeの開発には、公式からリリースされている「Wio Link」というアプリ（Androidの場合は「Wio」）を利用します。執筆時はiOS版は1.5.2、Android版は2.3.6がリリースされています。今回はiOS版を使っての紹介です。&lt;/p&gt;

&lt;p&gt;iOS: &lt;a href=&#34;https://itunes.apple.com/jp/app/wio-link/id1054893491?mt=8&#34;&gt;https://itunes.apple.com/jp/app/wio-link/id1054893491?mt=8&lt;/a&gt;&lt;br /&gt;
Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=cc.seeed.iot.ap&amp;amp;hl=ja&#34;&gt;https://play.google.com/store/apps/details?id=cc.seeed.iot.ap&amp;amp;hl=ja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;アプリとwio-nodeの設定&#34;&gt;アプリとWio Nodeの設定&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/03_acount.png&#34; alt=&#34;&#34; /&gt;
アプリを開いたらまずはアカウントを作成しましょう。「SIGN UP」からメールアドレスとパスワードを設定し「Register」で登録します。ServerLocationはデフォルトのGlobalにしておきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GmailやFacebookのアカウントを使った登録もできますが、他サービスとの連携でうまくいかないことがあるので非推奨です&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/04_add_device.png&#34; alt=&#34;&#34; /&gt;
アカウントが作成されたらAdd Your First Deviceをタップし、Wio Nodeを選択します。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;wi-fi設定&#34;&gt;Wi-Fi設定&lt;/h4&gt;

&lt;p&gt;続いてWi-Fi設定をします。&lt;strong&gt;手順が少しややこしいので注意してください&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;まずは簡単にWio Nodeがインターネットに繋がる仕組みを整理してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/095/05_internet.png&#34; alt=&#34;&#34; /&gt;
デバイスがインターネットに繋がるためには、&lt;strong&gt;インターネットに繋がる媒介（=アクセスポイント）&lt;/strong&gt;が必要です。私たちは普段ルータやポケットWi-Fi（モバイルルータ）を媒介にしていますね。&lt;/p&gt;

&lt;p&gt;Wio Nodeも同様に、インターネットに繋がるために&lt;strong&gt;アクセスポイントが必要&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/06_wifi_setup.png&#34; alt=&#34;&#34; /&gt;
Wio Nodeに&lt;strong&gt;アクセスポイントの情報を教える必要がある&lt;/strong&gt;ので、アドホックモードでWio Nodeとスマートフォンを同じ回線に繋いだ状態にします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;スマートフォンからWio Nodeにアクセスポイント情報を教えてあげる&lt;/strong&gt;と、その後は&lt;strong&gt;Wio Node自身がアクセスポイントに繋がります&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;接続手順が複雑になりますが、この仕組みを押さえておきましょう！&lt;/p&gt;

&lt;p&gt;アクセスポイントやWAN/LANについてよくわからない方は&lt;a href=&#34;https://dotstud.io/docs/network&#34;&gt;ドキュメント&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;wi-fi設定手順&#34;&gt;Wi-Fi設定手順&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/06_func.png&#34; alt=&#34;&#34; /&gt;
まずは画面の指示にしたがってFuncボタン（写真親指側）を4秒以上長押しすると、青いランプがゆらゆらと光ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/07_wio_network.png&#34; alt=&#34;&#34; /&gt;
iOSのWi-Fi選択画面から、「Wio_XXXX」というSSIDを選択します。（Androidはアプリ内での選択です。）アドホックモードで&lt;strong&gt;Wio Nodeとスマートフォンが繋がっている状態&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/08_wifi_list.png&#34; alt=&#34;&#34; /&gt;
アプリに戻ると、続いてWi-Fiの接続を促されます。ネットワークリストから、部屋や会場のWi-Fi（利用するWi-Fi）を選択してパスワードを入力しましょう。&lt;strong&gt;アクセスポイント情報を教えてあげた状態&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/09_device_connect.png&#34; alt=&#34;&#34; /&gt;
Wio Nodeがインターネットに繋がり、登録が完了しました。デバイスに名前をつけておきます。（Android端末で認識がうまくいかない場合、&lt;strong&gt;機内モードにして試す&lt;/strong&gt;と解消することがあるようです。）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;アプリからでは失敗する場合は、&lt;a href=&#34;https://dotstud.io/docs/wionode-wiosetup&#34;&gt;こちら&lt;/a&gt;を参考にWio-Setupというツールを試してみてください&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;以上でWio Nodeのセットアップは完了です。同じデバイスとアクセスポイントを使う場合は、以後起動するだけで接続されるようになります！&lt;/p&gt;

&lt;h3 id=&#34;wio-nodeにモジュールを接続する&#34;&gt;Wio Nodeにモジュールを接続する&lt;/h3&gt;

&lt;p&gt;アプリから、接続するモジュールを登録します。
&lt;img src=&#34;https://dotstud.io/img/blog/095/10_display_connect.png&#34; alt=&#34;&#34; /&gt;
「PORT0」（左側）をタップして、下の「OUTPUT」から「4-Digit Display」を選択しましょう。&lt;strong&gt;似たようなモジュールがたくさんありますので、よく確認してください&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/11_temperature_connect.png&#34; alt=&#34;&#34; /&gt;
続いて温度センサを登録します。「PORT1」（右側）をタップして、「INPUT」から「Temperature Sensor」を選択します。&lt;/p&gt;

&lt;p&gt;アプリ画面を参考に、Wio Nodeにモジュールを接続します。
&lt;img src=&#34;https://dotstud.io/img/blog/095/12_module_connect.png&#34; alt=&#34;&#34; /&gt;
「PORT0」に7セグメントディスプレイ、「PORT1」に温度センサを接続しましょう。&lt;/p&gt;

&lt;p&gt;接続できたら、アプリ画面下部の「Update Firmware」をタップしましょう。読み込みのあと、「View API」というAPIサンプルページが表示されるようになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updateが失敗する場合はモジュールの接続が左右間違っていないか今一度確認してください&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;アプリからapiを試す&#34;&gt;アプリからAPIを試す&lt;/h3&gt;

&lt;p&gt;「View API」のページでは、手軽にモジュールを操作するAPIを試すことができます。正しく接続できているか、試してみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/095/13_display_api.png&#34; alt=&#34;&#34; /&gt;
まずは7セグメントディスプレイの「display_point」というAPIを試してみます。説明部分には、「&lt;strong&gt;POSTメソッドで1を送ると&amp;rdquo;:&amp;ldquo;が表示される&lt;/strong&gt;」とありますね。「Test Request」から1を送ってみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/14_display_demo.png&#34; alt=&#34;&#34; /&gt;
7セグメントディスプレイに&amp;rdquo;:&amp;ldquo;が表示されました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/15_temp_api.png&#34; alt=&#34;&#34; /&gt;
続いて温度センサのAPIを試します。温度の取得には値は必要ないので、そのままGETメソッドでRequestします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/16_temp_demo.png&#34; alt=&#34;&#34; /&gt;
現在の温度が返ってきました。（かなり暑いですね（笑））&lt;/p&gt;

&lt;p&gt;挙動が確認できたら、2つのモジュールを連携させるプログラムを書いていきましょう！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;memo-getメソッドとpostメソッド&#34;&gt;memo: GETメソッドとPOSTメソッド&lt;/h4&gt;

&lt;p&gt;HTTPリクエストにはいくつかのメソッド（送信方法）があります。GET、POSTの他にもPUTメソッド、DELETEメソッドなどがあり、最近主流の「RESTful API」という考え方では&lt;strong&gt;操作する内容によってメソッドを使い分ける&lt;/strong&gt;ことになっています。&lt;/p&gt;

&lt;p&gt;今回はメソッド名だけわかればプログラミング可能ですが、詳しく知りたい方は調べてみてください！&lt;/p&gt;

&lt;h3 id=&#34;node-jsでプログラムを書く&#34;&gt;Node.jsでプログラムを書く&lt;/h3&gt;

&lt;p&gt;センサの値を取得して、室温をディスプレイに表示するプログラムを書いていきましょう。プログラムはAPIを叩ければよいので、今回は&lt;strong&gt;Node.js&lt;/strong&gt;で作成します。&lt;/p&gt;

&lt;p&gt;プログラムの仕組みを理解するために、以下の手順で説明します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.jsのインストール&lt;/li&gt;
&lt;li&gt;プロジェクトの作成&lt;/li&gt;
&lt;li&gt;温度情報を取得する&lt;/li&gt;
&lt;li&gt;温度情報を表示したい文字列に変換する&lt;/li&gt;
&lt;li&gt;ディスプレイに温度を表示する&lt;/li&gt;
&lt;li&gt;3秒ごとに更新する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;memo-コマンドラインの使い方&#34;&gt;memo: コマンドラインの使い方&lt;/h4&gt;

&lt;p&gt;Node.jsの実行やファイル操作はコマンドラインで行います。Macには「ターミナル」、Windowsには「コマンドプロンプト」というアプリケーションが最初から入っているので、立ち上げて使いましょう。&lt;/p&gt;

&lt;p&gt;初めてコマンドを使う方は、「ターミナル コマンド」などで検索すると基本的な使い方がわかりますよ！&lt;/p&gt;

&lt;p&gt;筆者はiTerm2というクライアントアプリにzshというシェルを入れています。（画面がちょっと違うくらいだと思ってください。）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-node-jsのインストール&#34;&gt;1. Node.jsのインストール&lt;/h4&gt;

&lt;p&gt;まずはNode.jsのインストールから始めます。また&lt;code&gt;async/await&lt;/code&gt;という機能を使っているので、&lt;strong&gt;v7.6.0以上が必要&lt;/strong&gt;です。最新版をインストール済みの方は次項の「プロジェクトの作成」から始めてください。&lt;/p&gt;

&lt;p&gt;Node.jsのインストールには、簡単にバージョン管理ができる「&lt;strong&gt;nvm&lt;/strong&gt;」や「&lt;strong&gt;nodebrew&lt;/strong&gt;」を使うのが便利です。nodebrewを使ったインストール方法は下記を参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/setup-new-mac-app/#node-js%E7%92%B0%E5%A2%83%E6%95%B4%E5%82%99&#34;&gt;僕がMacを買い換えてすぐにいれるツール&amp;amp;すぐにする初期設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インストールが完了したら、Node.jsが正しく動くか確認してみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/095/17_node_v.png&#34; alt=&#34;&#34; /&gt;
コマンドラインで&lt;code&gt;node -v&lt;/code&gt;を叩くとバージョンが出るようになったでしょうか？（v7.6.0以上ですよ！）&lt;/p&gt;

&lt;p&gt;Node.jsの環境構築はとても簡単なので、ウェブ開発が初めての方にもオススメです！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;memo-コーディング無しで動かしてみる&#34;&gt;memo: コーディング無しで動かしてみる&lt;/h4&gt;

&lt;p&gt;サクッと試したい方は、githubの&lt;a href=&#34;https://github.com/dotstudio/wionode_handson&#34;&gt;完成プログラム&lt;/a&gt;をご覧ください。READMEの手順を進めるとコーディングなしで動かせます。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-プロジェクトの作成&#34;&gt;2. プロジェクトの作成&lt;/h4&gt;

&lt;p&gt;今回のWio Nodeのプログラムを置くプロジェクトを作成しましょう。&lt;/p&gt;

&lt;p&gt;適当なディレクトリに移動します。（私は&lt;code&gt;/Users/ユーザ名/workspace&lt;/code&gt;という作業ディレクトリを用意しています。参考まで。）
&lt;img src=&#34;https://dotstud.io/img/blog/095/18_mkdir.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;mkdir ディレクトリ名&lt;/code&gt;で新しいディレクトリを作成できます。&lt;code&gt;wio_temperature&lt;/code&gt;というディレクトリを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/19_cd.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;cd ディレクトリ名&lt;/code&gt;で作成したディレクトリの下に移動します。&lt;/p&gt;

&lt;p&gt;Node.jsでは「npm」でモジュールを管理できます。&lt;code&gt;npm init -y&lt;/code&gt;を実行しましょう。&lt;code&gt;-y&lt;/code&gt;オプションで名前等をデフォルト値で作成してくれます。
&lt;img src=&#34;https://dotstud.io/img/blog/095/20_npm_init.png&#34; alt=&#34;&#34; /&gt;
プロジェクト名やライブラリなどを管理する「&lt;strong&gt;package.json&lt;/strong&gt;」が作成されました。&lt;/p&gt;

&lt;p&gt;今回使用する「&lt;strong&gt;axios&lt;/strong&gt;」ライブラリをインストールします。&lt;code&gt;npm install axios --save&lt;/code&gt;を実行しましょう。&lt;code&gt;--save&lt;/code&gt;オプションをつけることでpackage.jsonに記載されます。
&lt;img src=&#34;https://dotstud.io/img/blog/095/21_npm_install.png&#34; alt=&#34;&#34; /&gt;
axiosがインストールされ、package.jsonに追加されました。&lt;/p&gt;

&lt;p&gt;続いてプログラムを記述するファイルを作成します。&lt;code&gt;touch ファイル名&lt;/code&gt;でファイルが作成されます。（Windowsの場合はコマンドがないのでフォルダから作成してください。）
&lt;img src=&#34;https://dotstud.io/img/blog/095/22_touch.png&#34; alt=&#34;&#34; /&gt;
app.jsというファイルを作成しました。（&lt;code&gt;ls&lt;/code&gt;コマンドでカレントディレクトリのファイルが見れます。Windowsは&lt;code&gt;dir&lt;/code&gt;。）&lt;/p&gt;

&lt;p&gt;以上でプロジェクトの作成は完了です。ファイルにプログラムを書いていきましょう！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;memo-ファイルの編集とエディタについて&#34;&gt;memo: ファイルの編集とエディタについて&lt;/h4&gt;

&lt;p&gt;コマンドラインからでもファイルの編集はできますが、&lt;strong&gt;インデントやコードの補完が効かず作業しづらい&lt;/strong&gt;ので、テキストエディタを使うのがオススメです。&lt;/p&gt;

&lt;p&gt;下記記事ではVisual Studio Codeのインストール方法を紹介しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/setup-new-mac-app/#visual-studio-code&#34;&gt;僕がMacを買い換えてすぐにいれるツール&amp;amp;すぐにする初期設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-温度情報を取得する&#34;&gt;3. 温度情報を取得する&lt;/h4&gt;

&lt;p&gt;まずは温度を取得するプログラムを書いていきます。&lt;code&gt;BASE_URL&lt;/code&gt;はドメインが違う場合があるので、アプリから確認して自身のものに置き換えてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;

const axios = require(&#39;axios&#39;);
const TOKEN = process.argv[2] || &#39;&#39;;
const BASE_PATH = `https://us.wio.seeed.io/v1/node`; // 自身のものをアプリで確認

/**
 * 温度取得
 */
 const getTemp = () =&amp;gt; {
     const ENDPOINT = `/GroveTempA0/temp`;
     const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${TOKEN}`;
     axios.request({method: &#39;get&#39;, baseURL: BASE_URL})
     .then((resp) =&amp;gt; console.log(resp));
 }

getTemp();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;axiosに温度取得APIのURLとオプションを渡し、返ってきた値を出力しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const ACCESS_TOKEN = process.argv[2] || &#39;&#39;;&lt;/code&gt;の部分は、コマンドライン引数（実行時に渡す値）を取得しています。tokenなどの人に知られたくない値は、ファイルに直接書かないのがベターです。&lt;/p&gt;

&lt;p&gt;それでは正しく動くか試してみましょう。&lt;code&gt;node app.js &amp;lt;自分のtoken&amp;gt;&lt;/code&gt;というコマンドで実行します。&lt;/p&gt;

&lt;p&gt;ご自身のtokenは&lt;strong&gt;アプリのView API画面から確認してください&lt;/strong&gt;。&lt;code&gt;?access_token=&lt;/code&gt;の後の文字列がtokenです。
&lt;img src=&#34;https://dotstud.io/img/blog/095/23_temp_test.png&#34; alt=&#34;&#34; /&gt;
温度センサの情報が返ってきたでしょうか？&lt;/p&gt;

&lt;p&gt;1番下に温度情報がありますね。この情報を使ってディスプレイに表示する文字列を作っていきます。&lt;/p&gt;

&lt;p&gt;エラーが出てしまった人は、「Node.js &amp;lt;エラーメッセージ&amp;gt;」で検索すると答えが見つかりやすいです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;4-温度情報を表示したい文字列に変換する&#34;&gt;4. 温度情報を表示したい文字列に変換する&lt;/h4&gt;

&lt;p&gt;取得した温度情報を、ディスプレイに表示する文字列に作り変えるfunctionを作りましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 取得した温度情報を表示する文字列に変換
 *
 * @param {number} temp
 * @return {string}
 */
const temp2digit = (temp) =&amp;gt; {
  let temp_str = `${temp}`;
  temp_str = temp_str.replace(&#39;.&#39;, &#39;&#39;);
  if (temp_str.length &amp;gt;= 4) {
    temp_str = temp_str.substr(0, tempstr.length-1);
  }
  return `${temp_str}C`;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;temp2digit()の引数には、先ほど受け取った情報の温度部分だけを渡します。&lt;/p&gt;

&lt;p&gt;数値を文字列に変換し、不要な&amp;rsquo;.&amp;lsquo;を取り除き、3桁にして、温度計らしく&amp;rsquo;C&amp;rsquo;を付けて返します。&lt;/p&gt;

&lt;p&gt;これを先ほど作ったgetTemp()と一緒に実行するようにしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;

const axios = require(&#39;axios&#39;);
const TOKEN = process.argv[2] || &#39;&#39;;
const BASE_PATH = `https://us.wio.seeed.io/v1/node`; // 自身のものをアプリで確認

/**
 * 温度取得
 */
 const getTemp = () =&amp;gt; {
     const ENDPOINT = `/GroveTempA0/temp`;
     const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${TOKEN}`;
     return axios.request({method: &#39;get&#39;, baseURL: BASE_URL}); // ここでは実行しない
 }

/**
 * 温度情報を文字列変換+Cを追加
 * @param {number} temp
 * @return {string}
 */
const temp2digit = (temp) =&amp;gt;{
    let temp_str = `${temp}`;
    temp_str = temp_str.replace(&#39;.&#39;,&#39;&#39;);
    if(temp_str.length &amp;gt;= 4){
        temp_str = temp_str.substr(0,temp_str.length-1);
    }
    return `${temp_str}C`;
}

async function main(){ // async/awaitを使う
   const res = await getTemp();
   const temp = res.data.temperature;
   const text = temp2digit(temp);
   console.log(text);
}

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここではasync/awaitを使っています。awaitで指定したタスクの実行を待ってレスポンスを受け取り、asyncを付けたメソッドを一つのタスクとして処理するような機能です。Node.jsではv7.6.0から導入されました。&lt;/p&gt;

&lt;p&gt;実行を待たせるため、getTemp()では、APIの結果ではなくメソッドを返すだけに変更します。&lt;/p&gt;

&lt;p&gt;getTemp()で受け取ったobjectの子要素には&lt;code&gt;.&lt;/code&gt;でアクセスします。先ほどのレスポンスのdataの中のtemperatureが欲しいので&lt;code&gt;res.data.temperature&lt;/code&gt;となります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node app.js &amp;lt;自分のtoken&amp;gt;&lt;/code&gt;で実行してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/095/24_temp2digit.png&#34; alt=&#34;&#34; /&gt;
温度計の文字列ができました！&lt;/p&gt;

&lt;p&gt;次はいよいよこの文字列をディスプレイに表示させます。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;5-ディスプレイに温度を表示する&#34;&gt;5. ディスプレイに温度を表示する&lt;/h4&gt;

&lt;p&gt;取得した温度の値を使って、ディスプレイに表示するAPIを叩きます。温度の区切りを表すため、最初に試した&amp;rsquo;:&amp;lsquo;を表示するAPIも使ってみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * ディスプレイに値を表示
 *
 * @param {number} start_pos
 * @param {strng} chars
 */
const fourDigit = (start_pos, chars) =&amp;gt; {
  const ENDPOINT = `/Grove4DigitUART0/display_digits/${start_pos}/${chars}`;
  const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${ACCESS_TOKEN}`;
  return axios.request({method: &#39;POST&#39;, baseURL: BASE_URL})
}

/**
 * : を表示/非表示
 * @param {number} display 0|1
 */
const fourDigitPoint = (display) =&amp;gt; {
  const ENDPOINT = `/Grove4DigitUART0/display_point/${display}`;
  const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${ACCESS_TOKEN}`;
  return axios.request({method: &#39;POST&#39;, baseURL: BASE_URL});
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fourDigit()のstart_posにはディスプレイ表示の開始位置、charsには表示する文字を渡します。（詳しくはAPIの説明を読んでみてください）&lt;/p&gt;

&lt;p&gt;fourDigitPoint()には表示するかどうかの0/1を渡すようになっています。&lt;/p&gt;

&lt;p&gt;これまで作ったfunctionと繋げてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;

const axios = require(&#39;axios&#39;);
const BASE_PATH = &#39;https://us.wio.seeed.io/v1/node&#39;; // 自身のものをアプリで確認
const ACCESS_TOKEN = process.argv[2] || &#39;&#39;;

/**
 * 温度を取得
 */
const getTemp = () =&amp;gt; {
  const ENDPOINT = `/GroveTempA0/temp`;
  const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${ACCESS_TOKEN}`;
  return axios.request({method: &#39;GET&#39;, baseURL: BASE_URL});
}

/**
 * 取得した温度情報を表示する文字列に変換
 *
 * @param {number} temp
 * @return {string}
 */
const temp2digit = (temp) =&amp;gt; {
  let temp_str = `${temp}`;
  temp_str = temp_str.replace(&#39;.&#39;, &#39;&#39;);
  if (temp_str.length &amp;gt;= 4) {
    temp_str = temp_str.substr(0, tempstr.length-1);
  }
  return `${temp_str}C`;
}

/**
 * ディスプレイに値を表示
 *
 * @param {number} start_pos
 * @param {strng} chars
 */
const fourDigit = (start_pos, chars) =&amp;gt; {
  const ENDPOINT = `/Grove4DigitUART0/display_digits/${start_pos}/${chars}`;
  const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${ACCESS_TOKEN}`;
  return axios.request({method: &#39;POST&#39;, baseURL: BASE_URL});
}

/**
 * : を表示/非表示
 * @param {number} display 0|1
 */
const fourDigitPoint = (display) =&amp;gt; {
  const ENDPOINT = `/Grove4DigitUART0/display_point/${display}`;
  const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${ACCESS_TOKEN}`;
  return axios.request({method: &#39;POST&#39;, baseURL: BASE_URL});
}

async function main() =&amp;gt; {
  let res = getTemp();
  const temp = res.data.temperature;
  const text = temp2digit(temp);
  console.log(text);
  res = await fourDigit(0, text);
  res = await fourDigitPoint(1);
}

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらも試してみましょう。&lt;code&gt;node app.js &amp;lt;自分のtoken&amp;gt;&lt;/code&gt;で実行です。
&lt;img src=&#34;https://dotstud.io/img/blog/095/25_comp_demo.png&#34; alt=&#34;&#34; /&gt;
温度がディスプレイに表示されました！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-3秒ごとに更新する&#34;&gt;6. 3秒ごとに更新する&lt;/h4&gt;

&lt;p&gt;今のままではコマンドを実行した時しか処理が走りません。3秒ごとに実行するようプログラムを変えてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const INTERVAL = 3000;

/**
 * 繰り返し実行する
 */
setInterval(() =&amp;gt; {
  main()
  .catch((e) =&amp;gt; {
    if (e.response) console.log(e.response);
  })
}, INTERVAL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;update()の実行部分をsetInterval()関数で繰り返すようにします。setInterval()の第二引数にミリ秒で数値を渡すと、その間隔ごとに実行されます。あとから変更しやすいよう、定数で宣言しておきましょう。&lt;/p&gt;

&lt;p&gt;catch()はエラーが発生するとエラーレスポンスを受け取ります。&lt;/p&gt;

&lt;p&gt;完成させたコードはこちら。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;

const axios = require(&#39;axios&#39;);
const BASE_PATH = &#39;https://us.wio.seeed.io/v1/node&#39;; // 自身のものをアプリで確認
const ACCESS_TOKEN = process.argv[2] || &#39;&#39;;
const INTERVAL = 3000;

/**
 * 温度を取得
 *
 * @return {object}
 */
const getTemp = () =&amp;gt; {
  const ENDPOINT = `/GroveTempA0/temp`;
  const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${ACCESS_TOKEN}`;
  return axios.request({method: &#39;GET&#39;, baseURL: BASE_URL});
}

/**
 * 取得した温度情報を表示する文字列に変換
 *
 * @param {number} temp
 * @return {string}
 */
const tempToDigit = (temp) =&amp;gt; {
  let temp_str = `${temp}`;
  temp_str = temp_str.replace(&#39;.&#39;, &#39;&#39;);
  if (temp_str.length &amp;gt;= 4) {
    temp_str = temp_str.substr(0, temp_str.length-1);
  }
  return `${temp_str}C`;
}

/**
 * ディスプレイに値を表示
 *
 * @param {number} start_pos
 * @param {strng} chars
 * @return {object}
 */
const fourDigit = (start_pos, chars) =&amp;gt; {
  const ENDPOINT = `/Grove4DigitUART0/display_digits/${start_pos}/${chars}`;
  const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${ACCESS_TOKEN}`;
  return axios.request({method: &#39;POST&#39;, baseURL: BASE_URL})
}

/**
 * : を表示/非表示
 * @param {number} display 0|1
 * @return {object}
 */
const fourDigitPoint = (display) =&amp;gt; {
  const ENDPOINT = `/Grove4DigitUART0/display_point/${display}`;
  const BASE_URL = `${BASE_PATH}${ENDPOINT}?access_token=${ACCESS_TOKEN}`;
  return axios.request({method: &#39;POST&#39;, baseURL: BASE_URL});
}

/**
 * メインの処理（同期）
 */
async function main() {
  let res = await getTemp();
  const temp = res.data.temperature;
  const text = tempToDigit(temp);
  console.log(text);
  res = await fourDigit(0, text);
  res = await fourDigitPoint(1);
}

/**
 * 繰り返し実行する
 */
setInterval(() =&amp;gt; {
  main()
  .catch((e) =&amp;gt; {
    if (e.response) console.log(e.response);
  })
}, INTERVAL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;試してみる&#34;&gt;試してみる&lt;/h3&gt;

&lt;p&gt;完成コードを試してみます。ドキドキ。&lt;code&gt;node app.js &amp;lt;自分のtoken&amp;gt;&lt;/code&gt;で実行です。
&lt;img src=&#34;https://dotstud.io/img/blog/095/25_comp_demo.png&#34; alt=&#34;&#34; /&gt;
現在の室温が表示されます。&lt;/p&gt;

&lt;p&gt;3秒ごとに更新されるので、変化を試すため温度センサを手で温めてみます。
&lt;img src=&#34;https://dotstud.io/img/blog/095/26_warmer.png&#34; alt=&#34;&#34; /&gt;
少し温度が上がりました。処理を止めたい場合は&lt;code&gt;controll+c&lt;/code&gt;で終了します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;これでプログラムは完成です！やったー！！&lt;/strong&gt; お疲れ様でした！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;補足-完成の一歩先へ&#34;&gt;補足: 完成の一歩先へ！&lt;/h4&gt;

&lt;p&gt;「簡単であっという間だった」というあなた！&lt;strong&gt;このガジェットを使ってできることはまだまだあります！&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;例1: Azure Web AppsなどのPaaSを使って常時稼働できるようにする&lt;/li&gt;
&lt;li&gt;例2: 温度情報をAmbientなどのウェブサービスを使ってグラフ化してみる&lt;/li&gt;
&lt;li&gt;例3: 一定の温度をトリガーにTwitterやSlackへ通知を送ってみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記はほんの一例です。Wio Node対応モジュールもたくさんありますので、ここまでの知見を使って試してみましょう！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;いかがだったでしょうか？簡単と言いつつ、コマンドでの作業やウェブ開発の経験がない人には詰まる部分が多かったかもしれません。でも、これで&lt;strong&gt;InternetとThingsの連携ができるようになりました！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IoTの世界には、まだまだたくさんの楽しいデバイスやアイディアが待っています。&lt;strong&gt;作っても使っても楽しい電子工作をやっていきましょう！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最後まで読んでくださりありがとうございました！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【dotstudio×ギャル電】IoT派手イケディスプレーキャップをつくったよ！</title>
      <link>https://dotstud.io/blog/gyaruden-hadeike-display-cap/</link>
      <pubDate>Sun, 09 Apr 2017 21:14:04 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/gyaruden-hadeike-display-cap/</guid>
      
      <description>

&lt;p&gt;どうも！dotstudioテクニカルライターの&lt;a href=&#34;https://dotstud.io/members/mao/&#34;&gt;マオ&lt;/a&gt;です。ドンキでアルドゥイーノが買える時代を夢見て、&lt;a href=&#34;https://dotstud.io/blog/iotlt-gbvol19-galden-report/&#34;&gt;ギャル電&lt;/a&gt;で活動しています。&lt;/p&gt;

&lt;p&gt;今回はdotstudioとギャル電マオがコラボして派手でイケイケなIoTディスプレー付きキャップを作りました★
&lt;img src=&#34;https://dotstud.io/img/blog/094/01_top.png&#34; alt=&#34;&#34; /&gt;
この超イケてるキャップをかぶって実際に渋谷に繰り出してみた話を紹介していきたいと思います〜！&lt;/p&gt;

&lt;h2 id=&#34;iot派手イケディスプレーキャップを作ったきっかけ&#34;&gt;IoT派手イケディスプレーキャップを作ったきっかけ&lt;/h2&gt;

&lt;p&gt;ある日dotstudioにてうこさんから相談を受けたマオ。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;俺はイケてる電子工作を作っているのになぜパリピにモテないか。&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;たしかに、うこさんはなんでもできるスーパーエンジニアで、ギャル電マオは常にリスペクトしている先輩なのだ。
&lt;img src=&#34;https://dotstud.io/img/blog/094/02_uko.png&#34; alt=&#34;&#34; /&gt;
でもな、パリピにモテるのはまだほど遠い。&lt;/p&gt;

&lt;p&gt;よってうちが出した結論、&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;&lt;em&gt;とりあえずチャラくなって光ってればモテるんじゃね&lt;/em&gt;&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;そこで、うこさんと代表ののびすけさんを巻き込んで作成したのはこちら、名付けて『&lt;strong&gt;IoT派手イケディスプレーキャップ&lt;/strong&gt;』。
&lt;img src=&#34;https://dotstud.io/img/blog/094/03_cap.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;とにかくモテたい人、口下手で上手く話せない人も、これを使えば光って目立つし帽子のディスプレーで言いたいことを表示することによって３倍増しぐらいにかっこいく見える。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;まさに最高のパーリーアイテムである。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;iot派手イケディスプレーキャップとは&#34;&gt;IoT派手イケディスプレーキャップとは？&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/094/04_cap.png&#34; alt=&#34;&#34; /&gt;
このIoT派手イケディスプレーキャップは、&lt;strong&gt;ウェブからディスプレーへの出力パターンを選択&lt;/strong&gt; できる。また、指定した&lt;strong&gt;Twitterのハッシュタグツイートもリアルタイムで表示可能&lt;/strong&gt;だ。&lt;/p&gt;

&lt;p&gt;制作はのびすけさんがネットワークまわり、うこさんがハードウェア全般を担当。ギャル電マオは外装デコレーションを担当した。&lt;/p&gt;

&lt;p&gt;詳しくは別記事で紹介予定だ。&lt;/p&gt;

&lt;h2 id=&#34;iot派手イケディスプレーキャップの仕組み&#34;&gt;IoT派手イケディスプレーキャップの仕組み&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/094/05_cap.png&#34; alt=&#34;&#34; /&gt;
ディスプレーとキャップのあいだには、アルドゥイーノがついている。メガというデカいヤツと、ESP8266とかいうネットワークにつながるヤツだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/094/06_cap.png&#34; alt=&#34;&#34; /&gt;
キャップの中にはモバイルバッテリーを入れて固定することができるゴムバンドがついている。&lt;/p&gt;

&lt;p&gt;簡単な仕組みはこうだ。
&lt;img src=&#34;https://dotstud.io/img/blog/094/07_structure.png&#34; alt=&#34;&#34; /&gt;
まず、新着ツイートが投稿されるとそれをひらがなに変換し、サーバーに文字列を保存する。サーバーからESP8266にプッシュを送信して新着ツイートがあることを知らせると、ESP8266はひらがな文字列を取得しにいく。&lt;/p&gt;

&lt;p&gt;それをアルドゥイーノメガにシリアルで送ると、あらかじめ書き込んでおいたフォントで文字列を変換し、ディスプレーに流すというふうになっている。&lt;/p&gt;

&lt;p&gt;ちなみに、絵などの画像は全部ESP8266に書き込まれてあって、&lt;strong&gt;サーバーからのプッシュで好きなものに切り替えられるという優れモノ&lt;/strong&gt; だ。&lt;/p&gt;

&lt;h2 id=&#34;試してみた&#34;&gt;試してみた&lt;/h2&gt;

&lt;p&gt;早速パリピが集まる夜の渋谷の街に繰り出してみた。
&lt;img src=&#34;https://dotstud.io/img/blog/094/08_dasao.png&#34; alt=&#34;&#34; /&gt;
&lt;strong&gt;&lt;em&gt;最高にイケてる帽子被ってるのに、全然イケてねぇ！鉄道オタかよ！（笑）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これじゃあダメだ、いくら光っててもモテる気がしない。なにしろ服装が&lt;strong&gt;典型的な工学部男子&lt;/strong&gt;でパリピとは遠くかけ離れている。こうなったら頭の上から下まで全部変えるしかない。&lt;/p&gt;

&lt;p&gt;ということで、うこさんをパリピに大改造！！！！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;超イケてるパリピなチャラ男に仕上がったうこさんはこちら↓↓↓&lt;/em&gt;&lt;/strong&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/094/09_charao.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;チャラさ倍増(爆笑)、見た目は完全なるパリピ、まさに渋谷のギャル男！&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この帽子を被っているだけで&lt;strong&gt;通常の１０倍ぐらいの人に声をかけられた。&lt;/strong&gt; ←これマジだから(笑)&lt;/p&gt;

&lt;h2 id=&#34;パリピが集まる場所-渋谷肉横丁へ&#34;&gt;パリピが集まる場所、渋谷肉横丁へ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/094/10_nikuyokocho.png&#34; alt=&#34;&#34; /&gt;
肉横丁のお兄さんたちも大絶賛。やべえこの帽子爆アゲじゃん！と褒めてくれ仲良くなった。&lt;/p&gt;

&lt;p&gt;まあ、&lt;strong&gt;お兄さんの表情もなかなかの爆アゲ感がある&lt;/strong&gt;と突っ込みたいところなのだが、うこさんは最高に舞い上がっている。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数分後……&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ギャル電マオ「あれ、うこさんどこに行った？」&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/094/11_nanpa.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;!!!!!!!!!!!!!!ナンパに成功してるじゃないか!!!!!!!!!!!!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;高度な技術を使いIoT派手イケディスプレーキャップを完成させた上でのこのナンパ…エモい……。&lt;/p&gt;

&lt;p&gt;ダサかったうこさんの姿はもうない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;名付けよう、君はもはや「テクノロジストナンパ師」。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;と思いきや&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/094/12_tweet.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;嬉しくてつい下心丸出しツイートをしてしまううこさん。&lt;/p&gt;

&lt;p&gt;まって、それ&lt;strong&gt;ディスプレーに表示されるやつ&lt;/strong&gt;じゃん！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/094/13_tweet_02.gif&#34; alt=&#34;&#34; /&gt;
女の子「ハァ？超キモいんですけど（バシッ）」&lt;/p&gt;

&lt;p&gt;うこさん「あっ……」&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;あー、もう遅い（苦笑）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この女の子は比較的優しいから&lt;strong&gt;軽いビンタ&lt;/strong&gt;だったけど、普通ならただじゃあ済まない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;みんなも気をつけよう。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/094/14_matome.png&#34; alt=&#34;&#34; /&gt;
こんな感じでイベントやパーティーで目立てるなど、使い道は様々で超楽しいデバイスです！&lt;/p&gt;

&lt;p&gt;今後は、IoTLTにて登壇者に被ってもらい、リアルタイムでハッシュタグツイートをディスプレーに流してイベントを盛り上げる予定です。&lt;/p&gt;

&lt;p&gt;みなさんもぜひIoTLTに遊びに来てこの&lt;strong&gt;IoT派手イケディスプレーキャップ&lt;/strong&gt;で遊んでみてくださいね！&lt;/p&gt;

&lt;p&gt;では！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【初心者必見】電子パーツ買うならここ！アキバ電気街徹底ガイド</title>
      <link>https://dotstud.io/blog/akihabara-guide-for-beginners/</link>
      <pubDate>Mon, 27 Mar 2017 12:30:54 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/akihabara-guide-for-beginners/</guid>
      
      <description>

&lt;p&gt;こんにちは、バックエンドエンジニアのちゃんとく（&lt;a href=&#34;https://twitter.com/tokutoku393&#34;&gt;@tokutoku393&lt;/a&gt;）です。&lt;/p&gt;

&lt;p&gt;昨年は頑張ってお風呂センサーを制作しました。
&lt;img src=&#34;https://dotstud.io/img/blog/091/01_furo.png&#34; alt=&#34;&#34; /&gt;
意気揚々と&lt;a href=&#34;https://iotlt.connpass.com/&#34;&gt;IoTLT&lt;/a&gt;で発表したら、「危ない」「感電死する」と炎上しました。&lt;/p&gt;

&lt;p&gt;初心者のうちはなかなか電子工作のルールってわかりませんよね……。私のような犠牲者を出さないためにも、&lt;strong&gt;初心者の方に「怖くない電子工作&lt;/strong&gt;」を伝えていければと思います！&lt;/p&gt;

&lt;h2 id=&#34;怖くない部品集め-秋葉原徹底ガイド&#34;&gt;怖くない部品集め！秋葉原徹底ガイド&lt;/h2&gt;

&lt;p&gt;電子工作を始めたい！と思うときに最初にぶちあたる壁が、「電子パーツどこで揃えたらいいの問題」ですよね。&lt;/p&gt;

&lt;p&gt;ネットで買える時代といえど、配送料や時間がかかったり、店舗にしかないものがあったり。&lt;/p&gt;

&lt;p&gt;そこで今回は日本屈指の電気街「&lt;strong&gt;秋葉原&lt;/strong&gt;」にスポットを当て、&lt;strong&gt;知っておきたいお買い物ルール&lt;/strong&gt;や&lt;strong&gt;オススメ店舗&lt;/strong&gt; を紹介していこうと思います！&lt;/p&gt;

&lt;p&gt;※本記事の情報は2017年3月25日時点のものです。&lt;/p&gt;

&lt;h2 id=&#34;はじめに-秋葉原ってどんなところ&#34;&gt;はじめに: 秋葉原ってどんなところ？&lt;/h2&gt;

&lt;p&gt;「萌えの街」や「電気街」と言われる秋葉原ですが、実際にはどこに電子パーツを買えるお店があるのでしょうか？ある程度店舗が固まっているので、全体MAPからざっくりと説明します。
&lt;img src=&#34;https://dotstud.io/img/blog/091/03_akiba_map.png&#34; alt=&#34;&#34; /&gt;
秋葉原で電子パーツを買えるお店の多くは、&lt;strong&gt;電気街口を出て正面、中央通り沿い&lt;/strong&gt; に集まっています。&lt;/p&gt;

&lt;h4 id=&#34;a-お横断歩道渡ってsega裏周辺&#34;&gt;A. お横断歩道渡ってSEGA裏周辺&lt;/h4&gt;

&lt;p&gt;電子工作向きのパーツや道具などが揃っているお店が多い一角です。LEDの「ピカリ館」などもここ。&lt;/p&gt;

&lt;h4 id=&#34;b-ソフマップ1号店裏周辺&#34;&gt;B. ソフマップ1号店裏周辺&lt;/h4&gt;

&lt;p&gt;電化製品や周辺機器の販売が多い一角。怪しげなジャンクショップも多いです！&lt;/p&gt;

&lt;h4 id=&#34;c-電気街口出てすぐ-高架線下&#34;&gt;C. 電気街口出てすぐ！高架線下&lt;/h4&gt;

&lt;p&gt;駅ほぼ直結の区画に、電子パーツから中古ゲーム、無線、お土産屋さんまで様々なお店が所狭しと並んでいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/04_chuo.png&#34; alt=&#34;&#34; /&gt;
（中央通り）&lt;/p&gt;

&lt;p&gt;日曜日は夕方まで中央通りが歩行者天国なので、ゆったりと散策できます！&lt;/p&gt;

&lt;h2 id=&#34;ルール編-玄人っぽさを出せ-暗黙のお買い物ルール&#34;&gt;ルール編: 玄人っぽさを出せ！暗黙のお買い物ルール&lt;/h2&gt;

&lt;h3 id=&#34;買いたいものを調べておこう&#34;&gt;買いたいものを調べておこう&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/05_shop.png&#34; alt=&#34;&#34; /&gt;
電子工作に使うパーツは作りたいものによってそれぞれ違い、店頭には様々な部品が&lt;strong&gt;引き出しいっぱい壁一面&lt;/strong&gt;に並んでいます。事前準備なしで買い揃えるのは慣れた人でも至難の技です。&lt;/p&gt;

&lt;p&gt;店頭に行ってあたふたしないために、必要なパーツや値を調べておき、さらに &lt;strong&gt;メーカーや型番まで調べておく&lt;/strong&gt; と店員さんにも聞きやすいのでオススメです。&lt;/p&gt;

&lt;p&gt;初めて「ジャンパワイヤというもの」を買いに行った時、オスオスとかオスメスとか言い出して何が何だかわからず、店頭で絶望していました。（わからない人はdotstuioのドキュメントを読んでね！）&lt;/p&gt;

&lt;!-- todo ジャンパワイヤを公開する --&gt;

&lt;h3 id=&#34;トレーを使おう&#34;&gt;トレーを使おう&lt;/h3&gt;

&lt;p&gt;LEDやカーボン抵抗など、細かい部品のバラ売りは剥き出しの状態で売られています。かなり小さく、酸化等の問題もあるので、各店舗に用意してある &lt;strong&gt;トレーに乗せて扱います。&lt;/strong&gt; トレーのままレジに持っていきましょう。&lt;/p&gt;

&lt;p&gt;私はしっかり手に乗せてレジに持っていき、 &lt;strong&gt;レジのお姉さんに怒られました&lt;/strong&gt;。怒られたい人も、ぐっと我慢してトレーを使ってください。&lt;/p&gt;

&lt;h3 id=&#34;荷物は少なめに&#34;&gt;荷物は少なめに&lt;/h3&gt;

&lt;p&gt;電子パーツを扱うお店は、&lt;strong&gt;大体がめっちゃ狭い作り&lt;/strong&gt; になっています。すれ違うのがやっとなくらい。&lt;/p&gt;

&lt;p&gt;通路に所狭しと商品が置かれていたり、剥き出しの棚に細かい部品が雑然と並んでいたりするので、小さめのカバンで両手があいているスタイルがオススメです。&lt;/p&gt;

&lt;p&gt;ここまでしておけば初めてお店に行ってもあまり困らないでしょう！あとは &lt;strong&gt;ドヤ顔で壁を眺めるのみ&lt;/strong&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;街歩き編-秋葉原を歩こう-オススメ店舗紹介&#34;&gt;街歩き編: 秋葉原を歩こう！オススメ店舗紹介&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/06_uko_sensei.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ここからはdotstudioのうこに案内してもらいます！&lt;/p&gt;

&lt;p&gt;親に「おもちゃが欲しいなら自分で作れ」と言われ小2で電子工作の道に突入した筋金入りのメイカーです。最近はウェアラブルシンセサイザを作り、MakerFairTokyo2016などにも出展しました。&lt;a href=&#34;https://dotstud.io/blog/uko-exhibited-at-mft2016/&#34;&gt;詳しくはこちら&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;電子工作の超王道-秋月電子通商&#34;&gt;電子工作の超王道！秋月電子通商&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/07_akitsuki.png&#34; alt=&#34;&#34; /&gt;
ネット通販もあり、電子部品を検索すると候補の一番上に出てくるくらいメジャーなお店。店頭の大きなワゴンと紅白のテントが目印です。&lt;/p&gt;

&lt;p&gt;店舗は小さいながら、&lt;strong&gt;電子工作向きのパーツや電子工作キット&lt;/strong&gt; を安価で豊富に扱っていることから電子工作界隈で高い人気を誇っています。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;今日は祭りか？&lt;/strong&gt;」というほどいつも混んでいるので、欲しいものに目星をつけサッと買うのがオススメです（朝10時でも写真のような混雑）。&lt;/p&gt;

&lt;h3 id=&#34;ネットで予習できる-千石電商&#34;&gt;ネットで予習できる！千石電商&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/08_sengoku.png&#34; alt=&#34;&#34; /&gt;
秋月電子の並びにドンドンドンとお店を構える千石電商。&lt;/p&gt;

&lt;p&gt;こちらもネット通販がある超有名店ですが、実は &lt;strong&gt;実店舗の売り場情報もWebページに記載&lt;/strong&gt; されています。
&lt;img src=&#34;https://dotstud.io/img/blog/091/09_sengoku_net.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;http://www.sengoku.co.jp/shop_01.html&#34;&gt;千石電商Webサイト&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1号店から3号店までかなり品数が多いので、買うものリストを作りネットで場所を予習して行くとよいです。最近は &lt;strong&gt;電子工作系のパーツはだいたい2号店に集まった&lt;/strong&gt; ので買いやすいですね（2017年3月現在）。&lt;/p&gt;

&lt;h3 id=&#34;ゆったり吟味-キットも豊富なマルツ&#34;&gt;ゆったり吟味、キットも豊富なマルツ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/10_marutsu.png&#34; alt=&#34;&#34; /&gt;
（秋葉原2号店・秋月電子の斜め向かい）&lt;/p&gt;

&lt;p&gt;他のお店に比べて、&lt;strong&gt;店内が比較的ゆったり&lt;/strong&gt; としています。ほとんどの商品に説明ポップがついているので、初めての方も安心です。&lt;/p&gt;

&lt;p&gt;電子パーツに加えて、&lt;strong&gt;電子工作キットや制作道具、関連雑誌などが充実&lt;/strong&gt; している印象です。&lt;/p&gt;

&lt;p&gt;先日は子供向けボードの「IchigoLatte」「MapleSyrup」やミニロボット、ラジオ制作キットなどを見つけたので、お子さんなどと一緒に選ぶのも楽しいですね！&lt;/p&gt;

&lt;h3 id=&#34;開いてんの-アイテンドー&#34;&gt;開いてんの？アイテンドー&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/11_aitendo.png&#34; alt=&#34;&#34; /&gt;
秋葉原から少し離れた立地にもかかわらず、必ずと言っていいほど名前の上がるaitendo（アイテンドー）。&lt;/p&gt;

&lt;p&gt;週休2日、オープンはお昼過ぎから、というゆったり営業で、私の中で「&lt;strong&gt;あいてないのにアイテンドー&lt;/strong&gt;」と話題です。（個人の見解です）&lt;/p&gt;

&lt;p&gt;オリジナルモジュールやユニークなキット、ジャンク品などを多く揃えており、&lt;strong&gt;ちょっとした深セン気分&lt;/strong&gt; を味わえます。&lt;/p&gt;

&lt;p&gt;※深セン･・･中国は広東省、世界最大の電脳街。参考「&lt;a href=&#34;https://dotstud.io/blog/maker-faire-shenzhen-2016/&#34;&gt;秋はモノづくりの聖地、中国・深センへいこう！ &lt;/a&gt;」&lt;/p&gt;

&lt;h2 id=&#34;ディープ編-電気街の深淵を覗く&#34;&gt;ディープ編: 電気街の深淵を覗く&lt;/h2&gt;

&lt;p&gt;さて、ここからは「これぞ秋葉原！」というディープな一角を紹介したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;売っているものの正体がわからない-ラジオデパート&#34;&gt;売っているものの正体がわからない。ラジオデパート&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/12_radio_depart.png&#34; alt=&#34;&#34; /&gt;
高架線沿いの一角にそびえ立つ「ラジオデパート」。個人商店がギュッと詰まったような作りで、売っているものがディープ過ぎて &lt;strong&gt;8割方何に使うものかわかりませんでした&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;電子パーツ以外にも、レトロゲームや中古レコードショップなども入っています。
&lt;img src=&#34;https://dotstud.io/img/blog/091/13_gacha.png&#34; alt=&#34;&#34; /&gt;
置いてあるガチャガチャも独特！&lt;/p&gt;

&lt;h3 id=&#34;ショーケースで掘り出し物-ラジオセンター&#34;&gt;ショーケースで掘り出し物？ラジオセンター&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/14_radio_center_out.png&#34; alt=&#34;&#34; /&gt;
1階は電子パーツやお土産屋さん、2階・3階は電子パーツのお店に加えて &lt;strong&gt;レンタルショーケース&lt;/strong&gt; が並んでいます。レンタルショーケースは、一般人が30cm四方程度のショーケースを借り、好きなものに好きな値段をつけて陳列できる仕組みです。&lt;/p&gt;

&lt;p&gt;場所によってはアニメグッズやフィギュアが多いのですが、ここでは主に電子パーツが置かれています。&lt;strong&gt;普通のお店ではもう買えない掘り出し物&lt;/strong&gt; に出会えるかもしれませんね！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/15_radio_center.png&#34; alt=&#34;&#34; /&gt;
ラジオセンターの2階へと続く階段。ディープ！&lt;/p&gt;

&lt;h2 id=&#34;おまけ-今回の掘り出し物&#34;&gt;おまけ: 今回の掘り出し物&lt;/h2&gt;

&lt;p&gt;使えるかはわからないけど思わず買ってしまったものをご紹介！諸般の事情により販売店の記載はナシでお届けします。&lt;/p&gt;

&lt;h3 id=&#34;両面差せる-usb-microb&#34;&gt;両面差せる!?USB microB&lt;/h3&gt;

&lt;p&gt;「USBの向き逆かい！と思ったら逆かい！」ってなったこと一度はありますよね？そんな時にはこれ。
&lt;img src=&#34;https://dotstud.io/img/blog/091/16_usb.png&#34; alt=&#34;&#34; /&gt;
&lt;strong&gt;USB2.0もUSB microBも両面差せます。&lt;/strong&gt; よくわからないけどすごい！&lt;/p&gt;

&lt;p&gt;向きではイライラしなくなりましたが、給電がめっっちゃ遅くてイライラします。（給電量の記載ナシ。）&lt;/p&gt;

&lt;h3 id=&#34;小さいのにまばゆい-タッチ式ledライト&#34;&gt;小さいのにまばゆい。タッチ式LEDライト&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/17_touch_censor.png&#34; alt=&#34;&#34; /&gt;
USBに直接差し、タッチセンサーでLEDが光ります。同シリーズに人感センサーでオンオフするものも。&lt;/p&gt;

&lt;p&gt;小ささに反してかなりのパワーで光を放ちます。いささか眩しすぎる節があります。&lt;/p&gt;

&lt;h3 id=&#34;お金がなくても大丈夫-びんぼうでいいの&#34;&gt;お金がなくても大丈夫？びんぼうでいいの&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/091/18_binbo.png&#34; alt=&#34;&#34; /&gt;
名前が全てですね。Arduino互換ながら爆安で購入できます！（実装済みも売ってます）&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;いかがだったでしょうか？&lt;/p&gt;

&lt;p&gt;今回紹介したのは &lt;strong&gt;ディープな秋葉原のほんの一部&lt;/strong&gt;。まだまだ不思議なお店や面白い商品がたくさんあるので、ぜひ足を運んでみてください！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>