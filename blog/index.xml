<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/blog/</link><description>Recent content in Blogs on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Wed, 18 Dec 2019 12:20:03 +0900</lastBuildDate><atom:link href="/blog/" rel="self" type="application/rss+xml"/><item><title>沖縄の観光課題にテクノロジーで向き合う4日間！ OTTOPハッカソン2019 開催レポート！ #ood2019</title><link>https://dotstud.io/blog/ottop-hackathon-report-2019/</link><pubDate>Wed, 18 Dec 2019 12:20:03 +0900</pubDate><guid>https://dotstud.io/blog/ottop-hackathon-report-2019/</guid><description>&lt;p>こんにちは、こんばんわ！ &lt;a href="https://twitter.com">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>2019/12/9~12/12で開催された、OTTOPハッカソンに技術サポートやメンターをする形で参加してきたので、レポートにもまとめてみたいと思います。&lt;/p>
&lt;p>記念すべき第1回とのことで、地方開催にもかかわらず多くの人が参加していました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>当日の様子はこちらにも載せておきます。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://togetter.com/li/1442347">トゥギャッター&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ottop.databed.org/event">OTTOP関連のイベント一覧ページ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.okinawaopenlabs.org/single-post/2019/11/15hackathon">今回のハッカソンの開催案内&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ottopokinawa-open-days">OTTOPハッカソンとOkinawa Open Days（沖縄オープンデイズ）&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;p>今回僕が参加してきたハッカソンは、&lt;a href="https://www.okinawaopenlabs.org/">一般社団法人沖縄オープンラボラトリ&lt;/a>が主催しているイベントのOkinawa Open Days(沖縄オープンデイズ)の一環として行われたものになります。&lt;/p>
&lt;blockquote>
&lt;p>[以下引用]
Okinawa Open Daysはキープコンセプトとして、“世の中を変えるオープンテクノロジーとアイデアの集結”を掲げつつ、沖縄の地に集まりデジタル時代の新たな可能性を議論する場として講演など様々な機会を提供し、技術開発とビジネス、利用者と提供・運用者、トップエンジニアと学生、日本と海外（特にアジア）など幅広い参加者が一堂に会し、より具体的でわかりやすく活発な議論ができるようなプログラムを構成していきますので、沖縄県内外の興味のある参加者のみなさまの数多くのご参加をお待ちしております。&lt;/p>
&lt;/blockquote>
&lt;h3 id="ottop">OTTOPハッカソン&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;p>今回のハッカソンは、一般社団法人沖縄オープンラボラトリが提供している &lt;strong>OTTOPという沖縄の交通データなどが呼び出せるオープンなAPI&lt;/strong>(観光・交通オープンデータ提供プラットフォーム)を活用して事例を創出を目指したハッカソンになります。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.okinawaopenlabs.org/single-post/News20190822">【お知らせ】観光・交通オープンデータ提供プラットフォーム「OTTOP」を開設しました！&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ottop.databed.org/">https://www.ottop.databed.org/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>正式名称: 沖縄県観光2次交通オープンデータハッカソン&lt;/li>
&lt;li>実施日: 2019/12/9~12&lt;/li>
&lt;li>開催場所: 沖縄県市町村自治会館&lt;/li>
&lt;li>テーマ: 観光や生活における移動を便利に楽しくする&lt;/li>
&lt;li>その他: あとは&lt;a href="https://www.ottop.databed.org/event-details/okinawakenkanko2jikotsuopundetahakkason">詳細を見てください。&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ということで、ざっくりと「 &lt;strong>オープンデータを活用して沖縄での移動体験をアップデートさせるプロジェクトの事例を作りたい&lt;/strong> 」ハッカソンだと思います。&lt;/p>
&lt;h2 id="heading">ハッカソン初参加の人も多い中、和やかな雰囲気でのスタート&lt;/h2>
&lt;p>東京や他の地域で開催される多くのはハッカソンだと、初めは少しピリッとした緊張感でスタートするものが多い印象で、初参加の人が多いと尚更そういう雰囲気になりがちです。&lt;/p>
&lt;p>今回のハッカソンは、 &lt;strong>初参加の人が多いにも関わらず、沖縄の雰囲気だからか和やかな雰囲気&lt;/strong>でスタートしていきました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>沖縄オープンラボラトリの方々による緩やかな司会進行です。&lt;/p>
&lt;h2 id="heading-1">プレハッカソンイベントでのアイディアを元に実装を進める&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;p>実は今回は&lt;code>プレハッカソンイベント&lt;/code>という、事前のアイディアソンが行われていて以下のアイディアが生まれていました。&lt;/p>
&lt;ul>
&lt;li>空き時間有効活用アプリ&lt;/li>
&lt;li>利用者でメンテナンスするバス停情報&lt;/li>
&lt;li>バスクエスト&lt;/li>
&lt;li>マイバスマップ（地域の高齢者の方向け＠通院や井戸端会議）&lt;/li>
&lt;li>乗降データ　　（車両乗降人数のカウントの仕組み）&lt;/li>
&lt;li>空き駐車場&lt;/li>
&lt;li>イベント対応バスなび&lt;/li>
&lt;li>Voiceバスナビ&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>アイディア名は&lt;a href="https://www.ottop.databed.org/event-details/okinawakenkanko2jikotsuopundetahakkason">公式サイト&lt;/a>から抜粋&lt;/p>
&lt;/blockquote>
&lt;p>ハッカソンの日程には既にアイディアソンが終わっているという、贅沢な時間の使い方で、普段二日間とかで全てやってしまうハッカソンばかりを見てきたのですごく新鮮でした。&lt;/p>
&lt;p>これも&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%A6%E3%83%81%E3%83%8A%E3%83%BC%E3%82%BF%E3%82%A4%E3%83%A0">ウチナータイム&lt;/a>ですかねぇ（違）&lt;/p>
&lt;h2 id="heading-2">中間発表〜メンタリング&lt;/h2>
&lt;p>3日目からは中間発表とメンターによるメンタリングが入ります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>こんな雰囲気で各チーム現在までの進捗と現時点での企画発表を行なっていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>メンターにはLINE株式会社のエバンジェリスト立花さん&lt;/strong>が入り、各チームの発表に対してアドバイスをしていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>豪華な会ですね！！ 参加者には学生さんや若手も多かったのですが、貴重な体験になったのではないでしょうか。&lt;/p>
&lt;h2 id="heading-3">会場で並行して開催していた展示など&lt;/h2>
&lt;p>ここで、ハッカソンから少し離れて会場全体の雰囲気の話です。&lt;/p>
&lt;p>冒頭でも話をしたとおり、今回はOkinawa Open Daysという大きなイベントが母体となっていて、OTTOPハッカソンはその一部で行うという関係でした。そういう背景もあり、同じ会場でOkinawa Open Daysの出し物であるプレゼンや企業展示、懇親会なども行われていて、同じ建物内でもハッカソン会場と違う階では別の盛り上がりを見せていました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>全体を通して &lt;strong>400名程度の参加者、4日間の延べ人数だと1000人を超えた&lt;/strong>とのことで、多くの人が注目しているイベントということが分かります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>参加者は沖縄県外から来ている人の方が多いそうで、 &lt;strong>全国からこれくらいの人が集まるという熱量の高さ&lt;/strong>も窺えます。&lt;/p>
&lt;p>そんな中で行われた今回のハッカソンは、全国的に見て注目している人が多いハッカソンだったとも言えるのではないでしょうか。&lt;/p>
&lt;h2 id="heading-4">各プロダクト紹介&lt;/h2>
&lt;p>それでは気になる各チームのプロダクト内容とハック中の様子を紹介です。
発表中と作業中で写真にばらつきがありますがご愛嬌。&lt;/p>
&lt;h3 id="heading-5">空き時間有効活用アプリ&lt;/h3>
&lt;p>&lt;code>空き時間有効活用アプリ&lt;/code>は、観光中に &lt;strong>思ったよりも早く目的地を周ってしまって次の予定までの時間が急に空いてしまった時の時間が勿体ない&lt;/strong>という課題に着目したアプリです。&lt;/p>
&lt;p>目的地と目的地の間にちょっと寄ると楽しい場所は無いかを教えてくれます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-6">バスコレ&lt;/h3>
&lt;p>&lt;strong>沖縄の道路は渋滞になることが多く、多くの人が渋滞に悩まされている&lt;/strong>とのことです。
少しの人でも自家用車からバスに利用を切り替える人が増えれば渋滞がなくなり、観光客も現地の人も恩恵を受けられます。&lt;/p>
&lt;p>&lt;code>バスコレ&lt;/code>はバス停のスランプラリーのようなアプリで、バスに乗りチェックインすることでバス停をアプリ上でコレクションすることが出来ます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="voice">スマート（Voice）バスなび&lt;/h3>
&lt;p>&lt;strong>観光客やバスに慣れていない人が、バス停の場所が分からない、そのバスがどこに行くのか分からないから乗って良いのか不安になる&lt;/strong> などの課題に着目したのが&lt;code>スマートバスなび&lt;/code>チーム。&lt;/p>
&lt;p>LINEボットとBOTの裏に実装しているAIプログラムを使って、バスのオペレーターの肩代わりをします。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-7">空き駐車場&lt;/h3>
&lt;p>沖縄では観光時にレンタカーを借りて移動することも多く、レンタカーを借りると駐車場をどこに停めようかという問題が発生します。この &lt;strong>空き駐車場検索時に、駐車場事業者を横断的に検索して安いところに停めたいと一般的な人は思いますが、各事業者によってデータが異なるためなかなかこの仕組みが実現されてない&lt;/strong>とのことです。&lt;/p>
&lt;p>&lt;code>空き駐車場&lt;/code>はこれを横断的に検索して、安くて近場の駐車場を探しだすアプリです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-8">イベント対応バスなび&lt;/h3>
&lt;p>&lt;strong>沖縄のローカルなイベント情報は公開されるのが遅く、観光客が観光予定を組むタイミングで発見出来ないことが多い&lt;/strong> とのことです。&lt;/p>
&lt;p>バスに乗って移動している際に、近くで開催しているイベントがあれば教えてくれて観光予定にバリエーションを加えることが出来るのが&lt;code>イベント対応バスなび&lt;/code>です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="my">My時刻表(わんの時刻表)&lt;/h3>
&lt;p>&lt;strong>時刻表は基本的に色々な路線が載っているけど、人によって使う路線は様々ですし、よく使う路線の情報だけがあれば良い&lt;/strong> という人は多いのでは無いでしょうか？&lt;/p>
&lt;p>これは観光客ではなく現地の人に向けたアプローチで、さらにお年寄り向けを想定したサービスとのことで、オリジナルの&lt;code>My時刻表&lt;/code>を簡単に作成し、お年寄り向けに紙に印刷して置いておけるといったサービスです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="bot">乗降データを使ったバスの混雑状況教えちゃうbot&lt;/h3>
&lt;p>&lt;strong>バスが複数路線あり、どちらに乗ろうか迷った時に現在のバスの混雑具合をリアルタイムで知れて判断出来たら嬉しい&lt;/strong>ですよね。&lt;/p>
&lt;p>&lt;code>乗降データを使ったバスの混雑状況教えちゃうbot&lt;/code>は、そんな課題を解決すべくバス停の路線を入れると混雑具合を判断してオススメ路線を教えてくれるLINE BOTになります。&lt;/p>
&lt;p>ちなみにこのチームは、別途取得している乗降データを活用したいという裏テーマも持って挑んでいました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-9">ハックタイムの佳境から緊張の審査会へ&lt;/h2>
&lt;p>最終日の前日あたりから各チーム開発の佳境に差し掛かり、会場も緊張感に包まれながらのハックタイムになっていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>会場でのデータ収集などもこの時間を逃すと厳しくなっていくため、参加者による会場での機材設置なども行われていました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>前日は詰め込むチームもあり、空き時間有効活用アプリチームは「チームデスマーチ」と自称し、バスコレチームは「夜3時くらいまで実装していた」とのことで、寝るのを惜しむくらい開発に励む様子も見られました。&lt;/p>
&lt;p>いつも思うけど、ハッカソンはちゃんと寝た方が良いのか詰め込むのが良いのか悩ましいですよね。&lt;/p>
&lt;h3 id="heading-10">プレゼン審査&lt;/h3>
&lt;p>そしていよいよ審査スタートです。&lt;/p>
&lt;p>プレゼン審査と実際のデモを確認するプレイタイムの2部構成の審査会でした。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>審査員やオーディエンスも、発表を食い入る様に見守ります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-11">プレイタイム&lt;/h3>
&lt;p>プレイタイムではプレゼンだけでは判断出来なかった完成度を見ていきます。&lt;/p>
&lt;p>実際に審査員が触ってみて、モックアップだけではなくちゃんと作ることが出来ているのかを見ていきました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>審査員以外のオーディエンスや参加者同士でもお互いのプロダクトを触り合って感想を述べ合います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-12">そしていよいよ結果発表&lt;/h2>
&lt;p>各チーム、プレゼンやデモで伝えたいことを伝え切り、緊張の結果発表の時間です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>会場の盛り上がりも最高潮になるなか、司会から各賞を受賞したチームの発表です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>・
・
・
・
・
・
・
・
・
・
・
・&lt;/p>
&lt;h3 id="heading-13">すぐに使える賞&lt;/h3>
&lt;p>まずは、 &lt;strong>すぐに使える賞&lt;/strong>を受賞したのは &lt;strong>My時刻表&lt;/strong>チームです。&lt;/p>
&lt;p>今回のハッカソンのテーマと若干異なる方向だったが、即導入できそうな完成度での発表が評価されたのと、紙を使って沖縄のお年寄りにターゲットを当てた点が有用とのことでした。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-14">有用賞&lt;/h3>
&lt;p>&lt;strong>有用賞&lt;/strong>は2チームが受賞しました。&lt;/p>
&lt;p>まず1件目は &lt;strong>空き時間有効活用アプリ&lt;/strong>チーム。&lt;/p>
&lt;p>観光時に発生する、移動時の空き時間を有効活用したいという課題感が強く刺さったのが評価に繋がりました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>もう1件は &lt;strong>イベント対応バスなび&lt;/strong>チームです。&lt;/p>
&lt;p>通常は観光客がキャッチアップすることが出来ない現地のマイナーなイベント情報を、観光客に訴求できる点にビジネス的な有用性があると評価されました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="line">LINE賞&lt;/h3>
&lt;p>そして急遽、LINE株式会社の立花さんから提供された &lt;strong>LINE賞&lt;/strong>！&lt;/p>
&lt;p>こちらはLINEをプロダクトに組み込んだチームに与えられました。&lt;/p>
&lt;ul>
&lt;li>乗降データを使ったバスの混雑状況教えちゃうbot&lt;/li>
&lt;li>空き時間有効活用アプリ&lt;/li>
&lt;li>スマートバスなび&lt;/li>
&lt;/ul>
&lt;p>の3チームが受賞です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="-">独創賞 [優秀チーム]&lt;/h3>
&lt;p>さて、ここから優秀チームの紹介です。&lt;/p>
&lt;p>&lt;strong>独創賞&lt;/strong>は &lt;strong>バスコレ&lt;/strong> チーム&lt;/p>
&lt;p>沖縄の渋滞問題に着目したバスコレチーム。
バスの利用者を増やすことで、現地の渋滞を無くし、観光客もスムーズに移動ができるといったことを期待したプロダクトでしたが、現地の人も観光客もどちらにとっても有用かつゲーム形式にした表現が評価されました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="--1">将来賞 [優秀チーム]&lt;/h3>
&lt;p>&lt;strong>将来賞&lt;/strong>は&lt;strong>スマートバスなび&lt;/strong>チームです。&lt;/p>
&lt;p>バス停でどのバスに乗るのが良いのか分からないという、沖縄に限らず東京でも発生する課題に着目することで、将来的な広がりが示唆される点が評価に繋がりました。&lt;/p>
&lt;p>QRで簡単にバス情報を知れる点はいいが、文字情報でなく音声情報にするともっとよくなるのではとのコメントもあり、ディスカッションを重ねることで実導入も検討出来そうな期待値です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-15">その他の賞も&lt;/h3>
&lt;p>参加チームの賞とは別に、今回のハッカソンにおいて活躍してくれた方々にも賞の授与がありました。
参加チーム以外にも賞があるって素晴らしい会ですね。時間の都合上、賞の授与は全体では出来なかったですが、暖かさを感じました。&lt;/p>
&lt;h4 id="heading-16">貢献賞&lt;/h4>
&lt;p>プレハッカソンから参加し、エンジニアに混って多くのアイディア、モックアップを提供、ハッカソン盛り上げに寄与し、全体を通して各チームのアウトプットに大きく貢献した&lt;code>沖縄タイムスの儀武さん&lt;/code>に &lt;strong>貢献賞&lt;/strong>が贈られました。&lt;/p>
&lt;h4 id="heading-17">サポート賞&lt;/h4>
&lt;p>各チームが開発に苦労する中、急遽駆けつけていただき開発サポートを行っていただき、各チームのアウトプットに繋がる動きをした&lt;code>琉球大学の森さん、大城さん、渡久さん、仲宗根さん&lt;/code>に &lt;strong>サポート賞&lt;/strong>が贈られました。&lt;/p>
&lt;h3 id="heading-18">優秀チームは最後にプレゼンも&lt;/h3>
&lt;p>優秀チームと評価された、バスコレチームとスマートバスなびチームは最後にハッカソン参加者以外のオーディエンスも聞く会場でピッチを行いハッカソンの成果報告を行いました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-19">まとめ&lt;/h2>
&lt;p>初開催の取り組みとのことでしたが、各チーム最後の発表までたどり着けて、主催側も参加者側も学びの多い会になったと思います。&lt;/p>
&lt;p>特に優秀チームは今後も自治体や関連する組織と一緒に実現に向けて進んでいく&lt;code>かも&lt;/code>とのことです！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>来年以降も実施していくとのことでしたので、この記事を見た人で興味がある人は情報が出てくるのをお待ちください！&lt;/p>
&lt;p>それでは！&lt;/p></description></item><item><title>人生初！Maker Faire Tokyo 2019に行ってきました。#MFTokyo2019</title><link>https://dotstud.io/blog/maker-faire-tokyo-2019/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/maker-faire-tokyo-2019/</guid><description>&lt;p>皆さん、こんにちは！！&lt;!-- raw HTML omitted -->
自給力です！イェーーーイ♬&lt;/p>
&lt;p>先日、モノつくりの祭典Maker Faire Tokyo 2019に**&amp;ldquo;人生で初めて&amp;rdquo;**行って来ました！
今までブログでしか知らなかったディープなテックの世界をレポートして行きます！！
過去のdotstudioのメイカーフェアレポも併せて読んでくださいね♫&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>【過去のレポート】&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>当日はIoT日和の晴れ模様！そして、アツイ！&lt;!-- raw HTML omitted -->
メイカーたちの熱が気温引き上げてるじゃないかってぐらいにアツイ！&lt;/p>
&lt;p>到着と同時にうこ師匠と合流。&lt;!-- raw HTML omitted -->
今日はSkyWayの協賛ブースで出展されてるそうです。。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>格好もSkyWayな青さが眩しい✨&lt;/p>
&lt;p>うこさんの案内で、中に入って行きました。&lt;!-- raw HTML omitted -->
それでは、さっそくメイカーたちのお祭りの中を見て行きましょう！！&lt;/p>
&lt;h2 id="heading">メイカー達の渾身の作品を紹介！&lt;/h2>
&lt;h3 id="google">初体験！黒電話で「オッケーGoogle」&lt;/h3>
&lt;p>アナログとデジタルの共演。&lt;!-- raw HTML omitted -->
黒電話からGoogle Homeを通してレコードやテレビが制御できるデバイス！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>スマートスピーカーでレトロなデバイスを制御してるところが粋だなぁ。&lt;/p>
&lt;h3 id="heading-1">ロボットアームと握手&lt;/h3>
&lt;p>毎年出店されてる方のブースもあります！
こちらはロボットアームをLeap Motionで制御するシステム。指の細かい動きまで再現！&lt;/p>
&lt;p>毎年出展する度にアップデートを重ねているんだそうです。前年と比較して、作品の成長を確認する楽しみ方もできそうですね。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-2">会場に響く謎の放電音&lt;/h3>
&lt;p>奥に向かうと会場に響く「バチバチッ」という音、なんだなんだ！？事故！？事件！！？？&lt;/p>
&lt;p>と恐る恐る近づくと……。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>こ、これはテスラコイル！！？？&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>**テスラコイルからの放電で音楽を奏でてる！！**&lt;!-- raw HTML omitted -->
去年の記事にも書かれてたテスラコイル演奏。ホンモノだー！&lt;/p>
&lt;p>テスラコイルはブログより実物見た方がシビれました💡&lt;/p>
&lt;p>↓ここで言及している記事はこちら。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-3">若きメイカーたち&lt;/h3>
&lt;p>大人だけではありません！学生たちの作品もイケてます。&lt;!-- raw HTML omitted -->
入り口から入ってすぐの位置にあるのは、School Maker Faireのブース。&lt;/p>
&lt;p>目をキラキラさせながら作品の説明をしている姿に、こちらもウキウキしちゃいますね。&lt;/p>
&lt;p>いやぁ、あの夏部活の仲間たちと過ごしたアツい日々を思い出しますね（←コイツ帰宅部です）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>学生とはいえ、中身はメイカー！&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>フロッピーディスクを使った音楽再生デバイス。フロッピーで千本桜や笑点のテーマまで完全再現！&lt;!-- raw HTML omitted -->
おーメカメカしくてカッケー✨&lt;/p>
&lt;p>今後のメイカーズライフに期待です！！！&lt;/p>
&lt;h2 id="heading-4">企業ブースも大盛り上がり&lt;/h2>
&lt;h3 id="iij">IIJ（インターネットイニシアティブ）&lt;/h3>
&lt;p>ギターのストンパーをハックした作品。&lt;!-- raw HTML omitted -->
本来は足で踏んで音色を変えるんですが、これで手元のボタン等で制御できるようになります。&lt;/p>
&lt;p>変換はネコがやってくれるという、このかわいさは反則ですね🐱&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-5">任天堂&lt;/h3>
&lt;p>Nintendo Laboが体験できるなんて、子供たちも大興奮！！　……大人もやりたい！！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="skyway">SkyWay&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>我らがうこさんの展示ももちろん見に行きましたー。&lt;!-- raw HTML omitted -->
夜通し作ってたジオラマが遂にお披露目になったとあり感無量……。　涙で前が見えない（←ウソです）&lt;/p>
&lt;p>と思いながら、架空の涙をこすりジオラマを見ると……。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>な、な、なんだこの白いの！？&lt;/strong>
前見た時と雰囲気違う？？&lt;/p>
&lt;p>うこさんに聞くと前日反響があったは良いものの、&lt;strong>子供たちが操作するラジコンが衝突しまくってジオラマが崩れてしまったそうです。&lt;/strong>&lt;/p>
&lt;p>いや〜　どんだけ人気だったのかが伺えますね（笑）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>子供達のヤンキーばりの荒い運転っぷりにも驚き（笑）&lt;!-- raw HTML omitted -->
あおり運転はしちゃダメだぞ！！&lt;/p>
&lt;p>&lt;strong>こちらのラジコンを使った「SkyWayロボット」を作りたい方は、この記事を読んでくださいね↓&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="iotlt">もちろん、IoTLTのブースも&lt;/h2>
&lt;p>IoTLTとは、代表ののびすけが主催する国内最大規模のIoTコミュニティ。このブースではIoTLTに参加しているメンバーが有志で出展しています。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>IoTLTの詳細は&lt;a href="https://iotlt.connpass.com">コチラ&lt;/a>！&lt;/p>
&lt;p>展示物はIoTケーキ、AI監視員、京急の気持ちになれる被り物までいっぱい！！&lt;!-- raw HTML omitted -->
牛丼にウナギのせて、チーズケーキ添えたみたいなごた混ぜ特盛り感（笑）　さすがです！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このままケーキがしゃべります（笑）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>24時間監視できます！　もう悪いことはできません……。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>説明不要のわかりやすさ！　&lt;!-- raw HTML omitted -->
これこそ、京急への愛です！！&lt;/p>
&lt;h2 id="heading-6">その他、気になったものをイッキ見！！&lt;/h2>
&lt;p>初めての参加なので、例年との違いはわからないのですが、会場内は個性的なモビリティやロボットが多いなぁという印象でした。（いつものことだったらすいません……。）&lt;!-- raw HTML omitted -->
今回出展された、おもしろモビリティや、おもしろロボットを一気に紹介！&lt;/p>
&lt;p>&lt;strong>「汽車」&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>「魔法のホウキ」！&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>「外骨格」！！！&lt;/strong>
&lt;!-- raw HTML omitted -->見たことあるやつだ！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>「R2D2」！！！！&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>これら以外にも愛情溢れるエモいロボットやモビリティが会場のあちらこちらで走り回ってました（笑）&lt;/strong>&lt;/p>
&lt;h2 id="heading-7">おわりに&lt;/h2>
&lt;p>今回、人生で初めて参加してみて心に残った&lt;strong>俺的メイカーフェアの見どころ&lt;/strong>は&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>**学生がアツイ！**&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>**大人もアツイ！！**&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;strong>つまり、メイカー全員バリアツイ！！！&lt;/strong>&lt;/p>
&lt;p>この熱狂に興味ある方は来年の10月にビッグサイトでお会いしましょう！&lt;!-- raw HTML omitted -->
予習で他の記事も見てくださいね♪&lt;/p>
&lt;p>今日は夏よりアツイMaker Faire Tokyo 2019のレポートでした。&lt;/p>
&lt;h2 id="heading-8">余談（祭りのあと）&lt;/h2>
&lt;p>夢と技術とアツイ想いでパンクしそうになりながらお祭りの時間は過ぎていきます。&lt;!-- raw HTML omitted -->
帰りに少しうこさんの片付け作業を手伝っていたんですが、&lt;/p>
&lt;p>いつも、ハッピーでテンアゲなうこさんですが、イベント終了のアナウンスが流れると……。&lt;!-- raw HTML omitted -->
**うこさん「はぁ、終わっちゃった……。」　としんみり……。**&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>なんとも寂しげに呟いてたのが印象的でした。&lt;!-- raw HTML omitted -->
「みんな本気でお祭りしてんだな」「この日のために知識と時間と抑えきれない情熱をジャバジャバ投入してるんだな」と終わりになって改めて感じました。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>来年は出展者としてメイカーフェア楽しみたい！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;/blockquote></description></item><item><title>【技術書典】オフィスが基板工場となった休日</title><link>https://dotstud.io/blog/techbookfest-kibanjisso-led-board/</link><pubDate>Sat, 21 Sep 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/techbookfest-kibanjisso-led-board/</guid><description>&lt;p>みなさん、こんにちは。
自給力です！&lt;/p>
&lt;p>9月22日（日）に技術書典が開催されますね！&lt;!-- raw HTML omitted -->
出展される方は準備お疲れ様です。&lt;/p>
&lt;p>僕は今回の技術書典で来場者として初めて行くのですが、今からとっても楽しみです！&lt;/p>
&lt;p>今日は、22日の技術書典で自作開発ボードを制作・販売される野良HACKさんがドットスタジオに来て準備されていたので、その様子をレポートしていきます！&lt;!-- raw HTML omitted -->
&lt;strong>僕は電子工作初心者で分んないことだらけなんですが、分かんないなりに野良HACKさんの制作のすごさを伝えられたらと思ってます！！&lt;/strong>&lt;/p>
&lt;p>技術書典の情報は&lt;!-- raw HTML omitted -->コチラ&lt;!-- raw HTML omitted -->！！&lt;/p>
&lt;p>*野良HACKとは、某企業の社内同好の士を中心に集まり趣味でものづくりをしているチーム。光るもの、LEDが好物なのだそうです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">基板って手作りできるの？&lt;/h2>
&lt;p>今回、野良HACKさんが作成しているのは専用のWebサイトからBluetooth経由でLEDを制御するための開発ボード。（出展されてる配置は「け27D」）&lt;!-- raw HTML omitted -->
何も搭載されていない基板へモジュールやピンヘッダをはんだ付けするところから作っていくとのこと！！
（基板って手作りできるんだ…小並感……。）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>↑こちら、まだ完成ではありませんが、作成していた開発ボードです。&lt;/p>
&lt;p>完成物が気になる方は技術書典でチェックしてくださいね！&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="heading-1">制作手順&lt;/h2>
&lt;h3 id="heading-2">基板を用意&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こちらが部品が何も載ってない、そのままの基板。こちらに部品をはんだ付けしていくとのこと。&lt;/p>
&lt;h3 id="heading-3">部品を載せる&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ここは0.数ミリの世界での戦い！&lt;!-- raw HTML omitted -->
ちっちゃい抵抗器とかを基板に載せていく作業です。&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->ヒェー細かい……。ルーペ必須ですね（笑）&lt;/p>
&lt;h3 id="heading-4">はんだを塗る？&lt;/h3>
&lt;p>みなさん、はんだ付け作業のイメージってどうですか？
片手にこて、もう片手に針金みたいに丸まったはんだを持って、一個一個付けていくイメージですよね。僕もそうでした。&lt;/p>
&lt;p>しかし、この小さい基板にもっと小さい部品を一個一個付けていくのはたいへん！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ということで、今回はクリーム状のはんだを塗り、一気に取り付けていくとのことです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>はんだを塗りやすいように、↑のようなステンレス等でできた型紙を用意。型には小さな穴が空いてあり、そこにはんだを塗りこんでいくそうです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>均等に塗れるよう固いカードとかで、はんだを伸ばしていきます。
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
こんなやり方あるんですね。知らんかった（←そんなことばっか）&lt;/p>
&lt;h3 id="heading-5">リフロー炉で焼き上げる!?&lt;/h3>
&lt;p>クリームはんだが均等に塗られていても、まだちゃんと付いているわけではないんです。&lt;!-- raw HTML omitted -->
ここで、リフロー炉というヒーターのような機械を使って200度まで温度を上げ、はんだを溶かしてくっ付けていくとのこと。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>これが、リフロー炉。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>オーブンみたい（笑）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こっちは違う型のリフロー炉。何個も焼き上げることができます。&lt;/p>
&lt;h3 id="heading-6">プログラムを書き込み&lt;/h3>
&lt;p>香ばしいにおいが立ち上がり、アラームが鳴ると出来上がり！（←パンでも焼いてるような表現（笑））&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>焼きたてホヤホヤの基板をクールダウンさせましたら、次に通電するかのチェックのため電圧を測ります。&lt;/p>
&lt;p>うまく焼けてないと、ショートしてて通電しなかったりするんだとか。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この針がいい感じに60くらいの目盛りまで振れればOK!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そして、ちゃんとショートせずに電気が通っていることがわかったところで、プログラムを書き込みます。&lt;/p>
&lt;p>すげー、命を吹き込んでる感じでした！&lt;/p>
&lt;h3 id="heading-7">仕上げ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>仕上げにその他のピンヘッダなどを、はんだ付けしたら完成！&lt;/p>
&lt;p>ここは、職人らしく手で付けていく！！&lt;/p>
&lt;h2 id="heading-8">僕もやってみたい！！&lt;/h2>
&lt;p>大変そうな作業ですけど、みなさんが熱中してる姿を見てたら、僕もやりたくなってきちゃいました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>後ろの方から熱い視線を送ってると……。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>やらせてくれました！&lt;/p>
&lt;p>やったー。やってみよう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ウキウキ。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>細かすぎて無理っっ！！&lt;!-- raw HTML omitted -->
と言うことで自給力さんのチャレンジは15秒で終わりました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>本当はこうなる予定でした。
にしても細かい……。&lt;/p>
&lt;p>いやぁ、この作業をしっかりと分業でこなしていくのはすごいな。&lt;!-- raw HTML omitted -->
さながらオフィスが小さな工場と化してました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>見事、目標枚数を作り上げたそうです。
おめでとうございます！！&lt;/p>
&lt;h2 id="heading-9">おわりに&lt;/h2>
&lt;p>今日はオフィスに遊びに来てくれた野良HACKの皆さんの基板作りを覗かせてもらいました！&lt;!-- raw HTML omitted -->
男の子心をくすぐる部活感がなんともステキです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こちらが野良HACKさんの生産ラインです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>お昼は皆でカレーの出前を頼みました（笑）&lt;!-- raw HTML omitted -->
みんなで食べると何ともうまい。&lt;/p>
&lt;p>この記事では制作過程をメインにレポートしてきましたが、技術書典の会場ではデモなどもあるそうなので、ぜひ見に行ってください！&lt;!-- raw HTML omitted -->
（出展されてる配置は「け27D」）&lt;/p>
&lt;h2 id="heading-10">技術書典で会いましょう&lt;/h2>
&lt;p>技術書典は9月22日開催です。僕も初めての参加なので雰囲気はわかりませんが、どんな書籍や制作物があるのか、今から楽しみです！
もし見かけたら声かけてくださいねー。&lt;!-- raw HTML omitted -->
野良HACKさんの出展配置は「け27D」ですので、ぜひ寄って行ってください！
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>技術書典の情報は&lt;!-- raw HTML omitted -->コチラ&lt;!-- raw HTML omitted -->！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>可愛いあの子のペットになりたい！！SkyWayロボットで挑戦してみた</title><link>https://dotstud.io/blog/pet-of-cutegirl-skyway/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/pet-of-cutegirl-skyway/</guid><description>&lt;p>〜　ある夏の昼下がり、自給力は悩んでいた　〜&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="skyway">SkyWayロボットでペットの気持ちになれる！？&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>🎵　テレテテッテテ〜　🎵&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>SkyWayロボットの作り方は↓&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">実際に女の子に頼んでみよう！&lt;/h2>
&lt;p>ロボットができて数分後……　&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-1">ペットになるとこんな気分になれる！？&lt;/h2>
&lt;p>①ペットとして一緒に遊んだり&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>②ペットとしてソファで一緒にテレビを見たり&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>③ペットとして抱っこされてみたり&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;em>&lt;strong>こんな夢のような時間が過ごせるのです　
by 自給力&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="heading-2">夢を叶えた男の次なる野望&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>おしまい&lt;/p>
&lt;h2 id="heading-3">あなたは何を作りますか？&lt;/h2>
&lt;p>SkyWayロボットを使えば、ペットになりたいという悩みだけでなく、自宅監視から茶運びマシーンまで、アイデア次第で何でも作ることができます。&lt;br>
気になった方はぜひチャレンジしてみてくださいね！&lt;/p>
&lt;p>SkyWayロボットの作り方は↓&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;/blockquote></description></item><item><title>今年の夏休みは最新技術で工作しよう！　〜Webブラウザから操作できる「SkyWayロボット」の作り方〜</title><link>https://dotstud.io/blog/lets-make-webrtc-robot/</link><pubDate>Sat, 03 Aug 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/lets-make-webrtc-robot/</guid><description>&lt;p>こんにちは、ものづくり担当のうこ(&lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a>)です。&lt;br>
連日猛暑が続きますが、暑さに負けず、ものづくりやってますかー？&lt;br>
今回は、WebRTCを用いたサービスの1つである&lt;a href="https://webrtc.ecl.ntt.com/">SkyWay&lt;/a>を利用した、遠隔操作可能でカメラの映像も見れちゃうロボットの作り方を解説します。&lt;br>
また、実際のラジコンは、&lt;a href="https://makezine.jp/event/makers-mft2019/skyway/">Maker Faire Tokyo 2019のSkyWayブース&lt;/a>にてデモ展示されます。&lt;br>
少し難しいところもありますが、ぜひチャレンジしてみてください！&lt;/p>
&lt;h2 id="heading">必要な部品&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こちらのパーツ類をそれぞれ購入して揃えましょう。1〜4番はタミヤの製品です。5〜7番はホームセンター等で入手できます。右下の小さい部品は以下を参照してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>8番の銅線の長さは、9番のラズパイ用カメラのフラットケーブルと同じくらいの長さでよいです。10番はWaveShareという会社の製品で、1500〜2000円前後で通販などでも入手できます。12番のセメント抵抗は、秋葉原のパーツ屋さんなどでないと入手しにくいかもしれません。13番のマイクロSDカードは4GB以上のものであれば何でもかまいません。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>製作に必要な工具類がこちらです。はんだごてはあってもなくても作れますが、100円ショップでも手に入るのでできるだけあったほうがいいでしょう。&lt;/p>
&lt;h2 id="heading-1">組み立て&lt;/h2>
&lt;h3 id="heading-2">車体本体&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>部品のうち、1〜3番は中に説明書が入っているため、まずそれを読みながらそれぞれ組み立てます。1番のボールキャスターは「高さ35mm」で作成、3番のツインモーターギヤボックスは「低速タイプ」で作成してください。ギヤボックスは、小さな輪っかのようなものが部品として余りますので、2つは捨てずに置いておいてください。後ほど「スペーサー」として利用します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>モーターを一度ギヤボックスから抜き、8番の銅線をそれぞれモーター端子に接続します。はんだごてがない場合は、多めに皮膜をむいてよく巻きつけるようにしましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>モーターをギヤボックスに戻し、タイヤをギヤボックスのシャフトに差し込みます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>4番のユニバーサルプレートセットを取り出し、一番大きな部材の短辺に近い一部分（上図参考、端から穴一つぶん空けて内側）をニッパで切り取って複数の穴を連結させます。これをスリットと呼びます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>先ほど切り取ったスリットの上あたりに、スリットを隠さないようにして、ユニバーサルプレートセット内にある「軸受け」を付属のネジとナットを使って上図のように固定してください。本来は、これはシャフトを通したりするのに使うパーツですが、今回はカメラを設置するためのパーツとして転用しています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ユニバーサルプレートの軸受けをつけていない面に、タイヤをつけたギヤボックスとボールキャスターをネジとナットで固定します。ネジの位置は上図をよく見て同じ位置に留めてください。ボールキャスターはネジ穴が4つありますが、留めるのは2点だけで問題ありません。&lt;/p>
&lt;h3 id="raspberry-pi">電源とRaspberry Piの取り付け&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>5〜7番をまとめて1つにして、バッテリーボックスを作ります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>12番のセメント抵抗2本の脚部分を短めに切り、10番のMotor Driver HATの「MA1」端子と「MB1」端子にそれぞれ片方の脚ずつ挿入します（図はMA1のみ挿入しているところです）。マイナスドライバーを使って端子を締め込み、外れないよう固定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>次に11番のRaspberry Pi 3 B+（以下ラズパイ）を手に持ち、マイクロSDカードスロットがある短辺をこちらに向けます。その状態で、両端にあるネジ穴にギヤボックスの余り部品であるネジと、あらかじめ確保しておいたスペーサーを図のように差し込みます。固い場合があるので、その際はドライバーで回しながら差し込んでください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>車体本体に、ネジ2つがついたラズパイを設置します。図を参考にして、ユニバーサルプレート先端部分が穴2つぶんのスペースが空くようにラズパイを置き、ネジをプレートの穴にはめ込んでください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>9番のラズパイ用カメラのケーブルを、ユニバーサルプレートの下からスリットに入れて上に通し、そのままラズパイ本体のカメラコネクタに接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>セメント抵抗をつけたMotor Driver HATを、ラズパイの上に設置します。GPIOピンがずれないようにうまくドッキングしてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>左右のモーターからそれぞれ銅線を1本ずつ、ユニバーサルプレートの穴を通してオモテ側に2本引っ張って持ってきます。その2本をそれぞれ、Motor Driver HATの「MA2」端子と「MB2」端子に挿入し、マイナスドライバーでネジを締めて固定してください。なお、1つのモーターからは2本の銅線が出ていますが、ここではどちらを使ってもかまいません。左右各々から1本ずつ接続してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>左右の各モーターの残りの銅線2本をユニバーサルプレート下から上に通し、今度はセメント抵抗の脚部分に接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ここも、基本的にははんだづけしたほうがよいですが、しない場合は銅線をよく巻きつけてください。金属用ボンドなどをあとで上から塗り保護するのもよいです。&lt;/p>
&lt;h3 id="sd">マイクロSDカードのセットアップ&lt;/h3>
&lt;h4 id="os">OSインストール&lt;/h4>
&lt;p>まず、以下のURLからセットアップ済みのRaspberry Pi用OSイメージをダウンロードしてください。&lt;br>
およそ3GBありますので、ディスク容量と通信量にこ注意ください。&lt;br>
&lt;a href="https://drive.google.com/file/d/1O6UqWZHVknEJ0g2E5wjEJZhn59DFqfsU/view?usp=sharing">SkyWayRobot.iso&lt;/a>&lt;/p>
&lt;p>こちらのイメージは、ユーザー名が「pi」、パスワードが「raspverry」となっています。&lt;br>
SSH接続される際の参考にしてください。&lt;/p>
&lt;p>ダウンロードができたら、以下のサイトを参考にしてマイクロSDカードにダウンロードしたOSイメージをインストールしてください。&lt;br>
Windowsの場合：&lt;a href="https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/">最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a> の「SDカードのフォーマット」から「初期設定」直前まで&lt;br>
Macの場合：&lt;a href="https://qiita.com/shippokun/items/9070fc58f69d8c063e44">MacでRaspberryPi入門 - Qiita&lt;/a> の「2.microSDカードに書き込み」の部分&lt;/p>
&lt;p>OSをインストールしているあいだ、次のSkyWayセットアップを行なっておいてください。&lt;/p>
&lt;h4 id="skyway">SkyWayのセットアップ&lt;/h4>
&lt;p>次に、SkyWayにユーザー登録をして、APIキーを発行します。&lt;br>
&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の “Create new application” をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p>
&lt;pre>&lt;code>Application description: My WebRTC Robot（一例。任意の名前でよいです）
Available domains: localhost, 127.0.0.1, ukkz.github.io
&lt;/code>&lt;/pre>&lt;p>“ukkz.github.io” は、後ほどWeb上のロボットコントローラーからアクセスする際に必要なので、最初は必ず入れておいてください。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="heading-3">環境設定&lt;/h4>
&lt;p>OSのインストールが完了すると、「boot」という外付けディスクがPCに認識されていると思います。そのディスクを開くと色々なファイルが入っていますが、その中から「wifi_passwd_list.conf」と、「robot.json」があることを確認してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず最初に「wifi_passwd_list.conf」を開き、自宅などのWiFiのSSIDとパスワードを入力します。こうすることでWiFiに自動で接続することができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>次に「robot.json」を開きます。この中の&lt;code>&amp;quot;YOUR_SKYWAY_APIKEY&amp;quot;&lt;/code>となっている部分に、先ほど取得したご自身のAPIキーをペーストしてください。また、&lt;code>&amp;quot;robot-NEW&amp;quot;&lt;/code>となっているところはこのロボットを識別するための「ピアID」となります。ここは好きな名前をいれましょう。&lt;/p>
&lt;p>今回は必要ありませんが、このラズパイと同じLAN内でもしSSH接続をする場合は、&lt;br>
&lt;code>ssh pi@ピアID.local&lt;/code>&lt;br>
とするとそのままアクセスすることができます。&lt;br>
また上述したとおり、パスワードは「raspverry」に設定しています。&lt;/p>
&lt;p>この「robot.json」の他の項目として&lt;code>&amp;quot;reverse&amp;quot;&lt;/code>と書かれた部分があります。ここを&lt;code>false&lt;/code>から&lt;code>true&lt;/code>にすると、モーターの回転方向が逆転します。銅線の接続方法によっては最初から逆回転をするようになっている場合があるので、完成後にコントローラからロボットを操作した際に操作と逆方向に進んでしまったりする場合は、こちらのパラメータを変更してみてください。&lt;/p>
&lt;p>以上まで終了したら、マイクロSDカードをPCから取り外します。&lt;/p>
&lt;h3 id="heading-4">仕上げ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ペンチやピンセットなどを使って、マイクロSDカードをラズパイのスロットに挿入します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>カメラがだらんと垂れた状態になっているので、厚めの両面テープを使い、ユニバーサルプレート先端の「軸受けパーツ」に上図のように固定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>電池ボックスをロボット後部の空いた部分に載せ、輪ゴムや髪留め用のゴムなどで落ちないよう簡単に固定します。最後に電池スナップから伸びる赤と黒の線を、それぞれ「VIN」端子と「GND」端子に接続すれば完成です！&lt;/p>
&lt;h2 id="heading-5">試してみよう&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>電源スイッチを入れて、30秒ほど待ってみましょう。モーターが動き、ロボットが軽く前後に移動するような「シグナリング動作」を行うのが確認できたら、SkyWayへの接続が完了しています。何も起こらない場合は、環境設定のところで入力したWiFiの情報が間違っていないか、APIキーがちゃんと入力されているか確認しましょう。&lt;/p>
&lt;p>SkyWayへの接続ができているようであれば、以下のURLをまずコピーして、お使いのブラウザのアドレスバーにペーストしてください。&lt;br>
&lt;code>https://ukkz.github.io/skyway-robot/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>ペーストできたら、ページを表示する前に、このアドレスの「?apikey=」に続く文字列をご自身で取得したAPIキーに書き換えてからこのURLにアクセスしてください。すると次のような画面が出ます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この画面では、各ロボットごとに設定した「ピアID」の文字列のボタンが複数表示されています。このように、うまく接続できている場合は環境設定のところで書いたロボットの「ピアID」が画面上部に表示されます。同じAPIキーで複数台接続している場合は、その台数分だけボタンが出現します。この時点ではまだロボットとP2P接続していません。ボタンをクリックしてみると……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>問題なく接続されていれば、このようにカメラからの画像がブラウザの画面に表示され、十字キーでロボットを操作することができます。他にもゲーミング用のWASDキーでの操作や、LeapMotionでの操作に加え、スマホなどからは画面をなぞることでバーチャルジョイスティックによる操作をすることもできます。&lt;/p>
&lt;h2 id="heading-6">トラブルシューティング&lt;/h2>
&lt;p>&lt;strong>ラズパイが起動しない&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ISOの書き込みがきちんとできているか確認&lt;/li>
&lt;li>電池を満充電のものと交換してみる&lt;/li>
&lt;li>SDカードが壊れてしまっていないか&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>起動したようだが「シグナリング動作」が行われない&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>WiFiのアクセスポイント名とパスワードの確認&lt;/li>
&lt;li>SkyWayのAPIキーの確認&lt;/li>
&lt;li>モーターとモータードライバの物理的な接触不良はないか&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ブラウザでボタンを押しても接続後すぐに切れて「シグナリング動作」を繰り返す&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>カメラモジュールの故障または接触不良&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>操作に大幅な遅延がある&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ロボットとコントローラを同一のLAN内で動かしてみる&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ロボットがキー操作と逆の動作をする&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>前後逆になってしまう場合は、&lt;code>/boot/robot.json&lt;/code>の中にあるreverseをtrueにする&lt;/li>
&lt;li>左右逆になってしまう場合は、&lt;code>/boot/robot.json&lt;/code>の中にあるab_swapをtrueにする&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>最初からロボットとの接続が確立できず起動後すぐに暴走してしまう&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>セメント抵抗の値を大きくしてみる&lt;/li>
&lt;li>どこかで端子がショートしていないか確認&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>接続後しばらくして操作に反応しなくなり暴走してしまう&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>電池を新品に交換する&lt;/li>
&lt;li>電源用USB接続を併用する&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>その他、うまく動かない……&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Twitter &lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a> 宛にDM、もしくは&lt;br>
メールで ukok(at_mark)dotstud.io までお気軽にご質問ください。&lt;/li>
&lt;/ul>
&lt;h2 id="heading-7">まとめ&lt;/h2>
&lt;p>いかがでしたでしょうか？&lt;br>
今回は、最初からプログラムを書くとやはり難易度が高くなってしまうので、ロボットをOSイメージとして配布してみました。もし余力のある方は、ホームフォルダにある&lt;code>app.js&lt;/code>がロボットの本体ですので、ぜひご自身で色々とさわってみてくださいね。&lt;/p></description></item><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-piano/</link><pubDate>Tue, 14 May 2019 00:00:00 +1800</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-piano/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。&lt;br>
&lt;a href="https://dotstud.io/blog/meeting-via-webrtc-piano/">前回&lt;/a>は、スタジオからなんとかオンラインミーティングに参加したのですが、当然ながらバレちゃいましたね……&lt;br>
しかし、新社会人も多いこの季節、同じような境遇に陥る若人も少なくないでしょう！！&lt;br>
というわけで、今回は市販のMIDIキーボードを使って、簡単にこの仕組みを自作する方法を解説します！&lt;/p>
&lt;h2 id="heading">ハードウェア部分&lt;/h2>
&lt;h3 id="heading-1">必要なもの&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Raspberry Pi 3B+&lt;/li>
&lt;li>マイクロSDカード（8GB以上）&lt;/li>
&lt;li>USB-MIDIキーボード&lt;br>
今回はKORG社のnanoKey2を使っていきますが、基本的には何でもOKです。&lt;/li>
&lt;li>Raspberry Pi Camera Module&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ハードウェアは特に作成する必要がなく、カメラモジュールを基板にとりつけ、USB-MIDIキーボードを接続するだけでOKです！&lt;br>
スタジオ編では、実際にYAMAHAのMIDIキーボードを分解して内部にRaspberry Piを組み込んだものを使用しました。余力がある方は試してみてください♪&lt;/p>
&lt;h2 id="heading-2">ソフトウェアのインストールと設定&lt;/h2>
&lt;p>ここからは、すでにRaspberry PiへのOSインストールが完了していて、SSHなどを経由してターミナル操作ができる前提で解説してゆきます。&lt;br>
よくわからない、という方は、以下の記事の「2. ソフトウェアのインストールと設定」あたりを参照しながら、OSのインストールから始めてみてください。&lt;br>
&lt;a href="https://dotstud.io/blog/howto-make-webrtc-pokeberu/">【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】 | dotstudio&lt;/a>&lt;/p>
&lt;h3 id="heading-3">映像のストリーミング&lt;/h3>
&lt;p>まず映像ストリーミングに必要なソフトウェアをインストールします。&lt;br>
gstreamerというストリーミングソフトウェアを使いますが、Raspberry Piへのインストールは少々複雑になります。
以下をそのままコピペしてターミナルで実行してください。&lt;br>
&lt;code>$ sudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio libgstreamer-plugins-base1.0-dev&lt;/code>&lt;br>
（参考：&lt;a href="https://gstreamer.freedesktop.org/documentation/installing/on-linux.html">GStreamer Installing on Linux&lt;/a>）&lt;/p>
&lt;p>上記のインストールが完了したら、次はラズパイカメラでgstreamerを扱うライブラリをインストールします。以下のコマンドを順番に実行してください。&lt;/p>
&lt;pre>&lt;code>$ cd ~/Documents
$ git clone https://github.com/thaytan/gst-rpicamsrc.git
$ cd gst-rpicamsrc/
$ ./autogen.sh --prefix=/usr --libdir=/usr/lib/arm-linux-gnueabihf/
$ make
$ sudo make install
&lt;/code>&lt;/pre>&lt;h3 id="midipython">MIDIキーボードをPythonから扱う&lt;/h3>
&lt;p>MIDIキーボードからの入力を取得できるPythonライブラリをインストールします。&lt;/p>
&lt;p>&lt;code>$ sudo apt-get install libasound2-dev libjack-jackd2-dev&lt;/code>&lt;br>
&lt;code>$ pip3 install mido python-rtmidi&lt;/code>&lt;/p>
&lt;h2 id="heading-4">プログラム部分の制作&lt;/h2>
&lt;h3 id="midi">MIDIキーボードの確認&lt;/h3>
&lt;p>必要なライブラリがインストールできたところで、まずはMIDIキーボードで2タッチ入力ができるか試してみましょう！&lt;br>
今回は、ソースコードが少し長いので、gitリポジトリからクローンします。&lt;br>
ディレクトリはあらかじめ適当なものを作成して移動するなどしておいてください。&lt;br>
&lt;code>$ git clone https://github.com/ukkz/skygate.git&lt;/code>&lt;/p>
&lt;p>このリポジトリには、今回使う「SkyWay」に関するモジュールが含まれていますので、開発者モードでインストールします。&lt;br>
&lt;code>$ pip3 install -e skygate/&lt;/code>&lt;br>
&lt;code>$ sudo python3 skygate/setup.py develop&lt;/code>&lt;/p>
&lt;p>クローンとモジュールのインストールができたら、MIDIキーボードから2タッチ入力ができるサンプルを、Python3で実行してみましょう。&lt;br>
このサンプルでは、外部MIDIインターフェースからのMIDIメッセージを解析して押されている鍵盤を特定し、鍵盤に割り当てられた数字をもとにして2タッチ入力変換をするものになっています。 &lt;br>
&lt;code>$ python3 skygate/2touch-input-by-midi.py&lt;/code>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実行すると入力待ちになります。&lt;br>
上図を参考にして、&amp;ldquo;41128122##&amp;rdquo; と打ち込んでみてください。すると……&lt;/p>
&lt;pre>&lt;code>pi@raspberrypi:~ $ python3 skygate/2touch-input-by-midi.py
たいやき
&lt;/code>&lt;/pre>&lt;p>このように表示されましたでしょうか？&lt;br>
&amp;ldquo;41128122&amp;rdquo; が、2タッチ入力では「たいやき」となり、また &amp;ldquo;##&amp;rdquo; が、ここでは「入力確定」の意味合いで使用するコマンドのようなものになっています。今回は、デバイス側からのメッセージ送信はこれを使って行いますのでぜひ覚えておいてください。&lt;/p>
&lt;h3 id="skyway">SkyWayを使ってラズパイとブラウザ間でビデオチャット&lt;/h3>
&lt;p>今回も、&lt;a href="https://dotstud.io/blog/howto-make-webrtc-pokeberu/">以前にポケベルを作成した記事&lt;/a>と同様に、通信部分で&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>というWebRTCプラットホームを利用します。&lt;br>
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br>
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong>WebRTC Gateway&lt;/strong> というものが開発されていて、無償で利用することができます。&lt;br>
詳細は以下をご覧ください。&lt;br>
&lt;a href="https://github.com/skyway/skyway-webrtc-gateway">skyway/skyway-webrtc-gateway: &lt;em>Experimental&lt;/em> WebRTC Gateway for SkyWay&lt;/a>&lt;/p>
&lt;h4 id="skywayapi">SkyWayのアカウント作成とAPIキーの取得&lt;/h4>
&lt;p>&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。&lt;/p>
&lt;p>&lt;code>Application description: my midi chat client&lt;/code>（一例。任意の名前でよいです）&lt;br>
&lt;code>Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/code>&lt;/p>
&lt;p>&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほどブラウザ上からビデオチャットを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="webrtc-gateway">WebRTC Gatewayの取得と起動&lt;/h4>
&lt;p>Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br>
&lt;code>$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code>&lt;/p>
&lt;p>実行権限を付与してから、バックエンドで起動させます。&lt;br>
&lt;code>$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code>&lt;/p>
&lt;h4 id="raspberry-pi-">Raspberry Pi とブラウザ間で接続&lt;/h4>
&lt;p>以下のコマンドでサンプルスクリプトを実行します。&lt;br>
&lt;code>$ python3 skygate/sample.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br>
今回は &amp;ldquo;keyboard&amp;rdquo; という値を使いましょう。&lt;br>
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p>
&lt;p>&lt;code>Peer created as keyboard: pt-529579b6-1b69-4f81-b213-3400d039a3da&lt;/code>&lt;br>
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;/p>
&lt;p>では次に、このRaspberry Piと通信したいPCのブラウザなどから、以下のURLを開きましょう。&lt;br>
&lt;a href="https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx">SkyWay P2P Video &amp;amp; Text Chat&lt;/a>&lt;/p>
&lt;p>こちらはWeb側のチャット画面となるページですが、URLは以下のようになっています。&lt;br>
&lt;code>https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>このうち、&lt;code>apikey=&lt;/code>より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このような感じになっているかと思います。&lt;br>
このとき、Raspberry Pi側が正常にSkyWayに認識されていれば、左下のドロップダウンメニューに「keyboard」と表示が出ますので、その右横のcallボタンを押すと……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Raspberry Pi側からの映像が大きく映し出されていれば、問題なく接続されています！&lt;/p>
&lt;h3 id="midi-1">ビデオチャットにMIDIメッセージングを組み込もう&lt;/h3>
&lt;p>ここまでくれば、あとはビデオチャットとテキストチャットを結合し、さらにMIDIキーボードの2タッチ入力でテキスト入力ができるようにすれば、「キーボードを弾きながらオンラインミーティングに参加できるマシン」のできあがりです！&lt;br>
こちらも、ソースコードが少し長くなるのでリポジトリの中にサンプルを置いておきました。これをそのまま利用してください。&lt;/p>
&lt;p>&lt;code>$ python3 skygate/video-and-text-by-midi.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>こちらのコードでは先ほどのMIDIキーボードの2タッチ入力に加え、WebRTCで着信した相手に対してその入力テキストを送り返すようになっています。&lt;br>
これを実行すると、以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>2タッチ入力で「おつかれさまです！」と入力したのですが、最後だけ間違えて「おつかれさまですW」になってしまいました……　慣れないと難しいですね。&lt;br>
このまま送信すると、ブラウザ側では以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ブラウザ側からも文字列が表示されました！&lt;br>
もちろん、返事をすることもできます。ここでは「進捗どう？」とブラウザ側から送りましたが、すでに表示されているとおり、Raspberry Pi側にもちゃんと送られていることが確認できます。&lt;/p>
&lt;h2 id="heading-5">まとめ&lt;/h2>
&lt;p>WebRTCを使うと、映像・音声のようなメディアストリームのほか、バイナリにすることができるデータならなんでも送ることができます！　また、本来はWebブラウザ同士でしか使えなかったこの技術が、SkyWayのGatewayによってRaspberry PiのようなIoTデバイスでも実現できるようになったため、さらにものづくりの幅が広がります。少し難しいところもありますが、ぜひともWebRTCによる新しい可能性を感じていただければと思います。&lt;/p></description></item><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【スタジオ編】</title><link>https://dotstud.io/blog/meeting-via-webrtc-piano/</link><pubDate>Mon, 13 May 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/meeting-via-webrtc-piano/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>最近、趣味でバンドを始めました。&lt;br>
なんとなくキーボードを担当しています。&lt;br>
いやー、音楽っていいものですね。&lt;br>
仕事のことを忘れてノリノリになっちゃいますね！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こちらはギター担当の自給力さんです。&lt;br>
彼はパワー自慢なので、とても力強い演奏をしてくれるんですよ。&lt;br>
練習中でも、ヒートアップしてくると周りが見えなくなるぐらい熱いプレイを見せてくれる、素敵なメンバーです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>さて、セッティングも終わったし、そろそろ合わせ練習を始めますか！&lt;br>
3、2、1、ハイ！！&lt;/p>
&lt;p>………&lt;br>
……&lt;br>
…&lt;/p>
&lt;h2 id="heading">何か忘れているような&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>あれ、スマホが鳴ってるな……&lt;br>
せっかくノッてきたのに。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>あ！！！！！そういえば！！！！！&lt;br>
今日ミーティング入ってた気がするぞ……！！&lt;br>
やばいやばい、完全に忘れてスタジオに来てしまった……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そういえば、この前もミーティングすっぽかしちゃって、次やらかしたらクビだぞ！！　って社長のびすけに言われたばかりなんだった……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ああ、自給力さん、完全にスイッチ入ったな。&lt;br>
彼はこうなると、少なくとも1時間はもう戻ってこれなくなっちゃうんだよな。&lt;br>
どうしたものか……&lt;/p>
&lt;p>………&lt;br>
……&lt;br>
…&lt;/p>
&lt;h2 id="heading-1">ミーティングをサボらずにバンド練習を続けたい&lt;/h2>
&lt;p>＼ｶﾗﾝｶﾗﾝ／&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>しまった、社会人なら必ずポケットに1人1セットは入っていると言われるラズベリーパイと専用カメラを、焦った拍子に落としてしまった。踏まなくてよかった。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>（ハッ！　まてよ、このスタジオはWiFi完備だったはず……　そして今日のミーティングはオンラインで、まだもう少し時間あるじゃないか！　これは、いける！）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>（さらにノってきた自給力さん）&lt;/p>
&lt;p>〜　30分後　〜&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>できたぞ！！！！&lt;/strong>&lt;br>
予備で持ってきていたシンセを改造して……&lt;br>
&lt;strong>バンドをプレイしつつオンラインでミーティングにコミットできるソリューション……ッ！！&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>これは、ラズパイにつないだカメラの映像を、Webブラウザの画面にWebRTCの&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>を使って送信できる機能がついたシンセなのだ！&lt;br>
なに？　バンド演奏してたら、音がうるさすぎてマトモに会話できないって？　いーや問題ない！&lt;br>
このシンセは、打鍵のたびに &lt;strong>「MIDI信号」&lt;/strong> を発することができるのだけど、これをテキストに変換して映像と同時に送信できるような仕組みにしたのだ！　つまり、 &lt;strong>音を出しながらもテキストデータを送信することができる！&lt;/strong>&lt;/p>
&lt;p>さて、マイクは壊れている、ということにして、映像とテキストチャットだけを送り、あとは自給力さんが映らないようにすれば、まさか仕事をすっぽかしてるなんてバレないでしょう。僕ってば天才！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そうこうしてるうちにミーティング時間だ！&lt;br>
演奏しつつ参加するぞ〜〜&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>カメラがキーボードの端にあるので、身体の中心を少しずらして目線を合わせて……&lt;br>
文字列の送信は、キーボードの1オクターブ・12鍵を、「ポケベルの2タッチ入力」のようにして扱うことで行います。&lt;br>
向こうからの映像は見えないけど、スマホからラズベリーパイにSSH接続することで、向こうから送られたテキストなら確認可能！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>………&lt;br>
……&lt;br>
…&lt;/p>
&lt;h2 id="heading-2">なんとか乗り越えられそうだ&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-3">結局バレてしまいましたが&lt;/h2>
&lt;p>次回は、今回作った「演奏と同時にWebRTCでビデオ・テキストチャットができるシンセ」の作り方を紹介していきます！&lt;br>
ミーティングをサボるため以外にも、映像・歌・演奏MIDIデータを同時にリアルタイム配信するなどの（まともな）用途にも使えますので、気になった方はぜひ続きもご覧くださいね！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>光るサンドバッグ作って◯-monsterの気分を感じたい！</title><link>https://dotstud.io/blog/shining-sandbag-like-bmonster/</link><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/shining-sandbag-like-bmonster/</guid><description>&lt;p>プログラミングをしていると運動不足になりがちです。&lt;/p>
&lt;p>何か作っている時のストレスもあります。（なんで動かないんだーってw）&lt;/p>
&lt;p>ストレス発散したい！&lt;/p>
&lt;p>手っ取り早くストレス発散して運動ができるのは何でしょう、、サンドバック殴ることですよね！&lt;br>
（この辺りから、B-◯onsterっぽくしたい欲が出てきます笑）&lt;/p>
&lt;p>サンドバックを買って、叩く毎に光ったり音鳴ったりしたら良い気晴らしになるんじゃないかと。&lt;/p>
&lt;p>ということで、&lt;/p>
&lt;p>&lt;strong>光るサンドバッグを作ってB-Mons◯erに行った感じを味わいたい！！！&lt;/strong>&lt;/p>
&lt;p>ではでは、作っていきましょう&lt;/p>
&lt;h2 id="heading">完成物のイメージ&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;em>&lt;strong>パンチしたら全体が光る。&lt;/strong>&lt;/em>
→この記事では、加速度センサを使って音を鳴らすまで作ってみます。仕様としては以下のことができたら達成とします。&lt;/p>
&lt;p>・サンドバックを叩いたら、音が出る&lt;br>
・５回叩いたら、音が変わる。&lt;br>
・10回叩いたら、音楽が鳴る。&lt;/p>
&lt;h2 id="heading-1">必要な物&lt;/h2>
&lt;p>・サンドバック&lt;br>
・microbit&lt;br>
・電子ブザー&lt;br>
・Micro USB Micro-B&lt;br>
・ワニ口クリップ&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-2">サンドバックを作ってみる&lt;/h2>
&lt;p>まずは、サンドバックを作っていきましょう。&lt;br>
これを買ってみました（http://urx.space/U1ry）&lt;br>
開けけてみて思ったのですが、なかなかしっかりしてて良い感じのサンドバックです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>中身を確認して、作っていきましょう！！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>水を使って土台を作るタイプなので、屋外でやりましょう（じゃないと母ちゃんに怒られますよ笑）&lt;br>
＊ペットボトルたちは猫避けではなく、土台に使う水です。&lt;br>
凝固剤も入っていて、なかなか本格的！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>土台ができたら、膨らましていきましょう！&lt;br>
（なんか、いかがわしい形と動きをしますが、、下ネタご了承ください）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>良い感じに膨らんだらサンドバックは完成です&lt;br>
センサに移りましょう&lt;/p>
&lt;h2 id="heading-3">センサを作ってみる&lt;/h2>
&lt;p>&lt;strong>・micro softアカウントを作ってサインイン&lt;/strong>
microbitはBBCが作ってる教育用のマイコンでして、&lt;br>
マイクロソフトアカウントが必要なので、持ってない人は作りましょう。&lt;br>
ここから作れます。https://microbit.org/ja/guide/&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>・make code エディターでコードを編集します。&lt;/strong>
microbitにコードを書き込むには３つの方法があります。&lt;/p>
&lt;p>JSやPythonで書くこともできますが、一番簡単なのはmake code エディターのブロックで入力することです。&lt;br>
このエディターを使えば、こんな感じで簡単にコードを書くことができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ブロックの意味はJSを書いたことなくてもわかるかも。&lt;/p>
&lt;p>マイプロジェクトから新しいプロジェクトを開いて作っていきます。&lt;/p>
&lt;p>「ずっと」のブロックをここでは2つ作ります。&lt;br>
　・カウントする「ずっと」&lt;br>
　・音を鳴らすための「ずっと」&lt;br>
＊１つにまとめるのもできると思いますが、わかり安かったので分けました。&lt;/p>
&lt;p>カウントする「ずっと」の方に、accXという変数を作り、加速度Xという入力ブロックを追加します。&lt;br>
そして、「もし」ブロックで、accXが500未満であればLEDが点灯し、音楽が鳴るブロックにしていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>音を鳴らすための「ずっと」ブロックを作っていきます。&lt;br>
まず、「最初だけ」ブロックに変数カウントを0にして置いておきます。&lt;br>
そして、カウントする「ずっと」の方に「もし」ブロックを入れて5回いった時と10回いった時にLEDの点灯と音楽が鳴るようにします。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>・microbitとブザーを繋げます&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>おお、っぽくなってきました！&lt;/p>
&lt;p>そして、サンドバックに貼り付ければ、、、&lt;/p>
&lt;h2 id="heading-4">できました！！&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>・デモ動画&lt;/strong>
&lt;a href="http://www.youtube.com/watch?v=it0159iWUrQ">&lt;img src="http://img.youtube.com/vi/it0159iWUrQ/0.jpg" alt="IMAGE ALT TEXT HERE">&lt;/a>&lt;/p>
&lt;h2 id="-">[あとがき] 挫折の数々&lt;/h2>
&lt;p>&lt;strong>・最初のイメージを捨てました&lt;/strong>
最初は単純に光るだけのサンドバックデバイスを作ろうと思っていました。でも、プロトタイプを作る際にLEDが光るだけだと、サンドバックを叩いた時にLEDの光を確認できないんですよねww&lt;/p>
&lt;p>なので、一緒に音も出るように変更しました。&lt;br>
そのおかげで、ゲーム性が高くなって良い感じになりました。&lt;/p>
&lt;p>&lt;strong>・使う物を変えました&lt;/strong>
最初、microbitではなくwio nodeとグローブで作ろうとしてました。&lt;br>
でも、「加速度センサ使ってプロトタイプ作るだけならmicrobitで良いんじゃね？」とのびすけしゃちょーにアドバイスもらい試しに使うことにしました。&lt;/p>
&lt;p>結局、変えてみてよかったです！&lt;br>
microbitはものすごく使いやすい。デプロイの仕方も編集したブロックのhexファイル（microbit用のファイル）をmicrobitのフォルダに入れるだけでできます。&lt;br>
全部のプログラミングがこうなれば良いのに、、って思うぐらいプログラミングしやすかったです。&lt;/p></description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。
&lt;a href="https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/">前回の記事&lt;/a>では、最新技術でポケベルを作ってみた！　というお話と、Webから2タッチ入力ができる公衆電話アプリの紹介をさせていただきました。&lt;/p>
&lt;p>2回目の今回は「制作編」ということで、パーツさえ用意できれば誰でも作れてしまうポケベルの作り方を紹介したいと思います！&lt;/p>
&lt;h2 id="heading">ハードウェア部分の制作&lt;/h2>
&lt;h3 id="heading-1">必要なもの&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Raspberry Pi 3B+&lt;/li>
&lt;li>マイクロUSBケーブル&lt;/li>
&lt;li>マイクロSDカード（8GB以上）&lt;/li>
&lt;li>GrovePi+&lt;/li>
&lt;li>Grove Buzzer&lt;/li>
&lt;li>Grove LCD RGB Backlight&lt;/li>
&lt;li>有線LANで作業用PCと接続できる環境（セットアップに使います）&lt;/li>
&lt;li>テープ（ガムテープやセロハンテープ、マスキングできれば何でも可）&lt;/li>
&lt;/ul>
&lt;p>前提として、最低限のCLI（ターミナル）操作ができる方を対象として記事を書いています。予めご了承ください。&lt;/p>
&lt;h3 id="heading-2">組み立て&lt;/h3>
&lt;h4 id="grovepiraspberry-pi">GrovePi+をRaspberry Piとドッキングする&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ガムテープやセロテープなどで、Raspberry PiのUSB端子の上部を図のように「マスキング」します。&lt;br>
これは、上に乗せるGrovePi+の基板が直接触れることによるショートを防止するためです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Raspberry Piの端子にGrovePi+のソケットを上から挿し込みます。&lt;br>
このとき互いの端子の長さが異なりますが、写真のようにカド部分にあわせるようにしてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>斜め上から見るとこのようになります。&lt;/p>
&lt;h4 id="grovergb-lcd">GroveのRGB LCDとブザーを接続する&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Groveのブザーを「D8」と書かれている端子にGroveケーブルで接続します。&lt;br>
また、Grove LCD RGB BacklightをI2Cと書かれている端子に接続します。こちらはI2C接続なので、I2Cと記述がある端子ならどこでもかまいませんが、写真ではI2C-1という端子に接続しています。&lt;/p>
&lt;h2 id="heading-3">ソフトウェアのインストールと設定&lt;/h2>
&lt;h3 id="grovepiosraspbian-for-robots">GrovePi+向けOS「Raspbian For Robots」&lt;/h3>
&lt;p>このパートは以下のチュートリアルの概略になります。&lt;br>
&lt;a href="https://www.dexterindustries.com/GrovePi/get-started-with-the-grovepi/">Get Started with GrovePi&lt;/a>&lt;/p>
&lt;h4 id="sd">マイクロSDカードへのインストール&lt;/h4>
&lt;p>GrovePi+を動作させられるソフトウェアがプリインストールされたOSが格納されたマイクロSDカードを作成します。&lt;/p>
&lt;p>公式サイトによると、すでにインストール済みのRaspbianも後から追加でGrovePi+用のソフトウェアがインストールできるとのことですが、記事執筆時点の最新ソフトウェアではうまく動作しませんでした。&lt;br>
すでにRaspbianを使われている方も、お手数ではありますが新しいマイクロSDカードを入手してお試しください。&lt;/p>
&lt;p>まず、以下のページからOSイメージファイルを入手します。&lt;br>
&lt;a href="https://sourceforge.net/projects/dexterindustriesraspbianflavor/">Raspbian For Robots by Dexter Industries download | SourceForge.net&lt;/a>&lt;br>
圧縮ファイルになっていますので、ダウンロード完了後に解凍しておきましょう。&lt;/p>
&lt;p>このイメージファイルをマイクロSDカードに書き込みます。&lt;/p>
&lt;ul>
&lt;li>作業PCがWindowsの方は以下を参考に進めてください。&lt;br>
&lt;a href="https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/">最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a>&lt;/li>
&lt;li>作業PCがMacの方は以下を参考に進めてください。&lt;br>
&lt;a href="https://qiita.com/py_iK/items/9070fc58f69d8c063e44">MacでRaspberryPi入門 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>インストールが完了したら、RaspberryPiに挿入して電源を接続し起動させます。&lt;br>
LANケーブルを使い、Raspberry Piと作業用PCを接続します。最近の小型PCはLANポートがついていないことも多いため、その際はUSBイーサネットアダプタなどを使うとよいでしょう。&lt;/p>
&lt;p>接続が完了し、Raspberry PiとGrovePi+のPWR LEDが点灯していることを確認したら、作業用PCブラウザのURL入力欄に&lt;br>
&lt;code>http://dex.local/&lt;/code>&lt;br>
と入力して移動します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ここまででうまくインストールと接続が完了していれば、このような画面が表示されます。&lt;br>
ブラウザ中段左側の、&amp;ldquo;VNC&amp;rdquo; をクリックすると、ブラウザからRaspberry Piのデスクトップ画面へと直接アクセスすることができます。&lt;/p>
&lt;h4 id="heading-4">設定とシステムのアップデート&lt;/h4>
&lt;p>&amp;ldquo;VNC&amp;rdquo; をクリックします。もしもパスワードが求められたら、&amp;ldquo;robots1234&amp;rdquo; と入力しましょう。&lt;br>
Raspberry Piの本体にWiFiが内蔵されているモデル以外をお使いの場合は、WiFiドングル（USB接続の子機）を接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>右上に上下の矢印2つのアイコンをクリックして、WiFiに接続しましょう。&lt;br>
有線LANによる接続と別でWiFiに接続していないと、アップデートやSkyWayへの接続などができません。&lt;/p>
&lt;p>次にソフトウェアのアップデートを行います。&lt;br>
&amp;ldquo;DI Software Update&amp;rdquo; というアイコンをダブルクリックして開き、しばらく待つと以下の画面になります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>以下の作業でダイアログが何回か出ますがすべてOKをクリックしてください。&lt;br>
ドロップダウンメニューから &amp;ldquo;GrovePi&amp;rdquo; を選択し、&amp;ldquo;Update Firmware&amp;rdquo; をクリックします。&lt;br>
それが完了したら、&amp;ldquo;Update Dexter Software&amp;rdquo; のボタンもクリックしてアップデートを行います。&lt;/p>
&lt;p>ターミナルウインドウが出てアップデートが進行していきますので、少し時間がかかりますが終わるまで気長に待ちましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ターミナルがこのような画面になったら閉じて、Raspberry Piを再起動します。&lt;br>
再起動後は同様の手順でブラウザからデスクトップが表示できるところまで進めて、このデスクトップからターミナルを開きましょう。&lt;br>
あるいは、SSHが使い慣れている方であれば、作業用PCから&lt;br>
&lt;code>$ ssh pi@dex.local&lt;/code>&lt;br>
で直接CLI操作をすることも可能ですので、使いやすいほうをお試しください。&lt;/p>
&lt;h2 id="heading-5">ポケベルのプログラム部分の制作&lt;/h2>
&lt;h3 id="grovelcd">GroveのLCDとブザーを扱う&lt;/h3>
&lt;p>さて、ここからはポケベルを実際に動作させるためのプログラムを作成していきます！&lt;br>
といっても、全てコピー&amp;amp;ペーストで作成していただけますのでご安心を。&lt;/p>
&lt;p>まずは適当なディレクトリを作成して移動します。&lt;br>
&lt;code>$ mkdir ~/pocketbell; cd ~/pocketbell&lt;/code>&lt;/p>
&lt;p>LCDディスプレイを簡単に扱えるようにしてくれるモジュールをコピーします。&lt;br>
&lt;code>$ cp ~/Desktop/GrovePi/Software/Python/grove_rgb_lcd/grove_rgb_lcd.py ./&lt;/code>&lt;/p>
&lt;p>同じディレクトリに、テスト用スクリプトを作成しましょう。&lt;br>
&lt;code>$ vi grove_test.py&lt;/code>&lt;br>
ここではviエディタを使っていますが、vimやemacsなど、編集のできるものであれば何でもかまいません。&lt;br>
編集画面になったら、以下のソースコードをコピー&amp;amp;ペーストして保存してください。&lt;/p>
&lt;p>&lt;code>ファイル:grove_test.py&lt;/code>&lt;/p>
&lt;pre>&lt;code>import time, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
try:
setRGB(200, 200, 200)
setText(&amp;quot;Hello PocketBell&amp;quot;)
grovepi.digitalWrite(buzzer, 1)
time.sleep(1)
grovepi.digitalWrite(buzzer, 0)
except KeyboardInterrupt:
grovepi.digitalWrite(buzzer, 0)
except IOError:
print (&amp;quot;Error&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>保存したら、python3で実行してみましょう。&lt;br>
&lt;code>$ python3 grove_test.py&lt;/code>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ブザーからビープ音が鳴ると同時に、LCDに &amp;ldquo;Hello PocketBell&amp;rdquo; と表示されていれば、GroveがRaspberry PiのPythonから正しく扱えていることがわかります。&lt;/p>
&lt;h3 id="skyway">SkyWayと接続する&lt;/h3>
&lt;p>今回のポケベル制作における通信部分は、&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>というWebRTCプラットホームを利用します。&lt;br>
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br>
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong>WebRTC Gateway&lt;/strong> というものが開発されていて、無償で利用することができます。&lt;br>
詳細は以下をご覧ください。&lt;br>
&lt;a href="https://github.com/skyway/skyway-webrtc-gateway">skyway/skyway-webrtc-gateway: &lt;em>Experimental&lt;/em> WebRTC Gateway for SkyWay&lt;/a>&lt;/p>
&lt;h4 id="skywayapi">SkyWayのアカウント作成とAPIキーの取得&lt;/h4>
&lt;p>&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p>
&lt;p>Application description: my pocketbell（一例。任意の名前でよいです）&lt;br>
Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/p>
&lt;p>&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほど公衆電話アプリからこのアプリケーションを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="webrtc-gateway">WebRTC Gatewayの取得と起動&lt;/h4>
&lt;p>Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br>
&lt;code>$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code>&lt;/p>
&lt;p>実行権限を付与してから、バックエンドで起動させます。&lt;br>
&lt;code>$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code>&lt;/p>
&lt;h4 id="gatewaypython">GatewayをPythonで扱えるようにするモジュールの取得&lt;/h4>
&lt;p>今回、WebRTC Gatewayを扱うにあたり、簡単なモジュールを作成しました。&lt;br>
Gitリポジトリをローカルにクローンします。&lt;br>
&lt;code>$ git clone https://github.com/ukkz/skygate.git&lt;/code>&lt;/p>
&lt;p>未完成のモジュールですので、今回は開発者モードでインストールします。&lt;br>
&lt;code>$ pip3 install -e skygate/&lt;/code>&lt;br>
&lt;code>$ sudo python3 skygate/setup.py develop&lt;/code>&lt;/p>
&lt;h4 id="skyway-1">SkyWayへの接続テスト&lt;/h4>
&lt;p>以下のコマンドでサンプルスクリプトを実行します。&lt;br>
&lt;code>$ python3 skygate/sample.py bell-0000 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br>
今回は &amp;ldquo;bell-0000&amp;rdquo; という値を使いましょう。&lt;br>
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p>
&lt;p>&lt;code>Peer created as bell-0000: pt-829aa04e-449d-44a1-94f8-03481741cc5c&lt;/code>&lt;br>
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;br>
Ctrl+C でサンプルスクリプトを終了させましょう。&lt;/p>
&lt;h3 id="skywaygrove">SkyWay接続とGroveを組み合わせる&lt;/h3>
&lt;p>以下のソースコードをコピー&amp;amp;ペーストし &amp;ldquo;pocketbell.py&amp;rdquo; という名前のファイルに保存してください。&lt;/p>
&lt;p>&lt;code>ファイル:pocketbell.py&lt;/code>&lt;/p>
&lt;pre>&lt;code>#!/usr/bin/env python
import time, sys, skygate, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
if len(sys.argv) &amp;gt;= 3:
peer_id = str(sys.argv[1])
api_key = str(sys.argv[2])
try:
peer = skygate.Peer(peer_id, api_key)
except Exception as e:
print(e)
setRGB(100, 0, 0)
quit()
else:
print('Peer created as '+peer.id+': '+peer.token)
setRGB(0, 100, 0)
try:
while True:
for data in peer.getDataConnections():
if not data.getQueue().empty():
mes = data.getQueue().get().decode()
setText(mes)
setRGB(200, 200, 200)
print(mes)
grovepi.digitalWrite(buzzer, 1)
time.sleep(.1)
grovepi.digitalWrite(buzzer, 0)
time.sleep(2)
setRGB(0, 100, 0)
except KeyboardInterrupt:
try:
peer.close()
except Exception as e:
print(e)
&lt;/code>&lt;/pre>&lt;p>接続テストのときと同様、ピアIDとAPIキーを指定して実行します。&lt;br>
ただし、ここではピアIDは &amp;ldquo;bell-0001&amp;rdquo; にしましょう。&lt;br>
&lt;code>$ python3 pocketbell.py bell-0001 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>さて、ここまででポケベルは完成で、上記のプログラムを実行することで待ち受け状態となります。&lt;br>
ではさっそく、公衆電話からデータを送ってみましょう！&lt;/p>
&lt;h2 id="web">Web上の公衆電話から数字を送信しよう&lt;/h2>
&lt;p>前回の記事で紹介した、Webから使えて自作ポケベルと通信ができる公衆電話を使います。&lt;br>
&lt;a href="https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx">PayPhone for SkyWay PocketBell&lt;/a>&lt;/p>
&lt;p>この公衆電話のURLは以下のようになっています。&lt;br>
&lt;code>https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>このうち、&lt;code>apikey=&lt;/code>より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>コインの投入口付近をクリックして、画面上の電話機のディスプレイが &amp;ldquo;CALL&amp;rdquo; になれば問題なくSkyWayに接続されています。&lt;br>
これが確認できたら、以下の順番で操作を進めてみてください。&lt;/p>
&lt;ol>
&lt;li>&amp;ldquo;0001&amp;rdquo;（ポケベルのピアIDであるbell-xxxxのxxxxに相当する4桁の数字）&lt;/li>
&lt;li>電話機ディスプレイが &amp;ldquo;0001&amp;rdquo; 表示に変化&lt;/li>
&lt;li>好きな数字を2〜3文字ほど打ち込んでみる&lt;/li>
&lt;li>受話器を置く部分をクリックして終話する&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ポケベルを確認してみましょう。&lt;br>
ビープ音とともに、自分で打ち込んだ数字がGrove LCDの画面上に表示されましたでしょうか？&lt;br>
今回は簡略版ですので、2タッチ入力で送ったカタカナ文字は表示できないという点がありますが、通信の難しさを意識することなくP2Pでのデータ送受信を体験いただけたかと思います。&lt;/p>
&lt;p>ちなみに、前半の紹介記事で作っていたポケベルの動作のようすは以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>WebRTCはWebブラウザ間でリアルタイムなデータの送受信を扱える最新の規格として普及していますが、ブラウザ以外のIoTデバイスでもこんなに簡単に扱えてしまう技術が登場しています。&lt;br>
今回利用したSkyWayというサービスはJavaScriptのSDKが無償配布されていて、Webブラウザ上で動作するWebRTCアプリケーションを誰でも気軽に作成することができます。また、Raspberry Piから利用したGatewayも、WindowsやLinux上からブラウザを介さずに利用できるようになっています。&lt;br>
あまり複雑なコードを書かなくてもこのようなP2P送受信ができますので、この機会にWebRTCを活用したものづくりにぜひともチャレンジしてみてくださいね！&lt;/p></description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【体験編】</title><link>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。&lt;!-- raw HTML omitted -->
ここ最近は次の元号が気になって、改元まで眠れません！&lt;/p>
&lt;p>そんな平成の終了を追うように、平成初期に一世を風靡した「ポケベル」が、今年9月末で終了してしまうようですね。&lt;!-- raw HTML omitted -->
&lt;a href="http://www.teleme.co.jp/service/magicmail/index.html">東京テレメッセージ株式会社｜ページャー（マジックメール）サービス終了のお知らせ&lt;/a>&lt;/p>
&lt;p>平成生まれの僕としては、聞いたことはあるけれど、使ったことはないポケベル。&lt;!-- raw HTML omitted -->
これは無くなってしまう前に体験しなくては！&lt;!-- raw HTML omitted -->
でも、もうポケベル本体は生産されておらず、新規契約もできません。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->ならば…… 作ってしまいましょう！&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="heading">ポケベルのしくみ&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ガラケー世代、スマホ世代からすれば衝撃なのですが、 &lt;strong>ポケベルは受信専用&lt;/strong>です。&lt;!-- raw HTML omitted -->
基本は「無線呼び出し」という、小型の受信機に対し遠隔から合図を送る汎用的な仕組みであったものが発達し、報知局から受信専用の携帯機器のベルを鳴らすことができるようになりました。これがいわゆる「ポケベル」のはじまりです。その後、公衆電話から数字を送ったり、2つの数字の組み合わせで文字を表現する「2タッチ入力」で文字列を送ることができるようになったりして、今の30代〜40代が記憶に残すところのポケベルとなりました。&lt;/p>
&lt;p>参考：&lt;a href="https://ja.wikipedia.org/wiki/%E7%84%A1%E7%B7%9A%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97">無線呼び出し - Wikipedia&lt;/a>&lt;/p>
&lt;p>さて、仕組みはわかったものの、現代で手軽に扱える技術で、ハードウェア・ソフトウェア・通信方法をどのようにしたらうまく作れるでしょうか。&lt;/p>
&lt;h2 id="heading-1">作ってみた&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>説明が複雑になりそうなので先に作りました（結論）&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>送信側である公衆電話も作りました。こちらはWeb上で動作します。&lt;/p>
&lt;h3 id="heading-2">ポケベル側&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ポケベル側は、&lt;/p>
&lt;ol>
&lt;li>レトロ感のあるディスプレイ&lt;/li>
&lt;li>安っぽい音のするブザー&lt;/li>
&lt;li>速いけど確実に届くかは無保証な通信プロトコル&lt;/li>
&lt;/ol>
&lt;p>の3点が課題でした。&lt;/p>
&lt;p>まず最初に、ハードウェア上でLinuxが動作するなら開発も比較的やりやすいので、Raspberry Pi 3 B+ を製作のベースに選択しました。&lt;!-- raw HTML omitted -->
次に、1.については、秋葉原でよく売られているのを見かける「16文字×2行」のディスプレイ（1580円）を使いました。しかしながら時代に即して、液晶ではなく有機ELであるところがちょっとナウいですね（死語）。&lt;!-- raw HTML omitted -->
2.も、秋葉原でよく見る圧電ブザー（50円）を採用して音のチープ感を重視しました。&lt;!-- raw HTML omitted -->
3.は、P2PでUDP伝送を行えばそれっぽくなりそうですが、そのままだと難しいので、NTTコミュニケーションズの提供する&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>を利用したWebRTC通信を採用することにしました。これについては後述します。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="heading-3">公衆電話側&lt;/h3>
&lt;p>公衆電話は、実機を使おうとすると設置場所を探さなければいけないのと、ハードウェアを作るのが大変そうだったので、Webで実装しました。&lt;!-- raw HTML omitted -->
以下より誰でも利用することができます。&lt;/p>
&lt;p>&lt;a href="https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY">PayPhone for SkyWay PocketBell&lt;/a>&lt;/p>
&lt;p>往年のプッシュホンのDTMF音も再現しています。&lt;!-- raw HTML omitted -->
これ単体でも2タッチ入力（ポケベル打ち）が体験できますので、ぜひ触ってみてください。&lt;/p>
&lt;h2 id="heading-4">ポケベルがさわれそうな世代を探そう&lt;/h2>
&lt;p>ネットから情報をできるだけ収集してとりあえず作ってみたものの、同じように作っている事例がまず存在せず、かつてのポケベルをどれだけ再現できているのかまったく自信がありません。&lt;!-- raw HTML omitted -->
そこで、実際にポケベルを所持していた世代の方に見ていただくべく、&lt;a href="https://iotlt.connpass.com/event/118404/">IoTLT大阪(Vol.10)&lt;/a>でこのポケベルについて発表しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>当日の参加者は50人前後。&lt;!-- raw HTML omitted -->
ここで「実際にポケベルを使っていた方はどれぐらいいらっしゃいますか？」と聞いてみたところ……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>写真幅に収まりきらなかったのですが、およそ5人〜10人の方に挙手いただきました！&lt;!-- raw HTML omitted -->
IoTLTは勉強会としては年齢層が若めの部類ではないかと考えているのですが、1割ほどの方が実際にご使用されていたとのこと。今回はポケベル初出のため、できれば今後の勉強会でも調査していきたいと思っております！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>発表の最後に、「実際に利用されていた方、触ってみたい方は懇親会で僕のところにお越しください」と申し上げたところ、多くの人が見に来てくださいました。 &lt;del>おっさんホイホイとはこのことか&lt;/del>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>「公衆電話のデザインが地味にリアル！」&lt;/strong>　と、ツボにはまっている方が多かったです。&lt;/p>
&lt;p>「これ（公衆電話）触ってもいいんですか？」「どうぞどうぞ」と、実際に触っていただいたところ、「もう忘れたよ〜〜」と言いつつも「2タッチ入力」を軽々こなせた方が3名ほどいらっしゃいました。&lt;!-- raw HTML omitted -->
いまだにブラインドでポケベル打てる（人生の）先輩方、おそるべしです……。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>メッセージ、ちゃんと当時と同じように打てますね！！　と絶賛いただけたので見てみると……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>これはリア充しとったやつやな……&lt;/strong>&lt;/p>
&lt;p>「アイシテル」は、2タッチ入力では「1112324493」と打ちますが、当時はド定番のメッセージだったそうです。文字が送れるようになる前の数字送信だけだったときには、語呂合わせで「114106」などとも送っていたんだとか。&lt;!-- raw HTML omitted -->
その他、お話を伺ったところによると&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>公衆電話は時間課金なので、10円でメッセージを送るには、時間内に早打ちをする必要があった。&lt;/li>
&lt;li>いつも20円使ってたけど、10円で打てる人がいて、神のように崇められていた。&lt;/li>
&lt;li>「88」と打てばハートの絵文字が出るのは当たり前（ドコモのポケベルがそうなっていたらしいです）。&lt;/li>
&lt;/ul>
&lt;p>などの思い出があったそうです。&lt;/p>
&lt;p>今も「LINEの既読無視」のように、通信手段の特性に基づいた独特の「あるある」が存在しますが、それは四半世紀前でも変わらなかったんですねえ……。&lt;/p>
&lt;h2 id="heading-5">みなさんもポケベル体験してみよう！&lt;/h2>
&lt;p>さてそんな手作りのポケベルですが、送信側の公衆電話はWebで実装されているため、 &lt;strong>ブラウザで実際にポケベル打ちを試していただくことが可能&lt;/strong>です！&lt;!-- raw HTML omitted -->
先ほど紹介させていただいたページにぜひアクセスしてみてください。&lt;!-- raw HTML omitted -->
Google Chromeでの動作のみ確認しています。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a href="https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY">PayPhone for SkyWay PocketBell&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まずコイン投入口をクリックすると、液晶部分に「TEST」という表示が出ることを確認してください。これで、実際の受信端末がなくても、打ったメッセージをブラウザで確認することができるようになります。&lt;!-- raw HTML omitted -->
次に、数字ボタンで「&lt;em>2&lt;/em>2」と打ち込みます。これはフリーメッセージの入力を開始するコマンドのようなものです。これが打てたら、以下のページで紹介されているフリーワードの表を見ながら、数字2つずつ打ち込んでゆきます。&lt;/p>
&lt;p>&lt;a href="http://www.kerokero.net/makosuke/pbcode/docomo.htm">Tele-Call page / DoCoMo&lt;/a>&lt;/p>
&lt;p>表の縦列数字が1つめ、横列数字が2つめです。例えば「うに」と入力するときは、まず「13」次に「52」のように2つずつ打ちます。&lt;!-- raw HTML omitted -->
定番メッセージ「アイシテル」は「1112324493」と打つと表現することができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>メッセージが打ち込めたら、最後に「##」と入力し、受話器置きの部分をクリックして「終話」すると、ポップアップでメッセージが表示されます。
うまく入力できたでしょうか？&lt;/p>
&lt;h3 id="heading-6">公衆電話の通信について&lt;/h3>
&lt;p>このWeb公衆電話は、このままだと通信をしない「テストモード」で動作しますが、実際には&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>を利用したWebRTC通信に対応しています。執筆時点で、WebとRaspberry Piのような組み込み機器をP2Pでリアルタイムに、かつ簡単に繋ぐことのできるサービスはこれがほぼ唯一です。しかもSkyWayのコミュニティ版は完全無料で使うことができます。&lt;!-- raw HTML omitted -->
Webと組み込み機器を繋ぐのなら、以前まではWebSocketやMQTTを使うのが主でしたが、こちらは2者とも「サーバー対クライアント」の通信であり、バックエンドを準備するのが大変でした。&lt;!-- raw HTML omitted -->
このSkyWayが組み込みに対応したWebRTCエンジン「&lt;a href="https://support.skyway.io/hc/ja/articles/360008586334--SkyWay-WebRTC-Gateway-%E8%A9%A6%E9%A8%93%E6%8F%90%E4%BE%9B%E9%96%8B%E5%A7%8B">WebRTC Gateway&lt;/a>」を提供開始したことで、本来はWeb環境同士でしか成立しなかったWebRTC通信を、Raspberry Piのような低レベルのデバイスから直接的に接続させることが可能になりました。&lt;!-- raw HTML omitted -->
この記事で作ったポケベルは、実際にこれで文字列をWeb公衆電話からRaspberry Pi製のポケベルへと送信しています。&lt;/p>
&lt;h2 id="heading-7">ポケベル本体も、はんだづけなしで作れます&lt;/h2>
&lt;p>さて、ここまでモノが揃っているのなら、実際のハードウェアに文字列を送信してみたいな、と思われたことではないでしょうか。そこで、今回のポケベルは全てはんだづけを行っていますが、「Grove」と呼ばれる規格に対応したディスプレイやブザーを使うことで、一切はんだづけをせずに同じポケベルを作っていただける方法を準備しました！&lt;!-- raw HTML omitted -->
その詳細は次回の記事に書かせていただきますので、ご興味を持たれたかたはぜひ当ブログをチェックしておいてくださいね！&lt;/p></description></item><item><title>MPU9250で回転角度を検知する</title><link>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</guid><description>&lt;p>はじめまして。ライターとして起用していただきました、ありか(&lt;a href="https://twitter.com/hakase0617">@hakase0617&lt;/a>)です。&lt;/p>
&lt;p>秋田高専で高専ロボコンを5年間やっていました。
ロボコン界隈には卒業後も関わり続けているため、そういった若きエンジニアの手助けができたらと思っています！&lt;/p>
&lt;p>マネジメントや教育に興味があり、その一環でIoT、AIの勉強をしています。
将来的にはエンジニアを育成したり、一緒にお仕事ができたりしたら楽しそうだなって思います。&lt;/p>
&lt;h2 id="9">9軸センサとは&lt;/h2>
&lt;p>早速ですが、今日はMPU9250というセンサを紹介します。
これは「9軸センサ」と呼ばれるものです。&lt;/p>
&lt;p>え、9軸ってx,y,zとあとは何！？&lt;/p>
&lt;p>これは&lt;/p>
&lt;ul>
&lt;li>加速度センサ　x,y,z&lt;/li>
&lt;li>角速度センサ　x,y,z&lt;/li>
&lt;li>地磁気センサ　x,y,z&lt;/li>
&lt;/ul>
&lt;p>の3軸ずつ、合わせて9軸というものです。
まずは各センサの紹介からいきます。&lt;/p>
&lt;h2 id="heading">加速度センサとは&lt;/h2>
&lt;p>加速度とは、&lt;!-- raw HTML omitted -->「どのくらいの速度が変化しているか」という指標です。&lt;!-- raw HTML omitted -->
車を運転しているイメージをしてください。
アクセルを思いっきり踏んで、時速20km/hで走っていた車を時速60km/hまで加速させたとします。
この時、体は後ろに引っ張られる感じがします。
あの感じが加速度です。&lt;/p>
&lt;p>加速度センサでは、物が動いているかどうかということも検出できます。
加速度センサの応用例としてはカメラの手ぶれ補正やスマホの画面回転、ハードディスクの揺れ検知などが該当します。
ロボットの姿勢制御には欠かせない技術でもあります。&lt;/p>
&lt;h2 id="heading-1">角速度センサとは&lt;/h2>
&lt;p>角速度とは読んで字のごとく、回転角の速度です。
ものが回っている時の速さの単位に「回転数」（rpmなど）や周波数（Hzなど）がありますが、これらは「何回回ったか」を示す指標です。
&lt;!-- raw HTML omitted -->回っているものの「角度」に注目して速さを表す指標が角速度です。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="heading-2">地磁気センサとは&lt;/h2>
&lt;p>地磁気センサでは、磁力の強さを検知出来ます。
地球は大きな磁石ですが丸いので、地球上のどの位置にいるかで地磁気の強さは異なります。
そのため、&lt;!-- raw HTML omitted -->地磁気の強さやら向きやらを測定すると自分がいる位置が分かり、自分が向いている方角も分かるというものです。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="9-1">9軸センサで何が出来るか&lt;/h2>
&lt;p>さて、これら3つのセンサが合体した9軸センサで、何ができるのでしょうか？&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->角速度センサで「自分がどれだけ回ったのか」が分かります。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>しかし弱点があります。
角速度センサだけでは、今「動いている」のか「止まっている」のかは分かりません。
そこで加速度センサの出番です。加速度センサは上記状態を把握できます。
これらを合わせて「6軸センサ」と呼ぶのですが、&lt;!-- raw HTML omitted -->この6軸センサを使うと「回転角度」が分かります。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>じゃあ6軸でいいじゃん、と思ってしまいますが、6軸センサには弱点があります。
ずばり、「ドリフト」です。&lt;/p>
&lt;p>角速度センサは「積分方式」で回転角度を検出します。
どういうことかというと、「15度動いた」「20度動いた」「10度動いた」を合わせて「45度動いた」といった風に、足し算で算出します。
しかし、みんなの敵である「誤差」という概念がここで登場します。&lt;/p>
&lt;p>さっきの例で、毎回+1度の誤差が生じてしまうとします。
すると　16度+21度+11度＝48度　となり、誤差がどんどん大きくなっていきます。
つまり、試行回数（時間経過）とともに誤差が大きくなっていくではありませんか。&lt;/p>
&lt;p>これを解決するためには、別の方法で校正を行う必要があります。
そこで「地磁気センサ」を使います。&lt;/p>
&lt;p>地磁気センサは、簡単に言うと「方位磁針」です。そのため、北を向いたまま10分経とうが1時間経とうが、&lt;!-- raw HTML omitted -->地磁気センサは「北を向いている」という状態を教えてくれます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>まとめると、
　角速度センサ→何度回ったかが分かる
　加速度センサ→回ったかが分かる
　地磁気センサ→ドリフトを打ち消す
といった役割を持ち、回転を検知するセンサとなります。&lt;/p>
&lt;h2 id="heading-3">実際に使ってみよう&lt;/h2>
&lt;p>MPU9250を使って、実際に回転角度を測定してみましょう。
今回は開発環境にArduinoを選定しました。
ライブラリが公開されており、初心者である僕でもサクッと動作確認が可能な点に魅力を感じました。&lt;/p>
&lt;p>今回は入門として、角速度センサのみで回転角度を検出してみます。&lt;/p>
&lt;h2 id="heading-4">開発環境&lt;/h2>
&lt;ul>
&lt;li>OS:Windows10&lt;/li>
&lt;li>ArduinoIDE&lt;/li>
&lt;li>Arduino UNO&lt;/li>
&lt;li>MPU9250&lt;/li>
&lt;li>ジャンパワイヤ5本&lt;/li>
&lt;li>ブレッドボード&lt;/li>
&lt;/ul>
&lt;h2 id="heading-5">スケッチ&lt;/h2>
&lt;pre>&lt;code class="language-C:Gyro" data-lang="C:Gyro">#include &amp;lt;Wire.h&amp;gt;
#define FIL 0.9 //フィルタ
#define AVE 100 //測定回数
#define GYRO 30 //ドリフト許容値
int emp[6] = {};
int data = 0; //生データ格納 1から順に加速度xyz角速度xyz
long datasum = 0; //合計データ格納　平均算出用
int th = 0; //閾値
long integral = 0; //積分値
int degree; //回転角度
int rock; //ロック機構により導かれた初期値
char input;
void setup() {
Wire.begin(); Serial.begin(115200); Wire.begin(0x68);
Wire.beginTransmission(0x68); Wire.write(0x6B); Wire.write(0x00); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1C); Wire.write(0x10); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1B); Wire.write(0x08); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1A); Wire.write(0x05); Wire.endTransmission();
Serial.print(&amp;quot;*****************\nCalibrating now\nplease turn once and press 'f'\n&amp;quot;);
while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == 'f') {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
}
void loop() {
reading();
degree = abs(integral / rock);
Serial.println(degree);
datasum = 0;
}
void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code>&lt;/pre>&lt;h2 id="arduino">Arduinoとの接続&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Arduino&lt;/th>
&lt;th align="right">MPU9250&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">5V&lt;/td>
&lt;td align="right">VCC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">GND&lt;/td>
&lt;td align="right">GND&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A2&lt;/td>
&lt;td align="right">INT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A4&lt;/td>
&lt;td align="right">SDA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A5&lt;/td>
&lt;td align="right">SCL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="heading-6">実物&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-7">スケッチ簡易解説&lt;/h2>
&lt;p>今回は角速度センサのｚ軸のみを使用します。
ｚ軸、つまり地面と鉛直な方向の回転が分かる、早い話が自分がどれだけ回ったかが分かります。&lt;/p>
&lt;p>まず、角速度センサを使うにあたって、センサから返ってくる値を調べる必要があります。
センサは「何度回ったよ」とは教えてくれません。
「4253」「71469」みたいな無機質な値を教えてくれます。
そのため、その値がいくつで360度に相当するのかを確認する必要があります。&lt;/p>
&lt;p>どうすればいいのか、答えは「360度回せばいい」のです。そのままです。&lt;/p>
&lt;p>今回はArduinoを起動した際に、まず1回転して値を取得して、それから角度検出をする、というスケッチを作りました。&lt;/p>
&lt;pre>&lt;code class="language-C:while" data-lang="C:while"> while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == 'f') {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
&lt;/code>&lt;/pre>&lt;p>reading()関数の中で実際に値を取得するのですが、1回転した合図として「Arduinoのシリアル通信で'f'を送ってあげた時にwhile()から抜けて角度検出モードに移行します。&lt;/p>
&lt;pre>&lt;code class="language-C:reading" data-lang="C:reading">void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code>&lt;/pre>&lt;p>そのreading()の中では、平均を取るためにAVEで指定された回数値を格納し続けています。
emp[]で色々格納していますが、上から
加速度ｘ軸、ｙ軸、ｚ軸
温度
角速度ｘ軸、ｙ軸、ｚ軸
という風に格納されていきます。そのため今回は角速度ｚ軸のみを取り出すためこういった書き方です。&lt;/p>
&lt;h2 id="heading-8">動かしてみよう&lt;/h2>
&lt;p>リード線を数本接続しただけで動作確認が出来るなんて、とっても楽ですね！
早速動かしてみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>できました！
角度が表示されています。&lt;/p>
&lt;h2 id="heading-9">何に使えるの？&lt;/h2>
&lt;p>今回注目したのは、自律移動ロボットの位置制御です。
ロボットコンテストなどでは、コントローラなどを用いず自動でロボットが移動することを求められるケースが多々あります。
その自動ロボットの位置制御には、どのような方法が用いられているのでしょうか。&lt;/p>
&lt;p>おそらく一般的なものは、モータにロータリエンコーダなどを取り付けて
「モータがどのくらい回ったか」
を検出し、位置を割り出す方法だと思います。&lt;/p>
&lt;p>ですが、この方法には弱点があります。
例えば、移動するフィールドが平らではなかったり、滑りやすい障害物（落ち葉など）があったり、タイヤが走行中に滑ったりといった「タイヤとフィールドの関係」で誤差が生じてしまいます。&lt;/p>
&lt;p>この誤差をなんとかしたい！
そんな時に便利なのがこの9軸センサです。&lt;/p>
&lt;p>自身がどれくらい動いたか、どれくらい回ったかが分かるこのセンサがあれば、たとえタイヤが空回りしてしまっても、「今いる位置」を知ることが可能なのです！&lt;/p>
&lt;h2 id="heading-10">最後に&lt;/h2>
&lt;p>今回は9軸センサのうちたった1軸しか使っていませんが、回転を検出することができました。
より高度なスケッチを作ることでより高度な測定が可能になるため、これからも勉強を続けていきたいです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;/blockquote></description></item><item><title>初めてのArduino〜トレーニングマシンを作る編〜</title><link>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</link><pubDate>Mon, 11 Mar 2019 23:00:00 +0900</pubDate><guid>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</guid><description>&lt;p>初めまして、今月からdotstudioでお世話になる&lt;a href="https://dotstud.io/members/jikyuryoku">自給力&lt;/a>です。&lt;/p>
&lt;p>プログラミングスクール卒業後でフラフラしてたところを、のびすけしゃちょーから「記事を書いてみない？」と誘っていただきました。これから、バシバシ記事を書いていきますのでよろしくお願いします。&lt;/p>
&lt;p>&lt;strong>コードの書き方や手順で変なところあるかもしれませんが、許してください……！&lt;/strong>&lt;/p>
&lt;p>僕はフィットネス業界での事業を考えています！せっかくなので、フィットネスに絡めて何か作って、記事にしていきたいと思います。プログラミングはかじってはいるのですが、IoTのコーディングや電子工作は初めてなので、&lt;!-- raw HTML omitted -->初心者さん向けに自分の失敗の工程も含めてお伝えできればと思ってます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>そして、まず作ろうと決意したモノは……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>意外とスクワットとかダンベルのトレーニングしている時って回数数えるの面倒なんですよね。&lt;/p>
&lt;p>そこで、勝手に回数数えてくれるサービスがあればテレビ見ながらでも回数に気を取られずにトレーニングができる！そんな思いから、サービス作ってみようと思ったわけです。&lt;/p>
&lt;h2 id="heading">のびすけしゃちょーに相談してみる&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code> なるほど！！面白そうですね！！！！じゃあ加速度センサ使ってみたいです！！！&amp;lt;br&amp;gt;
（理由:かっこいいから）
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そんなこんなで、iot初心者の僕は**「磁気スイッチ」を使ったカウントマシン**を作ることに決まりました！！&lt;/p>
&lt;h2 id="heading-1">まずは準備&lt;/h2>
&lt;p>今回使うのはArduino（写真左）と磁気スイッチ（写真真ん中と右）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず、Arduinoにコードを書き込むためにArduino IDEをインストールしましょう。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/docs/arduinoide-setup/?fbclid=IwAR3BB5HrFh-K6cMGcnGl4rjHIA4u2OJYDDlNjLmN5IrprOn8n3zY6g-Kp8s">こちらのドキュメント&lt;/a>の通りにやれば簡単にインストールできます。&lt;/p>
&lt;p>そして、磁気スイッチの使い方は&lt;a href="http://wiki.seeedstudio.com/Grove-Magnetic_Switch/">こちら&lt;/a>を参考にしました！&lt;/p>
&lt;p>サイト内は英語で書かれていますが、ここでやることしては&lt;strong>ArduinoのD２のピンに刺し、写真のように組み立てる&lt;/strong>のだそうです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-2">さぁ、数を数えよう&lt;/h2>
&lt;p>「数なんてすぐに数えられるわい」っと思ったのも束の間……。&lt;/p>
&lt;p>**「あれ？何を数えるんだ？？？」**と、なんとも初歩的な壁にぶつかりました。&lt;/p>
&lt;p>ダンベルを動かした回数を頭の中で数えるのは簡単ですが、機械に数えさせるのは訳が違う。まずは何を数えるか考えなければならないのです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「フラグ」が何を指しているのかが分からなかったので、**「Arduino フラグ」**でググってみました。どうやらセンサの状態を変数に入れて管理することだということが分かりました。&lt;/p>
&lt;p>（参考１）&lt;a href="http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html">アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a>&lt;/p>
&lt;p>次に、「Arduino 数える」でググり、「変数でどう数えるのか」について、以下の記事を参考にしました。&lt;/p>
&lt;p>（参考２）&lt;a href="https://n.mtng.org/ele/arduino/samples/variable2.html">変数で回数を数える&lt;/a>&lt;/p>
&lt;p>やることとしては、&lt;/p>
&lt;ol>
&lt;li>センサの状態をフラグ（変数）として認識させる&lt;/li>
&lt;li>フラグがついてる状態から、なくなった状態に「+１」していく&lt;/li>
&lt;li>1と2を繰り返す&lt;/li>
&lt;/ol>
&lt;p>なるほどなるほど。だいたい道筋が見えてきたので、作っていきます！&lt;/p>
&lt;h2 id="heading-3">よし、作ろう&lt;/h2>
&lt;p>（参考１）&lt;a href="http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html">アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a>からスイッチのon/offで数を数えるためコードがあり、アレンジをしてみました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>必要なのは**「グローバル変数の定義」「フラグの定義」「フラグからカウントする際のコード」の３つ**。&lt;/p>
&lt;p>まずは**「グローバル変数の定義」**です。&lt;/p>
&lt;pre>&lt;code>int G_state = FLG_OFF;
&lt;/code>&lt;/pre>&lt;p>簡単ですね。&lt;/p>
&lt;p>次に**「フラグの定義」**&lt;/p>
&lt;p>フラグ立っている時は「1」、立っていない時は「0」と教えてあげます。&lt;/p>
&lt;pre>&lt;code>const int FLG_ON = 1;
const int FLG_OFF = 0;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>楽勝！&lt;/strong>&lt;/p>
&lt;p>それでは、最後に**「フラグからカウントする際のコード」**を書いてみましょう。&lt;/p>
&lt;p>Void setup()の中に、&lt;/p>
&lt;pre>&lt;code>Serial.begin(115200);
&lt;/code>&lt;/pre>&lt;p>を書き、
void loop()の中に、&lt;/p>
&lt;pre>&lt;code> int val = digitalRead(MAGNECTIC_SWITCH);
&lt;/code>&lt;/pre>&lt;p>を書きます。&lt;/p>
&lt;p>これはつまり、&lt;strong>センサで取得した値を変数valに入れている&lt;/strong>わけです。&lt;/p>
&lt;p>そして&lt;/p>
&lt;pre>&lt;code>if(G_state == FLG_OFF){
count += 1;
}
Serial.println(count);
&lt;/code>&lt;/pre>&lt;p>と書き、コンパイルして、書き込みをしていきます。&lt;/p>
&lt;p>ちょっとここでケアレスミスがあり、書き込みの際にエラーが何回か出ましたが、難なく解消。&lt;/p>
&lt;p>よし！これで動く！&lt;/p>
&lt;p>ツールの中のシリアルモニタを見てみましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>な、なにーーー！！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>なんか勝手に数が増えてる！！！！このままじゃ数字が止まらなくなる！！！（パニック状態）&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>つまり、コードを日本語訳にすると、**「G_stateの中のフラグがないときは、足していく」**という意味。フラグが無い状態では+1され続けてしまうんです。そりゃうまくイカンわ！！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>のびさんのご指摘の通り、&lt;strong>elseの中にif文を書いてフラグがonだったら1カウントをするコード&lt;/strong>に書き換えました。&lt;/p>
&lt;p>よし！これでどうだ！！！書き込み開始！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-4">ちゃんと数えてくれるか検証&lt;/h2>
&lt;p>磁石をセンサに近づけて、、&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>離すと、、&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そしてシリアルモニタを見ると&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>見事成功です。&lt;/p>
&lt;p>いやぁ、一口に数を数えるとは言っても奥が深いですね！今日のところはこの辺で終わりたいと思います。&lt;/p>
&lt;p>続編をお楽しみに……！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【どんと来い、列車遅延】 勤怠メールをサクッと送れるオレオレツールを作ってみた</title><link>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</link><pubDate>Wed, 13 Feb 2019 12:50:00 +0900</pubDate><guid>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/pokio">ポキオ&lt;/a>です。&lt;/p>
&lt;p>急いでるときに限って、いつも使ってる通勤列車が遅延してたりして、あたふたすることってありますよね？&lt;/p>
&lt;p>そんなときに、勤務先などにサクッとメールを送れるオレオレツールを作ってみました。&lt;/p>
&lt;h2 id="node-red">Node-REDで簡単に作ってみる&lt;/h2>
&lt;p>「ツールを作る」と聞くと、なんだか難しそうな雰囲気がしますよね？&lt;/p>
&lt;p>でも、&lt;strong>Node-RED&lt;/strong>を使うとちょっとのコーディングで簡単にツールが作れてしまいます！&lt;a href="https://dotstud.io/blog/nefry-servo-handson-takudooon/#node-red-mqtt%E3%81%A7%E3%82%B5%E3%83%BC%E3%83%9C%E3%83%A2%E3%83%BC%E3%82%BF%E3%82%92%E9%81%A0%E9%9A%94%E5%88%B6%E5%BE%A1">たくろーどんさんの記事&lt;/a>でもNode-REDが使われていましたが、&lt;strong>実行したい処理をフローチャートのように、ノードとノードをつなぐことによって設計できるツール&lt;/strong>になっています。&lt;/p>
&lt;p>Node-REDはその名の通り、&lt;strong>Node.js&lt;/strong>上で動作するツールです。普段使っているPCなどNode.jsが動作している環境であればNode−REDを動かすことができますが、今回は外出先からでもアクセスできるツールを簡単に作成したかったので、&lt;!-- raw HTML omitted -->Node-REDをサービスとして提供している&lt;strong>enebular&lt;/strong>&lt;!-- raw HTML omitted -->を使ってみようと思います。&lt;/p>
&lt;h2 id="node-red-1">Node-REDでツールを作ってみる&lt;/h2>
&lt;p>はじめに、今回作ったツールがこちら。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このツールの機能は、以下の3つです。&lt;/p>
&lt;ul>
&lt;li>外出先からでもアクセスできるWebページを作る（念の為、BASIC認証を設けておく）&lt;/li>
&lt;li>そのページ上で勤怠メールの文言をプリセットから選べるようにして、特定の宛先にメール送信できるようにする&lt;/li>
&lt;li>**「本当に電車遅延が原因で遅刻するの？」**と言われないように、京急の遅延証明書ページで発行されている遅延証明書を表示して、メールに遅延証明書へのリンクを貼れるようにする&lt;/li>
&lt;/ul>
&lt;p>遅延状況は例によって&lt;strong>京浜急行&lt;/strong>のWebページ上の情報を取得しています。また、不特定多数の人が勝手にこのツールを使ってしまわないように、BASIC認証を設けてアクセスを制限しています。&lt;/p>
&lt;h2 id="node-redweb">Node-REDでWebページを作る&lt;/h2>
&lt;p>Node-REDで用意されているノードのなかに、HTTPリクエストを受ける&lt;strong>&lt;code>HTTP In&lt;/code>&lt;/strong>ノードと、それに対するレスポンスを返す&lt;strong>&lt;code>HTTP Response&lt;/code>&lt;/strong>ノードがあります。&lt;/p>
&lt;p>この&lt;code>HTTP In&lt;/code>ノードを作るとHTTPのエンドポイントができます。このノードと&lt;code>HTTP Response&lt;/code>ノードを下の絵のようにつなぎ、レスポンスとなるソースを返すようにすれば、Webページができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>上の例では、静的な&lt;code>Hello, world!&lt;/code>という文字列を返すだけですが、&lt;strong>&lt;code>HTTP Response&lt;/code>&lt;/strong>ノードで返す情報を動的に変化させたり、Webページ上で動作させるスクリプトを記述してレスポンスとして返せば、よりリッチなWebページをNode-REDで作成することができます。
&lt;/p>
&lt;p>次にBASIC認証ですが、Node-REDに対して追加でモジュールをインストールすることで、簡単に機能を追加することができます。&lt;/p>
&lt;p>Node-REDの設定メニューから、[Settings] &amp;gt; [Palette] &amp;gt; [Install]と進み、&lt;strong>&lt;code>node-red-contrib-httpauth&lt;/code>&lt;/strong>を探します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>これをインストールすることで、BASIC認証が行えるノードを追加できます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>使い方は至ってシンプルで、先程の&lt;code>HTTP In&lt;/code>ノードの後ろにBASIC認証のノードをつけて、BASIC認証で使うユーザー名とパスワードをノードの設定で指定するだけです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実際に、この状態でエンドポイントにアクセスすると、確かにBASIC認証がワークしています。&lt;/p>
&lt;h2 id="heading">勤怠メールを送れるようにする&lt;/h2>
&lt;p>ここまでで、&lt;code>Hello, world!&lt;/code>が表示できるWebページができました。ここからは&lt;!-- raw HTML omitted -->&lt;code>HTTP Response&lt;/code>ノードで返すHTMLをよしなに編集して、勤怠メールを作成できるようにします。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>具体的には、次のような機能をHTMLやJavaScriptで記述して、それをレスポンスで返すようにしました。&lt;/p>
&lt;ul>
&lt;li>プルダウンメニューで遅刻する理由を選択できるようにする&lt;/li>
&lt;li>選択した理由に応じて、メールの本文を変更する&lt;/li>
&lt;li>&lt;strong>mailtoスキーム&lt;/strong>を使って、メーラーを起動してメールを送れるようにする&lt;/li>
&lt;/ul>
&lt;p>遅刻の理由も、必ずしも電車遅延だけではないので、体調不良や保育園関係の理由も選択できるようにしました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>遅刻の理由を選択すると、メール本文が変わるようになっています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>&lt;code>勤怠メールを送る&lt;/code>&lt;/strong>を押すとメーラーが起動し、ツールで指定した文言をそのままメールとして送ることができます。&lt;/p>
&lt;h2 id="heading-1">遅延証明書情報を取得する&lt;/h2>
&lt;p>ツール上で表示する京浜急行の運行情報は、&lt;a href="https://delay.keikyu.co.jp/delay/">京急線遅延証明書の発行&lt;/a>のページから取得します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>その日に発行されている遅延証明書のリスト化し、その遅延証明書ページへのリンクをメール本文に貼り付けるか選択できるようになっています。&lt;/p>
&lt;p>ただし、下記のような問題があるため、泥臭いワークアラウンドを入れています。&lt;/p>
&lt;ul>
&lt;li>遅延証明書ページへのリンクのアドレスに、mailtoスキームでは扱えない文字が含まれているため、&lt;a href="https://is.gd/">外部のURL短縮サービス「is.gd」&lt;/a>を使ってアドレスを短く変換している&lt;/li>
&lt;li>URL短縮のWebAPIを叩こうとするとCORSポリシーに引っかかったため、URL短縮のために同じドメインでエンドポイントを作成し、それ経由でアドレスの変換を行う&lt;/li>
&lt;/ul>
&lt;h2 id="heading-2">実際のフローはこちら&lt;/h2>
&lt;p>Node-REDで作成したフローを、エクスポートしたものはこちらです。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JSON" data-lang="JSON">[{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;tab&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;label&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Flow 1&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;disabled&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;a45bf2b.b54621&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http request&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;遅延証明書ページ取得&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ret&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;txt&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;https://delay.keikyu.co.jp/delay/&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tls&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;89f0f7a0.a8bda8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;3a7ae4dc.fc9f5c&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;active&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tosidebar&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;console&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tostatus&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;complete&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;delayData&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">600&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;89f0f7a0.a8bda8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;情報をパース&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let table = msg.payload.split(&amp;#39;&amp;lt;tbody&amp;gt;&amp;#39;)[1];\ntable = table.split(&amp;#39;&amp;lt;/tbody&amp;gt;&amp;#39;)[0];\n\nlet rows = table.split(&amp;#39;\\n&amp;#39;).join(&amp;#39;&amp;#39;);\nrows = rows.split(&amp;#39;&amp;lt;tr&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;/tr&amp;gt;&amp;#39;);\n\nlet data = {};\nlet dateOffset = 0;\ndata.date = rows[0 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;)[0].replace(&amp;#39;&amp;lt;tr style=\&amp;#34;background-color:#ADD8E6;\&amp;#34;&amp;gt;&amp;#39;,&amp;#39;&amp;#39;).replace(&amp;#39;&amp;lt;td rowspan=3&amp;gt;&amp;#39;,&amp;#39;&amp;#39;).replace(&amp;#39;&amp;lt;br/&amp;gt;&amp;#39;,&amp;#39;&amp;#39;);\n\nlet morningData = rows[0 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet dayData = rows[1 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet nightData = rows[2 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet dataTitles = [&amp;#39;品川～横浜：上り&amp;#39;,&amp;#39;品川～横浜：下り&amp;#39;,&amp;#39;横浜以南：上り&amp;#39;,&amp;#39;横浜以南：下り&amp;#39;,&amp;#39;空港線内：上り&amp;#39;,&amp;#39;空港線内：下り&amp;#39;];\n\ndata.morningTitle = morningData[0];\ndata.dayTitle = dayData[0];\ndata.nightTitle = nightData[0];\n\nmorningData = morningData.slice(1);\ndayData = dayData.slice(1);\nnightData = nightData.slice(1);\n\ndata.morningData = [];\ndata.dayData = [];\ndata.nightData = [];\ndata.allData = [];\n\nfor(let i = 0; i &amp;lt; 6; i++){\n if(morningData[i] !== &amp;#39;-&amp;#39;){\n let detail = morningData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + morningData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.morningData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.morningTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n \n if(dayData[i] !== &amp;#39;-&amp;#39;){\n let detail = dayData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + dayData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.dayData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.dayTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n \n if(nightData[i] !== &amp;#39;-&amp;#39;){\n let detail = nightData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + nightData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.nightData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.nightTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n}\n\nmsg.delayData = data;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;e0512d8a.0fe7f&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;3a7ae4dc.fc9f5c&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;5c37249e.aecf1c&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http in&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPリクエスト&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;upload&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;swaggerDoc&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">120&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;b83cd390.27959&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;bbc86a41.f453e8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http response&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPレスポンス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;statusCode&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;headers&amp;#34;&lt;/span>:{},&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">610&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;e0512d8a.0fe7f&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;パースした情報を整形&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let delayBody = &amp;#39;&amp;#39;;\n\ndelayBody += &amp;#39;&amp;lt;h1&amp;gt;&amp;#39; + msg.delayData.date + &amp;#39;&amp;lt;/h1&amp;gt;\\n&amp;#39;;\n\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.morningTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.morningData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.morningData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.dayTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.dayData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.dayData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.nightTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.nightData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.nightData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\nmsg.delayBody = delayBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">260&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;5f89b7b8.249788&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;6e8b7f2.3c2238&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;ページの要素を結合&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let bodyHeader = &amp;#39;&amp;lt;html&amp;gt;&amp;lt;header&amp;gt;&amp;lt;meta name=\&amp;#34;viewport\&amp;#34; content=\&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no\&amp;#34;&amp;gt;&amp;lt;link rel=\&amp;#34;stylesheet\&amp;#34; href=\&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\&amp;#34; integrity=\&amp;#34;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/header&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div class=\&amp;#34;container\&amp;#34;&amp;gt;&amp;lt;div class=\&amp;#34;row\&amp;#34;&amp;gt;&amp;lt;div class=\&amp;#34;col-sm my-2\&amp;#34;&amp;gt;&amp;#39;;\nlet bootstrap = &amp;#39;&amp;lt;script src=\&amp;#34;https://code.jquery.com/jquery-3.3.1.slim.min.js\&amp;#34; integrity=\&amp;#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\&amp;#34; integrity=\&amp;#34;sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\&amp;#34; integrity=\&amp;#34;sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;#39;;\nlet bodyFooter = &amp;#39;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;;\n\nmsg.payload = bodyHeader + msg.delayBody + msg.mailBody + msg.scriptBody + bootstrap + bodyFooter;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">380&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;bbc86a41.f453e8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;5f89b7b8.249788&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;メール送信部分&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let mailBody = &amp;#39;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;h1&amp;gt;勤怠メールを作成&amp;lt;/h1&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;reason\&amp;#34;&amp;gt;遅延理由を選択する&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;select class=\&amp;#34;custom-select\&amp;#34; name=\&amp;#34;reason\&amp;#34; id=\&amp;#34;reason\&amp;#34; onchange=\&amp;#34;updateMessage()\&amp;#34;&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;電車遅延のため\&amp;#34; selected&amp;gt;電車遅延&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;腹痛のため\&amp;#34;&amp;gt;体調不良（腹痛）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;頭痛のため\&amp;#34;&amp;gt;体調不良（頭痛）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;体調不良のため\&amp;#34;&amp;gt;体調不良（理由なし）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;保育園登園に時間がかかったため\&amp;#34;&amp;gt;保育園関係&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;家事都合のため\&amp;#34;&amp;gt;家事都合&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;私用のため\&amp;#34;&amp;gt;私用&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;/select&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;chien\&amp;#34;&amp;gt;遅延証明書へのリンクを貼る&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;select class=\&amp;#34;custom-select\&amp;#34; name=\&amp;#34;chien\&amp;#34; id=\&amp;#34;chien\&amp;#34; onchange=\&amp;#34;updateMessage()\&amp;#34;&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;\&amp;#34; selected&amp;gt;なし&amp;lt;/option&amp;gt;&amp;#39;;\n\nmsg.delayData.allData.forEach(function(value){\n mailBody += &amp;#39;&amp;lt;option value=\&amp;#34;&amp;#39; + value.link + &amp;#39;\&amp;#34;&amp;gt;&amp;#39; + value.title + &amp;#39;&amp;lt;/option&amp;gt;&amp;#39;;\n});\n\nmailBody += &amp;#39;&amp;lt;/select&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;message\&amp;#34;&amp;gt;メール本文&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;textarea class=\&amp;#34;form-control\&amp;#34; id=\&amp;#34;message\&amp;#34; rows=\&amp;#34;5\&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;br&amp;gt;&amp;lt;button type=\&amp;#34;button\&amp;#34; class=\&amp;#34;btn btn-primary btn-block\&amp;#34; onclick=\&amp;#34;sendMessage()\&amp;#34;&amp;gt;勤怠メールを送る&amp;lt;/button&amp;gt;&amp;#39;;\n\nmsg.mailBody = mailBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">300&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;a41aa11e.86e04&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;a41aa11e.86e04&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;スクリプト部分&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let name = global.get(&amp;#39;name&amp;#39;);\nlet address = global.get(&amp;#39;address&amp;#39;);\n\nlet scriptBody = &amp;#39;&amp;lt;script&amp;gt;&amp;#39;;\nscriptBody += &amp;#39;let reasonSelect = document.getElementById(\&amp;#34;reason\&amp;#34;); let chienSelect = document.getElementById(\&amp;#34;chien\&amp;#34;); let textArea = document.getElementById(\&amp;#34;message\&amp;#34;); function updateMessage() { let reasonIndex = reasonSelect.selectedIndex; let chienIndex = chienSelect.selectedIndex; let message = \&amp;#34;\&amp;#34;; message += \&amp;#34;&amp;#39; + name + &amp;#39;です。\\\\n\\\\n\&amp;#34;; message += \&amp;#34;大変申し訳ありませんが、\&amp;#34;; message += reasonSelect.options[reasonIndex].value; message += \&amp;#34;出社が遅れます。\\\\n\&amp;#34;; message += \&amp;#34;何卒宜しくお願いします。\&amp;#34;; if (!chienSelect.options[chienIndex].value) { textArea.value = message; return; } let request = new XMLHttpRequest(); request.onload = function () { message += \&amp;#34;\\\\n\\\\n遅延証明書はこちらです。\\\\n\&amp;#34;; message += request.responseText; textArea.value = message; }; request.open(\&amp;#34;GET\&amp;#34;, \&amp;#34;./encode/\&amp;#34; + encodeURIComponent(chienSelect.options[chienIndex].value.trim()), false, \&amp;#34;USER_NAME\&amp;#34;, \&amp;#34;PASSWORD\&amp;#34;); request.send(); } function sendMessage() { window.open(\&amp;#34;mailto:&amp;#39; + address + &amp;#39;?body=\&amp;#34; + encodeURIComponent(textArea.value)); } updateMessage();&amp;#39;;\nscriptBody += &amp;#39;&amp;lt;/script&amp;gt;&amp;#39;;\n\nmsg.scriptBody = scriptBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;6e8b7f2.3c2238&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;867b9e9b.bb5b8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http in&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPリクエスト&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;/encode/:url&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;upload&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;swaggerDoc&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">120&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;eb246d76.1afeb&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;fdb9da8c.f0ebf8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;55421d41.0dc1b4&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http response&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPレスポンス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;statusCode&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;headers&amp;#34;&lt;/span>:{},&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">610&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;303db0f1.b72bf&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http request&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;APIを叩く&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ret&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;txt&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tls&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">330&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">520&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;55421d41.0dc1b4&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;808e61ff.edc38&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;URL変換&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;msg.url = &amp;#39;https://is.gd/create.php?format=simple&amp;amp;url=&amp;#39; + encodeURIComponent(msg.req.params.url);\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">320&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;303db0f1.b72bf&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;eb246d76.1afeb&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;active&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tosidebar&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;console&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tostatus&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;complete&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">310&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">560&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b475750f.2c9468&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;ページへのアクセス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">130&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">140&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b61cb0ab.67446&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;URL短縮&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">440&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;892cd0e6.0c4ae&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;定数の宣言&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">40&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;92da441f.e87958&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;inject&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;起動時&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;payload&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;payloadType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;date&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;repeat&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;crontab&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;once&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;onceDelay&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0.1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;7e9e582f.c0d258&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7e9e582f.c0d258&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;差出人、宛先の設定&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;global.set(&amp;#39;name&amp;#39;, &amp;#39;ポキオ&amp;#39;);\nglobal.set(&amp;#39;address&amp;#39;, &amp;#39;example@example.com&amp;#39;);\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b83cd390.27959&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;node-red-contrib-httpauth&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;BASIC認証&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;file&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;cred&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;authType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Basic&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;realm&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;USER_NAME&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;password&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;PASSWORD&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;hashed&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">110&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;a45bf2b.b54621&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;fdb9da8c.f0ebf8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;node-red-contrib-httpauth&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;BASIC認証&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;file&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;cred&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;authType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Basic&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;realm&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;USER_NAME&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;password&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;PASSWORD&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;hashed&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">110&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">520&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;808e61ff.edc38&amp;#34;&lt;/span>]]}]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>フローエディターは、こんな感じになっています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heroku">Herokuにデプロイして本格運用&lt;/h2>
&lt;p>今回は、enebularが提供してるNode-REDの仕組みを利用して、フローを設計してみました。&lt;/p>
&lt;p>フロー設計時にはテンポラリのエンドポイントURLが付与されるので、作りながら実際のWebページの挙動を試すことができます。&lt;/p>
&lt;p>また、実際に本格運用しようと思ったときも、enebularからHerokuやAWS Lambdaにフローをデプロイ可能なので、簡単に日々の業務改善ツールとして導入可能です。&lt;!-- raw HTML omitted -->enebularも無料で始められますし、HerokuやAWSも無料枠で運用することが可能です。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>サクッと業務改善ツールが作れる環境が揃っているので、みなさんもぜひ作ってみてください！&lt;/p></description></item><item><title>CloudflareのAPIをNode.js+GitLab CIから実行してキャッシュクリアしてみよう</title><link>https://dotstud.io/blog/cloudflare-cache-clear-nodejs/</link><pubDate>Tue, 12 Feb 2019 12:20:03 +0900</pubDate><guid>https://dotstud.io/blog/cloudflare-cache-clear-nodejs/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>過去にも書いているように、dotstudioでは&lt;a href="https://cloudflare.com">Cloudflare&lt;/a>を使っています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>無料で使えて便利なのですが、&lt;!-- raw HTML omitted -->キャッシュが強くて中々更新されないといった現象&lt;!-- raw HTML omitted -->があります。&lt;/p>
&lt;p>調べてみるとCloudflareのAPIでキャッシュクリアが出来るみたいだったのでNode.jsで叩きつつデプロイ時のCIタスクに乗せてみました。&lt;/p>
&lt;h2 id="heading">今回の環境&lt;/h2>
&lt;p>参考までに今回の筆者の環境です。&lt;/p>
&lt;ul>
&lt;li>macOS 10.14 Mojave&lt;/li>
&lt;li>Node.js v11.9.0&lt;/li>
&lt;li>npm 6.7.0&lt;/li>
&lt;/ul>
&lt;h2 id="cloudflare">Cloudflareでのキャッシュクリア方法&lt;/h2>
&lt;p>APIを使わない場合は、ページから直接削除できます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/1.png" alt="">&lt;/p>
&lt;p>Custom Purgeのボタンを押すと、モーダルウィンドウが出てくるのでキャッシュクリアしたいドメインやページを指定しましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/2.png" alt="">&lt;/p>
&lt;p>こんな感じの指定が出来ます。&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://dotstud.io&lt;/code>のようにメインドメイン指定が出来ます。&lt;/li>
&lt;li>&lt;code>https://hogehoge.dotstud.io&lt;/code>のようにサブドメインでも大丈夫です。&lt;/li>
&lt;li>&lt;code>https://hogehoge.dotstud.io/hoge.html&lt;/code>のようにファイル指定も可能です。&lt;/li>
&lt;/ul>
&lt;p>記述したら&lt;code>Purge&lt;/code>ボタンを押してキャッシュクリアです。&lt;/p>
&lt;p>確認する際ですが、ブラウザ側のキャッシュが残ってしまってる可能性もあるので、ブラウザのシークレットモードなどでページを開いてあげると確実だと思います。&lt;/p>
&lt;h2 id="apicloudflare">API経由でCloudflareのキャッシュをクリア&lt;/h2>
&lt;p>デプロイ時にキャッシュクリアをしたいので、API経由でキャッシュクリアをしてみましょう。&lt;/p>
&lt;h3 id="cloudflareapi-">CloudflareのAPI キーの取得&lt;/h3>
&lt;p>まずはAPIキーを取得します。右上のユーザーアイコンから&lt;code>My Profile&lt;/code>を選択し、ページ下部のAPI Keysの箇所を確認します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/3.png" alt="">&lt;/p>
&lt;p>Global API KeyのViewボタンを押すとパスワード入力を求められるので、パスワードを入力するとAPIキーが表示されます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/4.png" alt="">&lt;/p>
&lt;h3 id="apicurl">APIキーを使ってcurlでキャッシュクリアをしてみる&lt;/h3>
&lt;p>参考記事を元に試してみます。最初からNode.jsでやりたい人はスキップでOKです。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="https://blog.mosuke.tech/entry/2017/05/29/how_to_use_cloudflare_api/">CloudFlare APIを使ってキャッシュを削除する&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>CloudflareのAPIの呼び出しはヘッダーには&lt;code>X-Auth-Email&lt;/code>と&lt;code>X-Auth-Key&lt;/code>の指定、&lt;code>Content-Type: application/json&lt;/code>の指定をする必要があります。&lt;/p>
&lt;p>手順としては大きく分けて2つSTEPです。&lt;/p>
&lt;ul>
&lt;li>STEP1. ZONE IDと呼ばれるIDを取得&lt;/li>
&lt;li>STEP2. ZONE IDを使ってキャッシュクリア&lt;/li>
&lt;/ul>
&lt;p>以下のコマンドをターミナルなどで実行してみましょう。&lt;/p>
&lt;h4 id="step1-zone-idid">STEP1. ZONE IDと呼ばれるIDを取得&lt;/h4>
&lt;p>まずはZONE　IDの取得です。以下のコマンドで取得できます。&lt;/p>
&lt;p>&lt;code>curl -s -X GET &amp;quot;https://api.cloudflare.com/client/v4/zones?name=&amp;lt;MY DOMAIN&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Email: &amp;lt;MY EMAIL&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Key: &amp;lt;MY API KEY&amp;gt;&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;strong>&lt;code>&amp;lt;MY DOMAIN&amp;gt;&lt;/code>、&lt;code>&amp;lt;MY EMAIL&amp;gt;&lt;/code>、&lt;code>&amp;lt;MY API KEY&amp;gt;&lt;/code>の箇所を適宜変更して実行して下さい。&lt;/strong>&lt;/p>
&lt;p>それぞれ、自分が管理しているドメイン、登録しているメールアドレス、先ほど取得したAPIキーです。&lt;/p>
&lt;ul>
&lt;li>実行例&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>curl -s -X GET &amp;quot;https://api.cloudflare.com/client/v4/zones?name=dotstud.io&amp;quot; \
-H &amp;quot;X-Auth-Email: hogehoge@gmail.com&amp;quot; \
-H &amp;quot;X-Auth-Key: xxxxxxxxxxxxxxxx&amp;quot; \
-H &amp;quot;Content-Type: application/json&amp;quot;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>ZONE ID&lt;/li>
&lt;/ul>
&lt;p>コマンドを実行してエラーがなければ、JSONがかえってきます。ここのidの値がZONE IDになります。&lt;/p>
&lt;pre>&lt;code>{&amp;quot;result&amp;quot;:[{&amp;quot;id&amp;quot;:&amp;quot;yyyyyyyyyyyyyyyyyyyy&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;dotstud.io&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;active&amp;quot;,&amp;quot;paused&amp;quot;:false,&amp;quot;type&amp;quot;:&amp;quot;full&amp;quot;, (......以下省略)
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/242/5.png" alt="">&lt;/p>
&lt;h4 id="step2-zone-id">STEP2. ZONE IDを使ってキャッシュクリア&lt;/h4>
&lt;p>次にZONE IDを使ってキャッシュクリアです。&lt;/p>
&lt;p>&lt;code>curl -X DELETE &amp;quot;https://api.cloudflare.com/client/v4/zones/&amp;lt;ZONE ID&amp;gt;/purge_cache&amp;quot; -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;X-Auth-Key: &amp;lt;MY EMAIL&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Email: &amp;lt;MY API KEY&amp;gt;&amp;quot; --data '{&amp;quot;files&amp;quot;:[&amp;quot;&amp;lt;TARGET&amp;gt;&amp;quot;]}'&lt;/code>&lt;/p>
&lt;p>先ほどと同様に適宜変更します。&lt;/p>
&lt;p>&lt;strong>&lt;code>&amp;lt;ZONE ID&amp;gt;&lt;/code>、&lt;code>&amp;lt;MY EMAIL&amp;gt;&lt;/code>、&lt;code>&amp;lt;MY API KEY&amp;gt;&lt;/code>、&lt;code>&amp;lt;TARGET&amp;gt;&lt;/code>の箇所を適宜変更して実行して下さい。&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;ZONE ID&amp;gt;&lt;/code>はSTEP1で取得したZONE IDで、&lt;code>&amp;lt;TARGET&amp;gt;&lt;/code>はキャッシュクリアさせたいドメインやファイル名の指定です。最初にAPI利用なしでCloudflareのサイト上でキャッシュクリアをした時に指定したときと同様の指定ができます。&lt;/p>
&lt;ul>
&lt;li>実行例&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>curl -X DELETE &amp;quot;https://api.cloudflare.com/client/v4/zones/yyyyyyyyyyyyyyyyyyyy/purge_cache&amp;quot; \
-H &amp;quot;Content-Type:application/json&amp;quot; \
-H &amp;quot;X-Auth-Key: xxxxxxxxxxxxxxxx&amp;quot; \
-H &amp;quot;X-Auth-Email: hogehoge@gmail.com&amp;quot; \
--data '{&amp;quot;files&amp;quot;:[&amp;quot;https://hogehoge.dotstud.io/&amp;quot;]}'
&lt;/code>&lt;/pre>&lt;p>成功すると以下のようなレスポンスがあり、キャッシュがクリアされます。&lt;/p>
&lt;pre>&lt;code>{&amp;quot;result&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;yyyyyyyyyyyyyyyyyyyy&amp;quot;},&amp;quot;success&amp;quot;:true,&amp;quot;errors&amp;quot;:[],&amp;quot;messages&amp;quot;:[]}%
&lt;/code>&lt;/pre>&lt;h3 id="nodejsapi">Node.jsでAPIを叩いてみる&lt;/h3>
&lt;p>まずはフォルダやファイルの準備をしましょう。
mycfフォルダ内に&lt;code>purge_cache.js&lt;/code>というファイルを作成します。&lt;/p>
&lt;pre>&lt;code>mkdir mycf
cd mycf
touch purge_cache.js
&lt;/code>&lt;/pre>&lt;p>HTTPリクエストを利用する為に&lt;a href="https://www.npmjs.com/package/axios">axios&lt;/a>をインストールします。&lt;/p>
&lt;pre>&lt;code>npm init -y
npm i axios
&lt;/code>&lt;/pre>&lt;p>&lt;code>purge_cache.js&lt;/code>に以下の内容をコピペして、&lt;code>YOUREMAIL&lt;/code>、&lt;code>APIKEY&lt;/code>、&lt;code>PURGE_TARGETS&lt;/code>を適宜書き換えましょう。&lt;/p>
&lt;pre>&lt;code>'use strict';
const YOUREMAIL = `hogehoge@gmail.com`; //Cloudflareに登録してるメールアドレス
const APIKEY = `xxxxxxxxxxxxxxxxx`; //CloudflareのAPI KEY
const PURGE_TARGETS = [`https://hogehoge.dotstud.io`]; //消す対象ページ
const axiosBase = require('axios');
const axios = axiosBase.create({
baseURL: `https://api.cloudflare.com/client/v4/zones`,
headers: {
'Content-Type': 'application/json',
'X-Auth-Key': APIKEY,
'X-Auth-Email': YOUREMAIL
}
})
const main = async() =&amp;gt; {
try {
//STEP1. ZoneIDの取得
let res = await axios.get('/');
const zoneid = res.data.result[0].id;
//STEP2. キャッシュ削除
res = await axios.delete(`/${zoneid}/purge_cache`,{
data: {
files: PURGE_TARGETS
}
});
console.log(res.data);
} catch (error) {
console.log(error.response.data)
}
}
main();
&lt;/code>&lt;/pre>&lt;p>実行します。エラーが出なければこれでキャッシュクリアされます。&lt;/p>
&lt;pre>&lt;code>node purge_cache.js
&lt;/code>&lt;/pre>&lt;p>これでNode.jsからCloudflareのキャッシュクリアをすることが出来ました。&lt;/p>
&lt;h2 id="gitlab-ci">GitLab CIのタスクで実行する&lt;/h2>
&lt;p>実際にデプロイした際にキャッシュクリアされるようにしたいのでGitLab CIのタスクに入れ込みました。&lt;/p>
&lt;h3 id="heading-1">ソースコードの変更&lt;/h3>
&lt;p>先ほどソースコード上に書いていた&lt;code>YOUREMAIL&lt;/code>などの値は環境変数から取得するように&lt;code>purge_cache.js&lt;/code>を変更しました。また、最後(STEP3)にDiscordにデプロイ成功を通知する処理も追加しています。&lt;/p>
&lt;pre>&lt;code>'use strict';
if(!process.env.YOUREMAIL || !process.env.APIKEY || !process.env.PURGE_TARGET){
console.log('環境変数が足りません');
return;
}
const YOUREMAIL = process.env.YOUREMAIL; //Cloudflareに登録してるメールアドレス
const APIKEY = process.env.APIKEY; //CloudflareのAPI KEY
const PURGE_TARGETS = [process.env.PURGE_TARGET]; //消す対象ページ
const axiosBase = require('axios');
const axios = axiosBase.create({
baseURL: `https://api.cloudflare.com/client/v4/zones`,
headers: {
'Content-Type': 'application/json',
'X-Auth-Key': APIKEY,
'X-Auth-Email': YOUREMAIL
}
})
const main = async() =&amp;gt; {
try {
//STEP1. ZoneIDの取得
let res = await axios.get('/');
const zoneid = res.data.result[0].id;
//STEP2. キャッシュ削除
res = await axios.delete(`/${zoneid}/purge_cache`,{
data: {
files: PURGE_TARGETS
}
});
console.log(res.data);
//STEP3. Discordへ通知
res = await axiosBase.post(process.env.DISCORD_WEBHOOK_URL,{
content: 'デプロイ成功 &amp;amp; キャッシュクリア'
});
console.log(res.data);
} catch (error) {
console.log(error.response.data)
}
}
main();
&lt;/code>&lt;/pre>&lt;h3 id="packagejson">package.jsonの変更&lt;/h3>
&lt;p>また、先日書いた記事にもあるような、VuePressのデプロイフローに今回のタスクを乗せていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;code>package.json&lt;/code>に&lt;code>ci:purge_cache&lt;/code>を追加して&lt;code>purge_cache.js&lt;/code>を実行するスクリプトを追加します。&lt;/p>
&lt;pre>&lt;code>(省略)
&amp;quot;scripts&amp;quot;: {
&amp;quot;dev&amp;quot;: &amp;quot;vuepress dev docs&amp;quot;,
&amp;quot;build&amp;quot;: &amp;quot;vuepress build docs&amp;quot;,
&amp;quot;ci:purge_cache&amp;quot;: &amp;quot;node purge_cache.js&amp;quot;,
},
(省略)
&lt;/code>&lt;/pre>&lt;h3 id="gitlab-ciyml">.gitlab-ci.ymlの変更&lt;/h3>
&lt;p>GitLab CIの挙動として&lt;code>.gitlab-ci.yml&lt;/code>の記述は以下のようにしています。&lt;/p>
&lt;p>&lt;code>after_script&lt;/code>の箇所で&lt;code>npm run ci:purge_cache&lt;/code>をすることで、デプロイが終わった後に&lt;code>purge_cache.js&lt;/code>が実行されてキャッシュクリアがされます。&lt;/p>
&lt;pre>&lt;code>image: node:current-alpine
pages:
cache:
paths:
- node_modules/
before_script:
- node -v
- npm i
script:
- npm run build
- cp docs/robots.txt docs/.vuepress/dist #限定公開の場合
- cp -pr docs/.vuepress/dist public
after_script:
- npm run ci:purge_cache #Cloudflareのキャッシュクリア &amp;amp; Discordへ通知
artifacts:
paths:
- public
only:
- master
&lt;/code>&lt;/pre>&lt;h3 id="heading-2">環境変数の登録&lt;/h3>
&lt;p>GitLabのリポジトリから環境変数を追加することができます。&lt;/p>
&lt;p>リポジトリの&lt;code>Settings&amp;gt;CI/CD&lt;/code>から&lt;code>Environment variables&lt;/code>の箇所を開きます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/6.png" alt="">&lt;/p>
&lt;p>各値を名前をソースコードに記述した変数名と一致させつつ設定しましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/7.png" alt="">&lt;/p>
&lt;h2 id="heading-3">まとめ&lt;/h2>
&lt;p>ここまでの手順が出来るとデプロイするたびに、Cloudflareのキャッシュがクリアされて、なかなか更新されない問題が解消できると思います。&lt;/p>
&lt;p>これでもページが更新されない場合はブラウザ側でキャッシュされている可能性が高いのでシークレットモードなどで確認したり、ブラウザを変えてみるのがベターだと思います。&lt;/p>
&lt;p>キャッシュコントロールをしてCloudflareをもっと便利に使っていきましょう。&lt;/p>
&lt;p>それでは！&lt;/p></description></item><item><title>NefryBTからGoogleDriveにデータをアップロードする方法</title><link>https://dotstud.io/blog/update-nefrybt-to-googledrive/</link><pubDate>Thu, 31 Jan 2019 03:21:47 +0900</pubDate><guid>https://dotstud.io/blog/update-nefrybt-to-googledrive/</guid><description>&lt;p>こんにちは、NefryBTきっかけでIoTの世界に入った&lt;a href="https://dotstud.io/members/kuroda">黒田&lt;/a>と言います。Webとどう接していけばいいのか分からないときにNefryBTと出会い、意外と難しくない(何とかなる)ことを知りました。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/members/wami">わみさん&lt;/a>、ありがとうございます。&lt;/p>
&lt;p>今回は、NefryBTからGoogleDriveにデータをアップロード出来たので紹介したいと思います。&lt;/p>
&lt;p>おそらく&lt;strong>ESP32マイコン搭載モジュール&lt;/strong>であれば、同じ考えで出来ると思います。&lt;/p>
&lt;h2 id="heading">アップロードまでの手順&lt;/h2>
&lt;ol>
&lt;li>リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/li>
&lt;li>リフレッシュトークンから認証用のアクセストークンを取得する&lt;/li>
&lt;li>http POSTリクエストでデータをアップロードする&lt;/li>
&lt;/ol>
&lt;p>はい、とてもシンプルです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->httpを全く分からない私としてはここまでたどり着くまでかなり苦労しました・・・先人の方々が様々な実績を残してくれているのを本当に感謝しています。) &lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>もう少し詳しく説明します。&lt;/p>
&lt;p>&lt;a href="https://developers.google.com/drive/api/v3/about-sdk">Google Drive REST APIのサイト&lt;/a>を読みますと、まずGoogleDriveへアクセスするには認証用のアクセストークンが必要なこと、データをアップロードするときの&lt;a href="https://developers.google.com/drive/api/v3/multipart-upload">POSTリクエストの書き方&lt;/a>が決まっていることが分かります。&lt;/p>
&lt;p>そのためアクセストークンで認証を行いつつPOSTリクエストを投げれば、NefryBTからでもデータをアップロード出来ます。&lt;/p>
&lt;p>ここで一つ&lt;strong>トラップ&lt;/strong>があります。
アクセストークンの有効期限は3600秒(1時間)です。当初これを知らなかったので、&lt;!-- raw HTML omitted -->時間が経つとなぜか認証エラーになる問題&lt;!-- raw HTML omitted -->に悩まされました。&lt;/p>
&lt;p>回避策としてリフレッシュトークンからアクセストークンを取得するようにします。すると、アクセストークンが新しくなるので、認証もばっちり通ります。
つまり、&lt;!-- raw HTML omitted -->アクセストークンよりも再発行用のリフレッシュトークンが欲しい&lt;!-- raw HTML omitted -->のです。&lt;/p>
&lt;p>ではでは、具体的な手順を説明していきたいと思います。&lt;/p>
&lt;h3 id="1-">[手順1] リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/h3>
&lt;p>今回はNode.jsで取得します。&lt;/p>
&lt;p>公式サイトの&lt;a href="https://developers.google.com/drive/api/v3/quickstart/nodejs">Node.js Quickstart&lt;/a>に従って進めていきます。&lt;/p>
&lt;p>公式サイトにある「ENABLE THE DRIVE API」を押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/0ba2b731-7e29-2db2-7591-6ae56f1a7950.png" alt="OAuth0.PNG">&lt;/p>
&lt;p>するとOAuth2.0クライアントIDを作ってくれます。
続けて「DOWNLOAD CLIENT CONFIGURATION」を押してcredentials.jsonを取得します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/d4efa193-e36c-2e83-81f5-590cf105894a.png" alt="OAuth1.PNG">&lt;/p>
&lt;hr>
&lt;p>(補足)
例えばcredentials.jsonを削除してしまって、もう一度取得したい場合・・・
Google Cloud PlatformのAPI認証情報からダウンロードできます。&lt;/p>
&lt;p>左上のメニューを押して「APIとサービス」を押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/b26bff46-0dea-afba-38cd-51cb6ba8eb68.png" alt="OAuth2-1.PNG">&lt;/p>
&lt;p>認証情報の中に先ほど作成したクライアントIDがありますので、ダウンロードします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/901be3e5-b947-c290-e641-8db7dd075dcf.png" alt="OAuth2-2.PNG">&lt;/p>
&lt;p>※ファイル名は「client_secret_***.json」となっていますので「credentials.json」に変更します。&lt;/p>
&lt;hr>
&lt;p>次にNode.jsでアクセストークンなどの情報を取得します。(Node.jsやnpmが動く環境は用意されているものとします。)&lt;/p>
&lt;ul>
&lt;li>アクセストークンを取得するフォルダを用意して以下のモジュールをインストールします。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>npm install googleapis@27 --save
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>credentials.jsonも同じフォルダに移動させます。&lt;/li>
&lt;li>index.jsを作成します。公式サイトのままではスコープがReadOnlyになっているのでアップロードできるスコープに変更します。それ以外は全く同じです。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>[変更前]
const SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly'];
[変更後]
const SCOPES = ['https://www.googleapis.com/auth/drive'];
&lt;/code>&lt;/pre>&lt;p>スコープについて詳しくは&lt;a href="https://developers.google.com/drive/api/v2/about-auth">About Authorization&lt;/a>を参照ください。&lt;/p>
&lt;ul>
&lt;li>準備は整ったのでNode.jsを実行します。&lt;/li>
&lt;/ul>
&lt;p>１. credentials.json、index.jsなど一式入っているフォルダです。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/52fdf814-f643-1754-9a6c-2a6d9e3fe8bd.png" alt="AccessToken_0.PNG">&lt;/p>
&lt;p>２. nodeを実行します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/1ce7b76c-988e-fd6f-c863-eef96b1fa4ac.png" alt="AccessToken_1.PNG">&lt;/p>
&lt;p>３. URLが表示されるのでアクセスします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/64852163-ae0f-6156-6d7d-fac9e90c7a27.png" alt="AccessToken_2.PNG">&lt;/p>
&lt;p>４. 紐づけるGoogleアカウントを選択し、GoogleDriveへのアクセスを許可します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/dac52655-b356-073b-96bf-678c073897c1.png" alt="AccessToken_3.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/55cd28a0-da9b-e5ee-2b91-095030c96f37.png" alt="AccessToken_4.PNG">&lt;/p>
&lt;p>５. 最後に表示されるコードを上記3.の続きに貼り付けます。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/3fd64238-c27d-6412-23f9-d9754bec9ff9.png" alt="AccessToken_5.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/90f1683d-0731-25e9-e376-cdbb11156e2b.png" alt="AccessToken_6.PNG">&lt;/p>
&lt;p>６.無事token.jsonを取得できました。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/7aa8a2bb-b2d0-f5d0-787c-6f142da997a8.png" alt="AccessToken_7.PNG">&lt;/p>
&lt;h3 id="2-">[手順2] リフレッシュトークンから認証用のアクセストークンを取得する&lt;/h3>
&lt;p>アップロードに必要な情報は揃ったので、あとはNefryBTだけ触っていきます。&lt;/p>
&lt;p>リフレッシュトークンからアクセストークンを取得するhttp POSTリクエストは次の通りとなります。&lt;/p>
&lt;pre>&lt;code>[ヘッダー]
POST /oauth2/v4/token HTTP/1.1
Host: www.googleapis.com:443
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: [POSTするデータの長さ]
[POSTするデータ]
refresh_token=[リフレッシュトークン]&amp;amp;client_id=[クライアントID]&amp;amp;client_secret=[クライアントシークレット]&amp;amp;grant_type=refresh_token
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>クライアントIDとクライアントシークレットは「credentials.json」に書いてあります。もしくはGoogle Cloud PlatformのAPIの認証情報でも確認できます。&lt;/li>
&lt;li>リフレッシュトークンは「token.json」に書いてあります。&lt;/li>
&lt;/ul>
&lt;p>POSTリクエストを投げるとレスポンスがjson形式で返ってきます。&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;access_token&amp;quot;: &amp;quot;***&amp;quot;,
&amp;quot;expires_in&amp;quot;: 3600,
&amp;quot;scope&amp;quot;: &amp;quot;https://www.googleapis.com/auth/drive&amp;quot;,
&amp;quot;token_type&amp;quot;: &amp;quot;Bearer&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>access_token:***が取得したいアクセストークンになります。&lt;/p>
&lt;hr>
&lt;p>上記の内容をNefryBTで書くと次のようになります。&lt;/p>
&lt;p>※&lt;a href="https://github.com/NearMugi/NefrySample/tree/master/GoogleAPI/%23createLibrary/googleAPI/PostDrive">プログラムソース&lt;/a>のうち主要な部分を抜粋しています。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>リフレッシュトークン・クライアントID・クライアントシークレットは個人情報なので、直接プログラムソースに記載するのではなくNefryBTのDataStoreに登録します。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POSTするデータを設定します。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postData = &amp;quot;&amp;quot;;
postData += &amp;quot;refresh_token=&amp;quot; + refresh_token;
postData += &amp;quot;&amp;amp;client_id=&amp;quot; + client_id;
postData += &amp;quot;&amp;amp;client_secret=&amp;quot; + client_secret;
postData += &amp;quot;&amp;amp;grant_type=&amp;quot; + String(&amp;quot;refresh_token&amp;quot;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>ヘッダーを設定します。
データの長さはPOSTするデータ(postData)から算出します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postHeader = &amp;quot;&amp;quot;;
postHeader += (&amp;quot;POST &amp;quot; + token_uri + &amp;quot; HTTP/1.1\r\n&amp;quot;);
postHeader += (&amp;quot;Host: &amp;quot; + String(host) + &amp;quot;:&amp;quot; + String(httpsPort) + &amp;quot;\r\n&amp;quot;);
postHeader += (&amp;quot;Connection: close\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Type: application/x-www-form-urlencoded\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Length: &amp;quot;);
postHeader += (postData.length());
postHeader += (&amp;quot;\r\n\r\n&amp;quot;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>POSTリクエストを投げてレスポンスを取得します。更にレスポンスからアクセストークンを取得します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String result = postRequest(host, postHeader, postData);
//取得したjsonデータからAccessTokenを取得する
const int BUFFER_SIZE = JSON_OBJECT_SIZE(4) + JSON_ARRAY_SIZE(1);
StaticJsonBuffer&amp;lt;BUFFER_SIZE&amp;gt; jsonBuffer;
char json[result.length() + 1];
result.toCharArray(json, sizeof(json));
JsonObject&amp;amp; root = jsonBuffer.parseObject(json);
const char* tmp = root[&amp;quot;access_token&amp;quot;];
token = tmp;
return token;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>POSTリクエストを行っているソース(&lt;code>postRequest&lt;/code>)です。正常に処理が終わればレスポンスを返します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postRequest(const char* server, String header, String data) {
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
Serial.print(&amp;quot;Connecting to: &amp;quot;); Serial.println(server);
if (!client.connect(server, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return result;
}
Serial.println(&amp;quot;certificate matches&amp;quot;);
Serial.print(&amp;quot;post: &amp;quot;); Serial.println(header + data);
client.print(header + data);
Serial.println(&amp;quot;Receiving response&amp;quot;);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil('\r');
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
}
String line = client.readStringUntil('\r');
Serial.println(line);
result += line;
}
Serial.println(&amp;quot;closing connection&amp;quot;);
return result;
}
&lt;/code>&lt;/pre>&lt;p>だいたいこんな感じで無事アクセストークンを取得できました。&lt;/p>
&lt;h3 id="3-http-post">[手順3] http POSTリクエストでデータをアップロードする&lt;/h3>
&lt;p>いよいよデータをアップロードしてみます。今回はテキストファイルとJpegファイルのアップロード方法を紹介します。
公式サイトの&lt;a href="https://developers.google.com/drive/api/v3/manage-uploads">Uploading Files&lt;/a>によりますと、アップロード方法は3パターンあります。&lt;/p>
&lt;ul>
&lt;li>Simple upload&lt;/li>
&lt;li>Multipart upload&lt;/li>
&lt;li>Resumable upload&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Simple upload&amp;quot;の場合、アップロードしたファイル名は全て&amp;quot;untitled&amp;quot;となってしまい、具合がよろしくありません。
&amp;ldquo;Multipart upload&amp;quot;の場合、ファイルに様々な設定を付加できます。今回はファイル名・親フォルダの指定・コメントを設定しました。
(&amp;ldquo;Resumable upload&amp;quot;はどんなものか調べていません・・・)&lt;/p>
&lt;p>Multipart uploadのPOSTリクエストは次の通りです。&lt;/p>
&lt;pre>&lt;code>POST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart HTTP/1.1
Authorization: Bearer [YOUR_AUTH_TOKEN]
Content-Type: multipart/related; boundary=foo_bar_baz
Content-Length: [NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]
--foo_bar_baz
Content-Type: application/json; charset=UTF-8
{
&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;
}
--foo_bar_baz
Content-Type: image/jpeg
[JPEG_DATA]
--foo_bar_baz--
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>[YOUR_AUTH_TOKEN]はアクセストークンを設定します。&lt;/li>
&lt;li>[NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]は &lt;strong>ヘッダーから最後のデータまですべてのサイズ&lt;/strong> となります。つまり最初のPOSTから最後の&amp;ndash;foo_bar_baz&amp;ndash;まで全てのサイズを設定します。これを間違えると正しくPOSTリクエストを投げることが出来ません。&lt;/li>
&lt;li>&lt;code>&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;&lt;/code> の部分がアップロードするファイルの設定を記載する部分となります。
何を設定できるかは&lt;a href="https://developers.google.com/drive/api/v3/reference/files">公式ページの&amp;quot;Files&amp;rdquo;&lt;/a>を参照ください。&lt;/li>
&lt;li>その下の&lt;code>Content-Type: image/jpeg&lt;/code> がアップロードするデータの形式となり、その次にデータの中身を記述していきます。&lt;/li>
&lt;li>最後に&lt;code>--foo_bar_baz--&lt;/code> で閉めます。&lt;/li>
&lt;/ul>
&lt;p>まとめますと、プログラムを書くとき毎回設定しなければならないのは次の4つです。&lt;/p>
&lt;ul>
&lt;li>アクセストークン&lt;/li>
&lt;li>POSTリクエスト全体のサイズ&lt;/li>
&lt;li>ファイルの設定(ファイル名・親フォルダ・コメント)&lt;/li>
&lt;li>ファイルの中身&lt;/li>
&lt;/ul>
&lt;h2 id="heading-1">テキストファイルをアップロードする&lt;/h2>
&lt;p>上記の仕様を踏まえてテキストファイルをアップロードする例を挙げます。この次に紹介するJpegファイルのアップロードと比べるとシンプルで分かりやすいと思います。&lt;/p>
&lt;ol>
&lt;li>POSTリクエストのファイルの指定周り(&lt;code>--foo_bar_baz&lt;/code>部分)を設定します。&lt;/li>
&lt;li>上記1.のあとPOSTリクエスト全体のサイズが分かるのでヘッダー(&lt;code>POST https://&lt;/code>部分)を設定します。&lt;/li>
&lt;li>上記1.と2.をPOSTします。&lt;/li>
&lt;li>データの中身をPOSTします。&lt;/li>
&lt;li>最後の&amp;rsquo;&amp;ndash;foo_bar_baz&amp;ndash;&amp;lsquo;をPOSTします。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> void postDrive_Text(String _fileName, String _textData, String _comment) {
uint8_t DataSize = _textData.length();
uint8_t postData[DataSize];
for (int i = 0; i &amp;lt; DataSize; i++) {
postData[i] = (uint8_t)_textData[i];
}
1. POSTリクエストのファイルの指定周りを設定
String start_request = getStartRequest_Text(_fileName, _comment);
2. ヘッダーを設定
uint16_t full_length;
full_length = start_request.length() + DataSize + end_request.length();
String postHeader = getPostHeader(full_length);
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
if (!client.connect(host, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return ;
}
3. 1.と2.をPOST
client.print(postHeader + start_request);
4. データの中身をPOST
client.write(&amp;amp;postData[0] , DataSize);
5. --foo_bar_baz--をPOST
client.println(end_request);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil('\r');
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
} else {
Serial.println(F(&amp;quot;[WARNING] Response Data is Nothing&amp;quot;));
}
String line = client.readStringUntil('\r');
Serial.println(line);
result += line;
}
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-2">実際にテキストファイルをアップロードしている様子&lt;/h3>
&lt;p>１. アップロード先のフォルダを作成しておきます。親フォルダIDは「&lt;code>https://drive.google.com/drive/folders/***&lt;/code>」の***の部分です。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c32ed96f-9dc4-59cb-0eef-c1091b088397.png" alt="GoogleDrive_Text_0.PNG">&lt;/p>
&lt;p>２. NefryBTのセットアップが完了するのを待ちます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/699a3064-ec88-d560-2429-f5cab310ce9b.jpeg" alt="DSC_0003.JPG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/3b5bc537-b82a-eb2e-a751-077817386f7e.jpeg" alt="DSC_0005.JPG">&lt;/p>
&lt;p>３. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/cfafe65c-ebb7-d82c-e566-d47436cf7ee9.jpeg" alt="DSC_0006.JPG">&lt;/p>
&lt;p>４. 成功しました！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/97de4845-f602-0aa5-26ac-064cd47609be.jpeg" alt="DSC_0007.JPG">&lt;/p>
&lt;p>５. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/72fae28e-6ac8-4fca-e940-265031c2c8cf.png" alt="GoogleDrive_Text_1.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/5b5cb82b-7dd1-d3e4-bf3b-bb60bfffdb1a.png" alt="GoogleDrive_Text_2.PNG">&lt;/p>
&lt;h2 id="jpeg">Jpegファイルをアップロードする&lt;/h2>
&lt;p>続いてJpegファイルをアップロードする方法です。&lt;strong>ここからかなり込み入った内容になります。&lt;/strong>
今回JpegファイルにしてアップロードしたものはNefryBTに接続したカメラモジュールで撮った画像となります。そのためカメラモジュールの話とGoogleDriveへアップロードする話が混在しますのでご了承ください・・・&lt;/p>
&lt;h3 id="heading-3">カメラモジュールについて&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/eeaaa02a-2c36-b131-aa32-eeacef9abb63.jpeg" alt="ArduCAM.jpg">&lt;/p>
&lt;p>使用したカメラモジュールは&lt;a href="https://www.switch-science.com/catalog/3780/">Arducam Miniモジュール(2メガピクセル)&lt;/a>です。ESP32向けのサンプルがあったので動かせるだろうと思って選びました。
(NefryBTのことを考えれば&lt;a href="https://www.switch-science.com/catalog/1626/">Groveのカメラ&lt;/a>でも良かったとあとで気づきました・・・)&lt;/p>
&lt;p>初期設定やカメラモジュールからデータを取得するところは&lt;a href="https://github.com/NearMugi/NefrySample/tree/master/ArduCAM/OV2640">プログラムソース&lt;/a>を参照ください。&lt;/p>
&lt;p>厄介なのは&lt;strong>取得したデータ全てがJpegデータではない&lt;/strong>ことです。このカメラモジュールの場合、1バイト目に0x00が入っています。これ、要らないデータなのです。きちんとJpegファイルにあたるデータをアップロードしないと正しく表示されません。&lt;/p>
&lt;p>&lt;a href="https://www.setsuki.com/hsp/ext/jpg.htm">Jpegファイル&lt;/a>は開始位置(0xFFD8)と終了位置(0xFFD9)が決まっています。この範囲のデータだけをアップロードすればJpegファイルとして正しく表示されます。&lt;/p>
&lt;h3 id="heading-4">プログラムのポイント&lt;/h3>
&lt;p>カメラモジュールの仕様を踏まえてアップロードします。&lt;/p>
&lt;ul>
&lt;li>Jpegファイルのデータサイズは何十万バイトと膨大なので全て変数に入れて一括でPOSTすることはできません。そのためデータを分割してカメラモジュールから取得、POSTを繰り返します。&lt;/li>
&lt;li>POSTリクエスト全体のサイズとJpegファイルのサイズが異なるので、&lt;strong>POSTリクエスト全体のサイズに足りない分を最後に0x00をPOSTする&lt;/strong>ことで整合性を合わせています。&lt;/li>
&lt;/ul>
&lt;p>プログラムソースを抜粋します。&lt;/p>
&lt;pre>&lt;code>// ReadSizeはカメラモジュールで取得したデータサイズ
//GoogleDriveへポスト
String start_request = api.getStartRequest_Jpeg(&amp;quot;Capture&amp;quot;, &amp;quot;From ArduCam&amp;quot;);
String end_request = api.getEndRequest();
uint32_t full_length;
full_length = start_request.length() + ReadSize + end_request.length();
String postHeader = api.getPostHeader(full_length);
(中略)
client.print(postHeader + start_request);
//JPEGデータ
static const size_t bufferSize = 2048;
static uint8_t buffer[bufferSize] = {0xFF};
uint32_t index = 0;
uint32_t sizeCnt = 0;
uint8_t now = 0;
uint8_t prev = 0;
myCAM.CS_LOW();
myCAM.set_fifo_burst();
カメラモジュールのデータをPOSTしている部分
bool isHeader = false;
while (ReadSize--) {
prev = now;
now = SPI.transfer(0x00);
//ヘッダーを探す(0xFF,0xD8)
if (!isHeader) {
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD8) {
Serial.println(F(&amp;quot;JPEG First Data is Found&amp;quot;));
buffer[0] = 0xFF;
buffer[1] = 0xD8;
index = 2;
sizeCnt = 2;
isHeader = true;
}
continue;
}
//ヘッダーが見つかったあと
sizeCnt++;
// JPEGファイルの最後を検出したら終了(0xFF,0xD9)
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD9) {
Serial.println(F(&amp;quot;JPEG Last Data is Found&amp;quot;));
buffer[index++] = now;
client.write(&amp;amp;buffer[0], index);
myCAM.CS_HIGH();
break;
}
if (index &amp;lt; bufferSize) {
buffer[index] = now;
index++;
} else {
if (!client.connected()) break;
client.write(&amp;amp;buffer[0], bufferSize);
index = 0;
buffer[index++] = now;
}
}
myCAM.CS_HIGH();
ReadSize += 1;
Serial.print(F(&amp;quot;JPEG Data Size: &amp;quot;)); Serial.println(sizeCnt);
Serial.print(F(&amp;quot;Remaining Data Size: &amp;quot;)); Serial.println(ReadSize);
client.println(end_request);
POSTリクエスト全体のサイズを調整している部分
//バッファーメモリサイズと画像サイズが異なるため、full_lengthに達していない。
//足りない分の帳尻を合わせる
uint8_t tmpbuf[ReadSize] = {0x00};
client.write(&amp;amp;tmpbuf[0], ReadSize);
(以下、省略)
}
&lt;/code>&lt;/pre>&lt;h3 id="jpeg-1">実際にJpegファイルをアップロードしている様子&lt;/h3>
&lt;p>１. アップロード先のフォルダはテキストファイルと同じところにします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/2660eda8-1474-644d-fae2-bba8b87c502d.png" alt="GoogleDrive_Jpeg_0.PNG">&lt;/p>
&lt;p>２. カメラで撮ってみます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c25e4a34-5b9c-44ff-3f78-b390c2c492de.jpeg" alt="DSC_0015.JPG">&lt;/p>
&lt;p>３. NefryBTのセットアップが完了するのを待ちます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/91963234-adc5-7317-654b-41dbd6b8b9ca.jpeg" alt="DSC_0010.JPG">
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/a85255a7-e375-2d75-c7d0-4d126e66b60f.jpeg" alt="DSC_0012.JPG">&lt;/p>
&lt;p>４. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/6e91d9ac-0e56-6df0-062b-2d158fd75b3e.jpeg" alt="DSC_0013.JPG">&lt;/p>
&lt;p>５. 成功しました！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c7291283-ac2a-feb9-d924-9c23963058b1.jpeg" alt="DSC_0014.JPG">&lt;/p>
&lt;p>６. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/b9ed65c6-185b-a57c-1877-1bb079b2400f.png" alt="GoogleDrive_Jpeg_1.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/fac4420d-d91a-3849-f71c-b17ab86d842f.png" alt="GoogleDrive_Jpeg_2.PNG">&lt;/p>
&lt;h2 id="heading-5">参考にしたサイト&lt;/h2>
&lt;p>大変助かりました。&lt;/p>
&lt;p>*&lt;a href="https://github.com/jalmeroth/ESP8266-OAUTH2/blob/master/ESP8266-OAUTH2/ESP8266-OAUTH2.ino">jalmeroth/ESP8266-OAUTH2&lt;/a>&lt;/p>
&lt;p>*&lt;a href="https://himakan.net/websites/how_to_google_oauth">Google APIを使用するためにGoogle OAuth認証をしようよ&lt;/a>&lt;/p>
&lt;p>*&lt;a href="https://zudoh.com/trouble-shooting/google-oauth-expired">時間が立つとGoogle APIのOAuth認証に失敗する&lt;/a>&lt;/p>
&lt;p>*&lt;a href="http://indoor.lolipop.jp/IndoorCorgiElec/ESP-SensorCam.php">ESP-SensorCam&lt;/a>&lt;/p>
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>NefryBTから直接GoogleDriveにアクセスできたときは感動しました！こんな小さなボードがネットに繋がるなんて！&lt;/p>
&lt;p>またGmailやスプレッドシートなどの他のアプリケーションにもアクセスできると思います。面白い組み合わせがあるかもしれません。&lt;/p>
&lt;p>みなさんのIoTライフの参考になれば幸いです。ではでは。&lt;/p></description></item></channel></rss>