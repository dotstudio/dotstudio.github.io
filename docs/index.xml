<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/docs/index.xml</link>
    <description>Recent content in Docs on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Sat, 20 May 2017 01:02:41 +0900</lastBuildDate>
    <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wio Node</title>
      <link>https://dotstud.io/docs/wionode/</link>
      <pubDate>Sat, 20 May 2017 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/wionode/</guid>
      
      <description>

&lt;p&gt;&lt;a href=&#34;http://wiki.seeed.cc/Wio_Node/&#34;&gt;Wio Node&lt;/a&gt;は中国の&lt;a href=&#34;https://www.seeedstudio.com/&#34;&gt;Seeed社&lt;/a&gt;が開発、販売しているESP8266モジュール搭載のIoTプロトタイプデバイスです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b4814839e1edfdf5593cad308b097e7d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;小型&#34;&gt;小型&lt;/h2&gt;

&lt;p&gt;500円玉くらいの大きさで小型です。&lt;/p&gt;

&lt;h2 id=&#34;groveだけに対応していて複雑なことはさせない&#34;&gt;Groveだけに対応していて複雑なことはさせない&lt;/h2&gt;

&lt;p&gt;Wio NodeはNefryとは違い、Groveセンサーのみに対応しています。&lt;/p&gt;

&lt;h2 id=&#34;esp8266搭載でwi-fi接続が前提&#34;&gt;ESP8266搭載でWi-Fi接続が前提&lt;/h2&gt;

&lt;p&gt;ESP8266を搭載しているため、最初からWi-Fi接続が可能です。
実際にはアドホックモードでスマートフォンアプリと連携してSSID/パスワードを書き込むことで会場や部屋（利用する場所のWi-Fi）のWi-Fiにアクセスすることができます。&lt;/p&gt;

&lt;h2 id=&#34;サーバーもseeedが用意してくれている&#34;&gt;サーバーもSeeedが用意してくれている&lt;/h2&gt;

&lt;p&gt;Wio NodeではWi-Fiに接続すると同時にSeeedが用意しているWebサーバーにセンサーの値をあげてくれます。&lt;/p&gt;

&lt;p&gt;そのため、ユーザーはWio Nodeに接続したGroveセンサーの値を即時にWebのAPIとして利用することができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>「IoT」とは</title>
      <link>https://dotstud.io/docs/iot/</link>
      <pubDate>Thu, 10 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/iot/</guid>
      
      <description>&lt;p&gt;※この項目は書きかけです。&lt;/p&gt;

&lt;p&gt;モノのインターネット（英語: Internet of Things, IoT）とは、様々な「モノ（物）」がインターネットに接続され（単に繋がるだけではなく、モノがインターネットのように繋がる）、
情報交換することにより相互に制御する仕組みである。それによる社会の実現も指す。「物のインターネット」と表記された例もある。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nefryとは</title>
      <link>https://dotstud.io/docs/nefry/</link>
      <pubDate>Tue, 19 Jul 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/nefry/</guid>
      
      <description>

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefry_top.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「Nefry（ねふりー）」は、&lt;a href=&#34;https://twitter.com/wamisnet&#34;&gt;wamisnet&lt;/a&gt;氏によって開発された小型のマイコンボードです。Wi-Fiさえあればすぐにネットワークに接続でき、MilkcocoaやmyThings、IFTTTなどのインターネットのサービスと簡単に接続できます。&lt;/p&gt;

&lt;p&gt;スマートフォンで使うようなモバイルバッテリーで動くので、場所を選ばずに使えます。&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;Nefryは「ESP8266」というマイコンモジュールを利用したボードです。ESP8266はWi-Fiに対応しており、ネットワークに無線接続できるモジュールとしてはとても優れていますが、そのままでは難易度の高いはんだ付けが必須となっていました。&lt;/p&gt;

&lt;p&gt;そこで、入出力関連はGPIOソケットと&lt;a href=&#34;http://wiki.seeed.cc/Grove_System/&#34;&gt;Grove&lt;/a&gt;を備え、また電源も汎用的なUSBによるものとしたことで、ハードウェアの開発に一切の工具を不要としました。&lt;/p&gt;

&lt;p&gt;さらに手持ちのPCのWebブラウザから様々な設定ができ、プログラムの書き込みも無線で行えるなどといったソフトウェア面での簡単さもあり、特に初心者がIoTなプロトタイプを作りたいといった場面で強力なベースプラットフォームとなるような設計になっています。&lt;/p&gt;

&lt;h2 id=&#34;説明書&#34;&gt;説明書&lt;/h2&gt;

&lt;p&gt;Nefryの詳細な仕様・動作などが参照できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wamisnet.github.io/Nefry_manual.pdf&#34;&gt;https://wamisnet.github.io/Nefry_manual.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;インターフェース&#34;&gt;インターフェース&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/97208/ba4a18a9-c793-bca0-5d3a-da47eea8ef71.png&#34; alt=&#34;Nefryの基板写真・各モジュールの説明入り&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefry_detail.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;技術仕様&#34;&gt;技術仕様&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;メインチップ: ESP8266(ESP-WROOM-02)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wi-Fi 802.11b/g/n(2.4GHz帯)&lt;/li&gt;
&lt;li&gt;セキュリティ WPA2/WPA/WEP/AES/TKIP&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;フルカラーLED*1&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Groveモジュールを最大4個接続
(UART, I2C, デジタル, アナログ, 各1ソケット)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GPIOピンソケット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アナログ入力(A0)&lt;/li&gt;
&lt;li&gt;I2C(D0, D1)&lt;/li&gt;
&lt;li&gt;SPI(D2, D3, D4, D5)&lt;/li&gt;
&lt;li&gt;3.3Vソケット*1, GNDソケット * 2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ユーザーが利用可能なスイッチ(SW) * 1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;特徴&#34;&gt;特徴&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;モバイルバッテリに挿した状態で動かせるので、電源のない場所でも動作可能&lt;/li&gt;
&lt;li&gt;スイッチとフルカラーLEDがついているので、新たなパーツを買わなくても通信実験などができる&lt;/li&gt;
&lt;li&gt;Groveシステムに対応、センサ類もGPIOソケットに直接挿せるため、はんだ付けは一切必要なし&lt;/li&gt;
&lt;li&gt;上級者はパーツの後付けによってmicroSDカードを利用可能（スイッチとの同時利用不可）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nefryでできること&#34;&gt;Nefryでできること&lt;/h2&gt;

&lt;p&gt;開発例の記事をまとめました！&lt;/p&gt;

&lt;h3 id=&#34;nefryとは何か-他のボードとどこが違うの&#34;&gt;Nefryとは何か？他のボードとどこが違うの？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefry_custom.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://liginc.co.jp/236620&#34;&gt;自作したオリジナルIoTデバイス「Nefry」とインターネットを繋いでみた&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;まずはnefryを開発するための環境を整える&#34;&gt;まずはNefryを開発するための環境を整える！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefry_try.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://liginc.co.jp/298161&#34;&gt;さくっと生活を便利にする！FRISKサイズのIoT向けデバイス「Nefry」を使ってみよう【環境構築編】&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ボタンを押したことをwebに反映させてみよう&#34;&gt;ボタンを押したことをWebに反映させてみよう&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefry_milkcocoa.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://liginc.co.jp/282918&#34;&gt;NefryとMilkcocoaを連携させて、WebサイトにリアルタイムでPush通知してみる&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;スマホやtwitterに通知を送ってみる&#34;&gt;スマホやTwitterに通知を送ってみる&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefry_ifttt.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://liginc.co.jp/263899&#34;&gt;Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;設計情報&#34;&gt;設計情報&lt;/h2&gt;

&lt;p&gt;回路図
&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefrykr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;配線図
&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefrycr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;公式リンク&#34;&gt;公式リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;プログラム共有サイト: &lt;a href=&#34;https://program.nefry.studio/&#34;&gt;Nefry Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;購入先：&lt;a href=&#34;https://dotstud.io/projects/nefry-connect-internet/&#34;&gt;Nefry v1.0 | dotstudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;説明書：&lt;a href=&#34;https://wamisnet.github.io/Nefry_manual.pdf&#34;&gt;Nefry v2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Wio Node設定 - Android編</title>
      <link>https://dotstud.io/docs/wionode-wiosetup/</link>
      <pubDate>Sat, 20 May 2017 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/wionode-wiosetup/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>Wio Node設定 - iOS編</title>
      <link>https://dotstud.io/docs/wionode-wiosetup/</link>
      <pubDate>Sat, 20 May 2017 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/wionode-wiosetup/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>電流と電圧</title>
      <link>https://dotstud.io/docs/aandv/</link>
      <pubDate>Thu, 10 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/aandv/</guid>
      
      <description>

&lt;h2 id=&#34;電圧-は-水圧-と同じようなもの&#34;&gt;「電圧」は、「水圧」と同じようなもの&lt;/h2&gt;

&lt;!--![(1)コンセントとか電池の画像？]()--&gt;

&lt;p&gt;「電圧」「電流」「抵抗」
日常生活で最もよく聞くのが、「電圧」だと思います。コンセントからとれる電気の「電圧」は100V(ボルト)、単3電池1本の「電圧」は1.5V(ボルト)、というのは多くの人が知っていることでしょう。&lt;/p&gt;

&lt;p&gt;この「電圧」として表される数値は電気そのものの強さではなく、 &lt;strong&gt;「電気を流そうとする力の強さ」&lt;/strong&gt; です。&lt;/p&gt;

&lt;!--![(2)アパートの階と蛇口から出る水の強さの違い]()--&gt;

&lt;p&gt;&lt;strong&gt;水道の話に置き換えてみると「電圧」は「水圧」に相当&lt;/strong&gt; します。例えば2階や3階建てのアパートのキッチンなどでは、どの部屋のも基本的には同じ蛇口が使われていますが、1階が最も水の流れ出る量が多く、上のほうの階に行くにつれて少なくなっていきます。（※注:給水塔が屋上になく、かつ古い建物の場合です）&lt;/p&gt;

&lt;p&gt;これは、 &lt;strong&gt;蛇口の大きさは同じであるが水圧が階数によって異なるため&lt;/strong&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;いわゆる-電気-とは-電流-のこと&#34;&gt;いわゆる「電気」とは、「電流」のこと&lt;/h2&gt;

&lt;p&gt;では「電流」は何なのかというと、先ほどの水道の話に置き換えると &lt;strong&gt;「電流」は水そのもの&lt;/strong&gt; となります。水圧の違いが水の流れ出る量に影響を与えるのと同様に、 &lt;strong&gt;電圧の違いは電流の量に影響を与えます。&lt;/strong&gt; 電圧が高いほど、電流量も多くなるわけです。&lt;/p&gt;

&lt;p&gt;我々人間は生きるために水が必要となります。例えばコップ1杯の水がほしいときに必要なのは「水圧」ではなく「水そのものの量」ですよね。電気を扱う機械も同じで、 &lt;strong&gt;動き続けるために必要なのは「電圧」ではなく「電流の量」です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;このことから、 &lt;strong&gt;「電気」の本質は「電流」のこと&lt;/strong&gt; だといえます。「電圧」はあくまで、「電流」を多く発生させるために必要な力だということですね。&lt;/p&gt;

&lt;h2 id=&#34;蛇口の口径を変えると-水量も変化する&#34;&gt;蛇口の口径を変えると、水量も変化する&lt;/h2&gt;

&lt;!--![(3)口径の大きい蛇口と小さい蛇口]()--&gt;

&lt;p&gt;さて、もしもあなたがアパートの上のほうの階に住んでいて、水圧が弱くて困っているとします。このときに水の量を増やす手段としてひとつ考えられるのは、 &lt;strong&gt;蛇口の径を大きくすること&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;電気においても同じで、もしも電圧が低ければ、 &lt;strong&gt;電流の通り道を太くしてやれば電圧を変えずに電流量を増やすことができます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この「電流の通り道」は、電子工作の世界では、主に「銅線」という銅でできた細い線のことをいいます。水と同様にこの線の太さなどで電流の流れ具合も変わるわけですが、このときの &lt;strong&gt;「電流の流れにくさ」を「抵抗」といいます。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;抵抗-は-交通渋滞-に似ている&#34;&gt;「抵抗」は「交通渋滞」に似ている&lt;/h2&gt;

&lt;!--![(4)道路の太さとクルマの量の図]()--&gt;

&lt;p&gt;例えば、クルマを運転して東京から名古屋に行く場合をイメージしてみましょう。道路幅が比較的広くて距離も短い「新東名高速道路」を使う場合と、道路幅が狭めで距離も長くなる「中央自動車道」では、どちらのほうがストレスがたまるでしょうか。ほとんどの場合は後者のほうが疲れやすく、時間もかかります。&lt;/p&gt;

&lt;p&gt;電気の場合もこれと同じで、 &lt;strong&gt;電流の流れ道は、幅が狭くて距離が長いほど電流が流れにくくなります。&lt;/strong&gt; これは &lt;strong&gt;「抵抗値が大きい」&lt;/strong&gt; と表現することができます。&lt;/p&gt;

&lt;!--![(5)直線な高速道路と、信号のある一般道路の比較の図]()--&gt;

&lt;p&gt;では東京から名古屋まで、高速道路を使わずに一般道路で行く場合も考えてみましょう。当然、一般道路は信号機が多数あったり、カーブがきつかったり、車線は一つしかなかったり、など、高速道路に比べると明らかに障害物が多いですね。これはもうどんな高速道路を使うよりも行きづらいことに疑いはありません。&lt;/p&gt;

&lt;p&gt;電気の場合は、通り道の幅や長さを変えたりせずとも、 &lt;strong&gt;その通り道の一部に電流の流れにくい「障害物」を入れることで「抵抗値」を大きくする&lt;/strong&gt; ことができます。このような処置がなされた電気の通り道となる部品のことを &lt;strong&gt;「抵抗器」&lt;/strong&gt; といいます。&lt;/p&gt;

&lt;h2 id=&#34;電圧-電流-抵抗-のそれぞれの関係&#34;&gt;電圧・電流・抵抗 のそれぞれの関係&lt;/h2&gt;

&lt;p&gt;以上のことから、「電圧」「電流」「抵抗」の3つには、次のような関係があることがわかっていただけたかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電圧が大きくなると、電流の量が増える&lt;/li&gt;
&lt;li&gt;抵抗が大きくなると、電流の量が減る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここで、電圧を記号E、電流を記号I、抵抗Rとしましょう。
するとこれら3つのあいだには次のような関係があります。&lt;/p&gt;

&lt;p&gt;I = E ÷ R&lt;/p&gt;

&lt;p&gt;この式は、 &lt;strong&gt;「オームの法則」&lt;/strong&gt; と呼ばれます。いわゆる「電気」は、「電流」のことであるというのは先述しました。&lt;/p&gt;

&lt;p&gt;つまり &lt;strong&gt;電気の強さは、電圧が大きいほど強く、抵抗が大きいほど弱くなる&lt;/strong&gt; ということになります。&lt;/p&gt;

&lt;h2 id=&#34;電子パーツは-電流-でうごく&#34;&gt;電子パーツは「電流」でうごく&lt;/h2&gt;

&lt;p&gt;さて、電子工作において、これら「電圧」「電流」「抵抗」を考えなければならない場面というのはどのようなときでしょうか。&lt;/p&gt;

&lt;!--![(6)電池とコンセントとLED等しいの図]()--&gt;

&lt;p&gt;先ほど、「電流」が「電気そのもの」ということは説明しました。つまり、電気で動くパーツは電流を基準に考えればよいわけです。（一部、電圧駆動というパーツも存在します）&lt;/p&gt;

&lt;p&gt;例えば、あるLEDを光らせたいとき、20mA（ミリアンペア）という量の電流が必要であるとします。この数値はパーツを買ったときに「定格電流」として表示されているのでチェックしておきましょう。&lt;/p&gt;

&lt;h3 id=&#34;電池でledを光らせてみよう&#34;&gt;電池でLEDを光らせてみよう&lt;/h3&gt;

&lt;!--![(7)20mAのLEDを光らせる]()--&gt;

&lt;p&gt;電源として用意できるのは乾電池やコンセントからの電気などですが、その電気に関する情報として知り得ることができるのは「電圧」のみです。&lt;/p&gt;

&lt;p&gt;例えば、乾電池4本（合計6V）で定格20mAのLEDを光らせる回路を作るとしましょう。この回路では、LEDの両端に6Vという「電気の圧力」がかかっていますが、実際に流れる電気である「電流」はどれほどになるのかわかりません。&lt;/p&gt;

&lt;!--![(8)上の回路図に抵抗を追加]()--&gt;

&lt;p&gt;そこで、LEDのどちらか側に「抵抗器」を置くと、もしも抵抗値がわかっていれば、その抵抗器から流れ出る電流はどれぐらいになるか計算することができます。その電流値が20mAで、LEDに流れ込むようにしてあげればうまく点灯しそうですよね？&lt;/p&gt;

&lt;p&gt;このとき「オームの法則」を利用して、 &lt;strong&gt;与えられた電圧から必要な電流を流せるだけの抵抗値を求めます。&lt;/strong&gt; すなわち、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;20mA = 6V ÷ R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;が成り立つようなRの値の抵抗器を、LEDの前か後に置いてあげれば良いわけです。&lt;/p&gt;

&lt;p&gt;ここで、mA(ミリアンペア)のm(ミリ)は、1000分の1を表す接頭辞です。これを考慮してRについて解くと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;R = 6V ÷ (20 × 0.001) = 300
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。また、抵抗値の単位はΩ(オーム)といいます。よって、乾電池4本6Vで20mA駆動のLED1個を光らせたいときは、「300Ωの抵抗が必要」となります。&lt;/p&gt;

&lt;h3 id=&#34;コンセントでもledを光らせてみよう&#34;&gt;コンセントでもLEDを光らせてみよう&lt;/h3&gt;

&lt;p&gt;今度はコンセントからの電気、100Vの電圧でLEDを光らせることを考えてみましょう。（ここでは、簡単のため直流100Vとして話をすすめます）&lt;/p&gt;

&lt;!--![(9)コンセントで20mAのLEDを光らせる]()--&gt;

&lt;p&gt;先ほどの乾電池の電圧6Vが100Vへと大幅に大きくなりました。この場合も、オームの法則を使って必要な抵抗器の値を求めてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;R = 100V ÷ (20 × 0.001) = 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5000Ω、ですね。ほとんどの場合は5000Ωとは言わず、1000を表す接頭辞のk(キロ)を用いて5kΩ(キロオーム)と表記されます。よって、5kΩの抵抗器を入れれば、コンセントからの100Vという大きな電圧でも同じLEDを光らせることが可能なのです。&lt;/p&gt;

&lt;p&gt;しかし実際には、電子工作でよく使われるような小さな抵抗器では、「定格電力」の値を大きくオーバーして焼き切れてしまうため、大電力用の大きな抵抗器を使う必要があります。これは後述する、電子パーツの「消費電力」が関係しています。&lt;/p&gt;

&lt;h2 id=&#34;どんなところにも抵抗は存在する&#34;&gt;どんなところにも抵抗は存在する&lt;/h2&gt;

&lt;p&gt;もしも抵抗器がない回路を作ると、電流はどれぐらい流れるのでしょうか？　抵抗器がもし無かったとしても、回路を構成する銅線・LED・電池に至るまで、電子パーツはすべて「抵抗値」を持っています。ここでオームの法則を考えてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I = E ÷ R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、回路全体の抵抗値がRだったとします。このRが限りなく0に近づくとすると、電流Iは電圧Eの値に関係なく、無限に上昇していきます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3ステップでわかる開発方法</title>
      <link>https://dotstud.io/docs/nefry_3step/</link>
      <pubDate>Tue, 19 Jul 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/nefry_3step/</guid>
      
      <description>

&lt;p&gt;基本的な始め方は以下の記事で紹介されています。
&lt;img src=&#34;https://dotstud.io/img/docs/nefry/nefry_try.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://liginc.co.jp/298161&#34;&gt;さくっと生活を便利にする！FRISKサイズのIoT向けデバイス「Nefry」を使ってみよう【環境構築編】&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、詳細な手順は各項目のドキュメントで確認してください。こちらでは簡単な開発の流れを説明します。&lt;/p&gt;

&lt;h3 id=&#34;1-arduino-ideとnefryライブラリをインストール&#34;&gt;1. Arduino IDEとNefryライブラリをインストール&lt;/h3&gt;

&lt;p&gt;Nefryは、「Arduino IDE」というArduino用の開発ソフトウェアで開発できます。Arduinoで開発をしたことがない方は、まずArduino IDEをダウンロード・インストールしましょう。次にIDE内からNefryライブラリをインストールします。&lt;/p&gt;

&lt;p&gt;詳細: &lt;a href=&#34;https://dotstud.io/docs/nefry-setup&#34;&gt;Arduino IDEのインストール&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-nefryをusb電源に接続してブラウザからwi-fiセットアップ&#34;&gt;2. NefryをUSB電源に接続してブラウザからWi-Fiセットアップ&lt;/h3&gt;

&lt;!-- ![モバイルバッテリにつないだNefryとPCのセットアップ画面]() --&gt;

&lt;p&gt;NefryのUSBをモバイルバッテリやPCのUSBポートに接続しましょう。これは電源専用となっています。
電源が入ったらLEDが光るので、NefryのアクセスポイントをPCから探して接続します。&lt;/p&gt;

&lt;p&gt;Nefryアクセスポイントに接続したままWebブラウザから &lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt; を参照して、コンソールが表示されれば各設定を調整します。（詳しくは上記の記事を参照ください）&lt;/p&gt;

&lt;h3 id=&#34;3-arduino-ideで出力したバイナリファイルを転送&#34;&gt;3. Arduino IDEで出力したバイナリファイルを転送&lt;/h3&gt;

&lt;p&gt;Arduino IDEで打ち込んだプログラムをあらかじめバイナリファイルにコンパイルしておきます。
Web上のコンソールから当該のバイナリファイルを選択してアップロードしたら書き込みは完了です。&lt;/p&gt;

&lt;p&gt;詳細: &lt;a href=&#34;https://dotstud.io/docs/nefry-usage&#34;&gt;プログラムの書き方&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wio Node設定 - 繋がらない場合</title>
      <link>https://dotstud.io/docs/wionode-wiosetup/</link>
      <pubDate>Sat, 20 May 2017 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/wionode-wiosetup/</guid>
      
      <description>

&lt;p&gt;Wio NodeはiOSアプリとAndroidアプリでWi-Fi設定を行いますが、稀にアプリの不具合でWi-Fi設定ができない場合があります。&lt;/p&gt;

&lt;p&gt;その場合に利用すると便利なのが&lt;a href=&#34;https://github.com/horihiro/wio-setup&#34;&gt;Wio-Setup&lt;/a&gt;というコマンドラインツールです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;スマートフォンアプリを使わずにパソコンを使ってWio NodeのWi-Fi設定ができます。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;wio-setupの使い方&#34;&gt;Wio-Setupの使い方&lt;/h2&gt;

&lt;p&gt;※以下はmacOS Sierra 10.12を利用しています。&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ npm i -g wio-setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールができたら確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wio-setup -h

  Usage: wio-setup [options]

  Options:

    -h, --help              output usage information
    -V, --version           output the version number
    -e, --email [value]     email address
    -p, --password [value]  password
    -s, --wifiSsid [value]  wifi ssid
    -P, --wifiPwd [value]   wifi password
    -n, --wioName [value]   wio-node name
    -l, --list              list your wio-node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでインストールは完了です。&lt;/p&gt;

&lt;h3 id=&#34;認証&#34;&gt;認証&lt;/h3&gt;

&lt;p&gt;事前にWio Linkアプリからユーザー登録をしておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wio-setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で実行できます。以下は対話式のインターフェイスで質問に答えていきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;email: &amp;lt;登録したメールアドレス&amp;gt;
password: &amp;lt;登録したパスワード&amp;gt;
wifi ssid: &amp;lt;現時点でパソコンが接続しているSSID&amp;gt;
wifi password for &#39;&amp;lt;SSID&amp;gt;&#39;: &amp;lt;SSIDのパスワード&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでエンターを押すと、自分が過去に登録したWio Nodeのリストが表示されます。今回は新規のWio Nodeデバイスなので&lt;code&gt;0&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1] Wio Node 2
[2] Wio Node 3
[3] Wio Node 17
[0] creating new one

select [0-3]: &amp;lt;数字を入力&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にWio Nodeに名前を付けます。今回は&lt;code&gt;Wio-n0bisuke&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wio-node name: &amp;lt;自分のWio Nodeに名前を付ける&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまで出来たら、Wio Nodeの左側のボタンを4秒間長押ししましょう。
そうすると、LEDの点滅パターンが緩やかになり、Wio Node自体がWi-Fiのアクセスポイントとして機能します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/9659129f3236e924011d2685950a79e2.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                          　    ／＼
                              ／　／＼
hold down this button      =&amp;gt; |　＼／|
 until blue-light breathes    ＼　　／
                              　＼／
                           　    ┃

connect to Wio-Node AP, &#39;Wio_XXXXXX&#39;

checking SSID your machine connected...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/095/06_func.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;パソコンから周辺のアクセスポイントを確認してみると&lt;code&gt;Wio_XXXXXX&lt;/code&gt;というSSIDがあることが確認できます。これはWio Node自身がWi-Fiのアクセスポイントになっていて、情報の書き込みを受け付けている状態です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7092c4b2695bb83e49d52ae018c2ce11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Wio_XXXXXX&lt;/code&gt;にパソコンから接続してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/0b573c2df4e16443ae579037d33f5170.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接続するとターミナルで以下の情報が表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;now connected to SSID &#39;Wio_XXXXXX&#39;, ok? [Y/n]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Y&lt;/code&gt;を入力して進みます。
接続が完了すると以下の情報が表示され、アクセストークンの情報も表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;done.
access_token for &#39;wio-n0bisuke&#39; is &#39;xxxxxxxxxxxxxxxxxxxxx&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;繋がらない場合は再度&lt;code&gt;Y&lt;/code&gt;を押して再接続してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;確認&#34;&gt;確認&lt;/h2&gt;

&lt;p&gt;成功するとアプリ画面に名前を設定したWio Nodeデバイスの項目が追加されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/937a9d95323200c133a1b689d4fa4ede.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これが確認できれば成功です。&lt;/p&gt;

&lt;h2 id=&#34;謝辞&#34;&gt;謝辞&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/hori__hiro&#34;&gt;@horihiro&lt;/a&gt;さんが&lt;a href=&#34;https://iotlt.connpass.com/event/52082/&#34;&gt;#iotlt vol27&lt;/a&gt;で公開して下さいました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/iotlt?src=hash&#34;&gt;#iotlt&lt;/a&gt; 今朝リリースされたそうです❗ &lt;a href=&#34;https://t.co/HuB2BNIaBL&#34;&gt;pic.twitter.com/HuB2BNIaBL&lt;/a&gt;&lt;/p&gt; 大熊 元気 (@JNTEST23) &lt;a href=&#34;https://twitter.com/JNTEST23/status/865524586166665218&#34;&gt;2017年5月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>回路図</title>
      <link>https://dotstud.io/docs/circuit/</link>
      <pubDate>Sat, 12 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/circuit/</guid>
      
      <description>

&lt;p&gt;回路図とは、電子部品同士をどのように繋ぐのか図解したものです。&lt;/p&gt;

&lt;p&gt;回路図があることで、自分が見たときはもちろん他の人に伝える時にも &lt;strong&gt;間違えることなく電子回路を組み立てる&lt;/strong&gt; ことができます。&lt;/p&gt;

&lt;h2 id=&#34;回路図をみてみよう&#34;&gt;回路図をみてみよう&lt;/h2&gt;

&lt;h3 id=&#34;一般的な回路図&#34;&gt;一般的な回路図&lt;/h3&gt;

&lt;p&gt;回路図にもいくつか種類があります。下記のような、線と簡単な図形で描かれたシンプルなものが一般的です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/circuit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このような回路図を読むことができると、インターネット上にある様々な回路を組むことができます。
しかし、事前知識なしに読むのは難しいです。&lt;/p&gt;

&lt;p&gt;上のような回路図を読みたい場合、詳しく説明してくれるサイトもあるのでそちらを参照してください。&lt;/p&gt;

&lt;h3 id=&#34;回路図作成ソフト-fritzing&#34;&gt;回路図作成ソフト『Fritzing』&lt;/h3&gt;

&lt;p&gt;そこで今回は、『Fritzing』と呼ばれる回路図作成ソフトの回路図を見てみようと思います。&lt;/p&gt;

&lt;p&gt;このソフトで描かれた回路図の特徴は、&lt;strong&gt;電子部品をイラストで表してくれるところ&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/illust.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ボタンを押すとLEDが光る回路を組んでみました。実は、&lt;strong&gt;上の回路図とこのイラストの回路図は同じことを表しています。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;多くの場合は前述のシンプルな回路図で表記されるため、読める方がよいとは思います。&lt;/p&gt;

&lt;p&gt;「この図形ってなんだっけ？」という時にはFritzingを使って検索してみるとよいでしょう。&lt;/p&gt;

&lt;h2 id=&#34;回路図でよくみる記号&#34;&gt;回路図でよくみる記号&lt;/h2&gt;

&lt;h3 id=&#34;電源&#34;&gt;電源&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/battery.png&#34; alt=&#34;&#34; /&gt;
電池やUSBなどから供給される電気の供給源です。プラスとマイナスがあり、横に２本線があるうち長い方がプラス、短い方がマイナスとなります。&lt;/p&gt;

&lt;h3 id=&#34;コンデンサ&#34;&gt;コンデンサ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/condenser.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;コンデンサは電気を蓄えたり放出したりする電子部品です。プラス・マイナスの極性が決まっているものもあるので注意が必要です。&lt;/p&gt;

&lt;h3 id=&#34;抵抗&#34;&gt;抵抗&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/r.png&#34; alt=&#34;&#34; /&gt;
抵抗は電流の流れを抑えることができます。LEDと一緒に使うことで、LEDが焼けることを保護することができます。&lt;/p&gt;

&lt;h3 id=&#34;スイッチ&#34;&gt;スイッチ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/switch.png&#34; alt=&#34;&#34; /&gt;
オン、オフを切り替えすることができるものです。スイッチにも種類があるので、どのようなことがしたいかでスイッチを変えるとよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;led&#34;&gt;LED&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/circuit/led.png&#34; alt=&#34;&#34; /&gt;
LEDは小さい電力で操作でき、強く光らせることができます。明るいものやマトリックス状になったものなどがあります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Arduino IDEのインストール</title>
      <link>https://dotstud.io/docs/nefry-setup/</link>
      <pubDate>Tue, 19 Jul 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/nefry-setup/</guid>
      
      <description>

&lt;p&gt;Arduinoとは、電子工作に興味を持った方やハードウエアを使って簡単に作品を作ってみたい方におすすめする電子工作のプラットフォームです。
Arduinoを使うメリットは、ハードウエアの難解なところを簡単な Arduino 言語と呼ばれるもので開発できるようになるところです。ArduinoIDEとはそのArduino言語を書くことができるツールのことです。
NefryもArduinoIDEをつかってプログラムします。&lt;/p&gt;

&lt;h3 id=&#34;ダウンロード&#34;&gt;ダウンロード&lt;/h3&gt;

&lt;p&gt;Arduinoの&lt;a href=&#34;https://www.arduino.cc/&#34;&gt;公式サイト&lt;/a&gt;からDownloadをクリックしてArduinoIDEをダウンロードします。
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic000.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;どのバージョンをダウンロードするか選択します、現在(2016/11/22)最新の1.6.12をお勧めします。
適切なものを選んでダウンロードしてください。
Windowsであれば、&lt;strong&gt;Windows　Installer&lt;/strong&gt; のものをオススメします。
Macであれば、&lt;strong&gt;Mac OS X&lt;/strong&gt; をインストールしてください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;クリックするとこのようなページが表示されます。JustDownloadをクリックするとダウンロードが開始されます。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic102.png&#34; alt=&#34;&#34; /&gt;
無事にダウンロードができれば次はインストールしていきます。&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;Windows、Macとも少し画面構成は異なりますが、基本的には同じ流れでインストールしていきます。&lt;/p&gt;

&lt;p&gt;これからArduinoIDEのインストールを進めていきます。
ライセンス表示があるので問題なければ&lt;strong&gt;I Agree&lt;/strong&gt;をクリックして次に進みます。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic008.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
オプション設定をどのようにするのか選択できますが、このままで問題ないのでそのまま&lt;strong&gt;Next&lt;/strong&gt;をクリックして次に進みます。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic009.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
インストール先を指定できますが、そのままで問題ないので&lt;strong&gt;Next&lt;/strong&gt;をクリックして次に進みます。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic010.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
インストールが始まりますのでしばらくお待ちください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic011.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
インストールが完了すると&lt;strong&gt;Completed&lt;/strong&gt;と表示されたらインストール完了です！&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic012.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;インストール完了したので次の作業に進みます！&lt;/p&gt;

&lt;h3 id=&#34;arduino-ideを触ってみよう&#34;&gt;Arduino IDEを触ってみよう&lt;/h3&gt;

&lt;p&gt;インストール完了するとデスクトップにこのようなアイコンができていると思います。
このアイコンをクリックしてArduinoIDEが起動させてください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic014.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
クリックするとこのような画面が出てArduinoIDEの起動準備が始まりますのでしばらくお待ちください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic013.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
このような画面が表示されると準備完了です。
この画面でNefryで動かすプログラムを書いていきます。
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic015.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
これでArduinoIDEのインストール完了です。お疲れ様でした。&lt;br /&gt;
次はNefryボードのインストールをしていきます。&lt;/p&gt;

&lt;h3 id=&#34;nefryを追加するための初期設定&#34;&gt;Nefryを追加するための初期設定&lt;/h3&gt;

&lt;p&gt;ArduinoIDEにもともとNefryはインストールされていないので、ArduinoIDEでプログラムを書けるようにボードのインストール作業をしていきます。&lt;/p&gt;

&lt;p&gt;それでは早速インストールしていきます。
ArduinoIDEのファイル内にある環境設定の項目を開きます。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic016.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
環境設定を開いて&lt;strong&gt;追加のボードマネージャーのURL&lt;/strong&gt; に次のURL を入力します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://wamisnet.github.io/package_nefry_index.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;入力が終わったら OK をクリックします。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic017.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
入力が終わったら、ツール内にあるボード選択のボードマネージャーをクリックします。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic022.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
ボードマネージャーを開くとこのような画面が出てきます。
おそらくNefryが下の方に追加されていると思います。検索欄もあるのでそこに&lt;strong&gt;Nefry&lt;/strong&gt;と入力するといいかもしれません。&lt;/p&gt;

&lt;p&gt;もしNefryが見つからない場合、もう一度先ほどのURLを正しく入力できているか確認してください。&lt;/p&gt;

&lt;h3 id=&#34;nefryを新規インストールする&#34;&gt;Nefryを新規インストールする&lt;/h3&gt;

&lt;p&gt;現在(2016/7/26)の最新バージョン(1.4.0)のボードが選択されているので、そのままインストールをクリックしてください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic019.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
必要なファイルをインターネットからダウンロードしています。回線状態によっては時間が掛かる場合があります、しばらくお待ちください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic020.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
インストールが完了すると&lt;strong&gt;INSRALLED&lt;/strong&gt;と表示されインストールが完了します。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic021.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
インストールが完了すると、ツール内にあるボードからNefryが選択できるようになっているはずです！&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic023.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
これでボードのインストールも完了ですので、次はついにプログラムを書いていきます。
基本的にはここまでの設定は初回のみですので次回から使う時はプログラムを書くところから初めてもらうことができます。&lt;/p&gt;

&lt;h3 id=&#34;nefryのライブラリを更新する&#34;&gt;Nefryのライブラリを更新する&lt;/h3&gt;

&lt;p&gt;更新する場合、古いバージョンのボードが残っていると不具合が発生するので、先にアンインストールをします。&lt;/p&gt;

&lt;p&gt;Nefryのボードを選択した時に&lt;strong&gt;削除&lt;/strong&gt;というボタンがあるのでそこをクリックします。
そのまましばらく待つとアンインストールが完了します。
それから上に書いてある新規インストールの手順に従いボードのインストールをしてください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic018.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>消費電力</title>
      <link>https://dotstud.io/docs/consumption/</link>
      <pubDate>Sun, 13 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/consumption/</guid>
      
      <description>

&lt;p&gt;消費電力とは、「電気回路で消費される電力、つまり &lt;strong&gt;電気回路を動かすために必要な電気の量&lt;/strong&gt; を指します。&lt;/p&gt;

&lt;h2 id=&#34;消費電力の計算&#34;&gt;消費電力の計算&lt;/h2&gt;

&lt;p&gt;消費される電気の量は、以下の式で表すことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;電圧[V:ボルト] × 電流[A] = 消費電力[W:ワット]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;電圧が「電気を発生させる力の大きさ」、電流が「流れる電気そのもの」です。&lt;/p&gt;

&lt;p&gt;詳しくは「&lt;a href=&#34;https://dotstud.io/docs/aandv/&#34;&gt;電流と電圧&lt;/a&gt;」の項目を参照してください。&lt;/p&gt;

&lt;p&gt;白熱電球を例に考えてみましょう。電球の表面に「100V 60W」という表記がある場合、この電球は &lt;strong&gt;100[V]の電圧をかけたときに60[W]の電力を消費する&lt;/strong&gt; ことを表します。&lt;/p&gt;

&lt;h2 id=&#34;消費電力量&#34;&gt;消費電力量&lt;/h2&gt;

&lt;p&gt;単位時間あたりに消費される電気の量は「消費電力量」と呼ばれ、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;電力[W] × 時間[h] = 消費電力量[Wh:ワットアワー]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で表すことができます。&lt;/p&gt;

&lt;p&gt;先程の白熱電球を2時間点灯させた場合の消費電力量は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;60[W] × 2[h] = 120[Wh]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;h2 id=&#34;消費電力が大きい-たくさん電気を使う&#34;&gt;消費電力が大きい＝たくさん電気を使う&lt;/h2&gt;

&lt;p&gt;消費電力が大きいということは、それだけ多くの電気を使うということです。&lt;/p&gt;

&lt;p&gt;乾電池やモバイルバッテリーは持っている電気の量が少ないので、消費電力の大きい電子部品を動かす場合は &lt;strong&gt;回路全体の稼働時間が短くなってしまう&lt;/strong&gt; ことに注意してください。&lt;/p&gt;

&lt;p&gt;Arduino等のマイコンボードを省電力で使いたい場合、マイコンボードの &lt;strong&gt;SLEEP機能&lt;/strong&gt; が便利です。これはマイコンボードの電源は保ったまま必要な時だけ復帰する仕組みで、極力電力消費を抑えることができます。&lt;/p&gt;

&lt;p&gt;マイコンボードの形式や設定方法にもよりますが、乾電池1本で数ヶ月〜年単位で電力を供給することが可能になります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>プログラムの書き方</title>
      <link>https://dotstud.io/docs/nefry-usage/</link>
      <pubDate>Tue, 19 Jul 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/nefry-usage/</guid>
      
      <description>

&lt;h2 id=&#34;実際にコードを書いてみる&#34;&gt;実際にコードを書いてみる&lt;/h2&gt;

&lt;p&gt;実際にプログラムを書いてNefryを操っていきます。&lt;/p&gt;

&lt;h3 id=&#34;arduinoのプログラムって&#34;&gt;Arduinoのプログラムって？&lt;/h3&gt;

&lt;p&gt;NefryのプログラムはArduinoのプログラムと同じようにかけます。&lt;/p&gt;

&lt;p&gt;ArduinoIDEが起動するとプログラムを入力するところに初めからこのようなプログラムが書いてあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void setup(){

}

void loop(){

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;簡単に説明していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void setup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここの部分では&lt;strong&gt;起動時に一度だけ&lt;/strong&gt;行われる処理を書きます。
例えば、入出力ピンの設定や温度センサなどセンサ類の初期設定などを入力します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void loop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここの部分では&lt;strong&gt;起動中ずっと繰り返し&lt;/strong&gt;行われる処理を書きます。
例えば、LEDの点滅やセンサーデータの取得などを入力します。&lt;/p&gt;

&lt;p&gt;Nefryではこのsetupとloopをうまく活用してプログラムを書いていきます。
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic025.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ledを使ってみる&#34;&gt;LEDを使ってみる&lt;/h3&gt;

&lt;p&gt;それでは、実際にNefryで動くプログラムを書いてみようと思います。&lt;/p&gt;

&lt;p&gt;今回は、NefryについているフルカラーのLEDをランダムに光らせてみようと思います。
前もって、ArduinoIDEに書いてある文をすべて消しておいてください。&lt;/p&gt;

&lt;p&gt;準備ができたら下のプログラムをコピーしてArduinoIDEの方に張り付けてください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;Nefry.h&amp;gt;
//フルカラーLED　ランダムにカラーが変わります。
void setup() {
  Nefry.println(&amp;quot;フルカラーLED!&amp;quot;);
  randomSeed(analogRead(A0));
}
int red,green,blue;
void loop() {
  red=random(255);//random関数は0-255の数値をランダムに返します。
  green=random(255);
  blue=random(255);
  Nefry.setLed(red,green,blue);//LEDがランダムに点灯します。
  String color=&amp;quot;Red:&amp;quot;;color+=red;
  color+=&amp;quot; Green:&amp;quot;;color+=green;
  color+=&amp;quot; Blue:&amp;quot;;color+=blue;
  Nefry.println(color);//Nefry consoleで色を表示
  Nefry.ndelay(1000);//1秒待つ
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ところどころで使われているNefry関数については&lt;a href=&#34;http://qiita.com/wamisnet/items/e44812eb6d6fded7af26&#34;&gt;こちら&lt;/a&gt;にまとめてあるので興味があればご覧ください。
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic024.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
プログラムを保存します。
Nefryに書き込むプログラムがその指定した場所に保存されますので、保存する場所を覚えていてください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic028.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
それではプログラムが書き終わり、保存する先も決まったら&lt;strong&gt;スケッチ内のコンパイルしたバイナリを出力&lt;/strong&gt;をクリックしてください。
これでNefryに書き込めるようにファイルを変換しています。
少々時間が掛かりますがしばらくお待ちください&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic026.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;プログラムに問題がないとコンパイルが完了しました。と表示されます。&lt;br /&gt;
プログラムに問題があるとこの部分がおかしいとエラー表示が出ます。&lt;/p&gt;

&lt;p&gt;そのエラー表示を見てプログラムを修正します。&lt;br /&gt;
よくある間違いとして、&lt;code&gt;;&lt;/code&gt;がなかったり&lt;code&gt;()&lt;/code&gt;が全角だったりするので見直してみてください。&lt;/p&gt;

&lt;p&gt;これでプログラムの準備は整いましたので次にNefryにプログラムを書き込んで実行します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic027.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;nefryに書き込む&#34;&gt;Nefryに書き込む&lt;/h3&gt;

&lt;p&gt;ついにNefryにプログラムを書き込みます。&lt;/p&gt;

&lt;p&gt;Nefryの便利なところを解説しつつ、プログラムを書き込んでいく流れを解説していきます。&lt;/p&gt;

&lt;p&gt;NefryをモバイルバッテリーやPCのUSB端子に接続してください。
NefryがWiFiの信号を出しているので、そのWiFiに接続します。
しばらくしてWiFiを検索すると&lt;strong&gt;Nefry-○○○○&lt;/strong&gt; という名前があると思うので、そのWiFiに接続してください。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic030.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
接続すると自動的にこのページに移動します。
時にうまくいかないときがあるのでその時はこちらのURLを入力してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nefryのメインページになっています。このページから他のページに移動して様々な設定などをすることができます。
それでは、プログラムを書き込むためにNefryを書き込みモードにします。
書き込みモードにすることでNefryがプログラムの書き込みの準備をします。
そのモードに変更するために&lt;strong&gt;setup Module&lt;/strong&gt;をクリックします。&lt;br /&gt;
(書き込みモードとは、NefryのCoreプログラムだけ動作し、ユーザが書き込んだプログラムを実行しないモードです。)&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic031.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;setup ModuleではNefryに関する様々な設定をすることができます。
今回は書き込みモードに変更するので、&lt;strong&gt;Write mode&lt;/strong&gt; をクリックしてください。
そうするとNefryが再起動するので、再起動が終わったら書き込みモードになっています。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic035.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
せっかくなので、setup Moduleの&lt;strong&gt;Next page&lt;/strong&gt;をクリックするとどうなるのか説明します。&lt;/p&gt;

&lt;p&gt;MacアドレスやIPアドレスなどインターネットにかかわる情報が表示されます。
アクセス制限かけている場合などここを見ていただくとよいかと思います。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic036.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
それではNefryが書き込みモードになったところでプログラムを書き込んでいきましょう。&lt;/p&gt;

&lt;p&gt;メインページの&lt;strong&gt;upload Sketch&lt;/strong&gt;をクリックしてこのページを開きます。
開いたらページ中央にある&lt;strong&gt;参照&lt;/strong&gt;となっているボタンをクリックしてファイルを選びます。
(chromeなどブラウザによっては表示が異なることがあります。)&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic032.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
先ほどプログラムを保存した場所を開き、&lt;strong&gt;arduino.bin&lt;/strong&gt; となっているファイルを選びます。
(ちゃんと確認してアップデートしてください。もし間違えた場合、最悪起動しなくなることもありえます。)&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic033.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
ちゃんと選べるとファイルの場所を示す表示が出るようになります。ここまで来たらあとは&lt;strong&gt;Upload&lt;/strong&gt;をクリックするだけです！&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic034.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
アップロードが完了すると自動的にNefryが再起動してプログラムが更新されます。
これでNefryのプログラムを書きかえることができました！
おそらくLEDがカラフルに光っているはずです。&lt;/p&gt;

&lt;p&gt;Nefryの便利な機能をあと少し紹介します。
&lt;strong&gt;Nefry Console&lt;/strong&gt; といってNefryの状態を確認することができるページです。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic037.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;Web Sketch Download&lt;/strong&gt; といってNefryのプログラムをwebからダウンロードして更新することができるページです。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic038.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;setup WiFi&lt;/strong&gt; といってNefryが接続するWiFiを設定することができるページです。
設定すれば、インターネットに接続してMilkcocoaやIFTTTといったwebサービスと接続することができるようになります。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/pic039.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;実際に動かしてみる&#34;&gt;実際に動かしてみる&lt;/h3&gt;

&lt;p&gt;先ほどのプログラムを書き込むとLEDがランダムに光るデモです。&lt;br /&gt;
&lt;img src=&#34;https://wamisnet.github.io/pic/ren/led.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>デジタルとアナログ</title>
      <link>https://dotstud.io/docs/digitalanalog/</link>
      <pubDate>Sun, 13 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/digitalanalog/</guid>
      
      <description>

&lt;p&gt;デジタル、アナログと聞いて何が思い浮かぶでしょうか？&lt;/p&gt;

&lt;p&gt;テレビの種類にも使われますが、今回は電気的な違いについて説明していきます。&lt;/p&gt;

&lt;h2 id=&#34;デジタルとアナログの違いって&#34;&gt;デジタルとアナログの違いって？&lt;/h2&gt;

&lt;p&gt;一番の違いは、電圧の変化をグラフにしたときに分かります。&lt;/p&gt;

&lt;p&gt;もともと以下のようなアナログの信号があるとします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/digitalanalog/analog.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アナログの信号をデジタルにするとこのようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/digitalanalog/digital.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;見比べると、デジタルはある（1）ない（0）のどちらかで表現されるため、シンプルなデータになっています。&lt;/p&gt;

&lt;p&gt;これによってあるかないかはハッキリと見て分かるのですが、 &lt;strong&gt;もともとの値がどれくらい大きかったのか、小さかったのかは分からなくなってしまいました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;逆に、アナログはどれだけ大きい・小さいかは分かるのですが、 &lt;strong&gt;データは大きくなります。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;マイコンボードでみるデジタル-アナログ&#34;&gt;マイコンボードでみるデジタル、アナログ&lt;/h2&gt;

&lt;p&gt;どのような違いがあるか分かったところで、マイコンボードでその値を取得する方法を説明します。&lt;/p&gt;

&lt;p&gt;マイコンボードの種類により詳細な手順は変わるので注意してください。今回のプログラムについての説明は全て、Arduino Unoに基づいたものとします。&lt;/p&gt;

&lt;p&gt;デジタル、アナログの入出力については、指定されたピンでやりとりします。&lt;/p&gt;

&lt;h2 id=&#34;デジタルの入出力&#34;&gt;デジタルの入出力&lt;/h2&gt;

&lt;h3 id=&#34;入力&#34;&gt;入力&lt;/h3&gt;

&lt;p&gt;Arduino Unoでは、digitalRead関数を使ってある（HIGH）ない（LOW）を取得できます。&lt;/p&gt;

&lt;p&gt;このときに注意しなくてはいけないのが閾値の値です。&lt;/p&gt;

&lt;p&gt;Arduino Unoの場合は閾値は2.5vです。2.5vを超えるとHIGHになり、それ以下はLOWとなります。&lt;/p&gt;

&lt;p&gt;この閾値はマイコンボードにより異なるので注意が必要です。&lt;/p&gt;

&lt;p&gt;スイッチなどを付けて、押された・押されてないという状態を取得するときに、ノイズによって押していないのに押したと誤検知することがあります。&lt;/p&gt;

&lt;p&gt;その場合は、プルアップという方法を利用することで誤検知を減らすことができます。&lt;/p&gt;

&lt;h3 id=&#34;出力&#34;&gt;出力&lt;/h3&gt;

&lt;p&gt;Arduino Unoでは、digitalWrite関数を使ってある（HIGH）ない（LOW）を出力できます。&lt;/p&gt;

&lt;p&gt;HIGHのときに5vが出力され、LOWのとき0vが出力されます。&lt;/p&gt;

&lt;p&gt;こちらもマイコンボードによって異なるので注意してください。&lt;/p&gt;

&lt;h2 id=&#34;アナログの入出力&#34;&gt;アナログの入出力&lt;/h2&gt;

&lt;h3 id=&#34;入力-1&#34;&gt;入力&lt;/h3&gt;

&lt;p&gt;Arduino Unoでは、analogRead関数により0（0v）-1023（5v）の1024段階で値を取得できます。&lt;/p&gt;

&lt;p&gt;入力する電圧が5vを超える場合、抵抗で分圧をすることで入力することができます。&lt;/p&gt;

&lt;p&gt;分圧については、計算してくれるサイトなどもあるので参考にしてください。&lt;/p&gt;

&lt;h3 id=&#34;出力-1&#34;&gt;出力&lt;/h3&gt;

&lt;p&gt;Arduino Unoではアナログ出力はできません。&lt;/p&gt;

&lt;p&gt;しかしPWMと呼ばれる方式により、擬似的にアナログ出力をすることができます。　&lt;/p&gt;

&lt;p&gt;PWMの出力は、analogWrite関数により可能となります。0（0v）-255（5v）の256段階で指定することが可能です。&lt;/p&gt;

&lt;p&gt;それによりLEDをふんわり点けることなどができるようになります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Console関連の関数</title>
      <link>https://dotstud.io/docs/nefry-console/</link>
      <pubDate>Tue, 19 Jul 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/nefry-console/</guid>
      
      <description>

&lt;p&gt;Consoleに関連する関数をまとめてみました。&lt;br /&gt;
Nefryのwebconsoleとserialに文字を表示します。Serialはデフォルトでは115200bpsで通信します。&lt;/p&gt;

&lt;h3 id=&#34;print&#34;&gt;print&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/2.3.0u.png&#34; alt=&#34;2.3.0u&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nefryのwebconsoleとserialに文字を表示します。&lt;strong&gt;改行なし&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/print.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;println&#34;&gt;println&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/2.3.0u.png&#34; alt=&#34;2.3.0u&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nefryのwebconsoleとserialに文字を表示します。&lt;strong&gt;改行あり&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/println.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;available&#34;&gt;available&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/2.3.0u.png&#34; alt=&#34;2.3.0u&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nefryのwebconsoleで入力された文字数を返します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/available.png&#34; alt=&#34;2.3.0u&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;read&#34;&gt;read&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/2.3.0u.png&#34; alt=&#34;2.3.0u&#34; /&gt;&lt;br /&gt;
Nefryのwebconsoleで入力された文字を返します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefry/read.png&#34; alt=&#34;2.3.0u&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>直流と交流</title>
      <link>https://dotstud.io/docs/dirandalt/</link>
      <pubDate>Mon, 14 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/dirandalt/</guid>
      
      <description></description>
    </item>
    
  </channel>
</rss>