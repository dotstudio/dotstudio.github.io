<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/categories/index.xml</link>
    <description>Recent content on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <atom:link href="/categories/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node.jsアプリケーションからMySQLにアクセスする</title>
      <link>https://dotstud.io/blog/operate-mysql-from-nodejs/</link>
      <pubDate>Tue, 03 Jan 2017 10:05:15 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/operate-mysql-from-nodejs/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioの代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/howto-setup-azure-mysql/&#34;&gt;前回の記事(AzureでMySQLのセットアップと接続方法)&lt;/a&gt;に続きMySQLの話です。&lt;/p&gt;

&lt;p&gt;今日は初心者向けに、Node.jsからMySQLにアクセスする方法をチュートリアル的に紹介します。&lt;/p&gt;

&lt;h2 id=&#34;mysqlモジュール-ドライバー&#34;&gt;MySQLモジュール（ドライバー）&lt;/h2&gt;

&lt;p&gt;こちらのモジュールを利用します。
おそらく一番利用されているMySQLのNode.jsモジュール（ドライバー）になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/mysql&#34;&gt;https://www.npmjs.com/package/mysql&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm init --yes
npm i mysql --save 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでインストールはできました。&lt;/p&gt;

&lt;h2 id=&#34;mysqlデータベースを用意&#34;&gt;MySQLデータベースを用意&lt;/h2&gt;

&lt;p&gt;接続を試す前にデータベースが用意できているか確認しましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/howto-setup-azure-mysql/&#34;&gt;前回の記事(AzureでMySQLのセットアップと接続方法)&lt;/a&gt;などを参照してみましょう。&lt;/p&gt;

&lt;p&gt;仮データをいれておきましょう。&lt;/p&gt;

&lt;p&gt;今回は&amp;rsquo;test_user&amp;rsquo;テーブルを作って一件データを入れておきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/068/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;crud-クラッド-とsql&#34;&gt;CRUD（クラッド）とSQL&lt;/h2&gt;

&lt;p&gt;データアクセスの前に&lt;a href=&#34;http://e-words.jp/w/CRUD.html&#34;&gt;CRUD&lt;/a&gt;について少し触れます。
CRUDはデータベースシステムなどの基本概念であるデータの作成（Create）、読み出し（Read）、更新（Update）、削除（Delete）を表す言葉です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://se-java-school.com/itstudy/database/intro_db_jdbc/sqltext_01.php&#34;&gt;SQL&lt;/a&gt;はデータベースを操作するための言語です。
MySQLの操作の最初のステップとして、SQLを使用してCRUDを実現してみましょう。&lt;/p&gt;

&lt;p&gt;CRUDはSQL構文では、以下のような形で対応しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create -&amp;gt; INSERT文&lt;/li&gt;
&lt;li&gt;Read -&amp;gt; SELECT文&lt;/li&gt;
&lt;li&gt;Update -&amp;gt; UPDATE文&lt;/li&gt;
&lt;li&gt;Delete -&amp;gt; DELETE文&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この4つの構文に対応してコードを書いていきましょう。&lt;/p&gt;

&lt;h2 id=&#34;接続テストとread-select文&#34;&gt;接続テストとRead（SELECT文）&lt;/h2&gt;

&lt;p&gt;まずはNode.jsからMySQLへの接続テストをしつつ、データ表示のReadにあたるSELECT文を使います。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&#34;http://www.dbonline.jp/mysql/select/index1.html&#34;&gt;http://www.dbonline.jp/mysql/select/index1.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;app.jsを作成しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js

&#39;use strict&#39;

const mysql      = require(&#39;mysql&#39;);
const connection = mysql.createConnection({
    host     : &#39;hoge.hoge.com&#39;,
    user     : &#39;n0bisuke&#39;,
    password : &#39;n0bipass&#39;,
    database : &#39;nobidb&#39;
});

//ここからMySQLアクセス
connection.connect();

let sql = &#39;select * from nobidb.test_user&#39;;
connection.query(sql, (err, rows, fields) =&amp;gt; {
  if (err) throw err; 
  console.log(&#39;test_userテーブル: &#39;, rows);
});

connection.end();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7〜10行目について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host: MySQLのホスト名です。仮にhoge.hoge.comを指定しています。&lt;/li&gt;
&lt;li&gt;user: MySQLに登録してあるユーザー名です。仮にn0bisukeを指定しています。&lt;/li&gt;
&lt;li&gt;password: MySQLに登録してあるパスワードです。仮にn0bipassを指定しています。&lt;/li&gt;
&lt;li&gt;database: MySQLで利用するDB名です。仮にnobidbを指定しています。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;16行目がSQLです。&lt;/p&gt;

&lt;p&gt;SELECT文は「&lt;code&gt;select カラム名 from DB名.テーブル名&lt;/code&gt;」が基本になります。
全てのカラムを取得する場合は&lt;code&gt;*&lt;/code&gt;を指定します。&lt;/p&gt;

&lt;p&gt;16行目のSQL文は「&lt;code&gt;nobidb&lt;/code&gt;データベースの&lt;code&gt;test_user&lt;/code&gt;テーブルの全てのカラムの情報を取得する」という内容になります。&lt;/p&gt;

&lt;p&gt;それでは実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js
test_userテーブル:  [ RowDataPacket { id: 11, name: &#39;n0bisuke&#39;, created: 2017-01-01T21:35:26.000Z } ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで無事にNode.jsとMySQLの接続が確立され、予め登録していたtest_userテーブルの中身が表示（Read）されました。&lt;/p&gt;

&lt;h2 id=&#34;create-insert文&#34;&gt;Create（INSERT文）&lt;/h2&gt;

&lt;p&gt;次にデータ作成のCreateにあたるINSERT文を使ってみましょう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&#34;http://www.dbonline.jp/mysql/insert/index1.html&#34;&gt;http://www.dbonline.jp/mysql/insert/index1.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;app.jsの16行目を以下に書き換えましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let sql = `insert into nobidb.test_user (name) values (&amp;quot;sugawara&amp;quot;)`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;INSERT文の基本は「&lt;code&gt;insert into DB名.テーブル名 (カラム名1, カラム名2) values (値, 値)&lt;/code&gt;」という形になります。
今回の文では「&lt;code&gt;nobidb&lt;/code&gt;データベースの&lt;code&gt;test_user&lt;/code&gt;テーブルの&lt;code&gt;name&lt;/code&gt;カラムに&lt;code&gt;sugawara&lt;/code&gt;という文字列を入れてデータを作成する」という意味になります。&lt;/p&gt;

&lt;p&gt;それでは実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js
test_userテーブル:  OkPacket {
  fieldCount: 0,
  affectedRows: 1,
  insertId: 31,
  serverStatus: 2,
  warningCount: 0,
  message: &#39;&#39;,
  protocol41: true,
  changedRows: 0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クライアントなどで確認してもしっかり行が追加されていることが分かります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/068/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;update-update文&#34;&gt;Update（UPDATE文）&lt;/h2&gt;

&lt;p&gt;次にデータ更新のUpdateにあたるUPDATE文を使ってみましょう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&#34;http://www.dbonline.jp/mysql/insert/index7.html&#34;&gt;http://www.dbonline.jp/mysql/insert/index7.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;app.jsの16行目を以下に書き換えましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let sql = `update dsdb.test_user set name=&amp;quot;すがわら&amp;quot; where id = 31`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UPDATE文の基本は「&lt;code&gt;update DB名.テーブル名 set カラム名1=更新内容1 カラム名2=更新内容2 where 条件&lt;/code&gt;」という形になります。
今回の文では「&lt;code&gt;nobidb&lt;/code&gt;データベースの&lt;code&gt;test_user&lt;/code&gt;テーブルの、idが31の&lt;code&gt;name&lt;/code&gt;カラムを&lt;code&gt;すがわら&lt;/code&gt;という文字列にデータ更新する」という意味になります。&lt;/p&gt;

&lt;p&gt;それでは実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js
test_userテーブル:  OkPacket {
  fieldCount: 0,
  affectedRows: 1,
  insertId: 0,
  serverStatus: 2,
  warningCount: 0,
  message: &#39;(Rows matched: 1  Changed: 1  Warnings: 0&#39;,
  protocol41: true,
  changedRows: 1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クライアントなどで確認してもid31の行のnameがすがわらに更新されているのが分かります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/068/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;delete-delete文&#34;&gt;Delete（DELETE文）&lt;/h2&gt;

&lt;p&gt;最後にデータ削除のDeleteにあたるDELETE文を使ってみましょう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&#34;http://www.dbonline.jp/mysql/insert/index10.html&#34;&gt;http://www.dbonline.jp/mysql/insert/index10.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;app.jsの16行目を以下に書き換えましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let sql = `delete from dsdb.test_user where id = 31`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DELETE文の基本は「&lt;code&gt;delete from DB名.テーブル名 where 条件&lt;/code&gt;」という形になります。
今回の文では「&lt;code&gt;nobidb&lt;/code&gt;データベースの&lt;code&gt;test_user&lt;/code&gt;テーブルの、idが31の行を削除する」という意味になります。&lt;/p&gt;

&lt;p&gt;それでは実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js
test_userテーブル:  OkPacket {
  fieldCount: 0,
  affectedRows: 1,
  insertId: 0,
  serverStatus: 2,
  warningCount: 0,
  message: &#39;&#39;,
  protocol41: true,
  changedRows: 0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クライアントなどで確認してもid31の行が削除されているのが分かります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/068/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ここまでで、Node.jsからMySQLにアクセスしてCRUDをする操作の紹介をしました。&lt;/p&gt;

&lt;h2 id=&#34;tips-node-mysql2&#34;&gt;Tips: node-mysql2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/4e59d02f90bb66451011&#34;&gt;Node.jsからMySQL接続のメモ(とnode-mysql2)&lt;/a&gt;にもあるように&lt;a href=&#34;https://github.com/sidorares/node-mysql2&#34;&gt;node-mysql2&lt;/a&gt;というモジュールもありますので、ベンチマークが気になり始めたら利用を試みるのも良いかもしれません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i mysql2 --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインストールして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const mysql = require(&#39;mysql&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の読み込み箇所を&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const mysql      = require(&#39;mysql2&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に修正するだけで使えるので移行も楽そうです。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;Node.jsからMySQLにアクセスする方法を紹介しました。
基礎的な内容になるので、初めてチャレンジする方は参考にして下さい。&lt;/p&gt;

&lt;p&gt;SQL直書きだと脆弱性が&amp;hellip;&amp;hellip;とかの話はありそうですがそれはまた別の機会で書けたらと思います。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsでファイル監視を行うchokiderを使ってみよう</title>
      <link>https://dotstud.io/blog/nodejs-npm-chokidar-fswatch/</link>
      <pubDate>Mon, 26 Dec 2016 14:00:27 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodejs-npm-chokidar-fswatch/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudio代表の&lt;a href=&#34;http://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/nodejs-npm-readline-sync/&#34;&gt;Node.jsでコマンドラインツール作るときに使いやすいreadline-sync&lt;/a&gt;に続いて、Node.jsのモジュール紹介です。&lt;/p&gt;

&lt;p&gt;Gitなどを用いて開発を行っていると「ファイルの変更を検知して何かを実行したい」という場面があります。
今日はそんな場面で活用できるファイル監視を行うモジュールを紹介します。&lt;/p&gt;

&lt;h2 id=&#34;執筆時点のマシンスペック&#34;&gt;執筆時点のマシンスペック&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;macOS Sierra (v10.12)&lt;/li&gt;
&lt;li&gt;Node.js v6.6.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;何か不具合があったときに参照してください。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;URL: &lt;a href=&#34;https://github.com/paulmillr/chokidar&#34;&gt;chokidar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init&lt;/code&gt;で&lt;code&gt;package.json&lt;/code&gt;を作成してから進めます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm init --yes
npm i --save chokidar
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サンプルを動かしてみる&#34;&gt;サンプルを動かしてみる&lt;/h2&gt;

&lt;h3 id=&#34;ファイル監視&#34;&gt;ファイル監視&lt;/h3&gt;

&lt;p&gt;app.jsを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const chokidar = require(&#39;chokidar&#39;);

// One-liner for current directory, ignores .dotfiles
chokidar.watch(&#39;.&#39;, {ignored: /[\/\\]\./}).on(&#39;all&#39;, (event, path) =&amp;gt; {
  console.log(event, path);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app.jsを保存したらアプリケーションを起動しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、nodeコマンドを実行したディレクトリ以下のファイルを監視しはじめます。&lt;/p&gt;

&lt;p&gt;先ほど実行した&lt;code&gt;npm init --yes&lt;/code&gt;で&lt;code&gt;package.json&lt;/code&gt;が作成されます。&lt;code&gt;app.js&lt;/code&gt;を実行したまま&lt;code&gt;package.json&lt;/code&gt;を編集してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/1e9ddbebcda4037874c803f91d6a8b66.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このように、変更があったファイルを検知してくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;・
・
・
change package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;chokidarを使ってファイル監視して「特定のファイルが更新されたら〇〇する」というトリガーを簡単に作れます。&lt;/p&gt;

&lt;p&gt;プロジェクト管理などで活用してみてください。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>シリアル通信</title>
      <link>https://dotstud.io/docs/2-serial/</link>
      <pubDate>Sun, 20 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/2-serial/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>センサー</title>
      <link>https://dotstud.io/docs/2-sensor/</link>
      <pubDate>Sat, 19 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/2-sensor/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>マイコンボード</title>
      <link>https://dotstud.io/docs/2-microcon/</link>
      <pubDate>Tue, 15 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/2-microcon/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>直流と交流</title>
      <link>https://dotstud.io/docs/2-dirandalt/</link>
      <pubDate>Mon, 14 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/2-dirandalt/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>デジタルとアナログ</title>
      <link>https://dotstud.io/docs/2-digitalanalog/</link>
      <pubDate>Sun, 13 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/2-digitalanalog/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>消費電力</title>
      <link>https://dotstud.io/docs/2-consumption/</link>
      <pubDate>Sun, 13 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/2-consumption/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>回路図</title>
      <link>https://dotstud.io/docs/2-circuit/</link>
      <pubDate>Sat, 12 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/2-circuit/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>グローブシステム</title>
      <link>https://dotstud.io/docs/3-grove/</link>
      <pubDate>Fri, 11 Nov 2016 02:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/3-grove/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>抵抗</title>
      <link>https://dotstud.io/docs/2-r/</link>
      <pubDate>Fri, 11 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/2-r/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>「IoT」とは</title>
      <link>https://dotstud.io/docs/1-iot/</link>
      <pubDate>Thu, 10 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/1-iot/</guid>
      
      <description></description>
    </item>
    
    <item>
      <title>電流と電圧</title>
      <link>https://dotstud.io/docs/aandv/</link>
      <pubDate>Thu, 10 Nov 2016 01:02:41 +0900</pubDate>
      
      <guid>https://dotstud.io/docs/aandv/</guid>
      
      <description>

&lt;h2 id=&#34;電圧-は-水圧-と同じようなもの&#34;&gt;「電圧」は、「水圧」と同じようなもの&lt;/h2&gt;

&lt;!--![(1)コンセントとか電池の画像？]()--&gt;

&lt;p&gt;「電圧」「電流」「抵抗」
日常生活で最もよく聞くのが、「電圧」だと思います。コンセントからとれる電気の「電圧」は100V(ボルト)、単3電池1本の「電圧」は1.5V(ボルト)、というのは多くの人が知っていることでしょう。&lt;/p&gt;

&lt;p&gt;この「電圧」として表される数値は電気そのものの強さではなく、 &lt;strong&gt;「電気を流そうとする力の強さ」&lt;/strong&gt; です。&lt;/p&gt;

&lt;!--![(2)アパートの階と蛇口から出る水の強さの違い]()--&gt;

&lt;p&gt;&lt;strong&gt;水道の話に置き換えてみると「電圧」は「水圧」に相当&lt;/strong&gt; します。例えば2階や3階建てのアパートのキッチンなどでは、どの部屋のも基本的には同じ蛇口が使われていますが、1階が最も水の流れ出る量が多く、上のほうの階に行くにつれて少なくなっていきます。（※注:給水塔が屋上になく、かつ古い建物の場合です）&lt;/p&gt;

&lt;p&gt;これは、 &lt;strong&gt;蛇口の大きさは同じであるが水圧が階数によって異なるため&lt;/strong&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;いわゆる-電気-とは-電流-のこと&#34;&gt;いわゆる「電気」とは、「電流」のこと&lt;/h2&gt;

&lt;p&gt;では「電流」は何なのかというと、先ほどの水道の話に置き換えると &lt;strong&gt;「電流」は水そのもの&lt;/strong&gt; となります。水圧の違いが水の流れ出る量に影響を与えるのと同様に、 &lt;strong&gt;電圧の違いは電流の量に影響を与えます。&lt;/strong&gt; 電圧が高いほど、電流量も多くなるわけです。&lt;/p&gt;

&lt;p&gt;我々人間は生きるために水が必要となります。例えばコップ1杯の水がほしいときに必要なのは「水圧」ではなく「水そのものの量」ですよね。電気を扱う機械も同じで、 &lt;strong&gt;動き続けるために必要なのは「電圧」ではなく「電流の量」です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;このことから、 &lt;strong&gt;「電気」の本質は「電流」のこと&lt;/strong&gt; だといえます。「電圧」はあくまで、「電流」を多く発生させるために必要な力だということですね。&lt;/p&gt;

&lt;h2 id=&#34;蛇口の口径を変えると-水量も変化する&#34;&gt;蛇口の口径を変えると、水量も変化する&lt;/h2&gt;

&lt;!--![(3)口径の大きい蛇口と小さい蛇口]()--&gt;

&lt;p&gt;さて、もしもあなたがアパートの上のほうの階に住んでいて、水圧が弱くて困っているとします。このときに水の量を増やす手段としてひとつ考えられるのは、 &lt;strong&gt;蛇口の径を大きくすること&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;電気においても同じで、もしも電圧が低ければ、 &lt;strong&gt;電流の通り道を太くしてやれば電圧を変えずに電流量を増やすことができます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この「電流の通り道」は、電子工作の世界では、主に「銅線」という銅でできた細い線のことをいいます。水と同様にこの線の太さなどで電流の流れ具合も変わるわけですが、このときの &lt;strong&gt;「電流の流れにくさ」を「抵抗」といいます。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;抵抗-は-交通渋滞-に似ている&#34;&gt;「抵抗」は「交通渋滞」に似ている&lt;/h2&gt;

&lt;!--![(4)道路の太さとクルマの量の図]()--&gt;

&lt;p&gt;例えば、クルマを運転して東京から名古屋に行く場合をイメージしてみましょう。道路幅が比較的広くて距離も短い「新東名高速道路」を使う場合と、道路幅が狭めで距離も長くなる「中央自動車道」では、どちらのほうがストレスがたまるでしょうか。ほとんどの場合は後者のほうが疲れやすく、時間もかかります。&lt;/p&gt;

&lt;p&gt;電気の場合もこれと同じで、 &lt;strong&gt;電流の流れ道は、幅が狭くて距離が長いほど電流が流れにくくなります。&lt;/strong&gt; これは &lt;strong&gt;「抵抗値が大きい」&lt;/strong&gt; と表現することができます。&lt;/p&gt;

&lt;!--![(5)直線な高速道路と、信号のある一般道路の比較の図]()--&gt;

&lt;p&gt;では東京から名古屋まで、高速道路を使わずに一般道路で行く場合も考えてみましょう。当然、一般道路は信号機が多数あったり、カーブがきつかったり、車線は一つしかなかったり、など、高速道路に比べると明らかに障害物が多いですね。これはもうどんな高速道路を使うよりも行きづらいことに疑いはありません。&lt;/p&gt;

&lt;p&gt;電気の場合は、通り道の幅や長さを変えたりせずとも、 &lt;strong&gt;その通り道の一部に電流の流れにくい「障害物」を入れることで「抵抗値」を大きくする&lt;/strong&gt; ことができます。このような処置がなされた電気の通り道となる部品のことを &lt;strong&gt;「抵抗器」&lt;/strong&gt; といいます。&lt;/p&gt;

&lt;h2 id=&#34;電圧-電流-抵抗-のそれぞれの関係&#34;&gt;電圧・電流・抵抗 のそれぞれの関係&lt;/h2&gt;

&lt;p&gt;以上のことから、「電圧」「電流」「抵抗」の3つには、次のような関係があることがわかっていただけたかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電圧が大きくなると、電流の量が増える&lt;/li&gt;
&lt;li&gt;抵抗が大きくなると、電流の量が減る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここで、電圧を記号E、電流を記号I、抵抗Rとしましょう。
するとこれら3つのあいだには次のような関係があります。&lt;/p&gt;

&lt;p&gt;I = E ÷ R&lt;/p&gt;

&lt;p&gt;この式は、 &lt;strong&gt;「オームの法則」&lt;/strong&gt; と呼ばれます。いわゆる「電気」は、「電流」のことであるというのは先述しました。&lt;/p&gt;

&lt;p&gt;つまり &lt;strong&gt;電気の強さは、電圧が大きいほど強く、抵抗が大きいほど弱くなる&lt;/strong&gt; ということになります。&lt;/p&gt;

&lt;h2 id=&#34;電子パーツは-電流-でうごく&#34;&gt;電子パーツは「電流」でうごく&lt;/h2&gt;

&lt;p&gt;さて、電子工作において、これら「電圧」「電流」「抵抗」を考えなければならない場面というのはどのようなときでしょうか。&lt;/p&gt;

&lt;!--![(6)電池とコンセントとLED等しいの図]()--&gt;

&lt;p&gt;先ほど、「電流」が「電気そのもの」ということは説明しました。つまり、電気で動くパーツは電流を基準に考えればよいわけです。（一部、電圧駆動というパーツも存在します）&lt;/p&gt;

&lt;p&gt;例えば、あるLEDを光らせたいとき、20mA（ミリアンペア）という量の電流が必要であるとします。この数値はパーツを買ったときに「定格電流」として表示されているのでチェックしておきましょう。&lt;/p&gt;

&lt;h3 id=&#34;電池でledを光らせてみよう&#34;&gt;電池でLEDを光らせてみよう&lt;/h3&gt;

&lt;!--![(7)20mAのLEDを光らせる]()--&gt;

&lt;p&gt;電源として用意できるのは乾電池やコンセントからの電気などですが、その電気に関する情報として知り得ることができるのは「電圧」のみです。&lt;/p&gt;

&lt;p&gt;例えば、乾電池4本（合計6V）で定格20mAのLEDを光らせる回路を作るとしましょう。この回路では、LEDの両端に6Vという「電気の圧力」がかかっていますが、実際に流れる電気である「電流」はどれほどになるのかわかりません。&lt;/p&gt;

&lt;!--![(8)上の回路図に抵抗を追加]()--&gt;

&lt;p&gt;そこで、LEDのどちらか側に「抵抗器」を置くと、もしも抵抗値がわかっていれば、その抵抗器から流れ出る電流はどれぐらいになるか計算することができます。その電流値が20mAで、LEDに流れ込むようにしてあげればうまく点灯しそうですよね？&lt;/p&gt;

&lt;p&gt;このとき「オームの法則」を利用して、 &lt;strong&gt;与えられた電圧から必要な電流を流せるだけの抵抗値を求めます。&lt;/strong&gt; すなわち、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;20mA = 6V ÷ R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;が成り立つようなRの値の抵抗器を、LEDの前か後に置いてあげれば良いわけです。&lt;/p&gt;

&lt;p&gt;ここで、mA(ミリアンペア)のm(ミリ)は、1000分の1を表す接頭辞です。これを考慮してRについて解くと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;R = 6V ÷ (20 × 0.001) = 300
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。また、抵抗値の単位はΩ(オーム)といいます。よって、乾電池4本6Vで20mA駆動のLED1個を光らせたいときは、「300Ωの抵抗が必要」となります。&lt;/p&gt;

&lt;h3 id=&#34;コンセントでもledを光らせてみよう&#34;&gt;コンセントでもLEDを光らせてみよう&lt;/h3&gt;

&lt;p&gt;今度はコンセントからの電気、100Vの電圧でLEDを光らせることを考えてみましょう。（ここでは、簡単のため直流100Vとして話をすすめます）&lt;/p&gt;

&lt;!--![(9)コンセントで20mAのLEDを光らせる]()--&gt;

&lt;p&gt;先ほどの乾電池の電圧6Vが100Vへと大幅に大きくなりました。この場合も、オームの法則を使って必要な抵抗器の値を求めてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;R = 100V ÷ (20 × 0.001) = 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5000Ω、ですね。ほとんどの場合は5000Ωとは言わず、1000を表す接頭辞のk(キロ)を用いて5kΩ(キロオーム)と表記されます。よって、5kΩの抵抗器を入れれば、コンセントからの100Vという大きな電圧でも同じLEDを光らせることが可能なのです。&lt;/p&gt;

&lt;p&gt;しかし実際には、電子工作でよく使われるような小さな抵抗器では、「定格電力」の値を大きくオーバーして焼き切れてしまうため、大電力用の大きな抵抗器を使う必要があります。これは後述する、電子パーツの「消費電力」が関係しています。&lt;/p&gt;

&lt;h2 id=&#34;どんなところにも抵抗は存在する&#34;&gt;どんなところにも抵抗は存在する&lt;/h2&gt;

&lt;p&gt;もしも抵抗器がない回路を作ると、電流はどれぐらい流れるのでしょうか？　抵抗器がもし無かったとしても、回路を構成する銅線・LED・電池に至るまで、電子パーツはすべて「抵抗値」を持っています。ここでオームの法則を考えてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I = E ÷ R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、回路全体の抵抗値がRだったとします。このRが限りなく0に近づくとすると、電流Iは電圧Eの値に関係なく、無限に上昇していきます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GR-COTTONで見た目も可愛く電子工作！部屋の温度をブラウザからチェックしてみよう</title>
      <link>https://dotstud.io/blog/milkcocoa-grcotton-realtime-temperature/</link>
      <pubDate>Thu, 03 Nov 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/milkcocoa-grcotton-realtime-temperature/</guid>
      
      <description>

&lt;p&gt;こんにちは！　dotstudioのエディターのうららです。先日、バックエンドサービス「Milkcocoa」を題材にしたLT大会「 &lt;strong&gt;&lt;a href=&#34;http://mlkcca.connpass.com/event/34936/&#34;&gt;紅白Milkcocoa合戦&lt;/a&gt;&lt;/strong&gt; 」に参加してきました。&lt;/p&gt;

&lt;p&gt;そこで発表した &lt;strong&gt;Webサイト上から部屋の温度がわかる&lt;/strong&gt; という仕組みが何かしらに役に立つ気がするので本記事にまとめておこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;こんな人におすすめ&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;部屋の気温をブラウザ上からチェックできるようにしたり、データとして貯めたい人（ペットを飼ってる人や観葉植物を育てている人におすすめ）&lt;/li&gt;
&lt;li&gt;電子工作には興味があるけれど、せっかくなら見た目が可愛いアイテムで挑戦したい人&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;全体の構成&#34;&gt;全体の構成&lt;/h2&gt;

&lt;p&gt;マイコンボード「GR-COTTON」でセンサーの値を取得し、バックエンドサービス「Milkcocoa」を使いブラウザ側にデータを送ります。&lt;/p&gt;

&lt;p&gt;MacとGR-COTTONをUSB接続し、Node.jsを経由してMilkcocoaにデータを送ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;milkcocoa&#34;&gt;Milkcocoa&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/01_milkcocoa.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://mlkcca.com&#34;&gt;milkcocoa&lt;/a&gt;とは、&lt;strong&gt;JavaScriptのソースコードを1行挿入するだけで、リアルタイム通信ができるようになる&lt;/strong&gt; サービスです。リアルタイム通信にはバックエンドの構築が必要ですが、そこの手間が省けます。&lt;/p&gt;

&lt;h3 id=&#34;gr-cotton&#34;&gt;GR-COTTON&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/02_cotton.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらが今回使うマイコンボード「&lt;a href=&#34;http://gadget.renesas.com/ja/product/cotton.html&#34;&gt;GR-COTTON&lt;/a&gt;」です。ルネサスエレクトロニクスが企画する「&lt;a href=&#34;http://gadget.renesas.com/ja/&#34;&gt;がじぇっとるねさす&lt;/a&gt;（通称がじぇるね）」が作っています。&lt;/p&gt;

&lt;p&gt;最初からタッチセンサーや気温センサー、フルカラーLEDを搭載しています。しかもその &lt;strong&gt;タッチセンサーが星型&lt;/strong&gt; で、基盤も白をベースにしているので、見た目がものすごく可愛いんです！　&lt;/p&gt;

&lt;h2 id=&#34;作り方&#34;&gt;作り方&lt;/h2&gt;

&lt;p&gt;では早速作ってみましょう！　大きく分けると次の4つの作業をします。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Milkcocoaの登録をする&lt;/li&gt;
&lt;li&gt;GR-COTTONのチュートリアル1〜10をおこなう&lt;/li&gt;
&lt;li&gt;app.jsをビルドする&lt;/li&gt;
&lt;li&gt;Webサイトを作る（HTMLのみでOK）&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-milkcocoaの登録をする&#34;&gt;1. Milkcocoaの登録をする&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/04_milkcocoa.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://mlkcca.com/&#34;&gt;トップページ&lt;/a&gt;からログインして、「新しいアプリを作る」をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/05_milkcocoa.png&#34; alt=&#34;&#34; /&gt;
アプリ名は自分で好きなものを登録します。ここでは「GR-COTTON」にしました。&lt;/p&gt;

&lt;p&gt;これだけでMilkcocoa側の準備はOKです。&lt;/p&gt;

&lt;h3 id=&#34;2-gr-cottonのチュートリアル1-10をおこなう&#34;&gt;2. GR-COTTONのチュートリアル1〜10をおこなう&lt;/h3&gt;

&lt;p&gt;がじぇっとるねさすが提供している、こちらの&lt;a href=&#34;http://gadget.renesas.com/ja/product/cotton_sp1.html&#34;&gt;チュートリアル&lt;/a&gt;を参考に、1〜10まで進めてください。&lt;/p&gt;

&lt;h3 id=&#34;3-node-jsのプログラムを用意する&#34;&gt;3. Node.jsのプログラムを用意する&lt;/h3&gt;

&lt;p&gt;シリアル通信でCOTTONとMilkcocoaの橋渡しをするプログラムを用意します。以下のapp.jsをプログラムに記入して実行してみてください。Node.jsで作成しています。&lt;/p&gt;

&lt;h4 id=&#34;app-js&#34;&gt;app.js&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;// Milkcocoaの設定
const MilkCocoa = require(&#39;milkcocoa&#39;);
const milkcocoa = new MilkCocoa(&#39;your api key&#39;);
const ds = milkcocoa.dataStore(&#39;status&#39;);

// シリアル通信の設定
const SerialPort = require(&#39;serialport&#39;);
const portName = &#39;COM6&#39;; // IDE for GRとかで調べる
const serial = new SerialPort(portName, {
  baudrate: 9600,
  flowcontrol: false,
  parser: SerialPort.parsers.readline(&amp;quot;\n&amp;quot;)
});

serial.on(&#39;open&#39;, () =&amp;gt; {
  console.log(&#39;open&#39;);
});

// シリアル通信でデータを受信したに呼び出される関数を定義
serial.on(&#39;data&#39;, (input) =&amp;gt; {
  console.log(input);
  ds.send({message: input});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターミナルを開いて、以下のコマンドでインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm init
npm i serialport milkcocoa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app.jsを動かしたいときは、以下のコマンドを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-webサイトを作る-htmlのみでok&#34;&gt;4. Webサイトを作る（HTMLのみでOK）&lt;/h3&gt;

&lt;p&gt;最後はフロント側を作ります！&lt;/p&gt;

&lt;h4 id=&#34;index-html&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;フロント&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;log&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-2.2.4.min.js&amp;quot;   integrity=&amp;quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&amp;quot;   crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&#39;https://cdn.mlkcca.com/v2.0.0/milkcocoa.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
    window.onload = () =&amp;gt; {
      // Milkcocoa
      const milkcocoa = new MilkCocoa(&#39;your api key&#39;);
      const ds = milkcocoa.dataStore(&#39;status&#39;);

      // Milkcocoaからデータが送られてきた時のコールバック
      ds.on(&#39;send&#39;, (data) =&amp;gt; {
        console.log(data.value);
        // ここでhtmlのDOMを操作する

     })
    }
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/07_milkcocoa.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;14行目の&lt;code&gt;your api key&lt;/code&gt;には、先ほど登録したMilkcocoaのこの箇所の文字列を入れます。&lt;/p&gt;

&lt;p&gt;これで、&lt;code&gt;node app.js&lt;/code&gt;を打つと、コンソールに気温がリアルタイムで表示されるようになります！  ちなみに、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;うららフロント&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;


  &amp;lt;body&amp;gt;
	// ここに書き込める
    &amp;lt;div id=&amp;quot;log&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-2.2.4.min.js&amp;quot;   integrity=&amp;quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&amp;quot;   crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&#39;https://cdn.mlkcca.com/v2.0.0/milkcocoa.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
    window.onload = () =&amp;gt; {
      const milkcocoa = new MilkCocoa(&#39;your api key&#39;);
      const ds = milkcocoa.dataStore(&#39;status&#39;);

      ds.on(&#39;send&#39;, (data) =&amp;gt; {
        console.log(data.value);
     })
    }
    &amp;lt;/script&amp;gt;
	// ここに書き込める
  &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;// ここに書き込める&lt;/code&gt; にHTMLなどを書くと、フロント側をいじることができます。&lt;/p&gt;

&lt;h4 id=&#34;わたしが作ったフロント側のソースコード-cotton-html&#34;&gt;わたしが作ったフロント側のソースコード cotton.html&lt;/h4&gt;

&lt;p&gt;完全に余談ですが、私が作ったフロント側のソースコードも載せておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;部屋の温度なう&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://fonts.googleapis.com/earlyaccess/notosansjp.css&amp;quot;&amp;gt; // googleフォントを入れてみた
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;cotton.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;welcome&amp;quot;&amp;gt;Temperature Now&amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;log&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;marquee&amp;gt;あなたは10573人目の訪問者です！&amp;lt;/marquee&amp;gt; // 文字が流れます
    &amp;lt;div id=&amp;quot;you&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;center&amp;gt;&amp;lt;table border=&amp;quot;0&amp;quot; cellspacing=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://www.rays-counter.com/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.rays-counter.com/d350_f6_022/578cc94f09357/&amp;quot; alt=&amp;quot;アクセスカウンター&amp;quot; border=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td align=&amp;quot;center&amp;quot; style=&amp;quot;font-size:xx-small&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.rays-counter.com/images/counter_01.gif&amp;quot; border=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.rays-counter.com/images/counter_02.gif&amp;quot; border=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.rays-counter.com/images/counter_03.gif&amp;quot; border=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.rays-counter.com/images/counter_04.gif&amp;quot; border=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.rays-counter.com/images/counter_05.gif&amp;quot; border=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/center&amp;gt; // アクセスカウンターです、フリーのを使いました
    &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-2.2.4.min.js&amp;quot;   integrity=&amp;quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&amp;quot;   crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&#39;https://cdn.mlkcca.com/v2.0.0/milkcocoa.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
    $(document).ready(function(){
      // Milkcocoa
      const milkcocoa = new MilkCocoa(&#39;yieldiq29oxas.mlkcca.com&#39;);
      const ds = milkcocoa.dataStore(&#39;status&#39;);

      // Milkcocoaからデータが送られてきた時のコールバック
      ds.on(&#39;send&#39;, (data) =&amp;gt; {
        console.log(data.value);
        const temp=data.value.message;
        if (temp&amp;gt;29){
          $(&#39;#log&#39;).css(&#39;color&#39;, &#39;red&#39;);
          $(&#39;#you&#39;).text(&#39;あついね！&#39;) // 29度以上になると「あついね！」というコメントが表示されます
        }
        else if (temp&amp;lt;27){
          $(&#39;#log&#39;).css(&#39;color&#39;, &#39;blue&#39;);
          $(&#39;#you&#39;).text(&#39;さむいね！&#39;)　// 27度以下になると「さむいね！」というコメントが表示されます
        }
        else {
          $(&#39;#log&#39;).css(&#39;color&#39;, &#39;#eebbcb&#39;);
          $(&#39;#you&#39;).text(&#39;ちょうどいいね！&#39;) // 27&amp;amp;28度になると「ちょうどいいね！」というコメントが表示されます
        }
        $(&#39;#log&#39;).text(&#39;今の温度は&#39;+data.value.message+&#39;度☆&#39;); // 今の温度が表示されます
        // ここでhtmlのDOMを操作する
        // milkcocoa と push でカウンター（javascript）

     })
   　});
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;style-css&#34;&gt;style.css&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;body {
  font-family: &#39;Noto Sans Japanese&#39;, sans-serif;
}

#log {
  font-size: 30px;
  text-align: center;
}

#welcome {
  font-size: 50px;
  text-align: center;
  color: darkblue
}

#you {
    text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;見た目&#34;&gt;見た目&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/08_website.png&#34; alt=&#34;&#34; /&gt;
このような感じの見た目になります。1990年代のサイトを目指しました。全然可愛くないですね。アクセスカウンタは無料で配布されていた「&lt;a href=&#34;http://www.rays-counter.com/&#34;&gt;無料アクセスカウンター&lt;/a&gt;」を使っています。&lt;/p&gt;

&lt;p&gt;ということで、Webサイトの見た目はこのように自分でアレンジできます。HTMLの技術が少し必要になりますが、自由にいじって自分好みのサイトにしてみてください。（CSSもあればなおよしですね）&lt;/p&gt;

&lt;p&gt;この状態ではサーバーにアップされていないのでローカル環境でないとサイトを見られませんが、これをアップすれば家の外からでもスマホやPCなどで室温を確認することができます。&lt;/p&gt;

&lt;h2 id=&#34;注意点&#34;&gt;注意点&lt;/h2&gt;

&lt;p&gt;ここからは私が詰んだ箇所を紹介します。全部で3つあります。&lt;/p&gt;

&lt;h3 id=&#34;gr-cottonのジャンパを配線する&#34;&gt;GR-COTTONのジャンパを配線する&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/09_jumper.png&#34; alt=&#34;&#34; /&gt;
通常はこのパーツを反対側に刺さないといけないです。チュートリアルにも載っていますが見落とすと操作できなくなります。&lt;/p&gt;

&lt;h3 id=&#34;ケーブルは純正のものを使う&#34;&gt;ケーブルは純正のものを使う&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/10_cable.png&#34; alt=&#34;&#34; /&gt;
コンビニで売っているモバイルバッテリーに付属しているようなケーブルだと、認識されないのです……。&lt;/p&gt;

&lt;p&gt;データ通信が可能なタイプを用意しましょう。（GR-COTTONには純正のケーブルが付属していません）&lt;/p&gt;

&lt;h3 id=&#34;kurumiwriterにチェックを入れる&#34;&gt;KurumiWriterにチェックを入れる&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/11_notfound.png&#34; alt=&#34;&#34; /&gt;
ケーブルを純正にしたのにPCからUSBドライバが表示されない、ということがありました。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;FTDIの仕様上USBポートが開いた/閉じたときでDTR(COTTONのリセット)がハイ/ロウが排他的になります。KurumiWriterでその設定ができますがデフォルト(チェックなし)ではポートが開いたときDTRがロウになります。 &lt;a href=&#34;https://t.co/aWANpSdJka&#34;&gt;https://t.co/aWANpSdJka&lt;/a&gt;&lt;/p&gt; Renesas_FUN (@Renesas_FUN) &lt;a href=&#34;https://twitter.com/Renesas_FUN/status/750323606601609216&#34;&gt;2016年7月5日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;これをTwitterでつぶやいたところ、がじぇっとるねさすさんの公式アカウントからご回答いただきました。KurumiWriterのチェックボックスにチェックをいれていなかったことが原因でした……。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;自分が詰んだところの余談が長くなってしまったのですが、部屋の温度をGR-COTTONで取得してブラウザに表示する方法を紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/010/06_code.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;余談ですが、今回使った app.jsとhtmlは、知り合いの元組み込みエンジニアいわたんさん（&lt;a href=&#34;twitter.com/iwata_n&#34;&gt;@iwata_n&lt;/a&gt;）にお願いして作ってもらいました。いわたんさんありがとうございます！&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;aa68f3d1934d480f9a3a26a6062ffa9b&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;また、当日発表したプレゼン資料はこちらから見られます。&lt;/p&gt;

&lt;p&gt;みなさんぜひ試してみてください！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【connpass × のびすけ対談】サービスの立ち上げから運営まで。「connpass」の歴史を聞いてみました</title>
      <link>https://dotstud.io/blog/connpass-n0bisuke-interview-vol2/</link>
      <pubDate>Wed, 02 Nov 2016 10:30:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/connpass-n0bisuke-interview-vol2/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioエディターのうらら（@uraranbon）です。&lt;/p&gt;

&lt;p&gt;今や10人に1人は社長と言われるほど起業が身近になった現代。しかし、夢や希望を詰めて作られたサービスの大方は、思うように成長せずに消えていってしまいます。&lt;/p&gt;

&lt;p&gt;そんな中、イベントの募集を助けるWebサービス「connpass」は、2011年にリリースされてから5年で85,000人のユーザーを集め、connpassを利用し2015年〜2016年の1年間で6,000人の集客したという人もいます。&lt;/p&gt;

&lt;p&gt;サービスを向上させる秘訣はあるのでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/connpass-n0bisuke-interview-vol1/&#34;&gt;【connpass × のびすけ対談】勉強会あるある！イベントのドタキャンにどう対処する？&lt;/a&gt;に続き、connpassを運営する株式会社ビープラウドの代表・佐藤氏に話を伺ってきました。&lt;/p&gt;

&lt;div class=&#34;person-intro&#34;&gt;
    &lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34;/&gt;
    &lt;div class=&#34;person-info&#34;&gt;
        &lt;strong&gt;人物紹介：佐藤治夫 氏&lt;/strong&gt;
        &lt;p&gt;株式会社ビープラウド代表。&lt;br /&gt;2011年からイベントサイト「connpass」を運営する傍ら、自身も積極的に勉強会やイベント活動をおこなっている。&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;話を伺ってきたのは、エンジニア向けのイベントを積極的に主催しているdotstudio代表/エンジニアのびすけです。よく「connpass」を使って集客をしています。&lt;/p&gt;

&lt;div class=&#34;person-intro&#34;&gt;
    &lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; /&gt;
    &lt;div class=&#34;person-info&#34;&gt;
        &lt;strong&gt;人物紹介：菅原のびすけ&lt;/strong&gt;
        &lt;p&gt;dotstudio代表。&lt;br /&gt;1989年生まれのバックエンドエンジニア。 &lt;a href=&#34;http://iotlt.connpass.com&#34; target=&#34;_blank&#34;&gt;IoTLT&lt;/a&gt;、Swift愛好会、NodeBotsハンズオンなど、幅広いイベントを開催している。&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;もともとはイベントから生まれたサービスだった&#34;&gt;もともとはイベントから生まれたサービスだった&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/037/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;
今日はありがとうございます。そもそも、なぜこういったイベントサービスを始めようと思ったんですか？&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;今はイベントサイトって結構ありますけど、もともとはリクルートさんが運営する&lt;a href=&#34;https://atnd.org/&#34;&gt;ATND&lt;/a&gt;しかありませんでした。そのときの技術が好きだった人たちが集まっていたんですけど、少しシンプルだったんです。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;そんなときに、&amp;rdquo;Django Dash&amp;rdquo;という「2~3日でサービスを1つ立ち上げよう」みたいなイベントがありました。そこで、イベントサイトならこういう機能がほしい、あれほしいっていうのを簡単に話していたんです。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;そのときはそれで終わってたんですけど、弊社でサービスを作りましょうかという話が持ち上がったときに、「途中までこういうのを作ったことがありますよ」と再浮上したのがきっかけです。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;img src=&#34;https://dotstud.io/img/blog/037/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;あとは、もともと僕が「BPStudy」という勉強会をずっと続けていたので、そこでエンジニアの人たちのコミュニティを広げたいとか、経験を高めたくなり、2011年に「ちゃんとサービスを始めよう」となりました。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;へえ、もともとはイベントがきっかけだったんですね。オープンしてからすぐにイベントって集まったんですか？&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;いや、最初はそんなに多くなかったですね。弊社がPython系のコミュニティと繋がっていて、そのイベントの人たちが使ってくれて広まりました。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;イベント参加者だった人が「自分でやってみよう」というときに&lt;strong&gt;自分が参加したことのあるサイトを選ぶ&lt;/strong&gt;といった感じで広まったと思います。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;余談ですが、その頃からPyCon主催の鈴木たかのりさんもいらっしゃったんですか？&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;そうですね。たかのりさんは、2011年にconnpassがオープンしてからすぐくらい、2012年あたりですね。有料決済みたいなのや、参加枠みたいな機能、アーリーバード枠とか。PyConの要望で追加した機能もあるんです。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;ブレイクポイントはサービス開始2年後に&#34;&gt;ブレイクポイントはサービス開始2年後に&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/037/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;connpassを始めた2011年から、何かブレイクポイントありますか？&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;2013年にありました。「IT勉強会に特化した」っていう部分ですね。もともとは「どういうイベントが対象」かっていうのを絞っていなくて。そこを、「IT勉強会といえばconnpass」と思ってもらえるようにしました。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;具体的にはどのへんで伝えたんですか？&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;タイトルですね。ログインしているとわからないんですけど、トップページにこういう画面があって……&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;img src=&#34;https://dotstud.io/img/blog/037/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;あ、上部の「エンジニアをつなぐ〜」というやつですね。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;ここから、より絞られたユーザーが集まってきたと思います。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;サービスを-技術的チャレンジができる広告塔-に&#34;&gt;サービスを「技術的チャレンジができる広告塔」に&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;開発は何人くらいでおこなうんですか？&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;2人とか3人とかですね。今は専任ですが、状況に応じて受託開発をしたり、connpassをやってもらったりしています。いろんな案件を経験すれば、バランス良くスキルやノウハウが身につきますし、「こっちでノウハウを使おう」という流用もできるので。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/037/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;意外と少ない印象です。ちなみに、connpassって中の人にとってはどういう位置付けなのでしょう？&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;位置づけですか。ひとつは&lt;strong&gt;広告塔として&lt;/strong&gt;ですね。connpassがあることによって、「あ〜、connpassやってる会社ですか」って思ってもらえています。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;ふたつめは、&lt;strong&gt;技術的チャレンジがしやすい&lt;/strong&gt;っていうところですかね。結構Dockerとかを使って、サイトに導入していこうかなとは思っています。そういうデプロイのところは効率化しようかなと。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;connpassの特徴として、落ちない、不具合が少ないっていうのがありますが、それもやっぱり、不具合がおこりにくい、落ちないサイトってどういうサイトなの？っていうのをconnpassで実践してるからですね。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;みっつめは&lt;strong&gt;知見を得られる場所&lt;/strong&gt;ですね。運営・企画サポートまでを自分たちで回しているっていうことで、知見を得られているかなと思っています。ざっくりとした位置付けはこの3点ですね。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;connpass開発で試行錯誤して活用した-匠メソッド&#34;&gt;connpass開発で試行錯誤して活用した「匠メソッド」&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;エンジニアの理想じゃないですか。ちなみに、サイトの企画〜運営までのナレッジは、具体的にどんなことを学んだんですか？&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;&lt;strong&gt;アイデア出しから形に落とし込むまでの要求開発方法&lt;/strong&gt;ですね。サービス企画ってやったことがないと、最終的にどう落とし込んでいくのかってスキルが必要だと思うんですよ。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;自分は「絶対いい！」とか思っている機能を、他の人が「いやぁ……」とかいうと、揉めますよね。みんな熱意があるからそうなるんですけど、喧嘩っぽくなっちゃったり、諦めて妥協したりする人が出て、&lt;strong&gt;結局3ヶ月とか4ヶ月とかかかることも&lt;/strong&gt;あります。みんなが納得する状態まで持っていくのは、意外に難しい。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;そこを「匠メソッド」という要求開発方法を使っていて。それを使ってアイデア出しから形にするまでを2~3日でまとめるんです。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;以前登壇した資料に詳しく書いていますが、現状に対する「こうした機能がほしい」というのが出ても、全部作るわけにはいかないじゃないですか。それを、「どうやって、何を基準に決めるの？」という部分を決めていますね。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;center&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/4vBwrvIJjIx1eL&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ssuserafaef6/bpstudy88-connpass-42735511&#34; title=&#34;BPStudy#88 connpassにおける戦略決定&#34;&gt;BPStudy#88 connpassにおける戦略決定&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/ssuserafaef6&#34;&gt;Haruo Sato&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;まず、&lt;strong&gt;「誰に対してどういう価値があるか」&lt;/strong&gt;を出して、要求分析ツリーというツリーの形にします。そして、経営者目線でどこからやっていくかを話していくんです。そうすると、機能じゃなくて戦略的な話ができる。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;誰も幸せにならない、「絶対これがいい」と言い張る人がたまにいますよね。でも、それをあきらめられる。ロジカルに考えられます。あっさりと「これやろう、これは没、没にぶら下がっているのは全部やらないよね」みたいになります。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;みんなが経営者目線を意識するんですね。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/037/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;そうですね。みんなが納得感のある落とし所をconnpassを通じてやっていて、それを受託開発もやっています。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;そういうふうに、サイトの企画から開発、運営までをエンジニアでやっているので、お客さんが「こういうサイト作りたいです」って言ったときにもそれを実践していますね。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_sato.png&#34; alt=&#34;person_sato&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293918&#34; /&gt;&lt;span&gt;connpassのノウハウを生かして、効果の高いものを最小限のちからで。ただ「開発しますよ」という感じではなくて、そういう話ができるようにはなってきたかなって思いますね。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;box_tweet&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/036/person_n0bi.png&#34; alt=&#34;n0bisuke&#34; width=“80&#34; height=“80&#34; class=&#34;alignnone size-full wp-image-293920&#34; /&gt;&lt;span&gt;僕も匠メソッド試してみようかな。&lt;/span&gt;
&lt;/div&gt;
&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;connpassの歴史をさっくりと伺いました。もともとはイベントから生まれ、その後は会社と一緒に成長してきたサービスでした。&lt;/p&gt;

&lt;p&gt;せっかく作り上げたサービスを、できることなら成長させたいですよね。そのためにはサービスに関わる人全てが「経営者目線を意識」するのも効果的のようです。&lt;/p&gt;

&lt;p&gt;これからのconnpassがどのような展開を迎えるのか、今後の活躍にも注目ですね！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>