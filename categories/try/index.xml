<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>try on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/categories/try/</link><description>Recent content in try on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Sat, 03 Aug 2019 00:00:00 +0900</lastBuildDate><atom:link href="/categories/try/" rel="self" type="application/rss+xml"/><item><title>今年の夏休みは最新技術で工作しよう！　〜Webブラウザから操作できる「SkyWayロボット」の作り方〜</title><link>https://dotstud.io/blog/lets-make-webrtc-robot/</link><pubDate>Sat, 03 Aug 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/lets-make-webrtc-robot/</guid><description>&lt;p>こんにちは、ものづくり担当のうこ(&lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a>)です。&lt;br>
連日猛暑が続きますが、暑さに負けず、ものづくりやってますかー？&lt;br>
今回は、WebRTCを用いたサービスの1つである&lt;a href="https://webrtc.ecl.ntt.com/">SkyWay&lt;/a>を利用した、遠隔操作可能でカメラの映像も見れちゃうロボットの作り方を解説します。&lt;br>
また、実際のラジコンは、&lt;a href="https://makezine.jp/event/makers-mft2019/skyway/">Maker Faire Tokyo 2019のSkyWayブース&lt;/a>にてデモ展示されます。&lt;br>
少し難しいところもありますが、ぜひチャレンジしてみてください！&lt;/p>
&lt;h2 id="heading">必要な部品&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こちらのパーツ類をそれぞれ購入して揃えましょう。1〜4番はタミヤの製品です。5〜7番はホームセンター等で入手できます。右下の小さい部品は以下を参照してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>8番の銅線の長さは、9番のラズパイ用カメラのフラットケーブルと同じくらいの長さでよいです。10番はWaveShareという会社の製品で、1500〜2000円前後で通販などでも入手できます。12番のセメント抵抗は、秋葉原のパーツ屋さんなどでないと入手しにくいかもしれません。13番のマイクロSDカードは4GB以上のものであれば何でもかまいません。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>製作に必要な工具類がこちらです。はんだごてはあってもなくても作れますが、100円ショップでも手に入るのでできるだけあったほうがいいでしょう。&lt;/p>
&lt;h2 id="heading-1">組み立て&lt;/h2>
&lt;h3 id="heading-2">車体本体&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>部品のうち、1〜3番は中に説明書が入っているため、まずそれを読みながらそれぞれ組み立てます。1番のボールキャスターは「高さ35mm」で作成、3番のツインモーターギヤボックスは「低速タイプ」で作成してください。ギヤボックスは、小さな輪っかのようなものが部品として余りますので、2つは捨てずに置いておいてください。後ほど「スペーサー」として利用します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>モーターを一度ギヤボックスから抜き、8番の銅線をそれぞれモーター端子に接続します。はんだごてがない場合は、多めに皮膜をむいてよく巻きつけるようにしましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>モーターをギヤボックスに戻し、タイヤをギヤボックスのシャフトに差し込みます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>4番のユニバーサルプレートセットを取り出し、一番大きな部材の短辺に近い一部分（上図参考、端から穴一つぶん空けて内側）をニッパで切り取って複数の穴を連結させます。これをスリットと呼びます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>先ほど切り取ったスリットの上あたりに、スリットを隠さないようにして、ユニバーサルプレートセット内にある「軸受け」を付属のネジとナットを使って上図のように固定してください。本来は、これはシャフトを通したりするのに使うパーツですが、今回はカメラを設置するためのパーツとして転用しています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ユニバーサルプレートの軸受けをつけていない面に、タイヤをつけたギヤボックスとボールキャスターをネジとナットで固定します。ネジの位置は上図をよく見て同じ位置に留めてください。ボールキャスターはネジ穴が4つありますが、留めるのは2点だけで問題ありません。&lt;/p>
&lt;h3 id="raspberry-pi">電源とRaspberry Piの取り付け&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>5〜7番をまとめて1つにして、バッテリーボックスを作ります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>12番のセメント抵抗2本の脚部分を短めに切り、10番のMotor Driver HATの「MA1」端子と「MB1」端子にそれぞれ片方の脚ずつ挿入します（図はMA1のみ挿入しているところです）。マイナスドライバーを使って端子を締め込み、外れないよう固定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>次に11番のRaspberry Pi 3 B+（以下ラズパイ）を手に持ち、マイクロSDカードスロットがある短辺をこちらに向けます。その状態で、両端にあるネジ穴にギヤボックスの余り部品であるネジと、あらかじめ確保しておいたスペーサーを図のように差し込みます。固い場合があるので、その際はドライバーで回しながら差し込んでください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>車体本体に、ネジ2つがついたラズパイを設置します。図を参考にして、ユニバーサルプレート先端部分が穴2つぶんのスペースが空くようにラズパイを置き、ネジをプレートの穴にはめ込んでください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>9番のラズパイ用カメラのケーブルを、ユニバーサルプレートの下からスリットに入れて上に通し、そのままラズパイ本体のカメラコネクタに接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>セメント抵抗をつけたMotor Driver HATを、ラズパイの上に設置します。GPIOピンがずれないようにうまくドッキングしてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>左右のモーターからそれぞれ銅線を1本ずつ、ユニバーサルプレートの穴を通してオモテ側に2本引っ張って持ってきます。その2本をそれぞれ、Motor Driver HATの「MA2」端子と「MB2」端子に挿入し、マイナスドライバーでネジを締めて固定してください。なお、1つのモーターからは2本の銅線が出ていますが、ここではどちらを使ってもかまいません。左右各々から1本ずつ接続してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>左右の各モーターの残りの銅線2本をユニバーサルプレート下から上に通し、今度はセメント抵抗の脚部分に接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ここも、基本的にははんだづけしたほうがよいですが、しない場合は銅線をよく巻きつけてください。金属用ボンドなどをあとで上から塗り保護するのもよいです。&lt;/p>
&lt;h3 id="sd">マイクロSDカードのセットアップ&lt;/h3>
&lt;h4 id="os">OSインストール&lt;/h4>
&lt;p>まず、以下のURLからセットアップ済みのRaspberry Pi用OSイメージをダウンロードしてください。&lt;br>
およそ3GBありますので、ディスク容量と通信量にこ注意ください。&lt;br>
&lt;a href="https://drive.google.com/file/d/1O6UqWZHVknEJ0g2E5wjEJZhn59DFqfsU/view?usp=sharing">SkyWayRobot.iso&lt;/a>&lt;/p>
&lt;p>こちらのイメージは、ユーザー名が「pi」、パスワードが「raspverry」となっています。&lt;br>
SSH接続される際の参考にしてください。&lt;/p>
&lt;p>ダウンロードができたら、以下のサイトを参考にしてマイクロSDカードにダウンロードしたOSイメージをインストールしてください。&lt;br>
Windowsの場合：&lt;a href="https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/">最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a> の「SDカードのフォーマット」から「初期設定」直前まで&lt;br>
Macの場合：&lt;a href="https://qiita.com/shippokun/items/9070fc58f69d8c063e44">MacでRaspberryPi入門 - Qiita&lt;/a> の「2.microSDカードに書き込み」の部分&lt;/p>
&lt;p>OSをインストールしているあいだ、次のSkyWayセットアップを行なっておいてください。&lt;/p>
&lt;h4 id="skyway">SkyWayのセットアップ&lt;/h4>
&lt;p>次に、SkyWayにユーザー登録をして、APIキーを発行します。&lt;br>
&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の “Create new application” をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p>
&lt;pre>&lt;code>Application description: My WebRTC Robot（一例。任意の名前でよいです）
Available domains: localhost, 127.0.0.1, ukkz.github.io
&lt;/code>&lt;/pre>&lt;p>“ukkz.github.io” は、後ほどWeb上のロボットコントローラーからアクセスする際に必要なので、最初は必ず入れておいてください。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="heading-3">環境設定&lt;/h4>
&lt;p>OSのインストールが完了すると、「boot」という外付けディスクがPCに認識されていると思います。そのディスクを開くと色々なファイルが入っていますが、その中から「wifi_passwd_list.conf」と、「robot.json」があることを確認してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず最初に「wifi_passwd_list.conf」を開き、自宅などのWiFiのSSIDとパスワードを入力します。こうすることでWiFiに自動で接続することができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>次に「robot.json」を開きます。この中の&lt;code>&amp;quot;YOUR_SKYWAY_APIKEY&amp;quot;&lt;/code>となっている部分に、先ほど取得したご自身のAPIキーをペーストしてください。また、&lt;code>&amp;quot;robot-NEW&amp;quot;&lt;/code>となっているところはこのロボットを識別するための「ピアID」となります。ここは好きな名前をいれましょう。&lt;/p>
&lt;p>今回は必要ありませんが、このラズパイと同じLAN内でもしSSH接続をする場合は、&lt;br>
&lt;code>ssh pi@ピアID.local&lt;/code>&lt;br>
とするとそのままアクセスすることができます。&lt;br>
また上述したとおり、パスワードは「raspverry」に設定しています。&lt;/p>
&lt;p>この「robot.json」の他の項目として&lt;code>&amp;quot;reverse&amp;quot;&lt;/code>と書かれた部分があります。ここを&lt;code>false&lt;/code>から&lt;code>true&lt;/code>にすると、モーターの回転方向が逆転します。銅線の接続方法によっては最初から逆回転をするようになっている場合があるので、完成後にコントローラからロボットを操作した際に操作と逆方向に進んでしまったりする場合は、こちらのパラメータを変更してみてください。&lt;/p>
&lt;p>以上まで終了したら、マイクロSDカードをPCから取り外します。&lt;/p>
&lt;h3 id="heading-4">仕上げ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ペンチやピンセットなどを使って、マイクロSDカードをラズパイのスロットに挿入します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>カメラがだらんと垂れた状態になっているので、厚めの両面テープを使い、ユニバーサルプレート先端の「軸受けパーツ」に上図のように固定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>電池ボックスをロボット後部の空いた部分に載せ、輪ゴムや髪留め用のゴムなどで落ちないよう簡単に固定します。最後に電池スナップから伸びる赤と黒の線を、それぞれ「VIN」端子と「GND」端子に接続すれば完成です！&lt;/p>
&lt;h2 id="heading-5">試してみよう&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>電源スイッチを入れて、30秒ほど待ってみましょう。モーターが動き、ロボットが軽く前後に移動するような「シグナリング動作」を行うのが確認できたら、SkyWayへの接続が完了しています。何も起こらない場合は、環境設定のところで入力したWiFiの情報が間違っていないか、APIキーがちゃんと入力されているか確認しましょう。&lt;/p>
&lt;p>SkyWayへの接続ができているようであれば、以下のURLをまずコピーして、お使いのブラウザのアドレスバーにペーストしてください。&lt;br>
&lt;code>https://ukkz.github.io/skyway-robot/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>ペーストできたら、ページを表示する前に、このアドレスの「?apikey=」に続く文字列をご自身で取得したAPIキーに書き換えてからこのURLにアクセスしてください。すると次のような画面が出ます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この画面では、各ロボットごとに設定した「ピアID」の文字列のボタンが複数表示されています。このように、うまく接続できている場合は環境設定のところで書いたロボットの「ピアID」が画面上部に表示されます。同じAPIキーで複数台接続している場合は、その台数分だけボタンが出現します。この時点ではまだロボットとP2P接続していません。ボタンをクリックしてみると……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>問題なく接続されていれば、このようにカメラからの画像がブラウザの画面に表示され、十字キーでロボットを操作することができます。他にもゲーミング用のWASDキーでの操作や、LeapMotionでの操作に加え、スマホなどからは画面をなぞることでバーチャルジョイスティックによる操作をすることもできます。&lt;/p>
&lt;h2 id="heading-6">トラブルシューティング&lt;/h2>
&lt;p>&lt;strong>ラズパイが起動しない&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ISOの書き込みがきちんとできているか確認&lt;/li>
&lt;li>電池を満充電のものと交換してみる&lt;/li>
&lt;li>SDカードが壊れてしまっていないか&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>起動したようだが「シグナリング動作」が行われない&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>WiFiのアクセスポイント名とパスワードの確認&lt;/li>
&lt;li>SkyWayのAPIキーの確認&lt;/li>
&lt;li>モーターとモータードライバの物理的な接触不良はないか&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ブラウザでボタンを押しても接続後すぐに切れて「シグナリング動作」を繰り返す&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>カメラモジュールの故障または接触不良&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>操作に大幅な遅延がある&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ロボットとコントローラを同一のLAN内で動かしてみる&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ロボットがキー操作と逆の動作をする&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>前後逆になってしまう場合は、&lt;code>/boot/robot.json&lt;/code>の中にあるreverseをtrueにする&lt;/li>
&lt;li>左右逆になってしまう場合は、&lt;code>/boot/robot.json&lt;/code>の中にあるab_swapをtrueにする&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>最初からロボットとの接続が確立できず起動後すぐに暴走してしまう&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>セメント抵抗の値を大きくしてみる&lt;/li>
&lt;li>どこかで端子がショートしていないか確認&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>接続後しばらくして操作に反応しなくなり暴走してしまう&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>電池を新品に交換する&lt;/li>
&lt;li>電源用USB接続を併用する&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>その他、うまく動かない……&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Twitter &lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a> 宛にDM、もしくは&lt;br>
メールで ukok(at_mark)dotstud.io までお気軽にご質問ください。&lt;/li>
&lt;/ul>
&lt;h2 id="heading-7">まとめ&lt;/h2>
&lt;p>いかがでしたでしょうか？&lt;br>
今回は、最初からプログラムを書くとやはり難易度が高くなってしまうので、ロボットをOSイメージとして配布してみました。もし余力のある方は、ホームフォルダにある&lt;code>app.js&lt;/code>がロボットの本体ですので、ぜひご自身で色々とさわってみてくださいね。&lt;/p></description></item><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-piano/</link><pubDate>Tue, 14 May 2019 00:00:00 +1800</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-piano/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。&lt;br>
&lt;a href="https://dotstud.io/blog/meeting-via-webrtc-piano/">前回&lt;/a>は、スタジオからなんとかオンラインミーティングに参加したのですが、当然ながらバレちゃいましたね……&lt;br>
しかし、新社会人も多いこの季節、同じような境遇に陥る若人も少なくないでしょう！！&lt;br>
というわけで、今回は市販のMIDIキーボードを使って、簡単にこの仕組みを自作する方法を解説します！&lt;/p>
&lt;h2 id="heading">ハードウェア部分&lt;/h2>
&lt;h3 id="heading-1">必要なもの&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Raspberry Pi 3B+&lt;/li>
&lt;li>マイクロSDカード（8GB以上）&lt;/li>
&lt;li>USB-MIDIキーボード&lt;br>
今回はKORG社のnanoKey2を使っていきますが、基本的には何でもOKです。&lt;/li>
&lt;li>Raspberry Pi Camera Module&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ハードウェアは特に作成する必要がなく、カメラモジュールを基板にとりつけ、USB-MIDIキーボードを接続するだけでOKです！&lt;br>
スタジオ編では、実際にYAMAHAのMIDIキーボードを分解して内部にRaspberry Piを組み込んだものを使用しました。余力がある方は試してみてください♪&lt;/p>
&lt;h2 id="heading-2">ソフトウェアのインストールと設定&lt;/h2>
&lt;p>ここからは、すでにRaspberry PiへのOSインストールが完了していて、SSHなどを経由してターミナル操作ができる前提で解説してゆきます。&lt;br>
よくわからない、という方は、以下の記事の「2. ソフトウェアのインストールと設定」あたりを参照しながら、OSのインストールから始めてみてください。&lt;br>
&lt;a href="https://dotstud.io/blog/howto-make-webrtc-pokeberu/">【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】 | dotstudio&lt;/a>&lt;/p>
&lt;h3 id="heading-3">映像のストリーミング&lt;/h3>
&lt;p>まず映像ストリーミングに必要なソフトウェアをインストールします。&lt;br>
gstreamerというストリーミングソフトウェアを使いますが、Raspberry Piへのインストールは少々複雑になります。
以下をそのままコピペしてターミナルで実行してください。&lt;br>
&lt;code>$ sudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio libgstreamer-plugins-base1.0-dev&lt;/code>&lt;br>
（参考：&lt;a href="https://gstreamer.freedesktop.org/documentation/installing/on-linux.html">GStreamer Installing on Linux&lt;/a>）&lt;/p>
&lt;p>上記のインストールが完了したら、次はラズパイカメラでgstreamerを扱うライブラリをインストールします。以下のコマンドを順番に実行してください。&lt;/p>
&lt;pre>&lt;code>$ cd ~/Documents
$ git clone https://github.com/thaytan/gst-rpicamsrc.git
$ cd gst-rpicamsrc/
$ ./autogen.sh --prefix=/usr --libdir=/usr/lib/arm-linux-gnueabihf/
$ make
$ sudo make install
&lt;/code>&lt;/pre>&lt;h3 id="midipython">MIDIキーボードをPythonから扱う&lt;/h3>
&lt;p>MIDIキーボードからの入力を取得できるPythonライブラリをインストールします。&lt;/p>
&lt;p>&lt;code>$ sudo apt-get install libasound2-dev libjack-jackd2-dev&lt;/code>&lt;br>
&lt;code>$ pip3 install mido python-rtmidi&lt;/code>&lt;/p>
&lt;h2 id="heading-4">プログラム部分の制作&lt;/h2>
&lt;h3 id="midi">MIDIキーボードの確認&lt;/h3>
&lt;p>必要なライブラリがインストールできたところで、まずはMIDIキーボードで2タッチ入力ができるか試してみましょう！&lt;br>
今回は、ソースコードが少し長いので、gitリポジトリからクローンします。&lt;br>
ディレクトリはあらかじめ適当なものを作成して移動するなどしておいてください。&lt;br>
&lt;code>$ git clone https://github.com/ukkz/skygate.git&lt;/code>&lt;/p>
&lt;p>このリポジトリには、今回使う「SkyWay」に関するモジュールが含まれていますので、開発者モードでインストールします。&lt;br>
&lt;code>$ pip3 install -e skygate/&lt;/code>&lt;br>
&lt;code>$ sudo python3 skygate/setup.py develop&lt;/code>&lt;/p>
&lt;p>クローンとモジュールのインストールができたら、MIDIキーボードから2タッチ入力ができるサンプルを、Python3で実行してみましょう。&lt;br>
このサンプルでは、外部MIDIインターフェースからのMIDIメッセージを解析して押されている鍵盤を特定し、鍵盤に割り当てられた数字をもとにして2タッチ入力変換をするものになっています。 &lt;br>
&lt;code>$ python3 skygate/2touch-input-by-midi.py&lt;/code>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実行すると入力待ちになります。&lt;br>
上図を参考にして、&amp;ldquo;41128122##&amp;rdquo; と打ち込んでみてください。すると……&lt;/p>
&lt;pre>&lt;code>pi@raspberrypi:~ $ python3 skygate/2touch-input-by-midi.py
たいやき
&lt;/code>&lt;/pre>&lt;p>このように表示されましたでしょうか？&lt;br>
&amp;ldquo;41128122&amp;rdquo; が、2タッチ入力では「たいやき」となり、また &amp;ldquo;##&amp;rdquo; が、ここでは「入力確定」の意味合いで使用するコマンドのようなものになっています。今回は、デバイス側からのメッセージ送信はこれを使って行いますのでぜひ覚えておいてください。&lt;/p>
&lt;h3 id="skyway">SkyWayを使ってラズパイとブラウザ間でビデオチャット&lt;/h3>
&lt;p>今回も、&lt;a href="https://dotstud.io/blog/howto-make-webrtc-pokeberu/">以前にポケベルを作成した記事&lt;/a>と同様に、通信部分で&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>というWebRTCプラットホームを利用します。&lt;br>
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br>
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong>WebRTC Gateway&lt;/strong> というものが開発されていて、無償で利用することができます。&lt;br>
詳細は以下をご覧ください。&lt;br>
&lt;a href="https://github.com/skyway/skyway-webrtc-gateway">skyway/skyway-webrtc-gateway: &lt;em>Experimental&lt;/em> WebRTC Gateway for SkyWay&lt;/a>&lt;/p>
&lt;h4 id="skywayapi">SkyWayのアカウント作成とAPIキーの取得&lt;/h4>
&lt;p>&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。&lt;/p>
&lt;p>&lt;code>Application description: my midi chat client&lt;/code>（一例。任意の名前でよいです）&lt;br>
&lt;code>Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/code>&lt;/p>
&lt;p>&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほどブラウザ上からビデオチャットを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="webrtc-gateway">WebRTC Gatewayの取得と起動&lt;/h4>
&lt;p>Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br>
&lt;code>$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code>&lt;/p>
&lt;p>実行権限を付与してから、バックエンドで起動させます。&lt;br>
&lt;code>$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code>&lt;/p>
&lt;h4 id="raspberry-pi-">Raspberry Pi とブラウザ間で接続&lt;/h4>
&lt;p>以下のコマンドでサンプルスクリプトを実行します。&lt;br>
&lt;code>$ python3 skygate/sample.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br>
今回は &amp;ldquo;keyboard&amp;rdquo; という値を使いましょう。&lt;br>
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p>
&lt;p>&lt;code>Peer created as keyboard: pt-529579b6-1b69-4f81-b213-3400d039a3da&lt;/code>&lt;br>
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;/p>
&lt;p>では次に、このRaspberry Piと通信したいPCのブラウザなどから、以下のURLを開きましょう。&lt;br>
&lt;a href="https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx">SkyWay P2P Video &amp;amp; Text Chat&lt;/a>&lt;/p>
&lt;p>こちらはWeb側のチャット画面となるページですが、URLは以下のようになっています。&lt;br>
&lt;code>https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>このうち、&lt;code>apikey=&lt;/code>より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このような感じになっているかと思います。&lt;br>
このとき、Raspberry Pi側が正常にSkyWayに認識されていれば、左下のドロップダウンメニューに「keyboard」と表示が出ますので、その右横のcallボタンを押すと……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Raspberry Pi側からの映像が大きく映し出されていれば、問題なく接続されています！&lt;/p>
&lt;h3 id="midi-1">ビデオチャットにMIDIメッセージングを組み込もう&lt;/h3>
&lt;p>ここまでくれば、あとはビデオチャットとテキストチャットを結合し、さらにMIDIキーボードの2タッチ入力でテキスト入力ができるようにすれば、「キーボードを弾きながらオンラインミーティングに参加できるマシン」のできあがりです！&lt;br>
こちらも、ソースコードが少し長くなるのでリポジトリの中にサンプルを置いておきました。これをそのまま利用してください。&lt;/p>
&lt;p>&lt;code>$ python3 skygate/video-and-text-by-midi.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>こちらのコードでは先ほどのMIDIキーボードの2タッチ入力に加え、WebRTCで着信した相手に対してその入力テキストを送り返すようになっています。&lt;br>
これを実行すると、以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>2タッチ入力で「おつかれさまです！」と入力したのですが、最後だけ間違えて「おつかれさまですW」になってしまいました……　慣れないと難しいですね。&lt;br>
このまま送信すると、ブラウザ側では以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ブラウザ側からも文字列が表示されました！&lt;br>
もちろん、返事をすることもできます。ここでは「進捗どう？」とブラウザ側から送りましたが、すでに表示されているとおり、Raspberry Pi側にもちゃんと送られていることが確認できます。&lt;/p>
&lt;h2 id="heading-5">まとめ&lt;/h2>
&lt;p>WebRTCを使うと、映像・音声のようなメディアストリームのほか、バイナリにすることができるデータならなんでも送ることができます！　また、本来はWebブラウザ同士でしか使えなかったこの技術が、SkyWayのGatewayによってRaspberry PiのようなIoTデバイスでも実現できるようになったため、さらにものづくりの幅が広がります。少し難しいところもありますが、ぜひともWebRTCによる新しい可能性を感じていただければと思います。&lt;/p></description></item><item><title>光るサンドバッグ作って◯-monsterの気分を感じたい！</title><link>https://dotstud.io/blog/shining-sandbag-like-bmonster/</link><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/shining-sandbag-like-bmonster/</guid><description>&lt;p>プログラミングをしていると運動不足になりがちです。&lt;/p>
&lt;p>何か作っている時のストレスもあります。（なんで動かないんだーってw）&lt;/p>
&lt;p>ストレス発散したい！&lt;/p>
&lt;p>手っ取り早くストレス発散して運動ができるのは何でしょう、、サンドバック殴ることですよね！&lt;br>
（この辺りから、B-◯onsterっぽくしたい欲が出てきます笑）&lt;/p>
&lt;p>サンドバックを買って、叩く毎に光ったり音鳴ったりしたら良い気晴らしになるんじゃないかと。&lt;/p>
&lt;p>ということで、&lt;/p>
&lt;p>&lt;strong>光るサンドバッグを作ってB-Mons◯erに行った感じを味わいたい！！！&lt;/strong>&lt;/p>
&lt;p>ではでは、作っていきましょう&lt;/p>
&lt;h2 id="heading">完成物のイメージ&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;em>&lt;strong>パンチしたら全体が光る。&lt;/strong>&lt;/em>
→この記事では、加速度センサを使って音を鳴らすまで作ってみます。仕様としては以下のことができたら達成とします。&lt;/p>
&lt;p>・サンドバックを叩いたら、音が出る&lt;br>
・５回叩いたら、音が変わる。&lt;br>
・10回叩いたら、音楽が鳴る。&lt;/p>
&lt;h2 id="heading-1">必要な物&lt;/h2>
&lt;p>・サンドバック&lt;br>
・microbit&lt;br>
・電子ブザー&lt;br>
・Micro USB Micro-B&lt;br>
・ワニ口クリップ&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-2">サンドバックを作ってみる&lt;/h2>
&lt;p>まずは、サンドバックを作っていきましょう。&lt;br>
これを買ってみました（http://urx.space/U1ry）&lt;br>
開けけてみて思ったのですが、なかなかしっかりしてて良い感じのサンドバックです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>中身を確認して、作っていきましょう！！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>水を使って土台を作るタイプなので、屋外でやりましょう（じゃないと母ちゃんに怒られますよ笑）&lt;br>
＊ペットボトルたちは猫避けではなく、土台に使う水です。&lt;br>
凝固剤も入っていて、なかなか本格的！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>土台ができたら、膨らましていきましょう！&lt;br>
（なんか、いかがわしい形と動きをしますが、、下ネタご了承ください）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>良い感じに膨らんだらサンドバックは完成です&lt;br>
センサに移りましょう&lt;/p>
&lt;h2 id="heading-3">センサを作ってみる&lt;/h2>
&lt;p>&lt;strong>・micro softアカウントを作ってサインイン&lt;/strong>
microbitはBBCが作ってる教育用のマイコンでして、&lt;br>
マイクロソフトアカウントが必要なので、持ってない人は作りましょう。&lt;br>
ここから作れます。https://microbit.org/ja/guide/&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>・make code エディターでコードを編集します。&lt;/strong>
microbitにコードを書き込むには３つの方法があります。&lt;/p>
&lt;p>JSやPythonで書くこともできますが、一番簡単なのはmake code エディターのブロックで入力することです。&lt;br>
このエディターを使えば、こんな感じで簡単にコードを書くことができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ブロックの意味はJSを書いたことなくてもわかるかも。&lt;/p>
&lt;p>マイプロジェクトから新しいプロジェクトを開いて作っていきます。&lt;/p>
&lt;p>「ずっと」のブロックをここでは2つ作ります。&lt;br>
　・カウントする「ずっと」&lt;br>
　・音を鳴らすための「ずっと」&lt;br>
＊１つにまとめるのもできると思いますが、わかり安かったので分けました。&lt;/p>
&lt;p>カウントする「ずっと」の方に、accXという変数を作り、加速度Xという入力ブロックを追加します。&lt;br>
そして、「もし」ブロックで、accXが500未満であればLEDが点灯し、音楽が鳴るブロックにしていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>音を鳴らすための「ずっと」ブロックを作っていきます。&lt;br>
まず、「最初だけ」ブロックに変数カウントを0にして置いておきます。&lt;br>
そして、カウントする「ずっと」の方に「もし」ブロックを入れて5回いった時と10回いった時にLEDの点灯と音楽が鳴るようにします。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>・microbitとブザーを繋げます&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>おお、っぽくなってきました！&lt;/p>
&lt;p>そして、サンドバックに貼り付ければ、、、&lt;/p>
&lt;h2 id="heading-4">できました！！&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>・デモ動画&lt;/strong>
&lt;a href="http://www.youtube.com/watch?v=it0159iWUrQ">&lt;img src="http://img.youtube.com/vi/it0159iWUrQ/0.jpg" alt="IMAGE ALT TEXT HERE">&lt;/a>&lt;/p>
&lt;h2 id="-">[あとがき] 挫折の数々&lt;/h2>
&lt;p>&lt;strong>・最初のイメージを捨てました&lt;/strong>
最初は単純に光るだけのサンドバックデバイスを作ろうと思っていました。でも、プロトタイプを作る際にLEDが光るだけだと、サンドバックを叩いた時にLEDの光を確認できないんですよねww&lt;/p>
&lt;p>なので、一緒に音も出るように変更しました。&lt;br>
そのおかげで、ゲーム性が高くなって良い感じになりました。&lt;/p>
&lt;p>&lt;strong>・使う物を変えました&lt;/strong>
最初、microbitではなくwio nodeとグローブで作ろうとしてました。&lt;br>
でも、「加速度センサ使ってプロトタイプ作るだけならmicrobitで良いんじゃね？」とのびすけしゃちょーにアドバイスもらい試しに使うことにしました。&lt;/p>
&lt;p>結局、変えてみてよかったです！&lt;br>
microbitはものすごく使いやすい。デプロイの仕方も編集したブロックのhexファイル（microbit用のファイル）をmicrobitのフォルダに入れるだけでできます。&lt;br>
全部のプログラミングがこうなれば良いのに、、って思うぐらいプログラミングしやすかったです。&lt;/p></description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。
&lt;a href="https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/">前回の記事&lt;/a>では、最新技術でポケベルを作ってみた！　というお話と、Webから2タッチ入力ができる公衆電話アプリの紹介をさせていただきました。&lt;/p>
&lt;p>2回目の今回は「制作編」ということで、パーツさえ用意できれば誰でも作れてしまうポケベルの作り方を紹介したいと思います！&lt;/p>
&lt;h2 id="heading">ハードウェア部分の制作&lt;/h2>
&lt;h3 id="heading-1">必要なもの&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Raspberry Pi 3B+&lt;/li>
&lt;li>マイクロUSBケーブル&lt;/li>
&lt;li>マイクロSDカード（8GB以上）&lt;/li>
&lt;li>GrovePi+&lt;/li>
&lt;li>Grove Buzzer&lt;/li>
&lt;li>Grove LCD RGB Backlight&lt;/li>
&lt;li>有線LANで作業用PCと接続できる環境（セットアップに使います）&lt;/li>
&lt;li>テープ（ガムテープやセロハンテープ、マスキングできれば何でも可）&lt;/li>
&lt;/ul>
&lt;p>前提として、最低限のCLI（ターミナル）操作ができる方を対象として記事を書いています。予めご了承ください。&lt;/p>
&lt;h3 id="heading-2">組み立て&lt;/h3>
&lt;h4 id="grovepiraspberry-pi">GrovePi+をRaspberry Piとドッキングする&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ガムテープやセロテープなどで、Raspberry PiのUSB端子の上部を図のように「マスキング」します。&lt;br>
これは、上に乗せるGrovePi+の基板が直接触れることによるショートを防止するためです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Raspberry Piの端子にGrovePi+のソケットを上から挿し込みます。&lt;br>
このとき互いの端子の長さが異なりますが、写真のようにカド部分にあわせるようにしてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>斜め上から見るとこのようになります。&lt;/p>
&lt;h4 id="grovergb-lcd">GroveのRGB LCDとブザーを接続する&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Groveのブザーを「D8」と書かれている端子にGroveケーブルで接続します。&lt;br>
また、Grove LCD RGB BacklightをI2Cと書かれている端子に接続します。こちらはI2C接続なので、I2Cと記述がある端子ならどこでもかまいませんが、写真ではI2C-1という端子に接続しています。&lt;/p>
&lt;h2 id="heading-3">ソフトウェアのインストールと設定&lt;/h2>
&lt;h3 id="grovepiosraspbian-for-robots">GrovePi+向けOS「Raspbian For Robots」&lt;/h3>
&lt;p>このパートは以下のチュートリアルの概略になります。&lt;br>
&lt;a href="https://www.dexterindustries.com/GrovePi/get-started-with-the-grovepi/">Get Started with GrovePi&lt;/a>&lt;/p>
&lt;h4 id="sd">マイクロSDカードへのインストール&lt;/h4>
&lt;p>GrovePi+を動作させられるソフトウェアがプリインストールされたOSが格納されたマイクロSDカードを作成します。&lt;/p>
&lt;p>公式サイトによると、すでにインストール済みのRaspbianも後から追加でGrovePi+用のソフトウェアがインストールできるとのことですが、記事執筆時点の最新ソフトウェアではうまく動作しませんでした。&lt;br>
すでにRaspbianを使われている方も、お手数ではありますが新しいマイクロSDカードを入手してお試しください。&lt;/p>
&lt;p>まず、以下のページからOSイメージファイルを入手します。&lt;br>
&lt;a href="https://sourceforge.net/projects/dexterindustriesraspbianflavor/">Raspbian For Robots by Dexter Industries download | SourceForge.net&lt;/a>&lt;br>
圧縮ファイルになっていますので、ダウンロード完了後に解凍しておきましょう。&lt;/p>
&lt;p>このイメージファイルをマイクロSDカードに書き込みます。&lt;/p>
&lt;ul>
&lt;li>作業PCがWindowsの方は以下を参考に進めてください。&lt;br>
&lt;a href="https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/">最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a>&lt;/li>
&lt;li>作業PCがMacの方は以下を参考に進めてください。&lt;br>
&lt;a href="https://qiita.com/py_iK/items/9070fc58f69d8c063e44">MacでRaspberryPi入門 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>インストールが完了したら、RaspberryPiに挿入して電源を接続し起動させます。&lt;br>
LANケーブルを使い、Raspberry Piと作業用PCを接続します。最近の小型PCはLANポートがついていないことも多いため、その際はUSBイーサネットアダプタなどを使うとよいでしょう。&lt;/p>
&lt;p>接続が完了し、Raspberry PiとGrovePi+のPWR LEDが点灯していることを確認したら、作業用PCブラウザのURL入力欄に&lt;br>
&lt;code>http://dex.local/&lt;/code>&lt;br>
と入力して移動します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ここまででうまくインストールと接続が完了していれば、このような画面が表示されます。&lt;br>
ブラウザ中段左側の、&amp;ldquo;VNC&amp;rdquo; をクリックすると、ブラウザからRaspberry Piのデスクトップ画面へと直接アクセスすることができます。&lt;/p>
&lt;h4 id="heading-4">設定とシステムのアップデート&lt;/h4>
&lt;p>&amp;ldquo;VNC&amp;rdquo; をクリックします。もしもパスワードが求められたら、&amp;ldquo;robots1234&amp;rdquo; と入力しましょう。&lt;br>
Raspberry Piの本体にWiFiが内蔵されているモデル以外をお使いの場合は、WiFiドングル（USB接続の子機）を接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>右上に上下の矢印2つのアイコンをクリックして、WiFiに接続しましょう。&lt;br>
有線LANによる接続と別でWiFiに接続していないと、アップデートやSkyWayへの接続などができません。&lt;/p>
&lt;p>次にソフトウェアのアップデートを行います。&lt;br>
&amp;ldquo;DI Software Update&amp;rdquo; というアイコンをダブルクリックして開き、しばらく待つと以下の画面になります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>以下の作業でダイアログが何回か出ますがすべてOKをクリックしてください。&lt;br>
ドロップダウンメニューから &amp;ldquo;GrovePi&amp;rdquo; を選択し、&amp;ldquo;Update Firmware&amp;rdquo; をクリックします。&lt;br>
それが完了したら、&amp;ldquo;Update Dexter Software&amp;rdquo; のボタンもクリックしてアップデートを行います。&lt;/p>
&lt;p>ターミナルウインドウが出てアップデートが進行していきますので、少し時間がかかりますが終わるまで気長に待ちましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ターミナルがこのような画面になったら閉じて、Raspberry Piを再起動します。&lt;br>
再起動後は同様の手順でブラウザからデスクトップが表示できるところまで進めて、このデスクトップからターミナルを開きましょう。&lt;br>
あるいは、SSHが使い慣れている方であれば、作業用PCから&lt;br>
&lt;code>$ ssh pi@dex.local&lt;/code>&lt;br>
で直接CLI操作をすることも可能ですので、使いやすいほうをお試しください。&lt;/p>
&lt;h2 id="heading-5">ポケベルのプログラム部分の制作&lt;/h2>
&lt;h3 id="grovelcd">GroveのLCDとブザーを扱う&lt;/h3>
&lt;p>さて、ここからはポケベルを実際に動作させるためのプログラムを作成していきます！&lt;br>
といっても、全てコピー&amp;amp;ペーストで作成していただけますのでご安心を。&lt;/p>
&lt;p>まずは適当なディレクトリを作成して移動します。&lt;br>
&lt;code>$ mkdir ~/pocketbell; cd ~/pocketbell&lt;/code>&lt;/p>
&lt;p>LCDディスプレイを簡単に扱えるようにしてくれるモジュールをコピーします。&lt;br>
&lt;code>$ cp ~/Desktop/GrovePi/Software/Python/grove_rgb_lcd/grove_rgb_lcd.py ./&lt;/code>&lt;/p>
&lt;p>同じディレクトリに、テスト用スクリプトを作成しましょう。&lt;br>
&lt;code>$ vi grove_test.py&lt;/code>&lt;br>
ここではviエディタを使っていますが、vimやemacsなど、編集のできるものであれば何でもかまいません。&lt;br>
編集画面になったら、以下のソースコードをコピー&amp;amp;ペーストして保存してください。&lt;/p>
&lt;p>&lt;code>ファイル:grove_test.py&lt;/code>&lt;/p>
&lt;pre>&lt;code>import time, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
try:
setRGB(200, 200, 200)
setText(&amp;quot;Hello PocketBell&amp;quot;)
grovepi.digitalWrite(buzzer, 1)
time.sleep(1)
grovepi.digitalWrite(buzzer, 0)
except KeyboardInterrupt:
grovepi.digitalWrite(buzzer, 0)
except IOError:
print (&amp;quot;Error&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>保存したら、python3で実行してみましょう。&lt;br>
&lt;code>$ python3 grove_test.py&lt;/code>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ブザーからビープ音が鳴ると同時に、LCDに &amp;ldquo;Hello PocketBell&amp;rdquo; と表示されていれば、GroveがRaspberry PiのPythonから正しく扱えていることがわかります。&lt;/p>
&lt;h3 id="skyway">SkyWayと接続する&lt;/h3>
&lt;p>今回のポケベル制作における通信部分は、&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>というWebRTCプラットホームを利用します。&lt;br>
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br>
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong>WebRTC Gateway&lt;/strong> というものが開発されていて、無償で利用することができます。&lt;br>
詳細は以下をご覧ください。&lt;br>
&lt;a href="https://github.com/skyway/skyway-webrtc-gateway">skyway/skyway-webrtc-gateway: &lt;em>Experimental&lt;/em> WebRTC Gateway for SkyWay&lt;/a>&lt;/p>
&lt;h4 id="skywayapi">SkyWayのアカウント作成とAPIキーの取得&lt;/h4>
&lt;p>&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p>
&lt;p>Application description: my pocketbell（一例。任意の名前でよいです）&lt;br>
Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/p>
&lt;p>&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほど公衆電話アプリからこのアプリケーションを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="webrtc-gateway">WebRTC Gatewayの取得と起動&lt;/h4>
&lt;p>Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br>
&lt;code>$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code>&lt;/p>
&lt;p>実行権限を付与してから、バックエンドで起動させます。&lt;br>
&lt;code>$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code>&lt;/p>
&lt;h4 id="gatewaypython">GatewayをPythonで扱えるようにするモジュールの取得&lt;/h4>
&lt;p>今回、WebRTC Gatewayを扱うにあたり、簡単なモジュールを作成しました。&lt;br>
Gitリポジトリをローカルにクローンします。&lt;br>
&lt;code>$ git clone https://github.com/ukkz/skygate.git&lt;/code>&lt;/p>
&lt;p>未完成のモジュールですので、今回は開発者モードでインストールします。&lt;br>
&lt;code>$ pip3 install -e skygate/&lt;/code>&lt;br>
&lt;code>$ sudo python3 skygate/setup.py develop&lt;/code>&lt;/p>
&lt;h4 id="skyway-1">SkyWayへの接続テスト&lt;/h4>
&lt;p>以下のコマンドでサンプルスクリプトを実行します。&lt;br>
&lt;code>$ python3 skygate/sample.py bell-0000 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br>
今回は &amp;ldquo;bell-0000&amp;rdquo; という値を使いましょう。&lt;br>
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p>
&lt;p>&lt;code>Peer created as bell-0000: pt-829aa04e-449d-44a1-94f8-03481741cc5c&lt;/code>&lt;br>
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;br>
Ctrl+C でサンプルスクリプトを終了させましょう。&lt;/p>
&lt;h3 id="skywaygrove">SkyWay接続とGroveを組み合わせる&lt;/h3>
&lt;p>以下のソースコードをコピー&amp;amp;ペーストし &amp;ldquo;pocketbell.py&amp;rdquo; という名前のファイルに保存してください。&lt;/p>
&lt;p>&lt;code>ファイル:pocketbell.py&lt;/code>&lt;/p>
&lt;pre>&lt;code>#!/usr/bin/env python
import time, sys, skygate, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
if len(sys.argv) &amp;gt;= 3:
peer_id = str(sys.argv[1])
api_key = str(sys.argv[2])
try:
peer = skygate.Peer(peer_id, api_key)
except Exception as e:
print(e)
setRGB(100, 0, 0)
quit()
else:
print('Peer created as '+peer.id+': '+peer.token)
setRGB(0, 100, 0)
try:
while True:
for data in peer.getDataConnections():
if not data.getQueue().empty():
mes = data.getQueue().get().decode()
setText(mes)
setRGB(200, 200, 200)
print(mes)
grovepi.digitalWrite(buzzer, 1)
time.sleep(.1)
grovepi.digitalWrite(buzzer, 0)
time.sleep(2)
setRGB(0, 100, 0)
except KeyboardInterrupt:
try:
peer.close()
except Exception as e:
print(e)
&lt;/code>&lt;/pre>&lt;p>接続テストのときと同様、ピアIDとAPIキーを指定して実行します。&lt;br>
ただし、ここではピアIDは &amp;ldquo;bell-0001&amp;rdquo; にしましょう。&lt;br>
&lt;code>$ python3 pocketbell.py bell-0001 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>さて、ここまででポケベルは完成で、上記のプログラムを実行することで待ち受け状態となります。&lt;br>
ではさっそく、公衆電話からデータを送ってみましょう！&lt;/p>
&lt;h2 id="web">Web上の公衆電話から数字を送信しよう&lt;/h2>
&lt;p>前回の記事で紹介した、Webから使えて自作ポケベルと通信ができる公衆電話を使います。&lt;br>
&lt;a href="https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx">PayPhone for SkyWay PocketBell&lt;/a>&lt;/p>
&lt;p>この公衆電話のURLは以下のようになっています。&lt;br>
&lt;code>https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>このうち、&lt;code>apikey=&lt;/code>より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>コインの投入口付近をクリックして、画面上の電話機のディスプレイが &amp;ldquo;CALL&amp;rdquo; になれば問題なくSkyWayに接続されています。&lt;br>
これが確認できたら、以下の順番で操作を進めてみてください。&lt;/p>
&lt;ol>
&lt;li>&amp;ldquo;0001&amp;rdquo;（ポケベルのピアIDであるbell-xxxxのxxxxに相当する4桁の数字）&lt;/li>
&lt;li>電話機ディスプレイが &amp;ldquo;0001&amp;rdquo; 表示に変化&lt;/li>
&lt;li>好きな数字を2〜3文字ほど打ち込んでみる&lt;/li>
&lt;li>受話器を置く部分をクリックして終話する&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ポケベルを確認してみましょう。&lt;br>
ビープ音とともに、自分で打ち込んだ数字がGrove LCDの画面上に表示されましたでしょうか？&lt;br>
今回は簡略版ですので、2タッチ入力で送ったカタカナ文字は表示できないという点がありますが、通信の難しさを意識することなくP2Pでのデータ送受信を体験いただけたかと思います。&lt;/p>
&lt;p>ちなみに、前半の紹介記事で作っていたポケベルの動作のようすは以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>WebRTCはWebブラウザ間でリアルタイムなデータの送受信を扱える最新の規格として普及していますが、ブラウザ以外のIoTデバイスでもこんなに簡単に扱えてしまう技術が登場しています。&lt;br>
今回利用したSkyWayというサービスはJavaScriptのSDKが無償配布されていて、Webブラウザ上で動作するWebRTCアプリケーションを誰でも気軽に作成することができます。また、Raspberry Piから利用したGatewayも、WindowsやLinux上からブラウザを介さずに利用できるようになっています。&lt;br>
あまり複雑なコードを書かなくてもこのようなP2P送受信ができますので、この機会にWebRTCを活用したものづくりにぜひともチャレンジしてみてくださいね！&lt;/p></description></item><item><title>MPU9250で回転角度を検知する</title><link>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</guid><description>&lt;p>はじめまして。ライターとして起用していただきました、ありか(&lt;a href="https://twitter.com/hakase0617">@hakase0617&lt;/a>)です。&lt;/p>
&lt;p>秋田高専で高専ロボコンを5年間やっていました。
ロボコン界隈には卒業後も関わり続けているため、そういった若きエンジニアの手助けができたらと思っています！&lt;/p>
&lt;p>マネジメントや教育に興味があり、その一環でIoT、AIの勉強をしています。
将来的にはエンジニアを育成したり、一緒にお仕事ができたりしたら楽しそうだなって思います。&lt;/p>
&lt;h2 id="9">9軸センサとは&lt;/h2>
&lt;p>早速ですが、今日はMPU9250というセンサを紹介します。
これは「9軸センサ」と呼ばれるものです。&lt;/p>
&lt;p>え、9軸ってx,y,zとあとは何！？&lt;/p>
&lt;p>これは&lt;/p>
&lt;ul>
&lt;li>加速度センサ　x,y,z&lt;/li>
&lt;li>角速度センサ　x,y,z&lt;/li>
&lt;li>地磁気センサ　x,y,z&lt;/li>
&lt;/ul>
&lt;p>の3軸ずつ、合わせて9軸というものです。
まずは各センサの紹介からいきます。&lt;/p>
&lt;h2 id="heading">加速度センサとは&lt;/h2>
&lt;p>加速度とは、&lt;!-- raw HTML omitted -->「どのくらいの速度が変化しているか」という指標です。&lt;!-- raw HTML omitted -->
車を運転しているイメージをしてください。
アクセルを思いっきり踏んで、時速20km/hで走っていた車を時速60km/hまで加速させたとします。
この時、体は後ろに引っ張られる感じがします。
あの感じが加速度です。&lt;/p>
&lt;p>加速度センサでは、物が動いているかどうかということも検出できます。
加速度センサの応用例としてはカメラの手ぶれ補正やスマホの画面回転、ハードディスクの揺れ検知などが該当します。
ロボットの姿勢制御には欠かせない技術でもあります。&lt;/p>
&lt;h2 id="heading-1">角速度センサとは&lt;/h2>
&lt;p>角速度とは読んで字のごとく、回転角の速度です。
ものが回っている時の速さの単位に「回転数」（rpmなど）や周波数（Hzなど）がありますが、これらは「何回回ったか」を示す指標です。
&lt;!-- raw HTML omitted -->回っているものの「角度」に注目して速さを表す指標が角速度です。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="heading-2">地磁気センサとは&lt;/h2>
&lt;p>地磁気センサでは、磁力の強さを検知出来ます。
地球は大きな磁石ですが丸いので、地球上のどの位置にいるかで地磁気の強さは異なります。
そのため、&lt;!-- raw HTML omitted -->地磁気の強さやら向きやらを測定すると自分がいる位置が分かり、自分が向いている方角も分かるというものです。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="9-1">9軸センサで何が出来るか&lt;/h2>
&lt;p>さて、これら3つのセンサが合体した9軸センサで、何ができるのでしょうか？&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->角速度センサで「自分がどれだけ回ったのか」が分かります。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>しかし弱点があります。
角速度センサだけでは、今「動いている」のか「止まっている」のかは分かりません。
そこで加速度センサの出番です。加速度センサは上記状態を把握できます。
これらを合わせて「6軸センサ」と呼ぶのですが、&lt;!-- raw HTML omitted -->この6軸センサを使うと「回転角度」が分かります。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>じゃあ6軸でいいじゃん、と思ってしまいますが、6軸センサには弱点があります。
ずばり、「ドリフト」です。&lt;/p>
&lt;p>角速度センサは「積分方式」で回転角度を検出します。
どういうことかというと、「15度動いた」「20度動いた」「10度動いた」を合わせて「45度動いた」といった風に、足し算で算出します。
しかし、みんなの敵である「誤差」という概念がここで登場します。&lt;/p>
&lt;p>さっきの例で、毎回+1度の誤差が生じてしまうとします。
すると　16度+21度+11度＝48度　となり、誤差がどんどん大きくなっていきます。
つまり、試行回数（時間経過）とともに誤差が大きくなっていくではありませんか。&lt;/p>
&lt;p>これを解決するためには、別の方法で校正を行う必要があります。
そこで「地磁気センサ」を使います。&lt;/p>
&lt;p>地磁気センサは、簡単に言うと「方位磁針」です。そのため、北を向いたまま10分経とうが1時間経とうが、&lt;!-- raw HTML omitted -->地磁気センサは「北を向いている」という状態を教えてくれます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>まとめると、
　角速度センサ→何度回ったかが分かる
　加速度センサ→回ったかが分かる
　地磁気センサ→ドリフトを打ち消す
といった役割を持ち、回転を検知するセンサとなります。&lt;/p>
&lt;h2 id="heading-3">実際に使ってみよう&lt;/h2>
&lt;p>MPU9250を使って、実際に回転角度を測定してみましょう。
今回は開発環境にArduinoを選定しました。
ライブラリが公開されており、初心者である僕でもサクッと動作確認が可能な点に魅力を感じました。&lt;/p>
&lt;p>今回は入門として、角速度センサのみで回転角度を検出してみます。&lt;/p>
&lt;h2 id="heading-4">開発環境&lt;/h2>
&lt;ul>
&lt;li>OS:Windows10&lt;/li>
&lt;li>ArduinoIDE&lt;/li>
&lt;li>Arduino UNO&lt;/li>
&lt;li>MPU9250&lt;/li>
&lt;li>ジャンパワイヤ5本&lt;/li>
&lt;li>ブレッドボード&lt;/li>
&lt;/ul>
&lt;h2 id="heading-5">スケッチ&lt;/h2>
&lt;pre>&lt;code class="language-C:Gyro" data-lang="C:Gyro">#include &amp;lt;Wire.h&amp;gt;
#define FIL 0.9 //フィルタ
#define AVE 100 //測定回数
#define GYRO 30 //ドリフト許容値
int emp[6] = {};
int data = 0; //生データ格納 1から順に加速度xyz角速度xyz
long datasum = 0; //合計データ格納　平均算出用
int th = 0; //閾値
long integral = 0; //積分値
int degree; //回転角度
int rock; //ロック機構により導かれた初期値
char input;
void setup() {
Wire.begin(); Serial.begin(115200); Wire.begin(0x68);
Wire.beginTransmission(0x68); Wire.write(0x6B); Wire.write(0x00); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1C); Wire.write(0x10); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1B); Wire.write(0x08); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1A); Wire.write(0x05); Wire.endTransmission();
Serial.print(&amp;quot;*****************\nCalibrating now\nplease turn once and press 'f'\n&amp;quot;);
while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == 'f') {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
}
void loop() {
reading();
degree = abs(integral / rock);
Serial.println(degree);
datasum = 0;
}
void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code>&lt;/pre>&lt;h2 id="arduino">Arduinoとの接続&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Arduino&lt;/th>
&lt;th align="right">MPU9250&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">5V&lt;/td>
&lt;td align="right">VCC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">GND&lt;/td>
&lt;td align="right">GND&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A2&lt;/td>
&lt;td align="right">INT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A4&lt;/td>
&lt;td align="right">SDA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A5&lt;/td>
&lt;td align="right">SCL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="heading-6">実物&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-7">スケッチ簡易解説&lt;/h2>
&lt;p>今回は角速度センサのｚ軸のみを使用します。
ｚ軸、つまり地面と鉛直な方向の回転が分かる、早い話が自分がどれだけ回ったかが分かります。&lt;/p>
&lt;p>まず、角速度センサを使うにあたって、センサから返ってくる値を調べる必要があります。
センサは「何度回ったよ」とは教えてくれません。
「4253」「71469」みたいな無機質な値を教えてくれます。
そのため、その値がいくつで360度に相当するのかを確認する必要があります。&lt;/p>
&lt;p>どうすればいいのか、答えは「360度回せばいい」のです。そのままです。&lt;/p>
&lt;p>今回はArduinoを起動した際に、まず1回転して値を取得して、それから角度検出をする、というスケッチを作りました。&lt;/p>
&lt;pre>&lt;code class="language-C:while" data-lang="C:while"> while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == 'f') {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
&lt;/code>&lt;/pre>&lt;p>reading()関数の中で実際に値を取得するのですが、1回転した合図として「Arduinoのシリアル通信で'f'を送ってあげた時にwhile()から抜けて角度検出モードに移行します。&lt;/p>
&lt;pre>&lt;code class="language-C:reading" data-lang="C:reading">void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code>&lt;/pre>&lt;p>そのreading()の中では、平均を取るためにAVEで指定された回数値を格納し続けています。
emp[]で色々格納していますが、上から
加速度ｘ軸、ｙ軸、ｚ軸
温度
角速度ｘ軸、ｙ軸、ｚ軸
という風に格納されていきます。そのため今回は角速度ｚ軸のみを取り出すためこういった書き方です。&lt;/p>
&lt;h2 id="heading-8">動かしてみよう&lt;/h2>
&lt;p>リード線を数本接続しただけで動作確認が出来るなんて、とっても楽ですね！
早速動かしてみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>できました！
角度が表示されています。&lt;/p>
&lt;h2 id="heading-9">何に使えるの？&lt;/h2>
&lt;p>今回注目したのは、自律移動ロボットの位置制御です。
ロボットコンテストなどでは、コントローラなどを用いず自動でロボットが移動することを求められるケースが多々あります。
その自動ロボットの位置制御には、どのような方法が用いられているのでしょうか。&lt;/p>
&lt;p>おそらく一般的なものは、モータにロータリエンコーダなどを取り付けて
「モータがどのくらい回ったか」
を検出し、位置を割り出す方法だと思います。&lt;/p>
&lt;p>ですが、この方法には弱点があります。
例えば、移動するフィールドが平らではなかったり、滑りやすい障害物（落ち葉など）があったり、タイヤが走行中に滑ったりといった「タイヤとフィールドの関係」で誤差が生じてしまいます。&lt;/p>
&lt;p>この誤差をなんとかしたい！
そんな時に便利なのがこの9軸センサです。&lt;/p>
&lt;p>自身がどれくらい動いたか、どれくらい回ったかが分かるこのセンサがあれば、たとえタイヤが空回りしてしまっても、「今いる位置」を知ることが可能なのです！&lt;/p>
&lt;h2 id="heading-10">最後に&lt;/h2>
&lt;p>今回は9軸センサのうちたった1軸しか使っていませんが、回転を検出することができました。
より高度なスケッチを作ることでより高度な測定が可能になるため、これからも勉強を続けていきたいです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;/blockquote></description></item><item><title>初めてのArduino〜トレーニングマシンを作る編〜</title><link>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</link><pubDate>Mon, 11 Mar 2019 23:00:00 +0900</pubDate><guid>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</guid><description>&lt;p>初めまして、今月からdotstudioでお世話になる&lt;a href="https://dotstud.io/members/jikyuryoku">自給力&lt;/a>です。&lt;/p>
&lt;p>プログラミングスクール卒業後でフラフラしてたところを、のびすけしゃちょーから「記事を書いてみない？」と誘っていただきました。これから、バシバシ記事を書いていきますのでよろしくお願いします。&lt;/p>
&lt;p>&lt;strong>コードの書き方や手順で変なところあるかもしれませんが、許してください……！&lt;/strong>&lt;/p>
&lt;p>僕はフィットネス業界での事業を考えています！せっかくなので、フィットネスに絡めて何か作って、記事にしていきたいと思います。プログラミングはかじってはいるのですが、IoTのコーディングや電子工作は初めてなので、&lt;!-- raw HTML omitted -->初心者さん向けに自分の失敗の工程も含めてお伝えできればと思ってます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>そして、まず作ろうと決意したモノは……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>意外とスクワットとかダンベルのトレーニングしている時って回数数えるの面倒なんですよね。&lt;/p>
&lt;p>そこで、勝手に回数数えてくれるサービスがあればテレビ見ながらでも回数に気を取られずにトレーニングができる！そんな思いから、サービス作ってみようと思ったわけです。&lt;/p>
&lt;h2 id="heading">のびすけしゃちょーに相談してみる&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code> なるほど！！面白そうですね！！！！じゃあ加速度センサ使ってみたいです！！！&amp;lt;br&amp;gt;
（理由:かっこいいから）
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そんなこんなで、iot初心者の僕は**「磁気スイッチ」を使ったカウントマシン**を作ることに決まりました！！&lt;/p>
&lt;h2 id="heading-1">まずは準備&lt;/h2>
&lt;p>今回使うのはArduino（写真左）と磁気スイッチ（写真真ん中と右）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず、Arduinoにコードを書き込むためにArduino IDEをインストールしましょう。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/docs/arduinoide-setup/?fbclid=IwAR3BB5HrFh-K6cMGcnGl4rjHIA4u2OJYDDlNjLmN5IrprOn8n3zY6g-Kp8s">こちらのドキュメント&lt;/a>の通りにやれば簡単にインストールできます。&lt;/p>
&lt;p>そして、磁気スイッチの使い方は&lt;a href="http://wiki.seeedstudio.com/Grove-Magnetic_Switch/">こちら&lt;/a>を参考にしました！&lt;/p>
&lt;p>サイト内は英語で書かれていますが、ここでやることしては&lt;strong>ArduinoのD２のピンに刺し、写真のように組み立てる&lt;/strong>のだそうです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-2">さぁ、数を数えよう&lt;/h2>
&lt;p>「数なんてすぐに数えられるわい」っと思ったのも束の間……。&lt;/p>
&lt;p>**「あれ？何を数えるんだ？？？」**と、なんとも初歩的な壁にぶつかりました。&lt;/p>
&lt;p>ダンベルを動かした回数を頭の中で数えるのは簡単ですが、機械に数えさせるのは訳が違う。まずは何を数えるか考えなければならないのです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「フラグ」が何を指しているのかが分からなかったので、**「Arduino フラグ」**でググってみました。どうやらセンサの状態を変数に入れて管理することだということが分かりました。&lt;/p>
&lt;p>（参考１）&lt;a href="http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html">アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a>&lt;/p>
&lt;p>次に、「Arduino 数える」でググり、「変数でどう数えるのか」について、以下の記事を参考にしました。&lt;/p>
&lt;p>（参考２）&lt;a href="https://n.mtng.org/ele/arduino/samples/variable2.html">変数で回数を数える&lt;/a>&lt;/p>
&lt;p>やることとしては、&lt;/p>
&lt;ol>
&lt;li>センサの状態をフラグ（変数）として認識させる&lt;/li>
&lt;li>フラグがついてる状態から、なくなった状態に「+１」していく&lt;/li>
&lt;li>1と2を繰り返す&lt;/li>
&lt;/ol>
&lt;p>なるほどなるほど。だいたい道筋が見えてきたので、作っていきます！&lt;/p>
&lt;h2 id="heading-3">よし、作ろう&lt;/h2>
&lt;p>（参考１）&lt;a href="http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html">アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a>からスイッチのon/offで数を数えるためコードがあり、アレンジをしてみました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>必要なのは**「グローバル変数の定義」「フラグの定義」「フラグからカウントする際のコード」の３つ**。&lt;/p>
&lt;p>まずは**「グローバル変数の定義」**です。&lt;/p>
&lt;pre>&lt;code>int G_state = FLG_OFF;
&lt;/code>&lt;/pre>&lt;p>簡単ですね。&lt;/p>
&lt;p>次に**「フラグの定義」**&lt;/p>
&lt;p>フラグ立っている時は「1」、立っていない時は「0」と教えてあげます。&lt;/p>
&lt;pre>&lt;code>const int FLG_ON = 1;
const int FLG_OFF = 0;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>楽勝！&lt;/strong>&lt;/p>
&lt;p>それでは、最後に**「フラグからカウントする際のコード」**を書いてみましょう。&lt;/p>
&lt;p>Void setup()の中に、&lt;/p>
&lt;pre>&lt;code>Serial.begin(115200);
&lt;/code>&lt;/pre>&lt;p>を書き、
void loop()の中に、&lt;/p>
&lt;pre>&lt;code> int val = digitalRead(MAGNECTIC_SWITCH);
&lt;/code>&lt;/pre>&lt;p>を書きます。&lt;/p>
&lt;p>これはつまり、&lt;strong>センサで取得した値を変数valに入れている&lt;/strong>わけです。&lt;/p>
&lt;p>そして&lt;/p>
&lt;pre>&lt;code>if(G_state == FLG_OFF){
count += 1;
}
Serial.println(count);
&lt;/code>&lt;/pre>&lt;p>と書き、コンパイルして、書き込みをしていきます。&lt;/p>
&lt;p>ちょっとここでケアレスミスがあり、書き込みの際にエラーが何回か出ましたが、難なく解消。&lt;/p>
&lt;p>よし！これで動く！&lt;/p>
&lt;p>ツールの中のシリアルモニタを見てみましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>な、なにーーー！！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>なんか勝手に数が増えてる！！！！このままじゃ数字が止まらなくなる！！！（パニック状態）&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>つまり、コードを日本語訳にすると、**「G_stateの中のフラグがないときは、足していく」**という意味。フラグが無い状態では+1され続けてしまうんです。そりゃうまくイカンわ！！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>のびさんのご指摘の通り、&lt;strong>elseの中にif文を書いてフラグがonだったら1カウントをするコード&lt;/strong>に書き換えました。&lt;/p>
&lt;p>よし！これでどうだ！！！書き込み開始！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-4">ちゃんと数えてくれるか検証&lt;/h2>
&lt;p>磁石をセンサに近づけて、、&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>離すと、、&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そしてシリアルモニタを見ると&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>見事成功です。&lt;/p>
&lt;p>いやぁ、一口に数を数えるとは言っても奥が深いですね！今日のところはこの辺で終わりたいと思います。&lt;/p>
&lt;p>続編をお楽しみに……！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【どんと来い、列車遅延】 勤怠メールをサクッと送れるオレオレツールを作ってみた</title><link>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</link><pubDate>Wed, 13 Feb 2019 12:50:00 +0900</pubDate><guid>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/pokio">ポキオ&lt;/a>です。&lt;/p>
&lt;p>急いでるときに限って、いつも使ってる通勤列車が遅延してたりして、あたふたすることってありますよね？&lt;/p>
&lt;p>そんなときに、勤務先などにサクッとメールを送れるオレオレツールを作ってみました。&lt;/p>
&lt;h2 id="node-red">Node-REDで簡単に作ってみる&lt;/h2>
&lt;p>「ツールを作る」と聞くと、なんだか難しそうな雰囲気がしますよね？&lt;/p>
&lt;p>でも、&lt;strong>Node-RED&lt;/strong>を使うとちょっとのコーディングで簡単にツールが作れてしまいます！&lt;a href="https://dotstud.io/blog/nefry-servo-handson-takudooon/#node-red-mqtt%E3%81%A7%E3%82%B5%E3%83%BC%E3%83%9C%E3%83%A2%E3%83%BC%E3%82%BF%E3%82%92%E9%81%A0%E9%9A%94%E5%88%B6%E5%BE%A1">たくろーどんさんの記事&lt;/a>でもNode-REDが使われていましたが、&lt;strong>実行したい処理をフローチャートのように、ノードとノードをつなぐことによって設計できるツール&lt;/strong>になっています。&lt;/p>
&lt;p>Node-REDはその名の通り、&lt;strong>Node.js&lt;/strong>上で動作するツールです。普段使っているPCなどNode.jsが動作している環境であればNode−REDを動かすことができますが、今回は外出先からでもアクセスできるツールを簡単に作成したかったので、&lt;!-- raw HTML omitted -->Node-REDをサービスとして提供している&lt;strong>enebular&lt;/strong>&lt;!-- raw HTML omitted -->を使ってみようと思います。&lt;/p>
&lt;h2 id="node-red-1">Node-REDでツールを作ってみる&lt;/h2>
&lt;p>はじめに、今回作ったツールがこちら。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このツールの機能は、以下の3つです。&lt;/p>
&lt;ul>
&lt;li>外出先からでもアクセスできるWebページを作る（念の為、BASIC認証を設けておく）&lt;/li>
&lt;li>そのページ上で勤怠メールの文言をプリセットから選べるようにして、特定の宛先にメール送信できるようにする&lt;/li>
&lt;li>**「本当に電車遅延が原因で遅刻するの？」**と言われないように、京急の遅延証明書ページで発行されている遅延証明書を表示して、メールに遅延証明書へのリンクを貼れるようにする&lt;/li>
&lt;/ul>
&lt;p>遅延状況は例によって&lt;strong>京浜急行&lt;/strong>のWebページ上の情報を取得しています。また、不特定多数の人が勝手にこのツールを使ってしまわないように、BASIC認証を設けてアクセスを制限しています。&lt;/p>
&lt;h2 id="node-redweb">Node-REDでWebページを作る&lt;/h2>
&lt;p>Node-REDで用意されているノードのなかに、HTTPリクエストを受ける&lt;strong>&lt;code>HTTP In&lt;/code>&lt;/strong>ノードと、それに対するレスポンスを返す&lt;strong>&lt;code>HTTP Response&lt;/code>&lt;/strong>ノードがあります。&lt;/p>
&lt;p>この&lt;code>HTTP In&lt;/code>ノードを作るとHTTPのエンドポイントができます。このノードと&lt;code>HTTP Response&lt;/code>ノードを下の絵のようにつなぎ、レスポンスとなるソースを返すようにすれば、Webページができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>上の例では、静的な&lt;code>Hello, world!&lt;/code>という文字列を返すだけですが、&lt;strong>&lt;code>HTTP Response&lt;/code>&lt;/strong>ノードで返す情報を動的に変化させたり、Webページ上で動作させるスクリプトを記述してレスポンスとして返せば、よりリッチなWebページをNode-REDで作成することができます。
&lt;/p>
&lt;p>次にBASIC認証ですが、Node-REDに対して追加でモジュールをインストールすることで、簡単に機能を追加することができます。&lt;/p>
&lt;p>Node-REDの設定メニューから、[Settings] &amp;gt; [Palette] &amp;gt; [Install]と進み、&lt;strong>&lt;code>node-red-contrib-httpauth&lt;/code>&lt;/strong>を探します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>これをインストールすることで、BASIC認証が行えるノードを追加できます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>使い方は至ってシンプルで、先程の&lt;code>HTTP In&lt;/code>ノードの後ろにBASIC認証のノードをつけて、BASIC認証で使うユーザー名とパスワードをノードの設定で指定するだけです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実際に、この状態でエンドポイントにアクセスすると、確かにBASIC認証がワークしています。&lt;/p>
&lt;h2 id="heading">勤怠メールを送れるようにする&lt;/h2>
&lt;p>ここまでで、&lt;code>Hello, world!&lt;/code>が表示できるWebページができました。ここからは&lt;!-- raw HTML omitted -->&lt;code>HTTP Response&lt;/code>ノードで返すHTMLをよしなに編集して、勤怠メールを作成できるようにします。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>具体的には、次のような機能をHTMLやJavaScriptで記述して、それをレスポンスで返すようにしました。&lt;/p>
&lt;ul>
&lt;li>プルダウンメニューで遅刻する理由を選択できるようにする&lt;/li>
&lt;li>選択した理由に応じて、メールの本文を変更する&lt;/li>
&lt;li>&lt;strong>mailtoスキーム&lt;/strong>を使って、メーラーを起動してメールを送れるようにする&lt;/li>
&lt;/ul>
&lt;p>遅刻の理由も、必ずしも電車遅延だけではないので、体調不良や保育園関係の理由も選択できるようにしました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>遅刻の理由を選択すると、メール本文が変わるようになっています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>&lt;code>勤怠メールを送る&lt;/code>&lt;/strong>を押すとメーラーが起動し、ツールで指定した文言をそのままメールとして送ることができます。&lt;/p>
&lt;h2 id="heading-1">遅延証明書情報を取得する&lt;/h2>
&lt;p>ツール上で表示する京浜急行の運行情報は、&lt;a href="https://delay.keikyu.co.jp/delay/">京急線遅延証明書の発行&lt;/a>のページから取得します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>その日に発行されている遅延証明書のリスト化し、その遅延証明書ページへのリンクをメール本文に貼り付けるか選択できるようになっています。&lt;/p>
&lt;p>ただし、下記のような問題があるため、泥臭いワークアラウンドを入れています。&lt;/p>
&lt;ul>
&lt;li>遅延証明書ページへのリンクのアドレスに、mailtoスキームでは扱えない文字が含まれているため、&lt;a href="https://is.gd/">外部のURL短縮サービス「is.gd」&lt;/a>を使ってアドレスを短く変換している&lt;/li>
&lt;li>URL短縮のWebAPIを叩こうとするとCORSポリシーに引っかかったため、URL短縮のために同じドメインでエンドポイントを作成し、それ経由でアドレスの変換を行う&lt;/li>
&lt;/ul>
&lt;h2 id="heading-2">実際のフローはこちら&lt;/h2>
&lt;p>Node-REDで作成したフローを、エクスポートしたものはこちらです。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JSON" data-lang="JSON">[{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;tab&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;label&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Flow 1&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;disabled&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;a45bf2b.b54621&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http request&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;遅延証明書ページ取得&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ret&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;txt&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;https://delay.keikyu.co.jp/delay/&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tls&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;89f0f7a0.a8bda8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;3a7ae4dc.fc9f5c&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;active&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tosidebar&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;console&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tostatus&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;complete&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;delayData&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">600&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;89f0f7a0.a8bda8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;情報をパース&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let table = msg.payload.split(&amp;#39;&amp;lt;tbody&amp;gt;&amp;#39;)[1];\ntable = table.split(&amp;#39;&amp;lt;/tbody&amp;gt;&amp;#39;)[0];\n\nlet rows = table.split(&amp;#39;\\n&amp;#39;).join(&amp;#39;&amp;#39;);\nrows = rows.split(&amp;#39;&amp;lt;tr&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;/tr&amp;gt;&amp;#39;);\n\nlet data = {};\nlet dateOffset = 0;\ndata.date = rows[0 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;)[0].replace(&amp;#39;&amp;lt;tr style=\&amp;#34;background-color:#ADD8E6;\&amp;#34;&amp;gt;&amp;#39;,&amp;#39;&amp;#39;).replace(&amp;#39;&amp;lt;td rowspan=3&amp;gt;&amp;#39;,&amp;#39;&amp;#39;).replace(&amp;#39;&amp;lt;br/&amp;gt;&amp;#39;,&amp;#39;&amp;#39;);\n\nlet morningData = rows[0 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet dayData = rows[1 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet nightData = rows[2 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet dataTitles = [&amp;#39;品川～横浜：上り&amp;#39;,&amp;#39;品川～横浜：下り&amp;#39;,&amp;#39;横浜以南：上り&amp;#39;,&amp;#39;横浜以南：下り&amp;#39;,&amp;#39;空港線内：上り&amp;#39;,&amp;#39;空港線内：下り&amp;#39;];\n\ndata.morningTitle = morningData[0];\ndata.dayTitle = dayData[0];\ndata.nightTitle = nightData[0];\n\nmorningData = morningData.slice(1);\ndayData = dayData.slice(1);\nnightData = nightData.slice(1);\n\ndata.morningData = [];\ndata.dayData = [];\ndata.nightData = [];\ndata.allData = [];\n\nfor(let i = 0; i &amp;lt; 6; i++){\n if(morningData[i] !== &amp;#39;-&amp;#39;){\n let detail = morningData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + morningData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.morningData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.morningTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n \n if(dayData[i] !== &amp;#39;-&amp;#39;){\n let detail = dayData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + dayData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.dayData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.dayTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n \n if(nightData[i] !== &amp;#39;-&amp;#39;){\n let detail = nightData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + nightData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.nightData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.nightTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n}\n\nmsg.delayData = data;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;e0512d8a.0fe7f&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;3a7ae4dc.fc9f5c&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;5c37249e.aecf1c&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http in&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPリクエスト&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;upload&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;swaggerDoc&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">120&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;b83cd390.27959&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;bbc86a41.f453e8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http response&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPレスポンス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;statusCode&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;headers&amp;#34;&lt;/span>:{},&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">610&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;e0512d8a.0fe7f&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;パースした情報を整形&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let delayBody = &amp;#39;&amp;#39;;\n\ndelayBody += &amp;#39;&amp;lt;h1&amp;gt;&amp;#39; + msg.delayData.date + &amp;#39;&amp;lt;/h1&amp;gt;\\n&amp;#39;;\n\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.morningTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.morningData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.morningData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.dayTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.dayData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.dayData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.nightTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.nightData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.nightData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\nmsg.delayBody = delayBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">260&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;5f89b7b8.249788&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;6e8b7f2.3c2238&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;ページの要素を結合&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let bodyHeader = &amp;#39;&amp;lt;html&amp;gt;&amp;lt;header&amp;gt;&amp;lt;meta name=\&amp;#34;viewport\&amp;#34; content=\&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no\&amp;#34;&amp;gt;&amp;lt;link rel=\&amp;#34;stylesheet\&amp;#34; href=\&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\&amp;#34; integrity=\&amp;#34;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/header&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div class=\&amp;#34;container\&amp;#34;&amp;gt;&amp;lt;div class=\&amp;#34;row\&amp;#34;&amp;gt;&amp;lt;div class=\&amp;#34;col-sm my-2\&amp;#34;&amp;gt;&amp;#39;;\nlet bootstrap = &amp;#39;&amp;lt;script src=\&amp;#34;https://code.jquery.com/jquery-3.3.1.slim.min.js\&amp;#34; integrity=\&amp;#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\&amp;#34; integrity=\&amp;#34;sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\&amp;#34; integrity=\&amp;#34;sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;#39;;\nlet bodyFooter = &amp;#39;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;;\n\nmsg.payload = bodyHeader + msg.delayBody + msg.mailBody + msg.scriptBody + bootstrap + bodyFooter;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">380&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;bbc86a41.f453e8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;5f89b7b8.249788&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;メール送信部分&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let mailBody = &amp;#39;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;h1&amp;gt;勤怠メールを作成&amp;lt;/h1&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;reason\&amp;#34;&amp;gt;遅延理由を選択する&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;select class=\&amp;#34;custom-select\&amp;#34; name=\&amp;#34;reason\&amp;#34; id=\&amp;#34;reason\&amp;#34; onchange=\&amp;#34;updateMessage()\&amp;#34;&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;電車遅延のため\&amp;#34; selected&amp;gt;電車遅延&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;腹痛のため\&amp;#34;&amp;gt;体調不良（腹痛）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;頭痛のため\&amp;#34;&amp;gt;体調不良（頭痛）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;体調不良のため\&amp;#34;&amp;gt;体調不良（理由なし）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;保育園登園に時間がかかったため\&amp;#34;&amp;gt;保育園関係&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;家事都合のため\&amp;#34;&amp;gt;家事都合&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;私用のため\&amp;#34;&amp;gt;私用&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;/select&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;chien\&amp;#34;&amp;gt;遅延証明書へのリンクを貼る&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;select class=\&amp;#34;custom-select\&amp;#34; name=\&amp;#34;chien\&amp;#34; id=\&amp;#34;chien\&amp;#34; onchange=\&amp;#34;updateMessage()\&amp;#34;&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;\&amp;#34; selected&amp;gt;なし&amp;lt;/option&amp;gt;&amp;#39;;\n\nmsg.delayData.allData.forEach(function(value){\n mailBody += &amp;#39;&amp;lt;option value=\&amp;#34;&amp;#39; + value.link + &amp;#39;\&amp;#34;&amp;gt;&amp;#39; + value.title + &amp;#39;&amp;lt;/option&amp;gt;&amp;#39;;\n});\n\nmailBody += &amp;#39;&amp;lt;/select&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;message\&amp;#34;&amp;gt;メール本文&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;textarea class=\&amp;#34;form-control\&amp;#34; id=\&amp;#34;message\&amp;#34; rows=\&amp;#34;5\&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;br&amp;gt;&amp;lt;button type=\&amp;#34;button\&amp;#34; class=\&amp;#34;btn btn-primary btn-block\&amp;#34; onclick=\&amp;#34;sendMessage()\&amp;#34;&amp;gt;勤怠メールを送る&amp;lt;/button&amp;gt;&amp;#39;;\n\nmsg.mailBody = mailBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">300&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;a41aa11e.86e04&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;a41aa11e.86e04&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;スクリプト部分&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let name = global.get(&amp;#39;name&amp;#39;);\nlet address = global.get(&amp;#39;address&amp;#39;);\n\nlet scriptBody = &amp;#39;&amp;lt;script&amp;gt;&amp;#39;;\nscriptBody += &amp;#39;let reasonSelect = document.getElementById(\&amp;#34;reason\&amp;#34;); let chienSelect = document.getElementById(\&amp;#34;chien\&amp;#34;); let textArea = document.getElementById(\&amp;#34;message\&amp;#34;); function updateMessage() { let reasonIndex = reasonSelect.selectedIndex; let chienIndex = chienSelect.selectedIndex; let message = \&amp;#34;\&amp;#34;; message += \&amp;#34;&amp;#39; + name + &amp;#39;です。\\\\n\\\\n\&amp;#34;; message += \&amp;#34;大変申し訳ありませんが、\&amp;#34;; message += reasonSelect.options[reasonIndex].value; message += \&amp;#34;出社が遅れます。\\\\n\&amp;#34;; message += \&amp;#34;何卒宜しくお願いします。\&amp;#34;; if (!chienSelect.options[chienIndex].value) { textArea.value = message; return; } let request = new XMLHttpRequest(); request.onload = function () { message += \&amp;#34;\\\\n\\\\n遅延証明書はこちらです。\\\\n\&amp;#34;; message += request.responseText; textArea.value = message; }; request.open(\&amp;#34;GET\&amp;#34;, \&amp;#34;./encode/\&amp;#34; + encodeURIComponent(chienSelect.options[chienIndex].value.trim()), false, \&amp;#34;USER_NAME\&amp;#34;, \&amp;#34;PASSWORD\&amp;#34;); request.send(); } function sendMessage() { window.open(\&amp;#34;mailto:&amp;#39; + address + &amp;#39;?body=\&amp;#34; + encodeURIComponent(textArea.value)); } updateMessage();&amp;#39;;\nscriptBody += &amp;#39;&amp;lt;/script&amp;gt;&amp;#39;;\n\nmsg.scriptBody = scriptBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;6e8b7f2.3c2238&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;867b9e9b.bb5b8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http in&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPリクエスト&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;/encode/:url&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;upload&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;swaggerDoc&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">120&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;eb246d76.1afeb&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;fdb9da8c.f0ebf8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;55421d41.0dc1b4&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http response&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPレスポンス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;statusCode&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;headers&amp;#34;&lt;/span>:{},&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">610&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;303db0f1.b72bf&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http request&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;APIを叩く&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ret&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;txt&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tls&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">330&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">520&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;55421d41.0dc1b4&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;808e61ff.edc38&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;URL変換&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;msg.url = &amp;#39;https://is.gd/create.php?format=simple&amp;amp;url=&amp;#39; + encodeURIComponent(msg.req.params.url);\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">320&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;303db0f1.b72bf&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;eb246d76.1afeb&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;active&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tosidebar&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;console&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tostatus&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;complete&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">310&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">560&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b475750f.2c9468&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;ページへのアクセス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">130&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">140&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b61cb0ab.67446&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;URL短縮&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">440&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;892cd0e6.0c4ae&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;定数の宣言&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">40&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;92da441f.e87958&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;inject&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;起動時&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;payload&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;payloadType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;date&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;repeat&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;crontab&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;once&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;onceDelay&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0.1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;7e9e582f.c0d258&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7e9e582f.c0d258&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;差出人、宛先の設定&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;global.set(&amp;#39;name&amp;#39;, &amp;#39;ポキオ&amp;#39;);\nglobal.set(&amp;#39;address&amp;#39;, &amp;#39;example@example.com&amp;#39;);\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b83cd390.27959&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;node-red-contrib-httpauth&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;BASIC認証&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;file&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;cred&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;authType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Basic&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;realm&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;USER_NAME&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;password&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;PASSWORD&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;hashed&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">110&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;a45bf2b.b54621&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;fdb9da8c.f0ebf8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;node-red-contrib-httpauth&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;BASIC認証&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;file&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;cred&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;authType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Basic&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;realm&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;USER_NAME&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;password&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;PASSWORD&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;hashed&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">110&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">520&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;808e61ff.edc38&amp;#34;&lt;/span>]]}]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>フローエディターは、こんな感じになっています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heroku">Herokuにデプロイして本格運用&lt;/h2>
&lt;p>今回は、enebularが提供してるNode-REDの仕組みを利用して、フローを設計してみました。&lt;/p>
&lt;p>フロー設計時にはテンポラリのエンドポイントURLが付与されるので、作りながら実際のWebページの挙動を試すことができます。&lt;/p>
&lt;p>また、実際に本格運用しようと思ったときも、enebularからHerokuやAWS Lambdaにフローをデプロイ可能なので、簡単に日々の業務改善ツールとして導入可能です。&lt;!-- raw HTML omitted -->enebularも無料で始められますし、HerokuやAWSも無料枠で運用することが可能です。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>サクッと業務改善ツールが作れる環境が揃っているので、みなさんもぜひ作ってみてください！&lt;/p></description></item><item><title>NefryBTからGoogleDriveにデータをアップロードする方法</title><link>https://dotstud.io/blog/update-nefrybt-to-googledrive/</link><pubDate>Thu, 31 Jan 2019 03:21:47 +0900</pubDate><guid>https://dotstud.io/blog/update-nefrybt-to-googledrive/</guid><description>&lt;p>こんにちは、NefryBTきっかけでIoTの世界に入った&lt;a href="https://dotstud.io/members/kuroda">黒田&lt;/a>と言います。Webとどう接していけばいいのか分からないときにNefryBTと出会い、意外と難しくない(何とかなる)ことを知りました。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/members/wami">わみさん&lt;/a>、ありがとうございます。&lt;/p>
&lt;p>今回は、NefryBTからGoogleDriveにデータをアップロード出来たので紹介したいと思います。&lt;/p>
&lt;p>おそらく&lt;strong>ESP32マイコン搭載モジュール&lt;/strong>であれば、同じ考えで出来ると思います。&lt;/p>
&lt;h2 id="heading">アップロードまでの手順&lt;/h2>
&lt;ol>
&lt;li>リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/li>
&lt;li>リフレッシュトークンから認証用のアクセストークンを取得する&lt;/li>
&lt;li>http POSTリクエストでデータをアップロードする&lt;/li>
&lt;/ol>
&lt;p>はい、とてもシンプルです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->httpを全く分からない私としてはここまでたどり着くまでかなり苦労しました・・・先人の方々が様々な実績を残してくれているのを本当に感謝しています。) &lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>もう少し詳しく説明します。&lt;/p>
&lt;p>&lt;a href="https://developers.google.com/drive/api/v3/about-sdk">Google Drive REST APIのサイト&lt;/a>を読みますと、まずGoogleDriveへアクセスするには認証用のアクセストークンが必要なこと、データをアップロードするときの&lt;a href="https://developers.google.com/drive/api/v3/multipart-upload">POSTリクエストの書き方&lt;/a>が決まっていることが分かります。&lt;/p>
&lt;p>そのためアクセストークンで認証を行いつつPOSTリクエストを投げれば、NefryBTからでもデータをアップロード出来ます。&lt;/p>
&lt;p>ここで一つ&lt;strong>トラップ&lt;/strong>があります。
アクセストークンの有効期限は3600秒(1時間)です。当初これを知らなかったので、&lt;!-- raw HTML omitted -->時間が経つとなぜか認証エラーになる問題&lt;!-- raw HTML omitted -->に悩まされました。&lt;/p>
&lt;p>回避策としてリフレッシュトークンからアクセストークンを取得するようにします。すると、アクセストークンが新しくなるので、認証もばっちり通ります。
つまり、&lt;!-- raw HTML omitted -->アクセストークンよりも再発行用のリフレッシュトークンが欲しい&lt;!-- raw HTML omitted -->のです。&lt;/p>
&lt;p>ではでは、具体的な手順を説明していきたいと思います。&lt;/p>
&lt;h3 id="1-">[手順1] リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/h3>
&lt;p>今回はNode.jsで取得します。&lt;/p>
&lt;p>公式サイトの&lt;a href="https://developers.google.com/drive/api/v3/quickstart/nodejs">Node.js Quickstart&lt;/a>に従って進めていきます。&lt;/p>
&lt;p>公式サイトにある「ENABLE THE DRIVE API」を押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/0ba2b731-7e29-2db2-7591-6ae56f1a7950.png" alt="OAuth0.PNG">&lt;/p>
&lt;p>するとOAuth2.0クライアントIDを作ってくれます。
続けて「DOWNLOAD CLIENT CONFIGURATION」を押してcredentials.jsonを取得します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/d4efa193-e36c-2e83-81f5-590cf105894a.png" alt="OAuth1.PNG">&lt;/p>
&lt;hr>
&lt;p>(補足)
例えばcredentials.jsonを削除してしまって、もう一度取得したい場合・・・
Google Cloud PlatformのAPI認証情報からダウンロードできます。&lt;/p>
&lt;p>左上のメニューを押して「APIとサービス」を押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/b26bff46-0dea-afba-38cd-51cb6ba8eb68.png" alt="OAuth2-1.PNG">&lt;/p>
&lt;p>認証情報の中に先ほど作成したクライアントIDがありますので、ダウンロードします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/901be3e5-b947-c290-e641-8db7dd075dcf.png" alt="OAuth2-2.PNG">&lt;/p>
&lt;p>※ファイル名は「client_secret_***.json」となっていますので「credentials.json」に変更します。&lt;/p>
&lt;hr>
&lt;p>次にNode.jsでアクセストークンなどの情報を取得します。(Node.jsやnpmが動く環境は用意されているものとします。)&lt;/p>
&lt;ul>
&lt;li>アクセストークンを取得するフォルダを用意して以下のモジュールをインストールします。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>npm install googleapis@27 --save
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>credentials.jsonも同じフォルダに移動させます。&lt;/li>
&lt;li>index.jsを作成します。公式サイトのままではスコープがReadOnlyになっているのでアップロードできるスコープに変更します。それ以外は全く同じです。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>[変更前]
const SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly'];
[変更後]
const SCOPES = ['https://www.googleapis.com/auth/drive'];
&lt;/code>&lt;/pre>&lt;p>スコープについて詳しくは&lt;a href="https://developers.google.com/drive/api/v2/about-auth">About Authorization&lt;/a>を参照ください。&lt;/p>
&lt;ul>
&lt;li>準備は整ったのでNode.jsを実行します。&lt;/li>
&lt;/ul>
&lt;p>１. credentials.json、index.jsなど一式入っているフォルダです。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/52fdf814-f643-1754-9a6c-2a6d9e3fe8bd.png" alt="AccessToken_0.PNG">&lt;/p>
&lt;p>２. nodeを実行します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/1ce7b76c-988e-fd6f-c863-eef96b1fa4ac.png" alt="AccessToken_1.PNG">&lt;/p>
&lt;p>３. URLが表示されるのでアクセスします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/64852163-ae0f-6156-6d7d-fac9e90c7a27.png" alt="AccessToken_2.PNG">&lt;/p>
&lt;p>４. 紐づけるGoogleアカウントを選択し、GoogleDriveへのアクセスを許可します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/dac52655-b356-073b-96bf-678c073897c1.png" alt="AccessToken_3.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/55cd28a0-da9b-e5ee-2b91-095030c96f37.png" alt="AccessToken_4.PNG">&lt;/p>
&lt;p>５. 最後に表示されるコードを上記3.の続きに貼り付けます。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/3fd64238-c27d-6412-23f9-d9754bec9ff9.png" alt="AccessToken_5.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/90f1683d-0731-25e9-e376-cdbb11156e2b.png" alt="AccessToken_6.PNG">&lt;/p>
&lt;p>６.無事token.jsonを取得できました。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/7aa8a2bb-b2d0-f5d0-787c-6f142da997a8.png" alt="AccessToken_7.PNG">&lt;/p>
&lt;h3 id="2-">[手順2] リフレッシュトークンから認証用のアクセストークンを取得する&lt;/h3>
&lt;p>アップロードに必要な情報は揃ったので、あとはNefryBTだけ触っていきます。&lt;/p>
&lt;p>リフレッシュトークンからアクセストークンを取得するhttp POSTリクエストは次の通りとなります。&lt;/p>
&lt;pre>&lt;code>[ヘッダー]
POST /oauth2/v4/token HTTP/1.1
Host: www.googleapis.com:443
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: [POSTするデータの長さ]
[POSTするデータ]
refresh_token=[リフレッシュトークン]&amp;amp;client_id=[クライアントID]&amp;amp;client_secret=[クライアントシークレット]&amp;amp;grant_type=refresh_token
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>クライアントIDとクライアントシークレットは「credentials.json」に書いてあります。もしくはGoogle Cloud PlatformのAPIの認証情報でも確認できます。&lt;/li>
&lt;li>リフレッシュトークンは「token.json」に書いてあります。&lt;/li>
&lt;/ul>
&lt;p>POSTリクエストを投げるとレスポンスがjson形式で返ってきます。&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;access_token&amp;quot;: &amp;quot;***&amp;quot;,
&amp;quot;expires_in&amp;quot;: 3600,
&amp;quot;scope&amp;quot;: &amp;quot;https://www.googleapis.com/auth/drive&amp;quot;,
&amp;quot;token_type&amp;quot;: &amp;quot;Bearer&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>access_token:***が取得したいアクセストークンになります。&lt;/p>
&lt;hr>
&lt;p>上記の内容をNefryBTで書くと次のようになります。&lt;/p>
&lt;p>※&lt;a href="https://github.com/NearMugi/NefrySample/tree/master/GoogleAPI/%23createLibrary/googleAPI/PostDrive">プログラムソース&lt;/a>のうち主要な部分を抜粋しています。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>リフレッシュトークン・クライアントID・クライアントシークレットは個人情報なので、直接プログラムソースに記載するのではなくNefryBTのDataStoreに登録します。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POSTするデータを設定します。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postData = &amp;quot;&amp;quot;;
postData += &amp;quot;refresh_token=&amp;quot; + refresh_token;
postData += &amp;quot;&amp;amp;client_id=&amp;quot; + client_id;
postData += &amp;quot;&amp;amp;client_secret=&amp;quot; + client_secret;
postData += &amp;quot;&amp;amp;grant_type=&amp;quot; + String(&amp;quot;refresh_token&amp;quot;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>ヘッダーを設定します。
データの長さはPOSTするデータ(postData)から算出します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postHeader = &amp;quot;&amp;quot;;
postHeader += (&amp;quot;POST &amp;quot; + token_uri + &amp;quot; HTTP/1.1\r\n&amp;quot;);
postHeader += (&amp;quot;Host: &amp;quot; + String(host) + &amp;quot;:&amp;quot; + String(httpsPort) + &amp;quot;\r\n&amp;quot;);
postHeader += (&amp;quot;Connection: close\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Type: application/x-www-form-urlencoded\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Length: &amp;quot;);
postHeader += (postData.length());
postHeader += (&amp;quot;\r\n\r\n&amp;quot;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>POSTリクエストを投げてレスポンスを取得します。更にレスポンスからアクセストークンを取得します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String result = postRequest(host, postHeader, postData);
//取得したjsonデータからAccessTokenを取得する
const int BUFFER_SIZE = JSON_OBJECT_SIZE(4) + JSON_ARRAY_SIZE(1);
StaticJsonBuffer&amp;lt;BUFFER_SIZE&amp;gt; jsonBuffer;
char json[result.length() + 1];
result.toCharArray(json, sizeof(json));
JsonObject&amp;amp; root = jsonBuffer.parseObject(json);
const char* tmp = root[&amp;quot;access_token&amp;quot;];
token = tmp;
return token;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>POSTリクエストを行っているソース(&lt;code>postRequest&lt;/code>)です。正常に処理が終わればレスポンスを返します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postRequest(const char* server, String header, String data) {
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
Serial.print(&amp;quot;Connecting to: &amp;quot;); Serial.println(server);
if (!client.connect(server, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return result;
}
Serial.println(&amp;quot;certificate matches&amp;quot;);
Serial.print(&amp;quot;post: &amp;quot;); Serial.println(header + data);
client.print(header + data);
Serial.println(&amp;quot;Receiving response&amp;quot;);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil('\r');
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
}
String line = client.readStringUntil('\r');
Serial.println(line);
result += line;
}
Serial.println(&amp;quot;closing connection&amp;quot;);
return result;
}
&lt;/code>&lt;/pre>&lt;p>だいたいこんな感じで無事アクセストークンを取得できました。&lt;/p>
&lt;h3 id="3-http-post">[手順3] http POSTリクエストでデータをアップロードする&lt;/h3>
&lt;p>いよいよデータをアップロードしてみます。今回はテキストファイルとJpegファイルのアップロード方法を紹介します。
公式サイトの&lt;a href="https://developers.google.com/drive/api/v3/manage-uploads">Uploading Files&lt;/a>によりますと、アップロード方法は3パターンあります。&lt;/p>
&lt;ul>
&lt;li>Simple upload&lt;/li>
&lt;li>Multipart upload&lt;/li>
&lt;li>Resumable upload&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Simple upload&amp;quot;の場合、アップロードしたファイル名は全て&amp;quot;untitled&amp;quot;となってしまい、具合がよろしくありません。
&amp;ldquo;Multipart upload&amp;quot;の場合、ファイルに様々な設定を付加できます。今回はファイル名・親フォルダの指定・コメントを設定しました。
(&amp;ldquo;Resumable upload&amp;quot;はどんなものか調べていません・・・)&lt;/p>
&lt;p>Multipart uploadのPOSTリクエストは次の通りです。&lt;/p>
&lt;pre>&lt;code>POST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart HTTP/1.1
Authorization: Bearer [YOUR_AUTH_TOKEN]
Content-Type: multipart/related; boundary=foo_bar_baz
Content-Length: [NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]
--foo_bar_baz
Content-Type: application/json; charset=UTF-8
{
&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;
}
--foo_bar_baz
Content-Type: image/jpeg
[JPEG_DATA]
--foo_bar_baz--
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>[YOUR_AUTH_TOKEN]はアクセストークンを設定します。&lt;/li>
&lt;li>[NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]は &lt;strong>ヘッダーから最後のデータまですべてのサイズ&lt;/strong> となります。つまり最初のPOSTから最後の&amp;ndash;foo_bar_baz&amp;ndash;まで全てのサイズを設定します。これを間違えると正しくPOSTリクエストを投げることが出来ません。&lt;/li>
&lt;li>&lt;code>&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;&lt;/code> の部分がアップロードするファイルの設定を記載する部分となります。
何を設定できるかは&lt;a href="https://developers.google.com/drive/api/v3/reference/files">公式ページの&amp;quot;Files&amp;rdquo;&lt;/a>を参照ください。&lt;/li>
&lt;li>その下の&lt;code>Content-Type: image/jpeg&lt;/code> がアップロードするデータの形式となり、その次にデータの中身を記述していきます。&lt;/li>
&lt;li>最後に&lt;code>--foo_bar_baz--&lt;/code> で閉めます。&lt;/li>
&lt;/ul>
&lt;p>まとめますと、プログラムを書くとき毎回設定しなければならないのは次の4つです。&lt;/p>
&lt;ul>
&lt;li>アクセストークン&lt;/li>
&lt;li>POSTリクエスト全体のサイズ&lt;/li>
&lt;li>ファイルの設定(ファイル名・親フォルダ・コメント)&lt;/li>
&lt;li>ファイルの中身&lt;/li>
&lt;/ul>
&lt;h2 id="heading-1">テキストファイルをアップロードする&lt;/h2>
&lt;p>上記の仕様を踏まえてテキストファイルをアップロードする例を挙げます。この次に紹介するJpegファイルのアップロードと比べるとシンプルで分かりやすいと思います。&lt;/p>
&lt;ol>
&lt;li>POSTリクエストのファイルの指定周り(&lt;code>--foo_bar_baz&lt;/code>部分)を設定します。&lt;/li>
&lt;li>上記1.のあとPOSTリクエスト全体のサイズが分かるのでヘッダー(&lt;code>POST https://&lt;/code>部分)を設定します。&lt;/li>
&lt;li>上記1.と2.をPOSTします。&lt;/li>
&lt;li>データの中身をPOSTします。&lt;/li>
&lt;li>最後の&amp;rsquo;&amp;ndash;foo_bar_baz&amp;ndash;&amp;lsquo;をPOSTします。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> void postDrive_Text(String _fileName, String _textData, String _comment) {
uint8_t DataSize = _textData.length();
uint8_t postData[DataSize];
for (int i = 0; i &amp;lt; DataSize; i++) {
postData[i] = (uint8_t)_textData[i];
}
1. POSTリクエストのファイルの指定周りを設定
String start_request = getStartRequest_Text(_fileName, _comment);
2. ヘッダーを設定
uint16_t full_length;
full_length = start_request.length() + DataSize + end_request.length();
String postHeader = getPostHeader(full_length);
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
if (!client.connect(host, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return ;
}
3. 1.と2.をPOST
client.print(postHeader + start_request);
4. データの中身をPOST
client.write(&amp;amp;postData[0] , DataSize);
5. --foo_bar_baz--をPOST
client.println(end_request);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil('\r');
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
} else {
Serial.println(F(&amp;quot;[WARNING] Response Data is Nothing&amp;quot;));
}
String line = client.readStringUntil('\r');
Serial.println(line);
result += line;
}
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-2">実際にテキストファイルをアップロードしている様子&lt;/h3>
&lt;p>１. アップロード先のフォルダを作成しておきます。親フォルダIDは「&lt;code>https://drive.google.com/drive/folders/***&lt;/code>」の***の部分です。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c32ed96f-9dc4-59cb-0eef-c1091b088397.png" alt="GoogleDrive_Text_0.PNG">&lt;/p>
&lt;p>２. NefryBTのセットアップが完了するのを待ちます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/699a3064-ec88-d560-2429-f5cab310ce9b.jpeg" alt="DSC_0003.JPG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/3b5bc537-b82a-eb2e-a751-077817386f7e.jpeg" alt="DSC_0005.JPG">&lt;/p>
&lt;p>３. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/cfafe65c-ebb7-d82c-e566-d47436cf7ee9.jpeg" alt="DSC_0006.JPG">&lt;/p>
&lt;p>４. 成功しました！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/97de4845-f602-0aa5-26ac-064cd47609be.jpeg" alt="DSC_0007.JPG">&lt;/p>
&lt;p>５. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/72fae28e-6ac8-4fca-e940-265031c2c8cf.png" alt="GoogleDrive_Text_1.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/5b5cb82b-7dd1-d3e4-bf3b-bb60bfffdb1a.png" alt="GoogleDrive_Text_2.PNG">&lt;/p>
&lt;h2 id="jpeg">Jpegファイルをアップロードする&lt;/h2>
&lt;p>続いてJpegファイルをアップロードする方法です。&lt;strong>ここからかなり込み入った内容になります。&lt;/strong>
今回JpegファイルにしてアップロードしたものはNefryBTに接続したカメラモジュールで撮った画像となります。そのためカメラモジュールの話とGoogleDriveへアップロードする話が混在しますのでご了承ください・・・&lt;/p>
&lt;h3 id="heading-3">カメラモジュールについて&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/eeaaa02a-2c36-b131-aa32-eeacef9abb63.jpeg" alt="ArduCAM.jpg">&lt;/p>
&lt;p>使用したカメラモジュールは&lt;a href="https://www.switch-science.com/catalog/3780/">Arducam Miniモジュール(2メガピクセル)&lt;/a>です。ESP32向けのサンプルがあったので動かせるだろうと思って選びました。
(NefryBTのことを考えれば&lt;a href="https://www.switch-science.com/catalog/1626/">Groveのカメラ&lt;/a>でも良かったとあとで気づきました・・・)&lt;/p>
&lt;p>初期設定やカメラモジュールからデータを取得するところは&lt;a href="https://github.com/NearMugi/NefrySample/tree/master/ArduCAM/OV2640">プログラムソース&lt;/a>を参照ください。&lt;/p>
&lt;p>厄介なのは&lt;strong>取得したデータ全てがJpegデータではない&lt;/strong>ことです。このカメラモジュールの場合、1バイト目に0x00が入っています。これ、要らないデータなのです。きちんとJpegファイルにあたるデータをアップロードしないと正しく表示されません。&lt;/p>
&lt;p>&lt;a href="https://www.setsuki.com/hsp/ext/jpg.htm">Jpegファイル&lt;/a>は開始位置(0xFFD8)と終了位置(0xFFD9)が決まっています。この範囲のデータだけをアップロードすればJpegファイルとして正しく表示されます。&lt;/p>
&lt;h3 id="heading-4">プログラムのポイント&lt;/h3>
&lt;p>カメラモジュールの仕様を踏まえてアップロードします。&lt;/p>
&lt;ul>
&lt;li>Jpegファイルのデータサイズは何十万バイトと膨大なので全て変数に入れて一括でPOSTすることはできません。そのためデータを分割してカメラモジュールから取得、POSTを繰り返します。&lt;/li>
&lt;li>POSTリクエスト全体のサイズとJpegファイルのサイズが異なるので、&lt;strong>POSTリクエスト全体のサイズに足りない分を最後に0x00をPOSTする&lt;/strong>ことで整合性を合わせています。&lt;/li>
&lt;/ul>
&lt;p>プログラムソースを抜粋します。&lt;/p>
&lt;pre>&lt;code>// ReadSizeはカメラモジュールで取得したデータサイズ
//GoogleDriveへポスト
String start_request = api.getStartRequest_Jpeg(&amp;quot;Capture&amp;quot;, &amp;quot;From ArduCam&amp;quot;);
String end_request = api.getEndRequest();
uint32_t full_length;
full_length = start_request.length() + ReadSize + end_request.length();
String postHeader = api.getPostHeader(full_length);
(中略)
client.print(postHeader + start_request);
//JPEGデータ
static const size_t bufferSize = 2048;
static uint8_t buffer[bufferSize] = {0xFF};
uint32_t index = 0;
uint32_t sizeCnt = 0;
uint8_t now = 0;
uint8_t prev = 0;
myCAM.CS_LOW();
myCAM.set_fifo_burst();
カメラモジュールのデータをPOSTしている部分
bool isHeader = false;
while (ReadSize--) {
prev = now;
now = SPI.transfer(0x00);
//ヘッダーを探す(0xFF,0xD8)
if (!isHeader) {
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD8) {
Serial.println(F(&amp;quot;JPEG First Data is Found&amp;quot;));
buffer[0] = 0xFF;
buffer[1] = 0xD8;
index = 2;
sizeCnt = 2;
isHeader = true;
}
continue;
}
//ヘッダーが見つかったあと
sizeCnt++;
// JPEGファイルの最後を検出したら終了(0xFF,0xD9)
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD9) {
Serial.println(F(&amp;quot;JPEG Last Data is Found&amp;quot;));
buffer[index++] = now;
client.write(&amp;amp;buffer[0], index);
myCAM.CS_HIGH();
break;
}
if (index &amp;lt; bufferSize) {
buffer[index] = now;
index++;
} else {
if (!client.connected()) break;
client.write(&amp;amp;buffer[0], bufferSize);
index = 0;
buffer[index++] = now;
}
}
myCAM.CS_HIGH();
ReadSize += 1;
Serial.print(F(&amp;quot;JPEG Data Size: &amp;quot;)); Serial.println(sizeCnt);
Serial.print(F(&amp;quot;Remaining Data Size: &amp;quot;)); Serial.println(ReadSize);
client.println(end_request);
POSTリクエスト全体のサイズを調整している部分
//バッファーメモリサイズと画像サイズが異なるため、full_lengthに達していない。
//足りない分の帳尻を合わせる
uint8_t tmpbuf[ReadSize] = {0x00};
client.write(&amp;amp;tmpbuf[0], ReadSize);
(以下、省略)
}
&lt;/code>&lt;/pre>&lt;h3 id="jpeg-1">実際にJpegファイルをアップロードしている様子&lt;/h3>
&lt;p>１. アップロード先のフォルダはテキストファイルと同じところにします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/2660eda8-1474-644d-fae2-bba8b87c502d.png" alt="GoogleDrive_Jpeg_0.PNG">&lt;/p>
&lt;p>２. カメラで撮ってみます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c25e4a34-5b9c-44ff-3f78-b390c2c492de.jpeg" alt="DSC_0015.JPG">&lt;/p>
&lt;p>３. NefryBTのセットアップが完了するのを待ちます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/91963234-adc5-7317-654b-41dbd6b8b9ca.jpeg" alt="DSC_0010.JPG">
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/a85255a7-e375-2d75-c7d0-4d126e66b60f.jpeg" alt="DSC_0012.JPG">&lt;/p>
&lt;p>４. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/6e91d9ac-0e56-6df0-062b-2d158fd75b3e.jpeg" alt="DSC_0013.JPG">&lt;/p>
&lt;p>５. 成功しました！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c7291283-ac2a-feb9-d924-9c23963058b1.jpeg" alt="DSC_0014.JPG">&lt;/p>
&lt;p>６. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/b9ed65c6-185b-a57c-1877-1bb079b2400f.png" alt="GoogleDrive_Jpeg_1.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/fac4420d-d91a-3849-f71c-b17ab86d842f.png" alt="GoogleDrive_Jpeg_2.PNG">&lt;/p>
&lt;h2 id="heading-5">参考にしたサイト&lt;/h2>
&lt;p>大変助かりました。&lt;/p>
&lt;p>*&lt;a href="https://github.com/jalmeroth/ESP8266-OAUTH2/blob/master/ESP8266-OAUTH2/ESP8266-OAUTH2.ino">jalmeroth/ESP8266-OAUTH2&lt;/a>&lt;/p>
&lt;p>*&lt;a href="https://himakan.net/websites/how_to_google_oauth">Google APIを使用するためにGoogle OAuth認証をしようよ&lt;/a>&lt;/p>
&lt;p>*&lt;a href="https://zudoh.com/trouble-shooting/google-oauth-expired">時間が立つとGoogle APIのOAuth認証に失敗する&lt;/a>&lt;/p>
&lt;p>*&lt;a href="http://indoor.lolipop.jp/IndoorCorgiElec/ESP-SensorCam.php">ESP-SensorCam&lt;/a>&lt;/p>
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>NefryBTから直接GoogleDriveにアクセスできたときは感動しました！こんな小さなボードがネットに繋がるなんて！&lt;/p>
&lt;p>またGmailやスプレッドシートなどの他のアプリケーションにもアクセスできると思います。面白い組み合わせがあるかもしれません。&lt;/p>
&lt;p>みなさんのIoTライフの参考になれば幸いです。ではでは。&lt;/p></description></item><item><title>Let's 顔面製造！第二弾！ 歌うサンタ顔面ロボットを作ろう</title><link>https://dotstud.io/blog/face-robot-making-basic2/</link><pubDate>Wed, 30 Jan 2019 04:43:15 +0900</pubDate><guid>https://dotstud.io/blog/face-robot-making-basic2/</guid><description>&lt;p>みなさん、こんにちは！&lt;a href="https://dotstud.io/members/maruko">へっぽこまるこ&lt;/a>です！&lt;/p>
&lt;p>今回は、クリスマスをいい感じに盛り上げてくれるサンタ（っぽい）ロボットを
&lt;strong>obnizとgoogle home mini&lt;/strong>でつくってみました！&lt;/p>
&lt;p>少し遅めの（めっちゃ早めの）サンタクロースをご覧あれ〜！&lt;/p>
&lt;p>以前に「&lt;a href="https://dotstud.io/blog/face-robot-making-basic/">Let's 顔面製造！ダンボールとサーボモータで喋る顔面ロボットを作ろう&lt;/a>」でつくった顔面ロボット（的なもの）を改造して作ってみます！&lt;/p>
&lt;h2 id="heading">完成イメージ&lt;/h2>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=zyrQC8Du9b0">&lt;img src="http://img.youtube.com/vi/zyrQC8Du9b0/0.jpg" alt="画像が表示できません">&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->※LEDが結構強めに光っているので閲覧にはご注意ください&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>obnizでgoogle-home-notifierを使ってgoogle home miniから音源を再生します。
google-home-notifierは、&lt;strong>スキル開発なしでgoogle homeにテキストを読ませたり、MP3などの音源が再生できたりするnode.jsのライブラリ&lt;/strong>です。&lt;/p>
&lt;p>再生された曲に連動して下唇に仕込んだサーボモータを動かして、
歌ってる感じにしてみます。&lt;/p>
&lt;h2 id="heading-1">つくってみよう&lt;/h2>
&lt;h3 id="heading-2">&lt;/h3>
&lt;ul>
&lt;li>obniz&lt;/li>
&lt;li>sg90（顔面ロボの流用）&lt;/li>
&lt;li>LED（顔面ロボの流用）&lt;/li>
&lt;li>顔デバイス（顔面ロボの流用）&lt;/li>
&lt;li>ジャンパワイヤー（顔面ロボの流用）&lt;/li>
&lt;li>切ないクリスマスソングの音源&lt;/li>
&lt;li>白のファー生地や赤いフェルトなど（デバイス装飾用）&lt;/li>
&lt;/ul>
&lt;p>macOS High Sierraの環境で進めます。&lt;/p>
&lt;h3 id="heading-3">サンタデバイス準備&lt;/h3>
&lt;p>顔面デバイスをデコります。
毛足10cm程度のファー生地を裂いたものと、
赤いフェルトで適当につくった帽子をくっつけます。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/115325/56e1e21b-16cd-4d5e-0bdf-f8b8afdf4dba.jpeg" alt="IMG_2790.JPG">&lt;/p>
&lt;p>サーボモータとLEDをobnizに接続します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/115325/daae1da4-7ee0-dd52-978e-e64c46026a01.png" alt="obniz_servo_led.png">&lt;/p>
&lt;h3 id="heading-4">ライブラリやら準備&lt;/h3>
&lt;p>node.jsがインストールされてる前提で進めます。&lt;/p>
&lt;p>ターミナルで以下のコマンドを叩きます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">//ディレクトリ作成&amp;amp;移動
$ mkdir santa
$ cd santa
//google-home-notifierとobnizのライブラリをインストール
$ npm install google-home-notifier
$ npm install obniz
//メインのプログラムファイルを作成
$ touch face.js
//音源格納用ディレクトリを作成
$ mkdir audio　
&lt;/code>&lt;/pre>&lt;/div>&lt;p>audioフォルダには音源のkurisumasusong.mp3を格納しておきます。&lt;/p>
&lt;h3 id="heading-5">音源準備&lt;/h3>
&lt;p>google-home-notifierを使って簡単に曲を再生するには、
クリスマスソングが入ったMP3をネットにアップして、
URLを取得する必要があります。&lt;/p>
&lt;p>今回は、&lt;a href="https://qiita.com/n0bisuke/items/0c09ae5da43b551e98b1#%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B">n0bisuk先生のハンズオン&lt;/a>で教えてもらった
ngork+pythonを使った方法でホスティングします。&lt;/p>
&lt;p>santa ディレクトリ配下で作業します。&lt;/p>
&lt;pre>&lt;code>$ python -m SimpleHTTPServer 8080
&lt;/code>&lt;/pre>&lt;p>別タブで以下を実行します。&lt;/p>
&lt;pre>&lt;code>$ cd santa
$ ngrok http 8080
&lt;/code>&lt;/pre>&lt;p>実行結果です。&lt;/p>
&lt;pre>&lt;code>ngrok by @inconshreveable (Ctrl+C to quit)
Session Status online
Account nougami (Plan: Free)
Version 2.2.8
Region United States (us)
Web Interface http://127.0.0.1:4040
Forwarding http://84019d5b.ngrok.io -&amp;gt; localhost:8080
Forwarding https://84019d5b.ngrok.io -&amp;gt; localhost:8080
Connections ttl opn rt1 rt5 p50 p90
57 0 0.00 0.00 6.51 8.91
HTTP Requests
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://84019d5b.ngrok.io/audio/kurisumasusong.mp3">https://84019d5b.ngrok.io/audio/kurisumasusong.mp3&lt;/a> が音源ファイルのURLになります。&lt;/p>
&lt;h2 id="heading-6">へっぽこプログラム&lt;/h2>
&lt;p>node.jsでプログラムを書きます。
（async/awaitはまだ勉強中・・・）&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript:face.js" data-lang="javascript:face.js">
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">googlehome&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;google-home-notifier&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">language&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ja&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Obniz&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;obniz&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Obniz&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;××××-××××&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">onconnect&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mouth&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wired&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ServoMotor&amp;#34;&lt;/span>, {&lt;span style="color:#a6e22e">signal&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">vcc&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">gnd&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>});
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">leftLed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wired&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;LED&amp;#34;&lt;/span>, { &lt;span style="color:#a6e22e">anode&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#a6e22e">cathode&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span> });
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">rigthLed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wired&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;LED&amp;#34;&lt;/span>, { &lt;span style="color:#a6e22e">anode&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#a6e22e">cathode&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span> });
&lt;span style="color:#a6e22e">mouthMove&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">maxDeg&lt;/span>, &lt;span style="color:#a6e22e">maxDegWait&lt;/span>, &lt;span style="color:#a6e22e">minDeg&lt;/span>, &lt;span style="color:#a6e22e">minDegWait&lt;/span>) {
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouth&lt;/span>.&lt;span style="color:#a6e22e">angle&lt;/span>(&lt;span style="color:#a6e22e">maxDeg&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#a6e22e">maxDegWait&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouth&lt;/span>.&lt;span style="color:#a6e22e">angle&lt;/span>(&lt;span style="color:#a6e22e">minDeg&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#a6e22e">minDegWait&lt;/span>);
}
&lt;span style="color:#a6e22e">singMouth&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#75715e">//init
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">1300&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#75715e">//く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//り
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ま
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//きゃ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">120&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">900&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//な
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//れ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//こ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//に
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//は
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">1300&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//き
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//と
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ぼ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//の
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//こ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">170&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//た
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">170&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//え
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">170&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//も
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//き
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//と
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//で
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//て
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//だ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//あ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">800&lt;/span>, &lt;span style="color:#ae81ff">5.0&lt;/span>, &lt;span style="color:#ae81ff">600&lt;/span>);
&lt;span style="color:#75715e">//く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//り
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ま
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//きゃ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">120&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">900&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//な
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//れ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//こ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//に
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//は
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">1300&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//だ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//れ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//を
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//あ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//し
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//て
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//の
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//か
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ま
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//は
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//み
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//え
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//な
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">20.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">20.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//て
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//も
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//お
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>, &lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">49&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">--&lt;/span>){
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouth&lt;/span>.&lt;span style="color:#a6e22e">angle&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">80&lt;/span>);
}
}
&lt;span style="color:#a6e22e">google_home&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">googlehome&lt;/span>.&lt;span style="color:#a6e22e">device&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Google-Home&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">language&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">googlehome&lt;/span>.&lt;span style="color:#a6e22e">play&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;http://×××××.ngrok.io/audio/kurisumasusong.mp3&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>) {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>);
&lt;span style="color:#a6e22e">leftLed&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>();
&lt;span style="color:#a6e22e">rigthLed&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>();
&lt;span style="color:#a6e22e">singMouth&lt;/span>();
});
}
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">google_home&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>for (i=49; i&amp;gt;=0; i&amp;ndash;){
　await mouth.angle(i);
　await obniz.wait(80);
}
↑はこだわった部分なので、
注目してみてもらえると嬉しいです。&lt;/p>
&lt;h2 id="heading-7">実行&lt;/h2>
&lt;p>サンタデバイスにgoogle home miniをそっと添えて、
以下のコマンドで実行します。&lt;/p>
&lt;pre>&lt;code>$ node face.js
&lt;/code>&lt;/pre>&lt;p>サンタが歌ってる感じになります。&lt;/p>
&lt;h2 id="heading-8">まとめ&lt;/h2>
&lt;p>哀愁漂うサンタクロースができたのではないでしょうか。&lt;/p>
&lt;p>私にとって、スマートスピーカーは電子部品的存在なので、
今後も色々な作品に仕込んで、へっぽこなモノづくりに一役買ってもらおうと思っています。&lt;/p>
&lt;p>よかったら是非「スマスピ + デバイス」挑戦してみてください！&lt;/p></description></item><item><title>電池が切れても消えないディスプレイって？電子ペーパーを使ってみた！</title><link>https://dotstud.io/blog/using-e-paper-module/</link><pubDate>Tue, 29 Jan 2019 02:11:45 +0900</pubDate><guid>https://dotstud.io/blog/using-e-paper-module/</guid><description>&lt;p>こんにちは、わくわくエンジニアの&lt;a href="https://dotstud.io/members/tomato/">佐々木さん&lt;/a>です。&lt;/p>
&lt;p>みなさんは&lt;strong>電子ペーパー&lt;/strong>を知っていますか？&lt;/p>
&lt;p>電子ペーパーはその名の通り、&lt;!-- raw HTML omitted -->紙のような見た目のディスプレイ&lt;!-- raw HTML omitted -->です。低消費電力であることや、最後に表示したものを電源がなくても保持し続けることが特徴として挙げられます。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->身近なものだとAmazonの&lt;a href="https://www.amazon.co.jp/Kindle-New%E3%83%A2%E3%83%87%E3%83%AB-%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC-Wi-Fi-%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF-%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%9A%E3%83%BC%E3%83%B3%E6%83%85%E5%A0%B1%E3%81%A4%E3%81%8D%E3%83%A2%E3%83%87%E3%83%AB/dp/B0186FESEE/ref=sr_1_1?ie=UTF8&amp;amp;qid=1547970527&amp;amp;sr=8-1&amp;amp;keywords=kindle">Kindle&lt;/a>で採用されています。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>それでは実際に本題に入っていきましょう！&lt;/p>
&lt;h2 id="heading">電子ペーパーの仕組み&lt;/h2>
&lt;p>今回使用するのは&lt;a href="https://www.sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-58WG">2.9inch e-Paper Module&lt;/a>という電子ペーパー。&lt;/p>
&lt;p>電子ペーパーは複数の表示方式がありますが、2.9inch e-Paper Moduleは&lt;strong>電気泳動方式&lt;/strong>というものが採用されているためこちらの説明をしたいと思います。&lt;/p>
&lt;p>電気泳動方式では、ディスプレイの中に&lt;strong>マイクロカプセル&lt;/strong>という&lt;!-- raw HTML omitted -->色を表現するための透明なカプセル&lt;!-- raw HTML omitted -->が隙間なく並んでいます。そのマイクロカプセルの中には色のついた粒子が入っており、かける電圧で粒子を移動させることによって、見える色を変えています。電源がなくなっても粒子は移動しないので、最後に表示したものを保持し続けることができます。&lt;/p>
&lt;p>従来は白黒のディスプレイが主流でしたが、現在では3色のディスプレイも多くなっています。&lt;/p>
&lt;h2 id="heading-1">使ったもの&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-58WG">2.9inch e-Paper Module&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/143395/abfea5c3-70e3-6e80-b108-841ff52824d0.jpeg" alt="20180810_165537.jpg">&lt;/p>
&lt;p>このディスプレイは白黒黄の3色を表現できるディスプレイになっています。この他にも、白黒や白黒赤などを表示することができるディスプレイもあります。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.switch-science.com/catalog/3646/">Raspberry Pi Zero WH&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/143395/62d5a886-b22e-f1bd-e436-cea221c7c1d8.jpeg" alt="20190120_192847.jpg">&lt;/p>
&lt;p>このRaspberry Pi Zero WHはIoTで使われるボードの１つです。&lt;/p>
&lt;h2 id="heading-2">ディスプレイに表示させてみよう&lt;/h2>
&lt;p>今回は&lt;a href="https://www.waveshare.com/w/upload/9/98/2.9inch-e-paper-module-user-manual-en.pdf">2.9inch e-Paper Module User Manual&lt;/a>を参考にして進めていきます。&lt;/p>
&lt;h3 id="heading-3">配線&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">GPIO&lt;/th>
&lt;th align="center">2.9inch e-Paper Module&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">3.3V&lt;/td>
&lt;td align="center">3.3V&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">GND&lt;/td>
&lt;td align="center">GND&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">MOSI&lt;/td>
&lt;td align="center">DIN&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">SCLK&lt;/td>
&lt;td align="center">CLK&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">CE0&lt;/td>
&lt;td align="center">CS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">25&lt;/td>
&lt;td align="center">DC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">17&lt;/td>
&lt;td align="center">RST&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">24&lt;/td>
&lt;td align="center">BUSY&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="heading-4">環境構築&lt;/h3>
&lt;p>以下のコマンドが今回プログラムを実行するのに必要なものをインストールするコマンドになります。&lt;/p>
&lt;p>ターミナルを開いて実行してください。&lt;/p>
&lt;pre>&lt;code>sudo apt-get install python-pip
sudo pip install spidev
sudo apt-get install libjpeg-dev
sudo pip install Image
&lt;/code>&lt;/pre>&lt;p>次に、&lt;strong>&lt;code>/boot/config.txt&lt;/code>&lt;/strong>を編集します。以下のコマンドを実行してください。&lt;/p>
&lt;p>&lt;strong>&lt;code>sudo nano /boot/config.txt&lt;/code>&lt;/strong>&lt;/p>
&lt;p>すると、nanoエディタが開くので、以下の手順を行なってください。&lt;/p>
&lt;ol>
&lt;li>番下に&lt;strong>&lt;code>dtparam=spi=on&lt;/code>&lt;/strong>を追加&lt;/li>
&lt;li>キーボードの &lt;strong>&lt;code>controlキー&lt;/code>&lt;/strong> と &lt;strong>&lt;code>xキー&lt;/code>&lt;/strong> を同時に押す&lt;/li>
&lt;li>&lt;strong>&lt;code>yキー&lt;/code>&lt;/strong>を押す&lt;/li>
&lt;li>&lt;strong>&lt;code>enterキー&lt;/code>&lt;/strong>を押す&lt;/li>
&lt;li>全て完了したら&lt;strong>&lt;code>reboot&lt;/code>&lt;/strong>コマンドで再起動&lt;/li>
&lt;/ol>
&lt;p>これで環境構築は完了です。&lt;/p>
&lt;h3 id="heading-5">プログラム&lt;/h3>
&lt;p>デモプログラムが公開されているため、&lt;a href="https://www.waveshare.com/wiki/File:2.9inch_e-paper_module_b_code.7z">こちら&lt;/a>からcurrentと書かれているものをダウンロードしてください。&lt;/p>
&lt;p>ダウンロードが完了したら以下のコマンドを実行してください。&lt;/p>
&lt;pre>&lt;code>sudo apt-get install p7zip-full
7z x 2.9inch_e-paper_module_b_code.7z
&lt;/code>&lt;/pre>&lt;p>上記のコマンドで出てきた中の&lt;strong>&lt;code>RaspberryPi/python2&lt;/code>&lt;/strong>を今回は使います。&lt;/p>
&lt;p>ターミナルで&lt;strong>&lt;code>RaspberryPi/python2&lt;/code>&lt;/strong>ディレクトリに移動して&lt;code>python main.py&lt;/code>**を実行すると、デモプログラムが起動します（※何も編集していない状態だとフォントが存在していないためエラーが発生します）。&lt;/p>
&lt;p>&lt;strong>&lt;code>nano main.py&lt;/code>&lt;/strong>でファイルを少し編集します。&lt;/p>
&lt;p>&lt;code>main.py&lt;/code>には以下のようなプログラムがあります。&lt;/p>
&lt;p>&lt;strong>main.py&lt;/strong>&lt;/p>
&lt;pre>&lt;code>font24 = ImageFont.truetype('/usr/share/fonts/truetype/wqy/wqy-microhei.ttc', 24)
font18 = ImageFont.truetype('/usr/share/fonts/truetype/wqy/wqy-microhei.ttc', 18)
&lt;/code>&lt;/pre>&lt;p>この&lt;strong>&lt;code>'/usr/share/fonts/truetype/wqy/wqy-microhei.ttc'&lt;/code>&lt;/strong>という部分を
&lt;strong>&lt;code>'/opt/vc/src/hello_pi/hello_font/Vera.ttf'&lt;/code>&lt;/strong>に変更します。&lt;/p>
&lt;p>もう一度&lt;code>python main.py&lt;/code>を実行すると、画面がピカピカし始め、Hello, worldなどが画像に表示されます。&lt;/p>
&lt;p>では、実際にプログラムを少し変えて見ていきましょう。&lt;/p>
&lt;p>&lt;strong>main.py&lt;/strong>&lt;/p>
&lt;pre>&lt;code>#!/usr/bin/python
# -*- coding:utf-8 -*-
import epd2in9b
import time
from PIL import Image,ImageDraw,ImageFont
import traceback
try:
# ディスプレイの初期化処理をしています。
epd = epd2in9b.EPD()
epd.init()
print &amp;quot;clear&amp;quot;
epd.Clear(0xFF)
# ディスプレイを横に使うように設定しています。
HBlackimage = Image.new('1', (epd2in9b.EPD_HEIGHT, epd2in9b.EPD_WIDTH), 255) # 298*126
HRedimage = Image.new('1', (epd2in9b.EPD_HEIGHT, epd2in9b.EPD_WIDTH), 255) # 298*126
print &amp;quot;Drawing&amp;quot;
drawblack = ImageDraw.Draw(HBlackimage)
drawred = ImageDraw.Draw(HRedimage)
# １つ目の引数でフォント、2つ目の引数でフォントのサイズを指定しています。
font30 = ImageFont.truetype('/opt/vc/src/hello_pi/hello_font/Vera.ttf', 30)
# １つ目の引数で座標、２つ目に表示させたい文字列、３つ目には上記のフォントを指定します。
drawblack.text((10, 0), 'Hello, World', font = font30)
# ディスプレイに表示させます。
epd.display(epd.getbuffer(HBlackimage), epd.getbuffer(HRedimage))
time.sleep(2)
print &amp;quot;read bmp file&amp;quot;
HBlackimage = Image.open('2in9b-b.bmp')
epd.display(epd.getbuffer(HBlackimage), epd.getbuffer(HRedimage))
time.sleep(2)
except Exception, e:
print 'traceback.format_exc():\n%s' % traceback.format_exc()
exit()
&lt;/code>&lt;/pre>&lt;p>このプログラムを実行すると以下のようになります。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/143395/45152d05-0b37-6d40-a992-2dc034553d67.gif" alt="20190121_002653.gif">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/143395/c4b5f8b7-40c1-5145-5ba6-11c9b7a6f69a.gif" alt="20190121_002722.gif">&lt;/p>
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>いかがでしたでしょうか？&lt;/p>
&lt;p>電子ペーパーは、低消費電力という特徴があるので、センサからとれるデータを一定時間ごとに表示したり、自分の好きなものを表示して持ち運んだりすることもできます。&lt;/p>
&lt;p>電子部品の販売店に売っていたりしますが、電子ペーパーの使い方はあまり広がっていないように感じるので、この記事を参考にぜひやってみてください！&lt;/p></description></item><item><title>ArduinoでTwitter連携！愛しのぬいぐるみトンピーちゃんに命を吹き込んでみた</title><link>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</link><pubDate>Mon, 28 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</guid><description>&lt;p>皆さん、大好きなぬいぐるみが動き出したらいいなと思ったこと、ありませんか？&lt;/p>
&lt;p>今回は私の愛すべきお友達「トンピーちゃん」に命を吹き込むべく、プログラミング初心者の私がArduinoとTwitterの連携に挑戦してみました！&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->こちらです！！&lt;!-- raw HTML omitted -->
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/721a8190-3ffc-8bca-c4b3-774ee58d45e9.gif" alt="ezgif.com-video-to-gif.gif">&lt;/p>
&lt;h2 id="heading">今回やること&lt;/h2>
&lt;h3 id="heading-1">実装の構成&lt;/h3>
&lt;p>&lt;a href="https://gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64">&lt;img src="https://i.gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64.png" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>ざっくりの構成です。Node.jsでTwitterの「#tonpy」というハッシュタグを監視し、「move #tonpy」「stop #tonpy」というツイートがあったらArduinoを経由してトンピーちゃんが動いたり止まったりします。&lt;/p>
&lt;h3 id="heading-2">用意するもの&lt;/h3>
&lt;h4 id="heading-3">■こぐまのトンピーちゃん&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/210df088-f5f0-6f8a-e9ee-2a63f06e2364.jpeg" alt="トンピー.jpg">
愛用のトンピーちゃんです。乾電池を入れるとピーヒャラドンドンします。&lt;/p>
&lt;ul>
&lt;li>購入: &lt;a href="https://www.amazon.co.jp/%E3%82%A4%E3%83%AF%E3%83%A4-%E3%81%93%E3%81%90%E3%81%BE%E3%81%AE%E3%83%88%E3%83%B3%E3%83%94%E3%83%BC/dp/B0002U3OBA">Amazon.co.jp&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-uno">■Arduino Uno&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/c26d230d-e320-b73d-f15f-32d813e1294f.jpeg" alt="Arduino Uno.jpg">
Arduino Unoは2010年に発売されたArduinoで、&lt;a href="https://store.arduino.cc/usa/arduino-uno-rev3">Arduinoの公式サイト&lt;/a>にも「&lt;strong>電子工作初心者に最適&lt;/strong>」と書いてあったのでこちらに決めました。&lt;/p>
&lt;p>購入にあたっては「Arduino 初心者」と調べヒットした「&lt;a href="https://www.amazon.co.jp/%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-SSCI-GettingStartedArduinoKit-Arduino%E3%82%92%E3%81%AF%E3%81%98%E3%82%81%E3%82%88%E3%81%86%E3%82%AD%E3%83%83%E3%83%88/dp/B0025Y6C5G/ref=sr_1_fkmr1_2?ie=UTF8&amp;amp;qid=1544321570&amp;amp;sr=8-2-fkmr1&amp;amp;keywords=arduino+%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%AD%E3%83%83%E3%83%88">Arduinoをはじめようキット&lt;/a>」を購入しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="fetfet-mosfet-2sjs527l-e-60v5a">■FET（FET MOSFET 2SJS527L-E 60V5A）&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/88510174-eed9-e286-5343-3deeb08a7884.jpeg" alt="I-08315.jpg">&lt;/p>
&lt;p>FETはロードスイッチとも呼ばれ、簡単にいうと外部からの電圧によって電流の流れを制御できるスイッチのようなもののようです。小さな電力で動作させる事ができます。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/#%E5%9B%9E%E8%B7%AF%E3%82%92%E4%BD%9C%E6%88%90">回路を作成&lt;/a>で説明しますが、FETには「Pチャネル」と「Nチャネル」の2種類あります。今回はNチャネルのFETを利用します。&lt;/p>
&lt;ul>
&lt;li>購入: &lt;a href="http://akizukidenshi.com/catalog/g/gI-07145/">秋月電子&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="nodejspc">■Node.jsをインストールしたPC&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/efcdf34b-504e-cc68-125a-0acadd815510.jpeg" alt="IMG_9204.jpg">&lt;/p>
&lt;p>今回はNode.jsでプログラムを動かします。下記記事を参考にインストールしてみてください！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>筆者PC: mac OS HighSierra バージョン10.13.6&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>Node.js: v10.10.0&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-4">■その他&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/eb369434-a5ff-e44a-c7b9-02a065030098.jpeg" alt="IMG_9206.jpg">&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dotstud.io/docs/breadboard/">ブレッドボード&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://localhost:1313/docs/jumperwire/#%E3%83%9F%E3%83%8E%E3%83%A0%E3%82%B7%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97-%E3%83%AF%E3%83%8B%E5%8F%A3">ワニ口クリップ&lt;/a>&lt;/li>
&lt;li>抵抗（今回は220Ω）&lt;/li>
&lt;/ul>
&lt;h2 id="heading-5">トンピーちゃんを解体&lt;/h2>
&lt;p>まずはトンピーちゃんの導線を確認するため、少し解体します。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/69ccd688-afb6-0715-124a-44d886fe3178.jpeg" alt="IMG_6786.jpg">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/84c4fcd7-8c65-a0dc-1a84-ee75b5c2ef48.jpeg" alt="IMG_9205.jpg">
電池の部分を取り外してみました。すると、導線は電池部分と本体でパックリ分かれている事が確認できました。今回はその部分にArduino Unoを繋げば回路の開/閉が制御できそうですね。&lt;/p>
&lt;h2 id="arduino-uno-1">Arduino Unoとトンピーちゃんを連携&lt;/h2>
&lt;h3 id="heading-6">回路を作成&lt;/h3>
&lt;p>Arduino Unoから直接ON/OFFを制御しようとすると、電流が少なく回路を開/閉できませんでした。そこでArduino Unoとトンピーちゃんの間に&lt;strong>FETを挿入&lt;/strong>します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>FETは、電圧の加え方の違いによって「Pチャネル」と「Nチャネル」の2種類に分かれます。今回はNチャネルのFETを利用します。&lt;/p>
&lt;p>また、回路の「+側」にFETを繋ぐことを「ハイサイド（スイッチ）」、-側に繋ぐことを「ローサイド（スイッチ）」と呼称します。今回はNチャネルなので、ローサイドにFETを繋ぎます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/d32c3f6f4b1de908ceced242cc2ba7f4.png" alt="Image from Gyazo">&lt;/p>
&lt;p>最終的に上記のような回路図になりました。&lt;/p>
&lt;h3 id="arduino-uno-2">Arduino Unoにプログラムを書き込む&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/b544f541-a5ac-ee97-18a3-de3963210c92.png" alt="スクリーンショット 2018-12-18 12.35.58.png">
ArduinoをUSBケーブルでPCに繋ぎ、アプリケーションでArduino IDEを開きます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/da16043a-121e-52e2-e395-3121a8a3e48f.png" alt="スクリーンショット 2018-12-16 15.10.09.png">
ファイル→新規ファイルを選択します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/2a42d894-497d-a0c4-5573-6a4c148fc5fe.png" alt="スクリーンショット 2018-12-16 15.09.45.png">
ツール→ボード→繋いだArduino（今回はArduino Uno）を選択します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/9f5d63e2-454b-c637-ef5d-07550cccf8d5.png" alt="スクリーンショット 2018-12-16 15.11.33.png">
ツール→シリアルポート→接続したArduinoを選択します。&lt;/p>
&lt;p>下記コードを新規ファイルにコピー&amp;amp;ペーストします。&lt;/p>
&lt;pre>&lt;code>// pins
const int tonpyPin = 2;
void setup() {
// initialize serial:
Serial.begin(9600);
// make the pins outputs:
pinMode(tonpyPin, OUTPUT);
}
void loop() {
// if there's any serial available, read it:
while (Serial.available() &amp;gt; 0) {
char value = Serial.read();
if (value == 'p') {
digitalWrite(tonpyPin, HIGH);
} else if (value == 'q'){
digitalWrite(tonpyPin, LOW);
} else{
digitalWrite(tonpyPin, LOW);
}
Serial.println(value);
}
}
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/8ec32eee-c610-137c-febd-9408f22db6e1.png" alt="スクリーンショット 2018-12-10 9.25.26.png">
左上にある「→」ボタンを押してマイコンボードに書き込みます。&lt;/p>
&lt;p>これでArduino Unoからの信号（p: スイッチON、q: スイッチOFF）でトンピーちゃんが動く/止まるようになりました。&lt;/p>
&lt;p>これをツイートと連動できれば完成です！&lt;/p>
&lt;h2 id="nodejs">Node.jsのプログラム&lt;/h2>
&lt;p>ハッシュタグ「#tonpy」を取得し、さらに「move」「stop」のツイートがあったらArduino Unoに送るプログラムを作成します。&lt;/p>
&lt;h3 id="twitter-api">Twitter APIの準備&lt;/h3>
&lt;p>API使用には&lt;a href="https://developer.twitter.com/">Twitter Developer&lt;/a>へ登録する必要があります。登録の際、用途など英文で書く部分がありました（筆者はGoogle翻訳を駆使しました）。&lt;/p>
&lt;p>手順については下記の記事に詳しく書かれており、そちらに沿って登録しました。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://qiita.com/kngsym2018/items/2524d21455aac111cdee">Twitter API 登録 (アカウント申請方法) から承認されるまでの手順まとめ　※2018年9月時点の情報&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="tweetnodejs">Tweetを取得するNode.jsのプログラムを作成&lt;/h3>
&lt;h4 id="heading-7">■ディレクトリを用意&lt;/h4>
&lt;p>任意の保存場所にフォルダを用意します。今回はDesktopにTonpyフォルダを作りました。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="js">■JSファイルを作成&lt;/h4>
&lt;p>作成したフォルダに任意の名前のJSファイルを用意します。今回は「app.js」としました。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="twitter-api-1">■Twitter APIを使用するモジュールのインストール&lt;/h4>
&lt;p>Node.jsでTwitter APIが使用できるよう&lt;a href="https://www.npmjs.com/package/twitter">Twitterモジュール&lt;/a>をnpmでインストールします。ターミナルで作成したフォルダを開き、下記コマンドを叩きます。&lt;/p>
&lt;pre>&lt;code>$ npm install twitter
&lt;/code>&lt;/pre>&lt;p>これでNode.jsでTwitter APIが使用できるようになりました。&lt;/p>
&lt;p>実際に使用する際はJSファイル内で最初に下記のように書くとTwitter APIが呼び出されます。&lt;/p>
&lt;pre>&lt;code>const Twitter = require('twitter');
&lt;/code>&lt;/pre>&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-8">■ツイートを取得するプログラムを作成&lt;/h4>
&lt;p>TwitterAPIには「REST API」と「Streaming API」の2種類があります。&lt;/p>
&lt;p>REST APIはエンドポイントへリクエストして初めて結果が得られるものに対して、Streaming APIはレートのリミットなくツイートを受信し続ける事ができます。&lt;/p>
&lt;p>今回はツイートを常に監視し該当のツイートがあったら結果を取得する、という事がしたいので&lt;strong>Streaming API&lt;/strong>を使用します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">twitter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;twitter&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;fs&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">twitter&lt;/span>({
&lt;span style="color:#a6e22e">consumer_key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,&lt;span style="color:#75715e">//Dev Accountで取得したkeyを書く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">consumer_secret&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">access_token_key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">access_token_secret&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,
});
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>;
&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">stream&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;statuses/filter&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">track&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#tonpy &amp;#34;&lt;/span>}, (&lt;span style="color:#a6e22e">stream&lt;/span>) =&amp;gt; {&lt;span style="color:#75715e">//Streaming APIを呼び出す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">tweet&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">tweet&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>;
(&lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#a6e22e">tweetText&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;move&amp;#39;&lt;/span>)) &lt;span style="color:#f92672">?&lt;/span> (&lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;p&amp;#39;&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#a6e22e">tweetText&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;stop&amp;#39;&lt;/span>)) &lt;span style="color:#f92672">?&lt;/span> (&lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;q&amp;#39;&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>);
});
&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;error&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">error&lt;/span>) =&amp;gt; {&lt;span style="color:#75715e">//エラー
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">Error: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">destroy&lt;/span>();
});
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ツイートを取得するNode.jsのプログラムが完成しました。&lt;/p>
&lt;h3 id="arduino">Arduinoに送るプログラムを作成&lt;/h3>
&lt;h4 id="heading-9">■シリアル通信をするモジュールのインストール&lt;/h4>
&lt;p>PCとArduino間でシリアル通信をするために、シリアルポートでシリアル通信を行うモジュールもnpmでインストールします。&lt;/p>
&lt;p>シリアルポートとは&lt;strong>シリアル通信を行う時の接続口&lt;/strong>のことで、今回はArduinoと接続したPCのUSBポートにあたります。&lt;/p>
&lt;p>ターミナルで下記コマンドを叩きます。&lt;/p>
&lt;pre>&lt;code>$ npm install serialport
&lt;/code>&lt;/pre>&lt;p>これでNode.jsでシリアルポートを制御できるようになりました。&lt;/p>
&lt;p>使用する際はJSファイル内で最初に下記のように呼び出します。&lt;/p>
&lt;pre>&lt;code>const Serialport = require('serialport');
&lt;/code>&lt;/pre>&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-10">■シリアルポートの名前を調べる&lt;/h4>
&lt;p>プログラム内では、USBポートに挿しているArduino Uno（ttyデバイス）を指定します。&lt;/p>
&lt;p>ターミナルで下記コマンドを打ち、PCのシリアルポートに接続されている機器を表示します。&lt;/p>
&lt;pre>&lt;code>$ ls -l /dev/tty.*
&lt;/code>&lt;/pre>&lt;p>Auduino Unoを挿し、もう一度先ほどのコマンドを打ちます。新しく出てきたttyデバイス名がArduino Unoです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-arduino-unonodejs">■ Arduino Unoに送るNode.jsのプログラムを作成&lt;/h4>
&lt;p>下記がシリアル通信するためのコードです。ツイートを取得するためのJSファイルの続きに記述してください。&lt;/p>
&lt;p>1行目の&lt;code>/dev/tty.xxx&lt;/code>には上記のシリアルポート名を記入してください。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">SerialPort&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dev/tty.xxx&amp;#39;&lt;/span>,{
&lt;span style="color:#a6e22e">baudRate&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">9600&lt;/span>&lt;span style="color:#75715e">//baudRate:9600は1秒に最大9600ビットを送信するという意味
&lt;/span>&lt;span style="color:#75715e">&lt;/span>});
&lt;span style="color:#a6e22e">port&lt;/span>.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;main screen turn on&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Error on write: &amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>);
}
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;message written&amp;#39;&lt;/span>);
});
&lt;span style="color:#a6e22e">port&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;open&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Serial open.&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">setInterval&lt;/span>(&lt;span style="color:#a6e22e">write&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>);
});
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">Input to Arduino: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">tweetText&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#a6e22e">port&lt;/span>.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#a6e22e">tweetText&lt;/span>, (&lt;span style="color:#a6e22e">error&lt;/span>) =&amp;gt; {
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>) {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">Error: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
}
});
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでツイート情報を取得し、Arduinoに信号を送る事ができるようになりました。&lt;/p>
&lt;h3 id="heading-11">完成コード&lt;/h3>
&lt;p>ツイートを取得するプログラム、Arduinoを制御するプログラムを合わせた完成コードは下記のようになります。&lt;/p>
&lt;pre>&lt;code>//-----------------------------------------------
// twitterからツイートを取得
//-----------------------------------------------
const twitter = require(&amp;quot;twitter&amp;quot;);
const client = new twitter({
consumer_key: '',//Dev Accountで取得したkeyを書く
consumer_secret: '',
access_token_key: '',
access_token_secret: '',
});
let tweetText ='w';
client.stream('statuses/filter', {track:&amp;quot;#tonpy &amp;quot;}, (stream) =&amp;gt; {
stream.on('data', (tweet) =&amp;gt; {
tweetText = tweet.text;
(~tweetText.indexOf('move')) ? (tweetText = 'p') : (~tweetText.indexOf('stop')) ? (tweetText = 'q') : (tweetText = 'w');
});
stream.on('error', (error) =&amp;gt; {
console.error(`Error: ${error.message}`);
stream.destroy();
});
});
//-----------------------------------------------
// Node.jsからArduinoに送信
//----------------------------------------------
const SerialPort = require('serialport');
const port = new SerialPort('/dev/tty.xxx',{
baudRate: 9600
});
port.on('open', () =&amp;gt; {
console.log('Serial open.');
setInterval(write, 1000);
});
port.on('data', (data) =&amp;gt; {
console.log(`Data from Arduino: ${data}`);
});
const write = () =&amp;gt; {
console.log(`Input to Arduino: ${tweetText}`);
port.write(tweetText, (error) =&amp;gt; {
if(error) {
console.error(`Error: ${error.message}`);
}
});
}
&lt;/code>&lt;/pre>&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="nodejs-1">■Node.jsを実行する&lt;/h4>
&lt;p>Node.jsは、ファイルのある場所で下記コマンドで実行します。&lt;/p>
&lt;pre>&lt;code>$ node app.js
&lt;/code>&lt;/pre>&lt;p>&lt;code>app.js&lt;/code>部分は、ご自身が作成したファイル名に置き換えてください。「Serial open」がターミナル上に表示されたら無事実行されています。&lt;/p>
&lt;h2 id="heading-12">動かしてみる&lt;/h2>
&lt;p>Node.jsを起動しながら、ツイートしてみましょう……。「&lt;strong>#tonpy move&lt;/strong>」!!!!!
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/9c8c2611-d9b2-e7dd-3710-8d2011c2b424.gif" alt="ezgif.com-video-to-gif.gif">&lt;/p>
&lt;p>う、動いたーーーー！！！（少々タイムラグがありますが……。）&lt;/p>
&lt;p>初めてのIoTとっっても楽しかったです！電子工作やNode.jsの勉強にもなり一石二鳥ですね。&lt;/p>
&lt;p>これから色々作っていきたいです！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Moddable SDKを使ってJavaScriptでIoT開発してみた</title><link>https://dotstud.io/blog/developed-iot-using-moddable/</link><pubDate>Thu, 24 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/developed-iot-using-moddable/</guid><description>&lt;p>どうも。&lt;a href="https://dotstud.io/members/horihiro">ほりひろ&lt;/a> です。
dotstudioブログでは、初めましてですね。&lt;/p>
&lt;p>JavaScript や IoT が好きな、でも実は半田付けも抵抗値の計算もろくにできないレベルの週末プログラマーです。
普段は某クラウドベンダーのサポートエンジニアをしています。
よろしくお願いします。&lt;/p>
&lt;p>Twitterアカウントは&lt;a href="https://twitter.com/hori__hiro">こちら&lt;/a>です。&lt;/p>
&lt;p>年末に自分の中で話題になっていた、&lt;!-- raw HTML omitted -->&lt;strong>Moddable SDK&lt;/strong>&lt;!-- raw HTML omitted -->というものをようやく触ってみました。&lt;/p>
&lt;h2 id="moddable-sdk--xs">Moddable SDK &amp;amp; XS&lt;/h2>
&lt;h3 id="moddable-sdk">Moddable SDK&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Moddable SDK は、&lt;strong>JavaScript コードを ESP32 や ESP8266 といったマイコン上で動作させるためのビルド環境やライブラリー群&lt;/strong>のこと、、、だと思います。&lt;/p>
&lt;p>これは Moddable 社から提供されていますが、&lt;!-- raw HTML omitted -->下記 GitHub リポジトリで公開されているので、無料で手に入れられます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a href="https://github.com/Moddable-OpenSource/moddable">https://github.com/Moddable-OpenSource/moddable&lt;/a>&lt;/p>
&lt;h3 id="xs">XS&lt;/h3>
&lt;p>XS は、&lt;strong>Moddable SDK で生成される JavaScript ランタイム環境&lt;/strong> （ドキュメントには &lt;strong>virtual machine&lt;/strong> と記載）で、なんと &lt;a href="https://github.com/Moddable-OpenSource/moddable#modern-software-development-for-microcontrollers">ES2018 に 99% 以上準拠&lt;/a>しているらしいです。すごいですね！&lt;/p>
&lt;p>※一部準拠していない部分は、注意事項として**&lt;a href="https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/XS%20Conformance.md#caveat">こちら&lt;/a>**に記載されています。&lt;/p>
&lt;p>これは&lt;a href="http://www.moddable.com/XS7-TC-39.php">公式ドキュメント&lt;/a>にある画像です。「XS は一番小さい」って意味でしょうね。シャレてます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ざっくりとした理解ですが、Moddable SDK のビルドツールで、自分が書いた JavaScript や C のソースコードと組み込みのクラスが含まれた XS を、一つのバイナリーにビルドし、マイコンに書き込んでいるようです。&lt;/p>
&lt;p>これまで JavaScript でのマイコン制御というと、以前から ホスト PC とマイコンをシリアル接続し、ホストPC上の Node.js と Johnny-Five を使ってマイコンを制御する方法があり、最近では obniz の制御をネットワークを介して JavaScript などから行う方法がありますが、いずれもマイコンの外に JavaScript の実行環境を用意する必要があります。&lt;/p>
&lt;p>一方で、Moddable SDK では、&lt;!-- raw HTML omitted -->JavaScript 実行環境である XS がマイコン上で動作することができます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>この点は、&lt;strong>これまでの実行環境とは大きく違うところですね！&lt;/strong>&lt;/p>
&lt;h2 id="heading">開発環境の構築&lt;/h2>
&lt;p>基本的に、公式のリポジトリに記載された &lt;a href="https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/Moddable%20SDK%20-%20Getting%20Started.md">構築手順&lt;/a>通りに実施することで、ビルド ツールなどの環境が構築できます。&lt;/p>
&lt;p>構築手順は macOS/Linux/Windows の各プラットフォーム向けにまとまっており、それぞれが、下記の 3 つのパートに分かれて記載されています。&lt;/p>
&lt;ol>
&lt;li>&lt;code>mcconfig&lt;/code> や &lt;code>xsbug&lt;/code> などの開発ツールのビルド&lt;/li>
&lt;li>ESP8266 向けの開発環境の構築&lt;/li>
&lt;li>ESP32 向けの開発環境の構築&lt;/li>
&lt;/ol>
&lt;p>いずれのプラットフォームでも 1. は必須ですが、2. と 3. は手持ちのボードに合わせて、どちらかを実施するだけでよいです。&lt;/p>
&lt;p>私は Windows 用の環境構築をしましたが、Windows 向けの開発環境構築では、&lt;!-- raw HTML omitted -->**Windows ネイティブのコマンドを使用することをお勧めします。**&lt;!-- raw HTML omitted -->
WSL から &lt;code>git clone&lt;/code> などをすると、&lt;a href="https://github.com/Moddable-OpenSource/moddable/issues/110">&lt;strong>開発ツールがビルドできない&lt;/strong>&lt;/a>ようで、これに丸一日ハマりました。&lt;/p>
&lt;p>あと、ビルドツールの実行は、必ず&lt;code>開発者コマンドプロンプト for VS2017&lt;/code> を起動し、そのコマンドプロンプトの中でしましょう。&lt;/p>
&lt;h2 id="-">サンプル コード&lt;/h2>
&lt;p>マイコンのサンプルと言えば Lチカですが、手元に LED がなかったので、とりあえず ESP32 上での非同期実行を試してみます。&lt;/p>
&lt;h3 id="heading-1">ファイルの用意&lt;/h3>
&lt;p>プロジェクト ディレクトリに下記のような構造で、ファイルを作ります。&lt;/p>
&lt;pre>&lt;code>.
├── esp
│ ├── console.c
│ └── console.js
├── main.js
└── manifest.json
&lt;/code>&lt;/pre>&lt;h3 id="mainjs">main.js&lt;/h3>
&lt;p>1 秒おきに &lt;code>1&lt;/code> から &lt;code>10&lt;/code> の数字を、1.5 秒おきに &lt;code>a&lt;/code> から &lt;code>z&lt;/code> の文字を、シリアル コンソールに出力するプログラムです。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js:main.js" data-lang="js:main.js">&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">Timer&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;timer&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;console&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;z&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#a6e22e">Timer&lt;/span>.&lt;span style="color:#a6e22e">repeat&lt;/span>(() =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>String(Date.&lt;span style="color:#a6e22e">now&lt;/span>()).&lt;span style="color:#a6e22e">padStart&lt;/span>(&lt;span style="color:#ae81ff">15&lt;/span>)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;span style="color:#a6e22e">Timer&lt;/span>.&lt;span style="color:#a6e22e">repeat&lt;/span>(() =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>String(Date.&lt;span style="color:#a6e22e">now&lt;/span>()).&lt;span style="color:#a6e22e">padStart&lt;/span>(&lt;span style="color:#ae81ff">15&lt;/span>)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:&lt;/span> String.&lt;span style="color:#a6e22e">fromCharCode&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">charCodeAt&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
}, &lt;span style="color:#ae81ff">1500&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Web ブラウザーや Node.js なら、定期的な処理を書くなら &lt;code>setInterval&lt;/code> を使うところだと思いますが、Moddable SDK / XS では、グローバルに &lt;code>setInterval&lt;/code> が定義されていません。&lt;/p>
&lt;p>代わりに、&lt;code>Timer&lt;/code> オブジェクトの &lt;code>repeat&lt;/code> メソッドを使って、同じ処理が似たような感じで書くことができます。&lt;/p>
&lt;pre>&lt;code class="language-js:browser&amp;nodejs" data-lang="js:browser&amp;nodejs">setInterval(() =&amp;gt; {
:
}, 1000);
&lt;/code>&lt;/pre>&lt;pre>&lt;code class="language-js:XS" data-lang="js:XS">import Timer from 'timer';
Timer.repeat(() =&amp;gt; {
:
}, 1000);
&lt;/code>&lt;/pre>&lt;h3 id="consolejs-consolec">console.js /console.c&lt;/h3>
&lt;p>実は XS では &lt;code>console&lt;/code> オブジェクトもないので、とりあえず、下記の JS ファイルと C ファイルで、シリアルコンソールに 1 行出力できるメソッドを定義しておきます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c:esp/console.js" data-lang="c:esp/console.js">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Console&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xs_console_destructor&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">constructor&lt;/span>() {
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>() &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xs_console_log&amp;#34;&lt;/span>
}
Object.&lt;span style="color:#a6e22e">freeze&lt;/span>(&lt;span style="color:#a6e22e">Console&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>);
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">Console&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>JS ファイルはタダのラッパーで、処理本体は C ファイルで定義しています。
JS ファイル内で &lt;code>@ ～&lt;/code> と書くと、C ファイルで宣言した関数とバインディングされます。
これは、XS 独自の実装のようです。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c:esp/console.c" data-lang="c:esp/console.c">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;#34;xsAll.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;#34;xs.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">xs_console_destructor&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
{
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">xs_console_log&lt;/span>(xsMachine &lt;span style="color:#f92672">*&lt;/span>the)
{
&lt;span style="color:#66d9ef">int&lt;/span> argc &lt;span style="color:#f92672">=&lt;/span> xsToInteger(xsArgc), i;
&lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> argc; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>) {
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>str &lt;span style="color:#f92672">=&lt;/span> xsToString(xsArg(i));
&lt;span style="color:#66d9ef">do&lt;/span> {
uint8_t c &lt;span style="color:#f92672">=&lt;/span> c_read8(str);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>c) {
ESP_putc(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">break&lt;/span>;
}
ESP_putc(c);
str&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>;
} &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="manifestjson">manifest.json&lt;/h3>
&lt;p>最後は manifest ファイルです。
正直言うと、ここはあまり把握できていません :sweat:&lt;/p>
&lt;p>&lt;code>include&lt;/code> で Moddable SDK で用意されている manifest を、ベースの manifest として読み込み、全プラットフォーム共通のモジュールとして &lt;code>main&lt;/code>(.js) を、&lt;code>esp32&lt;/code> 向けには、&lt;code>./esp/console&lt;/code>(.js) をロードする設定を書いています。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json:manifest.json" data-lang="json:manifest.json">{
&lt;span style="color:#f92672">&amp;#34;include&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;$(MODDABLE)/examples/manifest_base.json&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;modules&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;*&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;./main&amp;#34;&lt;/span>,
]
},
&lt;span style="color:#f92672">&amp;#34;platforms&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;esp32&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;modules&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;*&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;./esp/console&amp;#34;&lt;/span>,
],
}
}
},
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上の &lt;code>manifest.json&lt;/code> では &lt;code>Timer&lt;/code> クラスをロードしていませんが、&lt;code>main.js&lt;/code> では問題なく import することができます。
これは、Moddable SDK に含まれるベースの manifest でロード設定がされているためです。&lt;/p>
&lt;pre>&lt;code class="language-json:$(MODDABLE)/examples/manifest_base.json(抜粋)" data-lang="json:$(MODDABLE)/examples/manifest_base.json(抜粋)">{
:
(略)
:
&amp;quot;platforms&amp;quot;: {
:
(略)
:
&amp;quot;esp32&amp;quot;: {
&amp;quot;include&amp;quot;: &amp;quot;$(BUILD)/devices/esp32/manifest.json&amp;quot;
},
}
:
(略)
:
}
&lt;/code>&lt;/pre>&lt;pre>&lt;code class="language-json:$(BUILD)/devices/esp32/manifest.json(抜粋)" data-lang="json:$(BUILD)/devices/esp32/manifest.json(抜粋)">{
:
(略)
:
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;$(MODULES)/base/time/*&amp;quot;,
&amp;quot;$(MODULES)/base/time/esp/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/mc/*&amp;quot;,
]
},
&amp;quot;preload&amp;quot;: [
&amp;quot;time&amp;quot;,
&amp;quot;timer&amp;quot;,
],
:
(略)
:
}
&lt;/code>&lt;/pre>&lt;p>ちなみに manifest についてツイートしたところ、公式アカウントからも返事がありました。&lt;/p>
&lt;p>&lt;strong>ドキュメントは定期的にメンテナンスされそうです。&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-2">実行してみる&lt;/h2>
&lt;p>&lt;code>manifest.json&lt;/code> があるディレクトリで、&lt;code>mcconfig&lt;/code> コマンドを実行します。
大抵は、XS のビルドから始まるので、書き込みが完了するまでだいぶ時間がかかると思います。&lt;/p>
&lt;p>書き込みが完了すると、シリアルモニターに自動的に接続し、&lt;code>console.log&lt;/code> の出力内容が表示されます。&lt;/p>
&lt;pre>&lt;code>&amp;gt; mcconfig -m -p esp32
rm: cannot remove '/root/Projects/moddable/build/tmp/esp32/release/xsProj/sdkconfig': No such file or directory
# Running GENCONFIG...
fatal: Not a git repository (or any of the parent directories): .git
including /root/esp32/esp-idf/components/bootloader/Makefile.projbuild...
:
(略)
:
MONITOR
--- idf_monitor on /dev/ttyUSB0 115200 ---
--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---
ets Jun 8 2016 00:22:57
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0018,len:4
load:0x3fff001c,len:636
load:0x40078000,len:6192
load:0x40080000,len:5152
0x40080000: _iram_start at /root/esp32/esp-idf/components/freertos/xtensa_vectors.S:1685
entry 0x40080264
0x40080264: _Level5Vector at ??:?
1010:1
1510:a
2010:2
3010:3
3011:b
4010:4
4510:c
5010:5
6010:6
:
(略)
:
&lt;/code>&lt;/pre>&lt;p>指定した時間間隔で、コールバック関数が実行されています！
ES2017 で入った &lt;code>String.prototype.padStart&lt;/code> も正常に動作しているようです。&lt;/p>
&lt;p>なお、マイコンには時計がないので、&lt;code>Date.now()&lt;/code> は起動時からの時間を返します。&lt;/p>
&lt;h3 id="heading-3">デバッグ実行&lt;/h3>
&lt;p>先ほど実行したコマンド &lt;code>mcconfig -m -p esp32&lt;/code> にデバッグ オプション &lt;code>-d&lt;/code> を追加すると、デバッグ ビルドを実行し、デバッグ ツールである &lt;code>xsbug&lt;/code> が自動で起動します。&lt;/p>
&lt;p>この &lt;code>xsbug&lt;/code> は JavaScript コードにブレークポイントの設定や、ステップ実行、変数の内容などを表示することが
でき、結構本格的なデバッグツールです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今は独自の GUI ツールとして提供されているようですが、そのうち&lt;strong>VSCode から拡張機能として利用できるようになると嬉しいですね。&lt;/strong>&lt;/p>
&lt;h2 id="heading-4">まとめ&lt;/h2>
&lt;p>いかがだったでしょうか。
Moddable SDK を使うことで、JavaScript で書いたコードを、ESP8266/32 で動作させることができました。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Web フロントエンドや Node.js など、JavaScript を書くエンジニア人口は多いでしょうから、そういった方々も気軽にマイコン開発ができるようになりますね。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>あとは、manifest ファイルに関するドキュメントの整備がすすんだり、もう少し簡単に環境構築ができれば、格段に開発しやすくなるのではないでしょうか。&lt;/p></description></item><item><title>【ハンズオン資料】NefryBTでハジメテノIoT開発やってみよう！</title><link>https://dotstud.io/blog/handson-nefry-ma-kanazawa/</link><pubDate>Thu, 01 Nov 2018 10:07:13 +0900</pubDate><guid>https://dotstud.io/blog/handson-nefry-ma-kanazawa/</guid><description>&lt;p>この記事は11/1の&lt;a href="https://mashupawards.connpass.com/event/103791/">ハジメテノIoTハンズオン&lt;/a>向け資料です。記事を読んで試せる内容になっているので、終了後や参加されていない方もぜひ試してみてください！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->Nefry BTドキュメント&lt;!-- raw HTML omitted -->: NefryBTの使い方に関するドキュメントページです。基本の動作や、調べ方、質問できる場所なども案内しています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">今回やってみること&lt;/h2>
&lt;p>&lt;strong>湿度が高くなると自分のLINEに通知がくる仕組み&lt;/strong>を、Nefry BT、温湿度センサ、IFTTTというWebサービスを使って作ってみます。室内の状態が異常になったときに通知する仕組みのようなイメージです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-1">用意するもの&lt;/h3>
&lt;h4 id="nefry-bt">■Nefry BT＆ディスプレイ&lt;/h4>
&lt;p>Nefry BTは「ESP-WROOM-32」というWi-Fi・BLE通信モジュールを搭載した、Arduinoと同じように開発できるマイコンボードです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;a href="https://dotstud.io/docs/grove/">Grove&lt;/a>という刺すだけで配線できるモジュール対応のコネクタを搭載していて、&lt;strong>ハードウェアをあまり意識せず&lt;/strong>に開発できます。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="grove-">■Grove 温湿度センサ&lt;/h4>
&lt;p>刺すだけで配線できる&lt;a href="https://dotstud.io/docs/grove/">Grove&lt;/a>シリーズの、温度と湿度を取得できるセンサです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>安価で扱いやすいセンサですが、高い精度や細かいデータの取得には向きません。プロトタイプ向きなセンサです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-ide">■Arduino IDE&lt;/h4>
&lt;p>開発（プログラムの書き込み）には&lt;a href="https://www.arduino.cc/en/Main/Software">Arduino IDE&lt;/a>というフリーソフトウェアを利用します。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/docs/arduinoide-setup/">こちら&lt;/a>の手順を見ながらご自身のPCにインストールしてください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-ide-1">■Arduino IDE&lt;/h4>
&lt;p>開発（プログラムの書き込み）には&lt;a href="https://www.arduino.cc/en/Main/Software">Arduino IDE&lt;/a>というフリーソフトウェアを利用します。&lt;/p>
&lt;p>まだインストールしていない方は、&lt;a href="https://dotstud.io/docs/arduinoide-setup/">こちら&lt;/a>の手順を見ながら進めてください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="ifttt">■IFTTTアカウント&lt;/h4>
&lt;p>&lt;a href="https://ifttt.com/">IFTTT&lt;/a>（いふと）は、モノとWebやWebサービス同士を簡単に連携できるサービスです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>他の人が作ったアプレット（連携レシピ）を使ったり、自分で新たに作成したりできます。Nefry BTでは、簡単にIFTTT連携できるツールを用意しています。&lt;/p>
&lt;p>ページトップの「&lt;strong>Sign Up&lt;/strong>」からアカウントをご作成ください。&lt;/p>
&lt;h2 id="heading-2">事前準備（セットアップ）&lt;/h2>
&lt;h3 id="nefry-btwi-fi">Nefry BTのWi-Fi設定&lt;/h3>
&lt;p>まずはNefry BTがインターネットにつながるよう、会場のWi-Fi情報をNefry BTに教えてあげます。スマホやPCを使う時と同じですね。&lt;/p>
&lt;p>Nefry BTとPCを直接通信させ（アドホックモード）、立ち上がるNefryポータル（設定ウィンドウ）からSSIDとパスワードを入力する手順です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-3">■ディスプレイを取り付け電源を入れる&lt;/h4>
&lt;p>Nefry BTにディスプレイを取り付けます。4本の足をNefryの4本のピンソケットにさします。
&lt;img src="https://dotstud.io/img/docs/nefrybt/display2.png" alt="">&lt;/p>
&lt;p>このような形でささります。
&lt;img src="https://dotstud.io/img/docs/nefrybt/display3.png" alt="">&lt;/p>
&lt;p>Nefry BTに、PCやモバイルバッテリーなどから給電を開始します。ディスプレイに表示荒れる「NefryBT-XXXX」という部分が、&lt;strong>ご自身のNefry BTが出す無線の名称&lt;/strong>になります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="pcnefry-bt">■PCをNefry BTの無線に接続する&lt;/h4>
&lt;p>PCのWi-Fi接続設定から、ディスプレイに表示されている「NefryBT-XXXX」という無線を選び接続します。
&lt;img src="https://dotstud.io/img/docs/nefrybt/nefry_wifi.png" alt="">
セットアップ中PCはインターネットに繋がらなくなるので、この説明ページは開いたまま進めるのがオススメです。&lt;/p>
&lt;p>ちなみにSSIDは自由に変更することができます。（参照：&lt;a href="https://dotstud.io/docs/nefrybt-conv-change-ssid/">SSIDを変更する&lt;/a>）&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="nefry">■Nefryポータルで設定する&lt;/h4>
&lt;p>Nefry BTのWi-Fiに接続すると、自動でNefryポータルのウィンドウが立ち上がります（立ち上がらない場合はブラウザでhttp://192.168.4.1 にアクセスします）。
&lt;img src="https://dotstud.io/img/docs/nefrybt/setup_page.png" alt="">&lt;/p>
&lt;p>「お探しのページは…」と表示された場合は、「Move to main page」を洗濯してください。「Setup WiFi」をクリックし、利用するWi-FiのSSIDとパスワードを入力して「Save」で保存します。
&lt;img src="https://dotstud.io/img/docs/nefrybt/setup_wifi.png" alt="">
保存すると、Nefry BTは自動で再起動します。緑の点滅が終了し再起動が完了したら、Wi-Fiのセットアップは完了です。&lt;/p>
&lt;p>一度設定したら、同じWi-Fiを使っている間は起動するだけで接続されます。Wi-Fi情報は5つまで保存でき、消去もできます。&lt;/p>
&lt;h3 id="arduino-ide-2">開発環境（Arduino IDE）にボードを追加&lt;/h3>
&lt;p>Nefty BTの開発にはフリーソフトウェアの&lt;a href="https://www.arduino.cc/en/Main/Software">Arduino IDE&lt;/a>を利用します。インストールがまだの方は「&lt;a href="https://dotstud.io/docs/arduinoide-setup/">Arduino IDEのインストール&lt;/a>」を見ながら進めてください。&lt;/p>
&lt;p>Arduino IDEには、Nefry BTのボード情報の追加が必要です。「&lt;a href="https://dotstud.io/docs/nefrybt-setup-arduino-ide/">環境構築（Arduino IDE）&lt;/a>」を見ながら追加してください。&lt;/p>
&lt;h2 id="heading-4">はじめてのプログラムを書き込んでみる&lt;/h2>
&lt;p>まずはNefry BTに簡単なプログラムを書き込んでみましょう。Nefry BTは、最初から下記の機能が搭載されています。&lt;/p>
&lt;ul>
&lt;li>内蔵フルカラーLED&lt;/li>
&lt;li>スイッチ（SW/RST）&lt;/li>
&lt;/ul>
&lt;h3 id="nefry-bt-1">Nefry BTを起動&lt;/h3>
&lt;p>一度Nefry BTを電源から外し、ディスプレイを外します（内蔵LEDが隠れてしまうため）。マイコンボードに配線する時は、&lt;strong>常に電源OFFの状態で操作&lt;/strong>してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>マイコンボードは基本的に、給電によって電源のON/OFFを制御します。再起動時には最後に書き込んだプログラムが実行されます。プログラムは書き込むたびに上書きされます。&lt;/p>
&lt;p>再度給電します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>緑色のLEDが点滅したあと、ランダムに光ります。&lt;/p>
&lt;h3 id="l">まずはLチカ&lt;/h3>
&lt;p>最初のプログラムとして、Lチカをやってみます。LEDチカチカの略で、入門向けのプログラムとして汎用的に紹介されています。&lt;/p>
&lt;p>簡単なプログラムを書き込むことで、ボードが正常に動くか試す際に利用することも多いです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-ide-3">■Arduino IDEでプログラムを書く&lt;/h4>
&lt;p>Arduino IDEを立ち上げ、メニューから&lt;strong>&lt;code>ファイル &amp;gt; 新規ファイル&lt;/code>&lt;/strong>を選択します。下記のような画面が開きます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>エディタ部分に、下記のプログラムをコピーして貼り付けましょう（行番号までコピーしてしまわないようご注意ください）。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
void setup() {
}
void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code>&lt;/pre>&lt;p>下記でプログラムの内容を解説しています。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-5">■ボードを選択&lt;/h4>
&lt;p>メニューの&lt;strong>&lt;code>ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code>&lt;/strong>を選択します。この際、ボードは使っているリビジョンに合わせて選択してください。（参照：&lt;a href="https://dotstud.io/docs/nefrybt-setup-revision/">リビジョンを確認&lt;/a>）&lt;/p>
&lt;p>例えば、使っている基板がR3の場合は&lt;strong>&lt;code>ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code>&lt;/strong>を選択します（ハンズオンでは全てR3を使用しています）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-6">■シリアルポートを選択&lt;/h4>
&lt;p>Nefry BTをPCのUSBポートにさします。プログラムはこのポートを介して、シリアル通信でNefry BTに流し込まれます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/docs/nefrybt/power_supply.png" alt="">&lt;/p>
&lt;p>Macの場合は、メニューの&lt;strong>&lt;code>ツール &amp;gt; シリアルポート &amp;gt; /dev/cu.usbserial-xxxxxx&lt;/code>&lt;/strong>を選択します。環境によっては&lt;strong>&lt;code>/dev/tty.usbserial-xxxxxx&lt;/code>&lt;/strong>などの場合もあります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Windowsの場合は、&lt;strong>&lt;code>ツール &amp;gt; シリアルポート &amp;gt; /dev/COM-XX&lt;/code>&lt;/strong>を選択します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-7">■名前をつけて保存&lt;/h4>
&lt;p>&lt;strong>&lt;code>ファイル&amp;gt;名前をつけて保存&lt;/code>&lt;/strong>を選択して保存します。「NefryLedBlink」など、後からみてわかりやすい名前がオススメです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-8">■プログラムを書き込む&lt;/h4>
&lt;p>「✔️」を押してプログラムをコンパイルします。コンパイルとは、プログラムを機械が理解できる（人間には読みづらい）形式に変換することです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この手順は省略しても大丈夫ですが、シンタックス（文法）チェックをしてくれるので実施するのがオススメです。&lt;/p>
&lt;p>左上の「→」ボタンを押してNefry BTにプログラムを書き込みます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ESP32モジュールの特性上、書き込みに1分ほどかかります。エラーが出てしまうときは、「&lt;a href="https://dotstud.io/docs/nefrybt-error-handling-2/">コンパイルは成功するのに書き込みが失敗する&lt;/a>」を参照してください。&lt;/p>
&lt;p>3分以上かかる場合、Nefry BTの不良の可能性があるので申し出てください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-9">■動作を確認&lt;/h4>
&lt;p>起動したら、「青いLEDが1秒ごとに光る」ことを確認しましょう。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3">&lt;img src="https://i.gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>LEDがチカチカしました！&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-10">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を説明していきます。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
&lt;/code>&lt;/pre>&lt;p>冒頭でライブラリを読み込んでいます。Nefry BTのライブラリでできることは「&lt;a href="https://dotstud.io/docs/nefrybt-liblary/">Nefryのライブラリ&lt;/a>」を参照してください。&lt;/p>
&lt;pre>&lt;code>void setup() {
}
&lt;/code>&lt;/pre>&lt;p>起動時に処理される部分です。今回はなにもしません。&lt;/p>
&lt;pre>&lt;code>void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code>&lt;/pre>&lt;p>起動時に繰り返し実行する部分です。&lt;code>//&lt;/code>の後ろには任意のコメントを記入することができます。&lt;/p>
&lt;p>&lt;code>Nefry.setLed()&lt;/code>という関数で、光らせる色合いをRGBの順で指定します。始めにR=0, G=0, B=255を渡しているので、青く光ります。&lt;/p>
&lt;p>続いて&lt;code>Nefry.ndelay()&lt;/code>という関数で次の処理まで指定した時間待ちます。Arduinoでは時間はミリ秒で指定するので、1000は1秒です。&lt;/p>
&lt;p>&lt;code>Nefry.setLed()&lt;/code>に0, 0, 0を渡すことで、LEDはオフになります。オンとオフのあと1秒ずつ待つことで、点滅を表現しています。&lt;/p>
&lt;p>このように、マイコンボードは&lt;strong>①起動時に行う処理&lt;/strong>、&lt;strong>②起動中に繰り返される処理&lt;/strong>をプログラムして扱います。意外と簡単ではないですか……？&lt;/p>
&lt;h3 id="l-1">スイッチを押したらLチカ&lt;/h3>
&lt;h4 id="arduino-ide-4">■Arduino IDEでプログラムを書く&lt;/h4>
&lt;p>同様の手順で新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。おさらいがてら、やってみましょう。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
void setup() {
// スイッチを有効化
Nefry.enableSW();
}
void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code>&lt;/pre>&lt;p>下記でプログラムの内容を解説しています。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-11">■動作を確認&lt;/h4>
&lt;p>スイッチ（RSTではない方）を押したら、LEDが赤く光ることを確認します。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/73185cad56d6374e6ad394eafbfef51d">&lt;img src="https://i.gyazo.com/73185cad56d6374e6ad394eafbfef51d.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-12">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を説明します。&lt;/p>
&lt;pre>&lt;code>void setup() {
// スイッチを有効化
Nefry.enableSW();
}
&lt;/code>&lt;/pre>&lt;p>起動時の処理では、&lt;code>Nefry.enableSW()&lt;/code>という関数でスイッチを有効化しています。マイコンボードでは、入力・出力に使うピンなどは&lt;code>setup()&lt;/code>関数内で有効化します。&lt;/p>
&lt;pre>&lt;code>void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0);//色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>if(){}&lt;/code>という条件式で、なにか動作させたいときの条件を決めます。&lt;code>Nefry.readSW()&lt;/code>でスイッチが押されたことを取得し、スイッチが押されたら&lt;code>{}&lt;/code>内を実行します。&lt;/p>
&lt;p>&lt;code>{}&lt;/code>内ではLEDを赤く光らせ、1秒間待つ処理をしています。1秒後はまた&lt;code>void loop()&lt;/code>内を実行し、スイッチが押されているかどうか判定します。&lt;/p>
&lt;p>スイッチが押されている以外のときは、青色のLEDを光らせます。&lt;/p>
&lt;h2 id="grove">オフラインでGroveセンサを試す&lt;/h2>
&lt;p>次は、配線してセンサのデータを取得してみます。&lt;strong>まずはインターネットに繋がらない電子工作&lt;/strong>、です。&lt;/p>
&lt;p>エラーの切り分け（どこでエラーが起こっているか）を特定するために、自分で開発するときもステップバイステップでできているか確認しつつ進めるのがオススメです。&lt;/p>
&lt;h3 id="grove--1">Grove 温湿度センサを接続&lt;/h3>
&lt;p>Groveは刺すだけで配線できるのでGNDや信号線などの確認は必要ありませんが、デジタル・アナログ・I2Cなどの通信方法はGroveモジュールによって違います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>通信方式は温湿度センサの製造元・SeeedStudioの&lt;a href="http://wiki.seeedstudio.com/Grove-TemperatureAndHumidity_Sensor/">Wikiページ&lt;/a>を見て確認しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回は「A0」というソケットに差し込みます。少し硬いですが、カチッと言うまで押し込めます。&lt;strong>配線作業は常に電源オフの状態&lt;/strong> で行います。&lt;/p>
&lt;h3 id="heading-13">温湿度センサを扱うライブラリを読み込む&lt;/h3>
&lt;p>温湿度センサを扱うためのライブラリ（※）を追加でダウンロードします。リンク先のページで「Clone or Download」から「Download ZIP」を選択します（2つのページから両方ダウンロードしてください）。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/adafruit/DHT-sensor-library">https://github.com/adafruit/DHT-sensor-library&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/adafruit/Adafruit_Sensor">https://github.com/adafruit/Adafruit_Sensor&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Arduino IDEの&lt;strong>&lt;code>スケッチ &amp;gt; ライブラリをインクルード &amp;gt; .ZIP形式のライブラリをインストール&lt;/code>&lt;/strong>から、ダウンロードされたZIPファイルを2つとも追加して完了です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-14">プログラムを書き込む&lt;/h3>
&lt;p>新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。書き込み手順は、上記の「&lt;a href="#%E3%81%BE%E3%81%9A%E3%81%AFL%E3%83%81%E3%82%AB">まずはLチカ&lt;/a>」を参照してくださいね。&lt;/p>
&lt;pre>&lt;code>#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
#define DHTPIN A0
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
void setup() {
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
dht.begin();
}
void loop() {
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
if (isnan(h) || isnan(t)) {
Nefry.println(&amp;quot;読み取りに失敗しました…&amp;quot;);
return;
}
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
}
if (t &amp;gt; 30) {
Nefry.println(&amp;quot;すっごく部屋が暑いよ！&amp;quot;);
}
Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-15">動作を確認&lt;/h3>
&lt;p>メニューの&lt;strong>&lt;code>ツール&amp;gt;シリアルモニタ&lt;/code>&lt;/strong> を選択して開きます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>右下のbps設定を「115200bps」に変更します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>2秒ごとに、シリアルモニタに温度と湿度が表示されて行きます。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/1d912b8d68ca7b63eb0c991c262d83f0">&lt;img src="https://i.gyazo.com/1d912b8d68ca7b63eb0c991c262d83f0.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>あまり動きがないですが、息を吹きかけると湿度が上がることを確認できます。湿度や温度が上がるとアラートメッセージが出ることを確認できたでしょうか？&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-16">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を解説します。&lt;/p>
&lt;pre>&lt;code>#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
&lt;/code>&lt;/pre>&lt;p>ライブラリの読み込み部分です。&lt;/p>
&lt;pre>&lt;code>#define DHTPIN A0
#define DHTTYPE DHT11
&lt;/code>&lt;/pre>&lt;p>&lt;code>#define&lt;/code>で、配線したピンの場所を定義しています。「DHTPIN」という名前の箱に「A0」という値を入れているイメージです。&lt;/p>
&lt;p>こうしておくことで、あとでピンの場所を変えても、ここの値だけ変更すればOKになります。DHTTYPEの値はWikiを参考に入れているだけなので、覚えなくて大丈夫です。&lt;/p>
&lt;pre>&lt;code>void setup()
{
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
dht.begin();
}
&lt;/code>&lt;/pre>&lt;p>setup関数内ではセンサの読み込みの開始と、シリアルモニタへの表示メッセージを指定しています。&lt;/p>
&lt;pre>&lt;code>void loop()
{
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
// 省略
}
&lt;/code>&lt;/pre>&lt;p>loop関数では、まず2秒ごとにループすることを指定しています。&lt;/p>
&lt;p>&lt;code>dht&lt;/code>関数で湿度と温度の値を読み取っていて、値を&lt;code>h&lt;/code>と&lt;code>t&lt;/code>という変数にそれぞれ入れています。&lt;/p>
&lt;pre>&lt;code>void loop()
{
// 省略
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
}
if (t &amp;gt; 30) {
Nefry.println(&amp;quot;すっごく部屋が暑いよ！&amp;quot;);
}
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>if() {}&lt;/code> の条件式で、湿度が70を超えた時、温度が30を超えたときの処理をそれぞれ指定しています。&lt;/p>
&lt;pre>&lt;code>Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
&lt;/code>&lt;/pre>&lt;p>それ以外のときは温度・湿度を表示させます。&lt;/p>
&lt;h2 id="web">Webサービスと連携してみる&lt;/h2>
&lt;p>それでは、湿度が70％を超えたら自分のメールやチャットに通知がくるようにしてみましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;a href="https://ifttt.com/discover">IFTTT&lt;/a>で提供されているサービスであれば、LINE、メール、SMS、Twitter、Facebookなどなど、自由に通知先を設定することができます。この記事では、例としてLINEへの通知方法を紹介します。&lt;/p>
&lt;p>余裕のある方は好きな通知先を選択してみてください！&lt;/p>
&lt;h3 id="ifttt-1">IFTTTにアプレットを作成&lt;/h3>
&lt;p>まずはIFTTTにアプレット（レシピ）を作成します。IFTTTのアカウントを持っていない場合はアカウント取得から進めてください。&lt;/p>
&lt;p>IFTTTのアプレットは「〇〇が起きたら△△する」というようにトリガー（〇〇）とアクション（△△）に分けられます。&lt;/p>
&lt;p>今回は自作のサービスを利用できる「Webhooks」という機能を使い、「Webhooksを受け取ったらLINEに通知する」というアプレットを作ってみます。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-17">■トリガーの作成&lt;/h4>
&lt;p>IFTTTの&lt;a href="https://ifttt.com/create">アプレット作成ページ&lt;/a>から「+this」部分をクリックし、トリガーの作成をします。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「Webhooks」を検索しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「Receive a web request」を選択します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>任意のイベント名をつけます。後ほどNefry BTにも登録するのでメモ帳などにコピーしておきましょう（大文字・小文字の区別があるのでコピー＆ペーストがオススメです）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-18">■アクションの作成&lt;/h4>
&lt;p>続いてアクションを作成します。「+that」から進めましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Nefry BTからの送信を受け取ったら実行したいWebサービスを自由に選びます。今回はサンプルとしてLINEを連携してみますが、Twitter、Slack、Gmail、Googleカレンダー、Facebookなどなど、たぶん思いつく有名Webサービスはだいたいあります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>起こしたいアクションを選びます。LINEは「メッセージを送る」機能のみですが、サービスによってはさまざまなアクションが起こせます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>クリックすると、初回はアカウント認証を求められる気がします。LINEのログインメールアドレスがわからない、という方は、スマホのLINEアプリの設定から確認できます（&lt;strong>&lt;code>友だちタブ &amp;gt; 設定（歯車）ボタン &amp;gt; アカウント&amp;gt;メールアドレス・パスワード&lt;/code>&lt;/strong>）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>メッセージを送るルーム、メッセージ内容を設定します。「1:1で〜」を選択すると自分個人宛てにメッセージが届きます。メッセージは「LINE Notify」というアカウントから送られる仕組みです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>通知先は自分個人の他に、グループも選択できます。&lt;/p>
&lt;p>メッセージを自由に作成します。Nefry BTから値を送信し受け取りたい場合は、「Add Ingredient」から&lt;code>Value1&lt;/code>を選択します。下記のような場合は、NefryBT側のプログラムで1つ目の値に湿度を送るよう設定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このような感じで設定したら、「Create action」で作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>最終確認がされるので「Finish」で登録しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="webhookssecretkey">■WebhooksのSecretKeyを取得&lt;/h4>
&lt;p>Nefry BTとWebhooksと紐付けるための「Secret Key」を取得します。パスワードのようなものです。上部の検索欄からWebhooksを検索しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Webhooksのページに移動します（初回は認証画面が表示されるので「Connect」で開始しましょう）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>右上の「Setting」に移動します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「URL」の末尾に自身のSecret Keyが記載されているのでコピーし、メモしておきます。このKeyは漏れると他人が自分にLINEを送れるようになってしまうので、&lt;strong>Web上に公開しないよう注意&lt;/strong>してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-19">プログラムを書き込む&lt;/h3>
&lt;h4 id="heading-20">■プログラム&lt;/h4>
&lt;p>以下のプログラムをNefry BTに書き込みます。&lt;/p>
&lt;pre>&lt;code>#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;NefryIFTTT.h&amp;gt;
#define DHTPIN A0
#define DHTTYPE DHT11
String Event, SecretKey;
DHT dht(DHTPIN, DHTTYPE);
void setup() {
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;, 0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;, 1);
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
dht.begin();
}
void loop() {
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
if (isnan(h) || isnan(t)) {
Nefry.println(&amp;quot;読み取りに失敗しました…&amp;quot;);
return;
}
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
bool sendData = IFTTT.send(Event, SecretKey, (String)h);
if (!sendData) { //IFTTTにデータ送信が成功したかの判定
Nefry.setLed(255, 0, 0); //エラーの時、赤色点灯
delay(3000);
} else {
Nefry.setLed(0, 255, 0); //成功の時、緑色点灯
delay(3000);
}
Nefry.ndelay(1000 * 30);
}
Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
}
&lt;/code>&lt;/pre>&lt;h3 id="nefry-btifttt">Nefry BTにIFTTTのアカウント情報を設定&lt;/h3>
&lt;p>Nefry BTにディスプレイを取り付けてから起動し、表示されているIPアドレスにアクセスします（画像の場合は&lt;code>http://192.168.4.1/&lt;/code>。人によって違います。 ）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「Data Store」に移動します。
&lt;img src="https://dotstud.io/img/docs/nefrybt/ifttt_setup1.png" alt="">&lt;/p>
&lt;p>先ほど取得したWebhooksの「Secret Key」と「Event Name」をそれぞれ入力し保存します。Event Nameは大文字・小文字の区別があります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「Save」で保存するとNefry BTが再起動し、準備は完了です。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="heading-21">動作を確認&lt;/h3>
&lt;p>さっそく完成したものを動かしてみましょう。&lt;/p>
&lt;p>湿度の値が高くなると……&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/bd6a5ae77bc93459b3c602d82fb00faa">&lt;img src="https://i.gyazo.com/bd6a5ae77bc93459b3c602d82fb00faa.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>LINEに通知されました！&lt;/p>
&lt;p>お疲れ様でした〜！&lt;/p>
&lt;h3 id="heading-22">プログラムの解説&lt;/h3>
&lt;p>要所を説明します。大事なところはちょっとだけです。&lt;/p>
&lt;pre>&lt;code>void setup() {
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;, 0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;, 1);
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>Nefry.setStoreTitle({タイトル}, {チャンネル番号})&lt;/code>関数を使い、Nefry BTのDataStore機能に場所を作っています。この値はNefryポータル側から入力でき、変更があってもプログラムを書き換える必要はありません。&lt;/p>
&lt;p>また値を&lt;code>getStoreStr({チャンネル番号})&lt;/code>で、ポータル側で設定した値を受け取っています。&lt;/p>
&lt;pre>&lt;code>void loop() {
// 省略
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
bool sendData = IFTTT.send(Event, SecretKey, (String)h);
if (!sendData) { //IFTTTにデータ送信が成功したかの判定
Nefry.setLed(255, 0, 0); //エラーの時、赤色点灯
delay(3000);
} else {
Nefry.setLed(0, 255, 0); //成功の時、緑色点灯
delay(3000);
}
Nefry.ndelay(1000 * 30);
}
}
&lt;/code>&lt;/pre>&lt;p>先ほど同様湿度が70%を超えたとき、という条件文を作っています。&lt;code>IFTTT.send()&lt;/code>関数を使い、もし送れなかったときは赤いLEDを光らせるという処理をしています（&lt;code>!&lt;/code>は&lt;code>!==&lt;/code>と同義で、&lt;code>FALSE&lt;/code>が返ったときに実行されます）。&lt;/p>
&lt;p>何度も連続して通知が来るとウザいので、一度送ったあとは30秒（1000ミリ秒×30）待ちます。場合によっては30分待つ、1日待つ、などに変更します。&lt;/p>
&lt;h2 id="-">応用: いろいろなセンサを試してみる&lt;/h2>
&lt;p>刺すだけで配線できるGroveモジュールは100種類以上あり、いろいろなデータを手軽に扱うことができます。下記ではモジュールと利用例を紹介します。&lt;/p>
&lt;h3 id="heading-23">磁気スイッチ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>磁石がくっついているか否か、を検知するセンサです。ドアの開閉検知によく使われ、市販の開閉検知装置も磁気センサを使っていることが多いです。&lt;/p>
&lt;p>ドアが閉まっているときは磁石とセンサが接着、開いたときは離れるように設置することで開閉を検知できます。&lt;/p>
&lt;ul>
&lt;li>例: 開閉検知&lt;/li>
&lt;li>参考: &lt;a href="http://www.atmarkit.co.jp/ait/articles/1806/26/news001.html">磁気スイッチを使ってポストの開閉をメールで通知&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-24">人感センサ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>人が近くにいることを検知するセンサです。防犯用の近づくと光るなどに使われます。&lt;/p>
&lt;ul>
&lt;li>例: 防犯灯&lt;/li>
&lt;li>参考: &lt;a href="https://dotstud.io/blog/nefrybt-handson-pir-linebot/">Nefry BTと人感センサで防犯LINE BOTを作ってみよう&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-25">光センサ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>照度（光の度合い）を検知します。暗くなったら明かりをつける仕組みや、異常のときに光るパトランプの近くに起き通知するなど、異常検知にも利用できます。&lt;/p>
&lt;ul>
&lt;li>例: 異常検知&lt;/li>
&lt;li>参考: &lt;a href="https://qiita.com/n0bisuke/items/257126448cf4db482d43">NefryでGrove Luminance Sensor(照度センサ)を触るメモ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-26">超音波距離センサ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>センサからモノへの距離を測るセンサです。超音波をぶつけて跳ね返りを調べる仕組みです。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://qiita.com/HiroyukiYasui/items/cf477e9ce83682513ab1">NefryBTでGroveセンサーをつなげる時の？について&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-27">サーボモータ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>角度を指定して回転させることができるアクチュエータです。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://poche-magique.com/2018/05/06/nefrybt_grove_servo/">[Nefry BTとGrove接続実験] サーボモータ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-28">カメラ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>例: 機械学習で画像認識&lt;/li>
&lt;li>&lt;a href="https://dotstud.io/blog/nefrybt-pepper-monitoring-system/">Node.jsとNefry BTで監視システムを作ろう！ for Pepper #iotlt&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="heading-29">関連情報&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstud.io/shop/nefry-bt-set/">Nefr BTの購入&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefry BTはこちらから購入できます（送料無料）。その他にも千石電商、ツクモ、若松通商、共立電子などの実店舗やECサイトで購入できます。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstud.io/docs/nefrybt/">Nefry BTドキュメント&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefry BTでは、IFTTTを使ったWebサービスとの連携や、その他のクラウドサービスとの連携も簡単です。ディスプレイを使ったイラスト描画や、100以上あるGroveモジュールの活用なども、ぜひ試してみてください。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.facebook.com/groups/nefry">Nefryユーザーグループ（FB）&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefryユーザ同士が交流するページです。質問を投稿して解決した事例もたくさんありますので、困った際などはぜひお気軽にご利用ください。開発者もよく登場します。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://nefry.connpass.com/event/97692/">Nefry User Meetup!&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefryユーザによる開催イベントです。ハンズオンやLT会、もくもく会などを実施しています。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstudio.connpass.com/">dotstudioイベント&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>dotstudioによる開催イベントです。Nefry BT以外の題材を扱うことも多いです。&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>加速度センサとマイコン内蔵LEDで魔法の杖を作ってみた！</title><link>https://dotstud.io/blog/halloween-gadget-witch-stick/</link><pubDate>Wed, 31 Oct 2018 10:07:13 +0900</pubDate><guid>https://dotstud.io/blog/halloween-gadget-witch-stick/</guid><description>&lt;p>みなさんこんにちは。トボリです。&lt;/p>
&lt;p>私は電子工作が大好きで、いろいろいじったり、&lt;a href="http://toboli.hatenablog.com/">ブログ&lt;/a>を書いたりして暮らしています。&lt;/p>
&lt;p>&lt;strong>ところで、みなさん魔法は好きですか？&lt;/strong>&lt;/p>
&lt;p>電子工作と魔法ってかなり相性いいと思うんですよ。勝手に光る、勝手に動く、勝手にしゃべる……とか！&lt;/p>
&lt;p>気づけばもう10月31日。そう、本日はハロウィンです！電子工作を愛し、電子工作に愛された者として、このイベントで魔法っぽいものを作りたい！！&lt;/p>
&lt;p>魔法といえば、そう、杖ですよね！！&lt;/p>
&lt;p>ということで、今回はみんなが一度は憧れたであろう、&lt;strong>『魔法の杖』&lt;/strong> を作ってみました！&lt;/p>
&lt;h2 id="heading">「振ると光る杖」を作ることにした&lt;/h2>
&lt;p>『魔法の杖』っていうからには、できるだけかっこいいことがしたい！
トボリも想像力だけは無駄に豊かなので、うきうきいろんな機能をイメージしました。&lt;/p>
&lt;p>家電を操作したり、一振りでカーテン開けられたりできたらいいなあ～！何か浮かせられたらもっとおもしろいかも……。&lt;/p>
&lt;p>しかし。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->時間と技術力は限られている！！&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>今のトボリの技術力でハロウィンまでに作れそうなものといえば、「振ると光る」杖です。&lt;/p>
&lt;p>想像よりだいぶスケールが小さくなりましたが、どんなにささやかな物でもまずは作ることが大事！
と自分に言い聞かせ、とにかく作ってみることにしました！&lt;/p>
&lt;h2 id="heading-1">用意するもの&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>電子工作初心者の味方、Arduinoを使って作ろうと思います！&lt;/p>
&lt;p>また、なぜミニブレッドボードを使用するかというと……これを見てください！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>たまたま買った電池ボックスとミニブレッドボードのサイズがほぼ同じ！&lt;/p>
&lt;p>これを見た瞬間、絶対に使おう！と固く決意したのです。
（本当はユニバーサル基板に半田付けしてたんですが、完成間近にピンヘッダの取り付けミスが発覚し、安心安全のブレッドボードでやり直したという経緯があります。つらい。）&lt;/p>
&lt;h2 id="heading-2">魔法の杖を作る&lt;/h2>
&lt;p>魔法の杖は、下記の3ステップで作って行きます！&lt;/p>
&lt;ol>
&lt;li>プログラムを書く&lt;/li>
&lt;li>ブレッドボードに回路を作る&lt;/li>
&lt;li>見た目をそれっぽく造形する&lt;/li>
&lt;/ol>
&lt;h3 id="heading-3">プログラムを書く&lt;/h3>
&lt;p>&lt;a href="https://dotstud.io/docs/arduinoide-setup/">Arduino IDE&lt;/a>を使ってプログラムを書いていきます。&lt;/p>
&lt;p>加速度センサのサンプルプログラムと、フルカラーLEDのサンプルプログラムをただ合体しただけのお手軽コードです！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code> Adafruit_NeoPixel pixels = Adafruit_NeoPixel(1, PIN, NEO_GRB + NEO_KHZ800);
MMA8452Q accel;
void setup() {
Serial.begin(9600);
Serial.println(&amp;quot;MMA8452Q Test Code!&amp;quot;);
pixels.begin();
pixels.show();
accel.init();
}
void loop() {
if(accel.available()) {
accel.read();
printCalculatedAccels();
printOrientation();
Serial.println();
}
}
void printOrientation() {
byte pl = accel.readPL();
switch (pl) {
case PORTRAIT_U:
Serial.print(&amp;quot;Portrait Up&amp;quot;);
break;
case PORTRAIT_D:
Serial.print(&amp;quot;Portrait Down&amp;quot;);
break;
case LANDSCAPE_R:
Serial.print(&amp;quot;Landscape Right&amp;quot;);
rainbow(20);
break;
case LANDSCAPE_L:
Serial.print(&amp;quot;Landscape Left&amp;quot;);
rainbow(20);
break;
case LOCKOUT:
Serial.print(&amp;quot;Flat&amp;quot;);
pixels.show();
break;
}
}
void rainbow(uint8_t wait) {
uint16_t i, j;
for(j=0; j&amp;amp;lt;256; j++) {
for(i=0; i&amp;amp;lt;pixels.numPixels(); i++) {
pixels.setPixelColor(i, Wheel((i+j) &amp;amp; 255));
}
pixels.show();
delay(wait);
}
}
uint32_t Wheel(byte WheelPos) {
WheelPos = 255 - WheelPos;
if(WheelPos &amp;amp;lt; 85) {
return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
}
if(WheelPos &amp;amp;lt; 170) {
WheelPos -= 85;
return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
}
WheelPos -= 170;
return pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;
&lt;/code>&lt;/pre>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-4">ブレッドボードに回路を作る&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まずはブレッドボードに配線していきます！配線図はこんな感じ。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実際に配線したものがこちらです！
LEDの部分だけ基板から離れてしまうので、後で半田付けをします。&lt;/p>
&lt;p>みなさん半田付けって好きですか？トボリは電子工作作業の中で半田付けが一番好きです！
半田の香りは下手なアロマより癒される気がします。&lt;/p>
&lt;h3 id="heading-5">見た目をそれっぽく造形する&lt;/h3>
&lt;p>杖はそれっぽい形になればなんでもいいので、3Dプリンタを使える方は使ってもいいし、お好きなやり方で大丈夫です！今回は、粘土をこねて作ってみたので、参考までに材料と作り方も載せておきます！&lt;/p>
&lt;h4 id="-">■ 用意するもの&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>石粉粘土・トイレットペーパーの芯・市販のスティックを用意します。これらは全て百均で買うことができました！いい時代ですね！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この市販のスティックを分解し、筒状の棒だけ取り出します。&lt;/p>
&lt;h4 id="--1">■ 杖の形に造形する&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>市販の棒とトイレットペーパーの芯をくっつけます。トイレットペーパーの芯の先に切れ込みを入れて、画像のように内側に折り込みます。トイレットペーパーの芯に棒を差し込んで、テープで固定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>中に基板を入れ、筒の中にLEDのワイヤーを通してから、LEDを半田付けします。&lt;/p>
&lt;p>動作チェックをして問題なさそうだったら、どんどん土台に石粉粘土を貼り付けていきます！少しずつ貼り付けて、時々手でなでて滑らかにしていきます。&lt;/p>
&lt;p>乾いたら、カッターで傷をつけ、茶色と黒のアクリル絵の具をインスピレーションに従っていい感じに塗ります。&lt;/p>
&lt;h4 id="--2">■ 完成！&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>できた～～～！！！
どう見ても、魔法の杖！！少なくとも自分にとっては手塩にかけた最愛の杖！！&lt;/p>
&lt;h2 id="heading-6">魔法を発動する&lt;/h2>
&lt;p>さっそく魔法を発動していきましょう！
左右に杖を振ると……虹色の光が出ます！やった～～！魔法っぽい！
&lt;img src="https://dotstud.io/img/blog/228/demo.gif" alt="">&lt;/p>
&lt;h2 id="heading-7">次こそはもっとうまく作りたい……それが電子工作沼&lt;/h2>
&lt;p>LEDとセンサーひとつですが、結構楽しいものができました！&lt;/p>
&lt;p>でも、やっぱり本当はこうしたい……もっとかっこいい機能搭載したい……という欲望はとめどなく溢れ、「次こそもっといいものを！」という気持ちになります。&lt;/p>
&lt;p>もうこうなったらズブズブですよね。&lt;!-- raw HTML omitted -->電子工作沼&lt;!-- raw HTML omitted -->に。このハロウィンは今自分が作れる楽しいものを作りまくって、一緒に電子工作沼で溺れましょう！&lt;/p>
&lt;p>ではでは、トボリでした！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【あのバズマイコンを最速？レポート】極小マイコンのトリリオンノード・エンジンを使ってみた！</title><link>https://dotstud.io/blog/trillion-node-engine-sugoi/</link><pubDate>Fri, 05 Oct 2018 02:39:17 +0900</pubDate><guid>https://dotstud.io/blog/trillion-node-engine-sugoi/</guid><description>&lt;p>こんにちは、宇宙エンジニアのたくろーどんです。&lt;/p>
&lt;p>夏休みなので「何かハッカソンに出てみたい！モノづくりしたい！」と思いつつ、&lt;a href="http://www.mcpc-jp.org/">MCPC（モバイルコンピューティング推進コンソーシアム）&lt;/a>が主催する&lt;strong>第1回ナノコン応用ハッカソン&lt;/strong>に参加しました。&lt;/p>
&lt;p>なんとこのハッカソンで&lt;strong>これから流行りそうな凄い開発ボード&lt;/strong>に出会ったので、紹介します。その名も&lt;!-- raw HTML omitted -->&lt;strong>トリリオンノード・エンジン&lt;/strong>&lt;!-- raw HTML omitted -->です。&lt;/p>
&lt;h2 id="heading">「トリリオンノード・エンジン」のここが凄い！&lt;/h2>
&lt;h3 id="heading-1">小さい！&lt;/h3>
&lt;p>特筆すべきポイントは、&lt;strong>トリリオンノード・エンジンの小ささ&lt;/strong>でしょう。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/d8655c77-c996-4684-adb8-61f8799cbce4.jpeg" alt="P_20180831_162041_vHDR_On.jpg">&lt;/p>
&lt;p>そうです、写真でわかるように&lt;strong>本当に小さい&lt;/strong>です。
決して、手が大きいわけではありません。&lt;/p>
&lt;h3 id="heading-2">拡張性が高い！&lt;/h3>
&lt;p>ハッカソンの際は、写真のようにキットが渡されました。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/ab86e180-f0c0-afdd-c320-baa25fa92140.jpeg" alt="P_20180831_100142_vHDR_On.jpg">
トリリオンノード・エンジンは、&lt;strong>リーフ&lt;/strong>というパーツで構成され、そのリーフの1つ1つに&lt;strong>センサモジュールやBLE（Bluetooth）、Wi-Fi&lt;/strong>といった機能を持っています。それを&lt;!-- raw HTML omitted -->&lt;strong>重ねていくことで簡単に機能を拡張することができる&lt;/strong>&lt;!-- raw HTML omitted -->仕組みです。&lt;/p>
&lt;p>プログラムは&lt;strong>Arduino IDE&lt;/strong>で書きます。これは、Arduinoを触ったことがある人にやさしいですね。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/0c71d1f5-486a-a6c7-d408-1aafa14afcdf.jpeg" alt="P_20180831_100406_vHDR_On.jpg">
評価用キットなので、すべてのリーフが入っているわけではありません。今後は、もっとリーフが増えるようです。例えば、&lt;strong>Groveセンサ用のリーフ&lt;/strong>も予定されているそうです。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/725d14ea-0149-83c4-87bd-cdade631bf64.jpeg" alt="P_20181001_002408_vHDR_On.jpg">
Arduinoシールドのリーフもあります。プロトタイプをつくる際に役立ちますね。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/6bd3b78b-ca6c-7bce-83bd-cb8a76319c44.jpeg" alt="P_20181001_002538_vHDR_On.jpg">
「29TH Leaf」というリーフを使えば基板に直接実装できます。これもArduino互換リーフの一つです。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/371ec114-1346-7596-1d0e-f2c12fa5d0e1.jpeg" alt="P_20181001_002505_vHDR_On.jpg">
電源はUSB給電だけなく、&lt;strong>専用のリーフで単3電池やボタン電池駆動&lt;/strong>させることができます。実装には一手間かかるので、専用のリーフがあるのはとてもありがたいですね。&lt;/p>
&lt;p>例えば&lt;strong>ウェアラブルなものをつくりたい&lt;/strong>と思ったときに、必要な電圧にもよりますが電源回路を実装する必要がなくなります。&lt;/p>
&lt;p>重ねるだけでなく、横方向につなげるリーフもあります。発想の幅が広がりますね。&lt;/p>
&lt;h2 id="heading-3">試してみた&lt;/h2>
&lt;p>加速度センサとLEDテープを組み合わせてLチカさせてみました。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/44f0d940-e547-66b5-bc20-020f64550d0d.gif" alt="84472b66eb294f495cb1060bfda8c512.gif">&lt;/p>
&lt;p>ハッカソンでは、犬につけてコミュニケーションを加速させることを目的としたウェアラブルデバイスを考えました（完成には程遠かったですが……）。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/973f6f0e-7487-ba0d-2aef-e2f245826ef9.jpeg" alt="42142867_568541853564424_1201723650328231936_n.jpg">&lt;/p>
&lt;p>&lt;strong>このサイズだから出来ることを考えてみると、様々なところに応用できそう&lt;/strong>ですね。&lt;/p>
&lt;h2 id="twitter">そして平成最後の夏、Twitterでバズった&lt;/h2>
&lt;p>&lt;strong>「トリリオンノード・エンジンが凄い！」といったことをつぶやいてみたら、バズりました&lt;/strong>。
小型で使いやすそうなマイコンに対する関心の高さがうかがえます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>そしてバズったら**「トリリオンノード・エンジンの普及に貢献した」としてハッカソンで特別賞を貰いました**。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/aa12c34d-e3f2-a9df-92b8-f4eccb6befb9.jpeg" alt="IMG_20181001_011537_066.jpg">&lt;/p>
&lt;p>人生、何が起こるかわからないですね。&lt;/p>
&lt;h2 id="heading-4">まとめ&lt;/h2>
&lt;p>まだまだドキュメントの整備や使用例はこれからのようです。
来年から販売予定だそうなので、目が離せませんね！&lt;/p></description></item></channel></rss>