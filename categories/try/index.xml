<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>try on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/categories/try/</link><description>Recent content in try on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Fri, 29 Mar 2019 00:00:00 +0700</lastBuildDate><atom:link href="/categories/try/" rel="self" type="application/rss+xml"/><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。
&lt;a href=&#34;https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/&#34;&gt;前回の記事&lt;/a&gt;では、最新技術でポケベルを作ってみた！　というお話と、Webから2タッチ入力ができる公衆電話アプリの紹介をさせていただきました。&lt;/p&gt;
&lt;p&gt;2回目の今回は「制作編」ということで、パーツさえ用意できれば誰でも作れてしまうポケベルの作り方を紹介したいと思います！&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア部分の制作&#34;&gt;ハードウェア部分の制作&lt;/h2&gt;
&lt;h3 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3B+&lt;/li&gt;
&lt;li&gt;マイクロUSBケーブル&lt;/li&gt;
&lt;li&gt;マイクロSDカード（8GB以上）&lt;/li&gt;
&lt;li&gt;GrovePi+&lt;/li&gt;
&lt;li&gt;Grove Buzzer&lt;/li&gt;
&lt;li&gt;Grove LCD RGB Backlight&lt;/li&gt;
&lt;li&gt;有線LANで作業用PCと接続できる環境（セットアップに使います）&lt;/li&gt;
&lt;li&gt;テープ（ガムテープやセロハンテープ、マスキングできれば何でも可）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前提として、最低限のCLI（ターミナル）操作ができる方を対象として記事を書いています。予めご了承ください。&lt;/p&gt;
&lt;h3 id=&#34;組み立て&#34;&gt;組み立て&lt;/h3&gt;
&lt;h4 id=&#34;grovepi-をraspberry-piとドッキングする&#34;&gt;GrovePi+をRaspberry Piとドッキングする&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ガムテープやセロテープなどで、Raspberry PiのUSB端子の上部を図のように「マスキング」します。&lt;br /&gt;
これは、上に乗せるGrovePi+の基板が直接触れることによるショートを防止するためです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Raspberry Piの端子にGrovePi+のソケットを上から挿し込みます。&lt;br /&gt;
このとき互いの端子の長さが異なりますが、写真のようにカド部分にあわせるようにしてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;斜め上から見るとこのようになります。&lt;/p&gt;
&lt;h4 id=&#34;groveのrgb-lcdとブザーを接続する&#34;&gt;GroveのRGB LCDとブザーを接続する&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Groveのブザーを「D8」と書かれている端子にGroveケーブルで接続します。&lt;br /&gt;
また、Grove LCD RGB BacklightをI2Cと書かれている端子に接続します。こちらはI2C接続なので、I2Cと記述がある端子ならどこでもかまいませんが、写真ではI2C-1という端子に接続しています。&lt;/p&gt;
&lt;h2 id=&#34;ソフトウェアのインストールと設定&#34;&gt;ソフトウェアのインストールと設定&lt;/h2&gt;
&lt;h3 id=&#34;grovepi-向けos-raspbian-for-robots&#34;&gt;GrovePi+向けOS「Raspbian For Robots」&lt;/h3&gt;
&lt;p&gt;このパートは以下のチュートリアルの概略になります。&lt;br /&gt;
&lt;a href=&#34;https://www.dexterindustries.com/GrovePi/get-started-with-the-grovepi/&#34;&gt;Get Started with GrovePi&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;マイクロsdカードへのインストール&#34;&gt;マイクロSDカードへのインストール&lt;/h4&gt;
&lt;p&gt;GrovePi+を動作させられるソフトウェアがプリインストールされたOSが格納されたマイクロSDカードを作成します。&lt;/p&gt;
&lt;p&gt;公式サイトによると、すでにインストール済みのRaspbianも後から追加でGrovePi+用のソフトウェアがインストールできるとのことですが、記事執筆時点の最新ソフトウェアではうまく動作しませんでした。&lt;br /&gt;
すでにRaspbianを使われている方も、お手数ではありますが新しいマイクロSDカードを入手してお試しください。&lt;/p&gt;
&lt;p&gt;まず、以下のページからOSイメージファイルを入手します。&lt;br /&gt;
&lt;a href=&#34;https://sourceforge.net/projects/dexterindustriesraspbianflavor/&#34;&gt;Raspbian For Robots by Dexter Industries download | SourceForge.net&lt;/a&gt;&lt;br /&gt;
圧縮ファイルになっていますので、ダウンロード完了後に解凍しておきましょう。&lt;/p&gt;
&lt;p&gt;このイメージファイルをマイクロSDカードに書き込みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作業PCがWindowsの方は以下を参考に進めてください。&lt;br /&gt;
&lt;a href=&#34;https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/&#34;&gt;最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作業PCがMacの方は以下を参考に進めてください。&lt;br /&gt;
&lt;a href=&#34;https://qiita.com/py_iK/items/9070fc58f69d8c063e44&#34;&gt;MacでRaspberryPi入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールが完了したら、RaspberryPiに挿入して電源を接続し起動させます。&lt;br /&gt;
LANケーブルを使い、Raspberry Piと作業用PCを接続します。最近の小型PCはLANポートがついていないことも多いため、その際はUSBイーサネットアダプタなどを使うとよいでしょう。&lt;/p&gt;
&lt;p&gt;接続が完了し、Raspberry PiとGrovePi+のPWR LEDが点灯していることを確認したら、作業用PCブラウザのURL入力欄に&lt;br /&gt;
&lt;code&gt;http://dex.local/&lt;/code&gt;&lt;br /&gt;
と入力して移動します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ここまででうまくインストールと接続が完了していれば、このような画面が表示されます。&lt;br /&gt;
ブラウザ中段左側の、&amp;rdquo;VNC&amp;rdquo; をクリックすると、ブラウザからRaspberry Piのデスクトップ画面へと直接アクセスすることができます。&lt;/p&gt;
&lt;h4 id=&#34;設定とシステムのアップデート&#34;&gt;設定とシステムのアップデート&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;VNC&amp;rdquo; をクリックします。もしもパスワードが求められたら、&amp;rdquo;robots1234&amp;rdquo; と入力しましょう。&lt;br /&gt;
Raspberry Piの本体にWiFiが内蔵されているモデル以外をお使いの場合は、WiFiドングル（USB接続の子機）を接続します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;右上に上下の矢印2つのアイコンをクリックして、WiFiに接続しましょう。&lt;br /&gt;
有線LANによる接続と別でWiFiに接続していないと、アップデートやSkyWayへの接続などができません。&lt;/p&gt;
&lt;p&gt;次にソフトウェアのアップデートを行います。&lt;br /&gt;
&amp;ldquo;DI Software Update&amp;rdquo; というアイコンをダブルクリックして開き、しばらく待つと以下の画面になります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;以下の作業でダイアログが何回か出ますがすべてOKをクリックしてください。&lt;br /&gt;
ドロップダウンメニューから &amp;ldquo;GrovePi&amp;rdquo; を選択し、&amp;rdquo;Update Firmware&amp;rdquo; をクリックします。&lt;br /&gt;
それが完了したら、&amp;rdquo;Update Dexter Software&amp;rdquo; のボタンもクリックしてアップデートを行います。&lt;/p&gt;
&lt;p&gt;ターミナルウインドウが出てアップデートが進行していきますので、少し時間がかかりますが終わるまで気長に待ちましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ターミナルがこのような画面になったら閉じて、Raspberry Piを再起動します。&lt;br /&gt;
再起動後は同様の手順でブラウザからデスクトップが表示できるところまで進めて、このデスクトップからターミナルを開きましょう。&lt;br /&gt;
あるいは、SSHが使い慣れている方であれば、作業用PCから&lt;br /&gt;
&lt;code&gt;$ ssh pi@dex.local&lt;/code&gt;&lt;br /&gt;
で直接CLI操作をすることも可能ですので、使いやすいほうをお試しください。&lt;/p&gt;
&lt;h2 id=&#34;ポケベルのプログラム部分の制作&#34;&gt;ポケベルのプログラム部分の制作&lt;/h2&gt;
&lt;h3 id=&#34;groveのlcdとブザーを扱う&#34;&gt;GroveのLCDとブザーを扱う&lt;/h3&gt;
&lt;p&gt;さて、ここからはポケベルを実際に動作させるためのプログラムを作成していきます！&lt;br /&gt;
といっても、全てコピー&amp;amp;ペーストで作成していただけますのでご安心を。&lt;/p&gt;
&lt;p&gt;まずは適当なディレクトリを作成して移動します。&lt;br /&gt;
&lt;code&gt;$ mkdir ~/pocketbell; cd ~/pocketbell&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;LCDディスプレイを簡単に扱えるようにしてくれるモジュールをコピーします。&lt;br /&gt;
&lt;code&gt;$ cp ~/Desktop/GrovePi/Software/Python/grove_rgb_lcd/grove_rgb_lcd.py ./&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同じディレクトリに、テスト用スクリプトを作成しましょう。&lt;br /&gt;
&lt;code&gt;$ vi grove_test.py&lt;/code&gt;&lt;br /&gt;
ここではviエディタを使っていますが、vimやemacsなど、編集のできるものであれば何でもかまいません。&lt;br /&gt;
編集画面になったら、以下のソースコードをコピー&amp;amp;ペーストして保存してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ファイル:grove_test.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
try:
setRGB(200, 200, 200)
setText(&amp;quot;Hello PocketBell&amp;quot;)
grovepi.digitalWrite(buzzer, 1)
time.sleep(1)
grovepi.digitalWrite(buzzer, 0)
except KeyboardInterrupt:
grovepi.digitalWrite(buzzer, 0)
except IOError:
print (&amp;quot;Error&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存したら、python3で実行してみましょう。&lt;br /&gt;
&lt;code&gt;$ python3 grove_test.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ブザーからビープ音が鳴ると同時に、LCDに &amp;ldquo;Hello PocketBell&amp;rdquo; と表示されていれば、GroveがRaspberry PiのPythonから正しく扱えていることがわかります。&lt;/p&gt;
&lt;h3 id=&#34;skywayと接続する&#34;&gt;SkyWayと接続する&lt;/h3&gt;
&lt;p&gt;今回のポケベル制作における通信部分は、&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;というWebRTCプラットホームを利用します。&lt;br /&gt;
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br /&gt;
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong&gt;WebRTC Gateway&lt;/strong&gt; というものが開発されていて、無償で利用することができます。&lt;br /&gt;
詳細は以下をご覧ください。&lt;br /&gt;
&lt;a href=&#34;https://github.com/skyway/skyway-webrtc-gateway&#34;&gt;skyway/skyway-webrtc-gateway: &lt;em&gt;Experimental&lt;/em&gt; WebRTC Gateway for SkyWay&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;skywayのアカウント作成とapiキーの取得&#34;&gt;SkyWayのアカウント作成とAPIキーの取得&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://webrtc.ecl.ntt.com/signup.html&#34;&gt;新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a&gt;&lt;br /&gt;
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p&gt;
&lt;p&gt;Application description: my pocketbell（一例。任意の名前でよいです）&lt;br /&gt;
Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/p&gt;
&lt;p&gt;&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほど公衆電話アプリからこのアプリケーションを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br /&gt;
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;作成後のページはこのように表示されているかと思います。&lt;br /&gt;
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p&gt;
&lt;h4 id=&#34;webrtc-gatewayの取得と起動&#34;&gt;WebRTC Gatewayの取得と起動&lt;/h4&gt;
&lt;p&gt;Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br /&gt;
&lt;code&gt;$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;実行権限を付与してから、バックエンドで起動させます。&lt;br /&gt;
&lt;code&gt;$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;gatewayをpythonで扱えるようにするモジュールの取得&#34;&gt;GatewayをPythonで扱えるようにするモジュールの取得&lt;/h4&gt;
&lt;p&gt;今回、WebRTC Gatewayを扱うにあたり、簡単なモジュールを作成しました。&lt;br /&gt;
Gitリポジトリをローカルにクローンします。&lt;br /&gt;
&lt;code&gt;$ git clone https://github.com/ukkz/skygate.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;未完成のモジュールですので、今回は開発者モードでインストールします。&lt;br /&gt;
&lt;code&gt;$ pip3 install -e skygate/&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ sudo python3 skygate/setup.py develop&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;skywayへの接続テスト&#34;&gt;SkyWayへの接続テスト&lt;/h4&gt;
&lt;p&gt;以下のコマンドでサンプルスクリプトを実行します。&lt;br /&gt;
&lt;code&gt;$ python3 skygate/sample.py bell-0000 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br /&gt;
今回は &amp;ldquo;bell-0000&amp;rdquo; という値を使いましょう。&lt;br /&gt;
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Peer created as bell-0000: pt-829aa04e-449d-44a1-94f8-03481741cc5c&lt;/code&gt;&lt;br /&gt;
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;br /&gt;
Ctrl+C でサンプルスクリプトを終了させましょう。&lt;/p&gt;
&lt;h3 id=&#34;skyway接続とgroveを組み合わせる&#34;&gt;SkyWay接続とGroveを組み合わせる&lt;/h3&gt;
&lt;p&gt;以下のソースコードをコピー&amp;amp;ペーストし &amp;ldquo;pocketbell.py&amp;rdquo; という名前のファイルに保存してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ファイル:pocketbell.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import time, sys, skygate, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
if len(sys.argv) &amp;gt;= 3:
peer_id = str(sys.argv[1])
api_key = str(sys.argv[2])
try:
peer = skygate.Peer(peer_id, api_key)
except Exception as e:
print(e)
setRGB(100, 0, 0)
quit()
else:
print(&#39;Peer created as &#39;+peer.id+&#39;: &#39;+peer.token)
setRGB(0, 100, 0)
try:
while True:
for data in peer.getDataConnections():
if not data.getQueue().empty():
mes = data.getQueue().get().decode()
setText(mes)
setRGB(200, 200, 200)
print(mes)
grovepi.digitalWrite(buzzer, 1)
time.sleep(.1)
grovepi.digitalWrite(buzzer, 0)
time.sleep(2)
setRGB(0, 100, 0)
except KeyboardInterrupt:
try:
peer.close()
except Exception as e:
print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続テストのときと同様、ピアIDとAPIキーを指定して実行します。&lt;br /&gt;
ただし、ここではピアIDは &amp;ldquo;bell-0001&amp;rdquo; にしましょう。&lt;br /&gt;
&lt;code&gt;$ python3 pocketbell.py bell-0001 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;さて、ここまででポケベルは完成で、上記のプログラムを実行することで待ち受け状態となります。&lt;br /&gt;
ではさっそく、公衆電話からデータを送ってみましょう！&lt;/p&gt;
&lt;h2 id=&#34;web上の公衆電話から数字を送信しよう&#34;&gt;Web上の公衆電話から数字を送信しよう&lt;/h2&gt;
&lt;p&gt;前回の記事で紹介した、Webから使えて自作ポケベルと通信ができる公衆電話を使います。&lt;br /&gt;
&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この公衆電話のURLは以下のようになっています。&lt;br /&gt;
&lt;code&gt;https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;このうち、&lt;code&gt;apikey=&lt;/code&gt;より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;コインの投入口付近をクリックして、画面上の電話機のディスプレイが &amp;ldquo;CALL&amp;rdquo; になれば問題なくSkyWayに接続されています。&lt;br /&gt;
これが確認できたら、以下の順番で操作を進めてみてください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;ldquo;0001&amp;rdquo;（ポケベルのピアIDであるbell-xxxxのxxxxに相当する4桁の数字）&lt;/li&gt;
&lt;li&gt;電話機ディスプレイが &amp;ldquo;0001&amp;rdquo; 表示に変化&lt;/li&gt;
&lt;li&gt;好きな数字を2〜3文字ほど打ち込んでみる&lt;/li&gt;
&lt;li&gt;受話器を置く部分をクリックして終話する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/14.gif&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ポケベルを確認してみましょう。&lt;br /&gt;
ビープ音とともに、自分で打ち込んだ数字がGrove LCDの画面上に表示されましたでしょうか？&lt;br /&gt;
今回は簡略版ですので、2タッチ入力で送ったカタカナ文字は表示できないという点がありますが、通信の難しさを意識することなくP2Pでのデータ送受信を体験いただけたかと思います。&lt;/p&gt;
&lt;p&gt;ちなみに、前半の紹介記事で作っていたポケベルの動作のようすは以下のようになります。&lt;/p&gt;
&lt;div style=&#34;margin:auto&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;着信音作っただけでまだ通信してなかった &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%9D%E3%82%B1%E3%83%99%E3%83%AB?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ポケベル&lt;/a&gt; ちゃんとメッセージ受信できるようにしました📟送信側の公衆電話はWebで動きます☎️ 2タッチ入力対応・WebAudioでDTMF発音・WebRTCでデータ送信してますよん &lt;a href=&#34;https://t.co/NKauF6wd6E&#34;&gt;https://t.co/NKauF6wd6E&lt;/a&gt; &lt;a href=&#34;https://t.co/e4eOLBYbU1&#34;&gt;pic.twitter.com/e4eOLBYbU1&lt;/a&gt;&lt;/p&gt; うこ (@harmoniko) &lt;a href=&#34;https://twitter.com/harmoniko/status/1100371782152773633?ref_src=twsrc%5Etfw&#34;&gt;2019年2月26日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;WebRTCはWebブラウザ間でリアルタイムなデータの送受信を扱える最新の規格として普及していますが、ブラウザ以外のIoTデバイスでもこんなに簡単に扱えてしまう技術が登場しています。&lt;br /&gt;
今回利用したSkyWayというサービスはJavaScriptのSDKが無償配布されていて、Webブラウザ上で動作するWebRTCアプリケーションを誰でも気軽に作成することができます。また、Raspberry Piから利用したGatewayも、WindowsやLinux上からブラウザを介さずに利用できるようになっています。&lt;br /&gt;
あまり複雑なコードを書かなくてもこのようなP2P送受信ができますので、この機会にWebRTCを活用したものづくりにぜひともチャレンジしてみてくださいね！&lt;/p&gt;</description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【体験編】</title><link>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。&lt;br/&gt;
ここ最近は次の元号が気になって、改元まで眠れません！&lt;/p&gt;
&lt;p&gt;そんな平成の終了を追うように、平成初期に一世を風靡した「ポケベル」が、今年9月末で終了してしまうようですね。&lt;br/&gt;
&lt;a href=&#34;http://www.teleme.co.jp/service/magicmail/index.html&#34;&gt;東京テレメッセージ株式会社｜ページャー（マジックメール）サービス終了のお知らせ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;平成生まれの僕としては、聞いたことはあるけれど、使ったことはないポケベル。&lt;br/&gt;
これは無くなってしまう前に体験しなくては！&lt;br/&gt;
でも、もうポケベル本体は生産されておらず、新規契約もできません。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;ならば…… 作ってしまいましょう！&lt;/b&gt;&lt;/p&gt;
&lt;h2 id=&#34;ポケベルのしくみ&#34;&gt;ポケベルのしくみ&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ガラケー世代、スマホ世代からすれば衝撃なのですが、 &lt;strong&gt;ポケベルは受信専用&lt;/strong&gt;です。&lt;br/&gt;
基本は「無線呼び出し」という、小型の受信機に対し遠隔から合図を送る汎用的な仕組みであったものが発達し、報知局から受信専用の携帯機器のベルを鳴らすことができるようになりました。これがいわゆる「ポケベル」のはじまりです。その後、公衆電話から数字を送ったり、2つの数字の組み合わせで文字を表現する「2タッチ入力」で文字列を送ることができるようになったりして、今の30代〜40代が記憶に残すところのポケベルとなりました。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://ja.wikipedia.org/wiki/無線呼び出し&#34;&gt;無線呼び出し - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;さて、仕組みはわかったものの、現代で手軽に扱える技術で、ハードウェア・ソフトウェア・通信方法をどのようにしたらうまく作れるでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;作ってみた&#34;&gt;作ってみた&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;説明が複雑になりそうなので先に作りました（結論）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;送信側である公衆電話も作りました。こちらはWeb上で動作します。&lt;/p&gt;
&lt;h3 id=&#34;ポケベル側&#34;&gt;ポケベル側&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ポケベル側は、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;レトロ感のあるディスプレイ&lt;/li&gt;
&lt;li&gt;安っぽい音のするブザー&lt;/li&gt;
&lt;li&gt;速いけど確実に届くかは無保証な通信プロトコル&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の3点が課題でした。&lt;/p&gt;
&lt;p&gt;まず最初に、ハードウェア上でLinuxが動作するなら開発も比較的やりやすいので、Raspberry Pi 3 B+ を製作のベースに選択しました。&lt;br/&gt;
次に、1.については、秋葉原でよく売られているのを見かける「16文字×2行」のディスプレイ（1580円）を使いました。しかしながら時代に即して、液晶ではなく有機ELであるところがちょっとナウいですね（死語）。&lt;br/&gt;
2.も、秋葉原でよく見る圧電ブザー（50円）を採用して音のチープ感を重視しました。&lt;br/&gt;
3.は、P2PでUDP伝送を行えばそれっぽくなりそうですが、そのままだと難しいので、NTTコミュニケーションズの提供する&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;を利用したWebRTC通信を採用することにしました。これについては後述します。&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&#34;公衆電話側&#34;&gt;公衆電話側&lt;/h3&gt;
&lt;p&gt;公衆電話は、実機を使おうとすると設置場所を探さなければいけないのと、ハードウェアを作るのが大変そうだったので、Webで実装しました。&lt;br/&gt;
以下より誰でも利用することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;往年のプッシュホンのDTMF音も再現しています。&lt;br/&gt;
これ単体でも2タッチ入力（ポケベル打ち）が体験できますので、ぜひ触ってみてください。&lt;/p&gt;
&lt;h2 id=&#34;ポケベルがさわれそうな世代を探そう&#34;&gt;ポケベルがさわれそうな世代を探そう&lt;/h2&gt;
&lt;p&gt;ネットから情報をできるだけ収集してとりあえず作ってみたものの、同じように作っている事例がまず存在せず、かつてのポケベルをどれだけ再現できているのかまったく自信がありません。&lt;br/&gt;
そこで、実際にポケベルを所持していた世代の方に見ていただくべく、&lt;a href=&#34;https://iotlt.connpass.com/event/118404/&#34;&gt;IoTLT大阪(Vol.10)&lt;/a&gt;でこのポケベルについて発表しました。&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5c62585978ca428f83d0581efb6ae50a&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;当日の参加者は50人前後。&lt;br/&gt;
ここで「実際にポケベルを使っていた方はどれぐらいいらっしゃいますか？」と聞いてみたところ……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;写真幅に収まりきらなかったのですが、およそ5人〜10人の方に挙手いただきました！&lt;br/&gt;
IoTLTは勉強会としては年齢層が若めの部類ではないかと考えているのですが、1割ほどの方が実際にご使用されていたとのこと。今回はポケベル初出のため、できれば今後の勉強会でも調査していきたいと思っております！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;発表の最後に、「実際に利用されていた方、触ってみたい方は懇親会で僕のところにお越しください」と申し上げたところ、多くの人が見に来てくださいました。 &lt;del&gt;おっさんホイホイとはこのことか&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「公衆電話のデザインが地味にリアル！」&lt;/strong&gt;　と、ツボにはまっている方が多かったです。&lt;/p&gt;
&lt;p&gt;「これ（公衆電話）触ってもいいんですか？」「どうぞどうぞ」と、実際に触っていただいたところ、「もう忘れたよ〜〜」と言いつつも「2タッチ入力」を軽々こなせた方が3名ほどいらっしゃいました。&lt;br/&gt;
いまだにブラインドでポケベル打てる（人生の）先輩方、おそるべしです……。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;メッセージ、ちゃんと当時と同じように打てますね！！　と絶賛いただけたので見てみると……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これはリア充しとったやつやな……&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;「アイシテル」は、2タッチ入力では「1112324493」と打ちますが、当時はド定番のメッセージだったそうです。文字が送れるようになる前の数字送信だけだったときには、語呂合わせで「114106」などとも送っていたんだとか。&lt;br/&gt;
その他、お話を伺ったところによると&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公衆電話は時間課金なので、10円でメッセージを送るには、時間内に早打ちをする必要があった。&lt;/li&gt;
&lt;li&gt;いつも20円使ってたけど、10円で打てる人がいて、神のように崇められていた。&lt;/li&gt;
&lt;li&gt;「88」と打てばハートの絵文字が出るのは当たり前（ドコモのポケベルがそうなっていたらしいです）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの思い出があったそうです。&lt;/p&gt;
&lt;p&gt;今も「LINEの既読無視」のように、通信手段の特性に基づいた独特の「あるある」が存在しますが、それは四半世紀前でも変わらなかったんですねえ……。&lt;/p&gt;
&lt;h2 id=&#34;みなさんもポケベル体験してみよう&#34;&gt;みなさんもポケベル体験してみよう！&lt;/h2&gt;
&lt;p&gt;さてそんな手作りのポケベルですが、送信側の公衆電話はWebで実装されているため、 &lt;strong&gt;ブラウザで実際にポケベル打ちを試していただくことが可能&lt;/strong&gt;です！&lt;br/&gt;
先ほど紹介させていただいたページにぜひアクセスしてみてください。&lt;br/&gt;
Google Chromeでの動作のみ確認しています。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;まずコイン投入口をクリックすると、液晶部分に「TEST」という表示が出ることを確認してください。これで、実際の受信端末がなくても、打ったメッセージをブラウザで確認することができるようになります。&lt;br/&gt;
次に、数字ボタンで「*2*2」と打ち込みます。これはフリーメッセージの入力を開始するコマンドのようなものです。これが打てたら、以下のページで紹介されているフリーワードの表を見ながら、数字2つずつ打ち込んでゆきます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.kerokero.net/makosuke/pbcode/docomo.htm&#34;&gt;Tele-Call page / DoCoMo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表の縦列数字が1つめ、横列数字が2つめです。例えば「うに」と入力するときは、まず「13」次に「52」のように2つずつ打ちます。&lt;br/&gt;
定番メッセージ「アイシテル」は「1112324493」と打つと表現することができます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;メッセージが打ち込めたら、最後に「##」と入力し、受話器置きの部分をクリックして「終話」すると、ポップアップでメッセージが表示されます。
うまく入力できたでしょうか？&lt;/p&gt;
&lt;h3 id=&#34;公衆電話の通信について&#34;&gt;公衆電話の通信について&lt;/h3&gt;
&lt;p&gt;このWeb公衆電話は、このままだと通信をしない「テストモード」で動作しますが、実際には&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;を利用したWebRTC通信に対応しています。執筆時点で、WebとRaspberry Piのような組み込み機器をP2Pでリアルタイムに、かつ簡単に繋ぐことのできるサービスはこれがほぼ唯一です。しかもSkyWayのコミュニティ版は完全無料で使うことができます。&lt;br/&gt;
Webと組み込み機器を繋ぐのなら、以前まではWebSocketやMQTTを使うのが主でしたが、こちらは2者とも「サーバー対クライアント」の通信であり、バックエンドを準備するのが大変でした。&lt;br/&gt;
このSkyWayが組み込みに対応したWebRTCエンジン「&lt;a href=&#34;https://support.skyway.io/hc/ja/articles/360008586334--SkyWay-WebRTC-Gateway-試験提供開始&#34;&gt;WebRTC Gateway&lt;/a&gt;」を提供開始したことで、本来はWeb環境同士でしか成立しなかったWebRTC通信を、Raspberry Piのような低レベルのデバイスから直接的に接続させることが可能になりました。&lt;br/&gt;
この記事で作ったポケベルは、実際にこれで文字列をWeb公衆電話からRaspberry Pi製のポケベルへと送信しています。&lt;/p&gt;
&lt;h2 id=&#34;ポケベル本体も-はんだづけなしで作れます&#34;&gt;ポケベル本体も、はんだづけなしで作れます&lt;/h2&gt;
&lt;p&gt;さて、ここまでモノが揃っているのなら、実際のハードウェアに文字列を送信してみたいな、と思われたことではないでしょうか。そこで、今回のポケベルは全てはんだづけを行っていますが、「Grove」と呼ばれる規格に対応したディスプレイやブザーを使うことで、一切はんだづけをせずに同じポケベルを作っていただける方法を準備しました！&lt;br/&gt;
その詳細は次回の記事に書かせていただきますので、ご興味を持たれたかたはぜひ当ブログをチェックしておいてくださいね！&lt;/p&gt;</description></item><item><title>MPU9250で回転角度を検知する</title><link>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</guid><description>
&lt;p&gt;はじめまして。ライターとして起用していただきました、ありか(&lt;a href=&#34;https://twitter.com/hakase0617&#34;&gt;@hakase0617&lt;/a&gt;)です。&lt;/p&gt;
&lt;p&gt;秋田高専で高専ロボコンを5年間やっていました。
ロボコン界隈には卒業後も関わり続けているため、そういった若きエンジニアの手助けができたらと思っています！&lt;/p&gt;
&lt;p&gt;マネジメントや教育に興味があり、その一環でIoT、AIの勉強をしています。
将来的にはエンジニアを育成したり、一緒にお仕事ができたりしたら楽しそうだなって思います。&lt;/p&gt;
&lt;h2 id=&#34;9軸センサとは&#34;&gt;9軸センサとは&lt;/h2&gt;
&lt;p&gt;早速ですが、今日はMPU9250というセンサを紹介します。
これは「9軸センサ」と呼ばれるものです。&lt;/p&gt;
&lt;p&gt;え、9軸ってx,y,zとあとは何！？&lt;/p&gt;
&lt;p&gt;これは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加速度センサ　x,y,z&lt;/li&gt;
&lt;li&gt;角速度センサ　x,y,z&lt;/li&gt;
&lt;li&gt;地磁気センサ　x,y,z&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の3軸ずつ、合わせて9軸というものです。
まずは各センサの紹介からいきます。&lt;/p&gt;
&lt;h2 id=&#34;加速度センサとは&#34;&gt;加速度センサとは&lt;/h2&gt;
&lt;p&gt;加速度とは、&lt;u&gt;「どのくらいの速度が変化しているか」という指標です。&lt;/u&gt;
車を運転しているイメージをしてください。
アクセルを思いっきり踏んで、時速20km/hで走っていた車を時速60km/hまで加速させたとします。
この時、体は後ろに引っ張られる感じがします。
あの感じが加速度です。&lt;/p&gt;
&lt;p&gt;加速度センサでは、物が動いているかどうかということも検出できます。
加速度センサの応用例としてはカメラの手ぶれ補正やスマホの画面回転、ハードディスクの揺れ検知などが該当します。
ロボットの姿勢制御には欠かせない技術でもあります。&lt;/p&gt;
&lt;h2 id=&#34;角速度センサとは&#34;&gt;角速度センサとは&lt;/h2&gt;
&lt;p&gt;角速度とは読んで字のごとく、回転角の速度です。
ものが回っている時の速さの単位に「回転数」（rpmなど）や周波数（Hzなど）がありますが、これらは「何回回ったか」を示す指標です。
&lt;u&gt;回っているものの「角度」に注目して速さを表す指標が角速度です。&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;地磁気センサとは&#34;&gt;地磁気センサとは&lt;/h2&gt;
&lt;p&gt;地磁気センサでは、磁力の強さを検知出来ます。
地球は大きな磁石ですが丸いので、地球上のどの位置にいるかで地磁気の強さは異なります。
そのため、&lt;u&gt;地磁気の強さやら向きやらを測定すると自分がいる位置が分かり、自分が向いている方角も分かるというものです。&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;9軸センサで何が出来るか&#34;&gt;9軸センサで何が出来るか&lt;/h2&gt;
&lt;p&gt;さて、これら3つのセンサが合体した9軸センサで、何ができるのでしょうか？&lt;/p&gt;
&lt;p&gt;&lt;u&gt;角速度センサで「自分がどれだけ回ったのか」が分かります。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;しかし弱点があります。
角速度センサだけでは、今「動いている」のか「止まっている」のかは分かりません。
そこで加速度センサの出番です。加速度センサは上記状態を把握できます。
これらを合わせて「6軸センサ」と呼ぶのですが、&lt;u&gt;この6軸センサを使うと「回転角度」が分かります。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;じゃあ6軸でいいじゃん、と思ってしまいますが、6軸センサには弱点があります。
ずばり、「ドリフト」です。&lt;/p&gt;
&lt;p&gt;角速度センサは「積分方式」で回転角度を検出します。
どういうことかというと、「15度動いた」「20度動いた」「10度動いた」を合わせて「45度動いた」といった風に、足し算で算出します。
しかし、みんなの敵である「誤差」という概念がここで登場します。&lt;/p&gt;
&lt;p&gt;さっきの例で、毎回+1度の誤差が生じてしまうとします。
すると　16度+21度+11度＝48度　となり、誤差がどんどん大きくなっていきます。
つまり、試行回数（時間経過）とともに誤差が大きくなっていくではありませんか。&lt;/p&gt;
&lt;p&gt;これを解決するためには、別の方法で校正を行う必要があります。
そこで「地磁気センサ」を使います。&lt;/p&gt;
&lt;p&gt;地磁気センサは、簡単に言うと「方位磁針」です。そのため、北を向いたまま10分経とうが1時間経とうが、&lt;u&gt;地磁気センサは「北を向いている」という状態を教えてくれます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;まとめると、
　角速度センサ→何度回ったかが分かる
　加速度センサ→回ったかが分かる
　地磁気センサ→ドリフトを打ち消す
といった役割を持ち、回転を検知するセンサとなります。&lt;/p&gt;
&lt;h2 id=&#34;実際に使ってみよう&#34;&gt;実際に使ってみよう&lt;/h2&gt;
&lt;p&gt;MPU9250を使って、実際に回転角度を測定してみましょう。
今回は開発環境にArduinoを選定しました。
ライブラリが公開されており、初心者である僕でもサクッと動作確認が可能な点に魅力を感じました。&lt;/p&gt;
&lt;p&gt;今回は入門として、角速度センサのみで回転角度を検出してみます。&lt;/p&gt;
&lt;h2 id=&#34;開発環境&#34;&gt;開発環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS:Windows10&lt;/li&gt;
&lt;li&gt;ArduinoIDE&lt;/li&gt;
&lt;li&gt;Arduino UNO&lt;/li&gt;
&lt;li&gt;MPU9250&lt;/li&gt;
&lt;li&gt;ジャンパワイヤ5本&lt;/li&gt;
&lt;li&gt;ブレッドボード&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;スケッチ&#34;&gt;スケッチ&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-C:Gyro&#34;&gt;#include &amp;lt;Wire.h&amp;gt;
#define FIL 0.9 //フィルタ
#define AVE 100 //測定回数
#define GYRO 30 //ドリフト許容値
int emp[6] = {};
int data = 0; //生データ格納 1から順に加速度xyz角速度xyz
long datasum = 0; //合計データ格納　平均算出用
int th = 0; //閾値
long integral = 0; //積分値
int degree; //回転角度
int rock; //ロック機構により導かれた初期値
char input;
void setup() {
Wire.begin(); Serial.begin(115200); Wire.begin(0x68);
Wire.beginTransmission(0x68); Wire.write(0x6B); Wire.write(0x00); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1C); Wire.write(0x10); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1B); Wire.write(0x08); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1A); Wire.write(0x05); Wire.endTransmission();
Serial.print(&amp;quot;*****************\nCalibrating now\nplease turn once and press &#39;f&#39;\n&amp;quot;);
while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == &#39;f&#39;) {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
}
void loop() {
reading();
degree = abs(integral / rock);
Serial.println(degree);
datasum = 0;
}
void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;arduinoとの接続&#34;&gt;Arduinoとの接続&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Arduino&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MPU9250&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5V&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;VCC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;GND&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;A2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;INT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;A4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;SDA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;A5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;SCL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;実物&#34;&gt;実物&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/245/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;スケッチ簡易解説&#34;&gt;スケッチ簡易解説&lt;/h2&gt;
&lt;p&gt;今回は角速度センサのｚ軸のみを使用します。
ｚ軸、つまり地面と鉛直な方向の回転が分かる、早い話が自分がどれだけ回ったかが分かります。&lt;/p&gt;
&lt;p&gt;まず、角速度センサを使うにあたって、センサから返ってくる値を調べる必要があります。
センサは「何度回ったよ」とは教えてくれません。
「4253」「71469」みたいな無機質な値を教えてくれます。
そのため、その値がいくつで360度に相当するのかを確認する必要があります。&lt;/p&gt;
&lt;p&gt;どうすればいいのか、答えは「360度回せばいい」のです。そのままです。&lt;/p&gt;
&lt;p&gt;今回はArduinoを起動した際に、まず1回転して値を取得して、それから角度検出をする、というスケッチを作りました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C:while&#34;&gt; while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == &#39;f&#39;) {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reading()関数の中で実際に値を取得するのですが、1回転した合図として「Arduinoのシリアル通信で&amp;rsquo;f&amp;rsquo;を送ってあげた時にwhile()から抜けて角度検出モードに移行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C:reading&#34;&gt;void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのreading()の中では、平均を取るためにAVEで指定された回数値を格納し続けています。
emp[]で色々格納していますが、上から
加速度ｘ軸、ｙ軸、ｚ軸
温度
角速度ｘ軸、ｙ軸、ｚ軸
という風に格納されていきます。そのため今回は角速度ｚ軸のみを取り出すためこういった書き方です。&lt;/p&gt;
&lt;h2 id=&#34;動かしてみよう&#34;&gt;動かしてみよう&lt;/h2&gt;
&lt;p&gt;リード線を数本接続しただけで動作確認が出来るなんて、とっても楽ですね！
早速動かしてみます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/245/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;できました！
角度が表示されています。&lt;/p&gt;
&lt;h2 id=&#34;何に使えるの&#34;&gt;何に使えるの？&lt;/h2&gt;
&lt;p&gt;今回注目したのは、自律移動ロボットの位置制御です。
ロボットコンテストなどでは、コントローラなどを用いず自動でロボットが移動することを求められるケースが多々あります。
その自動ロボットの位置制御には、どのような方法が用いられているのでしょうか。&lt;/p&gt;
&lt;p&gt;おそらく一般的なものは、モータにロータリエンコーダなどを取り付けて
「モータがどのくらい回ったか」
を検出し、位置を割り出す方法だと思います。&lt;/p&gt;
&lt;p&gt;ですが、この方法には弱点があります。
例えば、移動するフィールドが平らではなかったり、滑りやすい障害物（落ち葉など）があったり、タイヤが走行中に滑ったりといった「タイヤとフィールドの関係」で誤差が生じてしまいます。&lt;/p&gt;
&lt;p&gt;この誤差をなんとかしたい！
そんな時に便利なのがこの9軸センサです。&lt;/p&gt;
&lt;p&gt;自身がどれくらい動いたか、どれくらい回ったかが分かるこのセンサがあれば、たとえタイヤが空回りしてしまっても、「今いる位置」を知ることが可能なのです！&lt;/p&gt;
&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;
&lt;p&gt;今回は9軸センサのうちたった1軸しか使っていませんが、回転を検出することができました。
より高度なスケッチを作ることでより高度な測定が可能になるため、これからも勉強を続けていきたいです。&lt;/p&gt;
&lt;style&gt;
.dialogue {
padding: 10px;
display: table;
}
.image_n, .image_s {
width: 75px;
height: 75px;
margin-right: 10px;
display: table-cell;
vertical-align: middle;
}
.image_n img {
border-radius: 50%;
border: 2px solid blue;
}
.image_s img {
border-radius: 50%;
border: 2px solid green;
}
.name {
font-weight: bold;
text-align: center;
}
.text {
display: table-cell;
padding: 0;
vertical-align: middle;
padding-left: 20px;
}
&lt;/style&gt;</description></item><item><title>初めてのArduino〜トレーニングマシンを作る編〜</title><link>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</link><pubDate>Mon, 11 Mar 2019 23:00:00 +0900</pubDate><guid>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</guid><description>
&lt;p&gt;初めまして、今月からdotstudioでお世話になる&lt;a href=&#34;https://dotstud.io/members/jikyuryoku&#34;&gt;自給力&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;プログラミングスクール卒業後でフラフラしてたところを、のびすけしゃちょーから「記事を書いてみない？」と誘っていただきました。これから、バシバシ記事を書いていきますのでよろしくお願いします。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コードの書き方や手順で変なところあるかもしれませんが、許してください……！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;僕はフィットネス業界での事業を考えています！せっかくなので、フィットネスに絡めて何か作って、記事にしていきたいと思います。プログラミングはかじってはいるのですが、IoTのコーディングや電子工作は初めてなので、&lt;u&gt;初心者さん向けに自分の失敗の工程も含めてお伝えできればと思ってます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;そして、まず作ろうと決意したモノは……&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;font size=&#34;3&#34;&gt;&lt;strong&gt;「自宅でのトレーニングで回数を数えてくれるサービス」&lt;/strong&gt;です！！パチパチ〜〜！！&lt;/font&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;意外とスクワットとかダンベルのトレーニングしている時って回数数えるの面倒なんですよね。&lt;/p&gt;
&lt;p&gt;そこで、勝手に回数数えてくれるサービスがあればテレビ見ながらでも回数に気を取られずにトレーニングができる！そんな思いから、サービス作ってみようと思ったわけです。&lt;/p&gt;
&lt;h2 id=&#34;のびすけしゃちょーに相談してみる&#34;&gt;のびすけしゃちょーに相談してみる&lt;/h2&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
というわけで、ダンベルを上げ下げしてる時に回数数える物作りたいっす！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
いいね。じゃあどうやって数えるか考えよう。カウントの仕方としては、&lt;u&gt;赤外線センサ使うとか、腕の動きで変わる気圧を計測する&lt;/u&gt;ってやりかたもあるよ、加速度センサでy軸方向に動いた回数を、、、（etc）&lt;/b&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（おお、なんか凄そうなのが作れそうだ）&lt;br&gt;
なるほど！！面白そうですね！！！！じゃあ加速度センサ使ってみたいです！！！&lt;br&gt;
（理由:かっこいいから）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ま、それは難しいから最初はスイッチだな（バッサリ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（え、なんで他の紹介したん……）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;そんなこんなで、iot初心者の僕は&lt;strong&gt;「磁気スイッチ」を使ったカウントマシン&lt;/strong&gt;を作ることに決まりました！！&lt;/p&gt;
&lt;h2 id=&#34;まずは準備&#34;&gt;まずは準備&lt;/h2&gt;
&lt;p&gt;今回使うのはArduino（写真左）と磁気スイッチ（写真真ん中と右）&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;まず、Arduinoにコードを書き込むためにArduino IDEをインストールしましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/?fbclid=IwAR3BB5HrFh-K6cMGcnGl4rjHIA4u2OJYDDlNjLmN5IrprOn8n3zY6g-Kp8s&#34;&gt;こちらのドキュメント&lt;/a&gt;の通りにやれば簡単にインストールできます。&lt;/p&gt;
&lt;p&gt;そして、磁気スイッチの使い方は&lt;a href=&#34;http://wiki.seeedstudio.com/Grove-Magnetic_Switch/&#34;&gt;こちら&lt;/a&gt;を参考にしました！&lt;/p&gt;
&lt;p&gt;サイト内は英語で書かれていますが、ここでやることしては&lt;strong&gt;ArduinoのD２のピンに刺し、写真のように組み立てる&lt;/strong&gt;のだそうです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;さぁ-数を数えよう&#34;&gt;さぁ、数を数えよう&lt;/h2&gt;
&lt;p&gt;「数なんてすぐに数えられるわい」っと思ったのも束の間……。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「あれ？何を数えるんだ？？？」&lt;/strong&gt;と、なんとも初歩的な壁にぶつかりました。&lt;/p&gt;
&lt;p&gt;ダンベルを動かした回数を頭の中で数えるのは簡単ですが、機械に数えさせるのは訳が違う。まずは何を数えるか考えなければならないのです。&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
のびさん、オレは何を数えるんですか？（語彙力）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
まずは、センサが反応してる時にフラグを立ててみたら？&lt;br&gt;
フラグが立った状態からフラグが無くなったときにカウントできるようにしてみる方法があるよ。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
なるほど！それですね！（フラグって何……？）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;「フラグ」が何を指しているのかが分からなかったので、&lt;strong&gt;「Arduino フラグ」&lt;/strong&gt;でググってみました。どうやらセンサの状態を変数に入れて管理することだということが分かりました。&lt;/p&gt;
&lt;p&gt;（参考１）&lt;a href=&#34;http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html&#34;&gt;アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次に、「Arduino 数える」でググり、「変数でどう数えるのか」について、以下の記事を参考にしました。&lt;/p&gt;
&lt;p&gt;（参考２）&lt;a href=&#34;https://n.mtng.org/ele/arduino/samples/variable2.html&#34;&gt;変数で回数を数える&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;やることとしては、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;センサの状態をフラグ（変数）として認識させる&lt;/li&gt;
&lt;li&gt;フラグがついてる状態から、なくなった状態に「+１」していく&lt;/li&gt;
&lt;li&gt;1と2を繰り返す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;なるほどなるほど。だいたい道筋が見えてきたので、作っていきます！&lt;/p&gt;
&lt;h2 id=&#34;よし-作ろう&#34;&gt;よし、作ろう&lt;/h2&gt;
&lt;p&gt;（参考１）&lt;a href=&#34;http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html&#34;&gt;アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a&gt;からスイッチのon/offで数を数えるためコードがあり、アレンジをしてみました。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;必要なのは&lt;strong&gt;「グローバル変数の定義」「フラグの定義」「フラグからカウントする際のコード」の３つ&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;まずは&lt;strong&gt;「グローバル変数の定義」&lt;/strong&gt;です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int G_state = FLG_OFF;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;簡単ですね。&lt;/p&gt;
&lt;p&gt;次に&lt;strong&gt;「フラグの定義」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;フラグ立っている時は「1」、立っていない時は「0」と教えてあげます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const int FLG_ON = 1;
const int FLG_OFF = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;楽勝！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;それでは、最後に&lt;strong&gt;「フラグからカウントする際のコード」&lt;/strong&gt;を書いてみましょう。&lt;/p&gt;
&lt;p&gt;Void setup()の中に、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Serial.begin(115200);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を書き、
void loop()の中に、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; int val = digitalRead(MAGNECTIC_SWITCH);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;を書きます。&lt;/p&gt;
&lt;p&gt;これはつまり、&lt;strong&gt;センサで取得した値を変数valに入れている&lt;/strong&gt;わけです。&lt;/p&gt;
&lt;p&gt;そして&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(G_state == FLG_OFF){
count += 1;
}
Serial.println(count);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と書き、コンパイルして、書き込みをしていきます。&lt;/p&gt;
&lt;p&gt;ちょっとここでケアレスミスがあり、書き込みの際にエラーが何回か出ましたが、難なく解消。&lt;/p&gt;
&lt;p&gt;よし！これで動く！&lt;/p&gt;
&lt;p&gt;ツールの中のシリアルモニタを見てみましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;な、なにーーー！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;なんか勝手に数が増えてる！！！！このままじゃ数字が止まらなくなる！！！（パニック状態）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
助けて！のびさんんんんんんんん！！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ん？？これ、&lt;u&gt;if( G_state == FLG_OFF )で+1&lt;/u&gt;で書かないと、めっちゃ数えるよ。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あ、そうか……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;つまり、コードを日本語訳にすると、&lt;strong&gt;「G_stateの中のフラグがないときは、足していく」&lt;/strong&gt;という意味。フラグが無い状態では+1され続けてしまうんです。そりゃうまくイカンわ！！！&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
&lt;u&gt;if(G_state == FLG_OFF)の一文を消して、elseの中でフラグの判定&lt;/u&gt;した方がいいよ。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;のびさんのご指摘の通り、&lt;strong&gt;elseの中にif文を書いてフラグがonだったら1カウントをするコード&lt;/strong&gt;に書き換えました。&lt;/p&gt;
&lt;p&gt;よし！これでどうだ！！！書き込み開始！！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あれ？？？なんで58から始まるんだ？わけわからん数字だ……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
&lt;u&gt;デフォルトの数字は、setupで数字初期化されるから、setupの定義内でcount=０&lt;/u&gt;にすればいいんじゃない？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/suga.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ほうほう。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center&gt;
&lt;font size=&#34;3&#34;&gt;実際に書き換えてみると、見事解決！&lt;/font&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;ちゃんと数えてくれるか検証&#34;&gt;ちゃんと数えてくれるか検証&lt;/h2&gt;
&lt;p&gt;磁石をセンサに近づけて、、&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;離すと、、&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;そしてシリアルモニタを見ると&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/244/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;font size=&#34;3&#34;&gt;カウント「１」！！！！&lt;/font&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;見事成功です。&lt;/p&gt;
&lt;p&gt;いやぁ、一口に数を数えるとは言っても奥が深いですね！今日のところはこの辺で終わりたいと思います。&lt;/p&gt;
&lt;p&gt;続編をお楽しみに……！&lt;/p&gt;
&lt;style&gt;
.dialogue {
padding: 10px;
display: table;
}
.image_n, .image_s {
width: 75px;
height: 75px;
margin-right: 10px;
display: table-cell;
vertical-align: middle;
}
.image_n img {
border-radius: 50%;
border: 2px solid blue;
}
.image_s img {
border-radius: 50%;
border: 2px solid green;
}
.name {
font-weight: bold;
text-align: center;
}
.text {
display: table-cell;
padding: 0;
vertical-align: middle;
padding-left: 20px;
}
&lt;/style&gt;</description></item><item><title>【どんと来い、列車遅延】 勤怠メールをサクッと送れるオレオレツールを作ってみた</title><link>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</link><pubDate>Wed, 13 Feb 2019 12:50:00 +0900</pubDate><guid>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</guid><description>
&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/pokio&#34;&gt;ポキオ&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;急いでるときに限って、いつも使ってる通勤列車が遅延してたりして、あたふたすることってありますよね？&lt;/p&gt;
&lt;p&gt;そんなときに、勤務先などにサクッとメールを送れるオレオレツールを作ってみました。&lt;/p&gt;
&lt;h2 id=&#34;node-redで簡単に作ってみる&#34;&gt;Node-REDで簡単に作ってみる&lt;/h2&gt;
&lt;p&gt;「ツールを作る」と聞くと、なんだか難しそうな雰囲気がしますよね？&lt;/p&gt;
&lt;p&gt;でも、&lt;strong&gt;Node-RED&lt;/strong&gt;を使うとちょっとのコーディングで簡単にツールが作れてしまいます！&lt;a href=&#34;https://dotstud.io/blog/nefry-servo-handson-takudooon/#node-red-mqtt%E3%81%A7%E3%82%B5%E3%83%BC%E3%83%9C%E3%83%A2%E3%83%BC%E3%82%BF%E3%82%92%E9%81%A0%E9%9A%94%E5%88%B6%E5%BE%A1&#34;&gt;たくろーどんさんの記事&lt;/a&gt;でもNode-REDが使われていましたが、&lt;strong&gt;実行したい処理をフローチャートのように、ノードとノードをつなぐことによって設計できるツール&lt;/strong&gt;になっています。&lt;/p&gt;
&lt;p&gt;Node-REDはその名の通り、&lt;strong&gt;Node.js&lt;/strong&gt;上で動作するツールです。普段使っているPCなどNode.jsが動作している環境であればNode−REDを動かすことができますが、今回は外出先からでもアクセスできるツールを簡単に作成したかったので、&lt;u&gt;Node-REDをサービスとして提供している&lt;strong&gt;enebular&lt;/strong&gt;&lt;/u&gt;を使ってみようと思います。&lt;/p&gt;
&lt;h2 id=&#34;node-redでツールを作ってみる&#34;&gt;Node-REDでツールを作ってみる&lt;/h2&gt;
&lt;p&gt;はじめに、今回作ったツールがこちら。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;このツールの機能は、以下の3つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外出先からでもアクセスできるWebページを作る（念の為、BASIC認証を設けておく）&lt;/li&gt;
&lt;li&gt;そのページ上で勤怠メールの文言をプリセットから選べるようにして、特定の宛先にメール送信できるようにする&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「本当に電車遅延が原因で遅刻するの？」&lt;/strong&gt;と言われないように、京急の遅延証明書ページで発行されている遅延証明書を表示して、メールに遅延証明書へのリンクを貼れるようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遅延状況は例によって&lt;strong&gt;京浜急行&lt;/strong&gt;のWebページ上の情報を取得しています。また、不特定多数の人が勝手にこのツールを使ってしまわないように、BASIC認証を設けてアクセスを制限しています。&lt;/p&gt;
&lt;h2 id=&#34;node-redでwebページを作る&#34;&gt;Node-REDでWebページを作る&lt;/h2&gt;
&lt;p&gt;Node-REDで用意されているノードのなかに、HTTPリクエストを受ける&lt;strong&gt;&lt;code&gt;HTTP In&lt;/code&gt;&lt;/strong&gt;ノードと、それに対するレスポンスを返す&lt;strong&gt;&lt;code&gt;HTTP Response&lt;/code&gt;&lt;/strong&gt;ノードがあります。&lt;/p&gt;
&lt;p&gt;この&lt;code&gt;HTTP In&lt;/code&gt;ノードを作るとHTTPのエンドポイントができます。このノードと&lt;code&gt;HTTP Response&lt;/code&gt;ノードを下の絵のようにつなぎ、レスポンスとなるソースを返すようにすれば、Webページができます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;上の例では、静的な&lt;code&gt;Hello, world!&lt;/code&gt;という文字列を返すだけですが、&lt;strong&gt;&lt;code&gt;HTTP Response&lt;/code&gt;&lt;/strong&gt;ノードで返す情報を動的に変化させたり、Webページ上で動作させるスクリプトを記述してレスポンスとして返せば、よりリッチなWebページをNode-REDで作成することができます。
&lt;/p&gt;
&lt;p&gt;次にBASIC認証ですが、Node-REDに対して追加でモジュールをインストールすることで、簡単に機能を追加することができます。&lt;/p&gt;
&lt;p&gt;Node-REDの設定メニューから、[Settings] &amp;gt; [Palette] &amp;gt; [Install]と進み、&lt;strong&gt;&lt;code&gt;node-red-contrib-httpauth&lt;/code&gt;&lt;/strong&gt;を探します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;これをインストールすることで、BASIC認証が行えるノードを追加できます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;使い方は至ってシンプルで、先程の&lt;code&gt;HTTP In&lt;/code&gt;ノードの後ろにBASIC認証のノードをつけて、BASIC認証で使うユーザー名とパスワードをノードの設定で指定するだけです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;実際に、この状態でエンドポイントにアクセスすると、確かにBASIC認証がワークしています。&lt;/p&gt;
&lt;h2 id=&#34;勤怠メールを送れるようにする&#34;&gt;勤怠メールを送れるようにする&lt;/h2&gt;
&lt;p&gt;ここまでで、&lt;code&gt;Hello, world!&lt;/code&gt;が表示できるWebページができました。ここからは&lt;u&gt;&lt;code&gt;HTTP Response&lt;/code&gt;ノードで返すHTMLをよしなに編集して、勤怠メールを作成できるようにします。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;具体的には、次のような機能をHTMLやJavaScriptで記述して、それをレスポンスで返すようにしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プルダウンメニューで遅刻する理由を選択できるようにする&lt;/li&gt;
&lt;li&gt;選択した理由に応じて、メールの本文を変更する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mailtoスキーム&lt;/strong&gt;を使って、メーラーを起動してメールを送れるようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遅刻の理由も、必ずしも電車遅延だけではないので、体調不良や保育園関係の理由も選択できるようにしました。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;遅刻の理由を選択すると、メール本文が変わるようになっています。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;勤怠メールを送る&lt;/code&gt;&lt;/strong&gt;を押すとメーラーが起動し、ツールで指定した文言をそのままメールとして送ることができます。&lt;/p&gt;
&lt;h2 id=&#34;遅延証明書情報を取得する&#34;&gt;遅延証明書情報を取得する&lt;/h2&gt;
&lt;p&gt;ツール上で表示する京浜急行の運行情報は、&lt;a href=&#34;https://delay.keikyu.co.jp/delay/&#34;&gt;京急線遅延証明書の発行&lt;/a&gt;のページから取得します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;その日に発行されている遅延証明書のリスト化し、その遅延証明書ページへのリンクをメール本文に貼り付けるか選択できるようになっています。&lt;/p&gt;
&lt;p&gt;ただし、下記のような問題があるため、泥臭いワークアラウンドを入れています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遅延証明書ページへのリンクのアドレスに、mailtoスキームでは扱えない文字が含まれているため、&lt;a href=&#34;https://is.gd/&#34;&gt;外部のURL短縮サービス「is.gd」&lt;/a&gt;を使ってアドレスを短く変換している&lt;/li&gt;
&lt;li&gt;URL短縮のWebAPIを叩こうとするとCORSポリシーに引っかかったため、URL短縮のために同じドメインでエンドポイントを作成し、それ経由でアドレスの変換を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;実際のフローはこちら&#34;&gt;実際のフローはこちら&lt;/h2&gt;
&lt;p&gt;Node-REDで作成したフローを、エクスポートしたものはこちらです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;[{&amp;quot;id&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;tab&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;Flow 1&amp;quot;,&amp;quot;disabled&amp;quot;:false,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;a45bf2b.b54621&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http request&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;遅延証明書ページ取得&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;GET&amp;quot;,&amp;quot;ret&amp;quot;:&amp;quot;txt&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://delay.keikyu.co.jp/delay/&amp;quot;,&amp;quot;tls&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:360,&amp;quot;y&amp;quot;:180,&amp;quot;wires&amp;quot;:[[&amp;quot;89f0f7a0.a8bda8&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;3a7ae4dc.fc9f5c&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;debug&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;active&amp;quot;:true,&amp;quot;tosidebar&amp;quot;:true,&amp;quot;console&amp;quot;:false,&amp;quot;tostatus&amp;quot;:false,&amp;quot;complete&amp;quot;:&amp;quot;delayData&amp;quot;,&amp;quot;x&amp;quot;:600,&amp;quot;y&amp;quot;:220,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;89f0f7a0.a8bda8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;情報をパース&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let table = msg.payload.split(&#39;&amp;lt;tbody&amp;gt;&#39;)[1];\ntable = table.split(&#39;&amp;lt;/tbody&amp;gt;&#39;)[0];\n\nlet rows = table.split(&#39;\\n&#39;).join(&#39;&#39;);\nrows = rows.split(&#39;&amp;lt;tr&amp;gt;&#39;).join(&#39;&#39;).split(&#39;&amp;lt;/tr&amp;gt;&#39;);\n\nlet data = {};\nlet dateOffset = 0;\ndata.date = rows[0 + 3 * dateOffset].split(&#39;&amp;lt;/td&amp;gt;&#39;)[0].replace(&#39;&amp;lt;tr style=\&amp;quot;background-color:#ADD8E6;\&amp;quot;&amp;gt;&#39;,&#39;&#39;).replace(&#39;&amp;lt;td rowspan=3&amp;gt;&#39;,&#39;&#39;).replace(&#39;&amp;lt;br/&amp;gt;&#39;,&#39;&#39;);\n\nlet morningData = rows[0 + 3 * dateOffset].split(&#39;&amp;lt;/td&amp;gt;&#39;).join(&#39;&#39;).split(&#39;&amp;lt;td&amp;gt;&#39;).slice(1);\nlet dayData = rows[1 + 3 * dateOffset].split(&#39;&amp;lt;/td&amp;gt;&#39;).join(&#39;&#39;).split(&#39;&amp;lt;td&amp;gt;&#39;).slice(1);\nlet nightData = rows[2 + 3 * dateOffset].split(&#39;&amp;lt;/td&amp;gt;&#39;).join(&#39;&#39;).split(&#39;&amp;lt;td&amp;gt;&#39;).slice(1);\nlet dataTitles = [&#39;品川～横浜：上り&#39;,&#39;品川～横浜：下り&#39;,&#39;横浜以南：上り&#39;,&#39;横浜以南：下り&#39;,&#39;空港線内：上り&#39;,&#39;空港線内：下り&#39;];\n\ndata.morningTitle = morningData[0];\ndata.dayTitle = dayData[0];\ndata.nightTitle = nightData[0];\n\nmorningData = morningData.slice(1);\ndayData = dayData.slice(1);\nnightData = nightData.slice(1);\n\ndata.morningData = [];\ndata.dayData = [];\ndata.nightData = [];\ndata.allData = [];\n\nfor(let i = 0; i &amp;lt; 6; i++){\n if(morningData[i] !== &#39;-&#39;){\n let detail = morningData[i].split(&#39;&amp;gt;&#39;)[1].split(&#39;&amp;lt;&#39;)[0];\n let link = &#39;https://delay.keikyu.co.jp&#39; + morningData[i].split(&#39;\&amp;quot;&#39;)[1];\n data.morningData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.morningTitle + &#39; - &#39; + dataTitles[i] + &#39; - &#39; + detail, link : link});\n }\n \n if(dayData[i] !== &#39;-&#39;){\n let detail = dayData[i].split(&#39;&amp;gt;&#39;)[1].split(&#39;&amp;lt;&#39;)[0];\n let link = &#39;https://delay.keikyu.co.jp&#39; + dayData[i].split(&#39;\&amp;quot;&#39;)[1];\n data.dayData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.dayTitle + &#39; - &#39; + dataTitles[i] + &#39; - &#39; + detail, link : link});\n }\n \n if(nightData[i] !== &#39;-&#39;){\n let detail = nightData[i].split(&#39;&amp;gt;&#39;)[1].split(&#39;&amp;lt;&#39;)[0];\n let link = &#39;https://delay.keikyu.co.jp&#39; + nightData[i].split(&#39;\&amp;quot;&#39;)[1];\n data.nightData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.nightTitle + &#39; - &#39; + dataTitles[i] + &#39; - &#39; + detail, link : link});\n }\n}\n\nmsg.delayData = data;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:340,&amp;quot;y&amp;quot;:220,&amp;quot;wires&amp;quot;:[[&amp;quot;e0512d8a.0fe7f&amp;quot;,&amp;quot;3a7ae4dc.fc9f5c&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;5c37249e.aecf1c&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http in&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;HTTPリクエスト&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;/&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;upload&amp;quot;:false,&amp;quot;swaggerDoc&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:120,&amp;quot;y&amp;quot;:180,&amp;quot;wires&amp;quot;:[[&amp;quot;b83cd390.27959&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;bbc86a41.f453e8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http response&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;HTTPレスポンス&amp;quot;,&amp;quot;statusCode&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;headers&amp;quot;:{},&amp;quot;x&amp;quot;:610,&amp;quot;y&amp;quot;:180,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;e0512d8a.0fe7f&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;パースした情報を整形&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let delayBody = &#39;&#39;;\n\ndelayBody += &#39;&amp;lt;h1&amp;gt;&#39; + msg.delayData.date + &#39;&amp;lt;/h1&amp;gt;\\n&#39;;\n\ndelayBody += &#39;&amp;lt;h2&amp;gt;&#39; + msg.delayData.morningTitle + &#39;&amp;lt;/h2&amp;gt;\\n&#39;;\ndelayBody += &#39;&amp;lt;ul&amp;gt;&#39;;\n\nif(msg.delayData.morningData.length === 0){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;遅延情報なし&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n}else{\n msg.delayData.morningData.forEach(function(data){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;a href=\&amp;quot;&#39; + data.link + &#39;\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;&#39;;\n delayBody += data.zone + &#39; (&#39; + data.detail + &#39;)&#39;; \n delayBody += &#39;&amp;lt;/a&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n });\n}\n\ndelayBody += &#39;&amp;lt;/ul&amp;gt;&#39;;\ndelayBody += &#39;&amp;lt;h2&amp;gt;&#39; + msg.delayData.dayTitle + &#39;&amp;lt;/h2&amp;gt;\\n&#39;;\ndelayBody += &#39;&amp;lt;ul&amp;gt;&#39;;\n\nif(msg.delayData.dayData.length === 0){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;遅延情報なし&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n}else{\n msg.delayData.dayData.forEach(function(data){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;a href=\&amp;quot;&#39; + data.link + &#39;\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;&#39;;\n delayBody += data.zone + &#39; (&#39; + data.detail + &#39;)&#39;; \n delayBody += &#39;&amp;lt;/a&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n });\n}\n\ndelayBody += &#39;&amp;lt;/ul&amp;gt;&#39;;\ndelayBody += &#39;&amp;lt;h2&amp;gt;&#39; + msg.delayData.nightTitle + &#39;&amp;lt;/h2&amp;gt;\\n&#39;;\ndelayBody += &#39;&amp;lt;ul&amp;gt;&#39;;\n\nif(msg.delayData.nightData.length === 0){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;遅延情報なし&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n}else{\n msg.delayData.nightData.forEach(function(data){\n delayBody += &#39;&amp;lt;li&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;a href=\&amp;quot;&#39; + data.link + &#39;\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;&#39;;\n delayBody += data.zone + &#39; (&#39; + data.detail + &#39;)&#39;; \n delayBody += &#39;&amp;lt;/a&amp;gt;&#39;;\n delayBody += &#39;&amp;lt;/li&amp;gt;&#39;;\n });\n}\n\ndelayBody += &#39;&amp;lt;/ul&amp;gt;&#39;;\nmsg.delayBody = delayBody;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:360,&amp;quot;y&amp;quot;:260,&amp;quot;wires&amp;quot;:[[&amp;quot;5f89b7b8.249788&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;6e8b7f2.3c2238&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;ページの要素を結合&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let bodyHeader = &#39;&amp;lt;html&amp;gt;&amp;lt;header&amp;gt;&amp;lt;meta name=\&amp;quot;viewport\&amp;quot; content=\&amp;quot;width=device-width, initial-scale=1, shrink-to-fit=no\&amp;quot;&amp;gt;&amp;lt;link rel=\&amp;quot;stylesheet\&amp;quot; href=\&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\&amp;quot; integrity=\&amp;quot;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS\&amp;quot; crossorigin=\&amp;quot;anonymous\&amp;quot;&amp;gt;&amp;lt;/header&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div class=\&amp;quot;container\&amp;quot;&amp;gt;&amp;lt;div class=\&amp;quot;row\&amp;quot;&amp;gt;&amp;lt;div class=\&amp;quot;col-sm my-2\&amp;quot;&amp;gt;&#39;;\nlet bootstrap = &#39;&amp;lt;script src=\&amp;quot;https://code.jquery.com/jquery-3.3.1.slim.min.js\&amp;quot; integrity=\&amp;quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\&amp;quot; crossorigin=\&amp;quot;anonymous\&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\&amp;quot; integrity=\&amp;quot;sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut\&amp;quot; crossorigin=\&amp;quot;anonymous\&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\&amp;quot; integrity=\&amp;quot;sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k\&amp;quot; crossorigin=\&amp;quot;anonymous\&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;;\nlet bodyFooter = &#39;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;;\n\nmsg.payload = bodyHeader + msg.delayBody + msg.mailBody + msg.scriptBody + bootstrap + bodyFooter;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:360,&amp;quot;y&amp;quot;:380,&amp;quot;wires&amp;quot;:[[&amp;quot;bbc86a41.f453e8&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;5f89b7b8.249788&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;メール送信部分&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let mailBody = &#39;&#39;;\n\nmailBody += &#39;&amp;lt;h1&amp;gt;勤怠メールを作成&amp;lt;/h1&amp;gt;&#39;;\n\nmailBody += &#39;&amp;lt;label for=\&amp;quot;reason\&amp;quot;&amp;gt;遅延理由を選択する&amp;lt;/label&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;select class=\&amp;quot;custom-select\&amp;quot; name=\&amp;quot;reason\&amp;quot; id=\&amp;quot;reason\&amp;quot; onchange=\&amp;quot;updateMessage()\&amp;quot;&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;電車遅延のため\&amp;quot; selected&amp;gt;電車遅延&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;腹痛のため\&amp;quot;&amp;gt;体調不良（腹痛）&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;頭痛のため\&amp;quot;&amp;gt;体調不良（頭痛）&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;体調不良のため\&amp;quot;&amp;gt;体調不良（理由なし）&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;保育園登園に時間がかかったため\&amp;quot;&amp;gt;保育園関係&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;家事都合のため\&amp;quot;&amp;gt;家事都合&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;私用のため\&amp;quot;&amp;gt;私用&amp;lt;/option&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;/select&amp;gt;&#39;;\n\nmailBody += &#39;&amp;lt;label for=\&amp;quot;chien\&amp;quot;&amp;gt;遅延証明書へのリンクを貼る&amp;lt;/label&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;select class=\&amp;quot;custom-select\&amp;quot; name=\&amp;quot;chien\&amp;quot; id=\&amp;quot;chien\&amp;quot; onchange=\&amp;quot;updateMessage()\&amp;quot;&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;option value=\&amp;quot;\&amp;quot; selected&amp;gt;なし&amp;lt;/option&amp;gt;&#39;;\n\nmsg.delayData.allData.forEach(function(value){\n mailBody += &#39;&amp;lt;option value=\&amp;quot;&#39; + value.link + &#39;\&amp;quot;&amp;gt;&#39; + value.title + &#39;&amp;lt;/option&amp;gt;&#39;;\n});\n\nmailBody += &#39;&amp;lt;/select&amp;gt;&#39;;\n\nmailBody += &#39;&amp;lt;label for=\&amp;quot;message\&amp;quot;&amp;gt;メール本文&amp;lt;/label&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;textarea class=\&amp;quot;form-control\&amp;quot; id=\&amp;quot;message\&amp;quot; rows=\&amp;quot;5\&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;&#39;;\nmailBody += &#39;&amp;lt;br&amp;gt;&amp;lt;button type=\&amp;quot;button\&amp;quot; class=\&amp;quot;btn btn-primary btn-block\&amp;quot; onclick=\&amp;quot;sendMessage()\&amp;quot;&amp;gt;勤怠メールを送る&amp;lt;/button&amp;gt;&#39;;\n\nmsg.mailBody = mailBody;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:340,&amp;quot;y&amp;quot;:300,&amp;quot;wires&amp;quot;:[[&amp;quot;a41aa11e.86e04&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;a41aa11e.86e04&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;スクリプト部分&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;let name = global.get(&#39;name&#39;);\nlet address = global.get(&#39;address&#39;);\n\nlet scriptBody = &#39;&amp;lt;script&amp;gt;&#39;;\nscriptBody += &#39;let reasonSelect = document.getElementById(\&amp;quot;reason\&amp;quot;); let chienSelect = document.getElementById(\&amp;quot;chien\&amp;quot;); let textArea = document.getElementById(\&amp;quot;message\&amp;quot;); function updateMessage() { let reasonIndex = reasonSelect.selectedIndex; let chienIndex = chienSelect.selectedIndex; let message = \&amp;quot;\&amp;quot;; message += \&amp;quot;&#39; + name + &#39;です。\\\\n\\\\n\&amp;quot;; message += \&amp;quot;大変申し訳ありませんが、\&amp;quot;; message += reasonSelect.options[reasonIndex].value; message += \&amp;quot;出社が遅れます。\\\\n\&amp;quot;; message += \&amp;quot;何卒宜しくお願いします。\&amp;quot;; if (!chienSelect.options[chienIndex].value) { textArea.value = message; return; } let request = new XMLHttpRequest(); request.onload = function () { message += \&amp;quot;\\\\n\\\\n遅延証明書はこちらです。\\\\n\&amp;quot;; message += request.responseText; textArea.value = message; }; request.open(\&amp;quot;GET\&amp;quot;, \&amp;quot;./encode/\&amp;quot; + encodeURIComponent(chienSelect.options[chienIndex].value.trim()), false, \&amp;quot;USER_NAME\&amp;quot;, \&amp;quot;PASSWORD\&amp;quot;); request.send(); } function sendMessage() { window.open(\&amp;quot;mailto:&#39; + address + &#39;?body=\&amp;quot; + encodeURIComponent(textArea.value)); } updateMessage();&#39;;\nscriptBody += &#39;&amp;lt;/script&amp;gt;&#39;;\n\nmsg.scriptBody = scriptBody;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:340,&amp;quot;y&amp;quot;:340,&amp;quot;wires&amp;quot;:[[&amp;quot;6e8b7f2.3c2238&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;867b9e9b.bb5b8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http in&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;HTTPリクエスト&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;/encode/:url&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;get&amp;quot;,&amp;quot;upload&amp;quot;:false,&amp;quot;swaggerDoc&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:120,&amp;quot;y&amp;quot;:480,&amp;quot;wires&amp;quot;:[[&amp;quot;eb246d76.1afeb&amp;quot;,&amp;quot;fdb9da8c.f0ebf8&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;55421d41.0dc1b4&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http response&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;HTTPレスポンス&amp;quot;,&amp;quot;statusCode&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;headers&amp;quot;:{},&amp;quot;x&amp;quot;:610,&amp;quot;y&amp;quot;:480,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;303db0f1.b72bf&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http request&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;APIを叩く&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;GET&amp;quot;,&amp;quot;ret&amp;quot;:&amp;quot;txt&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;tls&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:330,&amp;quot;y&amp;quot;:520,&amp;quot;wires&amp;quot;:[[&amp;quot;55421d41.0dc1b4&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;808e61ff.edc38&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;URL変換&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;msg.url = &#39;https://is.gd/create.php?format=simple&amp;amp;url=&#39; + encodeURIComponent(msg.req.params.url);\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:320,&amp;quot;y&amp;quot;:480,&amp;quot;wires&amp;quot;:[[&amp;quot;303db0f1.b72bf&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;eb246d76.1afeb&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;debug&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;active&amp;quot;:true,&amp;quot;tosidebar&amp;quot;:true,&amp;quot;console&amp;quot;:false,&amp;quot;tostatus&amp;quot;:false,&amp;quot;complete&amp;quot;:&amp;quot;true&amp;quot;,&amp;quot;x&amp;quot;:310,&amp;quot;y&amp;quot;:560,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;b475750f.2c9468&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;ページへのアクセス&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:130,&amp;quot;y&amp;quot;:140,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;b61cb0ab.67446&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;URL短縮&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:100,&amp;quot;y&amp;quot;:440,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;892cd0e6.0c4ae&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;定数の宣言&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:100,&amp;quot;y&amp;quot;:40,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;92da441f.e87958&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;inject&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;起動時&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payload&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payloadType&amp;quot;:&amp;quot;date&amp;quot;,&amp;quot;repeat&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;crontab&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;once&amp;quot;:true,&amp;quot;onceDelay&amp;quot;:0.1,&amp;quot;x&amp;quot;:100,&amp;quot;y&amp;quot;:80,&amp;quot;wires&amp;quot;:[[&amp;quot;7e9e582f.c0d258&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;7e9e582f.c0d258&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;差出人、宛先の設定&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;global.set(&#39;name&#39;, &#39;ポキオ&#39;);\nglobal.set(&#39;address&#39;, &#39;example@example.com&#39;);\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:360,&amp;quot;y&amp;quot;:80,&amp;quot;wires&amp;quot;:[[]]},{&amp;quot;id&amp;quot;:&amp;quot;b83cd390.27959&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;node-red-contrib-httpauth&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;BASIC認証&amp;quot;,&amp;quot;file&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;cred&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;authType&amp;quot;:&amp;quot;Basic&amp;quot;,&amp;quot;realm&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;username&amp;quot;:&amp;quot;USER_NAME&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;PASSWORD&amp;quot;,&amp;quot;hashed&amp;quot;:false,&amp;quot;x&amp;quot;:110,&amp;quot;y&amp;quot;:220,&amp;quot;wires&amp;quot;:[[&amp;quot;a45bf2b.b54621&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;fdb9da8c.f0ebf8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;node-red-contrib-httpauth&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;7cbe5b40.a0b054&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;BASIC認証&amp;quot;,&amp;quot;file&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;cred&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;authType&amp;quot;:&amp;quot;Basic&amp;quot;,&amp;quot;realm&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;username&amp;quot;:&amp;quot;USER_NAME&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;PASSWORD&amp;quot;,&amp;quot;hashed&amp;quot;:false,&amp;quot;x&amp;quot;:110,&amp;quot;y&amp;quot;:520,&amp;quot;wires&amp;quot;:[[&amp;quot;808e61ff.edc38&amp;quot;]]}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;フローエディターは、こんな感じになっています。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/243/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;herokuにデプロイして本格運用&#34;&gt;Herokuにデプロイして本格運用&lt;/h2&gt;
&lt;p&gt;今回は、enebularが提供してるNode-REDの仕組みを利用して、フローを設計してみました。&lt;/p&gt;
&lt;p&gt;フロー設計時にはテンポラリのエンドポイントURLが付与されるので、作りながら実際のWebページの挙動を試すことができます。&lt;/p&gt;
&lt;p&gt;また、実際に本格運用しようと思ったときも、enebularからHerokuやAWS Lambdaにフローをデプロイ可能なので、簡単に日々の業務改善ツールとして導入可能です。&lt;u&gt;enebularも無料で始められますし、HerokuやAWSも無料枠で運用することが可能です。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;サクッと業務改善ツールが作れる環境が揃っているので、みなさんもぜひ作ってみてください！&lt;/p&gt;</description></item><item><title>NefryBTからGoogleDriveにデータをアップロードする方法</title><link>https://dotstud.io/blog/update-nefrybt-to-googledrive/</link><pubDate>Thu, 31 Jan 2019 03:21:47 +0900</pubDate><guid>https://dotstud.io/blog/update-nefrybt-to-googledrive/</guid><description>
&lt;p&gt;こんにちは、NefryBTきっかけでIoTの世界に入った&lt;a href=&#34;https://dotstud.io/members/kuroda&#34;&gt;黒田&lt;/a&gt;と言います。Webとどう接していけばいいのか分からないときにNefryBTと出会い、意外と難しくない(何とかなる)ことを知りました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/members/wami&#34;&gt;わみさん&lt;/a&gt;、ありがとうございます。&lt;/p&gt;
&lt;p&gt;今回は、NefryBTからGoogleDriveにデータをアップロード出来たので紹介したいと思います。&lt;/p&gt;
&lt;p&gt;おそらく&lt;strong&gt;ESP32マイコン搭載モジュール&lt;/strong&gt;であれば、同じ考えで出来ると思います。&lt;/p&gt;
&lt;h2 id=&#34;アップロードまでの手順&#34;&gt;アップロードまでの手順&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/li&gt;
&lt;li&gt;リフレッシュトークンから認証用のアクセストークンを取得する&lt;/li&gt;
&lt;li&gt;http POSTリクエストでデータをアップロードする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;はい、とてもシンプルです。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;httpを全く分からない私としてはここまでたどり着くまでかなり苦労しました・・・先人の方々が様々な実績を残してくれているのを本当に感謝しています。) &lt;/u&gt;&lt;/p&gt;
&lt;p&gt;もう少し詳しく説明します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/drive/api/v3/about-sdk&#34;&gt;Google Drive REST APIのサイト&lt;/a&gt;を読みますと、まずGoogleDriveへアクセスするには認証用のアクセストークンが必要なこと、データをアップロードするときの&lt;a href=&#34;https://developers.google.com/drive/api/v3/multipart-upload&#34;&gt;POSTリクエストの書き方&lt;/a&gt;が決まっていることが分かります。&lt;/p&gt;
&lt;p&gt;そのためアクセストークンで認証を行いつつPOSTリクエストを投げれば、NefryBTからでもデータをアップロード出来ます。&lt;/p&gt;
&lt;p&gt;ここで一つ&lt;strong&gt;トラップ&lt;/strong&gt;があります。
アクセストークンの有効期限は3600秒(1時間)です。当初これを知らなかったので、&lt;u&gt;時間が経つとなぜか認証エラーになる問題&lt;/u&gt;に悩まされました。&lt;/p&gt;
&lt;p&gt;回避策としてリフレッシュトークンからアクセストークンを取得するようにします。すると、アクセストークンが新しくなるので、認証もばっちり通ります。
つまり、&lt;u&gt;アクセストークンよりも再発行用のリフレッシュトークンが欲しい&lt;/u&gt;のです。&lt;/p&gt;
&lt;p&gt;ではでは、具体的な手順を説明していきたいと思います。&lt;/p&gt;
&lt;h3 id=&#34;手順1-リフレッシュトークンなど必要な情報を取得する-最初の一度だけ&#34;&gt;[手順1] リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/h3&gt;
&lt;p&gt;今回はNode.jsで取得します。&lt;/p&gt;
&lt;p&gt;公式サイトの&lt;a href=&#34;https://developers.google.com/drive/api/v3/quickstart/nodejs&#34;&gt;Node.js Quickstart&lt;/a&gt;に従って進めていきます。&lt;/p&gt;
&lt;p&gt;公式サイトにある「ENABLE THE DRIVE API」を押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/0ba2b731-7e29-2db2-7591-6ae56f1a7950.png&#34; alt=&#34;OAuth0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;するとOAuth2.0クライアントIDを作ってくれます。
続けて「DOWNLOAD CLIENT CONFIGURATION」を押してcredentials.jsonを取得します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/d4efa193-e36c-2e83-81f5-590cf105894a.png&#34; alt=&#34;OAuth1.PNG&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(補足)
例えばcredentials.jsonを削除してしまって、もう一度取得したい場合・・・
Google Cloud PlatformのAPI認証情報からダウンロードできます。&lt;/p&gt;
&lt;p&gt;左上のメニューを押して「APIとサービス」を押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/b26bff46-0dea-afba-38cd-51cb6ba8eb68.png&#34; alt=&#34;OAuth2-1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;認証情報の中に先ほど作成したクライアントIDがありますので、ダウンロードします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/901be3e5-b947-c290-e641-8db7dd075dcf.png&#34; alt=&#34;OAuth2-2.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;※ファイル名は「client&lt;em&gt;secret&lt;/em&gt;***.json」となっていますので「credentials.json」に変更します。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;次にNode.jsでアクセストークンなどの情報を取得します。(Node.jsやnpmが動く環境は用意されているものとします。)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセストークンを取得するフォルダを用意して以下のモジュールをインストールします。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;npm install googleapis@27 --save
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;credentials.jsonも同じフォルダに移動させます。&lt;/li&gt;
&lt;li&gt;index.jsを作成します。公式サイトのままではスコープがReadOnlyになっているのでアップロードできるスコープに変更します。それ以外は全く同じです。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[変更前]
const SCOPES = [&#39;https://www.googleapis.com/auth/drive.metadata.readonly&#39;];
[変更後]
const SCOPES = [&#39;https://www.googleapis.com/auth/drive&#39;];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;スコープについて詳しくは&lt;a href=&#34;https://developers.google.com/drive/api/v2/about-auth&#34;&gt;About Authorization&lt;/a&gt;を参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;準備は整ったのでNode.jsを実行します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;１. credentials.json、index.jsなど一式入っているフォルダです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/52fdf814-f643-1754-9a6c-2a6d9e3fe8bd.png&#34; alt=&#34;AccessToken_0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;２. nodeを実行します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/1ce7b76c-988e-fd6f-c863-eef96b1fa4ac.png&#34; alt=&#34;AccessToken_1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;３. URLが表示されるのでアクセスします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/64852163-ae0f-6156-6d7d-fac9e90c7a27.png&#34; alt=&#34;AccessToken_2.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;４. 紐づけるGoogleアカウントを選択し、GoogleDriveへのアクセスを許可します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/dac52655-b356-073b-96bf-678c073897c1.png&#34; alt=&#34;AccessToken_3.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/55cd28a0-da9b-e5ee-2b91-095030c96f37.png&#34; alt=&#34;AccessToken_4.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;５. 最後に表示されるコードを上記3.の続きに貼り付けます。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/3fd64238-c27d-6412-23f9-d9754bec9ff9.png&#34; alt=&#34;AccessToken_5.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/90f1683d-0731-25e9-e376-cdbb11156e2b.png&#34; alt=&#34;AccessToken_6.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;６.無事token.jsonを取得できました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/7aa8a2bb-b2d0-f5d0-787c-6f142da997a8.png&#34; alt=&#34;AccessToken_7.PNG&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;手順2-リフレッシュトークンから認証用のアクセストークンを取得する&#34;&gt;[手順2] リフレッシュトークンから認証用のアクセストークンを取得する&lt;/h3&gt;
&lt;p&gt;アップロードに必要な情報は揃ったので、あとはNefryBTだけ触っていきます。&lt;/p&gt;
&lt;p&gt;リフレッシュトークンからアクセストークンを取得するhttp POSTリクエストは次の通りとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ヘッダー]
POST /oauth2/v4/token HTTP/1.1
Host: www.googleapis.com:443
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: [POSTするデータの長さ]
[POSTするデータ]
refresh_token=[リフレッシュトークン]&amp;amp;client_id=[クライアントID]&amp;amp;client_secret=[クライアントシークレット]&amp;amp;grant_type=refresh_token
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;クライアントIDとクライアントシークレットは「credentials.json」に書いてあります。もしくはGoogle Cloud PlatformのAPIの認証情報でも確認できます。&lt;/li&gt;
&lt;li&gt;リフレッシュトークンは「token.json」に書いてあります。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;POSTリクエストを投げるとレスポンスがjson形式で返ってきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;access_token&amp;quot;: &amp;quot;***&amp;quot;,
&amp;quot;expires_in&amp;quot;: 3600,
&amp;quot;scope&amp;quot;: &amp;quot;https://www.googleapis.com/auth/drive&amp;quot;,
&amp;quot;token_type&amp;quot;: &amp;quot;Bearer&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;access_token:***が取得したいアクセストークンになります。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上記の内容をNefryBTで書くと次のようになります。&lt;/p&gt;
&lt;p&gt;※&lt;a href=&#34;https://github.com/NearMugi/NefrySample/tree/master/GoogleAPI/%23createLibrary/googleAPI/PostDrive&#34;&gt;プログラムソース&lt;/a&gt;のうち主要な部分を抜粋しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;リフレッシュトークン・クライアントID・クライアントシークレットは個人情報なので、直接プログラムソースに記載するのではなくNefryBTのDataStoreに登録します。&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POSTするデータを設定します。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; String postData = &amp;quot;&amp;quot;;
postData += &amp;quot;refresh_token=&amp;quot; + refresh_token;
postData += &amp;quot;&amp;amp;client_id=&amp;quot; + client_id;
postData += &amp;quot;&amp;amp;client_secret=&amp;quot; + client_secret;
postData += &amp;quot;&amp;amp;grant_type=&amp;quot; + String(&amp;quot;refresh_token&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダーを設定します。
データの長さはPOSTするデータ(postData)から算出します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; String postHeader = &amp;quot;&amp;quot;;
postHeader += (&amp;quot;POST &amp;quot; + token_uri + &amp;quot; HTTP/1.1\r\n&amp;quot;);
postHeader += (&amp;quot;Host: &amp;quot; + String(host) + &amp;quot;:&amp;quot; + String(httpsPort) + &amp;quot;\r\n&amp;quot;);
postHeader += (&amp;quot;Connection: close\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Type: application/x-www-form-urlencoded\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Length: &amp;quot;);
postHeader += (postData.length());
postHeader += (&amp;quot;\r\n\r\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;POSTリクエストを投げてレスポンスを取得します。更にレスポンスからアクセストークンを取得します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; String result = postRequest(host, postHeader, postData);
//取得したjsonデータからAccessTokenを取得する
const int BUFFER_SIZE = JSON_OBJECT_SIZE(4) + JSON_ARRAY_SIZE(1);
StaticJsonBuffer&amp;lt;BUFFER_SIZE&amp;gt; jsonBuffer;
char json[result.length() + 1];
result.toCharArray(json, sizeof(json));
JsonObject&amp;amp; root = jsonBuffer.parseObject(json);
const char* tmp = root[&amp;quot;access_token&amp;quot;];
token = tmp;
return token;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;POSTリクエストを行っているソース(&lt;code&gt;postRequest&lt;/code&gt;)です。正常に処理が終わればレスポンスを返します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; String postRequest(const char* server, String header, String data) {
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
Serial.print(&amp;quot;Connecting to: &amp;quot;); Serial.println(server);
if (!client.connect(server, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return result;
}
Serial.println(&amp;quot;certificate matches&amp;quot;);
Serial.print(&amp;quot;post: &amp;quot;); Serial.println(header + data);
client.print(header + data);
Serial.println(&amp;quot;Receiving response&amp;quot;);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil(&#39;\r&#39;);
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
}
String line = client.readStringUntil(&#39;\r&#39;);
Serial.println(line);
result += line;
}
Serial.println(&amp;quot;closing connection&amp;quot;);
return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;だいたいこんな感じで無事アクセストークンを取得できました。&lt;/p&gt;
&lt;h3 id=&#34;手順3-http-postリクエストでデータをアップロードする&#34;&gt;[手順3] http POSTリクエストでデータをアップロードする&lt;/h3&gt;
&lt;p&gt;いよいよデータをアップロードしてみます。今回はテキストファイルとJpegファイルのアップロード方法を紹介します。
公式サイトの&lt;a href=&#34;https://developers.google.com/drive/api/v3/manage-uploads&#34;&gt;Uploading Files&lt;/a&gt;によりますと、アップロード方法は3パターンあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple upload&lt;/li&gt;
&lt;li&gt;Multipart upload&lt;/li&gt;
&lt;li&gt;Resumable upload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;Simple upload&amp;rdquo;の場合、アップロードしたファイル名は全て&amp;rdquo;untitled&amp;rdquo;となってしまい、具合がよろしくありません。
&amp;ldquo;Multipart upload&amp;rdquo;の場合、ファイルに様々な設定を付加できます。今回はファイル名・親フォルダの指定・コメントを設定しました。
(&amp;ldquo;Resumable upload&amp;rdquo;はどんなものか調べていません・・・)&lt;/p&gt;
&lt;p&gt;Multipart uploadのPOSTリクエストは次の通りです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart HTTP/1.1
Authorization: Bearer [YOUR_AUTH_TOKEN]
Content-Type: multipart/related; boundary=foo_bar_baz
Content-Length: [NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]
--foo_bar_baz
Content-Type: application/json; charset=UTF-8
{
&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;
}
--foo_bar_baz
Content-Type: image/jpeg
[JPEG_DATA]
--foo_bar_baz--
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[YOUR_AUTH_TOKEN]はアクセストークンを設定します。&lt;/li&gt;
&lt;li&gt;[NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]は &lt;strong&gt;ヘッダーから最後のデータまですべてのサイズ&lt;/strong&gt; となります。つまり最初のPOSTから最後の&amp;ndash;foo_bar_baz&amp;ndash;まで全てのサイズを設定します。これを間違えると正しくPOSTリクエストを投げることが出来ません。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;&lt;/code&gt; の部分がアップロードするファイルの設定を記載する部分となります。
何を設定できるかは&lt;a href=&#34;https://developers.google.com/drive/api/v3/reference/files&#34;&gt;公式ページの&amp;rdquo;Files&amp;rdquo;&lt;/a&gt;を参照ください。&lt;/li&gt;
&lt;li&gt;その下の&lt;code&gt;Content-Type: image/jpeg&lt;/code&gt; がアップロードするデータの形式となり、その次にデータの中身を記述していきます。&lt;/li&gt;
&lt;li&gt;最後に&lt;code&gt;--foo_bar_baz--&lt;/code&gt; で閉めます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まとめますと、プログラムを書くとき毎回設定しなければならないのは次の4つです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセストークン&lt;/li&gt;
&lt;li&gt;POSTリクエスト全体のサイズ&lt;/li&gt;
&lt;li&gt;ファイルの設定(ファイル名・親フォルダ・コメント)&lt;/li&gt;
&lt;li&gt;ファイルの中身&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;テキストファイルをアップロードする&#34;&gt;テキストファイルをアップロードする&lt;/h2&gt;
&lt;p&gt;上記の仕様を踏まえてテキストファイルをアップロードする例を挙げます。この次に紹介するJpegファイルのアップロードと比べるとシンプルで分かりやすいと思います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;POSTリクエストのファイルの指定周り(&lt;code&gt;--foo_bar_baz&lt;/code&gt;部分)を設定します。&lt;/li&gt;
&lt;li&gt;上記1.のあとPOSTリクエスト全体のサイズが分かるのでヘッダー(&lt;code&gt;POST https://&lt;/code&gt;部分)を設定します。&lt;/li&gt;
&lt;li&gt;上記1.と2.をPOSTします。&lt;/li&gt;
&lt;li&gt;データの中身をPOSTします。&lt;/li&gt;
&lt;li&gt;最後の&amp;rsquo;&amp;ndash;foo_bar_baz&amp;ndash;&amp;lsquo;をPOSTします。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt; void postDrive_Text(String _fileName, String _textData, String _comment) {
uint8_t DataSize = _textData.length();
uint8_t postData[DataSize];
for (int i = 0; i &amp;lt; DataSize; i++) {
postData[i] = (uint8_t)_textData[i];
}
1. POSTリクエストのファイルの指定周りを設定
String start_request = getStartRequest_Text(_fileName, _comment);
2. ヘッダーを設定
uint16_t full_length;
full_length = start_request.length() + DataSize + end_request.length();
String postHeader = getPostHeader(full_length);
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
if (!client.connect(host, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return ;
}
3. 1.と2.をPOST
client.print(postHeader + start_request);
4. データの中身をPOST
client.write(&amp;amp;postData[0] , DataSize);
5. --foo_bar_baz--をPOST
client.println(end_request);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil(&#39;\r&#39;);
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
} else {
Serial.println(F(&amp;quot;[WARNING] Response Data is Nothing&amp;quot;));
}
String line = client.readStringUntil(&#39;\r&#39;);
Serial.println(line);
result += line;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;実際にテキストファイルをアップロードしている様子&#34;&gt;実際にテキストファイルをアップロードしている様子&lt;/h3&gt;
&lt;p&gt;１. アップロード先のフォルダを作成しておきます。親フォルダIDは「&lt;code&gt;https://drive.google.com/drive/folders/***&lt;/code&gt;」の***の部分です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/c32ed96f-9dc4-59cb-0eef-c1091b088397.png&#34; alt=&#34;GoogleDrive_Text_0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;２. NefryBTのセットアップが完了するのを待ちます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/699a3064-ec88-d560-2429-f5cab310ce9b.jpeg&#34; alt=&#34;DSC_0003.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/3b5bc537-b82a-eb2e-a751-077817386f7e.jpeg&#34; alt=&#34;DSC_0005.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;３. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/cfafe65c-ebb7-d82c-e566-d47436cf7ee9.jpeg&#34; alt=&#34;DSC_0006.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;４. 成功しました！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/97de4845-f602-0aa5-26ac-064cd47609be.jpeg&#34; alt=&#34;DSC_0007.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;５. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/72fae28e-6ac8-4fca-e940-265031c2c8cf.png&#34; alt=&#34;GoogleDrive_Text_1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/5b5cb82b-7dd1-d3e4-bf3b-bb60bfffdb1a.png&#34; alt=&#34;GoogleDrive_Text_2.PNG&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;jpegファイルをアップロードする&#34;&gt;Jpegファイルをアップロードする&lt;/h2&gt;
&lt;p&gt;続いてJpegファイルをアップロードする方法です。&lt;strong&gt;ここからかなり込み入った内容になります。&lt;/strong&gt;
今回JpegファイルにしてアップロードしたものはNefryBTに接続したカメラモジュールで撮った画像となります。そのためカメラモジュールの話とGoogleDriveへアップロードする話が混在しますのでご了承ください・・・&lt;/p&gt;
&lt;h3 id=&#34;カメラモジュールについて&#34;&gt;カメラモジュールについて&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/eeaaa02a-2c36-b131-aa32-eeacef9abb63.jpeg&#34; alt=&#34;ArduCAM.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用したカメラモジュールは&lt;a href=&#34;https://www.switch-science.com/catalog/3780/&#34;&gt;Arducam Miniモジュール(2メガピクセル)&lt;/a&gt;です。ESP32向けのサンプルがあったので動かせるだろうと思って選びました。
(NefryBTのことを考えれば&lt;a href=&#34;https://www.switch-science.com/catalog/1626/&#34;&gt;Groveのカメラ&lt;/a&gt;でも良かったとあとで気づきました・・・)&lt;/p&gt;
&lt;p&gt;初期設定やカメラモジュールからデータを取得するところは&lt;a href=&#34;https://github.com/NearMugi/NefrySample/tree/master/ArduCAM/OV2640&#34;&gt;プログラムソース&lt;/a&gt;を参照ください。&lt;/p&gt;
&lt;p&gt;厄介なのは&lt;strong&gt;取得したデータ全てがJpegデータではない&lt;/strong&gt;ことです。このカメラモジュールの場合、1バイト目に0x00が入っています。これ、要らないデータなのです。きちんとJpegファイルにあたるデータをアップロードしないと正しく表示されません。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.setsuki.com/hsp/ext/jpg.htm&#34;&gt;Jpegファイル&lt;/a&gt;は開始位置(0xFFD8)と終了位置(0xFFD9)が決まっています。この範囲のデータだけをアップロードすればJpegファイルとして正しく表示されます。&lt;/p&gt;
&lt;h3 id=&#34;プログラムのポイント&#34;&gt;プログラムのポイント&lt;/h3&gt;
&lt;p&gt;カメラモジュールの仕様を踏まえてアップロードします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jpegファイルのデータサイズは何十万バイトと膨大なので全て変数に入れて一括でPOSTすることはできません。そのためデータを分割してカメラモジュールから取得、POSTを繰り返します。&lt;/li&gt;
&lt;li&gt;POSTリクエスト全体のサイズとJpegファイルのサイズが異なるので、&lt;strong&gt;POSTリクエスト全体のサイズに足りない分を最後に0x00をPOSTする&lt;/strong&gt;ことで整合性を合わせています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プログラムソースを抜粋します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// ReadSizeはカメラモジュールで取得したデータサイズ
//GoogleDriveへポスト
String start_request = api.getStartRequest_Jpeg(&amp;quot;Capture&amp;quot;, &amp;quot;From ArduCam&amp;quot;);
String end_request = api.getEndRequest();
uint32_t full_length;
full_length = start_request.length() + ReadSize + end_request.length();
String postHeader = api.getPostHeader(full_length);
(中略)
client.print(postHeader + start_request);
//JPEGデータ
static const size_t bufferSize = 2048;
static uint8_t buffer[bufferSize] = {0xFF};
uint32_t index = 0;
uint32_t sizeCnt = 0;
uint8_t now = 0;
uint8_t prev = 0;
myCAM.CS_LOW();
myCAM.set_fifo_burst();
カメラモジュールのデータをPOSTしている部分
bool isHeader = false;
while (ReadSize--) {
prev = now;
now = SPI.transfer(0x00);
//ヘッダーを探す(0xFF,0xD8)
if (!isHeader) {
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD8) {
Serial.println(F(&amp;quot;JPEG First Data is Found&amp;quot;));
buffer[0] = 0xFF;
buffer[1] = 0xD8;
index = 2;
sizeCnt = 2;
isHeader = true;
}
continue;
}
//ヘッダーが見つかったあと
sizeCnt++;
// JPEGファイルの最後を検出したら終了(0xFF,0xD9)
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD9) {
Serial.println(F(&amp;quot;JPEG Last Data is Found&amp;quot;));
buffer[index++] = now;
client.write(&amp;amp;buffer[0], index);
myCAM.CS_HIGH();
break;
}
if (index &amp;lt; bufferSize) {
buffer[index] = now;
index++;
} else {
if (!client.connected()) break;
client.write(&amp;amp;buffer[0], bufferSize);
index = 0;
buffer[index++] = now;
}
}
myCAM.CS_HIGH();
ReadSize += 1;
Serial.print(F(&amp;quot;JPEG Data Size: &amp;quot;)); Serial.println(sizeCnt);
Serial.print(F(&amp;quot;Remaining Data Size: &amp;quot;)); Serial.println(ReadSize);
client.println(end_request);
POSTリクエスト全体のサイズを調整している部分
//バッファーメモリサイズと画像サイズが異なるため、full_lengthに達していない。
//足りない分の帳尻を合わせる
uint8_t tmpbuf[ReadSize] = {0x00};
client.write(&amp;amp;tmpbuf[0], ReadSize);
(以下、省略)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;実際にjpegファイルをアップロードしている様子&#34;&gt;実際にJpegファイルをアップロードしている様子&lt;/h3&gt;
&lt;p&gt;１. アップロード先のフォルダはテキストファイルと同じところにします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/2660eda8-1474-644d-fae2-bba8b87c502d.png&#34; alt=&#34;GoogleDrive_Jpeg_0.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;２. カメラで撮ってみます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/c25e4a34-5b9c-44ff-3f78-b390c2c492de.jpeg&#34; alt=&#34;DSC_0015.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;３. NefryBTのセットアップが完了するのを待ちます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/91963234-adc5-7317-654b-41dbd6b8b9ca.jpeg&#34; alt=&#34;DSC_0010.JPG&#34; /&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/a85255a7-e375-2d75-c7d0-4d126e66b60f.jpeg&#34; alt=&#34;DSC_0012.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;４. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/6e91d9ac-0e56-6df0-062b-2d158fd75b3e.jpeg&#34; alt=&#34;DSC_0013.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;５. 成功しました！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/c7291283-ac2a-feb9-d924-9c23963058b1.jpeg&#34; alt=&#34;DSC_0014.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;６. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/b9ed65c6-185b-a57c-1877-1bb079b2400f.png&#34; alt=&#34;GoogleDrive_Jpeg_1.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/237144/fac4420d-d91a-3849-f71c-b17ab86d842f.png&#34; alt=&#34;GoogleDrive_Jpeg_2.PNG&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考にしたサイト&#34;&gt;参考にしたサイト&lt;/h2&gt;
&lt;p&gt;大変助かりました。&lt;/p&gt;
&lt;p&gt;*&lt;a href=&#34;https://github.com/jalmeroth/ESP8266-OAUTH2/blob/master/ESP8266-OAUTH2/ESP8266-OAUTH2.ino&#34;&gt;jalmeroth/ESP8266-OAUTH2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*&lt;a href=&#34;https://himakan.net/websites/how_to_google_oauth&#34;&gt;Google APIを使用するためにGoogle OAuth認証をしようよ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*&lt;a href=&#34;https://zudoh.com/trouble-shooting/google-oauth-expired&#34;&gt;時間が立つとGoogle APIのOAuth認証に失敗する&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*&lt;a href=&#34;http://indoor.lolipop.jp/IndoorCorgiElec/ESP-SensorCam.php&#34;&gt;ESP-SensorCam&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;NefryBTから直接GoogleDriveにアクセスできたときは感動しました！こんな小さなボードがネットに繋がるなんて！&lt;/p&gt;
&lt;p&gt;またGmailやスプレッドシートなどの他のアプリケーションにもアクセスできると思います。面白い組み合わせがあるかもしれません。&lt;/p&gt;
&lt;p&gt;みなさんのIoTライフの参考になれば幸いです。ではでは。&lt;/p&gt;</description></item><item><title>Let&#39;s 顔面製造！第二弾！ 歌うサンタ顔面ロボットを作ろう</title><link>https://dotstud.io/blog/face-robot-making-basic2/</link><pubDate>Wed, 30 Jan 2019 04:43:15 +0900</pubDate><guid>https://dotstud.io/blog/face-robot-making-basic2/</guid><description>
&lt;p&gt;みなさん、こんにちは！&lt;a href=&#34;https://dotstud.io/members/maruko&#34;&gt;へっぽこまるこ&lt;/a&gt;です！&lt;/p&gt;
&lt;p&gt;今回は、クリスマスをいい感じに盛り上げてくれるサンタ（っぽい）ロボットを
&lt;strong&gt;obnizとgoogle home mini&lt;/strong&gt;でつくってみました！&lt;/p&gt;
&lt;p&gt;少し遅めの（めっちゃ早めの）サンタクロースをご覧あれ〜！&lt;/p&gt;
&lt;p&gt;以前に「&lt;a href=&#34;https://dotstud.io/blog/face-robot-making-basic/&#34;&gt;Let&amp;rsquo;s 顔面製造！ダンボールとサーボモータで喋る顔面ロボットを作ろう&lt;/a&gt;」でつくった顔面ロボット（的なもの）を改造して作ってみます！&lt;/p&gt;
&lt;h2 id=&#34;完成イメージ&#34;&gt;完成イメージ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=zyrQC8Du9b0&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/zyrQC8Du9b0/0.jpg&#34; alt=&#34;画像が表示できません&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;※LEDが結構強めに光っているので閲覧にはご注意ください&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;obnizでgoogle-home-notifierを使ってgoogle home miniから音源を再生します。
google-home-notifierは、&lt;strong&gt;スキル開発なしでgoogle homeにテキストを読ませたり、MP3などの音源が再生できたりするnode.jsのライブラリ&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;再生された曲に連動して下唇に仕込んだサーボモータを動かして、
歌ってる感じにしてみます。&lt;/p&gt;
&lt;h2 id=&#34;つくってみよう&#34;&gt;つくってみよう&lt;/h2&gt;
&lt;p&gt;###
+ obniz
+ sg90（顔面ロボの流用）
+ LED（顔面ロボの流用）
+ 顔デバイス（顔面ロボの流用）
+ ジャンパワイヤー（顔面ロボの流用）
+ 切ないクリスマスソングの音源
+ 白のファー生地や赤いフェルトなど（デバイス装飾用）&lt;/p&gt;
&lt;p&gt;macOS High Sierraの環境で進めます。&lt;/p&gt;
&lt;h3 id=&#34;サンタデバイス準備&#34;&gt;サンタデバイス準備&lt;/h3&gt;
&lt;p&gt;顔面デバイスをデコります。
毛足10cm程度のファー生地を裂いたものと、
赤いフェルトで適当につくった帽子をくっつけます。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/115325/56e1e21b-16cd-4d5e-0bdf-f8b8afdf4dba.jpeg&#34; alt=&#34;IMG_2790.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;サーボモータとLEDをobnizに接続します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/115325/daae1da4-7ee0-dd52-978e-e64c46026a01.png&#34; alt=&#34;obniz_servo_led.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;ライブラリやら準備&#34;&gt;ライブラリやら準備&lt;/h3&gt;
&lt;p&gt;node.jsがインストールされてる前提で進めます。&lt;/p&gt;
&lt;p&gt;ターミナルで以下のコマンドを叩きます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;//ディレクトリ作成&amp;amp;移動
$ mkdir santa
$ cd santa
//google-home-notifierとobnizのライブラリをインストール
$ npm install google-home-notifier
$ npm install obniz
//メインのプログラムファイルを作成
$ touch face.js
//音源格納用ディレクトリを作成
$ mkdir audio　
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;audioフォルダには音源のkurisumasusong.mp3を格納しておきます。&lt;/p&gt;
&lt;h3 id=&#34;音源準備&#34;&gt;音源準備&lt;/h3&gt;
&lt;p&gt;google-home-notifierを使って簡単に曲を再生するには、
クリスマスソングが入ったMP3をネットにアップして、
URLを取得する必要があります。&lt;/p&gt;
&lt;p&gt;今回は、&lt;a href=&#34;https://qiita.com/n0bisuke/items/0c09ae5da43b551e98b1#%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B&#34;&gt;n0bisuk先生のハンズオン&lt;/a&gt;で教えてもらった
ngork+pythonを使った方法でホスティングします。&lt;/p&gt;
&lt;p&gt;santa ディレクトリ配下で作業します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python -m SimpleHTTPServer 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;別タブで以下を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd santa
$ ngrok http 8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行結果です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ngrok by @inconshreveable (Ctrl+C to quit)
Session Status online
Account nougami (Plan: Free)
Version 2.2.8
Region United States (us)
Web Interface http://127.0.0.1:4040
Forwarding http://84019d5b.ngrok.io -&amp;gt; localhost:8080
Forwarding https://84019d5b.ngrok.io -&amp;gt; localhost:8080
Connections ttl opn rt1 rt5 p50 p90
57 0 0.00 0.00 6.51 8.91
HTTP Requests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://84019d5b.ngrok.io/audio/kurisumasusong.mp3&#34;&gt;https://84019d5b.ngrok.io/audio/kurisumasusong.mp3&lt;/a&gt; が音源ファイルのURLになります。&lt;/p&gt;
&lt;h2 id=&#34;へっぽこプログラム&#34;&gt;へっぽこプログラム&lt;/h2&gt;
&lt;p&gt;node.jsでプログラムを書きます。
（async/awaitはまだ勉強中・・・）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript:face.js&#34;&gt;
const googlehome = require(&#39;google-home-notifier&#39;);
const language = &#39;ja&#39;;
const Obniz = require(&amp;quot;obniz&amp;quot;);
const obniz = new Obniz(&amp;quot;××××-××××&amp;quot;);
obniz.onconnect = async function () {
var mouth = obniz.wired(&amp;quot;ServoMotor&amp;quot;, {signal:0, vcc:1, gnd:2});
var leftLed = obniz.wired(&amp;quot;LED&amp;quot;, { anode:3, cathode:4 });
var rigthLed = obniz.wired(&amp;quot;LED&amp;quot;, { anode:5, cathode:6 });
mouthMove = async function (maxDeg, maxDegWait, minDeg, minDegWait) {
await mouth.angle(maxDeg);
await obniz.wait(maxDegWait);
await mouth.angle(minDeg);
await obniz.wait(minDegWait);
}
singMouth = async function () {
//init
await mouthMove(0.0, 1300, 0.0, 0);
//く
await mouthMove(40.0, 400, 0.0, 100);
//り
await mouthMove(40.0, 400, 0.0, 100);
//す
await mouthMove(40.0, 400, 0.0, 100);
//ま
await mouthMove(30.0, 80, 0.0, 100);
//す
await mouthMove(30.0, 80, 0.0, 100);
//きゃ
await mouthMove(50.0, 100, 0.0, 100);
//ろ
await mouthMove(30.0, 100, 0.0, 100);
//る
await mouthMove(30.0, 120, 0.0, 100);
//が
await mouthMove(40.0, 900, 0.0, 500);
//な
await mouthMove(40.0, 400, 0.0, 100);
//が
await mouthMove(40.0, 400, 0.0, 100);
//れ
await mouthMove(40.0, 400, 0.0, 100);
//る
await mouthMove(40.0, 400, 0.0, 100);
//こ
await mouthMove(40.0, 100, 0.0, 100);
//ろ
await mouthMove(40.0, 100, 0.0, 100);
//に
await mouthMove(40.0, 100, 0.0, 100);
//は
await mouthMove(50.0, 1300, 0.0, 500);
//き
await mouthMove(40.0, 100, 0.0, 100);
//い
await mouthMove(40.0, 100, 0.0, 100);
//と
await mouthMove(40.0, 200, 0.0, 100);
//ぼ
await mouthMove(40.0, 100, 0.0, 100);
//く
await mouthMove(40.0, 100, 0.0, 100);
//の
await mouthMove(40.0, 100, 0.0, 100);
//こ
await mouthMove(40.0, 170, 0.0, 100);
//た
await mouthMove(40.0, 170, 0.0, 100);
//え
await mouthMove(40.0, 170, 0.0, 100);
//も
await mouthMove(30.0, 1000, 0.0, 500);
//き
await mouthMove(40.0, 100, 0.0, 100);
//い
await mouthMove(40.0, 100, 0.0, 100);
//と
await mouthMove(40.0, 500, 0.0, 100);
//で
await mouthMove(40.0, 100, 0.0, 100);
//て
await mouthMove(40.0, 100, 0.0, 100);
//い
await mouthMove(40.0, 100, 0.0, 100);
//る
await mouthMove(40.0, 100, 0.0, 100);
//だ
await mouthMove(40.0, 100, 0.0, 100);
//あ
await mouthMove(40.0, 100, 0.0, 100);
//ろ
await mouthMove(40.0, 800, 5.0, 600);
//く
await mouthMove(40.0, 400, 0.0, 100);
//り
await mouthMove(40.0, 400, 0.0, 100);
//す
await mouthMove(40.0, 400, 0.0, 100);
//ま
await mouthMove(30.0, 80, 0.0, 100);
//す
await mouthMove(30.0, 80, 0.0, 100);
//きゃ
await mouthMove(50.0, 100, 0.0, 100);
//ろ
await mouthMove(30.0, 100, 0.0, 100);
//る
await mouthMove(30.0, 120, 0.0, 100);
//が
await mouthMove(40.0, 900, 0.0, 500);
//な
await mouthMove(40.0, 400, 0.0, 100);
//が
await mouthMove(40.0, 400, 0.0, 100);
//れ
await mouthMove(40.0, 400, 0.0, 100);
//る
await mouthMove(40.0, 400, 0.0, 100);
//こ
await mouthMove(40.0, 100, 0.0, 100);
//ろ
await mouthMove(40.0, 100, 0.0, 100);
//に
await mouthMove(40.0, 100, 0.0, 100);
//は
await mouthMove(50.0, 1300, 0.0, 500);
//だ
await mouthMove(40.0, 100, 0.0, 100);
//れ
await mouthMove(40.0, 100, 0.0, 100);
//を
await mouthMove(40.0, 400, 0.0, 100);
//あ
await mouthMove(40.0, 100, 0.0, 100);
//い
await mouthMove(30.0, 100, 0.0, 100);
//し
await mouthMove(30.0, 100, 0.0, 100);
//て
await mouthMove(30.0, 100, 0.0, 100);
//る
await mouthMove(30.0, 100, 0.0, 100);
//の
await mouthMove(40.0, 100, 0.0, 100);
//か
await mouthMove(30.0, 1000, 0.0, 500);
//い
await mouthMove(40.0, 100, 0.0, 100);
//ま
await mouthMove(40.0, 100, 0.0, 100);
//は
await mouthMove(40.0, 500, 0.0, 100);
//み
await mouthMove(40.0, 100, 0.0, 100);
//え
await mouthMove(40.0, 100, 0.0, 100);
//な
await mouthMove(20.0, 100, 0.0, 100);
//く
await mouthMove(20.0, 100, 0.0, 100);
//て
await mouthMove(40.0, 100, 0.0, 100);
//も
await mouthMove(40.0, 100, 0.0, 100);
//お
await mouthMove(50.0, 5000, 50.0, 0);
for (i=49; i&amp;gt;=0; i--){
await mouth.angle(i);
await obniz.wait(80);
}
}
google_home = async function() {
googlehome.device(&#39;Google-Home&#39;, language);
await googlehome.play(&#39;http://×××××.ngrok.io/audio/kurisumasusong.mp3&#39;, function(res) {
console.log(res);
leftLed.on();
rigthLed.on();
singMouth();
});
}
await google_home();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for (i=49; i&amp;gt;=0; i&amp;ndash;){
　await mouth.angle(i);
　await obniz.wait(80);
}
↑はこだわった部分なので、
注目してみてもらえると嬉しいです。&lt;/p&gt;
&lt;h2 id=&#34;実行&#34;&gt;実行&lt;/h2&gt;
&lt;p&gt;サンタデバイスにgoogle home miniをそっと添えて、
以下のコマンドで実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node face.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サンタが歌ってる感じになります。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;哀愁漂うサンタクロースができたのではないでしょうか。&lt;/p&gt;
&lt;p&gt;私にとって、スマートスピーカーは電子部品的存在なので、
今後も色々な作品に仕込んで、へっぽこなモノづくりに一役買ってもらおうと思っています。&lt;/p&gt;
&lt;p&gt;よかったら是非「スマスピ + デバイス」挑戦してみてください！&lt;/p&gt;</description></item><item><title>電池が切れても消えないディスプレイって？電子ペーパーを使ってみた！</title><link>https://dotstud.io/blog/using-e-paper-module/</link><pubDate>Tue, 29 Jan 2019 02:11:45 +0900</pubDate><guid>https://dotstud.io/blog/using-e-paper-module/</guid><description>
&lt;p&gt;こんにちは、わくわくエンジニアの&lt;a href=&#34;https://dotstud.io/members/tomato/&#34;&gt;佐々木さん&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;みなさんは&lt;strong&gt;電子ペーパー&lt;/strong&gt;を知っていますか？&lt;/p&gt;
&lt;p&gt;電子ペーパーはその名の通り、&lt;u&gt;紙のような見た目のディスプレイ&lt;/u&gt;です。低消費電力であることや、最後に表示したものを電源がなくても保持し続けることが特徴として挙げられます。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;身近なものだとAmazonの&lt;a href=&#34;https://www.amazon.co.jp/Kindle-New%E3%83%A2%E3%83%87%E3%83%AB-%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC-Wi-Fi-%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF-%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%9A%E3%83%BC%E3%83%B3%E6%83%85%E5%A0%B1%E3%81%A4%E3%81%8D%E3%83%A2%E3%83%87%E3%83%AB/dp/B0186FESEE/ref=sr_1_1?ie=UTF8&amp;amp;qid=1547970527&amp;amp;sr=8-1&amp;amp;keywords=kindle&#34;&gt;Kindle&lt;/a&gt;で採用されています。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;それでは実際に本題に入っていきましょう！&lt;/p&gt;
&lt;h2 id=&#34;電子ペーパーの仕組み&#34;&gt;電子ペーパーの仕組み&lt;/h2&gt;
&lt;p&gt;今回使用するのは&lt;a href=&#34;https://www.sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-58WG&#34;&gt;2.9inch e-Paper Module&lt;/a&gt;という電子ペーパー。&lt;/p&gt;
&lt;p&gt;電子ペーパーは複数の表示方式がありますが、2.9inch e-Paper Moduleは&lt;strong&gt;電気泳動方式&lt;/strong&gt;というものが採用されているためこちらの説明をしたいと思います。&lt;/p&gt;
&lt;p&gt;電気泳動方式では、ディスプレイの中に&lt;strong&gt;マイクロカプセル&lt;/strong&gt;という&lt;u&gt;色を表現するための透明なカプセル&lt;/u&gt;が隙間なく並んでいます。そのマイクロカプセルの中には色のついた粒子が入っており、かける電圧で粒子を移動させることによって、見える色を変えています。電源がなくなっても粒子は移動しないので、最後に表示したものを保持し続けることができます。&lt;/p&gt;
&lt;p&gt;従来は白黒のディスプレイが主流でしたが、現在では3色のディスプレイも多くなっています。&lt;/p&gt;
&lt;h2 id=&#34;使ったもの&#34;&gt;使ったもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-58WG&#34;&gt;2.9inch e-Paper Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/abfea5c3-70e3-6e80-b108-841ff52824d0.jpeg&#34; alt=&#34;20180810_165537.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;このディスプレイは白黒黄の3色を表現できるディスプレイになっています。この他にも、白黒や白黒赤などを表示することができるディスプレイもあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.switch-science.com/catalog/3646/&#34;&gt;Raspberry Pi Zero WH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/62d5a886-b22e-f1bd-e436-cea221c7c1d8.jpeg&#34; alt=&#34;20190120_192847.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;このRaspberry Pi Zero WHはIoTで使われるボードの１つです。&lt;/p&gt;
&lt;h2 id=&#34;ディスプレイに表示させてみよう&#34;&gt;ディスプレイに表示させてみよう&lt;/h2&gt;
&lt;p&gt;今回は&lt;a href=&#34;https://www.waveshare.com/w/upload/9/98/2.9inch-e-paper-module-user-manual-en.pdf&#34;&gt;2.9inch e-Paper Module User Manual&lt;/a&gt;を参考にして進めていきます。&lt;/p&gt;
&lt;h3 id=&#34;配線&#34;&gt;配線&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;GPIO&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;2.9inch e-Paper Module&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3.3V&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.3V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MOSI&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SCLK&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CLK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CE0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BUSY&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;環境構築&#34;&gt;環境構築&lt;/h3&gt;
&lt;p&gt;以下のコマンドが今回プログラムを実行するのに必要なものをインストールするコマンドになります。&lt;/p&gt;
&lt;p&gt;ターミナルを開いて実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pip
sudo pip install spidev
sudo apt-get install libjpeg-dev
sudo pip install Image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、&lt;strong&gt;&lt;code&gt;/boot/config.txt&lt;/code&gt;&lt;/strong&gt;を編集します。以下のコマンドを実行してください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sudo nano /boot/config.txt&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;すると、nanoエディタが開くので、以下の手順を行なってください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;番下に&lt;strong&gt;&lt;code&gt;dtparam=spi=on&lt;/code&gt;&lt;/strong&gt;を追加&lt;/li&gt;
&lt;li&gt;キーボードの &lt;strong&gt;&lt;code&gt;controlキー&lt;/code&gt;&lt;/strong&gt; と &lt;strong&gt;&lt;code&gt;xキー&lt;/code&gt;&lt;/strong&gt; を同時に押す&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;yキー&lt;/code&gt;&lt;/strong&gt;を押す&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;enterキー&lt;/code&gt;&lt;/strong&gt;を押す&lt;/li&gt;
&lt;li&gt;全て完了したら&lt;strong&gt;&lt;code&gt;reboot&lt;/code&gt;&lt;/strong&gt;コマンドで再起動&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで環境構築は完了です。&lt;/p&gt;
&lt;h3 id=&#34;プログラム&#34;&gt;プログラム&lt;/h3&gt;
&lt;p&gt;デモプログラムが公開されているため、&lt;a href=&#34;https://www.waveshare.com/wiki/File:2.9inch_e-paper_module_b_code.7z&#34;&gt;こちら&lt;/a&gt;からcurrentと書かれているものをダウンロードしてください。&lt;/p&gt;
&lt;p&gt;ダウンロードが完了したら以下のコマンドを実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install p7zip-full
7z x 2.9inch_e-paper_module_b_code.7z
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコマンドで出てきた中の&lt;strong&gt;&lt;code&gt;RaspberryPi/python2&lt;/code&gt;&lt;/strong&gt;を今回は使います。&lt;/p&gt;
&lt;p&gt;ターミナルで&lt;strong&gt;&lt;code&gt;RaspberryPi/python2&lt;/code&gt;&lt;/strong&gt;ディレクトリに移動して&lt;code&gt;python main.py&lt;/code&gt;**を実行すると、デモプログラムが起動します（※何も編集していない状態だとフォントが存在していないためエラーが発生します）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nano main.py&lt;/code&gt;&lt;/strong&gt;でファイルを少し編集します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main.py&lt;/code&gt;には以下のようなプログラムがあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;font24 = ImageFont.truetype(&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;, 24)
font18 = ImageFont.truetype(&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この&lt;strong&gt;&lt;code&gt;&#39;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&#39;&lt;/code&gt;&lt;/strong&gt;という部分を
&lt;strong&gt;&lt;code&gt;&#39;/opt/vc/src/hello_pi/hello_font/Vera.ttf&#39;&lt;/code&gt;&lt;/strong&gt;に変更します。&lt;/p&gt;
&lt;p&gt;もう一度&lt;code&gt;python main.py&lt;/code&gt;を実行すると、画面がピカピカし始め、Hello, worldなどが画像に表示されます。&lt;/p&gt;
&lt;p&gt;では、実際にプログラムを少し変えて見ていきましょう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# -*- coding:utf-8 -*-
import epd2in9b
import time
from PIL import Image,ImageDraw,ImageFont
import traceback
try:
# ディスプレイの初期化処理をしています。
epd = epd2in9b.EPD()
epd.init()
print &amp;quot;clear&amp;quot;
epd.Clear(0xFF)
# ディスプレイを横に使うように設定しています。
HBlackimage = Image.new(&#39;1&#39;, (epd2in9b.EPD_HEIGHT, epd2in9b.EPD_WIDTH), 255) # 298*126
HRedimage = Image.new(&#39;1&#39;, (epd2in9b.EPD_HEIGHT, epd2in9b.EPD_WIDTH), 255) # 298*126
print &amp;quot;Drawing&amp;quot;
drawblack = ImageDraw.Draw(HBlackimage)
drawred = ImageDraw.Draw(HRedimage)
# １つ目の引数でフォント、2つ目の引数でフォントのサイズを指定しています。
font30 = ImageFont.truetype(&#39;/opt/vc/src/hello_pi/hello_font/Vera.ttf&#39;, 30)
# １つ目の引数で座標、２つ目に表示させたい文字列、３つ目には上記のフォントを指定します。
drawblack.text((10, 0), &#39;Hello, World&#39;, font = font30)
# ディスプレイに表示させます。
epd.display(epd.getbuffer(HBlackimage), epd.getbuffer(HRedimage))
time.sleep(2)
print &amp;quot;read bmp file&amp;quot;
HBlackimage = Image.open(&#39;2in9b-b.bmp&#39;)
epd.display(epd.getbuffer(HBlackimage), epd.getbuffer(HRedimage))
time.sleep(2)
except Exception, e:
print &#39;traceback.format_exc():\n%s&#39; % traceback.format_exc()
exit()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプログラムを実行すると以下のようになります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/45152d05-0b37-6d40-a992-2dc034553d67.gif&#34; alt=&#34;20190121_002653.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/143395/c4b5f8b7-40c1-5145-5ba6-11c9b7a6f69a.gif&#34; alt=&#34;20190121_002722.gif&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;いかがでしたでしょうか？&lt;/p&gt;
&lt;p&gt;電子ペーパーは、低消費電力という特徴があるので、センサからとれるデータを一定時間ごとに表示したり、自分の好きなものを表示して持ち運んだりすることもできます。&lt;/p&gt;
&lt;p&gt;電子部品の販売店に売っていたりしますが、電子ペーパーの使い方はあまり広がっていないように感じるので、この記事を参考にぜひやってみてください！&lt;/p&gt;</description></item><item><title>ArduinoでTwitter連携！愛しのぬいぐるみトンピーちゃんに命を吹き込んでみた</title><link>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</link><pubDate>Mon, 28 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</guid><description>
&lt;p&gt;皆さん、大好きなぬいぐるみが動き出したらいいなと思ったこと、ありませんか？&lt;/p&gt;
&lt;p&gt;今回は私の愛すべきお友達「トンピーちゃん」に命を吹き込むべく、プログラミング初心者の私がArduinoとTwitterの連携に挑戦してみました！&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;こちらです！！&lt;/font&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/721a8190-3ffc-8bca-c4b3-774ee58d45e9.gif&#34; alt=&#34;ezgif.com-video-to-gif.gif&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;今回やること&#34;&gt;今回やること&lt;/h2&gt;
&lt;h3 id=&#34;実装の構成&#34;&gt;実装の構成&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ざっくりの構成です。Node.jsでTwitterの「#tonpy」というハッシュタグを監視し、「move #tonpy」「stop #tonpy」というツイートがあったらArduinoを経由してトンピーちゃんが動いたり止まったりします。&lt;/p&gt;
&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;
&lt;h4 id=&#34;こぐまのトンピーちゃん&#34;&gt;■こぐまのトンピーちゃん&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/210df088-f5f0-6f8a-e9ee-2a63f06e2364.jpeg&#34; alt=&#34;トンピー.jpg&#34; /&gt;
愛用のトンピーちゃんです。乾電池を入れるとピーヒャラドンドンします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入: &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%A4%E3%83%AF%E3%83%A4-%E3%81%93%E3%81%90%E3%81%BE%E3%81%AE%E3%83%88%E3%83%B3%E3%83%94%E3%83%BC/dp/B0002U3OBA&#34;&gt;Amazon.co.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-uno&#34;&gt;■Arduino Uno&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/c26d230d-e320-b73d-f15f-32d813e1294f.jpeg&#34; alt=&#34;Arduino Uno.jpg&#34; /&gt;
Arduino Unoは2010年に発売されたArduinoで、&lt;a href=&#34;https://store.arduino.cc/usa/arduino-uno-rev3&#34;&gt;Arduinoの公式サイト&lt;/a&gt;にも「&lt;strong&gt;電子工作初心者に最適&lt;/strong&gt;」と書いてあったのでこちらに決めました。&lt;/p&gt;
&lt;p&gt;購入にあたっては「Arduino 初心者」と調べヒットした「&lt;a href=&#34;https://www.amazon.co.jp/%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-SSCI-GettingStartedArduinoKit-Arduino%E3%82%92%E3%81%AF%E3%81%98%E3%82%81%E3%82%88%E3%81%86%E3%82%AD%E3%83%83%E3%83%88/dp/B0025Y6C5G/ref=sr_1_fkmr1_2?ie=UTF8&amp;amp;qid=1544321570&amp;amp;sr=8-2-fkmr1&amp;amp;keywords=arduino+%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%AD%E3%83%83%E3%83%88&#34;&gt;Arduinoをはじめようキット&lt;/a&gt;」を購入しました。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/d7099cb0-97aa-8ff1-4e3d-b959e8139fb4.jpeg&#34;&gt;
─ Arduinoをはじめようキット
&lt;/center&gt;
Arduino Unoの他にブレッドボードや抵抗など電子工作を始めるにあたり必要なもの一式が揃っているため、すぐに始める事ができます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;fet-fet-mosfet-2sjs527l-e-60v5a&#34;&gt;■FET（FET MOSFET 2SJS527L-E 60V5A）&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/88510174-eed9-e286-5343-3deeb08a7884.jpeg&#34; alt=&#34;I-08315.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;FETはロードスイッチとも呼ばれ、簡単にいうと外部からの電圧によって電流の流れを制御できるスイッチのようなもののようです。小さな電力で動作させる事ができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/#回路を作成&#34;&gt;回路を作成&lt;/a&gt;で説明しますが、FETには「Pチャネル」と「Nチャネル」の2種類あります。今回はNチャネルのFETを利用します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入: &lt;a href=&#34;http://akizukidenshi.com/catalog/g/gI-07145/&#34;&gt;秋月電子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;node-jsをインストールしたpc&#34;&gt;■Node.jsをインストールしたPC&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/efcdf34b-504e-cc68-125a-0acadd815510.jpeg&#34; alt=&#34;IMG_9204.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;今回はNode.jsでプログラムを動かします。下記記事を参考にインストールしてみてください！&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;136&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/nodejs-install-use-nodebrew/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/136/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
Node.jsを始めよう！nodebrewを使って5分で環境構築
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2017-12-15
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
nodebrewを使ったNode.jsのインストール方法をまとめました。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;筆者PC: mac OS HighSierra バージョン10.13.6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Node.js: v10.10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;その他&#34;&gt;■その他&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/eb369434-a5ff-e44a-c7b9-02a065030098.jpeg&#34; alt=&#34;IMG_9206.jpg&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/docs/breadboard/&#34;&gt;ブレッドボード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/jumperwire/#%E3%83%9F%E3%83%8E%E3%83%A0%E3%82%B7%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97-%E3%83%AF%E3%83%8B%E5%8F%A3&#34;&gt;ワニ口クリップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;抵抗（今回は220Ω）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;トンピーちゃんを解体&#34;&gt;トンピーちゃんを解体&lt;/h2&gt;
&lt;p&gt;まずはトンピーちゃんの導線を確認するため、少し解体します。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/69ccd688-afb6-0715-124a-44d886fe3178.jpeg&#34; alt=&#34;IMG_6786.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/84c4fcd7-8c65-a0dc-1a84-ee75b5c2ef48.jpeg&#34; alt=&#34;IMG_9205.jpg&#34; /&gt;
電池の部分を取り外してみました。すると、導線は電池部分と本体でパックリ分かれている事が確認できました。今回はその部分にArduino Unoを繋げば回路の開/閉が制御できそうですね。&lt;/p&gt;
&lt;h2 id=&#34;arduino-unoとトンピーちゃんを連携&#34;&gt;Arduino Unoとトンピーちゃんを連携&lt;/h2&gt;
&lt;h3 id=&#34;回路を作成&#34;&gt;回路を作成&lt;/h3&gt;
&lt;p&gt;Arduino Unoから直接ON/OFFを制御しようとすると、電流が少なく回路を開/閉できませんでした。そこでArduino Unoとトンピーちゃんの間に&lt;strong&gt;FETを挿入&lt;/strong&gt;します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/230/fet.png&#34; alt=&#34;fet&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;FETは、電圧の加え方の違いによって「Pチャネル」と「Nチャネル」の2種類に分かれます。今回はNチャネルのFETを利用します。&lt;/p&gt;
&lt;p&gt;また、回路の「+側」にFETを繋ぐことを「ハイサイド（スイッチ）」、-側に繋ぐことを「ローサイド（スイッチ）」と呼称します。今回はNチャネルなので、ローサイドにFETを繋ぎます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d32c3f6f4b1de908ceced242cc2ba7f4.png&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最終的に上記のような回路図になりました。&lt;/p&gt;
&lt;h3 id=&#34;arduino-unoにプログラムを書き込む&#34;&gt;Arduino Unoにプログラムを書き込む&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/b544f541-a5ac-ee97-18a3-de3963210c92.png&#34; alt=&#34;スクリーンショット 2018-12-18 12.35.58.png&#34; /&gt;
ArduinoをUSBケーブルでPCに繋ぎ、アプリケーションでArduino IDEを開きます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/da16043a-121e-52e2-e395-3121a8a3e48f.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.10.09.png&#34; /&gt;
ファイル→新規ファイルを選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/2a42d894-497d-a0c4-5573-6a4c148fc5fe.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.09.45.png&#34; /&gt;
ツール→ボード→繋いだArduino（今回はArduino Uno）を選択します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/9f5d63e2-454b-c637-ef5d-07550cccf8d5.png&#34; alt=&#34;スクリーンショット 2018-12-16 15.11.33.png&#34; /&gt;
ツール→シリアルポート→接続したArduinoを選択します。&lt;/p&gt;
&lt;p&gt;下記コードを新規ファイルにコピー&amp;amp;ペーストします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// pins
const int tonpyPin = 2;
void setup() {
// initialize serial:
Serial.begin(9600);
// make the pins outputs:
pinMode(tonpyPin, OUTPUT);
}
void loop() {
// if there&#39;s any serial available, read it:
while (Serial.available() &amp;gt; 0) {
char value = Serial.read();
if (value == &#39;p&#39;) {
digitalWrite(tonpyPin, HIGH);
} else if (value == &#39;q&#39;){
digitalWrite(tonpyPin, LOW);
} else{
digitalWrite(tonpyPin, LOW);
}
Serial.println(value);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/8ec32eee-c610-137c-febd-9408f22db6e1.png&#34; alt=&#34;スクリーンショット 2018-12-10 9.25.26.png&#34; /&gt;
左上にある「→」ボタンを押してマイコンボードに書き込みます。&lt;/p&gt;
&lt;p&gt;これでArduino Unoからの信号（p: スイッチON、q: スイッチOFF）でトンピーちゃんが動く/止まるようになりました。&lt;/p&gt;
&lt;p&gt;これをツイートと連動できれば完成です！&lt;/p&gt;
&lt;h2 id=&#34;node-jsのプログラム&#34;&gt;Node.jsのプログラム&lt;/h2&gt;
&lt;p&gt;ハッシュタグ「#tonpy」を取得し、さらに「move」「stop」のツイートがあったらArduino Unoに送るプログラムを作成します。&lt;/p&gt;
&lt;h3 id=&#34;twitter-apiの準備&#34;&gt;Twitter APIの準備&lt;/h3&gt;
&lt;p&gt;API使用には&lt;a href=&#34;https://developer.twitter.com/&#34;&gt;Twitter Developer&lt;/a&gt;へ登録する必要があります。登録の際、用途など英文で書く部分がありました（筆者はGoogle翻訳を駆使しました）。&lt;/p&gt;
&lt;p&gt;手順については下記の記事に詳しく書かれており、そちらに沿って登録しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/kngsym2018/items/2524d21455aac111cdee&#34;&gt;Twitter API 登録 (アカウント申請方法) から承認されるまでの手順まとめ　※2018年9月時点の情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tweetを取得するnode-jsのプログラムを作成&#34;&gt;Tweetを取得するNode.jsのプログラムを作成&lt;/h3&gt;
&lt;h4 id=&#34;ディレクトリを用意&#34;&gt;■ディレクトリを用意&lt;/h4&gt;
&lt;p&gt;任意の保存場所にフォルダを用意します。今回はDesktopにTonpyフォルダを作りました。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;jsファイルを作成&#34;&gt;■JSファイルを作成&lt;/h4&gt;
&lt;p&gt;作成したフォルダに任意の名前のJSファイルを用意します。今回は「app.js」としました。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;twitter-apiを使用するモジュールのインストール&#34;&gt;■Twitter APIを使用するモジュールのインストール&lt;/h4&gt;
&lt;p&gt;Node.jsでTwitter APIが使用できるよう&lt;a href=&#34;https://www.npmjs.com/package/twitter&#34;&gt;Twitterモジュール&lt;/a&gt;をnpmでインストールします。ターミナルで作成したフォルダを開き、下記コマンドを叩きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install twitter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでNode.jsでTwitter APIが使用できるようになりました。&lt;/p&gt;
&lt;p&gt;実際に使用する際はJSファイル内で最初に下記のように書くとTwitter APIが呼び出されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Twitter = require(&#39;twitter&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ツイートを取得するプログラムを作成&#34;&gt;■ツイートを取得するプログラムを作成&lt;/h4&gt;
&lt;p&gt;TwitterAPIには「REST API」と「Streaming API」の2種類があります。&lt;/p&gt;
&lt;p&gt;REST APIはエンドポイントへリクエストして初めて結果が得られるものに対して、Streaming APIはレートのリミットなくツイートを受信し続ける事ができます。&lt;/p&gt;
&lt;p&gt;今回はツイートを常に監視し該当のツイートがあったら結果を取得する、という事がしたいので&lt;strong&gt;Streaming API&lt;/strong&gt;を使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const twitter = require(&amp;quot;twitter&amp;quot;);
const fs = require(&amp;quot;fs&amp;quot;);
const client = new twitter({
consumer_key: &#39;&#39;,//Dev Accountで取得したkeyを書く
consumer_secret: &#39;&#39;,
access_token_key: &#39;&#39;,
access_token_secret: &#39;&#39;,
});
let tweetText =&#39;w&#39;;
client.stream(&#39;statuses/filter&#39;, {track:&amp;quot;#tonpy &amp;quot;}, (stream) =&amp;gt; {//Streaming APIを呼び出す
stream.on(&#39;data&#39;, (tweet) =&amp;gt; {
tweetText = tweet.text;
(~tweetText.indexOf(&#39;move&#39;)) ? (tweetText = &#39;p&#39;) : (~tweetText.indexOf(&#39;stop&#39;)) ? (tweetText = &#39;q&#39;) : (tweetText = &#39;w&#39;);
});
stream.on(&#39;error&#39;, (error) =&amp;gt; {//エラー
console.error(`Error: ${error.message}`);
stream.destroy();
});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ツイートを取得するNode.jsのプログラムが完成しました。&lt;/p&gt;
&lt;h3 id=&#34;arduinoに送るプログラムを作成&#34;&gt;Arduinoに送るプログラムを作成&lt;/h3&gt;
&lt;h4 id=&#34;シリアル通信をするモジュールのインストール&#34;&gt;■シリアル通信をするモジュールのインストール&lt;/h4&gt;
&lt;p&gt;PCとArduino間でシリアル通信をするために、シリアルポートでシリアル通信を行うモジュールもnpmでインストールします。&lt;/p&gt;
&lt;p&gt;シリアルポートとは&lt;strong&gt;シリアル通信を行う時の接続口&lt;/strong&gt;のことで、今回はArduinoと接続したPCのUSBポートにあたります。&lt;/p&gt;
&lt;p&gt;ターミナルで下記コマンドを叩きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install serialport
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでNode.jsでシリアルポートを制御できるようになりました。&lt;/p&gt;
&lt;p&gt;使用する際はJSファイル内で最初に下記のように呼び出します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Serialport = require(&#39;serialport&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;シリアルポートの名前を調べる&#34;&gt;■シリアルポートの名前を調べる&lt;/h4&gt;
&lt;p&gt;プログラム内では、USBポートに挿しているArduino Uno（ttyデバイス）を指定します。&lt;/p&gt;
&lt;p&gt;ターミナルで下記コマンドを打ち、PCのシリアルポートに接続されている機器を表示します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l /dev/tty.*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Auduino Unoを挿し、もう一度先ほどのコマンドを打ちます。新しく出てきたttyデバイス名がArduino Unoです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-unoに送るnode-jsのプログラムを作成&#34;&gt;■ Arduino Unoに送るNode.jsのプログラムを作成&lt;/h4&gt;
&lt;p&gt;下記がシリアル通信するためのコードです。ツイートを取得するためのJSファイルの続きに記述してください。&lt;/p&gt;
&lt;p&gt;1行目の&lt;code&gt;/dev/tty.xxx&lt;/code&gt;には上記のシリアルポート名を記入してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const port = new SerialPort(&#39;/dev/tty.xxx&#39;,{
baudRate: 9600//baudRate:9600は1秒に最大9600ビットを送信するという意味
});
port.write(&#39;main screen turn on&#39;, function(err) {
if (err) {
return console.log(&#39;Error on write: &#39;, err.message);
}
console.log(&#39;message written&#39;);
});
port.on(&#39;open&#39;, () =&amp;gt; {
console.log(&#39;Serial open.&#39;);
setInterval(write, 1000);
});
const write = () =&amp;gt; {
console.log(`Input to Arduino: ${tweetText}`);
port.write(tweetText, (error) =&amp;gt; {
if(error) {
console.error(`Error: ${error.message}`);
}
});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでツイート情報を取得し、Arduinoに信号を送る事ができるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;完成コード&#34;&gt;完成コード&lt;/h3&gt;
&lt;p&gt;ツイートを取得するプログラム、Arduinoを制御するプログラムを合わせた完成コードは下記のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//-----------------------------------------------
// twitterからツイートを取得
//-----------------------------------------------
const twitter = require(&amp;quot;twitter&amp;quot;);
const client = new twitter({
consumer_key: &#39;&#39;,//Dev Accountで取得したkeyを書く
consumer_secret: &#39;&#39;,
access_token_key: &#39;&#39;,
access_token_secret: &#39;&#39;,
});
let tweetText =&#39;w&#39;;
client.stream(&#39;statuses/filter&#39;, {track:&amp;quot;#tonpy &amp;quot;}, (stream) =&amp;gt; {
stream.on(&#39;data&#39;, (tweet) =&amp;gt; {
tweetText = tweet.text;
(~tweetText.indexOf(&#39;move&#39;)) ? (tweetText = &#39;p&#39;) : (~tweetText.indexOf(&#39;stop&#39;)) ? (tweetText = &#39;q&#39;) : (tweetText = &#39;w&#39;);
});
stream.on(&#39;error&#39;, (error) =&amp;gt; {
console.error(`Error: ${error.message}`);
stream.destroy();
});
});
//-----------------------------------------------
// Node.jsからArduinoに送信
//----------------------------------------------
const SerialPort = require(&#39;serialport&#39;);
const port = new SerialPort(&#39;/dev/tty.xxx&#39;,{
baudRate: 9600
});
port.on(&#39;open&#39;, () =&amp;gt; {
console.log(&#39;Serial open.&#39;);
setInterval(write, 1000);
});
port.on(&#39;data&#39;, (data) =&amp;gt; {
console.log(`Data from Arduino: ${data}`);
});
const write = () =&amp;gt; {
console.log(`Input to Arduino: ${tweetText}`);
port.write(tweetText, (error) =&amp;gt; {
if(error) {
console.error(`Error: ${error.message}`);
}
});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;node-jsを実行する&#34;&gt;■Node.jsを実行する&lt;/h4&gt;
&lt;p&gt;Node.jsは、ファイルのある場所で下記コマンドで実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;部分は、ご自身が作成したファイル名に置き換えてください。「Serial open」がターミナル上に表示されたら無事実行されています。&lt;/p&gt;
&lt;h2 id=&#34;動かしてみる&#34;&gt;動かしてみる&lt;/h2&gt;
&lt;p&gt;Node.jsを起動しながら、ツイートしてみましょう……。「&lt;strong&gt;#tonpy move&lt;/strong&gt;」!!!!!
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/309368/9c8c2611-d9b2-e7dd-3710-8d2011c2b424.gif&#34; alt=&#34;ezgif.com-video-to-gif.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;う、動いたーーーー！！！（少々タイムラグがありますが……。）&lt;/p&gt;
&lt;p&gt;初めてのIoTとっっても楽しかったです！電子工作やNode.jsの勉強にもなり一石二鳥ですね。&lt;/p&gt;
&lt;p&gt;これから色々作っていきたいです！&lt;/p&gt;
&lt;style&gt;
.caution {
border: 1px solid #BFBFBF;
padding: 1em 2em;
margin: 2em 0;
color: #474747;
background: whitesmoke;/*背景色*/
border-left: double 7px #0B0B61;/*左線*/
font-size: 90%;
}
.caution &gt; p {
font-weight: bold;
margin: 0 0 10px 0;
padding: 0;
}
blockquote {
font-size:80%;
}
.accbox {
margin: 2em 0;
padding: 0;
max-width: 710px;
}
.accbox label {
display: block;
margin: 1.5px 0;
padding : 11px 12px;
color :#ffffff;
font-weight: bold;
background :#2f2f2f;
cursor :pointer;
transition: all 0.5s;
}
.accbox label:hover {
background :#A4A4A4;
}
.accbox input {
display: none;
}
.accbox .accshow {
height: 0;
padding: 0;
overflow: hidden;
opacity: 0;
transition: 0.8s;
}
.cssacc:checked + .accshow {
height: auto;
padding: 5px;
background: #eaeaea;
opacity: 1;
}
&lt;/style&gt;</description></item><item><title>Moddable SDKを使ってJavaScriptでIoT開発してみた</title><link>https://dotstud.io/blog/developed-iot-using-moddable/</link><pubDate>Thu, 24 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/developed-iot-using-moddable/</guid><description>
&lt;p&gt;どうも。&lt;a href=&#34;https://dotstud.io/members/horihiro&#34;&gt;ほりひろ&lt;/a&gt; です。
dotstudioブログでは、初めましてですね。&lt;/p&gt;
&lt;p&gt;JavaScript や IoT が好きな、でも実は半田付けも抵抗値の計算もろくにできないレベルの週末プログラマーです。
普段は某クラウドベンダーのサポートエンジニアをしています。
よろしくお願いします。&lt;/p&gt;
&lt;p&gt;Twitterアカウントは&lt;a href=&#34;https://twitter.com/hori__hiro&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;年末に自分の中で話題になっていた、&lt;u&gt;&lt;strong&gt;Moddable SDK&lt;/strong&gt;&lt;/u&gt;というものをようやく触ってみました。&lt;/p&gt;
&lt;h2 id=&#34;moddable-sdk-xs&#34;&gt;Moddable SDK &amp;amp; XS&lt;/h2&gt;
&lt;h3 id=&#34;moddable-sdk&#34;&gt;Moddable SDK&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Moddable SDK は、&lt;strong&gt;JavaScript コードを ESP32 や ESP8266 といったマイコン上で動作させるためのビルド環境やライブラリー群&lt;/strong&gt;のこと、、、だと思います。&lt;/p&gt;
&lt;p&gt;これは Moddable 社から提供されていますが、&lt;u&gt;下記 GitHub リポジトリで公開されているので、無料で手に入れられます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable&#34;&gt;https://github.com/Moddable-OpenSource/moddable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;xs&#34;&gt;XS&lt;/h3&gt;
&lt;p&gt;XS は、&lt;strong&gt;Moddable SDK で生成される JavaScript ランタイム環境&lt;/strong&gt; （ドキュメントには &lt;strong&gt;virtual machine&lt;/strong&gt; と記載）で、なんと &lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable#modern-software-development-for-microcontrollers&#34;&gt;ES2018 に 99% 以上準拠&lt;/a&gt;しているらしいです。すごいですね！&lt;/p&gt;
&lt;p&gt;※一部準拠していない部分は、注意事項として&lt;strong&gt;&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/XS%20Conformance.md#caveat&#34;&gt;こちら&lt;/a&gt;&lt;/strong&gt;に記載されています。&lt;/p&gt;
&lt;p&gt;これは&lt;a href=&#34;http://www.moddable.com/XS7-TC-39.php&#34;&gt;公式ドキュメント&lt;/a&gt;にある画像です。「XS は一番小さい」って意味でしょうね。シャレてます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ざっくりとした理解ですが、Moddable SDK のビルドツールで、自分が書いた JavaScript や C のソースコードと組み込みのクラスが含まれた XS を、一つのバイナリーにビルドし、マイコンに書き込んでいるようです。&lt;/p&gt;
&lt;p&gt;これまで JavaScript でのマイコン制御というと、以前から ホスト PC とマイコンをシリアル接続し、ホストPC上の Node.js と Johnny-Five を使ってマイコンを制御する方法があり、最近では obniz の制御をネットワークを介して JavaScript などから行う方法がありますが、いずれもマイコンの外に JavaScript の実行環境を用意する必要があります。&lt;/p&gt;
&lt;p&gt;一方で、Moddable SDK では、&lt;u&gt;JavaScript 実行環境である XS がマイコン上で動作することができます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;この点は、&lt;strong&gt;これまでの実行環境とは大きく違うところですね！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;開発環境の構築&#34;&gt;開発環境の構築&lt;/h2&gt;
&lt;p&gt;基本的に、公式のリポジトリに記載された &lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/Moddable%20SDK%20-%20Getting%20Started.md&#34;&gt;構築手順&lt;/a&gt;通りに実施することで、ビルド ツールなどの環境が構築できます。&lt;/p&gt;
&lt;p&gt;構築手順は macOS/Linux/Windows の各プラットフォーム向けにまとまっており、それぞれが、下記の 3 つのパートに分かれて記載されています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mcconfig&lt;/code&gt; や &lt;code&gt;xsbug&lt;/code&gt; などの開発ツールのビルド&lt;/li&gt;
&lt;li&gt;ESP8266 向けの開発環境の構築&lt;/li&gt;
&lt;li&gt;ESP32 向けの開発環境の構築&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;いずれのプラットフォームでも 1. は必須ですが、2. と 3. は手持ちのボードに合わせて、どちらかを実施するだけでよいです。&lt;/p&gt;
&lt;p&gt;私は Windows 用の環境構築をしましたが、Windows 向けの開発環境構築では、&lt;u&gt;&lt;strong&gt;Windows ネイティブのコマンドを使用することをお勧めします。&lt;/strong&gt;&lt;/u&gt;
WSL から &lt;code&gt;git clone&lt;/code&gt; などをすると、&lt;a href=&#34;https://github.com/Moddable-OpenSource/moddable/issues/110&#34;&gt;&lt;strong&gt;開発ツールがビルドできない&lt;/strong&gt;&lt;/a&gt;ようで、これに丸一日ハマりました。&lt;/p&gt;
&lt;p&gt;あと、ビルドツールの実行は、必ず&lt;code&gt;開発者コマンドプロンプト for VS2017&lt;/code&gt; を起動し、そのコマンドプロンプトの中でしましょう。&lt;/p&gt;
&lt;h2 id=&#34;サンプル-コード&#34;&gt;サンプル コード&lt;/h2&gt;
&lt;p&gt;マイコンのサンプルと言えば Lチカですが、手元に LED がなかったので、とりあえず ESP32 上での非同期実行を試してみます。&lt;/p&gt;
&lt;h3 id=&#34;ファイルの用意&#34;&gt;ファイルの用意&lt;/h3&gt;
&lt;p&gt;プロジェクト ディレクトリに下記のような構造で、ファイルを作ります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── esp
│ ├── console.c
│ └── console.js
├── main.js
└── manifest.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;main-js&#34;&gt;main.js&lt;/h3&gt;
&lt;p&gt;1 秒おきに &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;10&lt;/code&gt; の数字を、1.5 秒おきに &lt;code&gt;a&lt;/code&gt; から &lt;code&gt;z&lt;/code&gt; の文字を、シリアル コンソールに出力するプログラムです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:main.js&#34;&gt;import Timer from &#39;timer&#39;;
import console from &amp;quot;console&amp;quot;;
const a = &#39;a&#39;;
const z = &#39;z&#39;;
let c = a;
let i = 0;
Timer.repeat(() =&amp;gt; {
console.log(`${String(Date.now()).padStart(15)}:${i}`);
i = (i &amp;gt;= 10) ? 0 : i + 1;
}, 1000);
Timer.repeat(() =&amp;gt; {
console.log(`${String(Date.now()).padStart(15)}:${c}`);
c = (c &amp;gt;= z) ? a : String.fromCharCode(c.charCodeAt(0) + 1);
}, 1500);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Web ブラウザーや Node.js なら、定期的な処理を書くなら &lt;code&gt;setInterval&lt;/code&gt; を使うところだと思いますが、Moddable SDK / XS では、グローバルに &lt;code&gt;setInterval&lt;/code&gt; が定義されていません。&lt;/p&gt;
&lt;p&gt;代わりに、&lt;code&gt;Timer&lt;/code&gt; オブジェクトの &lt;code&gt;repeat&lt;/code&gt; メソッドを使って、同じ処理が似たような感じで書くことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:browser&amp;amp;nodejs&#34;&gt;setInterval(() =&amp;gt; {
:
}, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-js:XS&#34;&gt;import Timer from &#39;timer&#39;;
Timer.repeat(() =&amp;gt; {
:
}, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;console-js-console-c&#34;&gt;console.js /console.c&lt;/h3&gt;
&lt;p&gt;実は XS では &lt;code&gt;console&lt;/code&gt; オブジェクトもないので、とりあえず、下記の JS ファイルと C ファイルで、シリアルコンソールに 1 行出力できるメソッドを定義しておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c:esp/console.js&#34;&gt;class Console @ &amp;quot;xs_console_destructor&amp;quot; {
constructor() {
}
static log() @ &amp;quot;xs_console_log&amp;quot;
}
Object.freeze(Console.prototype);
export default Console;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JS ファイルはタダのラッパーで、処理本体は C ファイルで定義しています。
JS ファイル内で &lt;code&gt;@ ～&lt;/code&gt; と書くと、C ファイルで宣言した関数とバインディングされます。
これは、XS 独自の実装のようです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c:esp/console.c&#34;&gt;#include &amp;quot;xsAll.h&amp;quot;
#include &amp;quot;xs.h&amp;quot;
void xs_console_destructor(void)
{
}
void xs_console_log(xsMachine *the)
{
int argc = xsToInteger(xsArgc), i;
for (i = 0; i &amp;lt; argc; i++) {
char *str = xsToString(xsArg(i));
do {
uint8_t c = c_read8(str);
if (!c) {
ESP_putc(&#39;\n&#39;);
break;
}
ESP_putc(c);
str++;
} while (1);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;manifest-json&#34;&gt;manifest.json&lt;/h3&gt;
&lt;p&gt;最後は manifest ファイルです。
正直言うと、ここはあまり把握できていません :sweat:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;include&lt;/code&gt; で Moddable SDK で用意されている manifest を、ベースの manifest として読み込み、全プラットフォーム共通のモジュールとして &lt;code&gt;main&lt;/code&gt;(.js) を、&lt;code&gt;esp32&lt;/code&gt; 向けには、&lt;code&gt;./esp/console&lt;/code&gt;(.js) をロードする設定を書いています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:manifest.json&#34;&gt;{
&amp;quot;include&amp;quot;: &amp;quot;$(MODDABLE)/examples/manifest_base.json&amp;quot;,
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;./main&amp;quot;,
]
},
&amp;quot;platforms&amp;quot;: {
&amp;quot;esp32&amp;quot;: {
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;./esp/console&amp;quot;,
],
}
}
},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上の &lt;code&gt;manifest.json&lt;/code&gt; では &lt;code&gt;Timer&lt;/code&gt; クラスをロードしていませんが、&lt;code&gt;main.js&lt;/code&gt; では問題なく import することができます。
これは、Moddable SDK に含まれるベースの manifest でロード設定がされているためです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:$(MODDABLE)/examples/manifest_base.json(抜粋)&#34;&gt;{
:
(略)
:
&amp;quot;platforms&amp;quot;: {
:
(略)
:
&amp;quot;esp32&amp;quot;: {
&amp;quot;include&amp;quot;: &amp;quot;$(BUILD)/devices/esp32/manifest.json&amp;quot;
},
}
:
(略)
:
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-json:$(BUILD)/devices/esp32/manifest.json(抜粋)&#34;&gt;{
:
(略)
:
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;$(MODULES)/base/time/*&amp;quot;,
&amp;quot;$(MODULES)/base/time/esp/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/mc/*&amp;quot;,
]
},
&amp;quot;preload&amp;quot;: [
&amp;quot;time&amp;quot;,
&amp;quot;timer&amp;quot;,
],
:
(略)
:
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ちなみに manifest についてツイートしたところ、公式アカウントからも返事がありました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ドキュメントは定期的にメンテナンスされそうです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The manifest documentation (&lt;a href=&#34;https://t.co/HTYtMXR33N&#34;&gt;https://t.co/HTYtMXR33N&lt;/a&gt;) is a good place to start, but we&amp;#39;ll put a document with more details together soon. If you have any specific questions, we&amp;#39;d be happy to answer those as well.&lt;/p&gt; Moddable (@moddabletech) &lt;a href=&#34;https://twitter.com/moddabletech/status/1086084032008413184?ref_src=twsrc%5Etfw&#34;&gt;2019年1月18日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行してみる&#34;&gt;実行してみる&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;manifest.json&lt;/code&gt; があるディレクトリで、&lt;code&gt;mcconfig&lt;/code&gt; コマンドを実行します。
大抵は、XS のビルドから始まるので、書き込みが完了するまでだいぶ時間がかかると思います。&lt;/p&gt;
&lt;p&gt;書き込みが完了すると、シリアルモニターに自動的に接続し、&lt;code&gt;console.log&lt;/code&gt; の出力内容が表示されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; mcconfig -m -p esp32
rm: cannot remove &#39;/root/Projects/moddable/build/tmp/esp32/release/xsProj/sdkconfig&#39;: No such file or directory
# Running GENCONFIG...
fatal: Not a git repository (or any of the parent directories): .git
including /root/esp32/esp-idf/components/bootloader/Makefile.projbuild...
:
(略)
:
MONITOR
--- idf_monitor on /dev/ttyUSB0 115200 ---
--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---
ets Jun 8 2016 00:22:57
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0018,len:4
load:0x3fff001c,len:636
load:0x40078000,len:6192
load:0x40080000,len:5152
0x40080000: _iram_start at /root/esp32/esp-idf/components/freertos/xtensa_vectors.S:1685
entry 0x40080264
0x40080264: _Level5Vector at ??:?
1010:1
1510:a
2010:2
3010:3
3011:b
4010:4
4510:c
5010:5
6010:6
:
(略)
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定した時間間隔で、コールバック関数が実行されています！
ES2017 で入った &lt;code&gt;String.prototype.padStart&lt;/code&gt; も正常に動作しているようです。&lt;/p&gt;
&lt;p&gt;なお、マイコンには時計がないので、&lt;code&gt;Date.now()&lt;/code&gt; は起動時からの時間を返します。&lt;/p&gt;
&lt;h3 id=&#34;デバッグ実行&#34;&gt;デバッグ実行&lt;/h3&gt;
&lt;p&gt;先ほど実行したコマンド &lt;code&gt;mcconfig -m -p esp32&lt;/code&gt; にデバッグ オプション &lt;code&gt;-d&lt;/code&gt; を追加すると、デバッグ ビルドを実行し、デバッグ ツールである &lt;code&gt;xsbug&lt;/code&gt; が自動で起動します。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;xsbug&lt;/code&gt; は JavaScript コードにブレークポイントの設定や、ステップ実行、変数の内容などを表示することが
でき、結構本格的なデバッグツールです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/237/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;今は独自の GUI ツールとして提供されているようですが、そのうち&lt;strong&gt;VSCode から拡張機能として利用できるようになると嬉しいですね。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;いかがだったでしょうか。
Moddable SDK を使うことで、JavaScript で書いたコードを、ESP8266/32 で動作させることができました。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;Web フロントエンドや Node.js など、JavaScript を書くエンジニア人口は多いでしょうから、そういった方々も気軽にマイコン開発ができるようになりますね。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;あとは、manifest ファイルに関するドキュメントの整備がすすんだり、もう少し簡単に環境構築ができれば、格段に開発しやすくなるのではないでしょうか。&lt;/p&gt;</description></item><item><title>【ハンズオン資料】NefryBTでハジメテノIoT開発やってみよう！</title><link>https://dotstud.io/blog/handson-nefry-ma-kanazawa/</link><pubDate>Thu, 01 Nov 2018 10:07:13 +0900</pubDate><guid>https://dotstud.io/blog/handson-nefry-ma-kanazawa/</guid><description>
&lt;p&gt;この記事は11/1の&lt;a href=&#34;https://mashupawards.connpass.com/event/103791/&#34;&gt;ハジメテノIoTハンズオン&lt;/a&gt;向け資料です。記事を読んで試せる内容になっているので、終了後や参加されていない方もぜひ試してみてください！&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■ハンズオンの進行について&lt;/p&gt;
ハンズオンはこのページに沿って進めます。進められる方は、どんどん進めていきましょう！リンクは別タブや別ウィンドウで開くのがオススメです。
&lt;/section&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■Nefry BTドキュメントについて&lt;/p&gt;
&lt;a href=&#34;https://dotstud.io/docs/nefrybt/&#34;&gt;Nefry BTドキュメント&lt;/a&gt;: NefryBTの使い方に関するドキュメントページです。基本の動作や、調べ方、質問できる場所なども案内しています。
&lt;/section&gt;
&lt;h2 id=&#34;今回やってみること&#34;&gt;今回やってみること&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;湿度が高くなると自分のLINEに通知がくる仕組み&lt;/strong&gt;を、Nefry BT、温湿度センサ、IFTTTというWebサービスを使って作ってみます。室内の状態が異常になったときに通知する仕組みのようなイメージです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h3&gt;
&lt;h4 id=&#34;nefry-bt-ディスプレイ&#34;&gt;■Nefry BT＆ディスプレイ&lt;/h4&gt;
&lt;p&gt;Nefry BTは「ESP-WROOM-32」というWi-Fi・BLE通信モジュールを搭載した、Arduinoと同じように開発できるマイコンボードです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/nefry.png&#34; alt=&#34;nefry&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/grove/&#34;&gt;Grove&lt;/a&gt;という刺すだけで配線できるモジュール対応のコネクタを搭載していて、&lt;strong&gt;ハードウェアをあまり意識せず&lt;/strong&gt;に開発できます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;grove-温湿度センサ&#34;&gt;■Grove 温湿度センサ&lt;/h4&gt;
&lt;p&gt;刺すだけで配線できる&lt;a href=&#34;https://dotstud.io/docs/grove/&#34;&gt;Grove&lt;/a&gt;シリーズの、温度と湿度を取得できるセンサです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/motion_sensor.png&#34; alt=&#34;motion_sensor&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;安価で扱いやすいセンサですが、高い精度や細かいデータの取得には向きません。プロトタイプ向きなセンサです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-ide&#34;&gt;■Arduino IDE&lt;/h4&gt;
&lt;p&gt;開発（プログラムの書き込み）には&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;Arduino IDE&lt;/a&gt;というフリーソフトウェアを利用します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;こちら&lt;/a&gt;の手順を見ながらご自身のPCにインストールしてください。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-ide-1&#34;&gt;■Arduino IDE&lt;/h4&gt;
&lt;p&gt;開発（プログラムの書き込み）には&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;Arduino IDE&lt;/a&gt;というフリーソフトウェアを利用します。&lt;/p&gt;
&lt;p&gt;まだインストールしていない方は、&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;こちら&lt;/a&gt;の手順を見ながら進めてください。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;iftttアカウント&#34;&gt;■IFTTTアカウント&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt;（いふと）は、モノとWebやWebサービス同士を簡単に連携できるサービスです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/ifttt.png&#34; alt=&#34;ifttt&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;他の人が作ったアプレット（連携レシピ）を使ったり、自分で新たに作成したりできます。Nefry BTでは、簡単にIFTTT連携できるツールを用意しています。&lt;/p&gt;
&lt;p&gt;ページトップの「&lt;strong&gt;Sign Up&lt;/strong&gt;」からアカウントをご作成ください。&lt;/p&gt;
&lt;h2 id=&#34;事前準備-セットアップ&#34;&gt;事前準備（セットアップ）&lt;/h2&gt;
&lt;h3 id=&#34;nefry-btのwi-fi設定&#34;&gt;Nefry BTのWi-Fi設定&lt;/h3&gt;
&lt;p&gt;まずはNefry BTがインターネットにつながるよう、会場のWi-Fi情報をNefry BTに教えてあげます。スマホやPCを使う時と同じですね。&lt;/p&gt;
&lt;p&gt;Nefry BTとPCを直接通信させ（アドホックモード）、立ち上がるNefryポータル（設定ウィンドウ）からSSIDとパスワードを入力する手順です。&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■Nefry BTが接続できるWi-Fi&lt;/p&gt;
Nefry BTが接続できるWi-Fiは2.5GHz帯のWi-Fiのみです。新しい5GHz帯は利用できません（ほとんどのIoT機器が同様）。接続後にブラウザで再度ログインの必要なWi-Fiも、利用できません。
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ディスプレイを取り付け電源を入れる&#34;&gt;■ディスプレイを取り付け電源を入れる&lt;/h4&gt;
&lt;p&gt;Nefry BTにディスプレイを取り付けます。4本の足をNefryの4本のピンソケットにさします。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/display2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;このような形でささります。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/display3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Nefry BTに、PCやモバイルバッテリーなどから給電を開始します。ディスプレイに表示荒れる「NefryBT-XXXX」という部分が、&lt;strong&gt;ご自身のNefry BTが出す無線の名称&lt;/strong&gt;になります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/nefry.png&#34; alt=&#34;nefry&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;pcをnefry-btの無線に接続する&#34;&gt;■PCをNefry BTの無線に接続する&lt;/h4&gt;
&lt;p&gt;PCのWi-Fi接続設定から、ディスプレイに表示されている「NefryBT-XXXX」という無線を選び接続します。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/nefry_wifi.png&#34; alt=&#34;&#34; /&gt;
セットアップ中PCはインターネットに繋がらなくなるので、この説明ページは開いたまま進めるのがオススメです。&lt;/p&gt;
&lt;p&gt;ちなみにSSIDは自由に変更することができます。（参照：&lt;a href=&#34;https://dotstud.io/docs/nefrybt-conv-change-ssid/&#34;&gt;SSIDを変更する&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;nefryポータルで設定する&#34;&gt;■Nefryポータルで設定する&lt;/h4&gt;
&lt;p&gt;Nefry BTのWi-Fiに接続すると、自動でNefryポータルのウィンドウが立ち上がります（立ち上がらない場合はブラウザで&lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt; にアクセスします）。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/setup_page.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;「お探しのページは…」と表示された場合は、「Move to main page」を洗濯してください。「Setup WiFi」をクリックし、利用するWi-FiのSSIDとパスワードを入力して「Save」で保存します。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/setup_wifi.png&#34; alt=&#34;&#34; /&gt;
保存すると、Nefry BTは自動で再起動します。緑の点滅が終了し再起動が完了したら、Wi-Fiのセットアップは完了です。&lt;/p&gt;
&lt;p&gt;一度設定したら、同じWi-Fiを使っている間は起動するだけで接続されます。Wi-Fi情報は5つまで保存でき、消去もできます。&lt;/p&gt;
&lt;h3 id=&#34;開発環境-arduino-ide-にボードを追加&#34;&gt;開発環境（Arduino IDE）にボードを追加&lt;/h3&gt;
&lt;p&gt;Nefty BTの開発にはフリーソフトウェアの&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;Arduino IDE&lt;/a&gt;を利用します。インストールがまだの方は「&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;Arduino IDEのインストール&lt;/a&gt;」を見ながら進めてください。&lt;/p&gt;
&lt;p&gt;Arduino IDEには、Nefry BTのボード情報の追加が必要です。「&lt;a href=&#34;https://dotstud.io/docs/nefrybt-setup-arduino-ide/&#34;&gt;環境構築（Arduino IDE）&lt;/a&gt;」を見ながら追加してください。&lt;/p&gt;
&lt;h2 id=&#34;はじめてのプログラムを書き込んでみる&#34;&gt;はじめてのプログラムを書き込んでみる&lt;/h2&gt;
&lt;p&gt;まずはNefry BTに簡単なプログラムを書き込んでみましょう。Nefry BTは、最初から下記の機能が搭載されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内蔵フルカラーLED&lt;/li&gt;
&lt;li&gt;スイッチ（SW/RST）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nefry-btを起動&#34;&gt;Nefry BTを起動&lt;/h3&gt;
&lt;p&gt;一度Nefry BTを電源から外し、ディスプレイを外します（内蔵LEDが隠れてしまうため）。マイコンボードに配線する時は、&lt;strong&gt;常に電源OFFの状態で操作&lt;/strong&gt;してください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/222/off.png&#34; alt=&#34;off&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;マイコンボードは基本的に、給電によって電源のON/OFFを制御します。再起動時には最後に書き込んだプログラムが実行されます。プログラムは書き込むたびに上書きされます。&lt;/p&gt;
&lt;p&gt;再度給電します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/222/on.png&#34; alt=&#34;on&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;緑色のLEDが点滅したあと、ランダムに光ります。&lt;/p&gt;
&lt;h3 id=&#34;まずはlチカ&#34;&gt;まずはLチカ&lt;/h3&gt;
&lt;p&gt;最初のプログラムとして、Lチカをやってみます。LEDチカチカの略で、入門向けのプログラムとして汎用的に紹介されています。&lt;/p&gt;
&lt;p&gt;簡単なプログラムを書き込むことで、ボードが正常に動くか試す際に利用することも多いです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;arduino-ideでプログラムを書く&#34;&gt;■Arduino IDEでプログラムを書く&lt;/h4&gt;
&lt;p&gt;Arduino IDEを立ち上げ、メニューから&lt;strong&gt;&lt;code&gt;ファイル &amp;gt; 新規ファイル&lt;/code&gt;&lt;/strong&gt;を選択します。下記のような画面が開きます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/ide.png&#34; alt=&#34;ide&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;エディタ部分に、下記のプログラムをコピーして貼り付けましょう（行番号までコピーしてしまわないようご注意ください）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
void setup() {
}
void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下記でプログラムの内容を解説しています。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ボードを選択&#34;&gt;■ボードを選択&lt;/h4&gt;
&lt;p&gt;メニューの&lt;strong&gt;&lt;code&gt;ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code&gt;&lt;/strong&gt;を選択します。この際、ボードは使っているリビジョンに合わせて選択してください。（参照：&lt;a href=&#34;https://dotstud.io/docs/nefrybt-setup-revision/&#34;&gt;リビジョンを確認&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;例えば、使っている基板がR3の場合は&lt;strong&gt;&lt;code&gt;ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code&gt;&lt;/strong&gt;を選択します（ハンズオンでは全てR3を使用しています）。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/select_board.png&#34; alt=&#34;select_board&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/select_board2.png&#34; alt=&#34;select_board2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;シリアルポートを選択&#34;&gt;■シリアルポートを選択&lt;/h4&gt;
&lt;p&gt;Nefry BTをPCのUSBポートにさします。プログラムはこのポートを介して、シリアル通信でNefry BTに流し込まれます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/power_supply.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Macの場合は、メニューの&lt;strong&gt;&lt;code&gt;ツール &amp;gt; シリアルポート &amp;gt; /dev/cu.usbserial-xxxxxx&lt;/code&gt;&lt;/strong&gt;を選択します。環境によっては&lt;strong&gt;&lt;code&gt;/dev/tty.usbserial-xxxxxx&lt;/code&gt;&lt;/strong&gt;などの場合もあります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/select_port.png&#34; alt=&#34;select_port&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Windowsの場合は、&lt;strong&gt;&lt;code&gt;ツール &amp;gt; シリアルポート &amp;gt; /dev/COM-XX&lt;/code&gt;&lt;/strong&gt;を選択します。&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;2&#34;&gt;
※Nefry BTを抜き差しすると、シリアルポートの選択が解除される場合があります。適宜確認しましょう。
&lt;/font&gt;&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■シリアルポートが選択できない方&lt;/p&gt;
USBドライバのインストールが必要な場合があります。「&lt;a href=&#34;https://dotstud.io/docs/nefrybt-error-faq/#arduino-ideでシリアルポートが見つからない-書き込めない&#34;&gt;Arduino IDEでシリアルポートが見つからない・書き込めない&lt;/a&gt;」を参照して、USBを認識させるためのドライバをインストールしてください。また、Arduino IDEの再起動やUSBの抜き差しで認識する場合があります。
&lt;/section&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■PCにUSB接続できない方&lt;/p&gt;
セキュリティやポートの問題でPCにUSB接続できない方は、&lt;a href=&#34;https://dotstud.io/docs/nefrybt-program-zip/&#34;&gt;Wi-Fi経由でプログラムのアップロード&lt;/a&gt;が可能です。その場合、下記の書き込み手順は不要です。給電はコンセントやモバイルバッテリーから直接行ってください。
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;名前をつけて保存&#34;&gt;■名前をつけて保存&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ファイル&amp;gt;名前をつけて保存&lt;/code&gt;&lt;/strong&gt;を選択して保存します。「NefryLedBlink」など、後からみてわかりやすい名前がオススメです。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;プログラムを書き込む&#34;&gt;■プログラムを書き込む&lt;/h4&gt;
&lt;p&gt;「✔️」を押してプログラムをコンパイルします。コンパイルとは、プログラムを機械が理解できる（人間には読みづらい）形式に変換することです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/compile.png&#34; alt=&#34;compile&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;この手順は省略しても大丈夫ですが、シンタックス（文法）チェックをしてくれるので実施するのがオススメです。&lt;/p&gt;
&lt;p&gt;左上の「→」ボタンを押してNefry BTにプログラムを書き込みます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/write.png&#34; alt=&#34;write&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ESP32モジュールの特性上、書き込みに1分ほどかかります。エラーが出てしまうときは、「&lt;a href=&#34;https://dotstud.io/docs/nefrybt-error-handling-2/&#34;&gt;コンパイルは成功するのに書き込みが失敗する&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;p&gt;3分以上かかる場合、Nefry BTの不良の可能性があるので申し出てください。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;動作を確認&#34;&gt;■動作を確認&lt;/h4&gt;
&lt;p&gt;起動したら、「青いLEDが1秒ごとに光る」ことを確認しましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3.gif&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LEDがチカチカしました！&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;プログラムの解説&#34;&gt;■プログラムの解説&lt;/h4&gt;
&lt;p&gt;プログラムの要所を説明していきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;冒頭でライブラリを読み込んでいます。Nefry BTのライブラリでできることは「&lt;a href=&#34;https://dotstud.io/docs/nefrybt-liblary/&#34;&gt;Nefryのライブラリ&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void setup() {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;起動時に処理される部分です。今回はなにもしません。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;起動時に繰り返し実行する部分です。&lt;code&gt;//&lt;/code&gt;の後ろには任意のコメントを記入することができます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nefry.setLed()&lt;/code&gt;という関数で、光らせる色合いをRGBの順で指定します。始めにR=0, G=0, B=255を渡しているので、青く光ります。&lt;/p&gt;
&lt;p&gt;続いて&lt;code&gt;Nefry.ndelay()&lt;/code&gt;という関数で次の処理まで指定した時間待ちます。Arduinoでは時間はミリ秒で指定するので、1000は1秒です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nefry.setLed()&lt;/code&gt;に0, 0, 0を渡すことで、LEDはオフになります。オンとオフのあと1秒ずつ待つことで、点滅を表現しています。&lt;/p&gt;
&lt;p&gt;このように、マイコンボードは&lt;strong&gt;①起動時に行う処理&lt;/strong&gt;、&lt;strong&gt;②起動中に繰り返される処理&lt;/strong&gt;をプログラムして扱います。意外と簡単ではないですか……？&lt;/p&gt;
&lt;h3 id=&#34;スイッチを押したらlチカ&#34;&gt;スイッチを押したらLチカ&lt;/h3&gt;
&lt;h4 id=&#34;arduino-ideでプログラムを書く-1&#34;&gt;■Arduino IDEでプログラムを書く&lt;/h4&gt;
&lt;p&gt;同様の手順で新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。おさらいがてら、やってみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;Nefry.h&amp;gt;
void setup() {
// スイッチを有効化
Nefry.enableSW();
}
void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下記でプログラムの内容を解説しています。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;動作を確認-1&#34;&gt;■動作を確認&lt;/h4&gt;
&lt;p&gt;スイッチ（RSTではない方）を押したら、LEDが赤く光ることを確認します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/73185cad56d6374e6ad394eafbfef51d&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/73185cad56d6374e6ad394eafbfef51d.gif&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;プログラムの解説-1&#34;&gt;■プログラムの解説&lt;/h4&gt;
&lt;p&gt;プログラムの要所を説明します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void setup() {
// スイッチを有効化
Nefry.enableSW();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;起動時の処理では、&lt;code&gt;Nefry.enableSW()&lt;/code&gt;という関数でスイッチを有効化しています。マイコンボードでは、入力・出力に使うピンなどは&lt;code&gt;setup()&lt;/code&gt;関数内で有効化します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0);//色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;if(){}&lt;/code&gt;という条件式で、なにか動作させたいときの条件を決めます。&lt;code&gt;Nefry.readSW()&lt;/code&gt;でスイッチが押されたことを取得し、スイッチが押されたら&lt;code&gt;{}&lt;/code&gt;内を実行します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt;内ではLEDを赤く光らせ、1秒間待つ処理をしています。1秒後はまた&lt;code&gt;void loop()&lt;/code&gt;内を実行し、スイッチが押されているかどうか判定します。&lt;/p&gt;
&lt;p&gt;スイッチが押されている以外のときは、青色のLEDを光らせます。&lt;/p&gt;
&lt;h2 id=&#34;オフラインでgroveセンサを試す&#34;&gt;オフラインでGroveセンサを試す&lt;/h2&gt;
&lt;p&gt;次は、配線してセンサのデータを取得してみます。&lt;strong&gt;まずはインターネットに繋がらない電子工作&lt;/strong&gt;、です。&lt;/p&gt;
&lt;p&gt;エラーの切り分け（どこでエラーが起こっているか）を特定するために、自分で開発するときもステップバイステップでできているか確認しつつ進めるのがオススメです。&lt;/p&gt;
&lt;h3 id=&#34;grove-温湿度センサを接続&#34;&gt;Grove 温湿度センサを接続&lt;/h3&gt;
&lt;p&gt;Groveは刺すだけで配線できるのでGNDや信号線などの確認は必要ありませんが、デジタル・アナログ・I2Cなどの通信方法はGroveモジュールによって違います。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/seeed_wiki.png&#34; alt=&#34;seeed_wiki&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;通信方式は温湿度センサの製造元・SeeedStudioの&lt;a href=&#34;http://wiki.seeedstudio.com/Grove-TemperatureAndHumidity_Sensor/&#34;&gt;Wikiページ&lt;/a&gt;を見て確認しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/connect.png&#34; alt=&#34;connect&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;今回は「A0」というソケットに差し込みます。少し硬いですが、カチッと言うまで押し込めます。&lt;strong&gt;配線作業は常に電源オフの状態&lt;/strong&gt; で行います。&lt;/p&gt;
&lt;h3 id=&#34;温湿度センサを扱うライブラリを読み込む&#34;&gt;温湿度センサを扱うライブラリを読み込む&lt;/h3&gt;
&lt;p&gt;温湿度センサを扱うためのライブラリ（※）を追加でダウンロードします。リンク先のページで「Clone or Download」から「Download ZIP」を選択します（2つのページから両方ダウンロードしてください）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adafruit/DHT-sensor-library&#34;&gt;https://github.com/adafruit/DHT-sensor-library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_Sensor&#34;&gt;https://github.com/adafruit/Adafruit_Sensor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/download.png&#34; alt=&#34;download&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Arduino IDEの&lt;strong&gt;&lt;code&gt;スケッチ &amp;gt; ライブラリをインクルード &amp;gt; .ZIP形式のライブラリをインストール&lt;/code&gt;&lt;/strong&gt;から、ダウンロードされたZIPファイルを2つとも追加して完了です。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/library.png&#34; alt=&#34;library&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;section class=&#34;caution&#34;&gt;
&lt;p&gt;■ライブラリとは&lt;/p&gt;
センサや外部サービスを使うために、あらかじめプログラムを書きパッケージ化したものです。既に誰かが作ってくれているものを取り込んだり、自作したりできます。
&lt;/section&gt;
&lt;h3 id=&#34;プログラムを書き込む-1&#34;&gt;プログラムを書き込む&lt;/h3&gt;
&lt;p&gt;新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。書き込み手順は、上記の「&lt;a href=&#34;#まずはLチカ&#34;&gt;まずはLチカ&lt;/a&gt;」を参照してくださいね。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
#define DHTPIN A0
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
void setup() {
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
dht.begin();
}
void loop() {
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
if (isnan(h) || isnan(t)) {
Nefry.println(&amp;quot;読み取りに失敗しました…&amp;quot;);
return;
}
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
}
if (t &amp;gt; 30) {
Nefry.println(&amp;quot;すっごく部屋が暑いよ！&amp;quot;);
}
Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;動作を確認-2&#34;&gt;動作を確認&lt;/h3&gt;
&lt;p&gt;メニューの&lt;strong&gt;&lt;code&gt;ツール&amp;gt;シリアルモニタ&lt;/code&gt;&lt;/strong&gt; を選択して開きます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/serial_monitor.png&#34; alt=&#34;serial_monitor&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;右下のbps設定を「115200bps」に変更します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/215/bps.png&#34; alt=&#34;bps&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;2秒ごとに、シリアルモニタに温度と湿度が表示されて行きます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/1d912b8d68ca7b63eb0c991c262d83f0&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/1d912b8d68ca7b63eb0c991c262d83f0.gif&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;あまり動きがないですが、息を吹きかけると湿度が上がることを確認できます。湿度や温度が上がるとアラートメッセージが出ることを確認できたでしょうか？&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;プログラムの解説-2&#34;&gt;■プログラムの解説&lt;/h4&gt;
&lt;p&gt;プログラムの要所を解説します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ライブラリの読み込み部分です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define DHTPIN A0
#define DHTTYPE DHT11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;#define&lt;/code&gt;で、配線したピンの場所を定義しています。「DHTPIN」という名前の箱に「A0」という値を入れているイメージです。&lt;/p&gt;
&lt;p&gt;こうしておくことで、あとでピンの場所を変えても、ここの値だけ変更すればOKになります。DHTTYPEの値はWikiを参考に入れているだけなので、覚えなくて大丈夫です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void setup()
{
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
dht.begin();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;setup関数内ではセンサの読み込みの開始と、シリアルモニタへの表示メッセージを指定しています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop()
{
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
// 省略
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;loop関数では、まず2秒ごとにループすることを指定しています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dht&lt;/code&gt;関数で湿度と温度の値を読み取っていて、値を&lt;code&gt;h&lt;/code&gt;と&lt;code&gt;t&lt;/code&gt;という変数にそれぞれ入れています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop()
{
// 省略
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
}
if (t &amp;gt; 30) {
Nefry.println(&amp;quot;すっごく部屋が暑いよ！&amp;quot;);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;if() {}&lt;/code&gt; の条件式で、湿度が70を超えた時、温度が30を超えたときの処理をそれぞれ指定しています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;それ以外のときは温度・湿度を表示させます。&lt;/p&gt;
&lt;h2 id=&#34;webサービスと連携してみる&#34;&gt;Webサービスと連携してみる&lt;/h2&gt;
&lt;p&gt;それでは、湿度が70％を超えたら自分のメールやチャットに通知がくるようにしてみましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/ifttt_action.png&#34; alt=&#34;ifttt_action&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ifttt.com/discover&#34;&gt;IFTTT&lt;/a&gt;で提供されているサービスであれば、LINE、メール、SMS、Twitter、Facebookなどなど、自由に通知先を設定することができます。この記事では、例としてLINEへの通知方法を紹介します。&lt;/p&gt;
&lt;p&gt;余裕のある方は好きな通知先を選択してみてください！&lt;/p&gt;
&lt;h3 id=&#34;iftttにアプレットを作成&#34;&gt;IFTTTにアプレットを作成&lt;/h3&gt;
&lt;p&gt;まずはIFTTTにアプレット（レシピ）を作成します。IFTTTのアカウントを持っていない場合はアカウント取得から進めてください。&lt;/p&gt;
&lt;p&gt;IFTTTのアプレットは「〇〇が起きたら△△する」というようにトリガー（〇〇）とアクション（△△）に分けられます。&lt;/p&gt;
&lt;p&gt;今回は自作のサービスを利用できる「Webhooks」という機能を使い、「Webhooksを受け取ったらLINEに通知する」というアプレットを作ってみます。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;トリガーの作成&#34;&gt;■トリガーの作成&lt;/h4&gt;
&lt;p&gt;IFTTTの&lt;a href=&#34;https://ifttt.com/create&#34;&gt;アプレット作成ページ&lt;/a&gt;から「+this」部分をクリックし、トリガーの作成をします。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;「Webhooks」を検索しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;「Receive a web request」を選択します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;任意のイベント名をつけます。後ほどNefry BTにも登録するのでメモ帳などにコピーしておきましょう（大文字・小文字の区別があるのでコピー＆ペーストがオススメです）。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;アクションの作成&#34;&gt;■アクションの作成&lt;/h4&gt;
&lt;p&gt;続いてアクションを作成します。「+that」から進めましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Nefry BTからの送信を受け取ったら実行したいWebサービスを自由に選びます。今回はサンプルとしてLINEを連携してみますが、Twitter、Slack、Gmail、Googleカレンダー、Facebookなどなど、たぶん思いつく有名Webサービスはだいたいあります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;起こしたいアクションを選びます。LINEは「メッセージを送る」機能のみですが、サービスによってはさまざまなアクションが起こせます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;クリックすると、初回はアカウント認証を求められる気がします。LINEのログインメールアドレスがわからない、という方は、スマホのLINEアプリの設定から確認できます（&lt;strong&gt;&lt;code&gt;友だちタブ &amp;gt; 設定（歯車）ボタン &amp;gt; アカウント&amp;gt;メールアドレス・パスワード&lt;/code&gt;&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;メッセージを送るルーム、メッセージ内容を設定します。「1:1で〜」を選択すると自分個人宛てにメッセージが届きます。メッセージは「LINE Notify」というアカウントから送られる仕組みです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;通知先は自分個人の他に、グループも選択できます。&lt;/p&gt;
&lt;p&gt;メッセージを自由に作成します。Nefry BTから値を送信し受け取りたい場合は、「Add Ingredient」から&lt;code&gt;Value1&lt;/code&gt;を選択します。下記のような場合は、NefryBT側のプログラムで1つ目の値に湿度を送るよう設定します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;このような感じで設定したら、「Create action」で作成します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;最終確認がされるので「Finish」で登録しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;webhooksのsecretkeyを取得&#34;&gt;■WebhooksのSecretKeyを取得&lt;/h4&gt;
&lt;p&gt;Nefry BTとWebhooksと紐付けるための「Secret Key」を取得します。パスワードのようなものです。上部の検索欄からWebhooksを検索しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Webhooksのページに移動します（初回は認証画面が表示されるので「Connect」で開始しましょう）。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;右上の「Setting」に移動します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/15.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;「URL」の末尾に自身のSecret Keyが記載されているのでコピーし、メモしておきます。このKeyは漏れると他人が自分にLINEを送れるようになってしまうので、&lt;strong&gt;Web上に公開しないよう注意&lt;/strong&gt;してください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/16.png&#34; alt=&#34;16&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&#34;プログラムを書き込む-2&#34;&gt;プログラムを書き込む&lt;/h3&gt;
&lt;h4 id=&#34;プログラム&#34;&gt;■プログラム&lt;/h4&gt;
&lt;p&gt;以下のプログラムをNefry BTに書き込みます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;NefryIFTTT.h&amp;gt;
#define DHTPIN A0
#define DHTTYPE DHT11
String Event, SecretKey;
DHT dht(DHTPIN, DHTTYPE);
void setup() {
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;, 0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;, 1);
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
dht.begin();
}
void loop() {
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
if (isnan(h) || isnan(t)) {
Nefry.println(&amp;quot;読み取りに失敗しました…&amp;quot;);
return;
}
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
bool sendData = IFTTT.send(Event, SecretKey, (String)h);
if (!sendData) { //IFTTTにデータ送信が成功したかの判定
Nefry.setLed(255, 0, 0); //エラーの時、赤色点灯
delay(3000);
} else {
Nefry.setLed(0, 255, 0); //成功の時、緑色点灯
delay(3000);
}
Nefry.ndelay(1000 * 30);
}
Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nefry-btにiftttのアカウント情報を設定&#34;&gt;Nefry BTにIFTTTのアカウント情報を設定&lt;/h3&gt;
&lt;p&gt;Nefry BTにディスプレイを取り付けてから起動し、表示されているIPアドレスにアクセスします（画像の場合は&lt;code&gt;http://192.168.4.1/&lt;/code&gt;。人によって違います。 ）。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/ip.png&#34; alt=&#34;ip&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;「Data Store」に移動します。
&lt;img src=&#34;https://dotstud.io/img/docs/nefrybt/ifttt_setup1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;先ほど取得したWebhooksの「Secret Key」と「Event Name」をそれぞれ入力し保存します。Event Nameは大文字・小文字の区別があります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/console.png&#34; alt=&#34;console&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;「Save」で保存するとNefry BTが再起動し、準備は完了です。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&#34;動作を確認-3&#34;&gt;動作を確認&lt;/h3&gt;
&lt;p&gt;さっそく完成したものを動かしてみましょう。&lt;/p&gt;
&lt;p&gt;湿度の値が高くなると……&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gyazo.com/bd6a5ae77bc93459b3c602d82fb00faa&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/bd6a5ae77bc93459b3c602d82fb00faa.gif&#34; alt=&#34;Image from Gyazo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINEに通知されました！&lt;/p&gt;
&lt;p&gt;お疲れ様でした〜！&lt;/p&gt;
&lt;h3 id=&#34;プログラムの解説-3&#34;&gt;プログラムの解説&lt;/h3&gt;
&lt;p&gt;要所を説明します。大事なところはちょっとだけです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void setup() {
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;, 0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;, 1);
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Nefry.setStoreTitle({タイトル}, {チャンネル番号})&lt;/code&gt;関数を使い、Nefry BTのDataStore機能に場所を作っています。この値はNefryポータル側から入力でき、変更があってもプログラムを書き換える必要はありません。&lt;/p&gt;
&lt;p&gt;また値を&lt;code&gt;getStoreStr({チャンネル番号})&lt;/code&gt;で、ポータル側で設定した値を受け取っています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void loop() {
// 省略
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
bool sendData = IFTTT.send(Event, SecretKey, (String)h);
if (!sendData) { //IFTTTにデータ送信が成功したかの判定
Nefry.setLed(255, 0, 0); //エラーの時、赤色点灯
delay(3000);
} else {
Nefry.setLed(0, 255, 0); //成功の時、緑色点灯
delay(3000);
}
Nefry.ndelay(1000 * 30);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先ほど同様湿度が70%を超えたとき、という条件文を作っています。&lt;code&gt;IFTTT.send()&lt;/code&gt;関数を使い、もし送れなかったときは赤いLEDを光らせるという処理をしています（&lt;code&gt;!&lt;/code&gt;は&lt;code&gt;!==&lt;/code&gt;と同義で、&lt;code&gt;FALSE&lt;/code&gt;が返ったときに実行されます）。&lt;/p&gt;
&lt;p&gt;何度も連続して通知が来るとウザいので、一度送ったあとは30秒（1000ミリ秒×30）待ちます。場合によっては30分待つ、1日待つ、などに変更します。&lt;/p&gt;
&lt;h2 id=&#34;応用-いろいろなセンサを試してみる&#34;&gt;応用: いろいろなセンサを試してみる&lt;/h2&gt;
&lt;p&gt;刺すだけで配線できるGroveモジュールは100種類以上あり、いろいろなデータを手軽に扱うことができます。下記ではモジュールと利用例を紹介します。&lt;/p&gt;
&lt;h3 id=&#34;磁気スイッチ&#34;&gt;磁気スイッチ&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/magnetic.png&#34; alt=&#34;magnetic&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;磁石がくっついているか否か、を検知するセンサです。ドアの開閉検知によく使われ、市販の開閉検知装置も磁気センサを使っていることが多いです。&lt;/p&gt;
&lt;p&gt;ドアが閉まっているときは磁石とセンサが接着、開いたときは離れるように設置することで開閉を検知できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例: 開閉検知&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1806/26/news001.html&#34;&gt;磁気スイッチを使ってポストの開閉をメールで通知&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;人感センサ&#34;&gt;人感センサ&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/pir.png&#34; alt=&#34;pir&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;人が近くにいることを検知するセンサです。防犯用の近づくと光るなどに使われます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例: 防犯灯&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://dotstud.io/blog/nefrybt-handson-pir-linebot/&#34;&gt;Nefry BTと人感センサで防犯LINE BOTを作ってみよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;光センサ&#34;&gt;光センサ&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/luminance.png&#34; alt=&#34;luminance&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;照度（光の度合い）を検知します。暗くなったら明かりをつける仕組みや、異常のときに光るパトランプの近くに起き通知するなど、異常検知にも利用できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例: 異常検知&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/n0bisuke/items/257126448cf4db482d43&#34;&gt;NefryでGrove Luminance Sensor(照度センサ)を触るメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超音波距離センサ&#34;&gt;超音波距離センサ&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/wave.png&#34; alt=&#34;wave&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;センサからモノへの距離を測るセンサです。超音波をぶつけて跳ね返りを調べる仕組みです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://qiita.com/HiroyukiYasui/items/cf477e9ce83682513ab1&#34;&gt;NefryBTでGroveセンサーをつなげる時の？について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;サーボモータ&#34;&gt;サーボモータ&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/servo.png&#34; alt=&#34;servo&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;角度を指定して回転させることができるアクチュエータです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://poche-magique.com/2018/05/06/nefrybt_grove_servo/&#34;&gt;[Nefry BTとGrove接続実験] サーボモータ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;カメラ&#34;&gt;カメラ&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/229/camera.png&#34; alt=&#34;camera&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例: 機械学習で画像認識&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/nefrybt-pepper-monitoring-system/&#34;&gt;Node.jsとNefry BTで監視システムを作ろう！ for Pepper #iotlt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;関連情報&#34;&gt;関連情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dotstud.io/shop/nefry-bt-set/&#34;&gt;Nefr BTの購入&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nefry BTはこちらから購入できます（送料無料）。その他にも千石電商、ツクモ、若松通商、共立電子などの実店舗やECサイトで購入できます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dotstud.io/docs/nefrybt/&#34;&gt;Nefry BTドキュメント&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nefry BTでは、IFTTTを使ったWebサービスとの連携や、その他のクラウドサービスとの連携も簡単です。ディスプレイを使ったイラスト描画や、100以上あるGroveモジュールの活用なども、ぜひ試してみてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.facebook.com/groups/nefry&#34;&gt;Nefryユーザーグループ（FB）&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nefryユーザ同士が交流するページです。質問を投稿して解決した事例もたくさんありますので、困った際などはぜひお気軽にご利用ください。開発者もよく登場します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://nefry.connpass.com/event/97692/&#34;&gt;Nefry User Meetup!&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Nefryユーザによる開催イベントです。ハンズオンやLT会、もくもく会などを実施しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://dotstudio.connpass.com/&#34;&gt;dotstudioイベント&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;dotstudioによる開催イベントです。Nefry BT以外の題材を扱うことも多いです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;style&gt;
.caution {
border: 1px solid #BFBFBF;
padding: 1em 2em;
margin: 2em 0;
color: #474747;
background: whitesmoke;/*背景色*/
border-left: double 7px #0B0B61;/*左線*/
font-size: 90%;
}
.caution &gt; p {
font-weight: bold;
margin: 0 0 10px 0;
padding: 0;
}
blockquote {
font-size:80%;
}
.accbox {
margin: 2em 0;
padding: 0;
max-width: 710px;
}
.accbox label {
display: block;
margin: 1.5px 0;
padding : 11px 12px;
color :#ffffff;
font-weight: bold;
background :#2f2f2f;
cursor :pointer;
transition: all 0.5s;
}
.accbox label:hover {
background :#A4A4A4;
}
.accbox input {
display: none;
}
.accbox .accshow {
height: 0;
padding: 0;
overflow: hidden;
opacity: 0;
transition: 0.8s;
}
.cssacc:checked + .accshow {
height: auto;
padding: 5px;
background: #eaeaea;
opacity: 1;
}
&lt;/style&gt;</description></item><item><title>加速度センサとマイコン内蔵LEDで魔法の杖を作ってみた！</title><link>https://dotstud.io/blog/halloween-gadget-witch-stick/</link><pubDate>Wed, 31 Oct 2018 10:07:13 +0900</pubDate><guid>https://dotstud.io/blog/halloween-gadget-witch-stick/</guid><description>
&lt;p&gt;みなさんこんにちは。トボリです。&lt;/p&gt;
&lt;p&gt;私は電子工作が大好きで、いろいろいじったり、&lt;a href=&#34;http://toboli.hatenablog.com/&#34;&gt;ブログ&lt;/a&gt;を書いたりして暮らしています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ところで、みなさん魔法は好きですか？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;電子工作と魔法ってかなり相性いいと思うんですよ。勝手に光る、勝手に動く、勝手にしゃべる……とか！&lt;/p&gt;
&lt;p&gt;気づけばもう10月31日。そう、本日はハロウィンです！電子工作を愛し、電子工作に愛された者として、このイベントで魔法っぽいものを作りたい！！&lt;/p&gt;
&lt;p&gt;魔法といえば、そう、杖ですよね！！&lt;/p&gt;
&lt;p&gt;ということで、今回はみんなが一度は憧れたであろう、&lt;strong&gt;『魔法の杖』&lt;/strong&gt; を作ってみました！&lt;/p&gt;
&lt;h2 id=&#34;振ると光る杖-を作ることにした&#34;&gt;「振ると光る杖」を作ることにした&lt;/h2&gt;
&lt;p&gt;『魔法の杖』っていうからには、できるだけかっこいいことがしたい！
トボリも想像力だけは無駄に豊かなので、うきうきいろんな機能をイメージしました。&lt;/p&gt;
&lt;p&gt;家電を操作したり、一振りでカーテン開けられたりできたらいいなあ～！何か浮かせられたらもっとおもしろいかも……。&lt;/p&gt;
&lt;p&gt;しかし。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 200%&#34;&gt;時間と技術力は限られている！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;今のトボリの技術力でハロウィンまでに作れそうなものといえば、「振ると光る」杖です。&lt;/p&gt;
&lt;p&gt;想像よりだいぶスケールが小さくなりましたが、どんなにささやかな物でもまずは作ることが大事！
と自分に言い聞かせ、とにかく作ってみることにしました！&lt;/p&gt;
&lt;h2 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/parts.png&#34; alt=&#34;parts&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;電子工作初心者の味方、Arduinoを使って作ろうと思います！&lt;/p&gt;
&lt;p&gt;また、なぜミニブレッドボードを使用するかというと……これを見てください！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/breadboard.png&#34; alt=&#34;breadboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;たまたま買った電池ボックスとミニブレッドボードのサイズがほぼ同じ！&lt;/p&gt;
&lt;p&gt;これを見た瞬間、絶対に使おう！と固く決意したのです。
（本当はユニバーサル基板に半田付けしてたんですが、完成間近にピンヘッダの取り付けミスが発覚し、安心安全のブレッドボードでやり直したという経緯があります。つらい。）&lt;/p&gt;
&lt;h2 id=&#34;魔法の杖を作る&#34;&gt;魔法の杖を作る&lt;/h2&gt;
&lt;p&gt;魔法の杖は、下記の3ステップで作って行きます！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;プログラムを書く&lt;/li&gt;
&lt;li&gt;ブレッドボードに回路を作る&lt;/li&gt;
&lt;li&gt;見た目をそれっぽく造形する&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;プログラムを書く&#34;&gt;プログラムを書く&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/arduinoide-setup/&#34;&gt;Arduino IDE&lt;/a&gt;を使ってプログラムを書いていきます。&lt;/p&gt;
&lt;p&gt;加速度センサのサンプルプログラムと、フルカラーLEDのサンプルプログラムをただ合体しただけのお手軽コードです！&lt;/p&gt;
&lt;div class=&#34;accbox&#34;&gt;
&lt;label for=&#34;label1&#34;&gt;クリックしてコードを表示&lt;/labe&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;label1&#34; class=&#34;cssacc&#34; /&gt;
&lt;div class=&#34;accshow&#34;&gt;
&lt;pre&gt;
&lt;code class=&#34;hljs hljs-line-numbers&#34;&gt;
#include &amp;lt;Wire.h&amp;gt;
#include &amp;lt;SparkFun_MMA8452Q.h&amp;gt;
#include &amp;lt;Adafruit_NeoPixel.h&amp;gt;
#define PIN 2
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(1, PIN, NEO_GRB + NEO_KHZ800);
MMA8452Q accel;
void setup() {
Serial.begin(9600);
Serial.println(&#34;MMA8452Q Test Code!&#34;);
pixels.begin();
pixels.show();
accel.init();
}
void loop() {
if(accel.available()) {
accel.read();
printCalculatedAccels();
printOrientation();
Serial.println();
}
}
void printOrientation() {
byte pl = accel.readPL();
switch (pl) {
case PORTRAIT_U:
Serial.print(&#34;Portrait Up&#34;);
break;
case PORTRAIT_D:
Serial.print(&#34;Portrait Down&#34;);
break;
case LANDSCAPE_R:
Serial.print(&#34;Landscape Right&#34;);
rainbow(20);
break;
case LANDSCAPE_L:
Serial.print(&#34;Landscape Left&#34;);
rainbow(20);
break;
case LOCKOUT:
Serial.print(&#34;Flat&#34;);
pixels.show();
break;
}
}
void rainbow(uint8_t wait) {
uint16_t i, j;
for(j=0; j&amp;lt;256; j++) {
for(i=0; i&amp;lt;pixels.numPixels(); i++) {
pixels.setPixelColor(i, Wheel((i+j) &amp; 255));
}
pixels.show();
delay(wait);
}
}
uint32_t Wheel(byte WheelPos) {
WheelPos = 255 - WheelPos;
if(WheelPos &amp;lt; 85) {
return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
}
if(WheelPos &amp;lt; 170) {
WheelPos -= 85;
return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
}
WheelPos -= 170;
return pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ブレッドボードに回路を作る&#34;&gt;ブレッドボードに回路を作る&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/fritzing.png&#34; alt=&#34;fritzing&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;まずはブレッドボードに配線していきます！配線図はこんな感じ。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/circuit.png&#34; alt=&#34;circuit&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;実際に配線したものがこちらです！
LEDの部分だけ基板から離れてしまうので、後で半田付けをします。&lt;/p&gt;
&lt;p&gt;みなさん半田付けって好きですか？トボリは電子工作作業の中で半田付けが一番好きです！
半田の香りは下手なアロマより癒される気がします。&lt;/p&gt;
&lt;h3 id=&#34;見た目をそれっぽく造形する&#34;&gt;見た目をそれっぽく造形する&lt;/h3&gt;
&lt;p&gt;杖はそれっぽい形になればなんでもいいので、3Dプリンタを使える方は使ってもいいし、お好きなやり方で大丈夫です！今回は、粘土をこねて作ってみたので、参考までに材料と作り方も載せておきます！&lt;/p&gt;
&lt;h4 id=&#34;用意するもの-1&#34;&gt;■ 用意するもの&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick1.png&#34; alt=&#34;stick1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;石粉粘土・トイレットペーパーの芯・市販のスティックを用意します。これらは全て百均で買うことができました！いい時代ですね！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick2.png&#34; alt=&#34;stick2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;この市販のスティックを分解し、筒状の棒だけ取り出します。&lt;/p&gt;
&lt;h4 id=&#34;杖の形に造形する&#34;&gt;■ 杖の形に造形する&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick3.png&#34; alt=&#34;stick3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;市販の棒とトイレットペーパーの芯をくっつけます。トイレットペーパーの芯の先に切れ込みを入れて、画像のように内側に折り込みます。トイレットペーパーの芯に棒を差し込んで、テープで固定します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick4.png&#34; alt=&#34;stick4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;中に基板を入れ、筒の中にLEDのワイヤーを通してから、LEDを半田付けします。&lt;/p&gt;
&lt;p&gt;動作チェックをして問題なさそうだったら、どんどん土台に石粉粘土を貼り付けていきます！少しずつ貼り付けて、時々手でなでて滑らかにしていきます。&lt;/p&gt;
&lt;p&gt;乾いたら、カッターで傷をつけ、茶色と黒のアクリル絵の具をインスピレーションに従っていい感じに塗ります。&lt;/p&gt;
&lt;h4 id=&#34;完成&#34;&gt;■ 完成！&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/228/stick5.png&#34; alt=&#34;stick5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;できた～～～！！！
どう見ても、魔法の杖！！少なくとも自分にとっては手塩にかけた最愛の杖！！&lt;/p&gt;
&lt;h2 id=&#34;魔法を発動する&#34;&gt;魔法を発動する&lt;/h2&gt;
&lt;p&gt;さっそく魔法を発動していきましょう！
左右に杖を振ると……虹色の光が出ます！やった～～！魔法っぽい！
&lt;img src=&#34;https://dotstud.io/img/blog/228/demo.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;次こそはもっとうまく作りたい-それが電子工作沼&#34;&gt;次こそはもっとうまく作りたい……それが電子工作沼&lt;/h2&gt;
&lt;p&gt;LEDとセンサーひとつですが、結構楽しいものができました！&lt;/p&gt;
&lt;p&gt;でも、やっぱり本当はこうしたい……もっとかっこいい機能搭載したい……という欲望はとめどなく溢れ、「次こそもっといいものを！」という気持ちになります。&lt;/p&gt;
&lt;p&gt;もうこうなったらズブズブですよね。&lt;b&gt;電子工作沼&lt;/b&gt;に。このハロウィンは今自分が作れる楽しいものを作りまくって、一緒に電子工作沼で溺れましょう！&lt;/p&gt;
&lt;p&gt;ではでは、トボリでした！&lt;/p&gt;
&lt;style&gt;
.accbox {
margin: 2em 0;
padding: 0;
max-width: 710px;
}
.accbox label {
display: block;
margin: 1.5px 0;
padding : 11px 12px;
color :#ffffff;
font-weight: bold;
background :#2f2f2f;
cursor :pointer;
transition: all 0.5s;
}
.accbox label:hover {
background :#A4A4A4;
}
.accbox input {
display: none;
}
.accbox .accshow {
height: 0;
padding: 0;
overflow: hidden;
opacity: 0;
transition: 0.8s;
}
.cssacc:checked + .accshow {
height: auto;
padding: 5px;
background: #eaeaea;
opacity: 1;
}
&lt;/style&gt;</description></item><item><title>【あのバズマイコンを最速？レポート】極小マイコンのトリリオンノード・エンジンを使ってみた！</title><link>https://dotstud.io/blog/trillion-node-engine-sugoi/</link><pubDate>Fri, 05 Oct 2018 02:39:17 +0900</pubDate><guid>https://dotstud.io/blog/trillion-node-engine-sugoi/</guid><description>
&lt;p&gt;こんにちは、宇宙エンジニアのたくろーどんです。&lt;/p&gt;
&lt;p&gt;夏休みなので「何かハッカソンに出てみたい！モノづくりしたい！」と思いつつ、&lt;a href=&#34;http://www.mcpc-jp.org/&#34;&gt;MCPC（モバイルコンピューティング推進コンソーシアム）&lt;/a&gt;が主催する&lt;strong&gt;第1回ナノコン応用ハッカソン&lt;/strong&gt;に参加しました。&lt;/p&gt;
&lt;p&gt;なんとこのハッカソンで&lt;strong&gt;これから流行りそうな凄い開発ボード&lt;/strong&gt;に出会ったので、紹介します。その名も&lt;u&gt;&lt;strong&gt;トリリオンノード・エンジン&lt;/strong&gt;&lt;/u&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;トリリオンノード-エンジン-のここが凄い&#34;&gt;「トリリオンノード・エンジン」のここが凄い！&lt;/h2&gt;
&lt;h3 id=&#34;小さい&#34;&gt;小さい！&lt;/h3&gt;
&lt;p&gt;特筆すべきポイントは、&lt;strong&gt;トリリオンノード・エンジンの小ささ&lt;/strong&gt;でしょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/d8655c77-c996-4684-adb8-61f8799cbce4.jpeg&#34; alt=&#34;P_20180831_162041_vHDR_On.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;そうです、写真でわかるように&lt;strong&gt;本当に小さい&lt;/strong&gt;です。
決して、手が大きいわけではありません。&lt;/p&gt;
&lt;h3 id=&#34;拡張性が高い&#34;&gt;拡張性が高い！&lt;/h3&gt;
&lt;p&gt;ハッカソンの際は、写真のようにキットが渡されました。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/ab86e180-f0c0-afdd-c320-baa25fa92140.jpeg&#34; alt=&#34;P_20180831_100142_vHDR_On.jpg&#34; /&gt;
トリリオンノード・エンジンは、&lt;strong&gt;リーフ&lt;/strong&gt;というパーツで構成され、そのリーフの1つ1つに&lt;strong&gt;センサモジュールやBLE（Bluetooth）、Wi-Fi&lt;/strong&gt;といった機能を持っています。それを&lt;u&gt;&lt;strong&gt;重ねていくことで簡単に機能を拡張することができる&lt;/strong&gt;&lt;/u&gt;仕組みです。&lt;/p&gt;
&lt;p&gt;プログラムは&lt;strong&gt;Arduino IDE&lt;/strong&gt;で書きます。これは、Arduinoを触ったことがある人にやさしいですね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/0c71d1f5-486a-a6c7-d408-1aafa14afcdf.jpeg&#34; alt=&#34;P_20180831_100406_vHDR_On.jpg&#34; /&gt;
評価用キットなので、すべてのリーフが入っているわけではありません。今後は、もっとリーフが増えるようです。例えば、&lt;strong&gt;Groveセンサ用のリーフ&lt;/strong&gt;も予定されているそうです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/725d14ea-0149-83c4-87bd-cdade631bf64.jpeg&#34; alt=&#34;P_20181001_002408_vHDR_On.jpg&#34; /&gt;
Arduinoシールドのリーフもあります。プロトタイプをつくる際に役立ちますね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/6bd3b78b-ca6c-7bce-83bd-cb8a76319c44.jpeg&#34; alt=&#34;P_20181001_002538_vHDR_On.jpg&#34; /&gt;
「29TH Leaf」というリーフを使えば基板に直接実装できます。これもArduino互換リーフの一つです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/371ec114-1346-7596-1d0e-f2c12fa5d0e1.jpeg&#34; alt=&#34;P_20181001_002505_vHDR_On.jpg&#34; /&gt;
電源はUSB給電だけなく、&lt;strong&gt;専用のリーフで単3電池やボタン電池駆動&lt;/strong&gt;させることができます。実装には一手間かかるので、専用のリーフがあるのはとてもありがたいですね。&lt;/p&gt;
&lt;p&gt;例えば&lt;strong&gt;ウェアラブルなものをつくりたい&lt;/strong&gt;と思ったときに、必要な電圧にもよりますが電源回路を実装する必要がなくなります。&lt;/p&gt;
&lt;p&gt;重ねるだけでなく、横方向につなげるリーフもあります。発想の幅が広がりますね。&lt;/p&gt;
&lt;h2 id=&#34;試してみた&#34;&gt;試してみた&lt;/h2&gt;
&lt;p&gt;加速度センサとLEDテープを組み合わせてLチカさせてみました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/44f0d940-e547-66b5-bc20-020f64550d0d.gif&#34; alt=&#34;84472b66eb294f495cb1060bfda8c512.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ハッカソンでは、犬につけてコミュニケーションを加速させることを目的としたウェアラブルデバイスを考えました（完成には程遠かったですが……）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/973f6f0e-7487-ba0d-2aef-e2f245826ef9.jpeg&#34; alt=&#34;42142867_568541853564424_1201723650328231936_n.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;このサイズだから出来ることを考えてみると、様々なところに応用できそう&lt;/strong&gt;ですね。&lt;/p&gt;
&lt;h2 id=&#34;そして平成最後の夏-twitterでバズった&#34;&gt;そして平成最後の夏、Twitterでバズった&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;「トリリオンノード・エンジンが凄い！」といったことをつぶやいてみたら、バズりました&lt;/strong&gt;。
小型で使いやすそうなマイコンに対する関心の高さがうかがえます。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;今日つかったマイコン、やばやばなほど小さいんだけど、BLEも照度センサ、加速度センサ、温度センサ、スタックしていけばwifiモジュールもつくし、ボタン電池で駆動できて、Arduinoで開発できる。拡張も自由自在。スタックするだけでなく、横につなげてウェアラブルも可能。凄すぎるん😳😳😳 &lt;a href=&#34;https://t.co/DGqssgNkCF&#34;&gt;pic.twitter.com/DGqssgNkCF&lt;/a&gt;&lt;/p&gt; たくろーどん (@takudooon) &lt;a href=&#34;https://twitter.com/takudooon/status/1035474814696222722?ref_src=twsrc%5Etfw&#34;&gt;2018年8月31日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;そしてバズったら&lt;strong&gt;「トリリオンノード・エンジンの普及に貢献した」としてハッカソンで特別賞を貰いました&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/212276/aa12c34d-e3f2-a9df-92b8-f4eccb6befb9.jpeg&#34; alt=&#34;IMG_20181001_011537_066.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;人生、何が起こるかわからないですね。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;まだまだドキュメントの整備や使用例はこれからのようです。
来年から販売予定だそうなので、目が離せませんね！&lt;/p&gt;</description></item><item><title>気分はセレブ！手を叩くとディナーを出してくれるデバイスを作ろう</title><link>https://dotstud.io/blog/device-of-celebrity-dinner/</link><pubDate>Thu, 27 Sep 2018 12:34:10 +0900</pubDate><guid>https://dotstud.io/blog/device-of-celebrity-dinner/</guid><description>
&lt;p&gt;こんにちは、たいしょーです。&lt;/p&gt;
&lt;p&gt;いきなりですが、&lt;u&gt;高級なレストランで指パッチンや手を叩いて合図するとウェイターがディナーを出してくれるシーン&lt;/u&gt;を見たことありませんか？&lt;/p&gt;
&lt;h2 id=&#34;憧れのシーンを実現したい&#34;&gt;憧れのシーンを実現したい&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/a7be6476-4059-9a5e-b3d6-9aeaff37db85.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;どこで見たかわからないけどなんとなく想像できる人も多いと思います。&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;&lt;strong&gt;で、私はそのシーンをめっちゃ再現したいわけです。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;何も言わずとも合図を送るだけで自分の好みを把握したウェイターがスッとディナーを出してくれる&amp;hellip;そんなセレブ気分を味わいたい…………！
しかし、高級レストランに行くお金もなければ、行けたとしても恥ずかしくてそんなことやる勇気も出ないので自宅で再現してみましょう。&lt;/p&gt;
&lt;h2 id=&#34;設計&#34;&gt;設計&lt;/h2&gt;
&lt;p&gt;先ほどのイメージ画像通り「合図するとディナーを出してくれる」のが完成イメージですが、より具体的な実現方法を考えてみます。&lt;/p&gt;
&lt;p&gt;考えた結果、&lt;u&gt;手を叩いたことをセンサーで認識して、「&lt;strong&gt;Amazon Dash Button&lt;/strong&gt;」を押すことでディナーをネット注文することにしました。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/0af2d3f4-e6a0-9053-7048-c3968bef281e.jpeg&#34; alt=&#34;概要図&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;準備するもの&#34;&gt;準備するもの&lt;/h2&gt;
&lt;h3 id=&#34;準備するものリスト&#34;&gt;準備するものリスト&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;名前&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;個数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Amazon Dash Button　&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Arduino Uno&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.aitendo.com/product/4070&#34;&gt;拍手制御スイッチ [AKIT-107]&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.aitendo.com/product/3277&#34;&gt;トランジスタ（S8050）&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;デジタル・マイクロサーボ SG90&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ジャンパー線（オス）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;最低6本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;太い輪ゴム&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;半田付けセット&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;手を叩くことを認識するセンサー部分は、aitendo様に「&lt;strong&gt;拍手制御スイッチ&lt;/strong&gt;」というまんま目的に合った素敵キットがあったので注文しました。&lt;/p&gt;
&lt;h2 id=&#34;拍手制御スイッチを組み立てる&#34;&gt;拍手制御スイッチを組み立てる&lt;/h2&gt;
&lt;h3 id=&#34;半田付けする&#34;&gt;半田付けする&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#34;Red&#34;, font size=&#34;3&#34;&gt;&lt;strong&gt;はやく半田付けをしたい人も、このセクションの【注意点!!】を読んでから半田付けをはじめてください。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;拍手制御スイッチは自分で部品を半田付けするキットで届くので組み立てていきましょう。&lt;/p&gt;
&lt;p&gt;半田付けの基本については村田製作所様のこちらのページが参考になります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.murata.com/ja-jp/campaign/ads/japan/elekids/ele/craft/knack/soldering&#34;&gt;電子工作のコツ/はんだ付け | 村田製作所 - Murata&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;さて、今回用意した半田付けセットはこちら。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/8f09c0ef-4ad5-ef26-4aed-b5a74f2b4fd3.jpeg&#34; alt=&#34;はんだセット&#34; /&gt;&lt;/p&gt;
&lt;p&gt;はんだは&lt;strong&gt;線径0.6mm&lt;/strong&gt;のもの、半田ごては温度を&lt;strong&gt;350度&lt;/strong&gt;に設定したものを用意しました。
洗濯バサミみたいな道具はヒートシンクといい、半田ごての熱から熱に弱い部品を守るものですが今回は使いませんでした。&lt;/p&gt;
&lt;p&gt;どの部品を基板のどこにつけるかなのですが、aitendo様のWebページに&lt;a href=&#34;http://www.aitendo.com/product/4070&#34;&gt;部品リストと回路図&lt;/a&gt;が載っているのでこれを見ながら組み立てて行くしかありません……。&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;4&#34;&gt;&lt;strong&gt;これが滅茶苦茶大変です。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;オススメのやり方は最初に部品リストの順番通りに部品を並べてから半田付けを始めることです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/7ff3ab54-423f-7402-cad2-c53d798258f9.jpeg&#34; alt=&#34;部品並べ&#34; /&gt;&lt;/p&gt;
&lt;p&gt;抵抗などは下記のページで抵抗値を入力して5本色帯カラーコードに変換しながら照らし合わせると間違いづらいです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.desmots.net/hitme/audio/iroobi.php&#34;&gt;抵抗 - カラーコード（4本・5本色帯）変換 - 計算ツール&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;font-color-red-注意点-font&#34;&gt;&lt;font color=&#34;red&#34;&gt;注意点!!&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;さて、いよいよ半田付け・・・&lt;strong&gt;と、ちょっと待ってください!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;部品を整理したら&lt;font color=&#34;Red&#34;&gt;&lt;strong&gt;&lt;u&gt;Q4の場所につけるトランジスタ（S9014）をトランジスタ（S8050）に差し替えてください。&lt;/u&gt;&lt;/strong&gt;&lt;/font&gt;
組み立ててから気づいたのですが、ここの部品をすり替えないと組み上がった後正常に動作しません。（予備に2つ基板を買って試しましたがどちらも同じ結果でした）&lt;/p&gt;
&lt;p&gt;部品を差し替えたら今度こそ半田付けをします。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;電解コンデンサ、LED、ダイオード&lt;/strong&gt;は取り付け向きが決まっているので注意しましょう。
電解コンデンサ、LEDは2本ある足の長い方が+側。ダイオードは黒く模様がついている方向を基板の模様と合わせてください。&lt;/p&gt;
&lt;p&gt;無事、組み終わったものがこちらです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/7d0c5023-7edd-ee18-68de-ce8716f791c5.jpeg&#34; alt=&#34;センサ完成&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;試してみる&#34;&gt;試してみる&lt;/h3&gt;
&lt;p&gt;図のような簡単な回路を組んで、ちゃんと動くか試して見ましょう。
拍手スイッチの&lt;strong&gt;Power（入力電圧）は5Vではなく3.3V&lt;/strong&gt;であることに注意してください。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/ff0c1050-c860-4a07-46e8-7ef7e59306d4.png&#34; alt=&#34;AKIT_TEST.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;2&#34;&gt;&lt;u&gt;今回Fritzing用に拍手制御スイッチ（AKIT-107）のカスタムパーツを作りましたので&lt;a href=&#34;https://github.com/TakedaHiromasa/Fritzing/blob/master/aitendo_AKIT-107.fzpz&#34;&gt;こちら&lt;/a&gt;からDLできます。
よかったらどうぞ。&lt;/u&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;回路を組んだらセンサの上で手を叩いて見ます。手を叩くたびにLEDが点灯・消灯すれば成功です！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/50c1369b-9a73-538a-d7da-c8730fc0f0d0.gif&#34; alt=&#34;Claptest.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;（これが楽しくて、30分ぐらいセンサーの上で手を叩いてました。）&lt;/u&gt;&lt;/p&gt;
&lt;h2 id=&#34;サーボの原点合わせ&#34;&gt;サーボの原点合わせ&lt;/h2&gt;
&lt;p&gt;今回用意した「デジタル・マイクロサーボ SG90」は「Amazon Dash Button」を押すのに使います。まずはサーボの原点合わせを行いましょう。&lt;/p&gt;
&lt;p&gt;今回使用するSG90は0~180°まで回るのですが、買った初期状態ではどこを向いているのかわからないので原点として初めに&lt;strong&gt;90°&lt;/strong&gt;に位置合わせを行います。&lt;/p&gt;
&lt;p&gt;まず以下のようにサーボとArduinoを繋ぎましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/7de1f622-c738-1667-9575-601c877556e3.png&#34; alt=&#34;sarvo.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;そして以下のプログラムを書き込んで実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;Servo.h&amp;gt;
Servo myservo;
void setup() {
myservo.attach( 10 );
}
void loop() {
myservo.write( 90 );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでサーボの原点が決まったので、付属のホーンを以下のように真上を向くようにつけます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/a66bca6c-f673-4f92-adea-23871a836489.jpeg&#34; alt=&#34;DSC_0577.JPG&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;全体の配線&#34;&gt;全体の配線&lt;/h3&gt;
&lt;p&gt;いよいよ全体の配線！
以下のように配線します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/16a09bda-31dc-1e91-ec16-cdaa9535296b.png&#34; alt=&#34;全体&#34; /&gt;&lt;/p&gt;
&lt;p&gt;「サーボ」と「Amazon Dash Button」は輪ゴムで合体させました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/aa85d4a4-ac2d-4800-dcfe-f248b70bbe7c.png&#34; alt=&#34;Screenshot_2018-09-17-00-05-37.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;プログラム&#34;&gt;プログラム&lt;/h3&gt;
&lt;p&gt;以下のプログラムを書き込みます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;Servo.h&amp;gt;
Servo myservo;
volatile int flag = 0;
void interruptsw()
{
flag = 1;
}
void setup() {
myservo.attach( 10 );
attachInterrupt(0, interruptsw, CHANGE);
}
void loop() {
if(flag == 1){
myservo.write( 45 );
delay(500);
flag = 0;
}else{
myservo.write( 90 );
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回のプログラムのポイントは&lt;strong&gt;割り込み処理&lt;/strong&gt;と&lt;strong&gt;volatile&lt;/strong&gt;です。&lt;/p&gt;
&lt;h3 id=&#34;割り込み処理&#34;&gt;割り込み処理&lt;/h3&gt;
&lt;p&gt;割り込み処理とは簡単に言えば、&lt;strong&gt;「イベントが起こった時に、コンピュータがどんな処理をしていようと無理やり別の処理を割り込ませる」&lt;/strong&gt;というもの。&lt;/p&gt;
&lt;p&gt;今回のプログラムの場合&lt;strong&gt;attachInterrupt(0, interruptsw, CHANGE);&lt;/strong&gt;で、&lt;strong&gt;どのピンのどんなイベントを監視するか指定&lt;/strong&gt;しています。指定の仕方は、&lt;strong&gt;attachInterrupt([監視するピン], [割り込ませる処理], [反応するイベントの種類]);&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;Arduino Unoでは監視するピンは&lt;strong&gt;0か１&lt;/strong&gt;しか指定できなく、それぞれ&lt;strong&gt;pin2, pin3&lt;/strong&gt;に対応しています。&lt;/p&gt;
&lt;p&gt;今回のプログラムの&lt;strong&gt;attachInterrupt(0, interruptsw, CHANGE);&lt;/strong&gt;とは&lt;strong&gt;「&lt;font color=&#34;Red&#34;&gt;2pin&lt;/font&gt;の信号が&lt;font color=&#34;Red&#34;&gt;CHANGE&lt;/font&gt;（変化するたび）&lt;font color=&#34;Red&#34;&gt;interruptsw&lt;/font&gt;を実行してね」&lt;/strong&gt;という指定をしていることになります。&lt;/p&gt;
&lt;h3 id=&#34;volatile&#34;&gt;volatile&lt;/h3&gt;
&lt;p&gt;volatileとは&lt;strong&gt;「この変数に関係する部分は消さないで！」&lt;/strong&gt;という指定。&lt;/p&gt;
&lt;p&gt;どういうことかというと、プログラムをよく見てもらうと&lt;u&gt;volatileをつけているflagという変数はloop()の中で、何の計算にも使われていません（足すとか引くとか）。&lt;/u&gt;loop()の中では、&lt;strong&gt;if(flag == 1)&lt;/strong&gt;の部分でフラグが１になることを待っていますが、コンピュータはかしこい？ので、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flagはloop()の中で計算に使ってない&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;↓&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;計算に使ってないならflagの値が増えたり減ったりすることは一生ないんじゃね？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;↓&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;じゃあ「flag == 1」になることはありえんね、無駄なんでif文消しまーす&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;↓&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;俺優秀☆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;という具合に&lt;strong&gt;最悪の場合勝手にif文を消します&lt;/strong&gt;。
私たちからすれば「そこは割り込みが起こった時に1が代入されるんだけど・・・」と思いますがコンピュータは知ったこっちゃありません。ということで、計算には使ってないけど割り込みなどで確実に値が変化する変数については&lt;strong&gt;volatile&lt;/strong&gt;をつけて消されないようにしてあげます。&lt;/p&gt;
&lt;h2 id=&#34;実際に使ってみる&#34;&gt;実際に使ってみる&lt;/h2&gt;
&lt;p&gt;さて、難しい話はこれぐらいにして早速完成したデバイスを使ってみましょう！&lt;/p&gt;
&lt;p&gt;より雰囲気を出すために&lt;u&gt;フリー素材のおじさまウェイターの画像をA3用紙4枚刷りで印刷し、そこにデバイスを貼り付けました。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/259617/f505fed2-0763-3db7-4e7c-6e9df474b17e.jpeg&#34; alt=&#34;DSC_0571.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size =&#34;4&#34;&gt;いざ起動・・・・！！！&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/XlFNMBB7lt4&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size =&#34;4&#34;&gt;&lt;strong&gt;無事、手を叩いただけでディナーが届きました！！！！！&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;「シーチキン」の「Amazon Dash Button」を使ったのでシーチキンが届きました。今回使った拍手センサは使い方も簡単なので、他にも音で動くデバイスを作ってみると面白いと思います！&lt;/p&gt;
&lt;p&gt;それでは、みなさん良きセレブライフをー！&lt;/p&gt;</description></item><item><title>Clova CEKでのスキル開発の始め方〜Pythonで開発スタート編〜</title><link>https://dotstud.io/blog/clova-cek-python-tutorial/</link><pubDate>Sat, 15 Sep 2018 10:56:31 +0900</pubDate><guid>https://dotstud.io/blog/clova-cek-python-tutorial/</guid><description>
&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#linebootawards&lt;/code&gt;のハッカソンで奈良先端科学技術大学院大学に来ています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://linedev.connpass.com/event/96813/&#34;&gt;【9/15-16】奈良先端科学技術大学院大学ユビ研×LINE BOOT AWARDSハッカソン&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/clova-cek-nodejs-tutorial/&#34;&gt;前回&lt;/a&gt;はNode.jsでのチュートリアルを書きましたが、今回はPythonでのClovaの開発チュートリアルを書いていきます。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;195&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/clova-cek-nodejs-tutorial/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/195/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
Clova CEKでのスキル開発の始め方〜Node.jsで開発スタート編〜
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-08-03
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
Clova CEKのNode.jsチュートリアルです。カレースキルを作ります。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PythonとClovaの連携をとりあえずやりたい&lt;/strong&gt;って人向けです。&lt;/p&gt;
&lt;p&gt;Clovaってなんぞやって人はこちらの記事たちを先に読んでみてください。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;185&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/clova-ifttt-nefrybt-arduino/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/185/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
ClovaとNefryBT（ESP32）を連携させてみよう
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-07-10
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
Nefry BTを使って電子工作した勤怠システムとClovaを連携させてみました。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;いわゆるClovaのAPIのことをCEKと呼ぶんですよ〜&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;186&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/line-clova-skill-tutorial/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/186/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
本日リリース！LINE Clovaのスキル開発の始め方〜申請編〜 #clova #linebootawards #clova_cek
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-07-12
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
リリース直後ですが、LINEのAIアシスタントClovaでのスキル開発の始め方を紹介します！ LINE BOOT AWARDSで賞金1000万円も狙いましょ。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;そもそも僕がPythonの使い方がイマイチ分かってないので抜けがある可能性高いのでコメントなどいただけたら幸いです。 -&amp;gt; @n0bisuke&lt;/p&gt;
&lt;h2 id=&#34;作るもの&#34;&gt;作るもの&lt;/h2&gt;
&lt;p&gt;今回、「&lt;strong&gt;倦怠期のカップルや夫婦のコミュニケーションを円滑にするスキル&lt;/strong&gt;」 という案が出ていたのでそれをネタにチュートリアルを進めてみたいと思います。&lt;/p&gt;
&lt;p&gt;旦那「&lt;strong&gt;妻の気分を教えて&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;Clova「妻の気分はいい感じです。」&lt;/p&gt;
&lt;p&gt;これを作ってみます。会話のキッカケを増やしたり作ったりするスキルですね。&lt;/p&gt;
&lt;p&gt;完成はこんなイメージです。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;instagram-media&#34; data-instgrm-captioned data-instgrm-permalink=&#34;https://www.instagram.com/p/Bnxv3E6BxYJ/?utm_source=ig_embed_loading&#34; data-instgrm-version=&#34;12&#34; style=&#34; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&#34;&gt;&lt;div style=&#34;padding:16px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/Bnxv3E6BxYJ/?utm_source=ig_embed_loading&#34; style=&#34; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&#34; target=&#34;_blank&#34;&gt; &lt;div style=&#34; display: flex; flex-direction: row; align-items: center;&#34;&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 19% 0;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;display:block; height:50px; margin:0 auto 12px; width:50px;&#34;&gt;&lt;svg width=&#34;50px&#34; height=&#34;50px&#34; viewBox=&#34;0 0 60 60&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34;&gt;&lt;g stroke=&#34;none&#34; stroke-width=&#34;1&#34; fill=&#34;none&#34; fill-rule=&#34;evenodd&#34;&gt;&lt;g transform=&#34;translate(-511.000000, -20.000000)&#34; fill=&#34;#000000&#34;&gt;&lt;g&gt;&lt;path d=&#34;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&#34;padding-top: 8px;&#34;&gt; &lt;div style=&#34; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&#34;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 12.5% 0;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&#34;&gt;&lt;div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: 8px;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: auto;&#34;&gt; &lt;div style=&#34; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&#34; margin:8px 0 0 0; padding:0 4px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/Bnxv3E6BxYJ/?utm_source=ig_embed_loading&#34; style=&#34; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&#34; target=&#34;_blank&#34;&gt;Pythonで書いてみた #倦怠期 #linebootawards #clova_cek&lt;/a&gt;&lt;/p&gt; &lt;p style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&#34;&gt;&lt;a href=&#34;https://www.instagram.com/n0bisuke/?utm_source=ig_embed_loading&#34; style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&#34; target=&#34;_blank&#34;&gt; n0bisuke&lt;/a&gt;さん(@n0bisuke)がシェアした投稿 - &lt;time style=&#34; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&#34; datetime=&#34;2018-09-16T06:42:59+00:00&#34;&gt;2018年 9月月15日午後11時42分PDT&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt; &lt;script async defer src=&#34;//www.instagram.com/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;中身はハローワールド的な内容なので単純にClovaに喋ってもらう入門だと思ってください。&lt;/p&gt;
&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clova Friends Mini (サリー)&lt;/li&gt;
&lt;li&gt;Python v2.7.10&lt;/li&gt;
&lt;li&gt;Google Chrome / macOS Sierra v10.12&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ python -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でPythonのバージョン調べられます。&lt;/p&gt;
&lt;h2 id=&#34;使い始めの申請&#34;&gt;使い始めの申請&lt;/h2&gt;
&lt;p&gt;まずは、&lt;strong&gt;&lt;a href=&#34;https://developers.line.me/console/register/clova-skill/provider/&#34;&gt;新規チャンネル作成&lt;/a&gt;&lt;/strong&gt;からチャンネルを作成します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/line-clova-skill-tutorial/&#34;&gt;こちらの記事&lt;/a&gt;を参照して、利用開始できる状態にしましょう。&lt;/p&gt;
&lt;p&gt;「&lt;a href=&#34;https://dotstud.io/blog/line-clova-skill-tutorial/#チャネルの基本設定&#34;&gt;チャネルの基本設定&lt;/a&gt;」の箇所まで進められばOKです。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;186&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/line-clova-skill-tutorial/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/186/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
本日リリース！LINE Clovaのスキル開発の始め方〜申請編〜 #clova #linebootawards #clova_cek
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-07-12
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
リリース直後ですが、LINEのAIアシスタントClovaでのスキル開発の始め方を紹介します！ LINE BOOT AWARDSで賞金1000万円も狙いましょ。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;ちなみに今回は以下の情報にしてみました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スキル名: 倦怠期Clova&lt;/li&gt;
&lt;li&gt;呼び出し名（メイン）: 倦怠期&lt;/li&gt;
&lt;li&gt;呼び出し名（サブ）: ケンタッキー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/6ba0c91a586bd8f3b20b8a7d5b334219.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;「倦怠期（けんたいき）」と言う言葉が発話した際に「ケンタッキー」と誤認識される可能性があったので&lt;code&gt;呼び出し名（サブ）&lt;/code&gt;にケンタッキーを登録しています。（笑うところ）&lt;/p&gt;
&lt;h2 id=&#34;対話モデルの作成&#34;&gt;対話モデルの作成&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://clova-developers.line.me/cek/#/list&#34;&gt;Clova Developer Center&lt;/a&gt;にアクセスします。&lt;/p&gt;
&lt;p&gt;作成中スキルの一覧が表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/508750a1d4f916de4d0167b71c0a133e.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;作成対象となるスキル名の&lt;code&gt;対話モデル&lt;/code&gt;の&lt;code&gt;修正&lt;/code&gt;を選択します。&lt;/p&gt;
&lt;p&gt;すると別ウィンドウが開き、対話モデルの編集画面になります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/56f974e19cac116d82c4bceb69ef7361.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;なぜここだけ別ウィンドウなのかは永遠の謎。&lt;/p&gt;
&lt;h3 id=&#34;インテントとスロット&#34;&gt;インテントとスロット&lt;/h3&gt;
&lt;p&gt;インテントとスロットを設定していきます。&lt;/p&gt;
&lt;p&gt;個人的にはインテントとスロットの概念を理解すればあとはBOT開発などとそこまで変わらないような印象があります。&lt;/p&gt;
&lt;p&gt;説明はあってるのか不安なので、スマートスピーカー開発に慣れてる人が見て変だったら教えてください笑&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://clova-developers.line.me/guide/#/Design/Design_Guideline_For_Extension.md#Intent&#34;&gt;公式ドキュメントのこの辺&lt;/a&gt;を見ると詳しく載っています。&lt;/p&gt;
&lt;h3 id=&#34;スロット&#34;&gt;スロット&lt;/h3&gt;
&lt;p&gt;スロットはスキル内で扱う名詞情報です。&lt;/p&gt;
&lt;p&gt;今回の「&lt;strong&gt;妻の気分を教えて&lt;/strong&gt;」という発話を認識させる為に&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;気分&lt;/strong&gt;という名詞（スロット）を登録しましょう。&lt;/p&gt;
&lt;p&gt;また、「妻の欲しい物を知りたい」というケースに対応するために&lt;strong&gt;欲しい物&lt;/strong&gt;というスロットを登録します。&lt;/p&gt;
&lt;p&gt;また、その名詞（スロット）はどういう属性かという上位概念を&lt;strong&gt;スロットタイプ&lt;/strong&gt;として設定します。&lt;/p&gt;
&lt;p&gt;では実際に左側のメニューに&lt;code&gt;カスタムスロットタイプ&lt;/code&gt;という項目があるので、そこの&lt;code&gt;+ボタン&lt;/code&gt;を押します。&lt;/p&gt;
&lt;p&gt;ここでスロットタイプのタイトルを決めますが、気分や欲しい物や妻がどういった状態かを知りたいので、ここでは&lt;code&gt;status&lt;/code&gt;（ステータス）としました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;書いてて今回の例が少し分かりにくいかなぁと思ってるのですが、Node.jsのチュートリアルでは「秋葉原のカレー屋を教えて」という例文を利用していて、秋葉原や、神田、神保町といった駅名や地名、場所にちなんだ単語をスロットに登録しました。この場合は&lt;code&gt;area&lt;/code&gt;（エリア）というスロットタイプにしました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b18a2045e972093a352e63cb95bee4d5.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;statusとスロットタイプに入力して作成を押すと、statusというスロットタイプが作成されます。&lt;/p&gt;
&lt;p&gt;僕みたいに覚えにくい人は&lt;code&gt;スロットタイプ=単語群&lt;/code&gt;だと思えば良いと思います。&lt;/p&gt;
&lt;p&gt;次にスロット登録です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;スロットの新たな代表語を入力&lt;/code&gt;の箇所に&lt;code&gt;気分&lt;/code&gt;と入力し、同義語の箇所に読み方や別名を入力します。こうすることで&lt;code&gt;きぶん&lt;/code&gt;などの名称でも認識してくれるようになります。&lt;code&gt;欲しい物&lt;/code&gt;の場合は&lt;code&gt;欲しいもの&lt;/code&gt;や&lt;code&gt;ほしいもの&lt;/code&gt;なども登録してあげると認識精度が上がります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7b0d59e92c34a5609fbd8903989f4e8e.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同義語はカンマで区切って複数登録できます。&lt;/p&gt;
&lt;p&gt;最後に&lt;code&gt;保存&lt;/code&gt;を押してスロットはOKです。個人的には難所50%クリアです。&lt;/p&gt;
&lt;h3 id=&#34;インテント&#34;&gt;インテント&lt;/h3&gt;
&lt;p&gt;インテントは会話や命令の種類です。&lt;/p&gt;
&lt;p&gt;今回の「&lt;strong&gt;妻の気分を教えて&lt;/strong&gt;」は妻の状態を知りたいという命令だと思うので&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WifeStatusIntent&lt;/strong&gt;（ワイフステータス）を作ってみます。&lt;/p&gt;
&lt;p&gt;メニュー左の&lt;code&gt;カスタムインテント&lt;/code&gt;箇所の&lt;code&gt;+ボタン&lt;/code&gt;を選択し、インテント名を入力して進みます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d65b99b0490c65806fd0e569d94ae584.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;次に&lt;code&gt;サンプル発話リスト&lt;/code&gt;箇所に例文を入れていきます。&lt;/p&gt;
&lt;p&gt;先ほどから何回も出ている「&lt;strong&gt;妻の気分を教えて&lt;/strong&gt;」をここに入力してエンターを押しましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/336651e051d1bbcd0dd0a69815ff4780.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;さらに&lt;code&gt;気分&lt;/code&gt;の部分が先ほど登録したスロット部分になるので、&lt;strong&gt;この文章のここがスロットだよ&lt;/strong&gt;ということを登録してあげます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;気分&lt;/code&gt;をドラッグするとスロット登録が出来るフォームが出てくるのでそこで&lt;code&gt;status&lt;/code&gt;と入力してスロット名を登録します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/48ede67edc49b7f57bfe37a6369c998f.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;さらにスロットタイプのプルダウンメニューが出てくるので先ほど作成した&lt;code&gt;status&lt;/code&gt;スロットを紐付けします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/5c22f277ffdd0645bce54882b2650bcc.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最後に保存を押しましょう。&lt;/p&gt;
&lt;h2 id=&#34;対話モデルのビルド&#34;&gt;対話モデルのビルド&lt;/h2&gt;
&lt;p&gt;ここまで来たら左上の&lt;code&gt;ビルド&lt;/code&gt;ボタンを押してひとまず完了です。&lt;/p&gt;
&lt;p&gt;ここ、少し時間かかります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/e4f16af4107c3274d8e84bfefcec150c.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1~2分程度掛かります。昔は10~20分程掛かってたのですが、アップデートで凄く短縮されました。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Clova Developer Centerにおいて作成する対話モデルのビルド時間が大幅に削減されました、ぜひお試しください！これまでご不便をおかけしてごめんなさい、まだまだ色々ありますが少しずつ改善重ねていきますので、皆様と一緒にClovaを育てていければ嬉しいです！よろしくお願いします！！！&lt;a href=&#34;https://twitter.com/hashtag/Clova_CEK?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Clova_CEK&lt;/a&gt; &lt;a href=&#34;https://t.co/1H0zKpevDy&#34;&gt;pic.twitter.com/1H0zKpevDy&lt;/a&gt;&lt;/p&gt; LINE_DEV (@LINE_DEV) &lt;a href=&#34;https://twitter.com/LINE_DEV/status/1035340611233013760?ref_src=twsrc%5Etfw&#34;&gt;2018年8月31日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ただ待つのも時間が勿体無いので次の準備にかかりましょう。&lt;/p&gt;
&lt;h2 id=&#34;pythonの環境準備&#34;&gt;Pythonの環境準備&lt;/h2&gt;
&lt;p&gt;お待たせしました。コード書いていきましょう。&lt;/p&gt;
&lt;p&gt;PythonのSDKがあるのでこちらを使っていきます。&lt;/p&gt;
&lt;p&gt;Python以外の言語のSDKも現時点では&lt;a href=&#34;https://clova-developers.line.me/guide/#/CEK/Guides/Clova_CEK_SDK.md&#34;&gt;Swift/Kotlin/Elixir/Java/Go/Node.js&lt;/a&gt;のSDKが出ています。&lt;/p&gt;
&lt;p&gt;Pythonのインストールがまだな方は公式サイトなどからDLしてインストールして下さい。&lt;/p&gt;
&lt;p&gt;MacだとデフォルトでPythonがインストールされているのでインストールに関してはそこまで問題無いと思います。&lt;/p&gt;
&lt;p&gt;ターミナル操作が不安な方はこちらの記事を先に見ておきましょう。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;158&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/how-to-use-cli/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/158/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
【Mac向け】「黒い画面」の苦手意識を克服しよう！コマンドラインインタフェースの基本操作
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-04-09
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
Macユーザ向けコマンドラインインタフェースの使い方！実は難しくない「黒い画面」の操作方法を覚えていきましょう。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;161&#34;&gt;
&lt;/section&gt;
&lt;h3 id=&#34;準備&#34;&gt;準備&lt;/h3&gt;
&lt;p&gt;以下のコマンドで進めていきます。基本Mac向けなのでWinな人は適宜読み替えをお願いします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pipのインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pipはNode.jsでいうnpmのようなPython向けのモジュールの管理ツールです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo easy_install pip
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Flaskのインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python向けのマイクロフレームワークのFlaskをpip経由でインストールします。
Node.jsでいうExpressのようなものです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install Flask
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;clova-cek-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clova CEKのPython SDKをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install clova-cek-sdk
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;server.pyを作成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;フォルダ作成と準備です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir clova_kentaiki
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ cd clova_kentaiki
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;server.py&lt;/code&gt;を作成してプログラムを書いていきましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ touch server.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;コードを書いていく&#34;&gt;コードを書いていく&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;server.py&lt;/code&gt;に以下のコードを記述します。&lt;/p&gt;
&lt;p&gt;また、スキルの基本情報を登録した際の&lt;code&gt;Extention ID&lt;/code&gt;を利用するので確認しておきましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/line/clova-cek-sdk-python-sample/blob/master/home-extension.py&#34;&gt;公式のサンプル&lt;/a&gt;よりもシンプルにしています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下のコードのapplication_id=&amp;ldquo;MY EXTENSION ID&amp;rdquo;の箇所を自分のExtension IDに書き換えましょう&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# coding: utf-8
from flask import Flask, request, jsonify
import cek
app = Flask(__name__)
clova = cek.Clova(
application_id=&amp;quot;MY EXTENSION ID&amp;quot;,
default_language=&amp;quot;ja&amp;quot;,
debug_mode=True)
# /clova に対してのPOSTリクエストを受け付けるサーバーを立てる
@app.route(&#39;/clova&#39;, methods=[&#39;POST&#39;])
def my_service():
body_dict = clova.route(body=request.data, header=request.headers)
response = jsonify(body_dict)
response.headers[&#39;Content-Type&#39;] = &#39;application/json;charset-UTF-8&#39;
return response
# 起動時の処理
@clova.handle.launch
def launch_request_handler(clova_request):
welcome_japanese = cek.Message(message=&amp;quot;調子どうだい？&amp;quot;, language=&amp;quot;ja&amp;quot;)
response = clova.response([welcome_japanese])
return response
# WifeStatusIntentの発火箇所
@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)
def wife_status_handler(clova_request):
print(&amp;quot;ワイフインテント&amp;quot;)
message_japanese = cek.Message(message=&amp;quot;奥さんの気分はいい感じです&amp;quot;, language=&amp;quot;ja&amp;quot;)
response = clova.response([message_japanese])
return response
# 終了時
@clova.handle.end
def end_handler(clova_request):
# Session ended, this handler can be used to clean up
logger.info(&amp;quot;Session ended.&amp;quot;)
# 認識できなかった場合
@clova.handle.default
def default_handler(request):
return clova.response(&amp;quot;Sorry I don&#39;t understand! Could you please repeat?&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;起動&#34;&gt;起動&lt;/h3&gt;
&lt;p&gt;記述出来たら以下のコマンドで起動しましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ FLASK_APP=server.py flask run
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; * Serving Flask app &amp;quot;server.py&amp;quot;
* Environment: production
WARNING: Do not use the development server in a production environment.
Use a production WSGI server instead.
* Debug mode: off
* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;で起動です。エラーがなければとりあえずOKです。&lt;/p&gt;
&lt;p&gt;5000番ポートでサーバーが起動します。&lt;/p&gt;
&lt;h2 id=&#34;ngrokでホスティングせずに疎通確認&#34;&gt;ngrokでホスティングせずに疎通確認&lt;/h2&gt;
&lt;p&gt;ngrokというトンネリングツールを使ってローカル開発が出来るようにしましょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://ngrok.com/&#34;&gt;https://ngrok.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.qiitausercontent.com/f97d3442e199ccc5272c34c3eb5a964348660a9a/68747470733a2f2f6e67726f6b2e636f6d2f7374617469632f696d672f776562686f6f6b732e706e67&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;LINE BOTの開発でも同様ですが、&lt;strong&gt;通常はHTTPS対応したサーバーにプログラムをホスティングしてClovaと通信させます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPS対応したサーバーを用意するのは骨が折れるのとホスティングして失敗するとエラー修正が大変なので、ローカル開発で最初は挙動確認するのが個人的にはおすすめです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ngrokを使うことでローカル環境をホスティング環境のようにエミュレート出来るイメージです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://qiita.com/n0bisuke/items/ceaa09ef8898bee8369d&#34;&gt;1時間でLINE BOTを作るハンズオン&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ npm i -g ngrok
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでインストール完了です。&lt;/p&gt;
&lt;p&gt;npmを入れてない人はbrew経由でもインストール可能です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew install ngrok
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下のコマンドで利用しますが、ngrokがターミナル占有してしまうので、Pythonを起動するターミナルとは別で立ち上げましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ngrok http 5000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/50a45788dbc18229269745fa1f7d35e5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;こんな雰囲気。右がngrok、左がPythonです。&lt;/p&gt;
&lt;p&gt;ngrokを起動すると&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Forwarding https://xxxxxxx.ngrok.io -&amp;gt; localhost:5000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;といった項目が表示されます。&lt;/p&gt;
&lt;p&gt;この&lt;code&gt;https://xxxxxxx.ngrok.io&lt;/code&gt;に&lt;code&gt;/clova&lt;/code&gt;を追加したアドレスをClovaのサーバー設定の&lt;code&gt;ExtensionサーバーのURL&lt;/code&gt;に記載して保存しましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/1e2feeed00daeb97553dfc463b6356ef.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://xxxxxxx.ngrok.io/clova&lt;/code&gt;となります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xxxxxx&lt;/code&gt;の箇所はngrokを再起動すると変わってしまうのでその際は再度サーバー設定を更新してください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これでClovaに話しかけると手元（ローカル環境）のPythonプログラムまでリクエストが来ます。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;テスターでテスト&#34;&gt;テスターでテスト&lt;/h2&gt;
&lt;p&gt;直接話しかけても良いのですが、テスターを使ってみましょう。&lt;/p&gt;
&lt;p&gt;対話モデルのダッシュボードに戻ります。&lt;/p&gt;
&lt;p&gt;たぶんビルドは完了してますよね。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;テスト&lt;/code&gt;を選択し、&lt;code&gt;ユーザーのサンプル発話をテスト&lt;/code&gt;の箇所に「&lt;strong&gt;妻の気分を教えて&lt;/strong&gt;」と入力し&lt;code&gt;テストボタン&lt;/code&gt;押しましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7caed17382c5ac0ca00ad1d51633dc40.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Pythonを起動させているターミナル側で&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ワイフインテント&lt;/code&gt;と表示されていればOKです。&lt;/p&gt;
&lt;p&gt;疎通確認が出来ました！&lt;/p&gt;
&lt;p&gt;コードでいうと&lt;code&gt;@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)&lt;/code&gt;の箇所までリクエストが通ってることになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# WifeStatusIntentの発火箇所
@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)
def wife_status_handler(clova_request):
print(&amp;quot;ワイフインテント&amp;quot;)
message_japanese = cek.Message(message=&amp;quot;奥さんの気分はいい感じです&amp;quot;, language=&amp;quot;ja&amp;quot;)
response = clova.response([message_japanese])
return response
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;エラーが出る場合&#34;&gt;エラーが出る場合&lt;/h3&gt;
&lt;p&gt;エラーが出た人は&lt;code&gt;server.py&lt;/code&gt;内のExtension IDの設定を忘れている可能性が高いので再度チェックしてみましょう。&lt;/p&gt;
&lt;h2 id=&#34;clovaにしゃべらせる&#34;&gt;Clovaにしゃべらせる&lt;/h2&gt;
&lt;p&gt;最後です！&lt;/p&gt;
&lt;h3 id=&#34;スロット情報も取得してみる&#34;&gt;スロット情報も取得してみる&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;server.py&lt;/code&gt;の&lt;code&gt;@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)&lt;/code&gt;の箇所をまるっと差し替えてみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# WifeStatusIntentの発火箇所
@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)
def wife_status_handler(clova_request):
print(&amp;quot;ワイフインテント&amp;quot;)
slot = clova_request.slot_value(&amp;quot;status&amp;quot;)
message_japanese = cek.Message(message=&amp;quot;もう一回言って下さい&amp;quot;, language=&amp;quot;ja&amp;quot;)
if u&amp;quot;気分&amp;quot; in slot:
message_japanese = cek.Message(message=&amp;quot;奥さんの気分はいい感じです&amp;quot;, language=&amp;quot;ja&amp;quot;)
elif u&amp;quot;欲しい物&amp;quot; in slot:
message_japanese = cek.Message(message=&amp;quot;奥さんは旅行に行きたがっています&amp;quot;, language=&amp;quot;ja&amp;quot;)
response = clova.response([message_japanese])
return response
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;clova_request.slot_value(&amp;quot;status&amp;quot;)&lt;/code&gt;にスロット情報が入っているので、あとはif文で判定して喋らせる内容を変更していきます。&lt;/p&gt;
&lt;p&gt;最後の&lt;code&gt;response = clova.response([message_japanese])&lt;/code&gt;を呼ぶことでClovaが喋ってくれます。&lt;/p&gt;
&lt;p&gt;ここまでをまとめたコードは&lt;a href=&#34;https://gist.github.com/n0bisuke/3755c3faaf1ad0fe621af8eaffb9b63f&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;実機テスト&#34;&gt;実機テスト&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;server.py&lt;/code&gt;のサーバーを再起動して試してみましょう。&lt;/p&gt;
&lt;p&gt;起動する際は、&lt;strong&gt;{ウェイクワード} -&amp;gt; {スキル名}を起動して&lt;/strong&gt;となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ウェイクワード: Clovaの呼び名&lt;/li&gt;
&lt;li&gt;スキル名: 基本情報に登録したスキル名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その後、設定したインテントを発話しましょう。&lt;/p&gt;
&lt;p&gt;ということで、人によって違うのですが僕の場合は&lt;code&gt;ねぇ、Clova&lt;/code&gt;がウェイクワードになっていて、今回は&lt;code&gt;倦怠期&lt;/code&gt;というスキル名でした。&lt;/p&gt;
&lt;p&gt;のびすけ: 「&lt;strong&gt;ねぇクローバ&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;Clova: 「ポンっ（LEDが緑色に光る）」&lt;/p&gt;
&lt;p&gt;のびすけ: 「&lt;strong&gt;倦怠期を起動して&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;Clova: 「調子どうだい？」 (← server.pyで記述している)&lt;/p&gt;
&lt;p&gt;Clova: 「ポンっ（LEDが緑色に光る）」&lt;/p&gt;
&lt;p&gt;のびすけ:「&lt;strong&gt;妻の気分を教えて&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;Clova: 「奥さんの気分はいい感じです」 (← server.pyで記述している)&lt;/p&gt;
&lt;p&gt;のびすけ:「&lt;strong&gt;妻の欲しい物を教えて&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;Clova: 「奥さんは旅行に行きたがっています」 (← server.pyで記述している)&lt;/p&gt;
&lt;p&gt;という感じの使い方になります。&lt;/p&gt;
&lt;p&gt;完成動画はこの記事の上部を確認して下さい。↑&lt;/p&gt;
&lt;p&gt;ちなみに、妻が状況を登録するときはこんな感じでやる模様です。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;instagram-media&#34; data-instgrm-captioned data-instgrm-permalink=&#34;https://www.instagram.com/p/BnxRaMqhLIZ/?utm_source=ig_embed_loading&#34; data-instgrm-version=&#34;12&#34; style=&#34; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&#34;&gt;&lt;div style=&#34;padding:16px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BnxRaMqhLIZ/?utm_source=ig_embed_loading&#34; style=&#34; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&#34; target=&#34;_blank&#34;&gt; &lt;div style=&#34; display: flex; flex-direction: row; align-items: center;&#34;&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 19% 0;&#34;&gt;&lt;/div&gt;&lt;div style=&#34;display:block; height:50px; margin:0 auto 12px; width:50px;&#34;&gt;&lt;svg width=&#34;50px&#34; height=&#34;50px&#34; viewBox=&#34;0 0 60 60&#34; version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34;&gt;&lt;g stroke=&#34;none&#34; stroke-width=&#34;1&#34; fill=&#34;none&#34; fill-rule=&#34;evenodd&#34;&gt;&lt;g transform=&#34;translate(-511.000000, -20.000000)&#34; fill=&#34;#000000&#34;&gt;&lt;g&gt;&lt;path d=&#34;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div style=&#34;padding-top: 8px;&#34;&gt; &lt;div style=&#34; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&#34;&gt; View this post on Instagram&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding: 12.5% 0;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&#34;&gt;&lt;div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: 8px;&#34;&gt; &lt;div style=&#34; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;margin-left: auto;&#34;&gt; &lt;div style=&#34; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&#34;&gt;&lt;/div&gt; &lt;div style=&#34; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt; &lt;p style=&#34; margin:8px 0 0 0; padding:0 4px;&#34;&gt; &lt;a href=&#34;https://www.instagram.com/p/BnxRaMqhLIZ/?utm_source=ig_embed_loading&#34; style=&#34; color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;&#34; target=&#34;_blank&#34;&gt;倦怠期clova #linebootawards&lt;/a&gt;&lt;/p&gt; &lt;p style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&#34;&gt;&lt;a href=&#34;https://www.instagram.com/n0bisuke/?utm_source=ig_embed_loading&#34; style=&#34; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;&#34; target=&#34;_blank&#34;&gt; n0bisuke&lt;/a&gt;さん(@n0bisuke)がシェアした投稿 - &lt;time style=&#34; font-family:Arial,sans-serif; font-size:14px; line-height:17px;&#34; datetime=&#34;2018-09-16T02:16:11+00:00&#34;&gt;2018年 9月月15日午後7時16分PDT&lt;/time&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt; &lt;script async defer src=&#34;//www.instagram.com/embed.js&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけ-発話履歴の確認&#34;&gt;おまけ: 発話履歴の確認&lt;/h2&gt;
&lt;p&gt;テスターの&lt;code&gt;発話履歴&lt;/code&gt;を見るとClova側でどんな認識になっているかが分かるのですが&amp;rdquo;妻の&amp;rdquo;が&amp;rdquo;その&amp;rdquo;などに認識されていて認識の揺れが発生してるのが分かりますね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/6a8f698f16fda08bf3efc845bed09ed3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Clovaが発話をうまく認識してくれないときはここを見て確認しましょう。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;こんな感じでとりあえず試す手順を紹介しました。&lt;/p&gt;
&lt;p&gt;ホスティングもnowやherokuを使うと簡単に出来るので&lt;a href=&#34;https://www.dropbox.com/s/547siacriaudy4f/CEK_Handson%1D_0729.pdf?dl=0&#34;&gt;立花さんのハンズオン資料&lt;/a&gt;を参照して理解を深めましょう！&lt;/p&gt;
&lt;p&gt;ホスティングに関しても余裕があれば追記したいと思います。&lt;/p&gt;</description></item></channel></rss>