<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/categories/tips/</link>
    <description>Recent content in Tips on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2018 dotstudio inc.</copyright>
    <lastBuildDate>Tue, 25 Sep 2018 05:46:01 +0900</lastBuildDate>
    <atom:link href="/categories/tips/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>人柱覚悟でさっそくmacOS Mojaveにしてみました。</title>
      <link>https://dotstud.io/blog/macos-mojave-update-process/</link>
      <pubDate>Tue, 25 Sep 2018 05:46:01 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/macos-mojave-update-process/</guid>
      
      <description>

&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;macOS Mojaveが出ましたね。前にSierraのアップデートをした時も初日くらいにやってみたので今回もアップデートしてみたいと思います。&lt;/p&gt;



&lt;section class=&#34;link&#34; id=&#34;022&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/macos-sierra-update-process/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/022/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                人柱覚悟でさっそくmacOS Sierraにしてみました。
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2016-09-23
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                macOS Sierraに早速してみました。Sierraにアップデートする手順とアップデート後の不具合なども載せてます。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;


&lt;p&gt;&lt;strong&gt;ちなみに今回は「実際にmacOS Mojaveにアップデートしてみたレポート」ですので、試す際にもしトラブルが発生しても当メディアでは責任は負いません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;結論から先に言うと &lt;strong&gt;Sierraのときはそこまでアップデートしなくてもよいかもなぁって感じの〆だったんですけど、Mojaveは（今のところは）積極的にオススメしたいアップデートだと思っています。&lt;/strong&gt; 記事書く人にはオススメポイントが多いです。&lt;/p&gt;

&lt;h2 id=&#34;macos-mojave-モハベ&#34;&gt;macOS Mojave （モハベ）&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/4ddc01da4d7dd237928e955545b624a5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「モハベ」&lt;/strong&gt;と読むみたいです。モジャべじゃないよ！&lt;/p&gt;

&lt;p&gt;macOSの新しいやつですね。 新機能などは他のメディアで色々紹介されてるので見てみると良いと思います。&lt;/p&gt;

&lt;p&gt;バージョンは10.14でHigh Sierraの後続版です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gizmodo.jp/2018/09/darkmode-macos-mojave-release.html&#34;&gt;ダークモードがやってきた！ ｢macOS Mojave｣正式リリース&lt;/a&gt;
&lt;a href=&#34;https://applech2.com/archives/20180921-before-upgrade-macos-10-14-mojave.html&#34;&gt;macOS 10.14 Mojaveへアップグレードする前の注意点まとめ。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ダークモードが使えるようになったよ！ってのが大きい気がします。&lt;/p&gt;

&lt;p&gt;詳細は&lt;a href=&#34;https://ja.wikipedia.org/wiki/MacOS_Mojave&#34;&gt;Wikipedia&lt;/a&gt;なども見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/e74d7131d56f3a275fcd41b1216471a3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;アップデートする僕のmacbookのマシンスペック&#34;&gt;アップデートする僕のMacBookのマシンスペック&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;MacBook Pro （Retina 13-inch、 Early2015）&lt;/li&gt;
&lt;li&gt;macOS High Sierra v10.13&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;では人柱覚悟でアップデートしていきます&#34;&gt;では人柱覚悟でアップデートしていきます&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.apple.com/jp/macos/mojave/&#34;&gt;公式サイト&lt;/a&gt;からアップデートしてみます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「パワーに満ちたシンプル。」&lt;/strong&gt;というキャッチコピーはすごくツッコミ入れたいですがスルーして右上の「今すぐアップグレード」からアップグレードします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/8deca35f31807137d53ec5cfacc3e340.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;App StoreのWeb版が開かれて、App Storeアプリで開きますかと聞かれるので開きましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b2db8ec54b706e1fb17c64a96b703408.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;App Storeアプリが起動するのでまずはダウンロードします。 ネットワーク環境にもよると思いますが、15分くらいかかった印象です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3a83f39b45e0d77a9eaf3f3fdc16c5b6.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードが完了するとインストーラーが起動します。&lt;/p&gt;

&lt;p&gt;「続ける」を押して進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/41a0a7ba691b1e564495bb1693024517.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;規約画面になります。「同意する」で進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7626ed2f4bdddd6adcc20455470ea629.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/65bc8dcb6cf4c205c63fd51fed9772cb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;インストールするディスクを選択します。このときディスクの空き領域が無いとインストールできないので空き領域の確保をしておきましょう。僕は全然空いてなくて詰まりました苦笑&lt;/p&gt;

&lt;p&gt;ちなみに、セーフモードで再起動すると容量確保出来る場合が多いです。キャッシュが容量を喰ってる場合が多いのですが、再起動してshiftを押しっぱなしで起動することでセーフモード起動になります。大体の場合はこれでキャッシュがクリアされて容量が劇的に削減出来ます。 僕の場合は10GBほど削減できました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/76a1366f2c5e54b2a6bb8b8147429de9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;容量確保が出来たらハードディスクのアイコンがアクティブになり「インストール」ボタンが押せる状態になります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/55669f85f995f6ea45d5301e17110bd2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;スタートすると残り時間などが表示されるので少し待ちましょう。 僕の場合は17分と表示されましたが、実際はもっと早く終わった気がします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/ee68b983019fd74e9777bc399efc2559.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;インストールする準備ができました。と表示されたら再起動ボタンで再起動しましょう。何回か再起動することもあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/ff083cef222998991d6321dd5abfbd80.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再起動中です。 40分くらいかかった印象です。ご飯でも食べて戻ってくるとちょうどよいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/de6217ddbcd2b8f2fb479adad1b7c9c7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;しばらくして起動しました！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/320e7c9449a4d5f249ca3187c0fba164.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mojavaの初期設定&#34;&gt;Mojavaの初期設定&lt;/h3&gt;

&lt;p&gt;Mojavaの初期設定でApple IDでサインインします。
ちなみに、ここの画面撮り忘れたのでSierraのときのキャプチャです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/022/08_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;iCloudキーチェーンの設定です。あとで設定しても大丈夫だと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/80782a5bbec79762ed6fe450ec3247a9.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;解析ログの提供チェックです。チェックしなくても問題無いです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/5b7f08971e8ff1486112666f44024b35.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ここの最後でやっとダークモードの選択肢が出てきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/d9d7e78c1ee29f3c714bbab6c51649f1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ダークを選択するとウィンドウが黒基調になります。かっこいい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/94dd59c13387880d3f2640d3ceb9eb22.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これで完了です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/488a451308d535eda27068fad694d7f1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;起動すると無事にバージョンが上がっていることが分かります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b79ffcadc6e4d1e6b3da8aa3f6701c41.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そしてFinderなども黒い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/8cb8e22ace2cb6150cf99f0f2d18182d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;もちろんそのままライトテーマで利用することもできます。&lt;/p&gt;

&lt;h2 id=&#34;新機能を試してみる&#34;&gt;新機能を試してみる&lt;/h2&gt;

&lt;p&gt;少し新機能を試してみます。&lt;/p&gt;

&lt;h3 id=&#34;デスクトップをダイナミックデスクトップに&#34;&gt;デスクトップをダイナミックデスクトップに&lt;/h3&gt;

&lt;p&gt;時間帯によってデスクトップ画像の風景が変わるダイナミックデスクトップが追加されています。&lt;/p&gt;

&lt;p&gt;システム環境設定の「デスクトップとスクリーンセーバー」から設定しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7c3725fdb0bd0723f9394af17b716c33.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;クイックアクション&#34;&gt;クイックアクション&lt;/h3&gt;

&lt;p&gt;個人的には &lt;strong&gt;めちゃ便利です。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;アプリを開かなくてもFinderからそのまま処理を実行できます。&lt;/p&gt;

&lt;p&gt;例えば画像をプレビューアプリで編集したい場合などは今まではアプリが起動して編集する流れになっていましたがFinderから編集用のウィンドウが出てきてシュッと編集できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/74a47bbca1477a1a9e767108bb37fc8f.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;編集者やライターさんはかなり重宝する機能な気がします。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;スクリーンショットのプレビュー-編集&#34;&gt;スクリーンショットのプレビュー&amp;amp;編集&lt;/h3&gt;

&lt;p&gt;これも &lt;strong&gt;めちゃ便利&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;今まではスクリーンショットを撮影したらそのまま保存されてましたが、プレビューが右下に出てきて、そこをクリックするとそのまま編集して保存したり、保存しないっていう選択肢も選択できます。&lt;/p&gt;

&lt;p&gt;ちなみにこの画像自体もプレビュー&amp;amp;編集で作ってます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/be73658467a0094f93db5a9608ed251f.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これ、最近のiPhoneだと使える機能なんですけどMacでも早く使いたいなぁと思ってました。&lt;/p&gt;

&lt;p&gt;これも &lt;strong&gt;編集者やライターさんはかなり重宝する機能な気がします。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;スクリーンショットの強化-画面収録&#34;&gt;スクリーンショットの強化&amp;amp;画面収録&lt;/h3&gt;

&lt;p&gt;command+shift+5で起動するスクリーンショットが範囲選択や保存先のフォルダ変更など歯がゆい部分が強化されています。&lt;/p&gt;

&lt;p&gt;また同じコマンドから画面収録もそのままやれるようになっています。
今まではQuick Time Playerの機能などを使ってましたが圧倒的にこっちの方が楽です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3ca9f6c7528e2bc36573bde86ed7240e.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これも &lt;strong&gt;編集者やライターさんはかなり重宝する機能な気がします。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;気になる不具合など&#34;&gt;気になる不具合など&lt;/h2&gt;

&lt;p&gt;今のところ大きな不具合はないですが恒例な感じでGitが動かなくなりました。&lt;/p&gt;

&lt;p&gt;その他発見したら追記していきます。&lt;/p&gt;

&lt;h3 id=&#34;git問題&#34;&gt;Git問題&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://qiita.com/n0bisuke/items/1c60084c8c07b690d693&#34;&gt;macOS MojaveにしたらGitコマンドが動かなくなった&lt;/a&gt;に書きましたが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で入れ直すと直ります。&lt;/p&gt;

&lt;h3 id=&#34;パフォーマンスなどは&#34;&gt;パフォーマンスなどは?&lt;/h3&gt;

&lt;p&gt;むしろ快適になった気がしています。もしかしたら直前のキャッシュクリアの影響なのかもしれないですが文章書いている程度ですが前よりもスムーズPCが動いてる気がしています。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;こんな感じでアップデートできました。&lt;/p&gt;

&lt;p&gt;今回のアップデートですが、画像を扱う人たちにはすごくよい機能アップデートな気がしました。
あと、 &lt;strong&gt;ダークモードはなんかカッコいい&lt;/strong&gt;のでおすすめです笑&lt;/p&gt;

&lt;p&gt;iPhoneのカメラの写真がそのまま取り込まれる機能もあるみたいですがまだ試せて無いのでそのうち試してみたいと思います。これもまた &lt;strong&gt;編集者やライターさんはかなり重宝する機能な気がします。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sierraのときはそこまでアップデートしなくてもよいかもなぁって感じの〆だったんですけど、Mojaveは（今のところは）積極的にオススメしたいアップデートだと思っています。&lt;/p&gt;

&lt;p&gt;使っていくうちに不具合出てきそうですが笑&lt;/p&gt;

&lt;p&gt;僕は問題ありませんでしたが、ハードウェア的な問題などでデータが消えてしまうとかもあるかもしれないので、アップデートする方はくれぐれもお気をつけて自己責任でお願いします！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>無料で手軽！コマンド一つで静的サイトホスティングできるSurgeを試してみた。</title>
      <link>https://dotstud.io/blog/static-site-hosting-surge/</link>
      <pubDate>Sun, 09 Sep 2018 04:58:49 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/static-site-hosting-surge/</guid>
      
      <description>

&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;最近VuePressを触っていて、簡単に静的サイトホスティングできるサービスを探していました。&lt;/p&gt;

&lt;p&gt;そこで発見した&lt;strong&gt;Surge（サージ）というサービスがすごく簡単だった&lt;/strong&gt;ので紹介します。&lt;/p&gt;

&lt;p&gt;（日本語記事なさそうだったので勢いで書いておこう）&lt;/p&gt;

&lt;h2 id=&#34;surgeとは&#34;&gt;Surgeとは&lt;/h2&gt;

&lt;p&gt;静的サイトホスティングが無料で行えるサービスです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;コマンド一発でデプロイが出来る&lt;/strong&gt;のが特徴で、&lt;strong&gt;使い方がすごくシンプルで感動&lt;/strong&gt;しました。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;a href=&#34;https://surge.sh/&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/f25b1dfae03feef05a74739a4385a8eb.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://surge.sh/&#34;&gt;surge公式サイト&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ちなみにサージって読むっぽいです。有料プランもありますがその辺は割愛して無料でできるところを紹介します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/surge&#34;&gt;surge - npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;無料でどこまで使えるの？って気になる人は&lt;a href=&#34;https://surge.sh/help/why-is-surge-free&#34;&gt;Why is Surge free?&lt;/a&gt;という記事もあるので読んでみましょう。&lt;/p&gt;

&lt;h2 id=&#34;surgeのインストールと使い方&#34;&gt;Surgeのインストールと使い方&lt;/h2&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;npm i -g surge
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デプロイ&#34;&gt;デプロイ&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;surge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;font size=&#34;4&#34;&gt;以上!!! &lt;/font&gt;めちゃ簡単ですね。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;でも本当にこれだけなので驚きです。&lt;code&gt;now.sh&lt;/code&gt;に似た使い勝手。&lt;/p&gt;

&lt;p&gt;初めて使うときはメールアドレスとパスワードの入力をターミナル上で求められるのでそこでユーザー登録出来るのも個人的には好きです。&lt;strong&gt;ターミナルだけで完結します&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;デプロイすると&lt;strong&gt;&lt;code&gt;xxxxxxx.surge.sh&lt;/code&gt;&lt;/strong&gt;という形式のURLが発行されるので、アクセスすればOKです。&lt;/p&gt;

&lt;h2 id=&#34;もう少し詳しく&#34;&gt;もう少し詳しく&lt;/h2&gt;

&lt;p&gt;surgeコマンドは、今いる場所を起点にそのままホスティングします。&lt;/p&gt;

&lt;p&gt;例えばmysiteフォルダ内部に&lt;code&gt;index.html&lt;/code&gt;を置いてたとします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd mysite
$ ls
index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mysiteフォルダ内にいる状態で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;surge ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればmysiteフォルダをまるっとホスティングできます。&lt;/p&gt;

&lt;h3 id=&#34;場所を指定してデプロイ&#34;&gt;場所を指定してデプロイ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;surge &amp;lt;フォルダの場所&amp;gt;&lt;/code&gt;という形でデプロイできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;surge ~/myblog/.vuepress/dist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vuepressを使ったデプロイだとこんな感じでした&lt;/p&gt;

&lt;h3 id=&#34;場所とドメインを指定してデプロイ&#34;&gt;場所とドメインを指定してデプロイ&lt;/h3&gt;

&lt;p&gt;さらにドメインを指定してデプロイができます。&lt;/p&gt;

&lt;p&gt;通常のデプロイだと、surgeコマンドでデプロイするたびに新しいドメインが生成されるので、更新性のあるサイトだと使い勝手が良くないです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;surge &amp;lt;フォルダの場所&amp;gt; &amp;lt;ドメイン&amp;gt;&lt;/code&gt;という形でデプロイすれば&lt;strong&gt;毎回同じドメインにデプロイできます。&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;surge ~/myblog/.vuepress/dist hogehoge.surge.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドを何回実行しても&lt;code&gt;hogehoge.surge.sh&lt;/code&gt;にデプロイされるので更新しても安心です。&lt;/p&gt;

&lt;p&gt;確か&lt;code&gt;now.sh&lt;/code&gt;だと毎回ドメインが発行されてaliasを貼り直さないといけない感じだったのでそこが少し手間だなぁと感じてました。この辺は後述します。&lt;/p&gt;

&lt;h2 id=&#34;カスタムドメインも無料で使える&#34;&gt;カスタムドメインも無料で使える&lt;/h2&gt;

&lt;p&gt;無料でカスタムドメインを利用できます。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;https://surge.sh/help/adding-a-custom-domain&#34;&gt;Adding a custom domain - surge&lt;/a&gt;」を見るとやり方が書いてるのですが、利用しているドメイン事業者の管理画面で&lt;code&gt;cname&lt;/code&gt;の値に&lt;code&gt;na-west1.surge.sh&lt;/code&gt;を指定しましょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grasping.studio&lt;/code&gt;というドメインをお名前.comで管理しているので、&lt;code&gt;hogehoge.graspin.studio&lt;/code&gt;を利用したい場合は以下のように設定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/9e316c5d1c6eeeebab84fb08819bdd37.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;更新してしばらく経つ（体感5~10分程度）と&lt;code&gt;hogehoge.graspin.studio&lt;/code&gt;に対してデプロイできるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ surge ~/myblog/.vuepress/dist hogehoge.graspin.studio
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;その他使い方&#34;&gt;その他使い方&lt;/h2&gt;

&lt;p&gt;surgeコマンドのサブコマンドもいくつかあるので紹介します。&lt;/p&gt;

&lt;h3 id=&#34;surge-list-アプリケーション一覧&#34;&gt;&lt;code&gt;surge list&lt;/code&gt; - アプリケーション一覧&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ surge list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/904da5a62e40457539116e012d101418.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;surge-teardown-アプリケーション削除&#34;&gt;&lt;code&gt;surge teardown&lt;/code&gt; - アプリケーション削除&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;teardown&lt;/code&gt;ってあんまり聞かないですけど他のサービスで言うところのrmとかremoveとかと同じような意味合いです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ surge teardown &amp;lt;アプリケーションのドメイン&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;surge-whoami-アカウント情報の確認&#34;&gt;&lt;code&gt;surge whoami&lt;/code&gt; - アカウント情報の確認&lt;/h3&gt;

&lt;p&gt;ログインしているアカウントのメールアドレスが表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ surge whoami
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;surge-logout-アカウントからログアウトする&#34;&gt;&lt;code&gt;surge logout&lt;/code&gt; - アカウントからログアウトする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ surge logout
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;surge-login-ログインしなおす&#34;&gt;&lt;code&gt;surge login&lt;/code&gt; - ログインしなおす&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ surge login
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;他のメンバーと共同でデプロイする&#34;&gt;他のメンバーと共同でデプロイする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;--add&lt;/code&gt;というオプションをつけてデプロイするとアプリケーションに指定したメールアドレスのユーザーもデプロイ出来るようになります。&lt;/p&gt;

&lt;p&gt;ユーザー&lt;code&gt;hogehoge@gmail.com&lt;/code&gt;さんをアプリケーション&lt;code&gt;hogehoge.graspin.studio&lt;/code&gt;へのデプロイ権限を渡しつつ、&lt;code&gt;public&lt;/code&gt;フォルダをデプロイする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;surge --add hogehoge@gmail.com public hogehoge.graspin.studio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この辺りもコマンドラインからやれて便利ですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;surge --remove&lt;/code&gt;でユーザーの権限を削除することもできます。&lt;/p&gt;

&lt;h2 id=&#34;他のサービスと比較してどうか&#34;&gt;他のサービスと比較してどうか?&lt;/h2&gt;

&lt;p&gt;無料で使えるその他のホスティングサービスとの比較です。主観です。&lt;/p&gt;

&lt;p&gt;この辺、実は違う！みたいな話あれば@n0bisukeまでコメントください〜。&lt;/p&gt;

&lt;h3 id=&#34;netlfy&#34;&gt;Netlfy&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlify.com/&#34;&gt;https://www.netlify.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フォルダをドラッグ&amp;amp;ドロップでデプロイ出来るのは個人的に結構好きですが、毎回URLが再発行されてしまうのが少し手間がある印象です。&lt;/p&gt;

&lt;p&gt;netlfyのcliツールもあるみたいですが手順がsurgeよりはある模様&lt;/p&gt;

&lt;h3 id=&#34;heroku&#34;&gt;heroku&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://heroku.com/&#34;&gt;http://heroku.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サーバーサイドのプログラムを含めてデプロイするときには良さそうです。
僕もよく使います。&lt;/p&gt;

&lt;p&gt;デバッグなどでけっこう詰まるのと、surgeほどの手軽さではないです。&lt;/p&gt;

&lt;p&gt;とはいえサーバーサイドプログラムまで利用したかったら選択肢になります。&lt;/p&gt;

&lt;h3 id=&#34;github-pages-bitbucket-pages&#34;&gt;GitHub Pages &amp;amp; Bitbucket Pages&lt;/h3&gt;

&lt;p&gt;GitHub PagesとBitbucket Pagesは使い勝手はほぼ同じ印象で、git pushするだけで公開できます。&lt;/p&gt;

&lt;p&gt;Webエンジニアなら当たり前のように使いますが、SSHやGitコマンドは最初少しハードルがあるかも。&lt;/p&gt;

&lt;p&gt;更新されるまでに少し時間がかかること、GitHubだとソースコードが（無料だと）公開されてしまうのでそこに抵抗感がある人がいるかも。&lt;/p&gt;

&lt;p&gt;静的サイトなのでどっちにしても公開されているようなものだけどなんとなく。&lt;/p&gt;

&lt;h3 id=&#34;gitlab-pages&#34;&gt;GitLab Pages&lt;/h3&gt;

&lt;p&gt;CIを動かして作るのでCIの記述になれてないと最初少しハマるかもしれません。&lt;/p&gt;

&lt;p&gt;その分やれることも多いので個人的には注目してます。&lt;/p&gt;

&lt;h3 id=&#34;now&#34;&gt;now&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.now.sh/&#34;&gt;https://www.now.sh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これはめちゃ便利で&lt;code&gt;now&lt;/code&gt;コマンドだけでデプロイできて&lt;code&gt;surge&lt;/code&gt;とほぼ同じ使い勝手です。更新のたびに毎回URLが変わってしまうのでそこを解消できたら良いなぁと思うのと、同時に無料プランだと作れるアプリケーションの制限があって現状だと毎回削除していくのも結構手間があるなぁという印象です。&lt;/p&gt;

&lt;p&gt;（&lt;code&gt;now&lt;/code&gt;はもしかしたら設定でなんとかなるのかも??）&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Surge&lt;/code&gt;どうでしょう？&lt;/p&gt;

&lt;p&gt;コマンド一発で出来るので、サクッと作成したWebサイトを誰かにシェアしたり、
ハンズオンや授業などでも使いやすいと思います。&lt;/p&gt;

&lt;p&gt;僕も昨日知ったばかりですが今の所すごく良い印象です。&lt;/p&gt;

&lt;p&gt;ぜひ使ってみてください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【取材がこないので自分にインタビューした】未経験からWebエンジニアになったちゃんとく氏がIoTを仕事に選んだ理由</title>
      <link>https://dotstud.io/blog/self-interview-chantoku-chantoku/</link>
      <pubDate>Fri, 31 Aug 2018 03:16:15 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/self-interview-chantoku-chantoku/</guid>
      
      <description>





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/1.png&#34; alt=&#34;1&#34;&gt;

&lt;/center&gt;


&lt;p&gt;こんにちは、&lt;a href=&#34;https://dotstud.io/members/chantoku&#34;&gt;ちゃんとく&lt;/a&gt;です。Webエンジニアから転身し、&lt;strong&gt;技術中心の取材や記事執筆&lt;/strong&gt;を生業としています。&lt;/p&gt;

&lt;p&gt;はい。取材することが多いんですよ。&lt;/p&gt;

&lt;p&gt;取材することが多いんです。&lt;/p&gt;

&lt;p&gt;取材。&lt;/p&gt;

&lt;p&gt;・・・・・・・・・
&lt;br /&gt;&lt;/p&gt;





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/2.png&#34; alt=&#34;2&#34;&gt;

&lt;/center&gt;


&lt;p&gt;&lt;font size=&#34;4&#34;&gt;私への取材、まだですかね？？？？？？？&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;24時間365日受け付けています。雨でも風でも山の上でもお受けします。嘘ですけど。&lt;/p&gt;

&lt;p&gt;待てど暮らせど取材の申し込みがこないので、痺れを切らして&lt;strong&gt;自分自身で取材を行うことにしました&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;ちゃんとくの魅力、全国へ届けーっ☆&lt;/p&gt;





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/3.png&#34; alt=&#34;3&#34;&gt;

&lt;/center&gt;


&lt;p&gt;&lt;font size=&#34;2&#34;&gt;※内容はいたって真面目に書いています。エンジニアを志す人、キャリアに悩む人の後押しになれると幸いです。&lt;/font&gt;&lt;/p&gt;

&lt;h2 id=&#34;嗅覚を信じて突き進む-ちゃんとく氏の自由すぎるキャリアパス&#34;&gt;嗅覚を信じて突き進む。ちゃんとく氏の自由すぎるキャリアパス&lt;/h2&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/00_eyecatch.png&#34; alt=&#34;00_eyecatch&#34;&gt;

&lt;/center&gt;

&lt;section class=&#34;profile_interview&#34;&gt;
&lt;p class=&#34;profile_name&#34;&gt;ちゃんとく（本名: 徳山 由佳）さん&lt;/p&gt;
&lt;p class=&#34;profile_text&#34;&gt;
バックエンドの受託開発、自社サービス開発を経験して退職、フリーランスとしてライター活動を経たのち、2018年4月より現職である&lt;a href=&#34;https://dotstud.io/&#34;&gt;dotstudio株式会社&lt;/a&gt;にエンジニア兼テクニカルライターとして参加。現在はIoT、電子工作、情報教育など広い分野で活動している。Node.jsユーザグループ内の女性コミュニティ「&lt;a href=&#34;https://nodegirls-jp.connpass.com/&#34;&gt;Node女学園&lt;/a&gt;」主催、IoTLTスピンオフコミュニティ「&lt;a href=&#34;https://iotlt.connpass.com/event/94678/&#34;&gt;AIoTLT&lt;/a&gt;」共催。座右の銘は「なんとかなる」。
&lt;/p&gt;
&lt;/section&gt;&lt;/p&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---ちゃんとくさん、今日はよろしくお願いします。もっぱら「いろいろやってるけど結局なにやってるかわからない」と噂のちゃんとくさんですが、まずは最近の活動について教えてください！
&lt;/p&gt;

&lt;p&gt;いまはIoT領域（※）で教育事業を進めている&lt;a href=&#34;https://dotstud.io/&#34;&gt;&lt;strong&gt;dotstudio株式会社&lt;/strong&gt;&lt;/a&gt;という会社で、ライター業を中心に活動しています。とはいえ、エンジニアさんにフォーカスした取材や、技術ナレッジを紹介する、&lt;strong&gt;技術記事限定のテクニカルライター&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;加えて、授業・研修などの講師や技術イベントの主催、育成中の&lt;a href=&#34;https://dotstud.io/&#34;&gt;オウンドメディア&lt;/a&gt;の舵取りや開発など、&lt;u&gt;&lt;strong&gt;「モノ作りは楽しい」ということを伝えるための手段&lt;/strong&gt;&lt;/u&gt;をいろいろと試行錯誤している感じです。いまは会社の人数が少ないので自分の仕事の営業、会社の広報や労務周りも一応私が担当しています。&lt;/p&gt;

&lt;section class=&#34;caution&#34;&gt;
※IoT……Internet of Thingsの略。あらゆるモノがインターネットに繋がる世界観。すごく広い概念。
&lt;/section&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---うーん、幅広いですね！ちゃんとくさんは法学部のご出身ですよね。そこからWebエンジニア、ライター、IoTベンチャーへの転職と、ものすごい舵の切り方をされてますよね。
&lt;/p&gt;

&lt;p&gt;自分でも思い切った選択をしているな、とは思います（笑）。「あ、こうしたい！」と一度思ったら、後先考えずに実行してしまうタイプなんですよね。でも、エンジニア職も現職もすごく楽しんでますし、&lt;strong&gt;結構自分の嗅覚を信用していて&lt;/strong&gt;、思うままに突き進んでいます。&lt;/p&gt;





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/4.png&#34; alt=&#34;4&#34;&gt;

  ─ dotstudio株式会社 メディア事業部 テクニカルライター/エンジニア ちゃんとく氏

&lt;/center&gt;


&lt;p class=&#34;interviewer&#34;&gt;
---ご自身のキャリアを楽しまれているのはいいですね。それぞれのタイミングで、なにか転機があったんですか？
&lt;/p&gt;

&lt;p&gt;学生の頃は技術職に就くという選択肢はまったく頭になくて、違う世界線の話でした。就活でも銀行や商社、好きだった鉄鋼系の企業を受けたりして。でも、「なんとなく肌に合うなあ」って感じて最終的に決めた会社はIT系ベンチャー企業だったんです。&lt;/p&gt;

&lt;p&gt;そこで内定者研修を受けているうちにエンジニア職の紹介を拝見して、「作れる人かっこいいなー、私も作りたいな……。&lt;strong&gt;あ、エンジニアになりたい！&lt;/strong&gt;」と思ってしまったんです。その後大学を留年したこともあって、就活をし直してエンジニア職につける企業を選びました。&lt;/p&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---エンジニア職は向き不向きがあると思うんですが、難しいことはなかったですか？もともとプログラミングの知識があった？
&lt;/p&gt;

&lt;p&gt;もともと6歳の頃からネットサーフィンしていたり、ネトゲ廃人だったりで、パソコン自体を触ることは好きでした。でも&lt;strong&gt;プログラミングに関する知識はまったくなかった&lt;/strong&gt;ので、最初はもう大変でした（笑）「ローカルとサーバーってなんですか？環境構築？JavaとJavaScriptって違うんですか？」って。&lt;/p&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---JavaとJavaScript！&lt;b&gt;ハムとハムスターくらい違う&lt;/b&gt;っていうやつですね（笑）
&lt;/p&gt;

&lt;p&gt;初めは飛び交う言葉についていけず、折れそうなこともありました。でも腐らずにやれたのは、1社目のときの&lt;strong&gt;上司と先輩が手厚くサポートしてくれたことが大きい&lt;/strong&gt;です。今でも定期的に飲みに行ってます（笑）。&lt;/p&gt;

&lt;h2 id=&#34;コミュニティ参加で形成された-技術を楽しむ力&#34;&gt;コミュニティ参加で形成された「技術を楽しむ力」&lt;/h2&gt;

&lt;p&gt;一社目の先輩が&lt;strong&gt;技術を楽しむ方法を教えてくれたこと&lt;/strong&gt;は、キャリア選択に大きな影響を与えたと思います。技術書と睨めっこしているだけでは、ここまで続けられなかったと思いますね。&lt;/p&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---技術を楽しむ、ですか。具体的にはどんな方法だったんですか？
&lt;/p&gt;

&lt;p&gt;大きく分けると2つ、&lt;strong&gt;技術記事とコミュニティ&lt;/strong&gt;です。初めに衝撃を受けたのはQiitaさんが毎年やっている&lt;a href=&#34;https://qiita.com/advent-calendar&#34;&gt;&lt;strong&gt;Advent Calendar&lt;/strong&gt;&lt;/a&gt;ですね。特に&lt;a href=&#34;https://qiita.com/advent-calendar/2015/ouch-hack&#34;&gt;おうちハック2015&lt;/a&gt;がお気に入りで、当時は記事の探し方もあまりわからなかったので、同じ記事を穴があくほど読んでいました。……いま気づいたんですけど、社長ののびすけも書いてますね（笑）。ここから、&lt;u&gt;&lt;strong&gt;「個人でモノを作って発信している人」が憧れの対象になった&lt;/strong&gt;&lt;/u&gt;と思います。&lt;/p&gt;

&lt;p&gt;それから、「同じくらいのレベルのエンジニア仲間を作った方がいい」という先輩のススメで、&lt;strong&gt;勉強会・コミュニティに参加するようになった&lt;/strong&gt;ことも大きいです。実は初めて参加したイベントは、のびすけが主催していた「&lt;a href=&#34;https://mlkcca.connpass.com/event/27083/&#34;&gt;&lt;strong&gt;Milkcocoa&lt;/strong&gt;&lt;/a&gt;」というBaaSのイベントだったんです。&lt;/p&gt;





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/milkcocoa.png&#34; alt=&#34;milkcocoa&#34;&gt;

  ─ ちゃんとく氏とのびすけ氏が初対面だったMilkcocoaオジサン。での集合写真

&lt;/center&gt;


&lt;p class=&#34;interviewer&#34;&gt;
---おお、のびすけさんとの出会い！意外と早い段階で登場しましたね。
&lt;/p&gt;

&lt;p&gt;当時はBaaSもわからず、「名前が可愛いから」って理由でなんとなく選んだだけだったんですけどね（笑）。Milkcocoaや、&lt;a href=&#34;https://techplay.jp/community/techplay&#34;&gt;dots.女子部&lt;/a&gt;（現TECH PLAY女子部）という女性エンジニアコミュニティでの活動を始めて、新人エンジニアの仲間ができて、技術の会話を楽しめるようになりました。そこでエンジニアに不可欠な知識とか、新しい情報をキャッチアップする方法が身についていったと思います。&lt;/p&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---なるほど！エンジニア仲間と喋ることで、基礎力的な部分が形成されるわけですね。
&lt;/p&gt;

&lt;p&gt;エンジニア間の常識っぽいことって、&lt;strong&gt;独学で体系的に学ぶことが難しい&lt;/strong&gt;と思うんです。なので同じ界隈で活動している人たちと話すことは大事だと思っていて、今でもコミュニティ参加はできるだけするようにしています。&lt;strong&gt;勉強会に参加したからといって業務に直結するわけではないので、バランス感覚は大事&lt;/strong&gt;だとは思いますけどね。&lt;/p&gt;

&lt;h2 id=&#34;作れる幅は広いほどいい-モノ作りの枠の捉え方&#34;&gt;作れる幅は広いほどいい。モノ作りの枠の捉え方&lt;/h2&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---Webエンジニアを楽しんでいるところから、IoTベンチャーであるdotstudioに転職されるわけですが、そこにはどんな転機があったんでしょうか。
&lt;/p&gt;

&lt;p&gt;ざっくり言うと、&lt;strong&gt;モノ作りの幅を広げたくなった&lt;/strong&gt;という気持ちの変化でしょうか。Webエンジニアの仕事を退職してフリーランスでちまちま記事を書いているところをのびすけに拾われた経緯があるので、後付けもありますが（笑）。ジョインを決めたのはdotstudioが自分の方向性と合致していると感じたからですけどね。&lt;/p&gt;





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/6.png&#34; alt=&#34;6&#34;&gt;

&lt;/center&gt;


&lt;p&gt;時系列を辿って話すと、Webエンジニアの時代から&lt;a href=&#34;https://iotlt.connpass.com/event/94678/&#34;&gt;IoTLT&lt;/a&gt;というIoT系コミュニティによく参加していたんです。IoTという縛り以外は無しで、参加者が作ったモノや調べたことを各5分でLTするだけのイベントです。&lt;/p&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---のびすけさんが毎月開催されている、日本最大のIoT勉強会コミュニティですね。
&lt;/p&gt;

&lt;p&gt;勉強会なんですけど、毎回参加者の方がみなさん本当にモノ作りを楽しんでいるのが伝わってくるんですよね。「&lt;strong&gt;大の大人がこんなに楽しんでいていいのか&lt;/strong&gt;」ってくらい、みなさん楽しんでいて（笑）。参加するうちに、私自身もWeb技術に留まらずソフトウェア、ハードウェアと興味を持って、もっと幅広い分野でモノ作りをしたいなという気持ちが強くなりました。&lt;/p&gt;





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/iotlt.png&#34; alt=&#34;iotlt&#34;&gt;

  ─ 「もはやLT芸人なんです」と自身で語るほど、LT参加の多いちゃんとく氏（写真はVUILT）

&lt;/center&gt;


&lt;p&gt;法学部を選んだのも、Webエンジニアという職を選んだのも、&lt;strong&gt;その時々で自分が解決できる手段をできるだけ多くしていたい&lt;/strong&gt;という気持ちがあるからなんです。いざ、という時、自分の力で解決できるようにしておきたいんですね。&lt;/p&gt;

&lt;p&gt;インターネットは世界中に届きますから自分の中では圧倒的に強い解決手段だったんですけど、&lt;strong&gt;物理でモノを作れてそれがインターネットに繋がったらもっと強くなるなと&lt;/strong&gt;。そんな単純な理由です。今はIoTという領域ですけど、もし人間の生活の中心がVRに移ったらVRの仕事をするんだと思います。&lt;/p&gt;

&lt;h2 id=&#34;伝えたいことは-モノ作りの楽しさ-だけ&#34;&gt;伝えたいことは「モノ作りの楽しさ」だけ&lt;/h2&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---現状のお仕事では執筆や登壇、イベント開催と、モノ作りよりも発信することをメインにされてますよね。モノ作りのお仕事が中心でなくていいんでしょうか？
&lt;/p&gt;

&lt;p&gt;自分自身が初心者からWebエンジニア、ソフトウェアからハードウェアと移る経験の中で、&lt;strong&gt;学習のハードルが高いシーンがたくさんあった&lt;/strong&gt;んです。私は周りの人やコミュニティの力を借りてやってこれましたが、そこで諦めてしまう人がいたら悲しいなと。&lt;/p&gt;

&lt;p&gt;自分で手を動かしてモノを作っているときが一番楽しいですけど、教えてくれる人がいなかったり、発表の場がなかったりしたら成り立たない部分も多いです。&lt;strong&gt;楽しんで作って、発表したり知見を書き残したりして、次にモノ作りを楽しみたい人の支えになって&lt;/strong&gt;。そういう循環があると最高ですよね。&lt;/p&gt;

&lt;p&gt;なので、&lt;strong&gt;できるだけ多くの人にモノ作りを楽しんでいてほしい&lt;/strong&gt;んです。だから、作ったら面白いかもと思える記事を書いたり、話したり、キッカケとなるようなイベントや授業をしたりしています。&lt;/p&gt;





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/teach.png&#34; alt=&#34;teach&#34;&gt;

  ─ IoTハンズオンの講師を務めるちゃんとく氏

&lt;/center&gt;


&lt;p class=&#34;interviewer&#34;&gt;
---「モノ作りを楽しむ」ために、「モノ作りは楽しいことを伝える」ことがお仕事になったんですね。
&lt;/p&gt;

&lt;p&gt;そうですね。できるだけ楽しいことが伝わるよう、ハードルを低く低くして、全力で変なモノを作ることに取り組んでいます（笑）。少しでも誰かのキッカケになれていれば嬉しいですね。&lt;/p&gt;

&lt;p class=&#34;interviewer&#34;&gt;
---自身が初心者だったからこそ、後押しできる部分は多いかもしれないですね。では最後に、現在のお仕事に対する気持ちを教えてください。
&lt;/p&gt;

&lt;p&gt;私は論理的に考えるのが得意な方ではないし、苦手でやりたくない仕事もたくさんあったし、「エンジニア向いてない！」と思うことはたくさんありました。でも、&lt;strong&gt;手を動かしてモノを作って、動いたときの感動から離れられない&lt;/strong&gt;んですよね。今はライターやイベント開催なども仕事にしていますけど、自分の原点は&lt;strong&gt;モノ作りを楽しむエンジニア&lt;/strong&gt;だと思っています。最高に楽しんでいるという意味で、天職だと思ってます（笑）。&lt;/p&gt;





&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/206/8.png&#34; alt=&#34;8&#34;&gt;

&lt;/center&gt;


&lt;p class=&#34;interviewer&#34;&gt;
---お仕事を全力で楽しんでいることが伝わってきました！キャリア選択では、職能の向き不向きよりも、「楽しむ」ということがなにより重要なのかもしれません。ちゃんとくさん、今日はありがとうございました！
&lt;/p&gt;

&lt;p&gt;（取材・執筆: ちゃんとく / 撮影: のびすけ）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
いかがでしたでしょうか。ちゃんとくの魅力、伝わりましたか？&lt;/p&gt;

&lt;p&gt;&lt;font size=&#34;4&#34;&gt;伝わりましたよね？？？&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ぼく・わたしの方がもっとちゃんとくの魅力を引き出せるぜ！&lt;/strong&gt;という方は、ぜひ取材のお申し込みお待ちしております。なにとぞ！なにとぞ！&lt;/p&gt;

&lt;div class=&#34;service-contact&#34;&gt;
    &lt;a href=&#34;mailto:info@dotstud.io&#34; class=&#34;service-contact--button&#34;&gt;
        MAIL
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
さらに、&lt;strong&gt;おれ・わたしも魅力的な記事を書いてdotstudioに寄稿してやるよ！&lt;/strong&gt;という方もぜひご連絡ください。ライター大募集中です。なにとぞ！なにとぞ！&lt;/p&gt;

&lt;div class=&#34;service-contact&#34;&gt;
    &lt;a href=&#34;mailto:info@dotstud.io&#34; class=&#34;service-contact--button&#34;&gt;
        MAIL
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
また、ちゃんとくは過去にはこんな記事の執筆を行いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codezine.jp/author/1693&#34;&gt;CodeZine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html5experts.jp/tokutoku393/&#34;&gt;HTML5Experts.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kohgakusha.co.jp/io/&#34;&gt;月刊I/O&lt;/a&gt;（雑誌）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/author/218745/&#34;&gt;@IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://next.rikunabi.com/journal/tag/line/&#34;&gt;LINEエンジニア対談企画&lt;/a&gt;（リンク先一部）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://edge.tsumug.com/&#34;&gt;TsumugEdge&lt;/a&gt;（リンク先一部）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エンジニアバックグラウンドを活かした技術系のインタビュー、初心者向け技術ナレッジ記事を得意としていますので、&lt;strong&gt;執筆のご依頼もお待ちしております&lt;/strong&gt;！&lt;/p&gt;

&lt;div class=&#34;service-contact&#34;&gt;
    &lt;a href=&#34;mailto:info@dotstud.io&#34; class=&#34;service-contact--button&#34;&gt;
        MAIL
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;そんなわけで色んなPR記事でした！茶番にお付き合いいただきありがとうございます。&lt;/p&gt;

&lt;p&gt;じゃあの！&lt;/p&gt;

&lt;p&gt;※ちなみに表紙は某記事のパロディでした。&lt;/p&gt;

&lt;section class=&#34;link&#34; id=&#34;&#34;&gt;
    &lt;div class=&#34;link_content&#34;&gt;
            &lt;a href=&#34;https://liginc.co.jp/183367&#34;&gt;&lt;/a&gt;
        &lt;img src=&#34;https://liginc.co.jp/wp-content/uploads/2015/09/7ebedf39188ff99916360d9f621fe538.jpg&#34; alt=&#34;サムネイル&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;link_content&#34;&gt;
        &lt;div class=&#34;link_detail&#34;&gt;
            &lt;div class=&#34;link_title&#34;&gt;
                    課外活動で勉強会を主催していたら会社の事業になった話 #IoTLT | LIG
            &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                2015-09-15
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                    こんにちは、エンジニアののびすけです。今回は課外活動が事業になったお話をします。仕事は仕事で割り切って、業務時間外にやりたいことをやろうと思っている人の心に残れば幸いです。
              &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;

&lt;style&gt;

.profile_interview {
    border: solid 1px black;
    padding: 0 20px;
}

.profile_text {
    font-size: 80%;
}
.interviewer {
    color: #777;
}

.caution {
    border: 1px solid #BFBFBF;
    padding: 1em 2em;
    margin: 2em 0;
    color: #474747;
    background: whitesmoke;/*背景色*/
    border-left: double 7px #0B0B61;/*左線*/
    font-size: 90%;
}

.caution &gt; p {
    font-weight: bold;
    margin: 0 0 10px 0;
    padding: 0;
}
&lt;/style&gt;
</description>
    </item>
    
    <item>
      <title>MacのWi-Fi設定をコマンドラインで！面倒な設定を簡潔に済まして快適なMac生活</title>
      <link>https://dotstud.io/blog/macos-wifi-setup-command/</link>
      <pubDate>Wed, 29 Aug 2018 09:40:49 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/macos-wifi-setup-command/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://dotstud.io/members/n0bisuke&#34;&gt;n0bisuke&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;今日はMacのWi-Fi設定をコマンドラインから行う方法を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;macのwi-fiの再接続はけっこう時間がかかる&#34;&gt;MacのWi-Fiの再接続はけっこう時間がかかる&lt;/h2&gt;

&lt;p&gt;通常はこんな感じで再接続になりますが、 &lt;strong&gt;実際30秒くらい&lt;/strong&gt; はかかってました。
（このGIFでは途中カットしてます）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/9e71e7ca2c6f1c7c5e0bca0a57a21159.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;コマンドからやるとかなり速い&#34;&gt;コマンドからやるとかなり速い&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;コマンドから実行すると6秒くらい&lt;/strong&gt;で再接続できました！&lt;/p&gt;

&lt;p&gt;驚きです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/9f2043a45286942d16335b621a8f900a.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Macのターミナルアプリから&lt;code&gt;networksetup&lt;/code&gt;コマンドで実行できます。以下の３つの実行例があればかなり役に立つと思います。&lt;/p&gt;

&lt;h3 id=&#34;wi-fiをオンにする&#34;&gt;Wi-Fiをオンにする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo networksetup -setairportpower en0 on
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wi-fiをオフにする&#34;&gt;Wi-Fiをオフにする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo networksetup -setairportpower en0 off
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;指定したwi-fiのssidに接続する&#34;&gt;指定したWi-FiのSSIDに接続する&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo networksetup -setairportnetwork en0 &amp;lt;SSID&amp;gt; &amp;lt;PASSWORD&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結構簡単ですね。&lt;/p&gt;

&lt;p&gt;上のGIFでは、オンにするコマンドとSSIDに接続するコマンドを二つ実行しています。&lt;/p&gt;

&lt;h2 id=&#34;iot機器への接続にも役立つ&#34;&gt;IoT機器への接続にも役立つ&lt;/h2&gt;

&lt;p&gt;単純に接続するまでの時間が短縮できるメリットもありますが、Nefry BTやM5StackといったIoTデバイスのWi-Fi設定をする際に、デバイスが発信するアクセスポイントにMacから接続するときにも役立ちます。。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/docs/nefrybt-wifi-setup/&#34;&gt;Nefry BTのWi-Fiセットアップ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/810321bedd5c1d3991c60d9d51704fb1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この際に、会場のWi-Fiの混雑状況によってはうまく繋がらない場合も多いのですが、コマンドから直接指定してあげるとスムーズに接続できる確率があがります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo networksetup -setairportnetwork en0 NefryBT-XXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などで試してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;IoT周りで動いてる人でも意外と知らない知見なのかなと思い書いてみました。&lt;/p&gt;

&lt;p&gt;とくにハンズオンや授業をやる際には重宝するテクニックだと思います。&lt;/p&gt;

&lt;p&gt;それでは！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NodeSchoolでNode.jsの学習を始めよう！#2 - 問題1〜3の解答と解説</title>
      <link>https://dotstud.io/blog/node-school-1-3/</link>
      <pubDate>Fri, 18 May 2018 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/node-school-1-3/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとくです！&lt;/p&gt;

&lt;p&gt;前回の記事で、&lt;strong&gt;NodeSchoolの概要と基本の解き方&lt;/strong&gt;を紹介しました。


&lt;section class=&#34;link&#34; id=&#34;156&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/node-school-before-learn/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/156/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                NodeSchoolでNode.jsの学習を始めよう！インストール手順から基本操作までステップ別解説
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2018-04-20
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                NodeSchoolでNode.jsの学習を進めていきましょう！意外とつまづきやすい操作方法や問題の解き方をステップ別に解説します。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;
&lt;/p&gt;

&lt;p&gt;今回はカリキュラム「&lt;strong&gt;learnyounode&lt;/strong&gt;」の問題1〜3の解答を解説付きで紹介したいと思います！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font size=2&gt;※筆者はMacユーザのため、基本的にMacに沿った説明になっています。Windows向けの説明も書いていますが、わからないときは適宜調べてみてください。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;さっそく問題を解いていきましょう。インストール方法や基本の解き方は前回記事をチェック！


&lt;section class=&#34;link&#34; id=&#34;156&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/node-school-before-learn/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/156/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                NodeSchoolでNode.jsの学習を始めよう！インストール手順から基本操作までステップ別解説
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2018-04-20
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                NodeSchoolでNode.jsの学習を進めていきましょう！意外とつまづきやすい操作方法や問題の解き方をステップ別に解説します。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /your/working/directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まずは解答用のファイルを作成するディレクトリに移動します。パスはご自身のものに置き換えてください。&lt;/p&gt;

&lt;p&gt;おさらいですが、&lt;strong&gt;&lt;code&gt;$&lt;/code&gt;マークはコマンドラインであることを表しているので不要&lt;/strong&gt;ですよ！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ learnyounode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「&lt;strong&gt;learnyounode&lt;/strong&gt;」コマンドでNodeSchoolのカリキュラムを起動します。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/1.png&#34; alt=&#34;1&#34;&gt;

&lt;/center&gt;

こんな画面が立ち上がりましたか？カーソルキーで問題を選択します。1問目の「&lt;strong&gt;こんにちは世界&lt;/strong&gt;」からやっていきましょう！&lt;/p&gt;

&lt;h2 id=&#34;問題1-こんにちは世界&#34;&gt;問題1「こんにちは世界」&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;div class=&#34;question&#34;&gt;
  &lt;div style=&#34;background: #696969; padding: 4px; text-align: center;color: #fff; font-weight: bold;border-radius: 5px 5px 0 0;&#34;&gt;問題1「こんにちは世界」&lt;/div&gt;
  &lt;p style=&#34;padding: 0 15px 20px 15px;&#34;&gt;コンソール (stdout) に &amp;ldquo;こんにちは世界&amp;rdquo;と出力するアプリを書いてください。&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;問題の「コンソール」とは&lt;strong&gt;今表示しているコマンドラインツール&lt;/strong&gt;、「アプリ」とはここでは「&lt;strong&gt;Node.jsのプログラム&lt;/strong&gt;」を意味しています。&lt;/p&gt;

&lt;p&gt;この問題は「&lt;u&gt;実行するとコマンドラインに&amp;rdquo;こんにちは世界&amp;rdquo;と表示させるプログラムを書いてみましょう&lt;/u&gt;」ということです。&lt;/p&gt;

&lt;p&gt;ヒントを読んでみると、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Node.jsのアプリを作るためには .jsという拡張子を持つファイルを新規に作ってJavaScriptを書くだけです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあるので、&lt;code&gt;.js&lt;/code&gt;という拡張子のファイルを作りましょう。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/2.png&#34; alt=&#34;2&#34;&gt;

&lt;/center&gt;

今回は1.jsというファイルを作ったので、エディタでファイルを開き、編集していきます。（操作がよくわからないという方は&lt;a href=&#34;https://dotstud.io/blog/node-school-before-learn/&#34;&gt;前回記事&lt;/a&gt;を確認！）&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/3.png&#34; alt=&#34;3&#34;&gt;

&lt;/center&gt;

さらにヒントを読んでいくと、&lt;code&gt;console.log(&amp;quot;text&amp;quot;)&lt;/code&gt;と書くとコンソールに出力できます、とありますね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt;は「&lt;strong&gt;渡したものをコンソールに表示してね&lt;/strong&gt;」という命令です。関数の&lt;code&gt;()&lt;/code&gt;に入れたものは「&lt;strong&gt;引数&lt;/strong&gt;」と呼ばれ、関数に渡されます。&lt;/p&gt;

&lt;p&gt;上記は&lt;code&gt;console.log()&lt;/code&gt;というメソッドに、&lt;code&gt;&amp;quot;text&amp;quot;&lt;/code&gt;という引数を渡している状態です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;（または&lt;code&gt;&#39;&#39;&lt;/code&gt;）は、型が「&lt;strong&gt;文字列&lt;/strong&gt;」であることを表しています（その他の型は今後登場します）。&lt;/p&gt;

&lt;p&gt;つまり「こんにちは世界」という文字列を表示させたい場合は、&lt;code&gt;console.log()&lt;/code&gt;の引数に&lt;code&gt;&amp;quot;こんにちは世界&amp;quot;&lt;/code&gt;を渡してあげればよいですね！&lt;/p&gt;

&lt;h3 id=&#34;解答&#34;&gt;解答&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;console.log(&amp;quot;こんにちは世界&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解答用のファイルに、上記のプログラムを書き込みましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node 1.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node.jsでファイルを実行して試してみます。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/4.png&#34; alt=&#34;4&#34;&gt;

&lt;/center&gt;

こんにちは世界、と表示されました。これで良さそうですね！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ learnyounode verify 1.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記コマンドを実行して答え合わせをします。正解したら次の問題へ進みましょう！&lt;/p&gt;

&lt;h2 id=&#34;問題2-ベイビーステップ&#34;&gt;問題2「ベイビーステップ」&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;div class=&#34;question&#34;&gt;
  &lt;div style=&#34;background: #696969; padding: 4px; text-align: center;color: #fff; font-weight: bold;border-radius: 5px 5px 0 0;&#34;&gt;問題2「ベイビーステップ」&lt;/div&gt;
  &lt;p style=&#34;padding: 0 15px 20px 15px;&#34;&gt;1つ以上の整数をコマンドライン引数として受け取り、それらを足し合わせた値をコンソール(stdout)に出力するコマンドラインアプリを書いてください。&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ちょっとレベルが上がりました。先ほどは関数に直接引数を渡しましたが、「&lt;strong&gt;コマンドライン引数&lt;/strong&gt;」は、コマンドラインからプログラムに渡すものを指します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;コマンドライン引数を読むためにはグローバル変数の process というオブジェクトが使えます。process には argv という配列のプロパティがあります。その配列の中には全てのコマンドライン引数が入っています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とヒントに書いてあります。&lt;/p&gt;

&lt;p&gt;まず&lt;code&gt;process.argv&lt;/code&gt;の挙動を探るため、&lt;code&gt;console.log()&lt;/code&gt;を使って表示させてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(process.argv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のようなプログラムを書いた&lt;code&gt;.js&lt;/code&gt;ファイルを作成します（&lt;code&gt;2.js&lt;/code&gt;というファイルにしました）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node 2.js &amp;quot;hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プログラムに&lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt;という文字列を渡してみます。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/5.png&#34; alt=&#34;5&#34;&gt;

&lt;/center&gt;

こんな感じの答えが返ってきました。&lt;code&gt;[]&lt;/code&gt;は「&lt;strong&gt;配列&lt;/strong&gt;」を表していて、&lt;code&gt;,&lt;/code&gt;で区切られた3つの要素が入っています。&lt;/p&gt;

&lt;p&gt;1つ目の要素の&lt;code&gt;/Users/yuka/.nodebrew/node/v9.3.0/bin/node&lt;/code&gt;は皆さんのNode.jsがインストールされているパス、2つ目の要素の&lt;code&gt;/Users/yuka/workspace/nodeschool/learnyounode/2.js&lt;/code&gt;は今実行したファイルのパス、3つ目の要素には&lt;strong&gt;渡したコマンドライン引数&lt;/strong&gt;が入っています。&lt;/p&gt;

&lt;p&gt;コマンドライン引数を表示させるには、&lt;strong&gt;&lt;code&gt;process.argv&lt;/code&gt;の3つ目の要素&lt;/strong&gt;を取り出してあげると良さそうです！&lt;/p&gt;

&lt;p&gt;試しにこんなプログラムを書いてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(process.argv[2]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配列の中身の位置を指定して取り出すには、&lt;code&gt;[]&lt;/code&gt;を使います。配列の序列は0から始まるので、3つ目の要素は「0,1,2」で「2」となります。&lt;/p&gt;

&lt;p&gt;このファイルに、先ほどと同様&lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt;を渡してみます。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/6.png&#34; alt=&#34;6&#34;&gt;

&lt;/center&gt;

コマンドライン引数だけを表示することができました！&lt;/p&gt;

&lt;p&gt;では&lt;strong&gt;いくつかの引数を渡して足し算するプログラム&lt;/strong&gt;を書いてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(process.argv[2]+process.argv[3]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんなプログラムを書いてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node 2.js 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行して試してみます。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/7.png&#34; alt=&#34;7&#34;&gt;

&lt;/center&gt;

「2」となって欲しいところ、「11」となってしまいました。&lt;/p&gt;

&lt;p&gt;これは、「1」という文字列と「1」という文字列をくっつけた結果になってしまっています（ちょっとわからない、という人は&lt;code&gt;$ node 2.js &amp;quot;hel&amp;quot; &amp;quot;lo&amp;quot;&lt;/code&gt;など実行してみてください）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;process.argv&lt;/code&gt;の要素は全て文字列になるので、プログラムには「&lt;strong&gt;これは数字だよ！&lt;/strong&gt;」と教えてあげないと、わかってくれないんですね。&lt;/p&gt;

&lt;p&gt;ヒントを読んでみると、数字に変換する方法が書いてあります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;変換するには、数字の前に + を書きます。Number()を使う方法もあります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;数字の前に&lt;code&gt;+&lt;/code&gt;をつけるか、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(+process.argv[2] + +process.argv[3]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Number()&lt;/code&gt;という関数を使って文字列を数字に変換してあげます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log(Number(process.argv[2]) + Number(process.argv[3]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーが出てしまった人は、&lt;code&gt;Number()&lt;/code&gt;の頭文字が大文字になっているか、()の数が合っているかなど確認してみてくださいね。&lt;/p&gt;

&lt;h2 id=&#34;問題3-初めてのi-o&#34;&gt;問題3「初めてのI/O！」&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
&lt;div class=&#34;question&#34;&gt;
  &lt;div style=&#34;background: #696969; padding: 4px; text-align: center;color: #fff; font-weight: bold;border-radius: 5px 5px 0 0;&#34;&gt;問題3「初めてのI/O！」&lt;/div&gt;
  &lt;p style=&#34;padding: 0 15px 20px 15px;&#34;&gt;同期処理をするファイルシステムの関数を使ってファイルの改行文字(\n)の数を出力するアプリを書いてください。&lt;/p&gt;
&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
.question {
  margin: 2em 0;
  background: #f1f1f1;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.22);
  max-width: 450px;
  color: #696969;
}
&lt;/style&gt;

&lt;p&gt;3問目です。この問題は少し難しいので、「ファイルの中身を取り出す」ステップと、「改行を数える」ステップに分けてみます。&lt;/p&gt;

&lt;h3 id=&#34;ファイルの中身を取り出す&#34;&gt;ファイルの中身を取り出す&lt;/h3&gt;

&lt;p&gt;「&lt;strong&gt;同期処理？ファイルシステムの関数？？？&lt;/strong&gt;」となりますね。&lt;/p&gt;

&lt;p&gt;Node.jsには、あらかじめ色々な関数を用意してくれているモジュール（パッケージのようなもの）があります。その一つが&lt;code&gt;fs&lt;/code&gt;（file system）というモジュールです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fs&lt;/code&gt;には、ファイルを扱うためのいろいろな関数が用意されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;モジュールを呼び出すためには、上記のように記述します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var&lt;/code&gt;は、「&lt;strong&gt;変数の宣言&lt;/strong&gt;」です（最近は&lt;code&gt;var&lt;/code&gt;ではなく&lt;code&gt;const&lt;/code&gt;が推奨）。&lt;code&gt;var fs&lt;/code&gt;の&lt;code&gt;fs&lt;/code&gt;は「&lt;strong&gt;変数名&lt;/strong&gt;」で、任意の名前を付けられます。「fs」という名前の箱に、&lt;code&gt;require(&#39;fs&#39;)&lt;/code&gt;の結果を収納しているイメージです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;require()&lt;/code&gt;は&lt;strong&gt;モジュールを呼び出す関数&lt;/strong&gt;、引数には文字列で&lt;strong&gt;モジュールの名前&lt;/strong&gt;を渡します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);
console.log(fs.readFileSync(process.argv[2]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;3.js&lt;/code&gt;というファイルを作って、上記のようなプログラムで&lt;code&gt;fs&lt;/code&gt;の機能を試してみましょう。ヒントによると&lt;code&gt;fs.readFileSync()&lt;/code&gt;の引数には読み込むファイルのパスを指定するので、コマンドライン引数で渡すようにしてみます。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/8.png&#34; alt=&#34;8&#34;&gt;

&lt;/center&gt;

読み込みを試す用に、&lt;code&gt;sample.txt&lt;/code&gt;というテキストファイルを作ってみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node 3.js ./sample.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行して試してみます（&lt;code&gt;./&lt;/code&gt;は現在の位置です）。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/9.png&#34; alt=&#34;9&#34;&gt;

&lt;/center&gt;

こんな結果が出ました。「なんじゃこりゃ！」ですね&lt;/p&gt;

&lt;p&gt;&lt;code&gt;readFileSync()&lt;/code&gt;は「Bufferオブジェクト」という形式でファイルの中身を返します。これを文字列に変換するには、&lt;code&gt;toString()&lt;/code&gt;という関数を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var buf = fs.readFileSync(process.argv[2]);
var text = buf.toString();

console.log(text);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取り出したものを変換してから&lt;code&gt;console.log()&lt;/code&gt;してみましょう。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/10.png&#34; alt=&#34;10&#34;&gt;

&lt;/center&gt;

文字列として取り出すことができました！&lt;/p&gt;

&lt;h3 id=&#34;改行を数える&#34;&gt;改行を数える&lt;/h3&gt;

&lt;p&gt;改行を数えるには、ヒントのように&lt;code&gt;split()&lt;/code&gt;を使ってみます。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScriptの String は .split() 関数を使って分割出来ます。\n を区切り文字として使えば String を1行ずつに分割した Array を受け取ることが出来ます。ただし、ファイルの最後の改行には気をつけてください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下記のようなプログラムで、文字列を&lt;code&gt;\n&lt;/code&gt;で分割してみます（&lt;code&gt;\n&lt;/code&gt;は改行を表しています）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var buf = fs.readFileSync(process.argv[2]);
var text = buf.toString();

var array = text.split(&#39;\n&#39;);
console.log(array);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみます。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/11.png&#34; alt=&#34;11&#34;&gt;

&lt;/center&gt;

ファイルの中身を&lt;code&gt;\n&lt;/code&gt;で区切ることができました！&lt;/p&gt;

&lt;p&gt;ただし、ヒントにあるように、最後に意図しない&lt;code&gt;&#39;&#39;&lt;/code&gt;が入っていますね。これはファイルの最後には改行が入るようになっているためです。&lt;/p&gt;

&lt;p&gt;なので、改行の数を数えるには「要素の数 - 1」をしてあげればよさそうです。&lt;/p&gt;

&lt;p&gt;「こんな関数使いたい！」というときは「JavaScript 配列 要素 数える」などと検索してみましょう。配列の要素を数えるためには、&lt;code&gt;Array.length&lt;/code&gt;というプロパティを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);

var buf = fs.readFileSync(process.argv[2]);
var text = buf.toString();

var array = text.split(&#39;\n&#39;);
var n_num = array.length - 1;

console.log(n_num);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように、&lt;code&gt;配列.length&lt;/code&gt;で要素数を数え、最後の改行分の1を引いてみます。&lt;/p&gt;

&lt;p&gt;



&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/157/12.png&#34; alt=&#34;12&#34;&gt;

&lt;/center&gt;

意図した数字になりました！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ learnyounode verify 3.js&lt;/code&gt;で答え合わせです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;これで「learnyounode」の1〜3問目は終了です。&lt;strong&gt;お疲れ様でした！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;プログラミングを初めて学ぶ方は、新しい情報が多く難しく感じたかもしれません。でも問題を解きながら変数や関数に慣れていけば、&lt;strong&gt;「おっ、こういうことか」とわかる瞬間&lt;/strong&gt;がくるはずです！&lt;/p&gt;

&lt;p&gt;めげずにNode.js勉強頑張っていきましょう！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NodeSchoolでNode.jsの学習を始めよう！インストール手順から基本操作までステップ別解説</title>
      <link>https://dotstud.io/blog/node-school-before-learn/</link>
      <pubDate>Fri, 20 Apr 2018 14:00:26 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/node-school-before-learn/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとくです。&lt;strong&gt;みなさんNode.jsしてますかー！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;dotstudioでは何度も紹介していますが、Node.jsは&lt;u&gt;超超ざっくり言うとサーバサイドで動くJavaScript&lt;/u&gt;ですね。&lt;/p&gt;

&lt;p&gt;これからNode.jsを学びたい！という人も多いと思うのですが、初めてNode.jsを学びたいときにピッタリな「&lt;strong&gt;NodeSchool&lt;/strong&gt;」をご存知でしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://nodeschool.io/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/nodeschool.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
NodeSchoolは&lt;strong&gt;JavaScriptに関するいろいろな授業を集めた学校のようなもの&lt;/strong&gt;で、コードを書いて問題を解いていくことで学習を進められます。&lt;/p&gt;

&lt;p&gt;世界各国のさまざまな言語に対応していて、日本語に対応した「&lt;a href=&#34;https://nodeschool.io/tokyo/&#34;&gt;NodeSchool Tokyo&lt;/a&gt;」のページもあります。&lt;/p&gt;

&lt;p&gt;みんなで集まって授業を進めるハンズオンイベントも盛んで、ちょうど&lt;u&gt;5月21日にNodeSchool Tokyoが開催&lt;/u&gt;されるようです！
&lt;a href=&#34;https://nodejs.connpass.com/event/82742/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/link.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は、そもそも「コードを書くのもコマンドラインも初めて」という人向けに、&lt;strong&gt;NodeSchoolを始めるまで&lt;/strong&gt;を紹介してみたいと思います。&lt;/p&gt;

&lt;p&gt;CLIの操作方法、Node.jsの環境構築から解説していきますが、「コマンドライン使えるよ、もうNode.js入ってるよ」という人は「&lt;a href=&#34;https://dotstud.io/blog/node-school-before-learn/#nodeschool%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&#34;&gt;NodeSchoolのインストール&lt;/a&gt;」の章から進めましょう！&lt;/p&gt;

&lt;p&gt;それではやって行こう！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font size=2&gt;※筆者はMacユーザのため、基本的にMacに沿った説明になっています。Windows向けの説明も書いていますが、わからないときは適宜調べてみてください。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;nodeschoolを始める前に&#34;&gt;NodeSchoolを始める前に&lt;/h2&gt;

&lt;h3 id=&#34;コマンドラインインタフェース-cli-の操作&#34;&gt;コマンドラインインタフェース（CLI）の操作&lt;/h3&gt;

&lt;p&gt;NodeSchoolは、自身のPCのコマンドライン上（コマンドラインインタフェース、CLI）で進めるツールです。学習を始めるにあたって、基本の操作を覚えておきましょう！&lt;/p&gt;

&lt;p&gt;（↓長くなっちゃったので別記事にしました）


&lt;section class=&#34;link&#34; id=&#34;158&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/how-to-use-cli/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/158/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                【Mac向け】「黒い画面」の苦手意識を克服しよう！コマンドラインインタフェースの基本操作
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2018-04-09
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                Macユーザ向けコマンドラインインタフェースの使い方！実は難しくない「黒い画面」の操作方法を覚えていきましょう。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;
&lt;/p&gt;

&lt;!-- [![](/img/blog/156/link4.png)](/blog/how-to-use-cliwindows) --&gt;

&lt;h3 id=&#34;node-jsのインストール&#34;&gt;Node.jsのインストール&lt;/h3&gt;

&lt;p&gt;NodeSchoolはNode.jsで動きます。NodeSchoolを動かすために、自身のPCにNode.js環境を準備をします。&lt;/p&gt;

&lt;p&gt;まずNode.jsがインストールされているかは、下記コマンドで確認してみてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールされている場合はインストールされているバージョン、されていない場合は &lt;code&gt;command not found&lt;/code&gt; といったエラーが出ます。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font size=2&gt;※2018年4月20日時点の最新版はv9.11.1、安定板はv8.11.1です。新しめのバージョンを使うのがオススメです（v6、v7辺りで大きめの変更がありました）。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/ja/&#34;&gt;Node.js公式サイト&lt;/a&gt;からインストーラを使ってインストールしてもよいのですが、Node.jsはバージョンアップが多いので、&lt;u&gt;Node.jsのバージョンを管理できるツールと一緒にインストールするのがオススメ&lt;/u&gt;です。&lt;/p&gt;

&lt;p&gt;バージョン管理ツールには「nodebrew」や「nvm」、Windowsの方は「nodist」などがあります。&lt;/p&gt;

&lt;p&gt;「nodebrew」を使ったインストール方法をまとめたので、こちらを参考にインストールしてみてください！


&lt;section class=&#34;link&#34; id=&#34;136&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/nodejs-install-use-nodebrew/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/136/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                Node.jsを始めよう！nodebrewを使って5分で環境構築
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2017-12-15
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                nodebrewを使ったNode.jsのインストール方法をまとめました。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;
&lt;/p&gt;

&lt;h2 id=&#34;nodeschoolのインストール&#34;&gt;NodeSchoolのインストール&lt;/h2&gt;

&lt;p&gt;さて、Node.js環境の準備ができたら、&lt;strong&gt;いよいよNodeSchoolをインストール&lt;/strong&gt;しましょう。&lt;/p&gt;

&lt;p&gt;NodeSchoolは「npm」というパッケージ管理ツールで配布されているので、npmコマンドでインストールします（Node.jsと一緒にインストールされるのでとりあえず深く考えなくてOK）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://nodeschool.io/ja/index.html&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/class.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
NodeSchoolには上記のようにいくつかの授業があるので、今回は「&lt;strong&gt;learnyounode&lt;/strong&gt;」という授業を入れてみます。下記コマンドを実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g learnyounode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題なくインストールされたか確認してみます。下記コマンドを実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ learnyounode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/learnyounode.png&#34; alt=&#34;&#34; /&gt;
こんな画面が開いたでしょうか？&lt;/p&gt;

&lt;p&gt;これがNodeSchoolの実行画面で、ここから学習を進めていきます。&lt;strong&gt;インストールお疲れ様でした！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;nodeschoolの基本操作&#34;&gt;NodeSchoolの基本操作&lt;/h2&gt;

&lt;p&gt;まず、「&lt;strong&gt;とりあえずこの画面閉じたい！&lt;/strong&gt;」というときは&lt;code&gt;control+c&lt;/code&gt;で終了できます。&lt;/p&gt;

&lt;p&gt;基本は十字キーの↑↓で移動し、エンターで選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/language.png&#34; alt=&#34;&#34; /&gt;
「英語表示になっちゃってるよ！」という人は、まずは言語設定を日本語にしましょう。矢印キーで「CHOOSE LANGUAGE」に移動し、エンターで選択します。&lt;/p&gt;

&lt;h2 id=&#34;問題を解く方法&#34;&gt;問題を解く方法&lt;/h2&gt;

&lt;h3 id=&#34;問題画面の見方&#34;&gt;問題画面の見方&lt;/h3&gt;

&lt;p&gt;さてNodeSchoolを始める準備ができましたが、問題を解く方法も少し癖があります。試しに1問解いてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/helloworld.png&#34; alt=&#34;&#34; /&gt;
十字キーで移動し、「こんにちは世界」を選んでエンターします（いわゆる&amp;rdquo;Hello, world&amp;rdquo;ですが、日本語訳するとやや不自然ですね）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/question.png&#34; alt=&#34;&#34; /&gt;
するとこんな文章が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/detail.png&#34; alt=&#34;&#34; /&gt;
大きくわけると、3つの要素で構成されています。&lt;/p&gt;

&lt;p&gt;日本語なので、落ち着いて問題とヒントを読み進めましょう。&lt;/p&gt;

&lt;h3 id=&#34;ヒントを読んで進める&#34;&gt;ヒントを読んで進める&lt;/h3&gt;

&lt;p&gt;NodeSchoolでは、自分でNode.js実行ファイルを作り、実際に実行させて答え合わせをして進めていきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/question_detail.png&#34; alt=&#34;&#34; /&gt;
この問題は、&lt;u&gt;コンソール（ここではターミナル上）に「こんにちは世界」と表示するNode.jsスクリプトを書いてください&lt;/u&gt;という意味です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/hint1.png&#34; alt=&#34;&#34; /&gt;
ヒントをみると、「&lt;code&gt;.js&lt;/code&gt;拡張子のファイルを作って、&lt;code&gt;$ node xxx.js&lt;/code&gt; を実行すればOKです」と書いてありますね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/hint2.png&#34; alt=&#34;&#34; /&gt;
そして 「&lt;code&gt;console.log(&amp;quot;text&amp;quot;)&lt;/code&gt; と記述するとコンソールに出力できます」とあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/hint3.png&#34; alt=&#34;&#34; /&gt;
答え合わせ方法は「&lt;code&gt;$ learnyounode verify xxx.js&lt;/code&gt;でテストする」とあります。&lt;/p&gt;

&lt;p&gt;その通りにやってみましょう！&lt;/p&gt;

&lt;h3 id=&#34;node-js実行ファイルを作る&#34;&gt;Node.js実行ファイルを作る&lt;/h3&gt;

&lt;p&gt;問題を解くとき、この問題文＆ヒントを見ながら進めたいですよね。&lt;/p&gt;

&lt;p&gt;そこで操作画面をもう一つ開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/terminal.png&#34; alt=&#34;&#34; /&gt;
Macの場合はツールバーの「シェル」から「新規ウィンドウ」または「新規タブ」で開くことができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/iterm.png&#34; alt=&#34;&#34; /&gt;
前述の記事でオススメしたiTermを使っている場合は、画面分割機能がオススメです。ツールバーの「Shell」から「Split&amp;hellip;」を選ぶか、「⌘+D」で横に分割、「⌘+Shift+D」で縦に分割できます（使用頻度が高いので覚えておくのがオススメです）。&lt;/p&gt;

&lt;p&gt;問題を解くファイルは、あとで見つけやすいようにひとところにまとめておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/work_dir.png&#34; alt=&#34;&#34; /&gt;
ちゃんとくはこんな感じで、ホームディレクトリ（開いた場所/cdを実行した移動先）の下に &lt;code&gt;/workspace/nodeschool/learnyounode/&lt;/code&gt;というディレクトリを作り、その下に実行ファイルを作っています。&lt;/p&gt;

&lt;p&gt;好みはそれぞれなので、自分がわかりやすい場所であればなんでもOKです。&lt;/p&gt;

&lt;p&gt;それではファイルを作成して、実行スクリプトを書きましょう！Macの場合は&lt;code&gt;touch&lt;/code&gt;コマンドで新規ファイルを作成できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch 1.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイル名も、自分がわかればOKです。どの問題かわかるように番号や問題タイトルなどをつけておくのがオススメです。&lt;/p&gt;

&lt;h3 id=&#34;エディタでスクリプトを書く&#34;&gt;エディタでスクリプトを書く&lt;/h3&gt;

&lt;p&gt;それでは「こんにちは世界」用のファイルにスクリプトを書いていきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vi&lt;/code&gt;コマンドなどでターミナル上で開いてもよいのですが、プログラミング向けエディタ（IDE）を使うのがオススメです。無料エディタでは&lt;a href=&#34;https://www.microsoft.com/ja-jp/dev/products/code-vs.aspx&#34;&gt;Visual Studio Code&lt;/a&gt;や、軽量な&lt;a href=&#34;https://atom.io/&#34;&gt;Atomエディタ&lt;/a&gt;などが流行りです（ちゃんとくはAtom）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ open ./&lt;/code&gt;というコマンド（Windowsの人は&lt;code&gt;explore&lt;/code&gt;）でファイルの場所を開いてみましょう。（&lt;code&gt;./&lt;/code&gt;は今いるディレクトリを表しています。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/open.png&#34; alt=&#34;&#34; /&gt;
ファイルの場所がファインダーで表示されました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/select_editor.png&#34; alt=&#34;&#34; /&gt;
編集したいファイルを右クリックすると開くアプリを選択できるので、エディタで開きましょう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font size=&#34;&#34;&gt;※この「CLIからエディタでファイルを開く操作」は、エディタをカスタマイズしてコマンドで実行することもできます。Atomの場合は&lt;code&gt;$ atom ./&lt;/code&gt;など（後日記事にしてみたいと思います）。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/example.png&#34; alt=&#34;&#34; /&gt;
ヒントを参考に、&lt;code&gt;console.log(&amp;quot;text&amp;quot;)&lt;/code&gt;コマンドを書いてみます。エディタで「⌘+s」などで保存して、試しに実行してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ node xxx.js&lt;/code&gt;でファイルを実行します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/script.png&#34; alt=&#34;&#34; /&gt;
上記のような実行結果になったでしょうか？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt;というコマンドに&lt;code&gt;&amp;quot;text&amp;quot;&lt;/code&gt;を渡したら、「text」と表示されました。&lt;/p&gt;

&lt;p&gt;「こんにちは世界」と表示するには……もう分かったでしょうか？（ちょっと意地悪ですが、頑張って解いてみてください！）&lt;/p&gt;

&lt;h3 id=&#34;答え合わせ&#34;&gt;答え合わせ&lt;/h3&gt;

&lt;p&gt;さて、これだ！というスクリプトが書けたら答え合わせをします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/verify.png&#34; alt=&#34;&#34; /&gt;
ヒントのとおり、&lt;code&gt;$ learnyounode verify xxx.js&lt;/code&gt;を実行します（learnyounodeとかファイル名とか記述するの長いなあってときは、途中まで書いてTabを押すといいことがあります）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font size=2&gt;※CLIに慣れてくると雰囲気がわかりますが、&lt;code&gt;$ モジュール名 命令 引数&lt;/code&gt;という風にコマンドを実行しています。引数とはプログラムに渡すモノです。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/verify_detail.png&#34; alt=&#34;&#34; /&gt;
答え合わせの結果画面です。自分の書いたスクリプトの実行結果と、想定回答（求められている答え）が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;無事に正解していると褒められます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;回答例も表示されるので、確認してみましょう。&lt;/p&gt;

&lt;p&gt;無事に解けたら、また「&lt;a href=&#34;https://dotstud.io/blog/node-school-before-learn/#%E5%95%8F%E9%A1%8C%E3%82%92%E8%A7%A3%E3%81%8F%E6%96%B9%E6%B3%95&#34;&gt;問題を解く方法&lt;/a&gt;」のように&lt;code&gt;$ learnyounode&lt;/code&gt; を実行して問題ファイルを開き、進めていきましょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NodeSchoolデビューお疲れ様でした！&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Mac向け】「黒い画面」の苦手意識を克服しよう！コマンドラインインタフェースの基本操作</title>
      <link>https://dotstud.io/blog/how-to-use-cli/</link>
      <pubDate>Mon, 09 Apr 2018 14:00:26 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/how-to-use-cli/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとくです。&lt;/p&gt;

&lt;p&gt;これからプログラミングの学習を始めたいと思っているみなさん、「&lt;strong&gt;コマンドラインインタフェース&lt;/strong&gt;」はご存知ですか？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/illust.png&#34; alt=&#34;&#34; /&gt;
いわゆるプログラマーなイメージの、「&lt;strong&gt;黒い画面&lt;/strong&gt;」ってやつですね。&lt;/p&gt;

&lt;p&gt;苦手意識を持つ方も多いと思いますが、プログラミングの学習を進めるにあたっては必須となっていきます。&lt;/p&gt;

&lt;p&gt;基本を覚えれば簡単なので、今回はコマンドラインインタフェースの基本操作を覚えていきましょう！&lt;/p&gt;

&lt;!-- ※Windowsの方はこちらの記事を参照してください。
[![](/img/blog/156/link4.png)](/blog/how-to-use-cliwindows) --&gt;

&lt;h2 id=&#34;コマンドラインインタフェース-cli-とは&#34;&gt;コマンドラインインタフェース（CLI）とは&lt;/h2&gt;

&lt;p&gt;コマンドラインインタフェースとは、簡単に言うとPC上で行う操作を&lt;u&gt;キーボード入力（コマンド）だけで操作する画面&lt;/u&gt;のことです。&lt;strong&gt;CLI&lt;/strong&gt;（Comand Line Interface）と呼ばれ、逆に通常マウスなどでPCを扱う画面を&lt;strong&gt;GUI&lt;/strong&gt;（Grafical User Interface）と呼びます。&lt;/p&gt;

&lt;p&gt;Macの人は「ターミナル」を開いてみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/156/cli.png&#34; alt=&#34;&#34; /&gt;
こういう画面です。いわゆる「黒い画面」（画像は白いけど）ってやつです。この画面は「&lt;strong&gt;自分のPC&lt;/strong&gt;」を表示しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/cli_pwd.png&#34; alt=&#34;&#34; /&gt;
上記のように、「&lt;strong&gt;pwd&lt;/strong&gt;」と打ってエンターしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/Users/xxx&lt;/code&gt; のように表示されたと思います。これは&lt;code&gt;pwd&lt;/code&gt;という「&lt;strong&gt;現在のディレクトリを教えて&lt;/strong&gt;」というコマンドを打ったので、現在いる場所が表示された状態です。（※ディレクトリ…PC上の住所。フォルダ的なもの。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/gui.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;/Users/xxx&lt;/code&gt; はちょっと聞きなれないディレクトリですが、ファインダーなどで「ユーザ/xxx」を開いていることと同じことを表しています。このファインダーで表示している画面が「GUI」です。&lt;/p&gt;

&lt;p&gt;ちなみに「pwd」は「&lt;u&gt;present working directory&lt;/u&gt;」の略で、それぞれのコマンドは英語に基づいているので合わせて覚えると簡単ですね。&lt;/p&gt;

&lt;h2 id=&#34;基本のコマンドいくつか&#34;&gt;基本のコマンドいくつか&lt;/h2&gt;

&lt;p&gt;ターミナルを開いたときにいる&lt;u&gt;デフォルトの場所を「ホームディレクトリ」&lt;/u&gt;と言います。「cd」というコマンドを打つことでここに戻れます。&lt;/p&gt;

&lt;p&gt;続いて「ls」と打ってみてください。
&lt;img src=&#34;https://dotstud.io/img/blog/156/cli_ls.png&#34; alt=&#34;&#34; /&gt;
「ls」は「list」という意味で、現在のディレクトリ直下にあるディレクトリとファイルが表示されました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/gui_ls.png&#34; alt=&#34;&#34; /&gt;
この場所を見ている状態と同じです。英語と日本語ですが、同じものが表示されていますね！&lt;/p&gt;

&lt;p&gt;ではコマンドライン上で新しいディレクトリを作り、その中へ移動してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/156/cli_mkdir.png&#34; alt=&#34;&#34; /&gt;
「mkdir 任意のディレクトリ名」と打ち、そのあと「cd ディレクトリ名/」と打ちます。（nodeschool説明記事と一緒に書いているので、nodeschool用フォルダを作っています笑）&lt;/p&gt;

&lt;p&gt;※mkdir…make directory / cd…change directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/156/gui_mkdir.png&#34; alt=&#34;&#34; /&gt;
これは「ファインダー上で右クリックでファイルを新規作成、ダブルクリックして開く」と同じことです。&lt;/p&gt;

&lt;p&gt;コマンドのあとにディレクトリ名などを指定した部分は、「&lt;strong&gt;引数&lt;/strong&gt;」と言います。コマンドに「こういう名前で作ってね」「ここに移動してね」と渡す部分です。&lt;/p&gt;

&lt;h2 id=&#34;コマンドライン操作の表し方&#34;&gt;コマンドライン操作の表し方&lt;/h2&gt;

&lt;p&gt;「このようにコマンドを打ってみてください」というのを、大抵下記のように表します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir nodeschool
$ cd nodeschool/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「$」マークはコマンドラインの操作だよーということを表しているので、打つときは不要です。&lt;/p&gt;

&lt;h2 id=&#34;便利なターミナルアプリ&#34;&gt;便利なターミナルアプリ&lt;/h2&gt;

&lt;p&gt;Macにデフォルトで入っている「ターミナル」で進めてもよいのですが、いろいろと便利なターミナルアプリを入れておくのがオススメです。&lt;/p&gt;

&lt;p&gt;よく使われているのは「&lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm&lt;/a&gt;」です。（ちゃんとくの画面もこれ。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/158/separate.png&#34; alt=&#34;&#34; /&gt;
いくつかの操作を並行したいときにこんな感じで画面を分割できたり、進めていく上でなにかと便利なカスタマイズができたりします。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このような感じで、コマンドでPCを操作する雰囲気が掴めたでしょうか。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;なんでわざわざ難しいコマンドで操作するの？&lt;/strong&gt;」という感じもしますが、&lt;u&gt;ゆくゆくプログラムを管理したり書いたりしていく上で便利になっていく&lt;/u&gt;ので覚えておきましょう！&lt;/p&gt;

&lt;p&gt;もっとコマンドを知りたい！という人は「&lt;strong&gt;UNIXコマンド&lt;/strong&gt;」を調べてみてください！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google公式ライブラリを利用してNode.jsからGmailの送受信をしてみよう</title>
      <link>https://dotstud.io/blog/gmail-api-from-nodejs/</link>
      <pubDate>Wed, 21 Feb 2018 17:43:26 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/gmail-api-from-nodejs/</guid>
      
      <description>

&lt;p&gt;こんにちは、のびすけです。&lt;/p&gt;

&lt;p&gt;Node.jsでGmailを制御する方法は、過去に色々な記事が出ているのですが、全体的に記事が古く、&lt;a href=&#34;https://developers.google.com/gmail/api/quickstart/nodejs?hl=ja&#34;&gt;Gmail API Node.js Quickstart&lt;/a&gt;のチュートリアルも割とわかりにくいなぁという印象です。英語しかないし。&lt;/p&gt;

&lt;p&gt;また、勝手ライブラリも多いのですがメンテナンスされてなく利用していく際の不安も多いです。&lt;/p&gt;

&lt;p&gt;ということで、今日はNode.jsでGmailを使う方法の紹介です。&lt;/p&gt;

&lt;p&gt;以前書いたSpreadSheets記事も同様のGoogle APIライブラリを利用しているので基本的な手順は同じです。&lt;/p&gt;



&lt;section class=&#34;link&#34; id=&#34;135&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/google-spreadsheets-from-nodejs/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/135/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                Node.jsでGoogle SpreadSheetsを操作してみよう。【GAS不使用】
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2017-12-04
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                Node.jsでGoogle SpreadSheetsにアクセスする方法をチュートリアル的に紹介します。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;


&lt;h2 id=&#34;gmail-apiの有効化とクライアントシークレットの取得&#34;&gt;Gmail APIの有効化とクライアントシークレットの取得&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://console.developers.google.com/start/api?id=gmail&amp;amp;hl=ja&#34;&gt;こちらのリンク&lt;/a&gt;からウィザード開始します。ログインしているGoogleアカウントが利用するGmailのアカウントになるので複数のGoogleやG Suiteのアカウントを持っている人は注意しましょう。&lt;/p&gt;

&lt;p&gt;チェックをして進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7aa9886c3113712265ee866ed58f6658.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;少し待つとAPIが有効になるので進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/2babe62f7ce826080545439c3c2675d9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;認証情報に進みますが&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例によってこの画面は何もせずに&lt;code&gt;キャンセル&lt;/code&gt;ボタンを押しましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/1934915770a80c6fab94ee9818f9cf65.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このダッシュボード画面になりますが、&lt;code&gt;OAuth同意画面&lt;/code&gt;のタブを選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/7f28a9c626ea9f2ecd0b4691ef337859.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ユーザーに表示するサービス名&lt;/code&gt;の箇所に任意の名前を入力して、保存を押して進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/b93e391525943007cddd5de87a22acbf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;認証情報タブに戻り、&lt;code&gt;認証情報を作成&lt;/code&gt; -&amp;gt; &lt;code&gt;OAuthクライアントID&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/57b7c424a42dd9fedaed483ebbf5d84b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;クライアントID作成画面では&lt;code&gt;その他&lt;/code&gt;を選択し、任意の名前を入力します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/124eeda9adf92739b1eff9b1e3afcb42.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作成すると最初のダッシュボード画面に戻りますが、作成したクライアントIDが表示されています。ここの右下のダウンロードボタンを押すとクライアントシークレットが保存されたJSONファイルがダウンロードされます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/64db51910795b26e05aef6cb9918c33f.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;任意の場所に&lt;code&gt;client_secret.json&lt;/code&gt;という名前にリネームして保存しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/8a4b65dfb3319eee11ddea1d0e7d407d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これで、 &lt;strong&gt;クライアントシークレットの保存が出来ました。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;node-jsプロジェクトの準備&#34;&gt;Node.jsプロジェクトの準備&lt;/h2&gt;

&lt;p&gt;Node.jsはv9.5.0です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir gmail
cd gmail
npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほどの&lt;code&gt;client_secret.json&lt;/code&gt;をこのディレクトリに移動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls

package.json client_secret.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ライブラリのインストールをすれば準備完了です。google-auth-libraryのバージョンは1.3.1になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i googleapis google-auth-library --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで準備完了です。&lt;/p&gt;

&lt;h2 id=&#34;アクセストークンの保存&#34;&gt;アクセストークンの保存&lt;/h2&gt;

&lt;p&gt;本家とは少し違うやり方です。&lt;/p&gt;

&lt;p&gt;本家のコードだとアクセストークンの作成&amp;amp;保存作業と実際のAPI呼び出しが一緒になったコードですがトークンの作成&amp;amp;保存は最初のみ行えば良いので手順を分けて紹介します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getAndStoreToken.js&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/google-spreadsheets-from-nodejs/&#34;&gt;前回の記事のコード&lt;/a&gt;とほぼ同様ですが、APIライブラリのバージョンの違いにより、呼び出し方が少し異なります。注意しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//getAndStoreToken.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const readline = require(&#39;readline&#39;);
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
const {promisify} = require(&#39;util&#39;);

const {google} = require(&#39;googleapis&#39;);
const {OAuth2Client} = require(&#39;google-auth-library&#39;);

//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const rlQuestionAsync = promisify(rl.question);

const SCOPES = [&#39;https://www.googleapis.com/auth/gmail.send&#39;,&#39;https://www.googleapis.com/auth/gmail.readonly&#39;];
const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR+&#39;/gmail-nodejs-quickstart.json&#39;;

const main = async () =&amp;gt; {
    const content = await readFileAsync(__dirname+&#39;/client_secret.json&#39;);
    const credentials = JSON.parse(content); //クレデンシャル
    //認証
    const clientSecret = credentials.installed.client_secret;
    const clientId = credentials.installed.client_id;
    const redirectUrl = credentials.installed.redirect_uris[0];
    const oauth2Client = new OAuth2Client(clientId, clientSecret, redirectUrl);

    //get new token
    const authUrl = oauth2Client.generateAuthUrl({
        access_type: &#39;offline&#39;,
        scope: SCOPES
    });

    console.log(&#39;Authorize this app by visiting this url: &#39;, authUrl);

    rl.question(&#39;Enter the code from that page here: &#39;, (code) =&amp;gt; {
        rl.close();

        oauth2Client.getToken(code, async (err, token) =&amp;gt; {
            if (err) {
                console.log(&#39;Error while trying to retrieve access token&#39;, err);
                return;
            }

            oauth2Client.credentials = token;

            try {
                fs.mkdirSync(TOKEN_DIR);
            } catch (err) {
                if (err.code != &#39;EEXIST&#39;) throw err;
            }

            await writeFileAsync(TOKEN_PATH, JSON.stringify(token));
            console.log(&#39;Token stored to &#39; + TOKEN_PATH);
        });
    });
};

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで&lt;code&gt;&#39;https://www.googleapis.com/auth/gmail.readonly&#39;,&#39;https://www.googleapis.com/auth/gmail.send&#39;&lt;/code&gt;の二つのスコープを指定していますが、表示用のgmail.readonlyとメール送信用のgmail.sendとなっています。表示だけしたい場合や送信だけしたい場合などで使い分けましょう。スコープについては&lt;a href=&#34;https://developers.google.com/gmail/api/auth/scopes&#34;&gt;
Choose Auth Scopes&lt;/a&gt;で細かく確認できます。&lt;/p&gt;

&lt;p&gt;では、このプログラムを実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node getAndStoreToken.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/379de8711e19b5510225e167de555ab6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://accounts.google.com/~&lt;/code&gt;で始まるURLが表示されるのでこれをコピーしてブラウザで開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/06afa961-4789-535b-3fee-8eaf67a997af.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アカウント選択画面になります。 複数Googleアカウントを持っている人は、今回アクセスしようとしているアカウントを選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/c5f18901079fc0f4c0362cb0213e89c6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;許可で進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/6058bd3e-258f-1d8d-a7c6-68962617f1b2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;認証用のコードが発行されるので、ターミナルの&lt;code&gt;Enter the code from that page here:&lt;/code&gt;と書いてある箇所にコピぺしてEnterで進みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Token stored to /Users/path/to/myapp/gmail-nodejs-quickstart.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などの表示が出て、&lt;code&gt;gmail-nodejs-quickstart.json&lt;/code&gt;が保存されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/4fc90f71b3520a01ce2c568eb28e005f.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これでアクセストークンの保存が完了しました。&lt;/p&gt;

&lt;h2 id=&#34;4-いよいよgmailにアクセス&#34;&gt;4. いよいよGmailにアクセス&lt;/h2&gt;

&lt;p&gt;いよいよGmailにアクセスします。&lt;/p&gt;

&lt;h3 id=&#34;ラベル一覧の取得&#34;&gt;ラベル一覧の取得&lt;/h3&gt;

&lt;p&gt;本家チュートリアルを参考に、ラベルの一覧を取得します。
&lt;code&gt;getLabels.js&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;p&gt;ここから先に出てくる&lt;code&gt;userId: &#39;me&#39;&lt;/code&gt;の&lt;code&gt;me&lt;/code&gt;は指定されている文字列らしく、自分のメアドやアカウント名をあえて指定する必要はなくそのまま&lt;code&gt;me&lt;/code&gt;と書いておけば問題なさそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//getLabels.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const {promisify} = require(&#39;util&#39;);
const {google} = require(&#39;googleapis&#39;);
const {OAuth2Client} = require(&#39;google-auth-library&#39;);
const gmail = google.gmail(&#39;v1&#39;);

//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const gmailListLabesAsync = promisify(gmail.users.labels.list); //Gmailのラベル一覧

const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR + &#39;/gmail-nodejs-quickstart.json&#39;; //アクセストークンのファイルを指定

const main = async () =&amp;gt; {
    //クレデンシャル情報の取得
    const content = await readFileAsync(__dirname+&#39;/client_secret.json&#39;); //クライアントシークレットのファイルを指定
    const credentials = JSON.parse(content); //クレデンシャル

    //認証
    const clientSecret = credentials.installed.client_secret;
    const clientId = credentials.installed.client_id;
    const redirectUrl = credentials.installed.redirect_uris[0];
    const oauth2Client = new OAuth2Client(clientId, clientSecret, redirectUrl);
    const token = await readFileAsync(TOKEN_PATH);
    oauth2Client.credentials = JSON.parse(token);

    //API経由でシートにアクセス
    const response = await gmailListLabesAsync({
        auth: oauth2Client,
        userId: &#39;me&#39;,
    });
    //結果を表示
    console.log(response.data);
};

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Async/Awaitで利用できるように&lt;code&gt;const gmailListLabesAsync = promisify(gmail.users.labels.list);&lt;/code&gt;の箇所でPromisifyを利用してプロミス化しています。&lt;/p&gt;

&lt;p&gt;実行するとラベル一覧が取得できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node getLabels.js

{ labels:
   [ { id: &#39;Label_125&#39;,
       name: &#39;研修/青山学院大学&#39;,
       messageListVisibility: &#39;show&#39;,
       labelListVisibility: &#39;labelShow&#39;,
       type: &#39;user&#39;,
       color: [Object] },
     { id: &#39;Label_40&#39;,
       name: &#39;取引/養老乃瀧&#39;,
       messageListVisibility: &#39;show&#39;,
       labelListVisibility: &#39;labelShow&#39;,
       type: &#39;user&#39;,
       color: [Object] },

       ・
       ・
       ・
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会社のメールの内容なので出せるところだけ笑&lt;/p&gt;

&lt;h3 id=&#34;メールの内容を取得&#34;&gt;メールの内容を取得&lt;/h3&gt;

&lt;p&gt;メールの内容は&lt;code&gt;Users.messages: list&lt;/code&gt;と&lt;code&gt;Users.messages: get&lt;/code&gt;を利用します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/gmail/api/v1/reference/users/messages/get&#34;&gt;https://developers.google.com/gmail/api/v1/reference/users/messages/get&lt;/a&gt;
&lt;a href=&#34;https://developers.google.com/gmail/api/v1/reference/users/messages/list&#34;&gt;https://developers.google.com/gmail/api/v1/reference/users/messages/list&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;必要な箇所だけ抜粋しますが、&lt;code&gt;gmail.users.messages.list()&lt;/code&gt;と&lt;code&gt;gmail.users.messages.get()&lt;/code&gt;というメソッドがあるので利用します。
Async/Awaitで利用できるように、先ほど同様Promisifyします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const gmailGetMessagesAsync = promisify(gmail.users.messages.get);
const gmailListMessagesAsync = promisify(gmail.users.messages.list);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メッセージリストを取得し、メッセージごとのIDを取得します。メッセージIDをもとにメッセージ本文を取得。
最後に本文はBase64変換されてるのでデコードして表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;省略

    //メッセージリストの取得
    let res = await gmailListMessagesAsync({
        auth: oauth2Client,
        userId: &#39;me&#39;
    });
    const newestMessageId = res.messages[0].id; //最新のメッセージID

    //メッセージの取得
    res = await gmailGetMessagesAsync({
        auth: oauth2Client,
        userId: &#39;me&#39;,
        id: newestMessageId
    });
    //結果を表示
    const base64mailBody = res.payload.parts[0].body.data; //parts[0]がテキスト、parts[1]がHTMLメールっぽい(?)
    const mailBody = new Buffer(base64mailBody, &#39;base64&#39;).toString(); //メール本文はBase64になってるので変換
    console.log(mailBody);//やっとメール本文が表示される

省略
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;メールの送信&#34;&gt;メールの送信&lt;/h3&gt;

&lt;p&gt;送信が割と大変でした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Users.messages: send&lt;/code&gt;を利用します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/gmail/api/v1/reference/users/messages/send&#34;&gt;https://developers.google.com/gmail/api/v1/reference/users/messages/send&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;gmail.users.messages.send()&lt;/code&gt;のメソッドを利用します。
先ほどと同様にPromisifyします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const gmailSendMessagesAsync = promisify(gmail.users.messages.send);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にメール送信時の処理です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;省略

    const makeBody = (params) =&amp;gt; {
        params.subject = new Buffer(params.subject).toString(&amp;quot;base64&amp;quot;); //日本語対応

        const str = [
            `Content-Type: text/plain; charset=\&amp;quot;UTF-8\&amp;quot;\n`,
            `MIME-Version: 1.0\n`,
            `Content-Transfer-Encoding: 7bit\n`,
            `to: ${params.to} \n`,
            `from: ${params.from} \n`,
            `subject: =?UTF-8?B?${params.subject}?= \n\n`,
            params.message
        ].join(&#39;&#39;);
        return new Buffer(str).toString(&amp;quot;base64&amp;quot;).replace(/\+/g, &#39;-&#39;).replace(/\//g, &#39;_&#39;);
    }

    const messageBody = `
        XXXX 様

        商品のご購入、誠にありがとうございます。
        ・Nefry BT x 1
        の商品を本日発送しましたのでご連絡差し上げます。

        こちらから配送状況をご確認頂けます。
        (このメール送信の時点では反映されていない可能性もあります)

        https://trackings.post.japanpost.jp/xxxxxxxxxx`;

    const raw = makeBody({
        to: &#39;相手のメールアドレス&#39;,
        from: &#39;送信者のメールアドレス&#39;,
        subject: &#39;件名(日本語可)&#39;,
        message: messageBody
    });

    const res = await gmailSendMessagesAsync({
        auth: oauth2Client,
        userId: &#39;me&#39;,
        resource: {
          raw: raw
        }
    });
    console.log(res.data);

省略
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sendMail.js&lt;/code&gt;などを作成し、この内容で実行するとメールが送信できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node sendMail.js

{ id: &#39;xxxxxxxxxxxxxxxxx&#39;,
  threadId: &#39;xxxxxxxxxxxxxxxx&#39;,
  labelIds: [ &#39;SENT&#39; ] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gmail側で受信確認をすると、しっかりと送られてきています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3ad5f4729e90c9523e2e6e5cb972349b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;また、暗号化もされているようで、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://support.google.com/mail/answer/6330403?authuser=2&amp;amp;visit_id=1-636548034928176578-836942562&amp;amp;p=tls&amp;amp;hl=ja&amp;amp;rd=1&#34;&gt;送受信時のメールの暗号化 - Gmailヘルプ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/247eb44de5f0b635d52fd2b0c06a4de3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Node.jsのメール送信ライブラリはいくつかあって、いくつか試したときに暗号化されてない場合も多かった印象です。暗号化無しだと、この赤いアラートっぽいメール表示になります。&lt;/p&gt;

&lt;p&gt;今回のやり方はGoogle公式のライブラリで、特に意識せずに暗号化も行われているので暗号化に対するアラートなども受け取り手には表示されないので迷惑メールなどに振り分けられてしまう心配もたぶん少ないのでは。
（Gmailの迷惑メールアルゴリズムは色々な要素がありそうなので断言は出来ないですが）&lt;/p&gt;

&lt;h2 id=&#34;所感&#34;&gt;所感&lt;/h2&gt;

&lt;p&gt;実装途中の感想ですが、メール送信が割と苦労した印象です。&lt;/p&gt;

&lt;p&gt;メール送信のNode.jsサンプルが無かったので、&lt;a href=&#34;https://developers.google.com/gmail/api/v1/reference/users/messages/send#examples&#34;&gt;JavaScript Sample&lt;/a&gt;を見ると、送信パラメータに&lt;code&gt;email RFC 5322 formatted String.&lt;/code&gt;という記述があってRFCのフォーマットを確認する必要がありました。&lt;/p&gt;

&lt;p&gt;この手のライブラリだと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const params = {
    to: &#39;&#39;,
    from: &#39;&#39;,
    subject: &#39;&#39;,
    body: &#39;&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな形式のObjectを突っ込めばいい感じにやってくれる印象があったので&amp;hellip;&amp;hellip;苦笑&lt;/p&gt;

&lt;p&gt;Stack Over Flowの&lt;a href=&#34;https://stackoverflow.com/questions/34546142/gmail-api-for-sending-mails-in-node-js&#34;&gt;Gmail API for sending mails in Node.js&lt;/a&gt;がかなり参考になりました。&lt;/p&gt;

&lt;p&gt;また、日本語でのSubject送信に&lt;code&gt;=?文字コード?メソッド?Base64変換した文字列?=&lt;/code&gt;という形式で渡すなどは&lt;a href=&#34;http://hogem.hatenablog.com/entry/20100122/1264169093&#34;&gt;メールのSubjectヘッダのエンコード&lt;/a&gt;の記事が参考になりました。&lt;/p&gt;

&lt;p&gt;とはいえ、問題なくメール送信出来たので、この記事を参考に使ってみてください。&lt;/p&gt;

&lt;p&gt;それでは！&lt;/p&gt;

&lt;h2 id=&#34;補足-本家のチュートリアルのエラー&#34;&gt;補足: 本家のチュートリアルのエラー&lt;/h2&gt;

&lt;p&gt;今回紹介した手順では問題ないですが、もともとのチュートリアルのコードだと以下の二つのエラーが出ました。(2018年2月時点)&lt;/p&gt;

&lt;h3 id=&#34;google-gmail-is-not-a-function&#34;&gt;google.gmail is not a function&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;google.gmail() is giving an error TypeError: google.gmail is not a function?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ってエラーが出ました。&lt;/p&gt;

&lt;p&gt;Stack Over Flowの&lt;a href=&#34;https://stackoverflow.com/questions/48762090/google-gmail-is-giving-an-error-typeerror-google-gmail-is-not-a-function&#34;&gt;google.gmail() is giving an error TypeError: google.gmail is not a function?&lt;/a&gt;を参考に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var google = require(&#39;googleapis&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを↓に変更するとエラー解消されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var {google} = require(&#39;googleapis&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;googleauth-is-not-a-constructor&#34;&gt;GoogleAuth is not a constructor&lt;/h3&gt;

&lt;p&gt;こちらはIssueがあがっていて&lt;a href=&#34;https://github.com/google/google-auth-library-nodejs/issues/251&#34;&gt;GoogleAuth is not a constructor #251&lt;/a&gt;を見ると、&lt;/p&gt;

&lt;p&gt;呼び出し方が変更されてて、以下の修正が必要です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const { GoogleAuth } = require(&#39;google-auth-library&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const { OAuth2Client } = require(&#39;google-auth-library&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、今の変更に伴いOAuthの処理も変更が必要です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const auth = new googleAuth();
const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//const auth = new googleAuth();
const oauth2Client = new OAuth2Client(clientId, clientSecret, redirectUrl);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで問題なく利用できるようになりました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsを始めよう！nodebrewを使って5分で環境構築</title>
      <link>https://dotstud.io/blog/nodejs-install-use-nodebrew/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/nodejs-install-use-nodebrew/</guid>
      
      <description>

&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2017/nodejs2&#34;&gt;Node.js Advent Calendar 2017&lt;/a&gt;に参加しています！&lt;/p&gt;

&lt;p&gt;こんにちは、エンジニアのちゃんとくです。「これからNode.jsを始めたい！」という人向けに導入記事をまとめていきたいと思います。まずは環境構築からはじめましょう！&lt;/p&gt;

&lt;p&gt;今回はNode.jsのバージョンを管理できる「&lt;strong&gt;nodebrew&lt;/strong&gt;」を使ったインストール手順を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;普通のダウンロードじゃダメなの&#34;&gt;普通のダウンロードじゃダメなの？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/ja/&#34;&gt;&lt;img src=&#34;https://dotstud.io/img/blog/136/1.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://nodejs.org/ja/&#34;&gt;Node.js公式ページ&lt;/a&gt;にアクセスすると、どーんとダウンロードボタンがありますね。これをクリックすると、表記のバージョンのNode.jsパッケージが降ってきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;しかし！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.jsはバージョンアップの頻度が高く、その都度ダウンロードし直すのは大変ですよね。&lt;/p&gt;

&lt;p&gt;プロジェクトによっては古いバージョンを使いたかったり、プロジェクトごとにバージョンを変えたかったりしたいときもあります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;そこで役に立つのがNode.jsのバージョン管理ツールです&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;今回紹介する&lt;strong&gt;nodebrew&lt;/strong&gt;以外にも、世界的に利用者の多い&lt;strong&gt;NVM&lt;/strong&gt;（Node Version Manager）やWindows向けの&lt;strong&gt;nodist&lt;/strong&gt;などがあります。&lt;/p&gt;

&lt;p&gt;今回は日本人コミッタが多く困ったときにも質問しやすいnodebrewでやってみます！&lt;/p&gt;

&lt;h2 id=&#34;nodebrewをインストール&#34;&gt;nodebrewをインストール&lt;/h2&gt;

&lt;p&gt;さっそくnodebrewをインストールしましょう！以下のコマンドを実行します。（&lt;code&gt;$&lt;/code&gt;マークはCLIであることを表しているのでコピペの際は不要です！）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L git.io/nodebrew | perl - setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完了するとこんなことを言われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/136/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「&lt;code&gt;~/.nodebrew&lt;/code&gt;にインストールしたからPATH通してね！」というようなことを言っています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.bash_profile&lt;/code&gt;などの設定ファイルに&lt;code&gt;export PATH=$HOME/.nodebrew/current/bin:$PATH&lt;/code&gt;を追加しましょう。&lt;/p&gt;

&lt;p&gt;追記したらターミナルを開き直すか&lt;code&gt;source&lt;/code&gt;コマンドで更新します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nodebrewコマンドが使えるか確認してみます。&lt;code&gt;command not found&lt;/code&gt;が出なければOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew help
nodebrew 0.9.8

Usage:
…
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nodebrewでnode-jsをインストール&#34;&gt;nodebrewでNode.jsをインストール&lt;/h2&gt;

&lt;p&gt;まずは&lt;code&gt;nodebrew ls-remote&lt;/code&gt;コマンドでダウンロード可能なNode.jsのバージョンを確認してみます。&lt;/p&gt;

&lt;p&gt;Node.jsは偶数のバージョンがLTS（安定板）、奇数のバージョンが最新版となっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew ls-remote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/136/3.png&#34; alt=&#34;&#34; /&gt;
実行するとべろーっとバージョンが出てきますね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/136/4.png&#34; alt=&#34;&#34; /&gt;
下の方まで見ると2017年12月15日現在はLTSがv8.9.3、最新がv9.3.0であることがわかりました。（io.jsはNode.jsのForkですが、一旦気にしなくてOK）&lt;/p&gt;

&lt;p&gt;今回は最新版のv9.3.0をインストールしてみます。&lt;code&gt;nodebrew install-binary&lt;/code&gt;コマンドを利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew install-binary v9.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1分くらいでインストールは完了します。（ダメ回線なので、もっと速いかもしれません）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nodebrew ls&lt;/code&gt;コマンドで状態を確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew ls
v9.3.0

current: none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用するバージョンの&lt;code&gt;current&lt;/code&gt;がnoneになっているので指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew use v9.3.0
$ node -v
v9.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでNode.jsのインストールは完了です！&lt;/p&gt;

&lt;h2 id=&#34;バージョン切り替え&#34;&gt;バージョン切り替え&lt;/h2&gt;

&lt;p&gt;別のバージョンを使いたくなったら、nodebrewでバージョンを切り替えてみましょう。&lt;/p&gt;

&lt;p&gt;試しにLTSのv8.9.3を使えるようにしてみます。まずはインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew install-binary v8.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;v8.9.3とv9.3.0が使えるようになりましたが、まだ&lt;code&gt;current&lt;/code&gt;はv9.3.0のままです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew list
v8.9.3
v9.3.0

current: v9.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nodebrew use&lt;/code&gt;でv8.9.3を指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nodebrew use v8.9.3
$ nodebrew list
v8.9.3
v9.3.0

current: v8.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでバージョンが切り替えられました！listにあるバージョンは再インストールすることなく切り替えられます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ここまで特にむずかしいところなく環境構築できたのではないかと思います！はじめるまでの手軽さもNode.jsの魅力のひとつですよね。&lt;/p&gt;

&lt;p&gt;次回はNode.jsをはじめたばかりの人向けチュートリアルをやってみたいと思います。&lt;/p&gt;

&lt;p&gt;それではまた！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【予測変換】Macで日本語の変換ウィンドウが消えなくなったときの対処法【邪魔】</title>
      <link>https://dotstud.io/blog/mac-nihongo-window-error/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/mac-nihongo-window-error/</guid>
      
      <description>

&lt;p&gt;こんにちは、エンジニア兼ライターのちゃんとくです。日々たくさんのコードや文字を書き続けているわけですが、&lt;strong&gt;突然消えなくなるアレ&lt;/strong&gt;に悩まされています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/137/1.png&#34; alt=&#34;&#34; /&gt;
これ。&lt;/p&gt;

&lt;p&gt;クリックしてもEscapeしてもQuitしても消えなくて本当に邪魔ですよね。&lt;/p&gt;

&lt;p&gt;わりと起こる頻度が高いのでそのたびに再起動するのも面倒です。&lt;/p&gt;

&lt;h2 id=&#34;日本語入力のプロセスをキルする&#34;&gt;日本語入力のプロセスをキルする&lt;/h2&gt;

&lt;p&gt;タイトルが全てですが、日本語入力のプロセスを終了すると消すことができます。&lt;/p&gt;

&lt;p&gt;［アクテビティモニタ］を開いて［日本語入力］を探します。
&lt;img src=&#34;https://dotstud.io/img/blog/137/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ダブルクリックするとウィンドウが開くので［終了］をクリックします。
&lt;img src=&#34;https://dotstud.io/img/blog/137/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;平和がおとずれましたね。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Adventやら原稿やらガリガリ書いているときに邪魔でしょうがないので紹介してみました。&lt;/p&gt;

&lt;p&gt;El Capitanからアップデートしたらなおるのかなぁ。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.jsでGoogle SpreadSheetsを操作してみよう。【GAS不使用】</title>
      <link>https://dotstud.io/blog/google-spreadsheets-from-nodejs/</link>
      <pubDate>Mon, 04 Dec 2017 13:14:41 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/google-spreadsheets-from-nodejs/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表ののびすけです。&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2017/nodejs&#34;&gt;Node.jsアドベントカレンダー2017&lt;/a&gt;の記事になります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://developers.google.com/apps-script/&#34;&gt;GAS&lt;/a&gt;じゃなくてNode.jsから直接スプレッドシートにアクセスしたい！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;そう思って調べると&lt;a href=&#34;https://developers.google.com/sheets/api/quickstart/nodejs&#34;&gt;Node.js Quickstart | Sheets API | Google Developers&lt;/a&gt;が出て来ますが、JS記述も古いし英語なので少しとっつきにくいです。&lt;/p&gt;

&lt;p&gt;ということでちょっと試して記録残そうと思います。&lt;/p&gt;

&lt;h2 id=&#34;google-sheets-api&#34;&gt;Google Sheets API&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/sheets/guides/concepts?hl=ja&#34;&gt;Google Sheets API&lt;/a&gt;はスプレッドシートにアクセスできるようになるAPIです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/81dd3461cd263ea7e4d63f06fef54747.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google Sheets API を使用すると、スプレッドシートの要素を読み取って変更できます。 スプレッドシートは多くの設定を備えており、美しく機能的なシートを作成することができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;普段慣れている言語でスプレッドシートにアクセス出来まるので、簡単な操作であれば、GASを使う必要もないです。&lt;/p&gt;

&lt;p&gt;今回のサンプルは&lt;a href=&#34;https://github.com/n0bisuke/google-spread-sheet-node.js-sample&#34;&gt;こちら&lt;/a&gt;に置いておきます。&lt;/p&gt;

&lt;h3 id=&#34;環境&#34;&gt;環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Node.js v9.2.0&lt;/li&gt;
&lt;li&gt;macOS High Sierra&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考までに今回の僕の環境です。&lt;/p&gt;

&lt;p&gt;では実際に作っていきます。&lt;/p&gt;

&lt;h2 id=&#34;1-google-sheets-apiを使えるようにする&#34;&gt;1. Google Sheets APIを使えるようにする&lt;/h2&gt;

&lt;p&gt;ちなみに2017年12月時点でのウィザードです。こういうのはアップデートによって画面遷移変わるので適宜読み替えてください。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use this wizard to create or select a project in the Google Developers Console and automatically turn on the API. Click Continue, then Go to credentials.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://console.developers.google.com/start/api?id=sheets.googleapis.com&#34;&gt;こちらのリンク&lt;/a&gt;からディベロッパーコンソールにいき、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/31e8011951d1552b8f7126eb459da474.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;新機能のお知らせ、パフォーマンスに関するアドバイス、フィードバック調査、特典に関する最新情報をメールで受け取ります。&lt;/code&gt;の質問はいいえでもたぶん大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/60c5bf6a1e772473dc9fc6d4d7526077.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;認証情報に進む&lt;/code&gt;を選択&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/848f8f79460aac991b46956111f0da07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この画面が出ますが、&lt;code&gt;キャンセル&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/e827d6ab-d728-1016-d22a-76cef4e4972e.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.00.17.png&#34; title=&#34;スクリーンショット 2017-12-03 21.00.17.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OAuth同意画面&lt;/code&gt;のタブを選択し、メールアドレスを確認し、&lt;code&gt;ユーザーに表示するサービス名&lt;/code&gt;を入力します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;保存&lt;/code&gt;を選択しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/1ca3a2d5-b639-bb6c-9508-225d162c96ff.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.01.07.png&#34; title=&#34;スクリーンショット 2017-12-03 21.01.07.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;認証情報&lt;/code&gt;のタブを選択し、 &lt;code&gt;認証情報を作成&lt;/code&gt; -&amp;gt; &lt;code&gt;OAuthクライアントID&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3d5b6da9cf3086b11c728cdc31307268.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;その他&lt;/code&gt;を選択し、任意の名前をつけて&lt;code&gt;作成&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/a8a25dd3-a194-d4a3-ac57-909f8d7712e0.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.06.47.png&#34; title=&#34;スクリーンショット 2017-12-03 21.06.47.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OK&lt;/code&gt;で進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/93c1e777-682e-434e-444d-a3aa8659bd54.png&#34; alt=&#34;スクリーンショット 2017-12-03 21.07.25.png&#34; title=&#34;スクリーンショット 2017-12-03 21.07.25.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client_secret_xxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com.json&lt;/code&gt;のようなファイルがダウンロードされます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;これを&lt;code&gt;client_secret.json&lt;/code&gt;にリネームしましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-node-jsプロジェクトの準備&#34;&gt;2. Node.jsプロジェクトの準備&lt;/h2&gt;

&lt;p&gt;任意のディレクトリを作成して移動します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sheetstest&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir sheetstest
cd sheetstest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;で&lt;code&gt;package.json&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このディレクトリに先ほどの&lt;code&gt;client_secret.json&lt;/code&gt;を移動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls

package.json client_secret.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/3d796ef0005ef28b914a83517772c65e.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じです。&lt;/p&gt;

&lt;p&gt;利用するモジュールを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i googleapis google-auth-library --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-トークンの作成-保存-最初だけ&#34;&gt;3. トークンの作成&amp;amp;保存 (最初だけ)&lt;/h2&gt;

&lt;p&gt;本家とは少し違うやり方です。&lt;/p&gt;

&lt;p&gt;本家のコードだと&lt;code&gt;トークンの作成&amp;amp;保存&lt;/code&gt;作業と実際のAPI呼び出しが一緒になったコードですが&lt;code&gt;トークンの作成&amp;amp;保存&lt;/code&gt;は最初のみ行えば良いので手順を分けて紹介します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getAndStoreToken.js&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//getAndStoreToken.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const readline = require(&#39;readline&#39;);
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
const {promisify} = require(&#39;util&#39;);

const google = require(&#39;googleapis&#39;);
const googleAuth = require(&#39;google-auth-library&#39;);

//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const rlQuestionAsync = promisify(rl.question);

const SCOPES = [&#39;https://www.googleapis.com/auth/spreadsheets.readonly&#39;];
const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR+&#39;/sheets.googleapis.com-nodejs-quickstart.json&#39;;

const main = async () =&amp;gt; {
    const content = await readFileAsync(__dirname+&#39;/client_secret.json&#39;);
    const credentials = JSON.parse(content); //クレデンシャル
    //認証
    const clientSecret = credentials.installed.client_secret;
    const clientId = credentials.installed.client_id;
    const redirectUrl = credentials.installed.redirect_uris[0];
    const auth = new googleAuth();
    const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);

    //get new token
    const authUrl = oauth2Client.generateAuthUrl({
        access_type: &#39;offline&#39;,
        scope: SCOPES
    });

    console.log(&#39;Authorize this app by visiting this url: &#39;, authUrl);

    rl.question(&#39;Enter the code from that page here: &#39;, (code) =&amp;gt; {
        rl.close();

        oauth2Client.getToken(code, async (err, token) =&amp;gt; {
            if (err) {
                console.log(&#39;Error while trying to retrieve access token&#39;, err);
                return;
            }

            oauth2Client.credentials = token;

            try {
                fs.mkdirSync(TOKEN_DIR);
            } catch (err) {
                if (err.code != &#39;EEXIST&#39;) throw err;
            }

            await writeFileAsync(TOKEN_PATH, JSON.stringify(token));
            console.log(&#39;Token stored to &#39; + TOKEN_PATH);
        });
    });
};

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このプログラムを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node getAndStoreToken.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.gyazo.com/379de8711e19b5510225e167de555ab6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://accounts.google.com/~&lt;/code&gt;で始まるURLが表示されるのでこれをコピーしてブラウザで開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/06afa961-4789-535b-3fee-8eaf67a997af.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.52.54.png&#34; title=&#34;スクリーンショット 2017-12-04 11.52.54.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アカウント選択画面になります。
複数Googleアカウントを持っている人は、今回アクセスしようとしているアカウントを選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/18729d60-e4a6-8996-9519-f9f4750ae1f4.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.02.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.02.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;許可&lt;/code&gt;で進みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/6058bd3e-258f-1d8d-a7c6-68962617f1b2.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.09.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.09.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;認証用のコードが発行されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/fd612d7c-0b45-3d09-64ab-c1e02315fe81.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.53.27.png&#34; title=&#34;スクリーンショット 2017-12-04 11.53.27.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これをコピーしてターミナルに貼り付けてエンターキーで進みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Token stored to /Users/n0bisuke/dotstudio/playground/sheetstest/sheets.googleapis.com-nodejs-quickstart.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと表示されてjsonファイルが保存されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/35387/830452dc-ad36-83ef-8cf8-8c80bc9637dd.png&#34; alt=&#34;スクリーンショット 2017-12-04 11.57.50.png&#34; title=&#34;スクリーンショット 2017-12-04 11.57.50.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sheets.googleapis.com-nodejs-quickstart.json&lt;/code&gt;がフォルダ内に確認できればOKです。&lt;/p&gt;

&lt;h2 id=&#34;4-いよいよシートにアクセス&#34;&gt;4. いよいよシートにアクセス&lt;/h2&gt;

&lt;p&gt;さて最後の手順です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getSheetsData.js&lt;/code&gt;を作成しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//getSheetsData.js
&#39;use strict&#39;;

const fs = require(&#39;fs&#39;);
const {promisify} = require(&#39;util&#39;);
const google = require(&#39;googleapis&#39;);
const googleAuth = require(&#39;google-auth-library&#39;);
const sheets = google.sheets(&#39;v4&#39;);

//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const ssValuesGetAsync = promisify(sheets.spreadsheets.values.get);

const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR + &#39;/sheets.googleapis.com-nodejs-quickstart.json&#39;;

const main = async () =&amp;gt; {
    //クレデンシャル情報の取得
    const content = await readFileAsync(__dirname+&#39;/client_secret.json&#39;);
    const credentials = JSON.parse(content); //クレデンシャル

    //認証
    const clientSecret = credentials.installed.client_secret;
    const clientId = credentials.installed.client_id;
    const redirectUrl = credentials.installed.redirect_uris[0];
    const auth = new googleAuth();
    const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);
    const token = await readFileAsync(TOKEN_PATH);
    oauth2Client.credentials = JSON.parse(token);

    //API経由でシートにアクセス
    const apiOptions = {
        auth: oauth2Client,
        spreadsheetId: &#39;1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms&#39;,
        range: &#39;Class Data!A2:E&#39;,
    };
    const response = await ssValuesGetAsync(apiOptions);

    //結果を表示
    console.log(response);
};

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node getSheetsData.js

{ range: &#39;\&#39;Class Data\&#39;!A2:E101&#39;,
  majorDimension: &#39;ROWS&#39;,
  values:
   [ [ &#39;Alexandra&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;CA&#39;, &#39;English&#39; ],
     [ &#39;Andrew&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;SD&#39;, &#39;Math&#39; ],
     [ &#39;Anna&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NC&#39;, &#39;English&#39; ],
     [ &#39;Becky&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;SD&#39;, &#39;Art&#39; ],
     [ &#39;Benjamin&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;WI&#39;, &#39;English&#39; ],
     [ &#39;Carl&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;MD&#39;, &#39;Art&#39; ],
     [ &#39;Carrie&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;NE&#39;, &#39;English&#39; ],
     [ &#39;Dorothy&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;MD&#39;, &#39;Math&#39; ],
     [ &#39;Dylan&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;MA&#39;, &#39;Math&#39; ],
     [ &#39;Edward&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;FL&#39;, &#39;English&#39; ],
     [ &#39;Ellen&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;WI&#39;, &#39;Physics&#39; ],
     [ &#39;Fiona&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;MA&#39;, &#39;Art&#39; ],
     [ &#39;John&#39;, &#39;Male&#39;, &#39;3. Junior&#39;, &#39;CA&#39;, &#39;Physics&#39; ],
     [ &#39;Jonathan&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;SC&#39;, &#39;Math&#39; ],
     [ &#39;Joseph&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;AK&#39;, &#39;English&#39; ],
     [ &#39;Josephine&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Math&#39; ],
     [ &#39;Karen&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;NH&#39;, &#39;English&#39; ],
     [ &#39;Kevin&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;NE&#39;, &#39;Physics&#39; ],
     [ &#39;Lisa&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;SC&#39;, &#39;Art&#39; ],
     [ &#39;Mary&#39;, &#39;Female&#39;, &#39;2. Sophomore&#39;, &#39;AK&#39;, &#39;Physics&#39; ],
     [ &#39;Maureen&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;CA&#39;, &#39;Physics&#39; ],
     [ &#39;Nick&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;NY&#39;, &#39;Art&#39; ],
     [ &#39;Olivia&#39;, &#39;Female&#39;, &#39;4. Senior&#39;, &#39;NC&#39;, &#39;Physics&#39; ],
     [ &#39;Pamela&#39;, &#39;Female&#39;, &#39;3. Junior&#39;, &#39;RI&#39;, &#39;Math&#39; ],
     [ &#39;Patrick&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Art&#39; ],
     [ &#39;Robert&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;CA&#39;, &#39;English&#39; ],
     [ &#39;Sean&#39;, &#39;Male&#39;, &#39;1. Freshman&#39;, &#39;NH&#39;, &#39;Physics&#39; ],
     [ &#39;Stacy&#39;, &#39;Female&#39;, &#39;1. Freshman&#39;, &#39;NY&#39;, &#39;Math&#39; ],
     [ &#39;Thomas&#39;, &#39;Male&#39;, &#39;2. Sophomore&#39;, &#39;RI&#39;, &#39;Art&#39; ],
     [ &#39;Will&#39;, &#39;Male&#39;, &#39;4. Senior&#39;, &#39;FL&#39;, &#39;Math&#39; ] ] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このサンプルでは&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit#gid=0&#34;&gt;こちらのワークブック&lt;/a&gt;へアクセスして情報を取得しています。&lt;/p&gt;

&lt;p&gt;ちなみに用語的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ワークブック＝Googleスプレッドシートの１ファイル&lt;/li&gt;
&lt;li&gt;シート＝ワークブック内のタブ、シート&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というニュアンスです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//省略

    const apiOptions = {
        auth: oauth2Client,
        spreadsheetId: &#39;1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms&#39;,
        range: &#39;Class Data!A2:E&#39;,
    };

//省略
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほかのワークブックにアクセスする場合は&lt;code&gt;https://docs.google.com/spreadsheets/d/&lt;/code&gt;の後に続くIDを&lt;code&gt;spreadsheetId&lt;/code&gt;に指定して実行しましょう。&lt;code&gt;range&lt;/code&gt;は&lt;code&gt;シート名:取得する範囲&lt;/code&gt;という形式で指定して、指定したシートの指定した範囲からセルの情報を取得します。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これで次回以降は4番目の手順だけでスプレッドシートにアクセスできます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client_secret.json&lt;/code&gt;や&lt;code&gt;sheets.googleapis.com-nodejs-quickstart.json&lt;/code&gt;をコピーしてサーバー設置しておけば自動更新する仕組みなども作れます。&lt;/p&gt;

&lt;p&gt;スプレッドシートは色々な場面で利用されているツールなので是非システム連携などに活用してみて下さい。&lt;/p&gt;

&lt;p&gt;応用としてはこちらの内容で使っています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/n0bisuke/items/3313a64c56317932919e&#34;&gt;勉強会( #IoTLT )の登壇者管理でHeadless Chromeを利用している話&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;それでは！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【祝！移転】電気街すぐそこ！dotstudioのオフィスが移転しました！【D.I.Y】</title>
      <link>https://dotstud.io/blog/office-relocation-for-akihabara/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dotstud.io/blog/office-relocation-for-akihabara/</guid>
      
      <description>

&lt;p&gt;こんにちは、ちゃんとくです。もうすっかり冬ですね。なかなか出歩くのが億劫な季節になりました。&lt;/p&gt;

&lt;p&gt;でもオフィスから電気街遠い……駅も遠い……ってことで&lt;strong&gt;オフィス移転しましたー！！！&lt;/strong&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/132/1.png&#34; alt=&#34;&#34; /&gt;
今回は新オフィスの様子をたっぷりお伝えしたいと思います！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/2.png&#34; alt=&#34;&#34; /&gt;
ちなみにこちらが入居時の様子です。内装屋さんに頼んで、天井と床を剥いでもらいました。ペンキ塗りと床貼りのさまざまな知見（not IT）を得たのでいずれ記事にしたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;移転場所は電気街すぐ&#34;&gt;移転場所は電気街すぐ！&lt;/h2&gt;

&lt;p&gt;新しいオフィスを選ぶにあたっての一番の条件は「&lt;strong&gt;電気街に近いこと&lt;/strong&gt;」だったので、電気街すぐの場所に移動しました！
&lt;img src=&#34;https://dotstud.io/img/blog/132/5.png&#34; alt=&#34;&#34; /&gt;
秋月、千石、ツクモなどのパーツ屋さんはもちろん、カレーにラーメンにケバブなど、美味しいお店もたくさんあって嬉しいです（泣）&lt;/p&gt;

&lt;h2 id=&#34;オフィス内をチラ見せ&#34;&gt;オフィス内をチラ見せ！&lt;/h2&gt;

&lt;p&gt;オフィスの中を紹介します！改装中なのでなにかとお見苦しいですが、&lt;strong&gt;らしさ&lt;/strong&gt;ということでお願いいたします。
&lt;img src=&#34;https://dotstud.io/img/blog/132/map.png&#34; alt=&#34;&#34; /&gt;
ざっくりとした配置（予定）はこんな感じ。&lt;/p&gt;

&lt;h3 id=&#34;エントランス&#34;&gt;エントランス&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/3.png&#34; alt=&#34;&#34; /&gt;
扉を開けると、ぺっぱーくんがお出迎えしてくれます。生気がないのは気のせいです。&lt;/p&gt;

&lt;p&gt;中が丸見えで残念な感じですが、パーテーションを立てて草で装飾してステキな感じになる予定です。&lt;/p&gt;

&lt;h3 id=&#34;打ち合わせスペース&#34;&gt;打ち合わせスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/4.png&#34; alt=&#34;&#34; /&gt;
入って左は、来客用の打ち合わせスペースです。現状だと&lt;strong&gt;机が足りない&lt;/strong&gt;のでかなりタイトな感じになっています。&lt;/p&gt;

&lt;p&gt;コーヒーメーカーが導入されたのでお客様にコーヒーが出せるようになりました！！（ブラックのみ）&lt;/p&gt;

&lt;h3 id=&#34;ハンズオンスペース&#34;&gt;ハンズオンスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/6.png&#34; alt=&#34;&#34; /&gt;
ここが待望だったハンズオンスペースです。&lt;strong&gt;心の目で見てください&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;壁一面のデバイス棚、巨大モニター、芝生カーペットの上に半田ごて作業スペース……素敵ですよね。ここでイベントを開催する日が待ち遠しいです。&lt;/p&gt;

&lt;p&gt;※dotstudioはいま圧倒的に&lt;a href=&#34;http://amzn.asia/8KHCkEv&#34;&gt;床と照明&lt;/a&gt;が不足しています。&lt;/p&gt;

&lt;h3 id=&#34;キッチンスペース&#34;&gt;キッチンスペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/8.png&#34; alt=&#34;&#34; /&gt;
NYはブルックリンスタイルをイメージした自慢のオシャレキッチン（予定地）です。&lt;/p&gt;

&lt;p&gt;テーブルとハイチェアを増設してバーカウンターみたいなやつを作ったり作らなかったりするかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;執務スペース&#34;&gt;執務スペース&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/9.png&#34; alt=&#34;&#34; /&gt;
会社のメイン機能である執務スペース！個人の引き出しやモニタが追加されました。日当たりがよくて眠かったり画面見えなかったりしますが、わたし的に一番好きな場所です。&lt;/p&gt;

&lt;p&gt;床（自分たちで貼った）が完全に乾いたら、みんな大好きな良いイスが導入されるよ！&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;床が足りなかったり、棚がなかったり、電球少なくて暗かったり……。新オフィスはまだまだ作っている途中です。
旧オフィスにも荷物があるので、こんな感じでちまちまと物を運んでいます。
&lt;img src=&#34;https://dotstud.io/img/blog/132/10.png&#34; alt=&#34;&#34; /&gt;
いつ来ても楽しくくつろいで過ごせるオフィスを目指して頑張っていきます！&lt;/p&gt;

&lt;p&gt;ということで&lt;strong&gt;&lt;a href=&#34;http://amzn.asia/8KHCkEv&#34;&gt;ウィッシュリスト&lt;/a&gt;&lt;/strong&gt;も作りましたのでよかったら応援おねがいします（笑）&lt;/p&gt;

&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/132/sushi.png&#34; alt=&#34;&#34; /&gt;
慰労寿司パ（定期）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.3</title>
      <link>https://dotstud.io/blog/hexo-static-site-vol3/</link>
      <pubDate>Tue, 31 Oct 2017 17:53:15 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hexo-static-site-vol3/</guid>
      
      <description>

&lt;p&gt;こんにちは、エンジニアのちゃんとくです。ひょんなことから&lt;a href=&#34;https://nodejs.connpass.com/&#34;&gt;&lt;strong&gt;Node女学園&lt;/strong&gt;&lt;/a&gt;というNode.jsを学ぶ女性のためのコミュニティを立ち上げました。&lt;/p&gt;

&lt;p&gt;このシリーズではNode女学園のブログを作りながら、&lt;strong&gt;Node.js製の静的サイトジェネレータ「Hexo」&lt;/strong&gt;の使い方を紹介していきます！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol2&#34;&gt;&lt;strong&gt;前回&lt;/strong&gt;&lt;/a&gt;はデザインを当ててブログのカスタマイズをしてみました。&lt;/p&gt;



&lt;section class=&#34;link&#34; id=&#34;107&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol2/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/107/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.2
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2017-07-25
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                Node.jsによるNode.jsのためのサイトづくり！テーマを当てておしゃれ感を出す回です。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;


&lt;p&gt;今回はルートを追加してブログ記事以外のページを作ってみます。&lt;/p&gt;

&lt;h2 id=&#34;今回やること&#34;&gt;今回やること&lt;/h2&gt;

&lt;p&gt;現在はコマンドで記事を追加すると&lt;code&gt;サイトURL/:YYYY/:MM/:DD&lt;/code&gt;という記事が作成されるようになっています。&lt;/p&gt;

&lt;p&gt;これを変更して、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;サイトURL/about/&lt;/code&gt;という情報ページを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;に記事を生成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というのをやってみます。&lt;/p&gt;

&lt;h2 id=&#34;新しいルートを追加&#34;&gt;新しいルートを追加&lt;/h2&gt;

&lt;p&gt;ルートの追加は、&lt;code&gt;hexo new page &amp;quot;[新しいルート]&amp;quot;&lt;/code&gt;というコマンドで簡単にできます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/new_route.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;コマンドを実行すると&lt;code&gt;/source&lt;/code&gt;の下に新しいディレクトリが作成されます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/about_dir.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作成された&lt;code&gt;about/index.md&lt;/code&gt;にページ内容を記載します。&lt;/p&gt;

&lt;p&gt;ローカルサーバを起動して&lt;a href=&#34;http://localhost:4000/about/&#34;&gt;http://localhost:4000/about/&lt;/a&gt; を見てみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/about.png&#34; alt=&#34;&#34; /&gt;
新しいページができました！&lt;/p&gt;

&lt;h2 id=&#34;メニューに追加&#34;&gt;メニューに追加&lt;/h2&gt;

&lt;p&gt;今のままではどこからもリンクがないのでメニューのHomeの横に追加してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu_before.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/themes/pacman/_config.yml&lt;/code&gt;の&lt;code&gt;menu:&lt;/code&gt;に表示名とPATHを記載します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu.png&#34; alt=&#34;&#34; /&gt;
Archivesはしばらく不要なので消しました。ついでにEventsとStaffページも追加してみます。&lt;/p&gt;

&lt;p&gt;表示を確認します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/menu_after.png&#34; alt=&#34;&#34; /&gt;
メニューができました！各リンクが正しいかも確認しておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;blog記事のurlを変更する&#34;&gt;blog記事のURLを変更する&lt;/h2&gt;

&lt;p&gt;続いてブログ記事が&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;となるように変更していきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;プロジェクト/_config.yml&lt;/code&gt;を変更しましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/108/title.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;permalink:&lt;/code&gt;を&lt;code&gt;/:title/&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new_post_name:&lt;/code&gt;の項目を&lt;code&gt;blog/:title.md&lt;/code&gt;に変更します。
&lt;img src=&#34;https://dotstud.io/img/blog/108/blog_title.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;新しい記事を作成してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/new_post.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;/source/blog&lt;/code&gt;の下に記事が追加されるようになりました。&lt;/p&gt;

&lt;p&gt;トップページを確認してみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/108/top.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt; にはブログ一覧が表示されます。&lt;/p&gt;

&lt;p&gt;記事をクリックして飛んでみます。
&lt;img src=&#34;https://dotstud.io/img/blog/108/art.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;サイトURL/blog/:title&lt;/code&gt;の形で記事が発行されました！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hexo deploy -g&lt;/code&gt;でデプロイです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/108/done.png&#34; alt=&#34;&#34; /&gt;
今回もコマンドと設定ファイルの編集で簡単にルーティングをすることができました。&lt;/p&gt;

&lt;p&gt;かなりサイトらしくなってきましたね！&lt;/p&gt;

&lt;p&gt;次回はサイドバーをカスタマイズしてみたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.2</title>
      <link>https://dotstud.io/blog/hexo-static-site-vol2/</link>
      <pubDate>Tue, 25 Jul 2017 13:19:25 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hexo-static-site-vol2/</guid>
      
      <description>

&lt;p&gt;こんにちは、エンジニアのちゃんとくです。ひょんなことから&lt;a href=&#34;https://nodejs.connpass.com/&#34;&gt;&lt;strong&gt;Node女学園&lt;/strong&gt;&lt;/a&gt;というNode.jsを学ぶ女性のためのコミュニティを立ち上げました。&lt;/p&gt;

&lt;p&gt;このシリーズではNode女学園のブログを作りながら、&lt;strong&gt;Node.js製の静的サイトジェネレータ「Hexo」&lt;/strong&gt;の使い方を紹介していきます！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol1&#34;&gt;&lt;strong&gt;前回&lt;/strong&gt;&lt;/a&gt;は環境構築とデプロイまでやってみました。&lt;/p&gt;



&lt;section class=&#34;link&#34; id=&#34;105&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol1/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/105/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.1
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2017-06-07
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                Node.jsによるNode.jsのためのサイトづくり！Node.jsが書けなくても制作できます。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;


&lt;p&gt;今回はテーマを当ててブログデザインをカスタマイズしてみます。&lt;/p&gt;

&lt;h2 id=&#34;テーマの探し方&#34;&gt;テーマの探し方&lt;/h2&gt;

&lt;p&gt;Hexoでは既存のテーマを使うことで簡単にデザインを適用できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hexo.io/themes/&#34;&gt;Hexoの公式サイト&lt;/a&gt;では130以上のテーマが紹介されています。
&lt;img src=&#34;https://dotstud.io/img/blog/107/themes.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;また&lt;a href=&#34;https://github.com&#34;&gt;github&lt;/a&gt;で&lt;code&gt;hexo-theme&lt;/code&gt;を検索するとユーザが制作したテーマを探すことができます。
&lt;img src=&#34;https://dotstud.io/img/blog/107/search.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;LICENSEに注意しつつ、好きなテーマを探しましょう。&lt;/p&gt;

&lt;p&gt;今回Node女学園のブログは「ロゴに合わせてオレンジ系統」「ポップな感じ」にしたかったので、こちらの&lt;strong&gt;pacman&lt;/strong&gt;のテーマを使うことにしました。
&lt;img src=&#34;https://dotstud.io/img/blog/107/demo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/A-limon/pacman&#34;&gt;github - A-limon/pacman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://a-limon.github.io/pacman/&#34;&gt;demoページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;テーマをダウンロード&#34;&gt;テーマをダウンロード&lt;/h2&gt;

&lt;p&gt;まずはテーマをダウンロードします。cloneして取ってきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/A-limon/pacman.git themes/pacman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git URLとディレクトリ名は適宜自分のダウンロードしたいテーマのものに置き換えてください。（大体のテーマはREADMEに記載があるはずです。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/107/clone_theme.png&#34; alt=&#34;&#34; /&gt;
cloneして&lt;code&gt;/themes&lt;/code&gt;の下に&lt;code&gt;/pacman&lt;/code&gt;ディレクトリができました。デフォルトの&lt;code&gt;/landscape&lt;/code&gt;は使わないので消してしまいます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_config.yml&lt;/code&gt;ファイルの&lt;code&gt;theme:&lt;/code&gt;をダウンロードしたテーマ名に書き換えます。
&lt;img src=&#34;https://dotstud.io/img/blog/107/chose_theme.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この状態でローカルサーバを起動してみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/107/pacman.png&#34; alt=&#34;&#34; /&gt;
pacmanのテーマが適用されました！&lt;/p&gt;

&lt;h2 id=&#34;カスタマイズ&#34;&gt;カスタマイズ&lt;/h2&gt;

&lt;p&gt;デフォルトでは言語が違っていたり不要なリンクがあったりするので、自分の好みに編集していきます。&lt;/p&gt;

&lt;p&gt;今回はカスタマイズの一例としてpacmanに沿って紹介します。テーマによって方法が異なる場合があるので、各READMEを見つつこの以下は参考程度に見てください。&lt;/p&gt;

&lt;h3 id=&#34;author情報を設定&#34;&gt;Author情報を設定&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;themes/pacman/_config.yml&lt;/code&gt;を編集していきます。先ほどまでの&lt;code&gt;_config.yml&lt;/code&gt;とは違うファイルなので混同しないようにしてください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;author:&lt;/code&gt;の部分を変更します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/author_before.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;intro_line&lt;/code&gt;はフッタに表示されるメッセージです。適宜SNSのアカウントを記載して不要な項目は消去します。&lt;/p&gt;

&lt;p&gt;以下のように設定しました。
&lt;img src=&#34;https://dotstud.io/img/blog/107/author_after.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;続いて&lt;code&gt;author_img&lt;/code&gt;を編集します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/author_img.png&#34; alt=&#34;&#34; /&gt;
画像データをURLで指定する場合は&lt;code&gt;dataURI: true&lt;/code&gt;にして&lt;code&gt;author_img_data:&lt;/code&gt;のあとにURLを記述します。&lt;/p&gt;

&lt;p&gt;ローカルに画像を置く場合は&lt;code&gt;dataURI: false&lt;/code&gt;のまま&lt;code&gt;author_img:&lt;/code&gt;のあとにコメントに習ってPATHを記載しましょう。&lt;/p&gt;

&lt;p&gt;変更を確認してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/107/footer.png&#34; alt=&#34;&#34; /&gt;
フッターに画像、メッセージ、SNSが表示されました！&lt;/p&gt;

&lt;h3 id=&#34;言語を設定&#34;&gt;言語を設定&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/themes/pacman/languages&lt;/code&gt;以下で、&lt;code&gt;default.yml&lt;/code&gt;を残して他の言語ファイルを消去します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/lang.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;確認してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/107/en.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;default.yml&lt;/code&gt;の内容が適用されました。日本語などにしたい場合は&lt;code&gt;default.yml&lt;/code&gt;の中を編集しましょう。&lt;/p&gt;

&lt;h3 id=&#34;サイドバーを編集&#34;&gt;サイドバーを編集&lt;/h3&gt;

&lt;p&gt;続いてサイドバーを変更します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_rss_be.png&#34; alt=&#34;&#34; /&gt;
今回RSSは不要なので消してみます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/themes/pacman/layout/_widget&lt;/code&gt;の下の&lt;code&gt;rss.ejs&lt;/code&gt;を消去します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_rss1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;themes/pacman/_config.yml&lt;/code&gt;の&lt;code&gt;widget:&lt;/code&gt;からrssを消去します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_rss2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;RSSの表示が消えました。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_rss_af.png&#34; alt=&#34;&#34; /&gt;
続いてタグの記事数を表す数字も消してみます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/themes/pacman/layout/_widget/tag.ejs&lt;/code&gt;で数字を記述している部分を消去します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_tag.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;記事数を表す数字が消えました。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_tag_af.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;記事の表示を編集&#34;&gt;記事の表示を編集&lt;/h3&gt;

&lt;p&gt;記事をクリックして各記事ページもカスタマイズしましょう。&lt;/p&gt;

&lt;p&gt;まず記事内に表示されている目次（Contents）を消してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_content_be.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/themes/pacman/layout/_partial/post/article.ejs&lt;/code&gt;を編集します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_content.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;contents&lt;/code&gt;を表示させている部分を消去します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/107/del_contents.png&#34; alt=&#34;&#34; /&gt;
目次が消えました。&lt;/p&gt;

&lt;h3 id=&#34;記事のフッタを編集&#34;&gt;記事のフッタを編集&lt;/h3&gt;

&lt;p&gt;記事のフッタにはあまり馴染みのないSNSのシェアリンクがあるので変更します。
&lt;img src=&#34;https://dotstud.io/img/blog/107/art_footer_before.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/themes/pacman/layout/_partial/after_footer.ejs&lt;/code&gt;の90行目あたりを見てみます。
&lt;img src=&#34;https://dotstud.io/img/blog/107/del_share.png&#34; alt=&#34;&#34; /&gt;
リンクを追加している部分があるので不要なものを消します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/107/del_share_af.png&#34; alt=&#34;&#34; /&gt;
FacebookとTwitterのみ残しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/107/art_footer_after.png&#34; alt=&#34;&#34; /&gt;
ブログ側もFacebookとTwitterのみになっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hexo deploy -g&lt;/code&gt;でデプロイしましょう！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;カスタマイズを加えて自分のブログらしさを出すことができました！
&lt;img src=&#34;https://dotstud.io/img/blog/107/done.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;テーマによって編集箇所が変わりますが、&lt;strong&gt;基本はHTMLとJavaScriptで構成されている&lt;/strong&gt;のでREADMEを読みつつ焦らず直していきましょう。&lt;/p&gt;

&lt;p&gt;次回はルーティングをやってみたいと思います。&lt;/p&gt;

&lt;p&gt;

&lt;section class=&#34;link&#34; id=&#34;108&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol3/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/108/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.3
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2017-10-31
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                Node.jsによるNode.jsのためのサイトづくり！簡易ルーティグで情報ページを作る回。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.1</title>
      <link>https://dotstud.io/blog/hexo-static-site-vol1/</link>
      <pubDate>Wed, 07 Jun 2017 17:15:30 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hexo-static-site-vol1/</guid>
      
      <description>

&lt;p&gt;こんにちは、エンジニアのちゃんとくです。ひょんなことから&lt;a href=&#34;https://nodejs.connpass.com/&#34;&gt;&lt;strong&gt;Node女学園&lt;/strong&gt;&lt;/a&gt;というNode.jsを学ぶ女性のためのコミュニティを立ち上げました。&lt;/p&gt;

&lt;p&gt;イベントを数回開催しましたが、毎回のナレッジが流れていくのがもったいない……。ということでNode女学園のブログを開設しました！
&lt;img src=&#34;https://dotstud.io/img/blog/105/blog.png&#34; alt=&#34;&#34; /&gt;
現在公開しているページは&lt;a href=&#34;https://nodegirls-jp.github.io/&#34;&gt;&lt;strong&gt;こちら&lt;/strong&gt;&lt;/a&gt;、ブログのレポジトリは&lt;a href=&#34;https://github.com/nodegirls-jp/nodegirls-jp.github.io&#34;&gt;&lt;strong&gt;こちら&lt;/strong&gt;&lt;/a&gt;。（鋭意開発中です）&lt;/p&gt;

&lt;p&gt;こちらのページはNode.js製の静的サイトジェネレータ「&lt;strong&gt;Hexo&lt;/strong&gt;」で開発して「&lt;strong&gt;Github Pages&lt;/strong&gt;」で公開しています。手軽に無料で公開できますので、制作過程を紹介していきたいと思います！&lt;/p&gt;

&lt;p&gt;今回は環境構築からGithub Pagesで公開するところまでやってみます。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;h3 id=&#34;静的サイトジェネレータって&#34;&gt;静的サイトジェネレータって？&lt;/h3&gt;

&lt;p&gt;静的サイトジェネレータは、HTML/CSS/JavaScriptで構築される静的サイトをコマンドラインで簡単に生成することができるツールです。ヘッダやフッタの共通化、簡易ルーティング、MarkdownファイルのHTML変換など&lt;strong&gt;面倒な部分をよしなにやってくれます&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Ruby製のJekyllやGo製のHUGO、React.js製のGatsby……と様々な言語で組まれたジェネレータがありますが、試してみる分にはあまり大きな違いはないので好みに合わせて選びましょう！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;Static Site Generators&lt;/a&gt;というサイトで静的サイトジェネレータの一覧が見れます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/ranking.png&#34; alt=&#34;&#34; /&gt;
スター順に並べてみると、Jekyll、HUGOに続いてかなり人気ですね！&lt;/p&gt;

&lt;p&gt;ちなみに&lt;strong&gt;dotstudioのサイトはHUGO&lt;/strong&gt;で生成されています。こちらの入門についてはデザイナーのちゃちゃまるくんが頑張っているのでご参照ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/hugo-for-designers-vol1/&#34;&gt;デザイナーの僕がHugoを使ってポートフォリオサイトを作ってみる #1【準備編】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;github-pagesって&#34;&gt;Github Pagesって？&lt;/h3&gt;

&lt;p&gt;Githubが提供する、&lt;strong&gt;無料で静的サイトを公開できるホスティングサービス&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;Githubのアカウントやorgnization、プロジェクトごとにサイトを制作することができ、&lt;strong&gt;pushしていくだけ&lt;/strong&gt;で公開できるのでgit管理に慣れている人にとってはかなり手軽ですね！&lt;/p&gt;

&lt;p&gt;今回はGithub Pagesを作成するアカウント（またはorgnization）が作成されている前提で進めますので、お持ちでない方は登録から始めてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;またプロジェクトに紐付けて公開する場合は手順が異なりますが本記事では割愛します。&lt;/p&gt;

&lt;h2 id=&#34;githubにレポジトリを作成しよう&#34;&gt;Githubにレポジトリを作成しよう&lt;/h2&gt;

&lt;p&gt;まずはGithubにGithub Pages用のレポジトリを作成しましょう。&lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;にアクセスし、[New Repository]を選択します。
&lt;img src=&#34;https://dotstud.io/img/blog/105/new.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「Create a new repository」のページに移動します。
&lt;img src=&#34;https://dotstud.io/img/blog/105/create.png&#34; alt=&#34;&#34; /&gt;
「&lt;strong&gt;Owner&lt;/strong&gt;」にはGithub Pagesを作成したいアカウントやorgnizationを指定します。今回はnodegirls-jpというorgnizationを指定します。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;Repository name&lt;/strong&gt;」には&lt;code&gt;owner名.github.io&lt;/code&gt;と入力します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;このフォーマットに従わないとGithub Pagesが作成されない&lt;/strong&gt;ので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/105/repos.png&#34; alt=&#34;&#34; /&gt;
レポジトリができました！公開URLは&lt;code&gt;https://owner名.github.io&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;SSHのアドレスは後ほど使うのでメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;雛形を作ってみよう&#34;&gt;雛形を作ってみよう&lt;/h2&gt;

&lt;p&gt;続いてGithub Pagesで公開するブログをHexoで作っていきます。&lt;/p&gt;

&lt;h3 id=&#34;開発環境構築&#34;&gt;開発環境構築&lt;/h3&gt;

&lt;p&gt;Hexoの開発は&lt;strong&gt;Node.jsが動く環境&lt;/strong&gt;で行います。まずはNode.jsをインストールしましょう。&lt;/p&gt;

&lt;p&gt;Node.jsのインストールには「nvm」や「nodebrew」を使うと便利です。下記ではnodebrewを使ったインストール方法を紹介しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dotstud.io/blog/setup-new-mac-app/#node-js環境整備&#34;&gt;僕がMacを買い換えてすぐにいれるツール&amp;amp;すぐにする初期設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;続いてHexoのインストールです。下記のコマンドを実行しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g hexo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-g&lt;/code&gt;オプションをつけることでグローバルにインストールすることができます。&lt;/p&gt;

&lt;h3 id=&#34;コマンドで雛形生成&#34;&gt;コマンドで雛形生成&lt;/h3&gt;

&lt;p&gt;Hexoのコマンドでブログの雛形を生成します。&lt;/p&gt;

&lt;p&gt;プロジェクトを作りたい場所へ移動し、&lt;code&gt;hexo init [ブログ名]&lt;/code&gt;で作成です。今回は「nodegirls-jp」というブログ名にします。
&lt;img src=&#34;https://dotstud.io/img/blog/105/init.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;実行すると自動で&lt;code&gt;nodegirls-jp&lt;/code&gt;ディレクトリが作成されます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/ls.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ディレクトリの下へ移動して見てみましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/105/files.png&#34; alt=&#34;&#34; /&gt;
ファイルとフォルダが作成されています。&lt;/p&gt;

&lt;p&gt;ここで&lt;code&gt;npm install&lt;/code&gt;を実行してモジュールをインストールします。
&lt;img src=&#34;https://dotstud.io/img/blog/105/npm.png&#34; alt=&#34;&#34; /&gt;
これだけで雛形が完成です！&lt;/p&gt;

&lt;h3 id=&#34;ローカルで確認する&#34;&gt;ローカルで確認する&lt;/h3&gt;

&lt;p&gt;ローカルサーバを立ち上げてブログを確認してみます。（この状態ではまだ公開されません。）
&lt;img src=&#34;https://dotstud.io/img/blog/105/server.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;起動したまま&lt;a href=&#34;http://localhost:4000/&#34;&gt;http://localhost:4000/&lt;/a&gt; へアクセスしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/105/sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ブログの雛形が作成されました！簡単…簡単……ッ！&lt;/p&gt;

&lt;h3 id=&#34;ブログの設定を追加&#34;&gt;ブログの設定を追加&lt;/h3&gt;

&lt;p&gt;主な設定は&lt;code&gt;_config.yml&lt;/code&gt;というファイルに記述します。エディタで&lt;code&gt;_config.yml&lt;/code&gt;を開きましょう。
&lt;img src=&#34;https://dotstud.io/img/blog/105/config.png&#34; alt=&#34;&#34; /&gt;
こんな感じでブログに関する説明がずらっと記載されているので編集します。&lt;/p&gt;

&lt;p&gt;urlは先ほど作った&lt;code&gt;https://owner名.github.io&lt;/code&gt;を設定します。title, subtitle, authorなどはお好みで設定しましょう。日本語ブログの場合&lt;code&gt;language&lt;/code&gt;は&lt;code&gt;ja&lt;/code&gt;、&lt;code&gt;timezone&lt;/code&gt;は&lt;code&gt;Asia/Tokyo&lt;/code&gt;がおすすめです。&lt;/p&gt;

&lt;p&gt;今回の設定はこのようにしました。参考までに。
&lt;img src=&#34;https://dotstud.io/img/blog/105/config_sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一番下まで行くと&lt;code&gt;#Deployment&lt;/code&gt;の項目があります。デプロイのためにここを修正します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deploy:
  type: git
  repo: git@github.com:nodegirls-jp/nodegirls-jp.github.io.git
  branch: master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;repoには&lt;strong&gt;先ほど作成したレポジトリのSSHアドレスを記述&lt;/strong&gt;します。&lt;/p&gt;

&lt;p&gt;設定をローカルで確認するとこんな感じになっています。
&lt;img src=&#34;https://dotstud.io/img/blog/105/sample_local.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;反映されていない場合は一度&lt;code&gt;control&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt;でサーバを止め、&lt;code&gt;hexo server&lt;/code&gt;で起動しなおしてみてください。&lt;/p&gt;

&lt;h2 id=&#34;公開してみよう&#34;&gt;公開してみよう&lt;/h2&gt;

&lt;p&gt;いよいよ公開してみましょう。下記コマンドでビルド、公開を一度に行ってくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hexo deploy -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでエラーが出る場合は、以下のコマンドでデプロイツールをインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;公開されたページを確認してみます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/deploy.png&#34; alt=&#34;&#34; /&gt;
公開できました！&lt;/p&gt;

&lt;h2 id=&#34;記事を追加しよう&#34;&gt;記事を追加しよう&lt;/h2&gt;

&lt;p&gt;記事を追加してみましょう。&lt;code&gt;hexo new 記事名&lt;/code&gt;というコマンドで生成できます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/about.png&#34; alt=&#34;&#34; /&gt;
最初の記事なので&lt;code&gt;about&lt;/code&gt;という記事を作ってみました。デフォルトの設定では&lt;code&gt;サイトURL/YYYY/MM/DD/タイトル&lt;/code&gt;というURLになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/105/new_post.png&#34; alt=&#34;&#34; /&gt;
&lt;code&gt;_posts&lt;/code&gt;の下に&lt;code&gt;about.md&lt;/code&gt;が作成されました。このファイルを編集します。&lt;/p&gt;

&lt;p&gt;title, dataには自動で値が付与されており、tagsには任意のタグを追加できます。
&lt;img src=&#34;https://dotstud.io/img/blog/105/header.png&#34; alt=&#34;&#34; /&gt;
titleを修正して、「info」というタグを設定してみました。&lt;code&gt;---&lt;/code&gt;の下から記事本文をマークダウンで記述します。（HTMLも可）&lt;/p&gt;

&lt;p&gt;記事を&lt;code&gt;hexo d -g&lt;/code&gt;でデプロイします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/105/post_sample.png&#34; alt=&#34;&#34; /&gt;
記事が公開できました！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;サーバの整備やデプロイなどをほとんど意識せずに公開することができました！コマンドを使い慣れている人は本当に&lt;strong&gt;爆速開発&lt;/strong&gt;だったと思います。&lt;/p&gt;

&lt;p&gt;テーマやプラグインの追加で簡単に拡張できるので、どんどんカスタマイズしてみましょう。&lt;/p&gt;

&lt;p&gt;次回はテーマを当ててブログのデザインを変更してみます。&lt;/p&gt;



&lt;section class=&#34;link&#34; id=&#34;107&#34;&gt;
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
          &lt;div class=&#34;link_content&#34;&gt;
          &lt;a href=&#34;https://dotstud.io/blog/hexo-static-site-vol2/&#34;&gt;&lt;/a&gt;
          &lt;img src=&#34;https://dotstud.io/img/blog/107/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
          &lt;/div&gt;
          &lt;div class=&#34;link_content&#34;&gt;
            &lt;div class=&#34;link_detail&#34;&gt;
              &lt;div class=&#34;link_title&#34;&gt;
                Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.2
              &lt;/div&gt;
              &lt;div class=&#34;link_date&#34;&gt;
                
                2017-07-25
              &lt;/div&gt;
              &lt;div class=&#34;link_desc&#34;&gt;
                Node.jsによるNode.jsのためのサイトづくり！テーマを当てておしゃれ感を出す回です。
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
      
      
  
&lt;/section&gt;

</description>
    </item>
    
  </channel>
</rss>