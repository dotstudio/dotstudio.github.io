<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>beginner on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/beginner/</link><description>Recent content in beginner on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Thu, 21 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="/series/beginner/" rel="self" type="application/rss+xml"/><item><title>MPU9250で回転角度を検知する</title><link>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/detect-rotation-angle-with-mpu9250/</guid><description>&lt;p>はじめまして。ライターとして起用していただきました、ありか(&lt;a href="https://twitter.com/hakase0617">@hakase0617&lt;/a>)です。&lt;/p>
&lt;p>秋田高専で高専ロボコンを5年間やっていました。
ロボコン界隈には卒業後も関わり続けているため、そういった若きエンジニアの手助けができたらと思っています！&lt;/p>
&lt;p>マネジメントや教育に興味があり、その一環でIoT、AIの勉強をしています。
将来的にはエンジニアを育成したり、一緒にお仕事ができたりしたら楽しそうだなって思います。&lt;/p>
&lt;h2 id="9">9軸センサとは&lt;/h2>
&lt;p>早速ですが、今日はMPU9250というセンサを紹介します。
これは「9軸センサ」と呼ばれるものです。&lt;/p>
&lt;p>え、9軸ってx,y,zとあとは何！？&lt;/p>
&lt;p>これは&lt;/p>
&lt;ul>
&lt;li>加速度センサ　x,y,z&lt;/li>
&lt;li>角速度センサ　x,y,z&lt;/li>
&lt;li>地磁気センサ　x,y,z&lt;/li>
&lt;/ul>
&lt;p>の3軸ずつ、合わせて9軸というものです。
まずは各センサの紹介からいきます。&lt;/p>
&lt;h2 id="heading">加速度センサとは&lt;/h2>
&lt;p>加速度とは、&lt;!-- raw HTML omitted -->「どのくらいの速度が変化しているか」という指標です。&lt;!-- raw HTML omitted -->
車を運転しているイメージをしてください。
アクセルを思いっきり踏んで、時速20km/hで走っていた車を時速60km/hまで加速させたとします。
この時、体は後ろに引っ張られる感じがします。
あの感じが加速度です。&lt;/p>
&lt;p>加速度センサでは、物が動いているかどうかということも検出できます。
加速度センサの応用例としてはカメラの手ぶれ補正やスマホの画面回転、ハードディスクの揺れ検知などが該当します。
ロボットの姿勢制御には欠かせない技術でもあります。&lt;/p>
&lt;h2 id="heading-1">角速度センサとは&lt;/h2>
&lt;p>角速度とは読んで字のごとく、回転角の速度です。
ものが回っている時の速さの単位に「回転数」（rpmなど）や周波数（Hzなど）がありますが、これらは「何回回ったか」を示す指標です。
&lt;!-- raw HTML omitted -->回っているものの「角度」に注目して速さを表す指標が角速度です。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="heading-2">地磁気センサとは&lt;/h2>
&lt;p>地磁気センサでは、磁力の強さを検知出来ます。
地球は大きな磁石ですが丸いので、地球上のどの位置にいるかで地磁気の強さは異なります。
そのため、&lt;!-- raw HTML omitted -->地磁気の強さやら向きやらを測定すると自分がいる位置が分かり、自分が向いている方角も分かるというものです。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="9-1">9軸センサで何が出来るか&lt;/h2>
&lt;p>さて、これら3つのセンサが合体した9軸センサで、何ができるのでしょうか？&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->角速度センサで「自分がどれだけ回ったのか」が分かります。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>しかし弱点があります。
角速度センサだけでは、今「動いている」のか「止まっている」のかは分かりません。
そこで加速度センサの出番です。加速度センサは上記状態を把握できます。
これらを合わせて「6軸センサ」と呼ぶのですが、&lt;!-- raw HTML omitted -->この6軸センサを使うと「回転角度」が分かります。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>じゃあ6軸でいいじゃん、と思ってしまいますが、6軸センサには弱点があります。
ずばり、「ドリフト」です。&lt;/p>
&lt;p>角速度センサは「積分方式」で回転角度を検出します。
どういうことかというと、「15度動いた」「20度動いた」「10度動いた」を合わせて「45度動いた」といった風に、足し算で算出します。
しかし、みんなの敵である「誤差」という概念がここで登場します。&lt;/p>
&lt;p>さっきの例で、毎回+1度の誤差が生じてしまうとします。
すると　16度+21度+11度＝48度　となり、誤差がどんどん大きくなっていきます。
つまり、試行回数（時間経過）とともに誤差が大きくなっていくではありませんか。&lt;/p>
&lt;p>これを解決するためには、別の方法で校正を行う必要があります。
そこで「地磁気センサ」を使います。&lt;/p>
&lt;p>地磁気センサは、簡単に言うと「方位磁針」です。そのため、北を向いたまま10分経とうが1時間経とうが、&lt;!-- raw HTML omitted -->地磁気センサは「北を向いている」という状態を教えてくれます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>まとめると、
　角速度センサ→何度回ったかが分かる
　加速度センサ→回ったかが分かる
　地磁気センサ→ドリフトを打ち消す
といった役割を持ち、回転を検知するセンサとなります。&lt;/p>
&lt;h2 id="heading-3">実際に使ってみよう&lt;/h2>
&lt;p>MPU9250を使って、実際に回転角度を測定してみましょう。
今回は開発環境にArduinoを選定しました。
ライブラリが公開されており、初心者である僕でもサクッと動作確認が可能な点に魅力を感じました。&lt;/p>
&lt;p>今回は入門として、角速度センサのみで回転角度を検出してみます。&lt;/p>
&lt;h2 id="heading-4">開発環境&lt;/h2>
&lt;ul>
&lt;li>OS:Windows10&lt;/li>
&lt;li>ArduinoIDE&lt;/li>
&lt;li>Arduino UNO&lt;/li>
&lt;li>MPU9250&lt;/li>
&lt;li>ジャンパワイヤ5本&lt;/li>
&lt;li>ブレッドボード&lt;/li>
&lt;/ul>
&lt;h2 id="heading-5">スケッチ&lt;/h2>
&lt;pre>&lt;code class="language-C:Gyro" data-lang="C:Gyro">#include &amp;lt;Wire.h&amp;gt;
#define FIL 0.9 //フィルタ
#define AVE 100 //測定回数
#define GYRO 30 //ドリフト許容値
int emp[6] = {};
int data = 0; //生データ格納 1から順に加速度xyz角速度xyz
long datasum = 0; //合計データ格納　平均算出用
int th = 0; //閾値
long integral = 0; //積分値
int degree; //回転角度
int rock; //ロック機構により導かれた初期値
char input;
void setup() {
Wire.begin(); Serial.begin(115200); Wire.begin(0x68);
Wire.beginTransmission(0x68); Wire.write(0x6B); Wire.write(0x00); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1C); Wire.write(0x10); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1B); Wire.write(0x08); Wire.endTransmission();
Wire.beginTransmission(0x68); Wire.write(0x1A); Wire.write(0x05); Wire.endTransmission();
Serial.print(&amp;quot;*****************\nCalibrating now\nplease turn once and press 'f'\n&amp;quot;);
while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == 'f') {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
}
void loop() {
reading();
degree = abs(integral / rock);
Serial.println(degree);
datasum = 0;
}
void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code>&lt;/pre>&lt;h2 id="arduino">Arduinoとの接続&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Arduino&lt;/th>
&lt;th align="right">MPU9250&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">5V&lt;/td>
&lt;td align="right">VCC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">GND&lt;/td>
&lt;td align="right">GND&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A2&lt;/td>
&lt;td align="right">INT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A4&lt;/td>
&lt;td align="right">SDA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">A5&lt;/td>
&lt;td align="right">SCL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="heading-6">実物&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-7">スケッチ簡易解説&lt;/h2>
&lt;p>今回は角速度センサのｚ軸のみを使用します。
ｚ軸、つまり地面と鉛直な方向の回転が分かる、早い話が自分がどれだけ回ったかが分かります。&lt;/p>
&lt;p>まず、角速度センサを使うにあたって、センサから返ってくる値を調べる必要があります。
センサは「何度回ったよ」とは教えてくれません。
「4253」「71469」みたいな無機質な値を教えてくれます。
そのため、その値がいくつで360度に相当するのかを確認する必要があります。&lt;/p>
&lt;p>どうすればいいのか、答えは「360度回せばいい」のです。そのままです。&lt;/p>
&lt;p>今回はArduinoを起動した際に、まず1回転して値を取得して、それから角度検出をする、というスケッチを作りました。&lt;/p>
&lt;pre>&lt;code class="language-C:while" data-lang="C:while"> while (1) {
reading();
datasum = 0;
input = Serial.read();
if (input == 'f') {
rock = integral / 360;
Serial.print(&amp;quot;Ready!&amp;quot;);
Serial.print(&amp;quot;\n*******\n&amp;quot;);
integral = 0;
delay(500);
break;
}
}
&lt;/code>&lt;/pre>&lt;p>reading()関数の中で実際に値を取得するのですが、1回転した合図として「Arduinoのシリアル通信で'f'を送ってあげた時にwhile()から抜けて角度検出モードに移行します。&lt;/p>
&lt;pre>&lt;code class="language-C:reading" data-lang="C:reading">void reading() {
for (int i = 0; i &amp;lt; AVE; i++) {
Wire.beginTransmission(0x68); Wire.write(0x3B); Wire.endTransmission(); Wire.requestFrom(0x68, 14);
while (Wire.available() &amp;lt; 14);
emp[0] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[1] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[2] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[3] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[4] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
emp[5] = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
data = Wire.read() &amp;lt;&amp;lt; 8 | Wire.read();
datasum += data;
}
datasum /= AVE;
if (th == 0) {
th = datasum;
}
if (abs(datasum - th) &amp;gt; GYRO) { //誤差が小さい場合はスルー ドリフト対策
integral += datasum - th;
}
}
&lt;/code>&lt;/pre>&lt;p>そのreading()の中では、平均を取るためにAVEで指定された回数値を格納し続けています。
emp[]で色々格納していますが、上から
加速度ｘ軸、ｙ軸、ｚ軸
温度
角速度ｘ軸、ｙ軸、ｚ軸
という風に格納されていきます。そのため今回は角速度ｚ軸のみを取り出すためこういった書き方です。&lt;/p>
&lt;h2 id="heading-8">動かしてみよう&lt;/h2>
&lt;p>リード線を数本接続しただけで動作確認が出来るなんて、とっても楽ですね！
早速動かしてみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>できました！
角度が表示されています。&lt;/p>
&lt;h2 id="heading-9">何に使えるの？&lt;/h2>
&lt;p>今回注目したのは、自律移動ロボットの位置制御です。
ロボットコンテストなどでは、コントローラなどを用いず自動でロボットが移動することを求められるケースが多々あります。
その自動ロボットの位置制御には、どのような方法が用いられているのでしょうか。&lt;/p>
&lt;p>おそらく一般的なものは、モータにロータリエンコーダなどを取り付けて
「モータがどのくらい回ったか」
を検出し、位置を割り出す方法だと思います。&lt;/p>
&lt;p>ですが、この方法には弱点があります。
例えば、移動するフィールドが平らではなかったり、滑りやすい障害物（落ち葉など）があったり、タイヤが走行中に滑ったりといった「タイヤとフィールドの関係」で誤差が生じてしまいます。&lt;/p>
&lt;p>この誤差をなんとかしたい！
そんな時に便利なのがこの9軸センサです。&lt;/p>
&lt;p>自身がどれくらい動いたか、どれくらい回ったかが分かるこのセンサがあれば、たとえタイヤが空回りしてしまっても、「今いる位置」を知ることが可能なのです！&lt;/p>
&lt;h2 id="heading-10">最後に&lt;/h2>
&lt;p>今回は9軸センサのうちたった1軸しか使っていませんが、回転を検出することができました。
より高度なスケッチを作ることでより高度な測定が可能になるため、これからも勉強を続けていきたいです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;/blockquote></description></item><item><title>初めてのArduino〜トレーニングマシンを作る編〜</title><link>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</link><pubDate>Mon, 11 Mar 2019 23:00:00 +0900</pubDate><guid>https://dotstud.io/blog/jikyuryoku-aruduino-training-machine/</guid><description>&lt;p>初めまして、今月からdotstudioでお世話になる&lt;a href="https://dotstud.io/members/jikyuryoku">自給力&lt;/a>です。&lt;/p>
&lt;p>プログラミングスクール卒業後でフラフラしてたところを、のびすけしゃちょーから「記事を書いてみない？」と誘っていただきました。これから、バシバシ記事を書いていきますのでよろしくお願いします。&lt;/p>
&lt;p>&lt;strong>コードの書き方や手順で変なところあるかもしれませんが、許してください……！&lt;/strong>&lt;/p>
&lt;p>僕はフィットネス業界での事業を考えています！せっかくなので、フィットネスに絡めて何か作って、記事にしていきたいと思います。プログラミングはかじってはいるのですが、IoTのコーディングや電子工作は初めてなので、&lt;!-- raw HTML omitted -->初心者さん向けに自分の失敗の工程も含めてお伝えできればと思ってます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>そして、まず作ろうと決意したモノは……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>意外とスクワットとかダンベルのトレーニングしている時って回数数えるの面倒なんですよね。&lt;/p>
&lt;p>そこで、勝手に回数数えてくれるサービスがあればテレビ見ながらでも回数に気を取られずにトレーニングができる！そんな思いから、サービス作ってみようと思ったわけです。&lt;/p>
&lt;h2 id="heading">のびすけしゃちょーに相談してみる&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code> なるほど！！面白そうですね！！！！じゃあ加速度センサ使ってみたいです！！！&amp;lt;br&amp;gt;
（理由:かっこいいから）
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そんなこんなで、iot初心者の僕は**「磁気スイッチ」を使ったカウントマシン**を作ることに決まりました！！&lt;/p>
&lt;h2 id="heading-1">まずは準備&lt;/h2>
&lt;p>今回使うのはArduino（写真左）と磁気スイッチ（写真真ん中と右）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず、Arduinoにコードを書き込むためにArduino IDEをインストールしましょう。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/docs/arduinoide-setup/?fbclid=IwAR3BB5HrFh-K6cMGcnGl4rjHIA4u2OJYDDlNjLmN5IrprOn8n3zY6g-Kp8s">こちらのドキュメント&lt;/a>の通りにやれば簡単にインストールできます。&lt;/p>
&lt;p>そして、磁気スイッチの使い方は&lt;a href="http://wiki.seeedstudio.com/Grove-Magnetic_Switch/">こちら&lt;/a>を参考にしました！&lt;/p>
&lt;p>サイト内は英語で書かれていますが、ここでやることしては&lt;strong>ArduinoのD２のピンに刺し、写真のように組み立てる&lt;/strong>のだそうです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-2">さぁ、数を数えよう&lt;/h2>
&lt;p>「数なんてすぐに数えられるわい」っと思ったのも束の間……。&lt;/p>
&lt;p>**「あれ？何を数えるんだ？？？」**と、なんとも初歩的な壁にぶつかりました。&lt;/p>
&lt;p>ダンベルを動かした回数を頭の中で数えるのは簡単ですが、機械に数えさせるのは訳が違う。まずは何を数えるか考えなければならないのです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「フラグ」が何を指しているのかが分からなかったので、**「Arduino フラグ」**でググってみました。どうやらセンサの状態を変数に入れて管理することだということが分かりました。&lt;/p>
&lt;p>（参考１）&lt;a href="http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html">アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a>&lt;/p>
&lt;p>次に、「Arduino 数える」でググり、「変数でどう数えるのか」について、以下の記事を参考にしました。&lt;/p>
&lt;p>（参考２）&lt;a href="https://n.mtng.org/ele/arduino/samples/variable2.html">変数で回数を数える&lt;/a>&lt;/p>
&lt;p>やることとしては、&lt;/p>
&lt;ol>
&lt;li>センサの状態をフラグ（変数）として認識させる&lt;/li>
&lt;li>フラグがついてる状態から、なくなった状態に「+１」していく&lt;/li>
&lt;li>1と2を繰り返す&lt;/li>
&lt;/ol>
&lt;p>なるほどなるほど。だいたい道筋が見えてきたので、作っていきます！&lt;/p>
&lt;h2 id="heading-3">よし、作ろう&lt;/h2>
&lt;p>（参考１）&lt;a href="http://monoist.atmarkit.co.jp/mn/articles/1308/09/news001_3.html">アイデア・ハック!! Arduinoで遊ぼう（2）&lt;/a>からスイッチのon/offで数を数えるためコードがあり、アレンジをしてみました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>必要なのは**「グローバル変数の定義」「フラグの定義」「フラグからカウントする際のコード」の３つ**。&lt;/p>
&lt;p>まずは**「グローバル変数の定義」**です。&lt;/p>
&lt;pre>&lt;code>int G_state = FLG_OFF;
&lt;/code>&lt;/pre>&lt;p>簡単ですね。&lt;/p>
&lt;p>次に**「フラグの定義」**&lt;/p>
&lt;p>フラグ立っている時は「1」、立っていない時は「0」と教えてあげます。&lt;/p>
&lt;pre>&lt;code>const int FLG_ON = 1;
const int FLG_OFF = 0;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>楽勝！&lt;/strong>&lt;/p>
&lt;p>それでは、最後に**「フラグからカウントする際のコード」**を書いてみましょう。&lt;/p>
&lt;p>Void setup()の中に、&lt;/p>
&lt;pre>&lt;code>Serial.begin(115200);
&lt;/code>&lt;/pre>&lt;p>を書き、
void loop()の中に、&lt;/p>
&lt;pre>&lt;code> int val = digitalRead(MAGNECTIC_SWITCH);
&lt;/code>&lt;/pre>&lt;p>を書きます。&lt;/p>
&lt;p>これはつまり、&lt;strong>センサで取得した値を変数valに入れている&lt;/strong>わけです。&lt;/p>
&lt;p>そして&lt;/p>
&lt;pre>&lt;code>if(G_state == FLG_OFF){
count += 1;
}
Serial.println(count);
&lt;/code>&lt;/pre>&lt;p>と書き、コンパイルして、書き込みをしていきます。&lt;/p>
&lt;p>ちょっとここでケアレスミスがあり、書き込みの際にエラーが何回か出ましたが、難なく解消。&lt;/p>
&lt;p>よし！これで動く！&lt;/p>
&lt;p>ツールの中のシリアルモニタを見てみましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>な、なにーーー！！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>なんか勝手に数が増えてる！！！！このままじゃ数字が止まらなくなる！！！（パニック状態）&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>つまり、コードを日本語訳にすると、**「G_stateの中のフラグがないときは、足していく」**という意味。フラグが無い状態では+1され続けてしまうんです。そりゃうまくイカンわ！！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>のびさんのご指摘の通り、&lt;strong>elseの中にif文を書いてフラグがonだったら1カウントをするコード&lt;/strong>に書き換えました。&lt;/p>
&lt;p>よし！これでどうだ！！！書き込み開始！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-4">ちゃんと数えてくれるか検証&lt;/h2>
&lt;p>磁石をセンサに近づけて、、&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>離すと、、&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そしてシリアルモニタを見ると&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>見事成功です。&lt;/p>
&lt;p>いやぁ、一口に数を数えるとは言っても奥が深いですね！今日のところはこの辺で終わりたいと思います。&lt;/p>
&lt;p>続編をお楽しみに……！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【初心者必見】電子パーツ買うならここ！アキバ電気街徹底ガイド</title><link>https://dotstud.io/blog/akihabara-guide-for-beginners/</link><pubDate>Mon, 27 Mar 2017 12:30:54 +0900</pubDate><guid>https://dotstud.io/blog/akihabara-guide-for-beginners/</guid><description>&lt;p>こんにちは、バックエンドエンジニアのちゃんとく（&lt;a href="https://twitter.com/tokutoku393">@tokutoku393&lt;/a>）です。&lt;/p>
&lt;p>昨年は頑張ってお風呂センサーを制作しました。
&lt;img src="https://dotstud.io/img/blog/091/01_furo.png" alt="">
意気揚々と&lt;a href="https://iotlt.connpass.com/">IoTLT&lt;/a>で発表したら、「危ない」「感電死する」と炎上しました。&lt;/p>
&lt;p>初心者のうちはなかなか電子工作のルールってわかりませんよね……。私のような犠牲者を出さないためにも、&lt;strong>初心者の方に「怖くない電子工作&lt;/strong>」を伝えていければと思います！&lt;/p>
&lt;h2 id="heading">怖くない部品集め！秋葉原徹底ガイド&lt;/h2>
&lt;p>電子工作を始めたい！と思うときに最初にぶちあたる壁が、「&lt;strong>電子パーツどこで揃えたらいいの問題&lt;/strong>」ですよね。&lt;/p>
&lt;p>ネットで買える時代といえど、配送料や時間がかかったり、店舗にしかないものがあったり。&lt;/p>
&lt;p>そこで今回は日本屈指の電気街「&lt;strong>秋葉原&lt;/strong>」にスポットを当て、&lt;strong>知っておきたいお買い物ルール&lt;/strong>や&lt;strong>オススメ店舗&lt;/strong> を紹介していこうと思います！&lt;/p>
&lt;p>※本記事の情報は2017年3月25日時点のものです。&lt;/p>
&lt;h2 id="-">はじめに: 秋葉原ってどんなところ？&lt;/h2>
&lt;p>「萌えの街」や「電気街」と言われる秋葉原ですが、実際にはどこに電子パーツを買えるお店があるのでしょうか？ある程度店舗が固まっているので、全体MAPからざっくりと説明します。
&lt;img src="https://dotstud.io/img/blog/091/03_akiba_map.png" alt="">
秋葉原で電子パーツを買えるお店の多くは、&lt;strong>電気街口を出て正面、中央通り沿い&lt;/strong> に集まっています。&lt;/p>
&lt;h4 id="a-sega">A. お横断歩道渡ってSEGA裏周辺&lt;/h4>
&lt;p>電子工作向きのパーツや道具などが揃っているお店が多い一角です。「&lt;strong>秋月&lt;/strong>」「&lt;strong>千石&lt;/strong>」「&lt;strong>マルツ&lt;/strong>」など比較的初心者でも書いやすいお店が集まっており、とりあえずこの辺に行っておけば安心。LEDの「ピカリ館」などもここ。&lt;/p>
&lt;h4 id="b-1">B. ソフマップ1号店裏周辺&lt;/h4>
&lt;p>電化製品や周辺機器の販売が多い一角。なにかと便利な100円ショップもあります。よくわからないものを投げ売りしている怪しげなジャンクショップも多い！&lt;/p>
&lt;h4 id="c-">C. 電気街口出てすぐ！高架線下&lt;/h4>
&lt;p>駅ほぼ直結の区画に、電子パーツから無線、中古ゲーム、お土産屋さんまで様々なお店が所狭しと並んでいます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/04_chuo.png" alt="">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="--1">ルール編: 玄人っぽさを出せ！暗黙のお買い物ルール&lt;/h2>
&lt;h3 id="heading-1">買いたいものを調べておこう&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/05_shop.png" alt="">
電子工作に使うパーツは作りたいものによってそれぞれ違い、店頭には様々な部品が&lt;strong>引き出しいっぱい壁一面&lt;/strong>に並んでいます。事前準備なしで買い揃えるのは慣れた人でも至難の技です。&lt;/p>
&lt;p>店頭に行ってあたふたしないために、必要なパーツや値を調べておき、さらに &lt;strong>メーカーや型番まで調べておく&lt;/strong> と店員さんにも聞きやすいのでオススメです。&lt;/p>
&lt;p>初めて「ジャンパワイヤというもの」を買いに行った時、オスオスとかオスメスとか言い出して何が何だかわからず、店頭で絶望していました。（わからない人はdotstuioのドキュメントを読んでね！）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-2">トレーを使おう&lt;/h3>
&lt;p>LEDやカーボン抵抗など、細かい部品のバラ売りは剥き出しの状態で売られています。かなり小さく、酸化等の問題もあるので、各店舗に用意してある &lt;strong>トレーに乗せて扱います。&lt;/strong> トレーのままレジに持っていきましょう。&lt;/p>
&lt;p>私はしっかり手に乗せてレジに持っていき、 &lt;strong>レジのお姉さんに怒られました&lt;/strong>。怒られたい人も、ぐっと我慢してトレーを使ってください。&lt;/p>
&lt;h3 id="heading-3">荷物は少なめに&lt;/h3>
&lt;p>電子パーツを扱うお店は、&lt;strong>大体がめっちゃ狭い作り&lt;/strong> になっています。すれ違うのがやっとなくらい。&lt;/p>
&lt;p>通路に所狭しと商品が置かれていたり、剥き出しの棚に細かい部品が雑然と並んでいたりするので、小さめのカバンで両手があいているスタイルがオススメです。&lt;/p>
&lt;p>ここまでしておけば初めてお店に行ってもあまり困らないでしょう！あとは &lt;strong>ドヤ顔で壁を眺めるのみ&lt;/strong> です。&lt;/p>
&lt;h2 id="--2">街歩き編: 秋葉原を歩こう！オススメ店舗紹介&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/06_uko_sensei.png" alt="">&lt;/p>
&lt;p>ここからはdotstudioのうこに案内してもらいます！&lt;/p>
&lt;p>親に「おもちゃが欲しいなら自分で作れ」と言われ小2で電子工作の道に突入した筋金入りのメイカーです。最近はウェアラブルシンセサイザを作り、MakerFairTokyo2016などにも出展しました。&lt;a href="https://dotstud.io/blog/uko-exhibited-at-mft2016/">詳しくはこちら&lt;/a>。&lt;/p>
&lt;h3 id="heading-4">電子工作の超王道！秋月電子通商&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/07_akitsuki.png" alt="">
ネット通販もあり、電子部品を検索すると候補の一番上に出てくるくらいメジャーなお店。店頭の大きなワゴンと紅白のテントが目印です。&lt;/p>
&lt;p>店舗は小さいながら、&lt;strong>電子工作向きのパーツや電子工作キット&lt;/strong>を安価で豊富に扱っていることから電子工作界隈で高い人気を誇っています。&lt;/p>
&lt;p>「&lt;strong>今日は祭りか？&lt;/strong>」というほどいつも混んでいるので、欲しいものに目星をつけサッと買うのがオススメです（朝10時でも写真のような混雑）。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/akitsuki_web.png" alt="">
ウェブページから、店舗の売り場位置が詳細にわかるようになりました！（2017年7月29日追記）&lt;/p>
&lt;h3 id="heading-5">ネットで予習できる！千石電商&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/08_sengoku.png" alt="">
秋月電子の並びにドンドンドンとお店を構える千石電商。&lt;/p>
&lt;p>こちらもネット通販がある超有名店ですが、実は &lt;strong>実店舗の売り場情報もWebページに記載&lt;/strong> されています。
&lt;img src="https://dotstud.io/img/blog/091/09_sengoku_net.png" alt="">
&lt;a href="http://www.sengoku.co.jp/shop_01.html">千石電商Webサイト&lt;/a>&lt;/p>
&lt;p>1号店から3号店までかなり品数が多いので、買うものリストを作りネットで場所を予習して行くとよいです。最近は &lt;strong>電子工作系のパーツはだいたい2号店に集まった&lt;/strong> ので買いやすいですね（2017年3月現在）。&lt;/p>
&lt;h3 id="heading-6">ゆったり吟味、キットも豊富なマルツ&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/10_marutsu.png" alt="">
（秋葉原2号店・秋月電子の斜め向かい）&lt;/p>
&lt;p>他のお店に比べて、&lt;strong>店内が比較的ゆったり&lt;/strong> としています。ほとんどの商品に説明ポップがついているので、初めての方も安心です。&lt;/p>
&lt;p>電子パーツに加えて、&lt;strong>電子工作キットや制作道具、関連雑誌などが充実&lt;/strong> している印象です。&lt;/p>
&lt;p>先日は子供向けボードの「IchigoLatte」「MapleSyrup」やミニロボット、ラジオ制作キットなどを見つけたので、お子さんなどと一緒に選ぶのも楽しいですね！&lt;/p>
&lt;h3 id="heading-7">開いてんの？アイテンドー&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/11_aitendo.png" alt="">
秋葉原から少し離れた立地にもかかわらず、必ずと言っていいほど名前の上がるaitendo（アイテンドー）。&lt;/p>
&lt;p>週休2日、オープンはお昼過ぎから、というゆったり営業で、私の中で「&lt;strong>あいてないのにアイテンドー&lt;/strong>」と話題です。（個人の見解です）&lt;/p>
&lt;p>オリジナルモジュールやユニークなキット、ジャンク品などを多く揃えており、&lt;strong>ちょっとした深セン気分&lt;/strong> を味わえます。&lt;/p>
&lt;p>※深セン･・･中国は広東省、世界最大の電脳街。参考「&lt;a href="https://dotstud.io/blog/maker-faire-shenzhen-2016/">秋はモノづくりの聖地、中国・深センへいこう！ &lt;/a>」&lt;/p>
&lt;h2 id="--3">ディープ編: 電気街の深淵を覗く&lt;/h2>
&lt;p>さて、ここからは「これぞ秋葉原！」というディープな一角を紹介したいと思います。&lt;/p>
&lt;h3 id="heading-8">売っているものの正体がわからない。ラジオデパート&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/12_radio_depart.png" alt="">
高架線沿いの一角にそびえ立つ「ラジオデパート」。個人商店がギュッと詰まったような作りで、売っているものがディープ過ぎて &lt;strong>8割方何に使うものかわかりませんでした&lt;/strong>。&lt;/p>
&lt;p>電子パーツ以外にも、レトロゲームや中古レコードショップなども入っています。
&lt;img src="https://dotstud.io/img/blog/091/13_gacha.png" alt="">
置いてあるガチャガチャも独特！&lt;/p>
&lt;h3 id="heading-9">ショーケースで掘り出し物？ラジオセンター&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/14_radio_center_out.png" alt="">
1階は電子パーツやお土産屋さん、2階・3階は電子パーツのお店に加えて &lt;strong>レンタルショーケース&lt;/strong> が並んでいます。レンタルショーケースは、一般人が30cm四方程度のショーケースを借り、好きなものに好きな値段をつけて陳列できる仕組みです。&lt;/p>
&lt;p>場所によってはアニメグッズやフィギュアが多いのですが、ここでは主に電子パーツが置かれています。&lt;strong>普通のお店ではもう買えない掘り出し物&lt;/strong> に出会えるかもしれませんね！&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/15_radio_center.png" alt="">
ラジオセンターの2階へと続く階段。ディープ！&lt;/p>
&lt;h2 id="--4">おまけ: 今回の掘り出し物&lt;/h2>
&lt;p>使えるかはわからないけど思わず買ってしまったものをご紹介！諸般の事情により販売店の記載はナシでお届けします。&lt;/p>
&lt;h3 id="usb-microb">両面差せる!?USB microB&lt;/h3>
&lt;p>「USBの向き逆かい！と思ったら逆かい！」ってなったこと一度はありますよね？そんな時にはこれ。
&lt;img src="https://dotstud.io/img/blog/091/16_usb.png" alt="">
&lt;strong>USB2.0もUSB microBも両面差せます。&lt;/strong> よくわからないけどすごい！&lt;/p>
&lt;p>向きではイライラしなくなりましたが、給電がめっっちゃ遅くてイライラします。（給電量の記載ナシ。）&lt;/p>
&lt;h3 id="led">小さいのにまばゆい。タッチ式LEDライト&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/17_touch_censor.png" alt="">
USBに直接差し、タッチセンサーでLEDが光ります。同シリーズに人感センサーでオンオフするものも。&lt;/p>
&lt;p>小ささに反してかなりのパワーで光を放ちます。いささか眩しすぎる節があります。&lt;/p>
&lt;h3 id="heading-10">お金がなくても大丈夫？びんぼうでいいの&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/091/18_binbo.png" alt="">
名前が全てですね。Arduino互換ながら爆安で購入できます！（実装済みも売ってます）&lt;/p>
&lt;h2 id="heading-11">まとめ&lt;/h2>
&lt;p>いかがだったでしょうか？&lt;/p>
&lt;p>今回紹介したのは &lt;strong>ディープな秋葉原のほんの一部&lt;/strong>。まだまだ不思議なお店や面白い商品がたくさんあるので、ぜひ足を運んでみてください！&lt;/p></description></item></channel></rss>