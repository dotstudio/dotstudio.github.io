<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>smartspeaker on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/smartspeaker/</link><description>Recent content in smartspeaker on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Thu, 13 Dec 2018 11:54:30 +0900</lastBuildDate><atom:link href="/series/smartspeaker/" rel="self" type="application/rss+xml"/><item><title>久留米高専でLINE Clovaスキル開発体験ハンズオンを開催！</title><link>https://dotstud.io/blog/line-clova-handson-kurume/</link><pubDate>Thu, 13 Dec 2018 11:54:30 +0900</pubDate><guid>https://dotstud.io/blog/line-clova-handson-kurume/</guid><description>&lt;p>こんにちは、代表の&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>久留米高専でClovaのハンズオンを実施してきました。
記録用兼レポートです。&lt;/p>
&lt;p>先にアナウンスですが、 &lt;strong>こんな感じで全国の高校や高専で授業やっていきたいので各地域の方で気になった方いたらぜひご一報ください！&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://twitter.com/n0bisuke">https://twitter.com/n0bisuke&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>あとジーズアカデミーの福岡校（&lt;a href="https://gsbase.jp/">ジーズベースフクオカ&lt;/a>）にも顔だしてきたので&lt;a href="https://qiita.com/advent-calendar/2018/gsacademy">ジーズアカデミーアドベントカレンダー&lt;/a>にも載せておきます！&lt;/p>
&lt;h2 id="heading">久留米高専&lt;/h2>
&lt;p>正式名称は&lt;a href="http://www.kurume-nct.ac.jp/">久留米工業高等専門学校&lt;/a>。&lt;/p>
&lt;p>九州の福岡、南の方です。
佐賀が近いので佐賀から通っている学生も多いとのこと。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/234/1.png" alt="kurume">&lt;/p>
&lt;p>秋葉原からだと福岡空港まで飛行機で行って、そこから電車移動って形になります。&lt;/p>
&lt;p>西鉄っていうのが向こうは有名みたいですね。
&lt;a href="https://ja.wikipedia.org/wiki/%E8%A5%BF%E9%89%84%E4%B9%85%E7%95%99%E7%B1%B3%E9%A7%85">西鉄久留米駅&lt;/a>が最寄りでしたが少し距離があるのでそこからタクシー移動でした。&lt;/p>
&lt;h2 id="clova">Clovaを使った授業&lt;/h2>
&lt;p>&lt;a href="https://clova.line.me/">LINE Clova&lt;/a>のスキル開発体験ハンズオンです。&lt;/p>
&lt;p>過去にもチュートリアル記事を使ってハンズオンをしたことがありますが、今回はノンコーディングで実施しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>コードが書きたい人はこちらの記事でチャレンジしてみましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="enebular">enebularを用いてノンコーディングチャレンジ&lt;/h2>
&lt;p>最近よくお世話になっています。&lt;a href="http://enebular.com">enebular&lt;/a>です。
実はこのブログで話題に出るのは初めてかもしれません。&lt;/p>
&lt;p>enebularはIoTデバイスの統合管理を目指したサービスで、各デバイスの制御を&lt;a href="https://nodered.org/">NodeRED&lt;/a>を持ちいて行うことができます。というのが本来の使い方なのですが、&lt;/p>
&lt;p>今回はenebularのNodeRED上でClovaスキルを作るというWebライクな使い方をしていきます。&lt;/p>
&lt;p>ちなみに今回の資料は&lt;a href="http://twitter.com/enta0701">@enta0701&lt;/a>くんが中学生向けに開催した資料をもとに肉付けしています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>資料: &lt;a href="https://speakerdeck.com/n0bisuke/clovasukiruwofalsenkodeingudezuo-rou">https://speakerdeck.com/n0bisuke/clovasukiruwofalsenkodeingudezuo-rou&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>enebularにはディスカバーフローという機能があってそこで作ったフロー（プログラム）を公開することが出来ます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>参加者にはこのフローをフォークしてもらって手元に展開してもらうことで、参加者はほぼ出来上がった状態のスキルを見て改良できます。&lt;/p>
&lt;p>また、内部ではJavaScriptのコードが動いていて中身（functionノード）も見れるので、
自分で改造していってアレンジ作品も作ることが出来ます。&lt;/p>
&lt;p>皆さんも試してみてください！&lt;/p>
&lt;p>&lt;strong>時間が無い時のClovaスキル開発にenebularが何故良いのか&lt;/strong>&lt;/p>
&lt;p>って感じで気が向いたらまとめてみたいと思います。&lt;/p>
&lt;h2 id="90">最終到達できた割合が高い（制限時間90分）&lt;/h2>
&lt;p>enebularを使った時短がよかったのと、彼らが優秀だったのと二つ要因がありそうですが、&lt;/p>
&lt;p>かなり到達出来た人が多かったです。&lt;/p>
&lt;p>ほぼ100%だったんじゃないかな。&lt;/p>
&lt;p>普通にコード書いてのハンズオンだと90分だとなかなかこうは行かないのでいい体験になりました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-1">もっと書きたいという人もちらほら&lt;/h2>
&lt;p>今回ノンコーディングだったので、もっとコード書きたいっていうアンケート回答も多かったです（笑）&lt;/p>
&lt;p>そんな子達には&lt;a href="https://join.slack.com/t/linedevelopers/shared_invite/enQtNDUzMTE1NzMxOTA0LWYzODQ2NWVlYmNiNzMyNDY4MzVhYmU3Yjk0ZmUzM2YwYWM3YWY2MzYzOWVkYmM4MTVmYTdiOWQ5NjJjNzI0ZDY">LINEディベロッパーSlack&lt;/a>を紹介しましたが、ちゃんと入って来てくれて意欲の高さを感じるやつです。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/234/2.png" alt="">&lt;/p>
&lt;p>授業終わりに知ったんですけど、今回は授業というよりもプログラミングサークルの子たち向けのハンズオンになっていたそうです。&lt;/p>
&lt;p>純度が高い。&lt;/p>
&lt;h2 id="heading-2">今度もやっていき&lt;/h2>
&lt;p>という感じで、一人で回したわりには安定感あるハンズオンとなりました。&lt;/p>
&lt;p>&lt;a href="https://linecorp.com/ja/pr/news/ja/2018/2472">LINE BOOT Awardsで高校生がグランプリ獲った&lt;/a>んだよ！という話もしたので、彼らが継続的に開発をして世の中で活躍してくれるといいなぁとしみじみ感じつつラーメン食べて終了です。&lt;/p>
&lt;p>久留米ラーメン美味しかったなぁーー&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="-gs-base-fukuoka">おまけ: 途中でジーズアカデミーの福岡校（Gs BASE FUKUOKA）にも寄ってきたよ&lt;/h2>
&lt;p>福岡空港についてから、久留米にたどり着くまでに少し時間があったので&lt;a href="https://gsbase.jp/">Gs BASE FUKUOKA&lt;/a>に寄ってきました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>おしゃれでいい感じの場所なので皆さんもぜひ遊びに行ってみてください。&lt;/p>
&lt;p>&lt;strong>特出事項としてはジーズアカデミー福岡でGoogle Mapで検索すると絶妙に違う駅に飛ばされるので注意です。&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>最寄りは天神駅なので注意してください。&lt;/p></description></item><item><title>Clova CEKでのスキル開発の始め方〜Pythonで開発スタート編〜</title><link>https://dotstud.io/blog/clova-cek-python-tutorial/</link><pubDate>Sat, 15 Sep 2018 10:56:31 +0900</pubDate><guid>https://dotstud.io/blog/clova-cek-python-tutorial/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>&lt;code>#linebootawards&lt;/code>のハッカソンで奈良先端科学技術大学院大学に来ています。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://linedev.connpass.com/event/96813/">【9/15-16】奈良先端科学技術大学院大学ユビ研×LINE BOOT AWARDSハッカソン&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://dotstud.io/blog/clova-cek-nodejs-tutorial/">前回&lt;/a>はNode.jsでのチュートリアルを書きましたが、今回はPythonでのClovaの開発チュートリアルを書いていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>PythonとClovaの連携をとりあえずやりたい&lt;/strong>って人向けです。&lt;/p>
&lt;p>Clovaってなんぞやって人はこちらの記事たちを先に読んでみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>いわゆるClovaのAPIのことをCEKと呼ぶんですよ〜&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そもそも僕がPythonの使い方がイマイチ分かってないので抜けがある可能性高いのでコメントなどいただけたら幸いです。 -&amp;gt; @n0bisuke&lt;/p>
&lt;h2 id="heading">作るもの&lt;/h2>
&lt;p>今回、「&lt;strong>倦怠期のカップルや夫婦のコミュニケーションを円滑にするスキル&lt;/strong>」 という案が出ていたのでそれをネタにチュートリアルを進めてみたいと思います。&lt;/p>
&lt;p>旦那「&lt;strong>妻の気分を教えて&lt;/strong>」&lt;/p>
&lt;p>Clova「妻の気分はいい感じです。」&lt;/p>
&lt;p>これを作ってみます。会話のキッカケを増やしたり作ったりするスキルですね。&lt;/p>
&lt;p>完成はこんなイメージです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>中身はハローワールド的な内容なので単純にClovaに喋ってもらう入門だと思ってください。&lt;/p>
&lt;h2 id="heading-1">環境&lt;/h2>
&lt;ul>
&lt;li>Clova Friends Mini (サリー)&lt;/li>
&lt;li>Python v2.7.10&lt;/li>
&lt;li>Google Chrome / macOS Sierra v10.12&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>$ python -v
&lt;/code>&lt;/pre>&lt;p>でPythonのバージョン調べられます。&lt;/p>
&lt;h2 id="heading-2">使い始めの申請&lt;/h2>
&lt;p>まずは、**&lt;a href="https://developers.line.me/console/register/clova-skill/provider/">新規チャンネル作成&lt;/a>**からチャンネルを作成します。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/blog/line-clova-skill-tutorial/">こちらの記事&lt;/a>を参照して、利用開始できる状態にしましょう。&lt;/p>
&lt;p>「&lt;a href="https://dotstud.io/blog/line-clova-skill-tutorial/#%E3%83%81%E3%83%A3%E3%83%8D%E3%83%AB%E3%81%AE%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A">チャネルの基本設定&lt;/a>」の箇所まで進められばOKです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ちなみに今回は以下の情報にしてみました。&lt;/p>
&lt;ul>
&lt;li>スキル名: 倦怠期Clova&lt;/li>
&lt;li>呼び出し名（メイン）: 倦怠期&lt;/li>
&lt;li>呼び出し名（サブ）: ケンタッキー&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.gyazo.com/6ba0c91a586bd8f3b20b8a7d5b334219.png" alt="">&lt;/p>
&lt;p>「倦怠期（けんたいき）」と言う言葉が発話した際に「ケンタッキー」と誤認識される可能性があったので&lt;code>呼び出し名（サブ）&lt;/code>にケンタッキーを登録しています。（笑うところ）&lt;/p>
&lt;h2 id="heading-3">対話モデルの作成&lt;/h2>
&lt;p>&lt;a href="https://clova-developers.line.me/cek/#/list">Clova Developer Center&lt;/a>にアクセスします。&lt;/p>
&lt;p>作成中スキルの一覧が表示されます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/508750a1d4f916de4d0167b71c0a133e.png" alt="">&lt;/p>
&lt;p>作成対象となるスキル名の&lt;code>対話モデル&lt;/code>の&lt;code>修正&lt;/code>を選択します。&lt;/p>
&lt;p>すると別ウィンドウが開き、対話モデルの編集画面になります。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/56f974e19cac116d82c4bceb69ef7361.png" alt="">&lt;/p>
&lt;p>なぜここだけ別ウィンドウなのかは永遠の謎。&lt;/p>
&lt;h3 id="heading-4">インテントとスロット&lt;/h3>
&lt;p>インテントとスロットを設定していきます。&lt;/p>
&lt;p>個人的にはインテントとスロットの概念を理解すればあとはBOT開発などとそこまで変わらないような印象があります。&lt;/p>
&lt;p>説明はあってるのか不安なので、スマートスピーカー開発に慣れてる人が見て変だったら教えてください笑&lt;/p>
&lt;p>&lt;a href="https://clova-developers.line.me/guide/#/Design/Design_Guideline_For_Extension.md#Intent">公式ドキュメントのこの辺&lt;/a>を見ると詳しく載っています。&lt;/p>
&lt;h3 id="heading-5">スロット&lt;/h3>
&lt;p>スロットはスキル内で扱う名詞情報です。&lt;/p>
&lt;p>今回の「&lt;strong>妻の気分を教えて&lt;/strong>」という発話を認識させる為に&lt;/p>
&lt;p>&lt;strong>気分&lt;/strong>という名詞（スロット）を登録しましょう。&lt;/p>
&lt;p>また、「妻の欲しい物を知りたい」というケースに対応するために&lt;strong>欲しい物&lt;/strong>というスロットを登録します。&lt;/p>
&lt;p>また、その名詞（スロット）はどういう属性かという上位概念を&lt;strong>スロットタイプ&lt;/strong>として設定します。&lt;/p>
&lt;p>では実際に左側のメニューに&lt;code>カスタムスロットタイプ&lt;/code>という項目があるので、そこの&lt;code>+ボタン&lt;/code>を押します。&lt;/p>
&lt;p>ここでスロットタイプのタイトルを決めますが、気分や欲しい物や妻がどういった状態かを知りたいので、ここでは&lt;code>status&lt;/code>（ステータス）としました。&lt;/p>
&lt;blockquote>
&lt;p>書いてて今回の例が少し分かりにくいかなぁと思ってるのですが、Node.jsのチュートリアルでは「秋葉原のカレー屋を教えて」という例文を利用していて、秋葉原や、神田、神保町といった駅名や地名、場所にちなんだ単語をスロットに登録しました。この場合は&lt;code>area&lt;/code>（エリア）というスロットタイプにしました。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.gyazo.com/b18a2045e972093a352e63cb95bee4d5.gif" alt="">&lt;/p>
&lt;p>statusとスロットタイプに入力して作成を押すと、statusというスロットタイプが作成されます。&lt;/p>
&lt;p>僕みたいに覚えにくい人は&lt;code>スロットタイプ=単語群&lt;/code>だと思えば良いと思います。&lt;/p>
&lt;p>次にスロット登録です。&lt;/p>
&lt;p>&lt;code>スロットの新たな代表語を入力&lt;/code>の箇所に&lt;code>気分&lt;/code>と入力し、同義語の箇所に読み方や別名を入力します。こうすることで&lt;code>きぶん&lt;/code>などの名称でも認識してくれるようになります。&lt;code>欲しい物&lt;/code>の場合は&lt;code>欲しいもの&lt;/code>や&lt;code>ほしいもの&lt;/code>なども登録してあげると認識精度が上がります。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/7b0d59e92c34a5609fbd8903989f4e8e.png" alt="">&lt;/p>
&lt;p>同義語はカンマで区切って複数登録できます。&lt;/p>
&lt;p>最後に&lt;code>保存&lt;/code>を押してスロットはOKです。個人的には難所50%クリアです。&lt;/p>
&lt;h3 id="heading-6">インテント&lt;/h3>
&lt;p>インテントは会話や命令の種類です。&lt;/p>
&lt;p>今回の「&lt;strong>妻の気分を教えて&lt;/strong>」は妻の状態を知りたいという命令だと思うので&lt;/p>
&lt;p>&lt;strong>WifeStatusIntent&lt;/strong>（ワイフステータス）を作ってみます。&lt;/p>
&lt;p>メニュー左の&lt;code>カスタムインテント&lt;/code>箇所の&lt;code>+ボタン&lt;/code>を選択し、インテント名を入力して進みます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/d65b99b0490c65806fd0e569d94ae584.gif" alt="">&lt;/p>
&lt;p>次に&lt;code>サンプル発話リスト&lt;/code>箇所に例文を入れていきます。&lt;/p>
&lt;p>先ほどから何回も出ている「&lt;strong>妻の気分を教えて&lt;/strong>」をここに入力してエンターを押しましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/336651e051d1bbcd0dd0a69815ff4780.png" alt="">&lt;/p>
&lt;p>さらに&lt;code>気分&lt;/code>の部分が先ほど登録したスロット部分になるので、&lt;strong>この文章のここがスロットだよ&lt;/strong>ということを登録してあげます。&lt;/p>
&lt;p>&lt;code>気分&lt;/code>をドラッグするとスロット登録が出来るフォームが出てくるのでそこで&lt;code>status&lt;/code>と入力してスロット名を登録します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/48ede67edc49b7f57bfe37a6369c998f.gif" alt="">&lt;/p>
&lt;p>さらにスロットタイプのプルダウンメニューが出てくるので先ほど作成した&lt;code>status&lt;/code>スロットを紐付けします。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/5c22f277ffdd0645bce54882b2650bcc.gif" alt="">&lt;/p>
&lt;p>最後に保存を押しましょう。&lt;/p>
&lt;h2 id="heading-7">対話モデルのビルド&lt;/h2>
&lt;p>ここまで来たら左上の&lt;code>ビルド&lt;/code>ボタンを押してひとまず完了です。&lt;/p>
&lt;p>ここ、少し時間かかります。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/e4f16af4107c3274d8e84bfefcec150c.gif" alt="">&lt;/p>
&lt;p>1~2分程度掛かります。昔は10~20分程掛かってたのですが、アップデートで凄く短縮されました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>ただ待つのも時間が勿体無いので次の準備にかかりましょう。&lt;/p>
&lt;h2 id="python">Pythonの環境準備&lt;/h2>
&lt;p>お待たせしました。コード書いていきましょう。&lt;/p>
&lt;p>PythonのSDKがあるのでこちらを使っていきます。&lt;/p>
&lt;p>Python以外の言語のSDKも現時点では&lt;a href="https://clova-developers.line.me/guide/#/CEK/Guides/Clova_CEK_SDK.md">Swift/Kotlin/Elixir/Java/Go/Node.js&lt;/a>のSDKが出ています。&lt;/p>
&lt;p>Pythonのインストールがまだな方は公式サイトなどからDLしてインストールして下さい。&lt;/p>
&lt;p>MacだとデフォルトでPythonがインストールされているのでインストールに関してはそこまで問題無いと思います。&lt;/p>
&lt;p>ターミナル操作が不安な方はこちらの記事を先に見ておきましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-8">準備&lt;/h3>
&lt;p>以下のコマンドで進めていきます。基本Mac向けなのでWinな人は適宜読み替えをお願いします。&lt;/p>
&lt;ul>
&lt;li>pipのインストール&lt;/li>
&lt;/ul>
&lt;p>pipはNode.jsでいうnpmのようなPython向けのモジュールの管理ツールです。&lt;/p>
&lt;pre>&lt;code>$ sudo easy_install pip
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Flaskのインストール&lt;/li>
&lt;/ul>
&lt;p>Python向けのマイクロフレームワークのFlaskをpip経由でインストールします。
Node.jsでいうExpressのようなものです。&lt;/p>
&lt;pre>&lt;code>$ pip install Flask
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>clova-cek-sdk&lt;/li>
&lt;/ul>
&lt;p>Clova CEKのPython SDKをインストールします。&lt;/p>
&lt;pre>&lt;code>$ pip install clova-cek-sdk
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>server.pyを作成&lt;/li>
&lt;/ul>
&lt;p>フォルダ作成と準備です。&lt;/p>
&lt;pre>&lt;code>$ mkdir clova_kentaiki
&lt;/code>&lt;/pre>&lt;pre>&lt;code>$ cd clova_kentaiki
&lt;/code>&lt;/pre>&lt;p>&lt;code>server.py&lt;/code>を作成してプログラムを書いていきましょう。&lt;/p>
&lt;pre>&lt;code>$ touch server.py
&lt;/code>&lt;/pre>&lt;h3 id="heading-9">コードを書いていく&lt;/h3>
&lt;p>&lt;code>server.py&lt;/code>に以下のコードを記述します。&lt;/p>
&lt;p>また、スキルの基本情報を登録した際の&lt;code>Extention ID&lt;/code>を利用するので確認しておきましょう。&lt;/p>
&lt;p>&lt;a href="https://github.com/line/clova-cek-sdk-python-sample/blob/master/home-extension.py">公式のサンプル&lt;/a>よりもシンプルにしています。&lt;/p>
&lt;p>&lt;strong>以下のコードのapplication_id=&amp;quot;MY EXTENSION ID&amp;quot;の箇所を自分のExtension IDに書き換えましょう&lt;/strong>&lt;/p>
&lt;pre>&lt;code># coding: utf-8
from flask import Flask, request, jsonify
import cek
app = Flask(__name__)
clova = cek.Clova(
application_id=&amp;quot;MY EXTENSION ID&amp;quot;,
default_language=&amp;quot;ja&amp;quot;,
debug_mode=True)
# /clova に対してのPOSTリクエストを受け付けるサーバーを立てる
@app.route('/clova', methods=['POST'])
def my_service():
body_dict = clova.route(body=request.data, header=request.headers)
response = jsonify(body_dict)
response.headers['Content-Type'] = 'application/json;charset-UTF-8'
return response
# 起動時の処理
@clova.handle.launch
def launch_request_handler(clova_request):
welcome_japanese = cek.Message(message=&amp;quot;調子どうだい？&amp;quot;, language=&amp;quot;ja&amp;quot;)
response = clova.response([welcome_japanese])
return response
# WifeStatusIntentの発火箇所
@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)
def wife_status_handler(clova_request):
print(&amp;quot;ワイフインテント&amp;quot;)
message_japanese = cek.Message(message=&amp;quot;奥さんの気分はいい感じです&amp;quot;, language=&amp;quot;ja&amp;quot;)
response = clova.response([message_japanese])
return response
# 終了時
@clova.handle.end
def end_handler(clova_request):
# Session ended, this handler can be used to clean up
logger.info(&amp;quot;Session ended.&amp;quot;)
# 認識できなかった場合
@clova.handle.default
def default_handler(request):
return clova.response(&amp;quot;Sorry I don't understand! Could you please repeat?&amp;quot;)
&lt;/code>&lt;/pre>&lt;h3 id="heading-10">起動&lt;/h3>
&lt;p>記述出来たら以下のコマンドで起動しましょう。&lt;/p>
&lt;pre>&lt;code>$ FLASK_APP=server.py flask run
&lt;/code>&lt;/pre>&lt;pre>&lt;code> * Serving Flask app &amp;quot;server.py&amp;quot;
* Environment: production
WARNING: Do not use the development server in a production environment.
Use a production WSGI server instead.
* Debug mode: off
* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
&lt;/code>&lt;/pre>&lt;p>で起動です。エラーがなければとりあえずOKです。&lt;/p>
&lt;p>5000番ポートでサーバーが起動します。&lt;/p>
&lt;h2 id="ngrok">ngrokでホスティングせずに疎通確認&lt;/h2>
&lt;p>ngrokというトンネリングツールを使ってローカル開発が出来るようにしましょう。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="https://ngrok.com/">https://ngrok.com/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://camo.qiitausercontent.com/f97d3442e199ccc5272c34c3eb5a964348660a9a/68747470733a2f2f6e67726f6b2e636f6d2f7374617469632f696d672f776562686f6f6b732e706e67" alt="">&lt;/p>
&lt;p>LINE BOTの開発でも同様ですが、&lt;strong>通常はHTTPS対応したサーバーにプログラムをホスティングしてClovaと通信させます。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>HTTPS対応したサーバーを用意するのは骨が折れるのとホスティングして失敗するとエラー修正が大変なので、ローカル開発で最初は挙動確認するのが個人的にはおすすめです。&lt;/strong>&lt;/p>
&lt;p>ngrokを使うことでローカル環境をホスティング環境のようにエミュレート出来るイメージです。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="https://qiita.com/n0bisuke/items/ceaa09ef8898bee8369d">1時間でLINE BOTを作るハンズオン&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>$ npm i -g ngrok
&lt;/code>&lt;/pre>&lt;p>これでインストール完了です。&lt;/p>
&lt;p>npmを入れてない人はbrew経由でもインストール可能です。&lt;/p>
&lt;pre>&lt;code>$ brew install ngrok
&lt;/code>&lt;/pre>&lt;p>以下のコマンドで利用しますが、ngrokがターミナル占有してしまうので、Pythonを起動するターミナルとは別で立ち上げましょう。&lt;/p>
&lt;pre>&lt;code>$ ngrok http 5000
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.gyazo.com/50a45788dbc18229269745fa1f7d35e5.png" alt="">&lt;/p>
&lt;p>こんな雰囲気。右がngrok、左がPythonです。&lt;/p>
&lt;p>ngrokを起動すると&lt;/p>
&lt;pre>&lt;code>Forwarding https://xxxxxxx.ngrok.io -&amp;gt; localhost:5000
&lt;/code>&lt;/pre>&lt;p>といった項目が表示されます。&lt;/p>
&lt;p>この&lt;code>https://xxxxxxx.ngrok.io&lt;/code>に&lt;code>/clova&lt;/code>を追加したアドレスをClovaのサーバー設定の&lt;code>ExtensionサーバーのURL&lt;/code>に記載して保存しましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/1e2feeed00daeb97553dfc463b6356ef.png" alt="">&lt;/p>
&lt;p>&lt;code>https://xxxxxxx.ngrok.io/clova&lt;/code>となります。&lt;/p>
&lt;p>&lt;code>xxxxxx&lt;/code>の箇所はngrokを再起動すると変わってしまうのでその際は再度サーバー設定を更新してください。&lt;/p>
&lt;p>&lt;strong>これでClovaに話しかけると手元（ローカル環境）のPythonプログラムまでリクエストが来ます。&lt;/strong>&lt;/p>
&lt;h2 id="heading-11">テスターでテスト&lt;/h2>
&lt;p>直接話しかけても良いのですが、テスターを使ってみましょう。&lt;/p>
&lt;p>対話モデルのダッシュボードに戻ります。&lt;/p>
&lt;p>たぶんビルドは完了してますよね。&lt;/p>
&lt;p>&lt;code>テスト&lt;/code>を選択し、&lt;code>ユーザーのサンプル発話をテスト&lt;/code>の箇所に「&lt;strong>妻の気分を教えて&lt;/strong>」と入力し&lt;code>テストボタン&lt;/code>押しましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/7caed17382c5ac0ca00ad1d51633dc40.gif" alt="">&lt;/p>
&lt;p>Pythonを起動させているターミナル側で&lt;/p>
&lt;p>&lt;code>ワイフインテント&lt;/code>と表示されていればOKです。&lt;/p>
&lt;p>疎通確認が出来ました！&lt;/p>
&lt;p>コードでいうと&lt;code>@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)&lt;/code>の箇所までリクエストが通ってることになります。&lt;/p>
&lt;pre>&lt;code># WifeStatusIntentの発火箇所
@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)
def wife_status_handler(clova_request):
print(&amp;quot;ワイフインテント&amp;quot;)
message_japanese = cek.Message(message=&amp;quot;奥さんの気分はいい感じです&amp;quot;, language=&amp;quot;ja&amp;quot;)
response = clova.response([message_japanese])
return response
&lt;/code>&lt;/pre>&lt;h3 id="heading-12">エラーが出る場合&lt;/h3>
&lt;p>エラーが出た人は&lt;code>server.py&lt;/code>内のExtension IDの設定を忘れている可能性が高いので再度チェックしてみましょう。&lt;/p>
&lt;h2 id="clova">Clovaにしゃべらせる&lt;/h2>
&lt;p>最後です！&lt;/p>
&lt;h3 id="heading-13">スロット情報も取得してみる&lt;/h3>
&lt;p>&lt;code>server.py&lt;/code>の&lt;code>@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)&lt;/code>の箇所をまるっと差し替えてみましょう。&lt;/p>
&lt;pre>&lt;code># WifeStatusIntentの発火箇所
@clova.handle.intent(&amp;quot;WifeStatusIntent&amp;quot;)
def wife_status_handler(clova_request):
print(&amp;quot;ワイフインテント&amp;quot;)
slot = clova_request.slot_value(&amp;quot;status&amp;quot;)
message_japanese = cek.Message(message=&amp;quot;もう一回言って下さい&amp;quot;, language=&amp;quot;ja&amp;quot;)
if u&amp;quot;気分&amp;quot; in slot:
message_japanese = cek.Message(message=&amp;quot;奥さんの気分はいい感じです&amp;quot;, language=&amp;quot;ja&amp;quot;)
elif u&amp;quot;欲しい物&amp;quot; in slot:
message_japanese = cek.Message(message=&amp;quot;奥さんは旅行に行きたがっています&amp;quot;, language=&amp;quot;ja&amp;quot;)
response = clova.response([message_japanese])
return response
&lt;/code>&lt;/pre>&lt;p>&lt;code>clova_request.slot_value(&amp;quot;status&amp;quot;)&lt;/code>にスロット情報が入っているので、あとはif文で判定して喋らせる内容を変更していきます。&lt;/p>
&lt;p>最後の&lt;code>response = clova.response([message_japanese])&lt;/code>を呼ぶことでClovaが喋ってくれます。&lt;/p>
&lt;p>ここまでをまとめたコードは&lt;a href="https://gist.github.com/n0bisuke/3755c3faaf1ad0fe621af8eaffb9b63f">こちら&lt;/a>です。&lt;/p>
&lt;h2 id="heading-14">実機テスト&lt;/h2>
&lt;p>&lt;code>server.py&lt;/code>のサーバーを再起動して試してみましょう。&lt;/p>
&lt;p>起動する際は、&lt;strong>{ウェイクワード} -&amp;gt; {スキル名}を起動して&lt;/strong>となります。&lt;/p>
&lt;ul>
&lt;li>ウェイクワード: Clovaの呼び名&lt;/li>
&lt;li>スキル名: 基本情報に登録したスキル名&lt;/li>
&lt;/ul>
&lt;p>その後、設定したインテントを発話しましょう。&lt;/p>
&lt;p>ということで、人によって違うのですが僕の場合は&lt;code>ねぇ、Clova&lt;/code>がウェイクワードになっていて、今回は&lt;code>倦怠期&lt;/code>というスキル名でした。&lt;/p>
&lt;p>のびすけ: 「&lt;strong>ねぇクローバ&lt;/strong>」&lt;/p>
&lt;p>Clova: 「ポンっ（LEDが緑色に光る）」&lt;/p>
&lt;p>のびすけ: 「&lt;strong>倦怠期を起動して&lt;/strong>」&lt;/p>
&lt;p>Clova: 「調子どうだい？」 (← server.pyで記述している)&lt;/p>
&lt;p>Clova: 「ポンっ（LEDが緑色に光る）」&lt;/p>
&lt;p>のびすけ:「&lt;strong>妻の気分を教えて&lt;/strong>」&lt;/p>
&lt;p>Clova: 「奥さんの気分はいい感じです」 (← server.pyで記述している)&lt;/p>
&lt;p>のびすけ:「&lt;strong>妻の欲しい物を教えて&lt;/strong>」&lt;/p>
&lt;p>Clova: 「奥さんは旅行に行きたがっています」 (← server.pyで記述している)&lt;/p>
&lt;p>という感じの使い方になります。&lt;/p>
&lt;p>完成動画はこの記事の上部を確認して下さい。↑&lt;/p>
&lt;p>ちなみに、妻が状況を登録するときはこんな感じでやる模様です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="-">おまけ: 発話履歴の確認&lt;/h2>
&lt;p>テスターの&lt;code>発話履歴&lt;/code>を見るとClova側でどんな認識になっているかが分かるのですが&amp;quot;妻の&amp;quot;が&amp;quot;その&amp;quot;などに認識されていて認識の揺れが発生してるのが分かりますね。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/6a8f698f16fda08bf3efc845bed09ed3.png" alt="">&lt;/p>
&lt;p>Clovaが発話をうまく認識してくれないときはここを見て確認しましょう。&lt;/p>
&lt;h2 id="heading-15">まとめ&lt;/h2>
&lt;p>こんな感じでとりあえず試す手順を紹介しました。&lt;/p>
&lt;p>ホスティングもnowやherokuを使うと簡単に出来るので&lt;a href="https://www.dropbox.com/s/547siacriaudy4f/CEK_Handson%1D_0729.pdf?dl=0">立花さんのハンズオン資料&lt;/a>を参照して理解を深めましょう！&lt;/p>
&lt;p>ホスティングに関しても余裕があれば追記したいと思います。&lt;/p></description></item><item><title>ClovaスキルでMP3ファイルを再生してみよう #asciihack #linebootawards</title><link>https://dotstud.io/blog/nodejs-clova-skill-mp3/</link><pubDate>Sat, 25 Aug 2018 21:23:40 +0900</pubDate><guid>https://dotstud.io/blog/nodejs-clova-skill-mp3/</guid><description>&lt;p>こんにちは、代表の&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>&lt;a href="https://asciistartup.connpass.com/event/91483/">&lt;code>#asciihack&lt;/code>&lt;/a> にてClovaでMP3再生したいという話があったので試してみました。&lt;/p>
&lt;p>ハッカソン中の走り書きです。ご了承ください。&lt;/p>
&lt;p>&lt;strong>デモを先にみたい人は&lt;a href="https://dotstud.io/blog/nodejs-clova-skill-mp3/#%E3%83%87%E3%83%A2">ページ下部&lt;/a>へ！&lt;/strong>&lt;/p>
&lt;p>Google Homeで有名な、&lt;code>みそ氏&lt;/code>の&lt;a href="https://qiita.com/miso_develop/items/6b256c1e8757c0ace4a9">Clova公式SDK(Node.js)の使い方まとめ&lt;/a>が参考になります。&lt;/p>
&lt;p>Node.jsのSDKでのやり方です。ちなみにNode.jsのバージョンは10.8.0で試しています。&lt;/p>
&lt;p>CEKの細かい仕様には触れません。&lt;/p>
&lt;h2 id="heading">一旦スキルを作る&lt;/h2>
&lt;p>&lt;a href="https://dotstud.io/blog/clova-cek-nodejs-tutorial/">Clova CEKでのスキル開発の始め方〜Node.jsで開発スタート編〜&lt;/a>などを読みつつClova CEKのSDKをインストールしつつ対話モデル作ったり、Clovaスキルの基本を作りましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この記事のコードを見ると該当箇所が分かります。&lt;/p>
&lt;h2 id="mp3">起動時にMP3を再生&lt;/h2>
&lt;p>基本は以下のように、指定したサーバー上のMP3を再生できます。&lt;/p>
&lt;pre>&lt;code>responseHelper.setSimpleSpeech(
clova.SpeechBuilder.createSpeechUrl('https://exsample.com/myaudio.mp3')
);
&lt;/code>&lt;/pre>&lt;p>&lt;code>.onLaunchRequest()&lt;/code>の中で実行すれば起動時にMP3を再生できます。&lt;/p>
&lt;pre>&lt;code>//起動時に喋る
.onLaunchRequest(responseHelper =&amp;gt; {
responseHelper.setSimpleSpeech(
clova.SpeechBuilder.createSpeechUrl('https://exsample.com/myaudio.mp3')
);
})
&lt;/code>&lt;/pre>&lt;p>このコードは前に書いたチュートリアルの一部を改変しているので、どこが該当箇所か確認してみて下さい。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="mp3-1">呼びかけてMP3を再生&lt;/h2>
&lt;p>&lt;code>.onIntentRequest()&lt;/code>の中で実行すれば呼びかけに応じてMP3を再生できます。&lt;/p>
&lt;pre>&lt;code> //ユーザーからの発話が来たら反応する箇所
.onIntentRequest(async responseHelper =&amp;gt; {
responseHelper.setSimpleSpeech(
clova.SpeechBuilder.createSpeechUrl('https://exsample.com/myaudio.mp3')
);
})
&lt;/code>&lt;/pre>&lt;h2 id="mp3-2">MP3を連続再生&lt;/h2>
&lt;p>&lt;code>responseHelper.setSimpleSpeech()&lt;/code>で1回再生できましたが、&lt;code>responseHelper.setSpeechList()&lt;/code>では配列を与えることで連続再生が出来ます。&lt;/p>
&lt;p>(謎に)10回再生。&lt;/p>
&lt;pre>&lt;code>//省略
let SpeechList = [];
for (let index = 0; index &amp;lt; 10; index++) {
SpeechList.push(clova.SpeechBuilder.createSpeechUrl('https://exsample.com/myaudio.mp3'));
}
responseHelper.setSpeechList(SpeechList);
&lt;/code>&lt;/pre>&lt;h2 id="heading-1">デモ&lt;/h2>
&lt;p>シオカラーズが応援してくれるサンプル。&lt;/p>
&lt;ul>
&lt;li>のびすけ: 応援スキルを起動して&lt;/li>
&lt;li>Clova: mp3再生&lt;/li>
&lt;li>のびすけ: もっと応援して&lt;/li>
&lt;li>Clova: mp3を10回再生&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>音源、権利的に大丈夫かな&amp;hellip;&amp;hellip;ガクブル
（怒られたら直そう）&lt;/p>
&lt;h2 id="heading-2">まとめ&lt;/h2>
&lt;p>基本の形は&lt;code>clova.SpeechBuilder.createSpeechUrl('https://exsample.com/myaudio.mp3')&lt;/code>で再生出来ます。&lt;/p>
&lt;p>1回再生は&lt;code>responseHelper.setSimpleSpeech()&lt;/code>で、連続再生は&lt;code>responseHelper.setSpeechList()&lt;/code>で&lt;code>clova.SpeechBuilder.createSpeechUrl()&lt;/code>を実行です。&lt;/p>
&lt;p>細かい仕様が気になる人は&lt;a href="https://clova-developers.line.me/guide/#/CEK/Guides/Build_Custom_Extension.md#DirectClientToPlayAudio">ドキュメントのこの辺&lt;/a>をご参照ください！&lt;/p>
&lt;p>ではでは、引き続きハッカソンがんばりましょ！&lt;/p></description></item><item><title>Clova CEKでのスキル開発の始め方〜Node.jsで開発スタート編〜</title><link>https://dotstud.io/blog/clova-cek-nodejs-tutorial/</link><pubDate>Fri, 03 Aug 2018 10:56:31 +0900</pubDate><guid>https://dotstud.io/blog/clova-cek-nodejs-tutorial/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>&lt;code>#linebootawards&lt;/code>関連でハンズオンをやる機会が増えそうなので学習メモがてら、&lt;a href="https://dotstud.io/blog/line-clova-skill-tutorial/">前回&lt;/a>に引き続きClovaの開発チュートリアルを書いていきます。&lt;/p>
&lt;p>&lt;strong>Node.jsとClovaの連携をとりあえずやりたい&lt;/strong>って人向けです。&lt;/p>
&lt;p>Clovaってなんぞやって人はこちらの記事を先に読んでみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>いわゆるClovaのAPIのことをCEKと呼ぶんですよ〜&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">作るもの&lt;/h2>
&lt;p>のびすけ「&lt;strong>秋葉原のカレー屋さん教えて&lt;/strong>」&lt;/p>
&lt;p>Clova「秋葉原のオススメのカレー屋は ぺらぺらぺら」&lt;/p>
&lt;p>これを作ってみます。完成はこんなイメージです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-1">環境&lt;/h2>
&lt;ul>
&lt;li>Clova Friends Mini (サリー)&lt;/li>
&lt;li>Node.js v10.6.0&lt;/li>
&lt;li>Google Chrome / macOS Sierra v10.12&lt;/li>
&lt;/ul>
&lt;h2 id="heading-2">使い始めの申請&lt;/h2>
&lt;p>こちらの記事を参照して、利用開始できる状態にしましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-3">対話モデルの作成&lt;/h2>
&lt;p>&lt;a href="https://clova-developers.line.me/cek/#/list">Clova Developer Center&lt;/a>にアクセスします。&lt;/p>
&lt;p>作成中スキルの一覧が表示されます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/508750a1d4f916de4d0167b71c0a133e.png" alt="">&lt;/p>
&lt;p>作成対象となるスキル名の&lt;code>対話モデル&lt;/code>の&lt;code>修正&lt;/code>を選択します。&lt;/p>
&lt;p>すると別ウィンドウが開き、対話モデルの編集画面になります。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/54f6b93e2ed00cfadaa96da38aeaff4c.png" alt="">&lt;/p>
&lt;h3 id="heading-4">インテントとスロット&lt;/h3>
&lt;p>インテントとスロットを設定していきます。&lt;/p>
&lt;p>個人的にはインテントとスロットの概念を理解すればあとはBOT開発などとそこまで変わらないような印象があります。&lt;/p>
&lt;p>説明はあってるのか不安なので、スマートスピーカー開発に慣れてる人が見て変だったら教えてください笑&lt;/p>
&lt;p>&lt;a href="https://clova-developers.line.me/guide/#/Design/Design_Guideline_For_Extension.md#Intent">公式ドキュメントのこの辺&lt;/a>を見ると詳しく載っています。&lt;/p>
&lt;h3 id="heading-5">スロット&lt;/h3>
&lt;p>スロットはスキル内で扱う名詞情報です。&lt;/p>
&lt;p>今回の「&lt;strong>秋葉原のカレー屋さん教えて&lt;/strong>」という発話を認識させる為に&lt;/p>
&lt;p>&lt;strong>秋葉原&lt;/strong>という名詞（スロット）を登録しましょう。&lt;/p>
&lt;p>また、その名詞（スロット）はどういう属性かという上位概念を&lt;strong>スロットタイプ&lt;/strong>として設定します。&lt;/p>
&lt;p>では実際に&lt;/p>
&lt;p>左側のメニューに&lt;code>カスタムスロットタイプ&lt;/code>という項目があるので、そこの&lt;code>+ボタン&lt;/code>を押します。&lt;/p>
&lt;p>ここでスロットタイプのタイトルを決めますが、秋葉原は駅名や地名なので場所にちなんだタイトルが良さそうです。ここでは&lt;code>area&lt;/code>（エリア）としました。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/84fc629262b42452abb4798c1b0e7c05.gif" alt="">&lt;/p>
&lt;p>作成を押すと、areaというスロットタイプが作成されます。&lt;/p>
&lt;p>僕みたいに覚えにくい人は&lt;code>スロットタイプ=単語群&lt;/code>だと思えば良いと思います。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/cae4ce277668b5899690c0f881c3d96d.png" alt="">&lt;/p>
&lt;p>次にスロット登録です。&lt;/p>
&lt;p>&lt;code>スロットの新たな代表語を入力&lt;/code>の箇所に&lt;code>秋葉原&lt;/code>と入力し、同義語の箇所に読み方や別名を入力します。こうすることで&lt;code>あきば&lt;/code>などの名称でも認識してくれるようになります。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/01ce1b560aef8dc9192e2cb714759c72.gif" alt="">&lt;/p>
&lt;p>**秋葉原もカレー屋は多いですがカレーと言えば神保町や神田周辺もかなり多いのでareaに神保町と神田も追加しておきました。**重要情報（謎）&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/7d642f6710cb0a323ffebf4782f539a4.png" alt="">&lt;/p>
&lt;p>最後に&lt;code>保存&lt;/code>を押してスロットはOKです。個人的には難所50%クリアです。&lt;/p>
&lt;h3 id="heading-6">インテント&lt;/h3>
&lt;p>インテントは会話や命令の種類です。&lt;/p>
&lt;p>今回の「&lt;strong>秋葉原のカレー屋さん教えて&lt;/strong>」はカレー情報の検索だと思うので&lt;/p>
&lt;p>&lt;strong>CurreySearchIntent&lt;/strong>（カレーサーチ）を作ってみます。&lt;/p>
&lt;p>メニュー左の&lt;code>カスタムインテント&lt;/code>箇所の&lt;code>+ボタン&lt;/code>を選択し、インテント名を入力して進みます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/6e770429f2a1b04e066dbb940e9f04bb.gif" alt="">&lt;/p>
&lt;p>フォーム下部の&lt;code>スロットリスト&lt;/code>からこのインテントで利用するスロットの登録をします。
先ほど作成した&lt;code>area&lt;/code>を登録しましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/1c2a9e525890692a3135fae2598d571f.gif" alt="">&lt;/p>
&lt;p>次に&lt;code>サンプル発話リスト&lt;/code>箇所に例文を入れていきます。&lt;/p>
&lt;p>先ほどから何回も出ている「&lt;strong>秋葉原のカレー屋さん教えて&lt;/strong>」をここに入力します。&lt;/p>
&lt;p>さらに&lt;code>秋葉原&lt;/code>の部分が先ほど登録したスロット部分になるので、&lt;strong>この文章のここがスロットだよ&lt;/strong>ということを登録してあげます。&lt;/p>
&lt;p>&lt;code>秋葉原&lt;/code>をドラッグするとスロット登録が出来るフォームが出てくるのでそこで&lt;code>area&lt;/code>を選択しましょう。&lt;/p>
&lt;p>ここは操作が難しい印象なので↓のキャプチャGIF参照で！&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/29779f252afe64d6c06efc36aa258522.gif" alt="">&lt;/p>
&lt;p>完成したら保存しましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/411e1670a0c7406b69cf42264fd8091d.png" alt="">&lt;/p>
&lt;h2 id="heading-7">対話モデルのビルド&lt;/h2>
&lt;p>ここまで来たら左上の&lt;code>ビルド&lt;/code>ボタンを押してひとまず完了です。&lt;/p>
&lt;p>ここ、けっこう時間かかります。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/eb50163b57f4e4522b63c8686dc3e0ef.gif" alt="">&lt;/p>
&lt;p>体感5~10分程度。&lt;/p>
&lt;p>ただ待つのもしんどいので次の準備にかかりましょう。&lt;/p>
&lt;h2 id="nodejs">Node.jsの環境準備&lt;/h2>
&lt;p>お待たせしました。コード書いていきましょう。&lt;/p>
&lt;p>Node.jsのSDKがあるのでこちらを使っていきます。&lt;/p>
&lt;p>Node.js以外にも現時点で&lt;a href="https://clova-developers.line.me/guide/#/CEK/Guides/Clova_CEK_SDK.md">Swift/Kotlin/Elixir&lt;/a>のSDKが出ています。&lt;/p>
&lt;p>Node.jsのインストールがまだな方はこちらの記事をみてインストールしてみましょう。&lt;/p>
&lt;p>ちなみにNode.jsは公式サイトからではなくnodebrew経由でインストールする形にした方が後々便利です。僕のオススメは以下の記事にあるnodebrew経由でのインストールになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ターミナル操作が不安な方はこちらの記事を先に見ておきましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-8">準備&lt;/h3>
&lt;p>以下のコマンドで進めていきます。
フォルダ作成と準備です。&lt;/p>
&lt;pre>&lt;code>$ mkdir clova_curry
&lt;/code>&lt;/pre>&lt;pre>&lt;code>$ cd clova_curry
&lt;/code>&lt;/pre>&lt;pre>&lt;code>$ npm init -y
&lt;/code>&lt;/pre>&lt;p>SDKをnpm経由でインストールします。expressとbody-parserも利用します。&lt;/p>
&lt;pre>&lt;code>$ npm i @line/clova-cek-sdk-nodejs express body-parser
&lt;/code>&lt;/pre>&lt;p>現時点では&lt;code>node_modules&lt;/code>,&lt;code>package-lock.json&lt;/code>,&lt;code>package.json&lt;/code>のファイルがある状態ですね。&lt;/p>
&lt;pre>&lt;code>$ ls
&lt;/code>&lt;/pre>&lt;pre>&lt;code>node_modules package-lock.json package.json
&lt;/code>&lt;/pre>&lt;h3 id="heading-9">コードを書いていく&lt;/h3>
&lt;p>&lt;code>app.js&lt;/code>というファイルを作成して以下のコードを記述します。&lt;/p>
&lt;p>また、スキルの基本情報を登録した際の&lt;code>Extention ID&lt;/code>を利用するので確認しておきましょう。&lt;/p>
&lt;p>公式のサンプルよりもシンプルにしています。&lt;/p>
&lt;pre>&lt;code>const clova = require('@line/clova-cek-sdk-nodejs');
const express = require('express');
const clovaSkillHandler = clova.Client
.configureSkill()
//起動時に喋る
.onLaunchRequest(responseHelper =&amp;gt; {
responseHelper.setSimpleSpeech({
lang: 'ja',
type: 'PlainText',
value: 'カレー屋さんを探します。',
});
})
//ユーザーからの発話が来たら反応する箇所
.onIntentRequest(async responseHelper =&amp;gt; {
const intent = responseHelper.getIntentName();
const sessionId = responseHelper.getSessionId();
console.log('Intent:' + intent);
})
//終了時
.onSessionEndedRequest(responseHelper =&amp;gt; {
const sessionId = responseHelper.getSessionId();
})
.handle();
const app = new express();
const port = process.env.PORT || 3000;
//リクエストの検証を行う場合。環境変数APPLICATION_ID(値はClova Developer Center上で入力したExtension ID)が必須
const clovaMiddleware = clova.Middleware({applicationId: 'YOUR_EXTENSION_ID'});
app.post('/clova', clovaMiddleware, clovaSkillHandler);
app.listen(port, () =&amp;gt; console.log(`Server running on ${port}`));
&lt;/code>&lt;/pre>&lt;h3 id="heading-10">起動&lt;/h3>
&lt;p>記述出来たら&lt;/p>
&lt;pre>&lt;code>$ node app.js
&lt;/code>&lt;/pre>&lt;pre>&lt;code>Server running on 3000
&lt;/code>&lt;/pre>&lt;p>で起動です。エラーがなければとりあえずOKです。&lt;/p>
&lt;h2 id="ngrok">ngrokでホスティングせずに疎通確認&lt;/h2>
&lt;p>ngrokというトンネリングツールを使ってローカル開発が出来るようにしましょう。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="https://ngrok.com/">https://ngrok.com/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://camo.qiitausercontent.com/f97d3442e199ccc5272c34c3eb5a964348660a9a/68747470733a2f2f6e67726f6b2e636f6d2f7374617469632f696d672f776562686f6f6b732e706e67" alt="">&lt;/p>
&lt;p>LINE BOTの開発でも同様ですが、&lt;strong>通常はHTTPS対応したサーバーにプログラムをホスティングしてClovaと通信させます。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>HTTPS対応したサーバーを用意するのは骨が折れるのとホスティングして失敗するとエラー修正が大変なので、ローカル開発で最初は挙動確認するのが個人的にはおすすめです。&lt;/strong>&lt;/p>
&lt;p>ngrokを使うことでローカル環境をホスティング環境のようにエミュレート出来るイメージです。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="https://qiita.com/n0bisuke/items/ceaa09ef8898bee8369d">1時間でLINE BOTを作るハンズオン&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>$ npm i -g ngrok
&lt;/code>&lt;/pre>&lt;p>これでインストール完了です。&lt;/p>
&lt;p>以下のコマンドで利用しますが、ngrokがターミナル占有してしまうので、Node.jsを起動するターミナルとは別で立ち上げましょう。&lt;/p>
&lt;pre>&lt;code>$ ngrok http 3000
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.gyazo.com/5eec2e34bf4dd507279099e08496658d.png" alt="">&lt;/p>
&lt;p>こんな雰囲気。右がngrok、左がNode.jsです。&lt;/p>
&lt;p>ngrokを起動すると&lt;/p>
&lt;pre>&lt;code>Forwarding https://xxxxxxx.ngrok.io -&amp;gt; localhost:3000
&lt;/code>&lt;/pre>&lt;p>といった項目が表示されます。&lt;/p>
&lt;p>この&lt;code>https://xxxxxxx.ngrok.io&lt;/code>に&lt;code>/clova&lt;/code>を追加したアドレスをClovaのサーバー設定の&lt;code>ExtensionサーバーのURL&lt;/code>に記載して保存しましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/1e2feeed00daeb97553dfc463b6356ef.png" alt="">&lt;/p>
&lt;p>&lt;code>https://xxxxxxx.ngrok.io/clova&lt;/code>となります。&lt;/p>
&lt;p>&lt;code>xxxxxx&lt;/code>の箇所はngrokを再起動すると変わってしまうのでその際は再度サーバー設定を更新してください。&lt;/p>
&lt;p>&lt;strong>これでClovaに話しかけると手元（ローカル環境）のNode.jsまでリクエストが来ます。&lt;/strong>&lt;/p>
&lt;h2 id="heading-11">テスターでテスト&lt;/h2>
&lt;p>直接話しかけても良いのですが、テスターを使ってみましょう。&lt;/p>
&lt;p>対話モデルのダッシュボードに戻ります。&lt;/p>
&lt;p>たぶんビルドは完了してますよね。&lt;/p>
&lt;p>&lt;code>テスト&lt;/code>を選択し、&lt;code>ユーザーのサンプル発話をテスト&lt;/code>の箇所に「&lt;strong>秋葉原のカレー屋を教えて&lt;/strong>」と入力し&lt;code>テストボタン&lt;/code>押しましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/62a98f040486429ef42942e605ddaf26.gif" alt="">&lt;/p>
&lt;p>Node.jsを起動させているターミナル側で&lt;/p>
&lt;p>&lt;code>Intent:CurreySearchIntent&lt;/code>と表示されていればOKです。&lt;/p>
&lt;p>疎通確認が出来ました！
コードでいうと&lt;code>onIntentRequest()&lt;/code>の箇所までリクエストが通ってることになります。&lt;/p>
&lt;pre>&lt;code>.onIntentRequest(async responseHelper =&amp;gt; {
const intent = responseHelper.getIntentName();
const sessionId = responseHelper.getSessionId();
console.log('Intent:' + intent); //←ここが反応した
})
&lt;/code>&lt;/pre>&lt;h3 id="heading-12">エラーが出る場合&lt;/h3>
&lt;pre>&lt;code>Error: Invalid application id: ~~~
&lt;/code>&lt;/pre>&lt;p>などのエラーが出た人は&lt;code>app.js&lt;/code>内のExtension IDの設定を忘れている可能性が高いので再度チェックしてみましょう。&lt;/p>
&lt;h3 id="heading-13">スロット情報も取得してみる&lt;/h3>
&lt;p>&lt;code>app.js&lt;/code>の&lt;code>onIntentRequest()&lt;/code>の箇所をまるっと差し替えてみましょう。&lt;/p>
&lt;pre>&lt;code>//ユーザーからの発話が来たら反応する箇所
.onIntentRequest(async responseHelper =&amp;gt; {
const intent = responseHelper.getIntentName();
const sessionId = responseHelper.getSessionId();
console.log('Intent:' + intent);
if(intent === 'CurreySearchIntent'){
const slots = responseHelper.getSlots();
console.log(slots); //←ここでスロット(今回の場合エリア名)が反応
}
})
&lt;/code>&lt;/pre>&lt;p>Node.jsを再起動して確認してみます。&lt;/p>
&lt;p>テスターでは&lt;code>秋葉原のカレー情報教えて&lt;/code>、&lt;code>神保町のカレー情報教えて&lt;/code>、&lt;code>上野のカレー情報教えて&lt;/code>を順番に実行してみます。&lt;/p>
&lt;pre>&lt;code>$ node app.js
&lt;/code>&lt;/pre>&lt;pre>&lt;code>Server running on 3000
Intent:CurreySearchIntent
{ area: '秋葉原' } //←秋葉原のカレー情報教えて
Intent:CurreySearchIntent
{ area: '神保町' } //←神保町のカレー情報教えて
Intent:CurreySearchIntent
{} //←上野のカレー情報教えて
&lt;/code>&lt;/pre>&lt;p>先ほどのスロット名登録の際に、&lt;code>秋葉原&lt;/code>、&lt;code>神保町&lt;/code>、&lt;code>神田&lt;/code>を登録してましたが、&lt;code>上野&lt;/code>は登録してなかったので「上野のカレー情報教えて」だと空になります。&lt;/p>
&lt;h2 id="clova">Clovaにカレー屋情報をしゃべらせる&lt;/h2>
&lt;p>最後です！&lt;/p>
&lt;p>先ほど同様に&lt;code>app.js&lt;/code>の&lt;code>onIntentRequest()&lt;/code>の箇所をまるっと差し替えてみましょう。&lt;/p>
&lt;pre>&lt;code>.onIntentRequest(async responseHelper =&amp;gt; {
const intent = responseHelper.getIntentName();
const sessionId = responseHelper.getSessionId();
console.log('Intent:' + intent);
if(intent === 'CurreySearchIntent'){
const slots = responseHelper.getSlots();
console.log(slots);
//デフォルトのスピーチ内容を記載 - 該当スロットがない場合をデフォルト設定
let speech = {
lang: 'ja',
type: 'PlainText',
value: `まだ登録されていないエリアです。`
}
if(slots.area === '秋葉原'){
speech.value = `${slots.area}のオススメのカレー屋は フジヤマドラゴンカレー です。`;
}else if(slots.area === '神保町'){
speech.value = `${slots.area}のオススメのカレー屋は 共栄堂 です。`;
}else if(slots.area === '神田'){
//神田のカレー情報検索
//何か自分で書いてみましょう。
}
responseHelper.setSimpleSpeech(speech);
responseHelper.setSimpleSpeech(speech, true);
}
})
&lt;/code>&lt;/pre>&lt;p>&lt;code>slots.area&lt;/code>にエリア情報が入っているので、あとはif文で判定して喋らせる内容を変更していきます。&lt;/p>
&lt;p>最後の&lt;code>responseHelper.setSimpleSpeech()&lt;/code>を呼ぶことでClovaが喋ってくれます。&lt;/p>
&lt;h2 id="heading-14">実機テスト&lt;/h2>
&lt;p>Node.jsのサーバーを再起動して試してみましょう。&lt;/p>
&lt;p>起動する際は、&lt;strong>{ウェイクワード} -&amp;gt; {スキル名}を起動して&lt;/strong>となります。&lt;/p>
&lt;ul>
&lt;li>ウェイクワード: Clovaの呼び名&lt;/li>
&lt;li>スキル名: 基本情報に登録したスキル名&lt;/li>
&lt;/ul>
&lt;p>その後、設定したインテントを発話しましょう。&lt;/p>
&lt;p>ということで、人によって違うのですが僕の場合は&lt;code>ねぇ、Clova&lt;/code>がウェイクワードになっていて、今回は&lt;code>カレー情報&lt;/code>というスキル名でした。&lt;/p>
&lt;p>のびすけ: 「&lt;strong>ねぇクローバ&lt;/strong>」&lt;/p>
&lt;p>Clova: 「ポンっ（LEDが緑色に光る）」&lt;/p>
&lt;p>のびすけ: 「&lt;strong>カレー情報を起動して&lt;/strong>」&lt;/p>
&lt;p>Clova: 「カレー屋さんを探します。」 (← Node.jsで記述している)&lt;/p>
&lt;p>Clova: 「ポンっ（LEDが緑色に光る）」&lt;/p>
&lt;p>のびすけ:「&lt;strong>秋葉原のカレー屋さんを教えて&lt;/strong>」&lt;/p>
&lt;p>Clova: 「秋葉原のオススメのカレー屋はフジヤマドラゴンカレーです。」 (← Node.jsで記述している)&lt;/p>
&lt;p>という感じの使い方になります。&lt;/p>
&lt;p>動画もどうぞ&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-15">まとめ&lt;/h2>
&lt;p>こんな感じでとりあえず試す手順を紹介しました。&lt;/p>
&lt;p>ホスティングもnowやherokuを使うと簡単に出来るので&lt;a href="https://www.dropbox.com/s/547siacriaudy4f/CEK_Handson%1D_0729.pdf?dl=0">立花さんのハンズオン資料&lt;/a>を参照して理解を深めましょう！&lt;/p>
&lt;p>ホスティングに関しても余裕があれば追記したいと思います。&lt;/p></description></item><item><title>Alexaで自然な発話を目指そう！音声合成マークアップ言語「SSML」を使う方法</title><link>https://dotstud.io/blog/alexa-skill-using-ssml/</link><pubDate>Fri, 20 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/alexa-skill-using-ssml/</guid><description>&lt;p>こんにちは、エンジニア兼ライターの&lt;a href="https://dotstud.io/members/chantoku">ちゃんとく&lt;/a>です。&lt;/p>
&lt;p>Alexaスキルの開発では、基本的に&lt;strong>テキストを渡すとそのまま読み上げて&lt;/strong>くれ、句読点を入れると休止に置き換えてくれたり疑問符を入れると語尾をあげたりと、ある程度は自然に調整してくれます。&lt;/p>
&lt;p>でも、「なんだか読み上げが不自然……」「もっと細かく調整したい……」ということがありますよね。&lt;/p>
&lt;p>そんな時は、Alexa Skills Kitで用意されている&lt;!-- raw HTML omitted -->&lt;strong>音声合成マークアップ言語&lt;/strong>「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/speech-synthesis-markup-language-ssml-reference.html">&lt;strong>SSML&lt;/strong>&lt;/a>」&lt;!-- raw HTML omitted -->を使ってみましょう！SSMLを利用すると簡単に効果音・音源を差し込んだり、イントネーションやブレスを細かく整えたりすることができます。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->※SSML…Speech Synthesis Markup Language&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>はじめてAlexaスキル開発するよ！という方はこちらから。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="ssml">SSMLとは&lt;/h2>
&lt;p>「SSML」は&lt;a href="https://developer.amazon.com/ja/alexa-skills-kit">Alexa Skills Kit&lt;/a>で用意されている&lt;strong>音声合成マークアップ言語&lt;/strong>です。&lt;/p>
&lt;p>聞きなれないかもしれませんが、HTMLのタグのように&lt;strong>簡単な記述でプログラムに埋め込む&lt;/strong>ことができます。&lt;/p>
&lt;p>例えば下記のようにテキストを渡すプログラムの場合、&lt;/p>
&lt;pre>&lt;code>'LaunchRequest': function () {
const speechOutput = 'こんにちは。ちゃんとくのスキルです。'
const reprompt = 'ちゃんとくスキルです。'
this.emit(':ask', speechOutput, reprompt);
},
&lt;/code>&lt;/pre>&lt;p>SSMLを組み込むと下記のような記述になります。&lt;/p>
&lt;pre>&lt;code>'LaunchRequest': function () {
const speechOutput = '&amp;lt;say-as interpret-as=&amp;quot;interjection&amp;quot;&amp;gt;こんにちは。&amp;lt;/say-as&amp;gt;&amp;lt;break time=&amp;quot;0.5s&amp;quot;/&amp;gt;ちゃんとくのスキルです。'
const reprompt = 'ちゃんとくスキルです。'
this.emit(':ask', speechOutput, reprompt);
},
&lt;/code>&lt;/pre>&lt;p>基本的には&lt;strong>①ドキュメントからコピーして&lt;/strong>、&lt;strong>②埋め込むだけ&lt;/strong>、です。簡単そうですよね？&lt;/p>
&lt;p>ここからは大まかにカテゴリ分けしてSSMLタグを紹介していきます！&lt;/p>
&lt;p>「サッとどんな感じか知りたいんじゃ！」という方は、&lt;a href="https://dotstud.io/blog/alexa-skill-using-ssml/#ssml%E5%85%A8%E9%83%A8%E4%B9%97%E3%81%9B%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">&lt;strong>SSML全部乗せを試してみる&lt;/strong>&lt;/a>のデモ動画をご覧ください。&lt;/p>
&lt;h2 id="heading">特殊な読ませ方をさせるタグ&lt;/h2>
&lt;h3 id="amazoneffect--">amazon:effect / エフェクト（ささやき声）&lt;/h3>
&lt;p>Amazonで提供されている固有のエフェクトが適用されます。今のところ用意されているのは「&lt;code>whispered&lt;/code>」というささやき声のエフェクトだけみたいです。&lt;/p>
&lt;pre>&lt;code>let speechOut = 'ささやき声にしたい部分をタグで囲います。';
speechOut += '&amp;lt;amazon:effect name=&amp;quot;whispered&amp;quot;&amp;gt;この部分をささやきます。&amp;lt;/amazon:effect&amp;gt;';
this.emit(':tell', speechOut);
&lt;/code>&lt;/pre>&lt;p>怒鳴り声とか、悲しい声とか、今後いろいろと実装されたら面白そうですね！&lt;/p>
&lt;h3 id="say-as--">say-as / 特殊な文章を解釈&lt;/h3>
&lt;p>読んで字のごとく、「〜として読ませる」タグで、テキストの形をAlexaに解釈させることができます。例えば「電話番号として読ませる」「一文字ずつとして読ませる」などの機能があります。&lt;/p>
&lt;pre>&lt;code>let speechOut = '例えば93を一文字ずつ読むと&amp;lt;break time=&amp;quot;1s&amp;quot;/&amp;gt;';
speechOut += '&amp;lt;say-as interpret-as=&amp;quot;digits&amp;quot;&amp;gt;93&amp;lt;/say-as&amp;gt;&amp;lt;break time=&amp;quot;1s&amp;quot;/&amp;gt;'; // きゅー、さん
speechOut += '日付として読むと&amp;lt;break time=&amp;quot;1s&amp;quot;/&amp;gt;';
speechOut += '&amp;lt;say-as interpret-as=&amp;quot;date&amp;quot; format=&amp;quot;m&amp;quot;&amp;gt;9&amp;lt;/say-as&amp;gt;&amp;lt;say-as interpret-as=&amp;quot;date&amp;quot; format=&amp;quot;d&amp;quot;&amp;gt;3&amp;lt;/say-as&amp;gt;&amp;lt;break time=&amp;quot;1s&amp;quot;/&amp;gt;'; // くがつ、みっか
this.emit(':tell', speechOut);
&lt;/code>&lt;/pre>&lt;p>ちなみに、英字はローマ字読みされるので例えば「IoT」は「いおっと」となってしまいます。&lt;/p>
&lt;p>「アイオーティ」と読ませたい場合は&lt;code>&amp;lt;say-as interpret-as=&amp;quot;characters&amp;quot;&amp;gt;IoT&amp;lt;/say-as&amp;gt;&lt;/code>と一文字ずつ読ませるか、テキストで「アイオーティ」と渡してあげましょう。&lt;/p>
&lt;p>また解釈の一つとして、「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/speechcon-reference-interjections-japanese.html">Speechcon&lt;/a>」という感嘆詞の読み上げが用意されています。「こんにちは」「まあ」「あら」など、&lt;strong>日常的な発話が自然に組み込めるオススメの機能&lt;/strong> です！&lt;/p>
&lt;p>こちらは別記事にまとめました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="sub--">sub / 置き換え&lt;/h3>
&lt;p>テキストに対して指定の読み方をさせることができます。「宇宙」と書いて「コスモ」と読むような、ルビ的なあれですね……！&lt;/p>
&lt;p>基本的にスキルの利用シーンはVUIのみですが、プログラムの可読性を高めるのに使われるのかなあと思っています。&lt;/p>
&lt;pre>&lt;code>let speechOut = '好きなアニメは';
speechOut += 'とある科学の&amp;lt;sub alias=&amp;quot;レールガン&amp;quot;&amp;gt;超電磁砲&amp;lt;/sub&amp;gt;です。';
this.emit(':tell', speechOut);
&lt;/code>&lt;/pre>&lt;h2 id="heading-1">音源を挿入するタグ&lt;/h2>
&lt;h3 id="audio--mp3">audio / MP3の挿入&lt;/h3>
&lt;p>スキル内にMP3音源を埋め込んで再生することができます。&lt;/p>
&lt;p>MP3音源は用意されているライブラリの他に自身が用意したものも利用できますが、&lt;strong>長さやフォーマットが細かく指定&lt;/strong> されています。&lt;/p>
&lt;p>使い方の詳細は下記記事にまとめました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-2">ブレス、区切りを挿入するタグ&lt;/h2>
&lt;h3 id="break--">break / 休止の挿入&lt;/h3>
&lt;p>休止時間を秒（s）またはミリ秒（ms）で指定します。または、&lt;/p>
&lt;pre>&lt;code>let speechOut = '3秒間待ってやる。&amp;lt;break time=&amp;quot;3s&amp;quot;&amp;gt;&amp;lt;/break&amp;gt;';
speechOut += '用意はいいな？';
this.emit(':tell', speechOut);
&lt;/code>&lt;/pre>&lt;p>&lt;!-- raw HTML omitted -->※最大10秒なので、残念ながら3分待つことはできません。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="p--">p / 段落の挿入&lt;/h3>
&lt;p>囲った部分を段落として解釈させます。「。」よりも長めの休止が入ります。これは&lt;code>&amp;lt;break strength=&amp;quot;x-strong&amp;quot; /&amp;gt;&lt;/code>を入れるのと同様の結果になります。&lt;/p>
&lt;pre>&lt;code>let speechOut = '&amp;lt;p&amp;gt;こんにちは。ちゃんとくです。今から大事な話をします。&amp;lt;/p&amp;gt;';
speechOut += '&amp;lt;p&amp;gt;実は、すごく焼肉が好きなんですよ。&amp;lt;/p&amp;gt;';
this.emit(':tell', speechOut);
&lt;/code>&lt;/pre>&lt;h3 id="s--">S / 文章区切りの挿入&lt;/h3>
&lt;p>囲った部分を一文として解釈させます。これは末尾に「。」を入れたり、&lt;code>&amp;lt;break strength=&amp;quot;strong&amp;quot; /&amp;gt;&lt;/code>を入れたりするのと同様の結果になります。&lt;/p>
&lt;pre>&lt;code>let speechOut = '&amp;lt;s&amp;gt;こんにちは&amp;lt;/s&amp;gt;';
speechOut += '今日はすごく暑いですね&amp;lt;break strength=&amp;quot;strong&amp;quot; /&amp;gt;';
speechOut += 'こんな日はビールが飲みたい！';
this.emit(':tell', speechOut);
&lt;/code>&lt;/pre>&lt;h2 id="heading-3">速さ、高さ、音量、発音を詳細に設定するタグ&lt;/h2>
&lt;h3 id="emphasis--">emphasis / 速さと音量で強調&lt;/h3>
&lt;p>&lt;code>level&lt;/code>という属性で、音量、速度などを調整して強調させることができます。&lt;/p>
&lt;pre>&lt;code>const speechOut = '今日は&amp;lt;emphasis level=&amp;quot;strong&amp;quot;&amp;gt;すごく&amp;lt;/emphasis&amp;gt;暑いですね。';
this.emit(':tell', speechOut);
&lt;/code>&lt;/pre>&lt;h3 id="prosody--">prosody / 音量、高さ、速さ&lt;/h3>
&lt;p>速さ、高さ、音量をそれぞれ指定して調整することができます。&lt;/p>
&lt;pre>&lt;code>let speechOut = '今日は&amp;lt;prosody pitch=&amp;quot;x-low&amp;quot;&amp;gt;すごく&amp;lt;/prosody&amp;gt;暑いですね。';
speechOut += 'こんな日はビールが&amp;lt;prosody volume=&amp;quot;loud&amp;quot; pitch=&amp;quot;high&amp;quot;&amp;gt;飲みたい！&amp;lt;/prosody&amp;gt;';
this.emit(':tell', speechOut);
&lt;/code>&lt;/pre>&lt;h2 id="ssml-1">SSML全部乗せを試してみる&lt;/h2>
&lt;p>読ませてみなきゃわからない、ってことで、SSMLをもりもり使ったサンプルを用意してみました。百聞は一聴にしかず！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>プログラムは下記（とりあえず動く程度でちょっと雑です）。&lt;/p>
&lt;pre>&lt;code>'use strict';
const Alexa = require('alexa-sdk');
const handlers = {
'LaunchRequest': function () {
const speechOutput = 'こんにちは。音を流してと言ってみてください。'
const reprompt = '音を流します。'
this.emit(':ask', speechOutput, reprompt);
},
'WhisperIntent': function () {
let speechOut = 'こんな風に囁きます。';
speechOut += '&amp;lt;amazon:effect name=&amp;quot;whispered&amp;quot;&amp;gt;秘密ですよ？&amp;lt;/amazon:effect&amp;gt;';
this.emit(':ask', speechOut);
},
'SayAsIntent': function () {
let speechOut = '例えば93を一文字ずつ読むと&amp;lt;break time=&amp;quot;1s&amp;quot;/&amp;gt;';
speechOut += '&amp;lt;say-as interpret-as=&amp;quot;digits&amp;quot;&amp;gt;93&amp;lt;/say-as&amp;gt;&amp;lt;break time=&amp;quot;1s&amp;quot;/&amp;gt;';
speechOut += '日付として読むと&amp;lt;break time=&amp;quot;1s&amp;quot;/&amp;gt;';
speechOut += '&amp;lt;say-as interpret-as=&amp;quot;date&amp;quot; format=&amp;quot;m&amp;quot;&amp;gt;9&amp;lt;/say-as&amp;gt;&amp;lt;say-as interpret-as=&amp;quot;date&amp;quot; format=&amp;quot;d&amp;quot;&amp;gt;3&amp;lt;/say-as&amp;gt;&amp;lt;break time=&amp;quot;1s&amp;quot;/&amp;gt;';
speechOut += 'ちなみにちゃんとくさんの誕生日みたいですよ。&amp;lt;say-as interpret-as=&amp;quot;interjection&amp;quot;&amp;gt;きゃ〜&amp;lt;/say-as&amp;gt;';
this.emit(':ask', speechOut);
},
'SubIntent': function () {
let speechOut = '例えば炭素を表すCと書いて、';
speechOut += '&amp;lt;sub alias=&amp;quot;カーボン&amp;quot;&amp;gt;C&amp;lt;/sub&amp;gt;と読ませることができます。';
this.emit(':ask', speechOut);
},
'SoundIntent': function () {
let speechOut = '音も簡単に流せますよ。';
speechOut += '&amp;lt;audio src=&amp;quot;https://s3.amazonaws.com/ask-soundlibrary/animals/amzn_sfx_dog_med_bark_2x_02.mp3&amp;quot;/&amp;gt;';
this.emit(':ask', speechOut);
},
'EmphasisIntent': function () {
let speechOut = '私本当に、';
speechOut += '&amp;lt;emphasis level=&amp;quot;strong&amp;quot;&amp;gt;本当に&amp;lt;/emphasis&amp;gt;';
speechOut += '焼肉が好きなんです。';
this.emit(':ask', speechOut);
},
'ProsodyIntent': function () {
let speechOut = '大事なことは&amp;lt;prosody rate=&amp;quot;x-slow&amp;quot;&amp;gt;ゆっくり&amp;lt;/prosody&amp;gt;、';
speechOut += '嬉しいことは&amp;lt;prosody pitch=&amp;quot;x-high&amp;quot;&amp;gt;高い声で&amp;lt;/prosody&amp;gt;';
speechOut += 'しゃべっちゃいます。';
this.emit(':ask', speechOut);
},
'AMAZON.HelpIntent': function () {
this.emit(':tell', this.t(''));
},
'AMAZON.CancelIntent': function () {
this.emit(':tell', this.t(''));
},
'AMAZON.StopIntent': function () {
this.emit(':tell', this.t(''));
},
};
exports.handler = function(event, context, callback) {
const alexa = Alexa.handler(event, context, callback);
alexa.registerHandlers(handlers);
alexa.execute();
}
&lt;/code>&lt;/pre>&lt;h2 id="heading-4">まとめ&lt;/h2>
&lt;p>ドキュメントを見て試してみたところ、発音や品詞の解釈など一部日本語スキルには対応していないものもあるようです。&lt;/p>
&lt;p>また一部重複する機能もあるので、可読性や統一性を考えながら実装していくのがよさそうです。&lt;/p>
&lt;p>使いどころを抑えて、Alexaの自然な発話を目指していきましょう！&lt;/p></description></item><item><title>本日リリース！LINE Clovaのスキル開発の始め方〜申請編〜 #clova #linebootawards #clova_cek</title><link>https://dotstud.io/blog/line-clova-skill-tutorial/</link><pubDate>Thu, 12 Jul 2018 16:20:00 +0900</pubDate><guid>https://dotstud.io/blog/line-clova-skill-tutorial/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>LINEのAIアシスタントClovaのCEK（SDK的なやつ）が発表されましたね。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://linecorp.com/ja/pr/news/ja/2018/2299">2018/7/12 【LINE Clova】「Clova」のスキルを開発・拡張できる「Clova Extensions Kit」を本日より一般公開&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;p>これでClovaのスキルが開発スタート出来るわけですね。&lt;/p>
&lt;p>また、同時リリースですが、&lt;strong>優勝賞金1000万円の&lt;a href="https://www.line-community.me/awards/">LINE BOOT AWARDS&lt;/a>が開催&lt;/strong>されます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>Clovaのスキルを開発して応募して1000万円を狙いましょう！！！&lt;/strong>&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;.とテンション上げめですが、何はともあれやってみないと始まらないので解説していきます。&lt;/p>
&lt;p>出たばっかりで僕もまだ全然把握できてないので随時更新です。&lt;/p>
&lt;p>Clovaってそもそも何？って人はこちらの記事をご参照ください&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="clova-developer-center">Clova Developer Centerにアクセス&lt;/h2>
&lt;p>&lt;a href="https://clova-developers.line.me/">https://clova-developers.line.me/&lt;/a> にアクセスしましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/35a230caad75aab3685c5fdae9a81222.png" alt="">&lt;/p>
&lt;p>Clovaの動画があるので見ると概要が掴めます。&lt;/p>
&lt;p>&lt;strong>&lt;code>「スキルを開発する」&lt;/code>&lt;/strong>のリンクから進みましょう。&lt;/p>
&lt;p>LINEのログインを求められるのでログインしてください。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/87929b699f732fe3995f51de78b792e3.png" alt="">&lt;/p>
&lt;p>&lt;strong>&lt;code>「LINE Developersでスキルチャネルを新規作成」&lt;/code>&lt;/strong>を押して進みます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/459cb0f47ac41262d328ad1f8812853c.gif" alt="">&lt;/p>
&lt;h2 id="heading">プロバイダーの選択または新規作成&lt;/h2>
&lt;p>LINE BOTの開発をした人は分かると思うのですがLINEのAPIを使った開発をする場合はプロバイダー登録という&lt;strong>開発者情報の登録&lt;/strong>があります。&lt;/p>
&lt;ul>
&lt;li>既にプロバイダーを作ったことがある場合 → 利用するプロバイダーを選択しましょう。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.gyazo.com/718e1b7255961e90e3c5a2278c14d43a.png" alt="">&lt;/p>
&lt;ul>
&lt;li>初めて → 新規プロバイダー作成から進んでプロバイダー名を入力しましょう。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.gyazo.com/46360d629ad2a79a092f2ec91b1159d7.png" alt="">&lt;/p>
&lt;h2 id="clova">Clovaスキルのチャネル登録&lt;/h2>
&lt;p>LINEのAPI群ではアプリやスキルの一つ一つをチャネルと呼びます。
（自信ないけど認識間違ってたらたぶん中の人が指摘してくれる）&lt;/p>
&lt;p>フォームに入力して進めていきます。&lt;/p>
&lt;ul>
&lt;li>チャネル名&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.gyazo.com/b09917a9a6139d3699a1d14d707bff90.png" alt="">&lt;/p>
&lt;ul>
&lt;li>作成&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>「作成してClova Developer Centerに移動」&lt;/code>&lt;/strong>を選択&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/ce082e7870bf167ccd80e447cb883f60.png" alt="">&lt;/p>
&lt;h2 id="heading-1">チャネルの基本設定&lt;/h2>
&lt;p>引き続きチャネルの基本設定です。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/c2dd4dd6e7eb3666b74da513aecf5b32.png" alt="">&lt;/p>
&lt;h3 id="heading-2">タイプの設定&lt;/h3>
&lt;p>タイプを選択します。&lt;/p>
&lt;p>現状は&lt;strong>&lt;code>「カスタム」&lt;/code>&lt;/strong>のみ選択できる模様です。&lt;/p>
&lt;blockquote>
&lt;p>音楽、ゲームなど、基本的な会話にもとづいたスキルを提供するためには、カスタムExtensionを選択して下さい。今後、IoTデバイス制御サービスのためのClova Home Extensionや、カスタマーサービスのためのChatBot Extensionが追加される予定です。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://i.gyazo.com/9eff932fcbefdba914ee97fabbfe6776.png" alt="">&lt;/p>
&lt;h3 id="extension-id">Extension ID&lt;/h3>
&lt;blockquote>
&lt;p>ExtensionのIDは、リバースドメインの表記で入力してください。また、Extension IDは、他のExtensionと重複しない、一意の値である必要があります。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>自分が持っているドメインなどを逆転させて他の人と被らないもの&lt;/strong>にしましょう。&lt;/p>
&lt;p>例えばあなたが「huga.hoge.com」のようなドメインを管理していたら「com.hoge.huga.appname」などにすると良いです。&lt;/p>
&lt;h3 id="heading-3">スキル名&lt;/h3>
&lt;blockquote>
&lt;p>スキル名は審査通過後にスキルストアに表示されます。Extensionの内容と無関係な名称や、ユーザーを混乱させる可能性のあるものは、ポリシーによって審査時にリジェクトされることがあります。&lt;/p>
&lt;/blockquote>
&lt;p>今後公開されるスキルストアに掲載される名前の模様です。
&lt;strong>スキル名は審査対象になる&lt;/strong>とのこと。&lt;/p>
&lt;h3 id="heading-4">呼び出し名&lt;/h3>
&lt;p>&lt;img src="https://i.gyazo.com/de477432d1debca4c186f243035cc5f8.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>ユーザーがExtensionを利用するために呼び出す名称を入力してください。他のスキルを同じ呼び出し名を登録することはできません。ユーザーにとって呼びやすく、発音しやすい名前にすることをお勧めします。呼び出し名には汎用的な言葉は使えませんが、ブランドまたはサービス名などは使用することができます。(例：ピザという名称を登録することはできませんが、LINEピザのようにブランド名を利用した名前であれば利用可能です) また、ブランドやサービス名が長すぎたり、発音が難しい場合には、省略して使用することもできます。呼び出し名は審査対象です。ポリシーによってはリジェクトされることがあります。&lt;/p>
&lt;/blockquote>
&lt;p>Clovaに呼びかけて&lt;strong>スキルを呼び出す際の名前&lt;/strong>です。&lt;strong>（サブ）の方に表現の揺らぎを記述&lt;/strong>しておくと呼び出す際の精度が増します。&lt;/p>
&lt;h3 id="audioplayer">AudioPlayerの使用&lt;/h3>
&lt;p>MP3など音源を配信するかどうかのチェックです。&lt;/p>
&lt;p>取り急ぎ予定が無いのでいいえにしてみました。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/58f847a87c4cbbb6b8aa417d4d118bf9.png" alt="">&lt;/p>
&lt;h3 id="heading-5">提供者について&lt;/h3>
&lt;p>提供者の情報です。個人か法人かで入力項目が分かれます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/1bc5f94f4d4e8a0cbcafe5635d0a6578.gif" alt="">&lt;/p>
&lt;p>ちなみに&lt;strong>既に同じプロバイダーでLINE BOTを作ったことがある場合は、連携させることが出来ます。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/ef9c28a3e627a056183ce19cf1500ac5.png" alt="">&lt;/p>
&lt;p>入力が完了したら、規約と個人情報取り扱い同意にチェックをし、&lt;strong>&lt;code>「作成」&lt;/code>&lt;/strong>で進みましょう。&lt;/p>
&lt;h2 id="heading-6">サーバー設定&lt;/h2>
&lt;p>基本情報を入力したら確認画面が出るので&lt;strong>&lt;code>次へ&lt;/code>&lt;/strong>で進みます。&lt;/p>
&lt;h3 id="extensionurl">ExtensionサーバーのURL&lt;/h3>
&lt;p>スキルのプログラムを置く&lt;strong>サーバーを指定&lt;/strong>します。
&lt;code>https&lt;/code>に対応したサーバーにする必要があります。&lt;/p>
&lt;p>LINE BOTの時にもよく利用する&lt;a href="https://qiita.com/n0bisuke/items/ceaa09ef8898bee8369d#4-now%E3%81%A7%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4">now&lt;/a>などのサービスを使うと良さそうです。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/414ed1bfb1f166a3db726242e87ac1c0.png" alt="">&lt;/p>
&lt;h3 id="heading-7">アカウント連携の有無&lt;/h3>
&lt;blockquote>
&lt;p>サービス提供者側で管理しているユーザーアカウントとの連携が必要な場合、または新規アカウントの作成が必要な場合は[はい]を選択してください。詳細については[認証サーバーの構築]ガイドドキュメントを参照してください。&lt;/p>
&lt;/blockquote>
&lt;p>ユーザーアカウントとの連携が必要かどうかの設定です。ここでは無しを選択しました。&lt;/p>
&lt;h2 id="heading-8">配布情報&lt;/h2>
&lt;p>（おそらく）スキルストアに掲載される情報です。&lt;/p>
&lt;h3 id="heading-9">カテゴリ&lt;/h3>
&lt;p>&lt;strong>作成するスキルが該当するカテゴリ&lt;/strong>を選択しましょう。&lt;/p>
&lt;h3 id="heading-10">審査担当者へのコメント&lt;/h3>
&lt;p>&lt;strong>審査担当者へのコメント&lt;/strong>だそうです。使い方などを記述します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/1b554328055c48282cdf73f3e0c14f6f.png" alt="">&lt;/p>
&lt;p>こんな雰囲気で書いてみました。よろしくお願いします！的な意気込みもありかも？&lt;/p>
&lt;pre>&lt;code>1. スキルの簡単な概要: 周辺のカレー店の情報を知れます。
2. Intentおよび各々のテスト発話
- YourIntent01：今開いてるカレー屋を教えて
- YourIntent02：近くで一番安いカレー屋を教えて
- YourIntent03：今日のオススメのカレーは？
&lt;/code>&lt;/pre>&lt;h3 id="heading-11">サービスを提供する国および地域&lt;/h3>
&lt;blockquote>
&lt;p>このExtensionは、Clovaがサービスを提供する全ての国および地域で利用できます。&lt;/p>
&lt;/blockquote>
&lt;p>現時点では日本限定など国を指定した配信はできない模様です。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/1027a5b8caa082d773dddbee168ec405.png" alt="">&lt;/p>
&lt;h3 id="extension">Extensionの説明（ユーザー向け）&lt;/h3>
&lt;blockquote>
&lt;p>この項目は、スキルストアのスキルページで表示されます。以下の要件に沿って、ユーザー向けの説明を詳しく作成してください。なお、入力内容が不足している場合は、審査時にリジェクトされることがあります。(500文字以内)
スキルの説明（ユーザー向け）の要件
必須：スキルの概要、利用可能なサービス内容
必須：スキルの利用方法
任意：問い合わせ先の情報（例：カスタマーセンターの情報）
但し、個人の開発者がメールアドレスや電話番号、住所等を記載する場合は、リスクを認識した上でご記入ください。&lt;/p>
&lt;/blockquote>
&lt;p>**この項目重要ですね。**他も重要だけど。&lt;/p>
&lt;p>ユーザーがストアページを見た際の項目です。概要を分かりやすく書きましょう！&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/f43b85570275b9030db35f0af54bc3dd.png" alt="">&lt;/p>
&lt;h3 id="heading-12">代表サンプル発話&lt;/h3>
&lt;blockquote>
&lt;p>ユーザーがどのようにExtensionを利用できるかを表すサンプルフレーズです。ここに入力した内容がユーザーにどのように表示されるか確認するには、Clovaアプリで[設定]&amp;gt;[拡張サービスの管理]メニューに移動し、ExtensionのリストからUIまたは説明を確認してください。1つ目の代表サンプル発話には「〜を起動して」「〜を開いて」など、スキルを起動するフレーズを登録してください。（例：ピザボットを起動して）&lt;/p>
&lt;/blockquote>
&lt;p>ユーザー側にどのようにスキルを使うのかの説明を書いてあげます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/82c9daae4c231297f3518e59f58b0747.png" alt="">&lt;/p>
&lt;h3 id="heading-13">検索キーワード(任意)&lt;/h3>
&lt;p>ユーザーがスキルを探す際のキーワードです。 &lt;strong>カンマ区切りで5つまでキーワードを設定&lt;/strong>できます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/9bea944c04f72ce28257f84e40f2433e.png" alt="">&lt;/p>
&lt;h3 id="heading-14">アイコン&lt;/h3>
&lt;p>スキルのアイコンです。 &lt;strong>512x512 pxのPNGまたはJPEG&lt;/strong>が利用できます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/d5199a56355daa0e9524d3bdd5afca70.png" alt="">&lt;/p>
&lt;p>カレーアイコン入れてみるとこんな感じです。&lt;/p>
&lt;h3 id="heading-15">対象デバイス&lt;/h3>
&lt;blockquote>
&lt;p>スキルを利用可能にするClovaデバイスを選択してください。チェックを外したデバイスからはスキルを呼び出すことができません。スキルを利用できるデバイスを1つ以上選択してください。
※ AudioPlayerを利用する場合、Xperia Ear Duoでは動作しません。&lt;/p>
&lt;/blockquote>
&lt;p>対象デバイスの指定です。現時点だと&lt;/p>
&lt;ul>
&lt;li>Clova WAVE&lt;/li>
&lt;li>Clova Friends&lt;/li>
&lt;li>Clova Friends mini&lt;/li>
&lt;li>Xperia Ear Duo&lt;/li>
&lt;/ul>
&lt;p>の4デバイスで利用できる模様です。 &lt;strong>特に指定がない場合はデフォルトの全チェックのままでOKです。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/e411ea1d9e5e35cfbf98b44792ac5ae7.png" alt="">&lt;/p>
&lt;p>最後まで記述したら&lt;strong>&lt;code>次へ&lt;/code>&lt;/strong>で進みます。&lt;/p>
&lt;h2 id="heading-16">個人情報の保護および規約同意&lt;/h2>
&lt;p>最後は個人情報保護と規約に関して登録します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/c405642b2b0d154659b78efb3f0f35bf.png" alt="">&lt;/p>
&lt;h2 id="heading-17">審査をリクエストしたいが……&lt;/h2>
&lt;p>&lt;code>対話モデル&lt;/code>の設定をしないといけません。
ここの項目は説明が多くて記事を分けたいと思います。取り急ぎここまでで保存しておきましょう。&lt;/p>
&lt;h2 id="heading-18">開発スタート&lt;/h2>
&lt;p>取り急ぎ、Node.jsで開発スタートしていきましょう。&lt;/p>
&lt;p>&lt;strong>申請完了しなくても開発スタートはできます。&lt;/strong>&lt;/p>
&lt;p>長くなって来たので以下の記事にまとめています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-19">まとめ&lt;/h2>
&lt;p>速報的に作ろうと思ったのですが、思ったより申請フローは長い模様です。&lt;/p>
&lt;p>取り急ぎ登録して保存するところまでの紹介となります。&lt;/p>
&lt;p>進められたらまた更新しますね！！&lt;/p></description></item><item><title>ClovaとNefryBT（ESP32）を連携させてみよう</title><link>https://dotstud.io/blog/clova-ifttt-nefrybt-arduino/</link><pubDate>Tue, 10 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/clova-ifttt-nefrybt-arduino/</guid><description>&lt;p>こんにちは、代表の&lt;a href="https://twitter.com/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>LINEのスマートスピーカーClova（正式にはAIアシスタントの名前）が&lt;a href="http://clova-blog.line.me/ja/archives/7990256.html">IFTTTに対応&lt;/a>したのでNefry BT（ESP32）と連携してみました。（実は結構前から対応してたんだけど試せてなかった）&lt;/p>
&lt;p>先日作った勤怠システムについては以下の記事をご参照ください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ちなみにこの勤怠システムは割と運用できてます。今の所は。&lt;/p>
&lt;h2 id="clova">Clovaって？&lt;/h2>
&lt;p>ClovaはLINEが開発したAIアシスタントです。Clova FriendsやClova Friends mini、Clova Waveなどの対応スマートスピーカー端末が販売されています。&lt;/p>
&lt;ul>
&lt;li>公式サイト: &lt;a href="https://clova.line.me/">https://clova.line.me/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>GoogleのGoogle アシスタント（Google Home）やAmazonのAlexa（Amazon Echo）などと同じ並びの立ち位置という認識で大丈夫です。&lt;/p>
&lt;p>LINEといえばスタンプやキャラクターが特徴的ですが、Clova Friendsに関してもLINEが提供しているということもあり、 &lt;strong>キャラクターをベースにしたデバイスが特徴的です&lt;/strong>。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>─ ちなみにこの写真は先日のLINE CONFERENCE 2018で発表があったミニオンズモデル&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>この記事の執筆時点（2018年7月7日）ではまだ開発用SDKは公開されていませんが、IFTTTに対応したというリリースが出ているのでIFTTT経由で色々なサービスと接続することが出来ます。&lt;/p>
&lt;h2 id="clova-1">出勤するとClovaがしゃべる&lt;/h2>
&lt;p>今回作ったものはこんな感じです。&lt;/p>
&lt;p>試してるのはアルバイトの佐々木さんです。ドヤ顔は素です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>先日作った勤怠システムと連携してキーパッドのボタンを押して出勤登録するとClovaに通知がいきます。&lt;/p>
&lt;h2 id="nefry-btclova">Nefry BTとClovaを連携してみよう&lt;/h2>
&lt;p>IFTTTのWebhookを用いてNefry BTからPOSTリクエストを送り、Clova側に通知させます。&lt;/p>
&lt;p>イメージはこんな感じです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="ifttt">IFTTTでアプレットの登録&lt;/h3>
&lt;p>アプレットとは連携させるサービスとサービスの組み合わせのことを指します。&lt;/p>
&lt;p>IFTTTのユーザー登録などを完了したら&lt;a href="https://ifttt.com/create">アプレット作成&lt;/a>のページから新規のアプレットを作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず&lt;code>this&lt;/code>を押すとトリガーとなるサービスを選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/185/4.gif" alt="">
Webhookを選択しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>任意のEvent Nameを指定します。&lt;code>clova_things&lt;/code>としました。&lt;/p>
&lt;p>次に&lt;code>that&lt;/code>を押してアウトプットとなるサービスを選択します。
&lt;img src="https://dotstud.io/img/blog/185/6.gif" alt="">
clovaを選択しましょう。&lt;/p>
&lt;p>メッセージ内容の箇所に&lt;code>Value1&lt;/code>を指定します。これはNefry BTから受け取る1つ目の値を指します。
&lt;img src="https://i.gyazo.com/d868fea0c1d1738593a1f82d26ffbde2.png" alt="">
&lt;code>Create action&lt;/code>のボタンを押して次のページで&lt;code>Finish&lt;/code>で完了です。&lt;/p>
&lt;h3 id="curl">curlで試してみる&lt;/h3>
&lt;p>&lt;a href="https://ifttt.com/services/maker_webhooks/settings">IFTTTのWebhooksの設定画面&lt;/a>を見てAPI KEYを確認しましょう。&lt;/p>
&lt;p>&lt;code>https://maker.ifttt.com/use/xxxxxxxxx&lt;/code>というURLが表示されていると思いますが、&lt;code>xxxxxxxxx&lt;/code>の箇所がAPI KEYになります。&lt;/p>
&lt;p>curlでは以下のように試せます。&lt;/p>
&lt;pre>&lt;code>$ curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d '{&amp;quot;value1&amp;quot;:&amp;quot;てすと&amp;quot;}' https://maker.ifttt.com/trigger/clova_things/with/key/xxxxxxxxx
&lt;/code>&lt;/pre>&lt;p>リクエストするURLはこのような形です。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>https://maker.ifttt.com/trigger/{{Event Name}}/with/key/{{API KEY}}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>Event Nameは今回の場合は任意の名前として&lt;code>clova_things&lt;/code>としていて、API KEYは&lt;code>xxxxxxxxx&lt;/code>の部分です。&lt;/p>
&lt;h3 id="nefry-bt">Nefry BT側のコード&lt;/h3>
&lt;p>勤怠システムの記事のコードとほぼ同様です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>適宜読み替えてください。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;WiFiClientSecure.h&amp;gt;
WiFiClientSecure client;
const int HTTP_PORT = 443;
//途中省略
//・
//・
//・
void iftttClovaPost(String message){
const char* HOST = &amp;quot;maker.ifttt.com&amp;quot;;
String url = &amp;quot;/trigger/clova_things/with/key/xxxxxxxxx&amp;quot;;
url += &amp;quot;?value1=&amp;quot;; //value1にデータを送る
url += StrPerEncord(escapeParameter(message).c_str()); //勤怠システム記事参照
Serial.print(&amp;quot;connecting to &amp;quot;);
Serial.println(HOST);
if (!client.connect(HOST, HTTP_PORT)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return;
}
client.println(&amp;quot;POST &amp;quot; + url + &amp;quot; HTTP/1.1&amp;quot;);
client.println(&amp;quot;Content-Type: application/json&amp;quot;);
client.println(&amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot;);
client.println(&amp;quot;Host: &amp;quot; + String(HOST));
client.println(&amp;quot;Connection: close&amp;quot;);
client.println();
unsigned long timeout = millis();
while (client.available() == 0) {
if (millis() - timeout &amp;gt; 5000) {
Serial.println(&amp;quot;&amp;gt;&amp;gt;&amp;gt; Client Timeout !&amp;quot;);
client.stop();
return;
}
}
// Read all the lines of the reply from server and print them to Serial
while(client.available()) {
String line = client.readStringUntil('\r');
Serial.print(line);
}
Serial.println();
Serial.println(&amp;quot;closing connection&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>全体コードは&lt;a href="https://gist.github.com/n0bisuke/d2fab404e5073e936339a6c3442c1e4c#file-kintai-ino-L94-L133">こちら&lt;/a>です。&lt;/p>
&lt;h2 id="heading">試し方と使う際の注意点&lt;/h2>
&lt;p>さて完成したら試してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>キーパッドを押すとClovaに通知がいき、**「通知を読み上げて」**とClovaに話かけてあげると読み上げてくれます。&lt;/p>
&lt;p>&lt;strong>はじめはWebhooksで通知するとそのままClovaが喋ってくれると思ったのですがそうではないので注意です。&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>通知が来た時点で何も喋ってくれないのは分かりにくいですね。現時点だと「通知を読み上げて」と言わないと読み上げてくれないので注意ですね。&lt;/p>
&lt;h2 id="heading-1">まとめ&lt;/h2>
&lt;p>Nefry BTをClovaを繋げることが出来ました。&lt;/p>
&lt;p>IFTTTに繋がると実質何とでも繋げられるので嬉しいですね。&lt;/p>
&lt;p>人間が「通知を読み上げて」と言わなくても喋ってくれるように機能追加してくれることに期待です。&lt;/p></description></item><item><title>感嘆詞でAlexaと自然な会話を実現！Speechconを使ってスキル開発</title><link>https://dotstud.io/blog/nodejs-alexa-skill-speechcon/</link><pubDate>Sat, 30 Jun 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/nodejs-alexa-skill-speechcon/</guid><description>&lt;p>こんにちは、エンジニア兼ライターの&lt;a href="https://dotstud.io/members/chantoku">ちゃんとく&lt;/a>です。&lt;/p>
&lt;p>前回、Alexaスキル開発で手軽に使えるmp3群「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/ask-soundlibrary.html">Alexa Skills Kit Sound Library&lt;/a>」を紹介しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回は、Alexaのセリフを&lt;!-- raw HTML omitted -->超簡単に感情豊かにできる感嘆詞群&lt;!-- raw HTML omitted -->「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/speechcon-reference-interjections-japanese.html">&lt;strong>Speechcon&lt;/strong>&lt;/a>」を紹介します！&lt;strong>既存のスキルにほぼコピペで組み込めますので&lt;/strong>、ぜひ試してみてください！&lt;/p>
&lt;p>ちなみにこの記事は&lt;a href="https://alexaskillawards.connpass.com/event/91338/">Alexaスキルアワード公式ハッカソン東京&lt;/a>のサポートをしながら書いています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="-">おさらい: スキルの実装方法&lt;/h2>
&lt;p>まず、「Alexaスキルを初めて作る！」という方は下記の記事から実装方法を見てみてください！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Alexaスキルは文字列を渡すだけで読み上げてくれますが、イントネーションや文の区切りがやや不自然になることがあります。&lt;/p>
&lt;p>自然な発話にするために「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/speech-synthesis-markup-language-ssml-reference.html">&lt;strong>SSML&lt;/strong>&lt;/a>」という音声合成マークアップ言語が用意されており、HTMLのような「タグ」を使って実装することができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回使うSpeechconの組み込みには、&lt;code>&amp;lt;say-as interpret-as=&amp;quot;interjection&amp;quot;&amp;gt;&lt;/code>というSSMLタグを利用します。&lt;/p>
&lt;h2 id="speechcon">Speechconとは&lt;/h2>
&lt;p>「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/speechcon-reference-interjections-japanese.html">&lt;strong>Speechcon&lt;/strong>&lt;/a>」のページを見てみると、たくさんの感嘆詞がリストになっています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ざっと見てみても、面白そうな感嘆詞が並んでいますよね。&lt;/p>
&lt;p>基本の使い方は&lt;strong>使いたい感嘆詞を見つけるだけ&lt;/strong>です。さっそくやってみましょう！&lt;/p>
&lt;h2 id="heading">用意したスキル&lt;/h2>
&lt;p>組み込むベースとして、こんなスキルを用意しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実装プログラムはこんな感じです。&lt;/p>
&lt;pre>&lt;code>'use strict';
const Alexa = require('alexa-sdk');
const handlers = {
// アプリ起動時の返答
'LaunchRequest': function () {
const speechOutput = 'こんにちは。今日はなんのお祝いですか？'
const reprompt = 'お祝いします。'
this.emit(':ask', speechOutput, reprompt);
},
// RecomendIntentへの返答
'CongratsIntent': function () {
const intent = this.event.request.intent;
const speechOutput = 'おめでとうございます。'
this.emit(':tell', speechOutput);
},
// ヘルプ（デフォルト）への返答
'AMAZON.HelpIntent': function () {
const speechOutput = '今日は誕生日、のように、なんのお祝いか教えてください。';
const reprompt = 'なんのお祝いか教えてください。'
this.emit(':ask', speechOutput, reprompt);
},
// キャンセル（デフォルト）への返答
'AMAZON.CancelIntent': function () {
this.emit(':tell', this.t('STOP_MESSAGE'));
},
// 対応できないアクションへの返答
'AMAZON.StopIntent': function () {
const speechOutput = 'すみません。わかりません。';
const reprompt = 'もう一度お願いします。'
this.emit(':tell', this.t('STOP_MESSAGE'));
},
};
// 下記のように修正
exports.handler = function(event, context, callback) {
const alexa = Alexa.handler(event, context, callback);
alexa.registerHandlers(handlers);
alexa.execute();
}
&lt;/code>&lt;/pre>&lt;p>Speechconを使っていない状態の読み上げはこんな感じです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>ちょっと違和感のある読み上げになっていますね。おめでとうも、&lt;strong>あまり祝ってくれている感じがしません&lt;/strong>（笑）。&lt;/p>
&lt;h2 id="speechcon-1">Speechconを追加&lt;/h2>
&lt;p>このスキルにSpeechconを組み込んで、感情豊かなAlexaにしてみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ページからよさそうな感嘆詞を探して……&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/3f4d5770cf0ec5483905fa83372764c6">&lt;img src="https://i.gyazo.com/3f4d5770cf0ec5483905fa83372764c6.png" alt="https://gyazo.com/3f4d5770cf0ec5483905fa83372764c6">&lt;/a>
&lt;code>&amp;lt;&amp;lt;say-as interpret-as=&amp;quot;interjection&amp;quot;&amp;gt;&amp;lt;/say-as&amp;gt;&lt;/code>で囲んで入れ込んだら完成です。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->簡単すぎますよね？&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->
組み込んだあとのプログラムは下記のようになりました。&lt;/p>
&lt;pre>&lt;code>'use strict';
const Alexa = require('alexa-sdk');
const handlers = {
// アプリ起動時の返答
'LaunchRequest': function () {
const speechOutput = '&amp;lt;say-as interpret-as=&amp;quot;interjection&amp;quot;&amp;gt;こんにちは&amp;lt;/say-as&amp;gt;&amp;lt;break time=&amp;quot;0.5s&amp;quot;/&amp;gt;今日はなんのお祝いですか？'
const reprompt = 'お祝いします。'
this.emit(':ask', speechOutput, reprompt);
},
// RecomendIntentへの返答
'CongratsIntent': function () {
const intent = this.event.request.intent;
const speechOutput = '&amp;lt;say-as interpret-as=&amp;quot;interjection&amp;quot;&amp;gt;まぁ&amp;lt;/say-as&amp;gt;&amp;lt;break time=&amp;quot;0.5s&amp;quot;/&amp;gt;&amp;lt;say-as interpret-as=&amp;quot;interjection&amp;quot;&amp;gt;お誕生日おめでとう&amp;lt;/say-as&amp;gt;&amp;lt;break time=&amp;quot;0.5s&amp;quot;/&amp;gt;&amp;lt;say-as interpret-as=&amp;quot;interjection&amp;quot;&amp;gt;万歳&amp;lt;/say-as&amp;gt;'
this.emit(':tell', speechOutput);
},
// ヘルプ（デフォルト）への返答
'AMAZON.HelpIntent': function () {
const speechOutput = '今日は誕生日、のように、なんのお祝いか教えてください。';
const reprompt = 'なんのお祝いか教えてください。'
this.emit(':ask', speechOutput, reprompt);
},
// キャンセル（デフォルト）への返答
'AMAZON.CancelIntent': function () {
this.emit(':tell', this.t('STOP_MESSAGE'));
},
// 対応できないアクションへの返答
'AMAZON.StopIntent': function () {
const speechOutput = 'すみません。わかりません。';
const reprompt = 'もう一度お願いします。'
this.emit(':tell', this.t('STOP_MESSAGE'));
},
};
// 下記のように修正
exports.handler = function(event, context, callback) {
const alexa = Alexa.handler(event, context, callback);
alexa.registerHandlers(handlers);
alexa.execute();
}
&lt;/code>&lt;/pre>&lt;p>SpeechconとSpeechconの間は、&lt;code>&amp;lt;break time=&amp;quot;0.5s&amp;quot;/&amp;gt;&lt;/code>（0.5秒休止）や&lt;code>&amp;lt;s&amp;gt;&lt;/code>（センテンスの休止）などを入れて自然な発話にします。&lt;/p>
&lt;h2 id="heading-1">試してみる&lt;/h2>
&lt;p>感情豊かになったアレクサスキルを試してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>アレクサに心から祝われてる！すごい！！&lt;/strong>&lt;/p>
&lt;h2 id="heading-2">まとめ&lt;/h2>
&lt;p>用意されている感嘆詞を組み込むだけで、&lt;strong>会話がぐっとリアルになった&lt;/strong>ように思います。Speechcon以外のSSMLもどんどん使ってスキルをブラッシュアップしていきたくなりますよね。&lt;/p>
&lt;p>日本語以外にも、英語（英国）・英語（米国）・英語（インド）・ドイツ語のSpeechconが用意されているのでいろいろ試してみてください！&lt;/p></description></item><item><title>AlexaスキルでMP3ファイルを流そう！効果音を入れてワンランクアップのスキル開発</title><link>https://dotstud.io/blog/nodejs-alexa-skill-mp3/</link><pubDate>Mon, 30 Apr 2018 16:50:26 +0900</pubDate><guid>https://dotstud.io/blog/nodejs-alexa-skill-mp3/</guid><description>&lt;p>こんにちは、ちゃんとくです。&lt;/p>
&lt;p>実はAlexaスキルでは、&lt;strong>MP3ファイルを簡単に流すことができる&lt;/strong>のを知っていますか？さらになんと、&lt;strong>「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/ask-soundlibrary.html">Alexa Skills Kit Sound Library&lt;/a>」というすぐに組み込める音源があらかじめ用意&lt;/strong>されています。&lt;/p>
&lt;p>今回は、&lt;!-- raw HTML omitted -->AlexaスキルでMP3形式の音源を流す方法を紹介&lt;!-- raw HTML omitted -->します。効果音を入れたり、録音したセリフを流したり、可能性は無限大……！&lt;/p>
&lt;p>「Alexaスキルを作るの初めて！」という方は、こちらの記事も併せて読んでみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="ssml">基本の実装方法（SSML）&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/ssml.png" alt="">
Alexaスキルの開発には、「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/speech-synthesis-markup-language-ssml-reference.html">&lt;strong>SSML&lt;/strong>&lt;/a>」という音声合成マークアップ言語が用意されています。HTMLのような「タグ」を使って実装していきます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/sample.png" alt="">
一見難しそうですが、基本的にはサンプルコードのように&lt;strong>&lt;code>&amp;lt;audio&amp;gt;&lt;/code>というタグを発話内に埋め込むだけでOK&lt;/strong>です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="alexa-skills-kit-sound-library">Alexa Skills Kit Sound Libraryを使う場合&lt;/h2>
&lt;p>Alexa Skills Kitでは、Alexaスキル開発向けに「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/ask-soundlibrary.html">&lt;strong>Sound Library&lt;/strong>&lt;/a>」という効果音のライブラリが用意されています（自分で用意した音源を流したい方は「&lt;a href="#%E8%87%AA%E5%88%86%E3%81%A7%E7%94%A8%E6%84%8F%E3%81%97%E3%81%9Fmp3%E9%9F%B3%E6%BA%90%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88">&lt;strong>自分で用意したMP3音源を使う場合&lt;/strong>&lt;/a>」へ進んでください）。
&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/ask-soundlibrary.html">&lt;img src="https://dotstud.io/img/blog/163/sound_library.png" alt="">&lt;/a>
&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/ask-soundlibrary.html">このライブラリ&lt;/a>の音源はAlexaスキル用に最適化されているので、音源のURLを指定すればすぐに使うことができます。&lt;/p>
&lt;p>まだドキュメントは英語ページのみですが、サンプルコードたっぷりなので割と読みやすいかと思います！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/categories.png" alt="">
スクロールしていくと、「&lt;strong>The sounds are organized into the following categories:&lt;/strong>」という部分から、用意されている音源のカテゴリー一覧を見ることができます。&lt;/p>
&lt;p>Ambience Sounds（環境音）、Animal Sounds（動物の音）、Battle Sounds……とたくさん用意されているのがわかりますね。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/select_category.png" alt="">
例えば「&lt;strong>Office Sounds&lt;/strong>」を選んでみると、コピーマシーンの音、エレベータのベルの音など、実際の音を確かめながら選ぶことができます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/copy_url.png" alt="">
使いたい音が見つかったら、SSMLのコードをコピーしておきます。&lt;/p>
&lt;h2 id="mp3">自分で用意したMP3音源を使う場合&lt;/h2>
&lt;p>自分でMP3形式の音源を用意して流す場合、&lt;strong>いくつかの条件に沿ってフォーマットする必要&lt;/strong>があります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/caution.png" alt="">
SSMLのリファレンスの「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/speech-synthesis-markup-language-ssml-reference.html#audio">&lt;strong>Audio&lt;/strong>&lt;/a>」の項目を見ると、詳細な条件を確認できます。&lt;/p>
&lt;p>主な注意点は下記です。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>HTTPSエンドポイントにホストされている&lt;/strong>&lt;/li>
&lt;li>&lt;strong>90秒以内である&lt;/strong>&lt;/li>
&lt;li>&lt;strong>特定のビットレート・周波数にフォーマットされている&lt;/strong>&lt;/li>
&lt;li>&lt;strong>個人情報や機密情報を含まない&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>また&lt;!-- raw HTML omitted -->著作権にはよく注意し、自分で録音した音源やフリー素材を利用するようにしましょう&lt;!-- raw HTML omitted -->。&lt;/p>
&lt;p>ちゃんとくは「&lt;a href="http://musicisvfr.com/free/index.html">&lt;strong>Music is VFR&lt;/strong>&lt;/a>」というフリー素材サイトから音源をお借りしました（こちらのサイトはクレジットを明記すると利用可能です）。ありがとうございます！&lt;/p>
&lt;h3 id="ffmpeg">ffmpegを使ってフォーマット&lt;/h3>
&lt;p>音源のフォーマットには、「&lt;strong>FFmpeg&lt;/strong>」という無料ソフトウェアを使います。FFmpegは、動画・音声の記録・変換・再生ができる有名なツールです。&lt;/p>
&lt;p>インストールしていない方は、&lt;a href="https://www.ffmpeg.org/">公式ページ&lt;/a>からインストールしましょう。Macの方は下記コマンドでインストールできます。&lt;/p>
&lt;pre>&lt;code>$ brew install ffmpeg
&lt;/code>&lt;/pre>&lt;p>インストールできたら、コマンドが使えることを確認します。&lt;/p>
&lt;pre>&lt;code>$ ffmpeg -version
&lt;/code>&lt;/pre>&lt;p>「command not found」などと出なければインストール完了です。&lt;/p>
&lt;p>ffmpegが用意できたら、MP3ファイルをフォーマットします。ビットレート、周波数は細かく指定されているのでそれに沿って下記のように実行します。&lt;/p>
&lt;pre>&lt;code>$ ffmpeg -y -i before.mp3 -ar 16000 -ab 48k -codec:a libmp3lame -ac 1 after.mp3
&lt;/code>&lt;/pre>&lt;p>&lt;strong>before.mp3&lt;/strong>の部分には用意したMP3ファイルのPATH、&lt;strong>after.mp3&lt;/strong> の部分には保存するPATHを記述してください。&lt;/p>
&lt;h3 id="s3">S3に音源をアップロード&lt;/h3>
&lt;p>上記でフォーマットしたMP3ファイルを、HTTPSでアクセス可能なようにホスティングします。&lt;/p>
&lt;p>今回はAWSの&lt;a href="https://aws.amazon.com/jp/s3/">&lt;strong>S3&lt;/strong>&lt;/a>というクラウドストレージにホストしてみます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/create_bucket.png" alt="">
AWSアカウントでS3にアクセスしたら、まずは「&lt;strong>バケット&lt;/strong>」を作成します（フォルダのようなもの）。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/create_bucket2.png" alt="">
バケット名とリージョンを選択したら、あとはデフォルト値のまま「&lt;strong>作成&lt;/strong>」を選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/upload.png" alt="">
作成したバケットを選択し、「&lt;strong>アップロード&lt;/strong>」を選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/upload2.png" alt="">
先ほどフォーマットした音源をドラッグ＆ドロップし、「&lt;strong>アップロード&lt;/strong>」を選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/change_auth.png" alt="">
アップロードできたら、アクセスできるように「&lt;strong>公開する&lt;/strong>」を選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/change_auth2.png" alt="">
これでアクセス可能なHTTPSのエンドポイントが用意できました！「&lt;strong>リンク&lt;/strong>」をコピーしておきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="lambda">Lambda関数でプログラム&lt;/h2>
&lt;p>&lt;a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/welcome.html">&lt;strong>AWS Lambda&lt;/strong>&lt;/a>にスキル用の関数を作成していきます。今回はコードのみ紹介するので、詳しい手順を知りたい方は前回の記事を参照してください！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>前回記事の手順に沿って、Lambda上でAlexaスキル用の関数を作成し、トリガーの設定などを済ませます。
&lt;img src="https://dotstud.io/img/blog/163/coding.png" alt="">
コードの編集画面が開いたら、いよいよMP3ファイルを再生するSSMLタグを実装しましょう！&lt;/p>
&lt;h3 id="heading">基本の実装方法&lt;/h3>
&lt;p>MP3ファイルの再生は、基本的に以下のタグのみで実装できます。&lt;/p>
&lt;pre>&lt;code>&amp;lt;audio src='https://path/xxx.mp3' /&amp;gt;
&lt;/code>&lt;/pre>&lt;p>通常Alexaで発話させるように、下記のように発言の中にAudioタグを組み込みます。&lt;/p>
&lt;pre>&lt;code>// mp3を再生するサンプル
'SampleIntent': function () {
const intent = this.event.request.intent;
let speechOut = &amp;quot;&amp;lt;audio src='https://path/xxx.mp3' /&amp;gt;&amp;quot;;
speechOut += &amp;quot;おはようございます！&amp;quot;;
this.emit(':tell', speechOut);
},
&lt;/code>&lt;/pre>&lt;p>&lt;code>+=&lt;/code>という演算子では、下記のように変数内の文字列に文字列を連結しています。&lt;/p>
&lt;pre>&lt;code>let sample = 'A';
sample += 'B';
console.log(sample); // AB
&lt;/code>&lt;/pre>&lt;p>全て同じ&lt;code>&amp;quot;&amp;quot;&lt;/code>内で繋げて書いても良いのですが、区切ることで可読性（読みやすさ）を高めています。&lt;/p>
&lt;p>今回は、Alexa Skills Kit Sounds Libraryの「&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/office-sounds.html">&lt;strong>typing medium（1）&lt;/strong>&lt;/a>」を流すサンプルコードを用意してみました！とりあえず試したいという方は下記をコピペして利用してください。&lt;/p>
&lt;p>またAmazon Developerコンソール側では、同名の「OfficeIntent」を作成し、「音を流して」で応答するように設定してください。&lt;/p>
&lt;pre>&lt;code>'use strict';
const Alexa = require('alexa-sdk');
const handlers = {
'LaunchRequest': function () {
const speechOutput = 'こんにちは。音を流してと言ってみてください。'
const reprompt = '音を流します。'
this.emit(':ask', speechOutput, reprompt);
},
'OfficeIntent': function () {
let speechOut = &amp;quot;&amp;lt;audio src='https://s3.amazonaws.com/ask-soundlibrary/office/amzn_sfx_typing_medium_01.mp3'/&amp;gt;&amp;quot;;
speechOut += &amp;quot;&amp;lt;break time ='1s' /&amp;gt;&amp;quot;;
speechOut += &amp;quot;今日も頑張っていますね！&amp;quot;;
this.emit(':tell', speechOut)
},
'AMAZON.HelpIntent': function () {
this.emit(':tell', this.t(''));
},
'AMAZON.CancelIntent': function () {
this.emit(':tell', this.t(''));
},
'AMAZON.StopIntent': function () {
this.emit(':tell', this.t(''));
},
};
exports.handler = function(event, context, callback) {
const alexa = Alexa.handler(event, context, callback);
alexa.registerHandlers(handlers);
alexa.execute();
}
&lt;/code>&lt;/pre>&lt;h2 id="heading-1">試してみる&lt;/h2>
&lt;p>MP3を再生する関数が作成できたら、さっそくスキル上で試してみましょう！（再三ですが、スキルの作成方法や連携方法は前回の記事を参照してください！）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実機検証もよいですが、今回はシミュレータで試してみます。
&lt;img src="https://dotstud.io/img/blog/163/simulator.png" alt="">
Amazon Developerコンソール上のAlexaスキルで「テスト」のタブを選択すると開きます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/163/simulator2.png" alt="">
設定した呼び出し名でスキルを開きます。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/4553a3341ae9fd585837834e416b793f">&lt;img src="https://i.gyazo.com/4553a3341ae9fd585837834e416b793f.gif" alt="https://gyazo.com/4553a3341ae9fd585837834e416b793f">&lt;/a>
設定したインテントで呼びかけると、無事にMP3の音源を再生することができました！&lt;/p>
&lt;h2 id="heading-2">まとめ&lt;/h2>
&lt;p>外部ファイルを扱うのは一見難しそうに見えますが、かなりサクッと実装することができました。&lt;!-- raw HTML omitted -->フォーマットの方法、音源の長さなどに注意&lt;!-- raw HTML omitted -->すれば簡単にスキルに音源を組み込んでいけますね！&lt;/p>
&lt;p>Sounds Libraryには「&lt;strong>これいつ使うの！？&lt;/strong>」という不思議な効果音もありますので、ぜひ試してみてください！&lt;/p></description></item><item><title>Amazon Echoを使いこなそう！Node.jsでAlexaスキル開発 - スマートスピーカーの基本とスキル開発入門</title><link>https://dotstud.io/blog/nodejs-amazon-alexa-skill/</link><pubDate>Tue, 06 Mar 2018 01:00:43 +0900</pubDate><guid>https://dotstud.io/blog/nodejs-amazon-alexa-skill/</guid><description>&lt;p>こんにちは、ちゃんとくです。突然ですが、「&lt;strong>スマートスピーカー&lt;/strong>」流行っていますね！&lt;/p>
&lt;p>dotstudioでも「LINE Wave」「Google Home mini」「Amazon Echo Dot」と取り揃えております。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/1.png" alt="">&lt;/p>
&lt;p>が。&lt;strong>ぶっちゃけ「音楽かけて」しか活用できてない……。&lt;/strong>&lt;/p>
&lt;p>ということで、スマートスピーカーのスキルを開発し、&lt;!-- raw HTML omitted -->活用できるよう自分向けにカスタマイズ&lt;!-- raw HTML omitted -->してみましょう！今回は&lt;strong>Amazon EchoのAlexaスキルをNode.jsで開発&lt;/strong>してみます！&lt;/p>
&lt;p>※記事は長いですが、開発は簡単なのでぜひチャレンジしてみてください！&lt;/p>
&lt;h2 id="heading">開発を始める前に&lt;/h2>
&lt;h3 id="alexaamazon-echo">Alexaって何？Amazon Echoじゃないの？&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/device.png" alt="">
Amazonのスマートスピーカーは「Echo」という&lt;strong>スピーカーのシリーズ&lt;/strong>に、「Alexa」という&lt;strong>音声AI&lt;/strong>が搭載されたものです。Alexaは音声AIの名前なので、Alexa搭載のPCやクルマもありますよね。&lt;/p>
&lt;p>各スピーカの違いは音質だったり、スマートホームハブ内臓だったりと色々あるので、調べてみてください。&lt;/p>
&lt;p>⇒ 参考: &lt;a href="http://www.itmedia.co.jp/news/articles/1711/08/news107.html">日本上陸「Amazon Echo」3機種の違いは？　他社とどう差別化する？&lt;/a>&lt;/p>
&lt;p>ちなみに「LINE WAVE」の音声AIは「Clova」、「Google Home」の音声AIは「Googleアシスタント」と言います。&lt;/p>
&lt;h3 id="alexa">Alexaのスキルってなに？&lt;/h3>
&lt;p>「スキル」とは、&lt;!-- raw HTML omitted -->開発者によって追加された拡張機能&lt;!-- raw HTML omitted -->を指します。スマートフォンでいうアプリのようなものですね。&lt;/p>
&lt;p>スキルにも「カスタムスキル（汎用）」「スマートホームスキル（家電制御など）」「フラッシュブリーフィングスキル（読み上げ）」などの種類があります。&lt;/p>
&lt;p>開発したカスタムスキルは&lt;strong>自分のデバイスですぐに利用&lt;/strong>できますが、&lt;strong>Alexaスキルストアで公開して頒布する&lt;/strong>こともできます！今回は自分のデバイスで利用できるところまでやってみますよ〜！&lt;/p>
&lt;h3 id="heading-1">スキルを開発する方法&lt;/h3>
&lt;p>まずはスキルの全体の処理の流れを見てみましょう。
&lt;img src="https://dotstud.io/img/blog/144/2.png" alt="">&lt;/p>
&lt;ul>
&lt;li>Echoデバイスは受け取った音声をAlexaサービスに渡します。&lt;/li>
&lt;li>Alexaサービスは音声を解析してテキストに変換し、処理ロジックに渡します。&lt;/li>
&lt;li>処理ロジックの結果がAlexaに渡され、音声データを生成してデバイスに渡します。&lt;/li>
&lt;li>Echoデバイスが音声を発します。&lt;/li>
&lt;/ul>
&lt;p>スキルを開発するときに必要なのは、上の図で「&lt;strong>音声インタフェース&lt;/strong>」と「&lt;strong>処理ロジック&lt;/strong>」の部分です。&lt;/p>
&lt;p>音声インタフェースは&lt;!-- raw HTML omitted -->どんな言葉を受け取るか、どう理解するか&lt;!-- raw HTML omitted -->などです。この部分は&lt;strong>Amazon Developer上で設計&lt;/strong>することができます。&lt;/p>
&lt;p>処理ロジックは&lt;!-- raw HTML omitted -->返答をする部分&lt;!-- raw HTML omitted -->です。自前でエンドポイントを作成することもできますが、&lt;strong>AWS Lambdaで作成すると簡単に紐付けることができます&lt;/strong>。今回はAWS Lambdaを使ってみます。&lt;/p>
&lt;h3 id="heading-2">開発手順の整理&lt;/h3>
&lt;p>今回は下記の手順で開発していきます。&lt;/p>
&lt;ul>
&lt;li>Amazon Developer上で音声インタフェースを設計&lt;/li>
&lt;li>AWS Lambdaで処理ロジックを開発&lt;/li>
&lt;li>音声インタフェースと処理ロジックの紐付け&lt;/li>
&lt;li>デバイスでスキルを有効にする&lt;/li>
&lt;/ul>
&lt;p>一つ一つの手順は難しくないので、しっかり理解しておきましょう！&lt;/p>
&lt;h2 id="heading-3">開発の事前準備&lt;/h2>
&lt;p>各種アカウントやセットアップは開発の前にあらかじめ用意しておくとスムーズです。&lt;/p>
&lt;ul>
&lt;li>Amazon Developerアカウント&lt;/li>
&lt;li>Echoデバイスのセットアップ&lt;/li>
&lt;li>AWSアカウント&lt;/li>
&lt;/ul>
&lt;p>下記でそれぞれの手順を紹介します。&lt;/p>
&lt;h3 id="amazon-developer">Amazon Developerアカウントの作成&lt;/h3>
&lt;p>Alexaスキルの登録や音声インタフェースの設計に必要です。Amazon.co.jpのお買い物アカウントをそのまま紐付けることができます。&lt;/p>
&lt;p>&lt;strong>※Amazon.com（米国）アカウントを紐付けると最後のデバイスとスキルの紐付けでうまくいかない場合があります。&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>右上のDeveloper Consoleから登録します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/ad_monetize.png" alt="">
収益化の項目はひとまず「いいえ」にしておきます（後から変更できます）。&lt;/p>
&lt;h3 id="echo">Echoデバイスのセットアップ&lt;/h3>
&lt;p>スマートフォンアプリで、Amazon Developerアカウントの紐づけとWi-Fi設定を行います。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/app_login.png" alt="">
お手持ちのiPhone、Android端末にAlexaアプリをインストールしましょう（以下iPhoneでの説明です）。Amazon Developerアカウントでログインします。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/app_setup.png" alt="">
「設定」から「新しいデバイスをセットアップ」を選びます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/app_wifi.png" alt="">
言語を選択し、スマートフォンを利用するWi-Fiに接続します。&lt;strong>Wi-Fiは2.4GHz帯でないと利用できない&lt;/strong>ので注意しましょう（最近だと5GHz帯も多いので確認してください）。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/app_action.png" alt="">
Echoデバイスと接続します。デバイスがオレンジになっていない場合はアクションボタンを長押しします。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/app_mode.png" alt="">
「・」のボタンがアクションボタンです。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/app_device.png" alt="">
「Amazon-XXXX」に接続します（複数のデバイスがセットアップモードになっている場合、混同しないよう注意してください）。&lt;/p>
&lt;p>以上でセットアップ完了です！&lt;/p>
&lt;h3 id="aws">AWSアカウントの作成&lt;/h3>
&lt;p>AWSアカウントは下記の公式サイトを参考に進めてみてください（以前に登録済みだったので画面キャプチャが用意できませんでした……）。&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/jp/register-flow/">https://aws.amazon.com/jp/register-flow/&lt;/a>&lt;/p>
&lt;p>アカウント登録の際には&lt;strong>クレジットカードの登録&lt;/strong>、&lt;strong>電話確認&lt;/strong>（自動応答）が必要です。&lt;/p>
&lt;p>AWSアカウントには2018年3月現在では1年間の無料枠がついてきますが、&lt;!-- raw HTML omitted -->ご自身のアカウントの管理には注意してください。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="heading-4">音声インタフェースの設計&lt;/h2>
&lt;p>まずは&lt;a href="https://developer.amazon.com/ja/">Amazon Developer&lt;/a>上で音声インタフェースを作成していきます。
&lt;img src="https://dotstud.io/img/blog/144/3.png" alt="">&lt;/p>
&lt;h3 id="alexa-1">Alexaスキルを新規登録&lt;/h3>
&lt;p>Amazon Developerにログインして&lt;a href="https://developer.amazon.com/home.html">Developer Console&lt;/a>を開きます。
&lt;img src="https://dotstud.io/img/blog/144/ad_alexa.png" alt="">
Alexaのページへ移動します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/ad_start.png" alt="">
「Alexa Skills Kit」を始めます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/create1.png" alt="">
「新しいスキルを追加」します（新メニューのβ版が出てますが、まだ日本語対応していないようです）。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/create2.png" alt="">
作成するスキルの情報を入力します。今回は下記のようにしました。&lt;/p>
&lt;ul>
&lt;li>スキルの種類 ⇒ 「カスタム対話モデル」&lt;/li>
&lt;li>言語 ⇒ 日本語&lt;/li>
&lt;li>スキル名 ⇒ ちゃんとくカフェ&lt;/li>
&lt;li>呼び出し名 ⇒ ちゃんとくカフェ&lt;/li>
&lt;/ul>
&lt;p>「保存」して「次へ」で作成します。&lt;/p>
&lt;h3 id="heading-5">対話モデルを作成&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/create3.png" alt="">
作成したら、&lt;strong>対話モデル&lt;/strong>を作っていきます。「スキルビルダーを起動する」を選択します。&lt;/p>
&lt;p>対話モデルとは、&lt;!-- raw HTML omitted -->ユーザがどのように発話するか、どのように解釈して処理ロジックに伝えるか&lt;!-- raw HTML omitted -->の部分です。用語がいくつか出てくるので、下の図を見てみましょう。
&lt;img src="https://dotstud.io/img/blog/144/model1.png" alt="">&lt;/p>
&lt;ul>
&lt;li>スキル名を&lt;strong>Invocation name&lt;/strong>と言い、「&lt;strong>Alexa、{Invocation name}を開いて&lt;/strong>」と呼びかけます。&lt;/li>
&lt;li>起動後に返すAlexaの言葉を&lt;strong>LaunchRequest&lt;/strong>と言います。&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->Alexaが受け付けるアクションの呼びかけ&lt;!-- raw HTML omitted -->を、&lt;strong>Intent&lt;/strong>と言います。&lt;/li>
&lt;li>Intentに対するAlexaの返答を&lt;strong>IntentRequest&lt;/strong>と言います。&lt;/li>
&lt;/ul>
&lt;p>これが基本的なユーザとAlexaのやりとりの構図です。対話モデルでは&lt;strong>Intent&lt;/strong>を設定して、Alexaに受け付けてもらえるようにしていきます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/model2.png" alt="">
ちなみに「スキルを開く〜アクション」までは一文での呼びかけでもできます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/builder1.png" alt="">
スキルビルダーの画面が開いたら、左のIntentsから「ADD」を選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/builder2.png" alt="">
設定するIntentの名前を付けます。今回はオススメを教えてもらうアクションを作成したいので「RecomendIntent」にしてみました。&lt;!-- raw HTML omitted -->アクションに沿った名前をつけておく&lt;!-- raw HTML omitted -->とIntentが増えてもわかりやすいと思います。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/builder3.png" alt="">
アクションを呼ぶときの「呼びかけ」のサンプル発話を登録していきます。公式によると、パターン数は1つのIntentに対し、&lt;!-- raw HTML omitted -->最低6つ、理想は30&lt;!-- raw HTML omitted -->だそうです。サンプル発話が多いほど認識精度が向上します。&lt;/p>
&lt;p>登録したら「&lt;strong>Save Model&lt;/strong>」、「&lt;strong>Build Model&lt;/strong>」を順に選択します。（Buildには少し時間がかかります。ここで機械学習がされているそうです。）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/builder4.png" alt="">
ビルドが完了したら「Configuration」を選択し、設定画面に戻ります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/builder5.png" alt="">
スキルの「ID」をコピーして、Amazon Developerは一旦置いておきます（まだ設定があるので開いたまま）。&lt;/p>
&lt;h2 id="heading-6">処理ロジックの開発&lt;/h2>
&lt;p>続いて、&lt;a href="https://aws.amazon.com/jp/">AWS&lt;/a>のLambda上で処理ロジックを作っていきます。
&lt;img src="https://dotstud.io/img/blog/144/4.png" alt="">
AWS Lambdaは、&lt;!-- raw HTML omitted -->AWSに関するイベントにをトリガーにする処理を作成できる実行環境&lt;!-- raw HTML omitted -->です。&lt;/p>
&lt;p>自分自身でエンドポイントを立てることもできますが、AWS Lambdaを使うとロジック自体の開発や他のAWSサービスとの連携も簡単です。&lt;/p>
&lt;h3 id="aws-lambda">AWS Lambda関数を作成&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func1.png" alt="">
AWSコンソールを開いたら、「lambda」を検索して開きます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func2.png" alt="">
&lt;strong>リージョンが「東京」になっていることを確認&lt;/strong>し、「関数を作成」します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func3.png" alt="">
「設計図」から作成し、「alexa-skill-sdk-factskill」を検索して選びます。この設計図を利用すると、&lt;strong>Alexa Skills Kit for Node.jsというNode.jsのSDK&lt;/strong>がデフォルトで入ってきます。&lt;!-- raw HTML omitted -->現在のところ公式に開発されているSDKはNode.jsだけ&lt;!-- raw HTML omitted -->です。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func4.png" alt="">
上記のように関数の情報を設定します。&lt;/p>
&lt;p>「ロール」は関数のアクセス権限です。今回は「シンプルなマイクロハーネスのアクセス権限」を選択しましたが、S3など他のサービスに繋ぎたい場合は別途選択が必要です。AWSの&lt;a href="https://developer.amazon.com/ja/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html">ドキュメント&lt;/a>を参考にしましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func5.png" alt="">
下にスクロールして保存します。&lt;/p>
&lt;h3 id="heading-7">トリガーをセット&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func6.png" alt="">
関数が作成できたら、トリガー部分に「Alexa Skills Kit」をドラッグ＆ドロップで設定します。&lt;/p>
&lt;p>ここで「Alexa Skills Kitがない！」という人は、&lt;strong>リージョンが東京になっているか&lt;/strong>をもう一度確認してください。（東京じゃない場合は、リージョンを選び直して関数を再度作成ですよ！）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func8.png" alt="">
下にスクロールして「トリガーの設定」に、Amazon Developerで取得した「スキルのID」を貼り付けます。&lt;/p>
&lt;h3 id="heading-8">処理ロジックを編集&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func9.png" alt="">
関数がデフォルトの設計図のままなので編集します。上記の部分を選択すると下にエディタが開きます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func11.png" alt="">
コードのエントリタイプ（エディタを使う・アップロードするなど）や、ランタイムを選択できます。Node.jsは6.10までの対応になっています。もう少しバージョンが上がってほしいですね……！&lt;/p>
&lt;p>エディタには、デフォルトのコードを参考に下記のようなコードを貼り付けます。&lt;/p>
&lt;pre>&lt;code>'use strict';
const Alexa = require('alexa-sdk');
const handlers = {
// アプリ起動時の返答
'LaunchRequest': function () {
const speechOutput = 'こんにちは。オススメをお知らせします。'
const reprompt = 'オススメをお知らせします。'
this.emit(':ask', speechOutput, reprompt);
},
// RecomendIntentへの返答
'RecomendIntent': function () {
const intent = this.event.request.intent;
const speechOutput = 'オススメはハンバーグ定食です。'
this.emit(':tell', speechOutput);
},
// ヘルプ（デフォルト）への返答
'AMAZON.HelpIntent': function () {
const speechOutput = 'ちゃんとくカフェのオススメメニューをお知らせします。';
const reprompt = 'オススメを聞いてみてください。'
this.emit(':ask', speechOutput, reprompt);
},
// キャンセル（デフォルト）への返答
'AMAZON.CancelIntent': function () {
this.emit(':tell', this.t('STOP_MESSAGE'));
},
// 対応できないアクションへの返答
'AMAZON.StopIntent': function () {
const speechOutput = 'すみません。わかりません。';
const reprompt = 'もう一度お願いします。'
this.emit(':tell', this.t('STOP_MESSAGE'));
},
};
// 下記のように修正
exports.handler = function(event, context, callback) {
const alexa = Alexa.handler(event, context, callback);
alexa.registerHandlers(handlers);
alexa.execute();
}
&lt;/code>&lt;/pre>&lt;p>先ほど設定した「RecomendIntent」（ご自身が設定したIntent名。小文字大文字など注意！）に対する返答や、その他の返答を作成しました。RaunchRequest、HelpIntentなど、&lt;strong>スキル開発で推奨されている設定があるので記述する&lt;/strong>ようにします。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>この辺がきちんと設定されていないとAlexaスキルストアでは公開できない&lt;/strong>みたいです。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/func7.png" alt="">
コードが編集できたら右上で保存し、ARNをコピーして、AWSの設定は完了です。&lt;/p>
&lt;h2 id="heading-9">音声インターフェースと処理ロジックの紐付け&lt;/h2>
&lt;p>作成したAWS Lambda関数とAmazon Developer上のスキルを紐づけます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/ad_func.png" alt="">
Amazon Developer側の設定ページで、「エンドポイント」に「AWS LambdaのARN」を選択し、「デフォルト」に先ほどのARNを貼り付けます。&lt;/p>
&lt;p>保存して紐づけは完了です！&lt;strong>これでスキルの作成が一通り完了しました！&lt;/strong>&lt;/p>
&lt;h2 id="heading-10">試してみよう！&lt;/h2>
&lt;h3 id="heading-11">シミュレータでテスト&lt;/h3>
&lt;p>まずはAmazon Developer上に用意されているシミュレータでテストしてみます（実はスキル開発だけならEchoデバイスが無くてもできるんですね）。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/simu1.png" alt="">
「テスト」のサービスシミュレータに登録したサンプル発話を入力し、スキルを呼び出します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/simu2.png" alt="">
レスポンスが返ってきました！処理ロジックを作ったらここでデバッグをしていくのが良さそうです。&lt;/p>
&lt;h3 id="echo-1">Echoデバイスでスキルを有効にする&lt;/h3>
&lt;p>開発したスキルは、自分のAmazon Developerアカウントに紐付いているデバイスで検証することができます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/demo1.png" alt="">
スマートフォンアプリから「スキル」を選びます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/demo2.png" alt="">
「有効なスキル」を選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/demo3.png" alt="">
「DEVスキル」の項目から、作成したスキルを選択します。&lt;/p>
&lt;p>ここで作ったスキルが表示されていない場合は、Amazon Developerアカウントが&lt;strong>Amazon.comアカウント（米国）に紐付いてないか確認&lt;/strong>してください。Amazon.co.jpアカウントに紐づけないとダメみたい……（現象が起こせなくて解決策がイマイチわかっていません、すみません）。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/144/demo4.png" alt="">
選択すると連携しているEchoデバイスでスキルが使えるようになります（無効にすると使えなくなります）。&lt;/p>
&lt;h3 id="heading-12">いざ、スキルを呼び出し！&lt;/h3>
&lt;p>デバイスで作成したスキルを試してみましょう！&lt;/p>
&lt;p>基本のやりとりから……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>「ヘルプ」「ストップ」などの呼びかけは、Intentを登録しなくてもデフォルトで設定されています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-13">まとめ&lt;/h2>
&lt;p>手順の紹介は長くなってしまいましたが、あまり引っかかるところなくスキルの開発ができたと思います。&lt;/p>
&lt;p>今回の基本のスキルに加えて、&lt;!-- raw HTML omitted -->デフォルトのIntentの拡張や、任意の数字や都市を受け取ることができる「Slot」の追加&lt;!-- raw HTML omitted -->などまだまだカスタマイズができます。&lt;/p>
&lt;p>次回はカスタマイズを加えたスキルを開発し、公開するところまでやってみたいと思います。それではまた！&lt;/p></description></item></channel></rss>