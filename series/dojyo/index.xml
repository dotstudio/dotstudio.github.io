<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dojyo on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/dojyo/</link><description>Recent content in dojyo on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Tue, 17 Sep 2019 00:00:00 +0900</lastBuildDate><atom:link href="/series/dojyo/" rel="self" type="application/rss+xml"/><item><title>可愛いあの子のペットになりたい！！SkyWayロボットで挑戦してみた</title><link>https://dotstud.io/blog/pet-of-cutegirl-skyway/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/pet-of-cutegirl-skyway/</guid><description>
&lt;p&gt;〜　ある夏の昼下がり、自給力は悩んでいた　〜&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya_2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
なれないかな……。　でも、なりたいな……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
どうしたの、自給力さん？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya_2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あ、うこさん！　じ、実は、僕どうしてもなりたいモノがあるんだ……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
なりたいモノって？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya_2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
じ、実は僕……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
大好きなシズカちゃんのペットになりたいんだ！！！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko_2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
はぁああ？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ほら、僕ってこう見えてカラダ大きいでしょ？　だからあんまり可愛がられることがないんだ。もしペットになれたら、可愛がられる夢が叶うでしょ？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko_2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（こいつは一体何を言っているんだ？　心配した自分がバカだった。何を涼しい顔で変態男発言してるんだ。）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ほら、もうすぐシズカちゃんがここに来ちゃう。何か作ってよ！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko_2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
しょうがないなぁ（マジで気乗りしねぇ……。）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;skywayロボットでペットの気持ちになれる&#34;&gt;SkyWayロボットでペットの気持ちになれる！？&lt;/h2&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
自給力さん、お待たせ！！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;🎵　テレテテッテテ〜　🎵&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
SkyWayロボット〜
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
な、なんだいこれは？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
これは、カメラを搭載したハイテクロボットだよ。SkyWayのAPIを使って**ブラウザ上から操作できるんだ！**　パソコン・スマホからロボットの視点で映像も見れるんだよ！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;SkyWayロボットの作り方は&lt;a href=&#34;https://dotstud.io/blog/lets-make-webrtc-robot/&#34;&gt;コチラ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
おーー、すごい！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
これなら、ペット視点の気分くらいは味わえるんじゃない？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ありがとう！！　うこさん！！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（まぁ、どうせ、そんなことしたらシズカちゃんにドン引されてフラれるだけだろうけど）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;実際に女の子に頼んでみよう&#34;&gt;実際に女の子に頼んでみよう！&lt;/h2&gt;
&lt;p&gt;ロボットができて数分後……　&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_sh&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/shizuka.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;しずか&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
おジャマしまーす。自給力さん、久しぶりー
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
久しぶりー、来てくれてありがとうー！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
シズカちゃん、いらっしゃいー
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
急でごめんなんだけど、実はお願いがあるんだ……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（マジでお願いするのか……。）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
実は、僕……。　ｺﾞﾆｮｺﾞﾆｮ
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（どんなに頼み込んでも、こんなキモいお願い受けるわけないじゃないか）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_sh&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/shizuka.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;しずか&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
うーん……。　（悩）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/15.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_sh&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/shizuka.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;しずか&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
オッケー、いいよー♪
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/16.png&#34; alt=&#34;16&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko_2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ええええええええええ！！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/17.png&#34; alt=&#34;17&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_sh&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/shizuka.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;しずか&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ちょうどペット欲しかったんだよね
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko_2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
いや、そういう問題じゃない！!
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
やったー！！　じゃあ、早速セットしよう
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ペットになるとこんな気分になれる&#34;&gt;ペットになるとこんな気分になれる！？&lt;/h2&gt;
&lt;p&gt;①ペットとして一緒に遊んだり&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/18.png&#34; alt=&#34;18&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;②ペットとしてソファで一緒にテレビを見たり&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/19.png&#34; alt=&#34;19&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;③ペットとして抱っこされてみたり&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/20.png&#34; alt=&#34;20&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;こんな夢のような時間が過ごせるのです　
by 自給力&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;夢を叶えた男の次なる野望&#34;&gt;夢を叶えた男の次なる野望&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/21.png&#34; alt=&#34;21&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
感激だよ、うこさん。ありがとう
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
まぁ、2人が楽しそうならよかった
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/22.png&#34; alt=&#34;22&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
うん。ただ、僕もう一つなりたいモノができたんだ……。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
今度はいったい何だよ？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/23.png&#34; alt=&#34;23&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ん？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/24.png&#34; alt=&#34;24&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
今度はうこさんのペットになりたいー！！！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/uko_3.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
それは、やめてくれーーー！！！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;おしまい&lt;/p&gt;
&lt;h2 id=&#34;あなたは何を作りますか&#34;&gt;あなたは何を作りますか？&lt;/h2&gt;
&lt;p&gt;SkyWayロボットを使えば、ペットになりたいという悩みだけでなく、自宅監視から茶運びマシーンまで、アイデア次第で何でも作ることができます。&lt;br /&gt;
気になった方はぜひチャレンジしてみてくださいね！&lt;/p&gt;
&lt;p&gt;SkyWayロボットの作り方は&lt;a href=&#34;https://dotstud.io/blog/lets-make-webrtc-robot/&#34;&gt;コチラ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/252/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;style&gt;
.dialogue {
padding: 10px;
display: table;
}
.image_s, .image_u, .image_sh {
width: 75px;
height: 75px;
margin-right: 10px;
display: table-cell;
vertical-align: middle;
}
.image_sh img {
border-radius: 50%;
border: 2px solid red;
}
.image_u img {
border-radius: 50%;
border: 2px solid blue;
}
.image_s img {
border-radius: 50%;
border: 2px solid green;
}
.name {
font-weight: bold;
text-align: center;
}
.text {
display: table-cell;
padding: 0;
vertical-align: middle;
padding-left: 20px;
}
&lt;/style&gt;</description></item><item><title>今年の夏休みは最新技術で工作しよう！　〜Webブラウザから操作できる「SkyWayロボット」の作り方〜</title><link>https://dotstud.io/blog/lets-make-webrtc-robot/</link><pubDate>Sat, 03 Aug 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/lets-make-webrtc-robot/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当のうこ(&lt;a href=&#34;https://twitter.com/harmoniko&#34;&gt;@harmoniko&lt;/a&gt;)です。&lt;br /&gt;
連日猛暑が続きますが、暑さに負けず、ものづくりやってますかー？&lt;br /&gt;
今回は、WebRTCを用いたサービスの1つである&lt;a href=&#34;https://webrtc.ecl.ntt.com/&#34;&gt;SkyWay&lt;/a&gt;を利用した、遠隔操作可能でカメラの映像も見れちゃうロボットの作り方を解説します。&lt;br /&gt;
また、実際のラジコンは、&lt;a href=&#34;https://makezine.jp/event/makers-mft2019/skyway/&#34;&gt;Maker Faire Tokyo 2019のSkyWayブース&lt;/a&gt;にてデモ展示されます。&lt;br /&gt;
少し難しいところもありますが、ぜひチャレンジしてみてください！&lt;/p&gt;
&lt;h2 id=&#34;必要な部品&#34;&gt;必要な部品&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;こちらのパーツ類をそれぞれ購入して揃えましょう。1〜4番はタミヤの製品です。5〜7番はホームセンター等で入手できます。右下の小さい部品は以下を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;8番の銅線の長さは、9番のラズパイ用カメラのフラットケーブルと同じくらいの長さでよいです。10番はWaveShareという会社の製品で、1500〜2000円前後で通販などでも入手できます。12番のセメント抵抗は、秋葉原のパーツ屋さんなどでないと入手しにくいかもしれません。13番のマイクロSDカードは4GB以上のものであれば何でもかまいません。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;製作に必要な工具類がこちらです。はんだごてはあってもなくても作れますが、100円ショップでも手に入るのでできるだけあったほうがいいでしょう。&lt;/p&gt;
&lt;h2 id=&#34;組み立て&#34;&gt;組み立て&lt;/h2&gt;
&lt;h3 id=&#34;車体本体&#34;&gt;車体本体&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;部品のうち、1〜3番は中に説明書が入っているため、まずそれを読みながらそれぞれ組み立てます。1番のボールキャスターは「高さ35mm」で作成、3番のツインモーターギヤボックスは「低速タイプ」で作成してください。ギヤボックスは、小さな輪っかのようなものが部品として余りますので、2つは捨てずに置いておいてください。後ほど「スペーサー」として利用します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;モーターを一度ギヤボックスから抜き、8番の銅線をそれぞれモーター端子に接続します。はんだごてがない場合は、多めに皮膜をむいてよく巻きつけるようにしましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;モーターをギヤボックスに戻し、タイヤをギヤボックスのシャフトに差し込みます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;4番のユニバーサルプレートセットを取り出し、一番大きな部材の短辺に近い一部分（上図参考、端から穴一つぶん空けて内側）をニッパで切り取って複数の穴を連結させます。これをスリットと呼びます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;先ほど切り取ったスリットの上あたりに、スリットを隠さないようにして、ユニバーサルプレートセット内にある「軸受け」を付属のネジとナットを使って上図のように固定してください。本来は、これはシャフトを通したりするのに使うパーツですが、今回はカメラを設置するためのパーツとして転用しています。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ユニバーサルプレートの軸受けをつけていない面に、タイヤをつけたギヤボックスとボールキャスターをネジとナットで固定します。ネジの位置は上図をよく見て同じ位置に留めてください。ボールキャスターはネジ穴が4つありますが、留めるのは2点だけで問題ありません。&lt;/p&gt;
&lt;h3 id=&#34;電源とraspberry-piの取り付け&#34;&gt;電源とRaspberry Piの取り付け&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;5〜7番をまとめて1つにして、バッテリーボックスを作ります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;12番のセメント抵抗2本の脚部分を短めに切り、10番のMotor Driver HATの「MA1」端子と「MB1」端子にそれぞれ片方の脚ずつ挿入します（図はMA1のみ挿入しているところです）。マイナスドライバーを使って端子を締め込み、外れないよう固定します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;次に11番のRaspberry Pi 3 B+（以下ラズパイ）を手に持ち、マイクロSDカードスロットがある短辺をこちらに向けます。その状態で、両端にあるネジ穴にギヤボックスの余り部品であるネジと、あらかじめ確保しておいたスペーサーを図のように差し込みます。固い場合があるので、その際はドライバーで回しながら差し込んでください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;車体本体に、ネジ2つがついたラズパイを設置します。図を参考にして、ユニバーサルプレート先端部分が穴2つぶんのスペースが空くようにラズパイを置き、ネジをプレートの穴にはめ込んでください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;9番のラズパイ用カメラのケーブルを、ユニバーサルプレートの下からスリットに入れて上に通し、そのままラズパイ本体のカメラコネクタに接続します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/15.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;セメント抵抗をつけたMotor Driver HATを、ラズパイの上に設置します。GPIOピンがずれないようにうまくドッキングしてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/16.png&#34; alt=&#34;16&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;左右のモーターからそれぞれ銅線を1本ずつ、ユニバーサルプレートの穴を通してオモテ側に2本引っ張って持ってきます。その2本をそれぞれ、Motor Driver HATの「MA2」端子と「MB2」端子に挿入し、マイナスドライバーでネジを締めて固定してください。なお、1つのモーターからは2本の銅線が出ていますが、ここではどちらを使ってもかまいません。左右各々から1本ずつ接続してください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/17.png&#34; alt=&#34;17&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;左右の各モーターの残りの銅線2本をユニバーサルプレート下から上に通し、今度はセメント抵抗の脚部分に接続します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/18.png&#34; alt=&#34;18&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ここも、基本的にははんだづけしたほうがよいですが、しない場合は銅線をよく巻きつけてください。金属用ボンドなどをあとで上から塗り保護するのもよいです。&lt;/p&gt;
&lt;h3 id=&#34;マイクロsdカードのセットアップ&#34;&gt;マイクロSDカードのセットアップ&lt;/h3&gt;
&lt;h4 id=&#34;osインストール&#34;&gt;OSインストール&lt;/h4&gt;
&lt;p&gt;まず、以下のURLからセットアップ済みのRaspberry Pi用OSイメージをダウンロードしてください。&lt;br /&gt;
およそ3GBありますので、ディスク容量と通信量にこ注意ください。&lt;br /&gt;
&lt;a href=&#34;https://drive.google.com/file/d/1O6UqWZHVknEJ0g2E5wjEJZhn59DFqfsU/view?usp=sharing&#34;&gt;SkyWayRobot.iso&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こちらのイメージは、ユーザー名が「pi」、パスワードが「raspverry」となっています。&lt;br /&gt;
SSH接続される際の参考にしてください。&lt;/p&gt;
&lt;p&gt;ダウンロードができたら、以下のサイトを参考にしてマイクロSDカードにダウンロードしたOSイメージをインストールしてください。&lt;br /&gt;
Windowsの場合：&lt;a href=&#34;https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/&#34;&gt;最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a&gt; の「SDカードのフォーマット」から「初期設定」直前まで&lt;br /&gt;
Macの場合：&lt;a href=&#34;https://qiita.com/shippokun/items/9070fc58f69d8c063e44&#34;&gt;MacでRaspberryPi入門 - Qiita&lt;/a&gt; の「2.microSDカードに書き込み」の部分&lt;/p&gt;
&lt;p&gt;OSをインストールしているあいだ、次のSkyWayセットアップを行なっておいてください。&lt;/p&gt;
&lt;h4 id=&#34;skywayのセットアップ&#34;&gt;SkyWayのセットアップ&lt;/h4&gt;
&lt;p&gt;次に、SkyWayにユーザー登録をして、APIキーを発行します。&lt;br /&gt;
&lt;a href=&#34;https://webrtc.ecl.ntt.com/signup.html&#34;&gt;新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a&gt;&lt;br /&gt;
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/19.png&#34; alt=&#34;19&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;アカウントを作成したらログインして、上段の “Create new application” をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Application description: My WebRTC Robot（一例。任意の名前でよいです）
Available domains: localhost, 127.0.0.1, ukkz.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;“ukkz.github.io” は、後ほどWeb上のロボットコントローラーからアクセスする際に必要なので、最初は必ず入れておいてください。&lt;br /&gt;
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/20.png&#34; alt=&#34;20&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;作成後のページはこのように表示されているかと思います。&lt;br /&gt;
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p&gt;
&lt;h4 id=&#34;環境設定&#34;&gt;環境設定&lt;/h4&gt;
&lt;p&gt;OSのインストールが完了すると、「boot」という外付けディスクがPCに認識されていると思います。そのディスクを開くと色々なファイルが入っていますが、その中から「wifi_passwd_list.conf」と、「robot.json」があることを確認してください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/21.png&#34; alt=&#34;21&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;まず最初に「wifi_passwd_list.conf」を開き、自宅などのWiFiのSSIDとパスワードを入力します。こうすることでWiFiに自動で接続することができます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/22.png&#34; alt=&#34;22&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;次に「robot.json」を開きます。この中の&lt;code&gt;&amp;quot;YOUR_SKYWAY_APIKEY&amp;quot;&lt;/code&gt;となっている部分に、先ほど取得したご自身のAPIキーをペーストしてください。また、&lt;code&gt;&amp;quot;robot-NEW&amp;quot;&lt;/code&gt;となっているところはこのロボットを識別するための「ピアID」となります。ここは好きな名前をいれましょう。&lt;/p&gt;
&lt;p&gt;今回は必要ありませんが、このラズパイと同じLAN内でもしSSH接続をする場合は、&lt;br /&gt;
&lt;code&gt;ssh pi@ピアID.local&lt;/code&gt;&lt;br /&gt;
とするとそのままアクセスすることができます。&lt;br /&gt;
また上述したとおり、パスワードは「raspverry」に設定しています。&lt;/p&gt;
&lt;p&gt;この「robot.json」の他の項目として&lt;code&gt;&amp;quot;reverse&amp;quot;&lt;/code&gt;と書かれた部分があります。ここを&lt;code&gt;false&lt;/code&gt;から&lt;code&gt;true&lt;/code&gt;にすると、モーターの回転方向が逆転します。銅線の接続方法によっては最初から逆回転をするようになっている場合があるので、完成後にコントローラからロボットを操作した際に操作と逆方向に進んでしまったりする場合は、こちらのパラメータを変更してみてください。&lt;/p&gt;
&lt;p&gt;以上まで終了したら、マイクロSDカードをPCから取り外します。&lt;/p&gt;
&lt;h3 id=&#34;仕上げ&#34;&gt;仕上げ&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/23.png&#34; alt=&#34;23&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ペンチやピンセットなどを使って、マイクロSDカードをラズパイのスロットに挿入します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/24.png&#34; alt=&#34;24&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;カメラがだらんと垂れた状態になっているので、厚めの両面テープを使い、ユニバーサルプレート先端の「軸受けパーツ」に上図のように固定します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/25.png&#34; alt=&#34;25&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;電池ボックスをロボット後部の空いた部分に載せ、輪ゴムや髪留め用のゴムなどで落ちないよう簡単に固定します。最後に電池スナップから伸びる赤と黒の線を、それぞれ「VIN」端子と「GND」端子に接続すれば完成です！&lt;/p&gt;
&lt;h2 id=&#34;試してみよう&#34;&gt;試してみよう&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/26.png&#34; alt=&#34;26&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;電源スイッチを入れて、30秒ほど待ってみましょう。モーターが動き、ロボットが軽く前後に移動するような「シグナリング動作」を行うのが確認できたら、SkyWayへの接続が完了しています。何も起こらない場合は、環境設定のところで入力したWiFiの情報が間違っていないか、APIキーがちゃんと入力されているか確認しましょう。&lt;/p&gt;
&lt;p&gt;SkyWayへの接続ができているようであれば、以下のURLをまずコピーして、お使いのブラウザのアドレスバーにペーストしてください。&lt;br /&gt;
&lt;code&gt;https://ukkz.github.io/skyway-robot/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ペーストできたら、ページを表示する前に、このアドレスの「?apikey=」に続く文字列をご自身で取得したAPIキーに書き換えてからこのURLにアクセスしてください。すると次のような画面が出ます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/27.png&#34; alt=&#34;27&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;この画面では、各ロボットごとに設定した「ピアID」の文字列のボタンが複数表示されています。このように、うまく接続できている場合は環境設定のところで書いたロボットの「ピアID」が画面上部に表示されます。同じAPIキーで複数台接続している場合は、その台数分だけボタンが出現します。この時点ではまだロボットとP2P接続していません。ボタンをクリックしてみると……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/251/28.png&#34; alt=&#34;28&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;問題なく接続されていれば、このようにカメラからの画像がブラウザの画面に表示され、十字キーでロボットを操作することができます。他にもゲーミング用のWASDキーでの操作や、LeapMotionでの操作に加え、スマホなどからは画面をなぞることでバーチャルジョイスティックによる操作をすることもできます。&lt;/p&gt;
&lt;h2 id=&#34;トラブルシューティング&#34;&gt;トラブルシューティング&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ラズパイが起動しない&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ISOの書き込みがきちんとできているか確認&lt;/li&gt;
&lt;li&gt;電池を満充電のものと交換してみる&lt;/li&gt;
&lt;li&gt;SDカードが壊れてしまっていないか&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;起動したようだが「シグナリング動作」が行われない&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WiFiのアクセスポイント名とパスワードの確認&lt;/li&gt;
&lt;li&gt;SkyWayのAPIキーの確認&lt;/li&gt;
&lt;li&gt;モーターとモータードライバの物理的な接触不良はないか&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ブラウザでボタンを押しても接続後すぐに切れて「シグナリング動作」を繰り返す&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カメラモジュールの故障または接触不良&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;操作に大幅な遅延がある&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ロボットとコントローラを同一のLAN内で動かしてみる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ロボットがキー操作と逆の動作をする&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前後逆になってしまう場合は、&lt;code&gt;/boot/robot.json&lt;/code&gt;の中にあるreverseをtrueにする&lt;/li&gt;
&lt;li&gt;左右逆になってしまう場合は、&lt;code&gt;/boot/robot.json&lt;/code&gt;の中にあるab_swapをtrueにする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;最初からロボットとの接続が確立できず起動後すぐに暴走してしまう&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;セメント抵抗の値を大きくしてみる&lt;/li&gt;
&lt;li&gt;どこかで端子がショートしていないか確認&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;接続後しばらくして操作に反応しなくなり暴走してしまう&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;電池を新品に交換する&lt;/li&gt;
&lt;li&gt;電源用USB接続を併用する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;その他、うまく動かない……&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter &lt;a href=&#34;https://twitter.com/harmoniko&#34;&gt;@harmoniko&lt;/a&gt; 宛にDM、もしくは&lt;br /&gt;
メールで ukok(at_mark)dotstud.io までお気軽にご質問ください。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;いかがでしたでしょうか？&lt;br /&gt;
今回は、最初からプログラムを書くとやはり難易度が高くなってしまうので、ロボットをOSイメージとして配布してみました。もし余力のある方は、ホームフォルダにある&lt;code&gt;app.js&lt;/code&gt;がロボットの本体ですので、ぜひご自身で色々とさわってみてくださいね。&lt;/p&gt;</description></item><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-piano/</link><pubDate>Tue, 14 May 2019 00:00:00 +1800</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-piano/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。&lt;br /&gt;
&lt;a href=&#34;https://dotstud.io/blog/meeting-via-webrtc-piano/&#34;&gt;前回&lt;/a&gt;は、スタジオからなんとかオンラインミーティングに参加したのですが、当然ながらバレちゃいましたね……&lt;br /&gt;
しかし、新社会人も多いこの季節、同じような境遇に陥る若人も少なくないでしょう！！&lt;br /&gt;
というわけで、今回は市販のMIDIキーボードを使って、簡単にこの仕組みを自作する方法を解説します！&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア部分&#34;&gt;ハードウェア部分&lt;/h2&gt;
&lt;h3 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3B+&lt;/li&gt;
&lt;li&gt;マイクロSDカード（8GB以上）&lt;/li&gt;
&lt;li&gt;USB-MIDIキーボード&lt;br /&gt;
今回はKORG社のnanoKey2を使っていきますが、基本的には何でもOKです。&lt;/li&gt;
&lt;li&gt;Raspberry Pi Camera Module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ハードウェアは特に作成する必要がなく、カメラモジュールを基板にとりつけ、USB-MIDIキーボードを接続するだけでOKです！&lt;br /&gt;
スタジオ編では、実際にYAMAHAのMIDIキーボードを分解して内部にRaspberry Piを組み込んだものを使用しました。余力がある方は試してみてください♪&lt;/p&gt;
&lt;h2 id=&#34;ソフトウェアのインストールと設定&#34;&gt;ソフトウェアのインストールと設定&lt;/h2&gt;
&lt;p&gt;ここからは、すでにRaspberry PiへのOSインストールが完了していて、SSHなどを経由してターミナル操作ができる前提で解説してゆきます。&lt;br /&gt;
よくわからない、という方は、以下の記事の「2. ソフトウェアのインストールと設定」あたりを参照しながら、OSのインストールから始めてみてください。&lt;br /&gt;
&lt;a href=&#34;https://dotstud.io/blog/howto-make-webrtc-pokeberu/&#34;&gt;【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】 | dotstudio&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;映像のストリーミング&#34;&gt;映像のストリーミング&lt;/h3&gt;
&lt;p&gt;まず映像ストリーミングに必要なソフトウェアをインストールします。&lt;br /&gt;
gstreamerというストリーミングソフトウェアを使いますが、Raspberry Piへのインストールは少々複雑になります。
以下をそのままコピペしてターミナルで実行してください。&lt;br /&gt;
&lt;code&gt;$ sudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio libgstreamer-plugins-base1.0-dev&lt;/code&gt;&lt;br /&gt;
（参考：&lt;a href=&#34;https://gstreamer.freedesktop.org/documentation/installing/on-linux.html&#34;&gt;GStreamer Installing on Linux&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;上記のインストールが完了したら、次はラズパイカメラでgstreamerを扱うライブラリをインストールします。以下のコマンドを順番に実行してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/Documents
$ git clone https://github.com/thaytan/gst-rpicamsrc.git
$ cd gst-rpicamsrc/
$ ./autogen.sh --prefix=/usr --libdir=/usr/lib/arm-linux-gnueabihf/
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;midiキーボードをpythonから扱う&#34;&gt;MIDIキーボードをPythonから扱う&lt;/h3&gt;
&lt;p&gt;MIDIキーボードからの入力を取得できるPythonライブラリをインストールします。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo apt-get install libasound2-dev libjack-jackd2-dev&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ pip3 install mido python-rtmidi&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;プログラム部分の制作&#34;&gt;プログラム部分の制作&lt;/h2&gt;
&lt;h3 id=&#34;midiキーボードの確認&#34;&gt;MIDIキーボードの確認&lt;/h3&gt;
&lt;p&gt;必要なライブラリがインストールできたところで、まずはMIDIキーボードで2タッチ入力ができるか試してみましょう！&lt;br /&gt;
今回は、ソースコードが少し長いので、gitリポジトリからクローンします。&lt;br /&gt;
ディレクトリはあらかじめ適当なものを作成して移動するなどしておいてください。&lt;br /&gt;
&lt;code&gt;$ git clone https://github.com/ukkz/skygate.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;このリポジトリには、今回使う「SkyWay」に関するモジュールが含まれていますので、開発者モードでインストールします。&lt;br /&gt;
&lt;code&gt;$ pip3 install -e skygate/&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ sudo python3 skygate/setup.py develop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;クローンとモジュールのインストールができたら、MIDIキーボードから2タッチ入力ができるサンプルを、Python3で実行してみましょう。&lt;br /&gt;
このサンプルでは、外部MIDIインターフェースからのMIDIメッセージを解析して押されている鍵盤を特定し、鍵盤に割り当てられた数字をもとにして2タッチ入力変換をするものになっています。&lt;br /&gt;
&lt;code&gt;$ python3 skygate/2touch-input-by-midi.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;実行すると入力待ちになります。&lt;br /&gt;
上図を参考にして、&amp;rdquo;41128122##&amp;rdquo; と打ち込んでみてください。すると……&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pi@raspberrypi:~ $ python3 skygate/2touch-input-by-midi.py
たいやき
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このように表示されましたでしょうか？&lt;br /&gt;
&amp;ldquo;41128122&amp;rdquo; が、2タッチ入力では「たいやき」となり、また &amp;ldquo;##&amp;rdquo; が、ここでは「入力確定」の意味合いで使用するコマンドのようなものになっています。今回は、デバイス側からのメッセージ送信はこれを使って行いますのでぜひ覚えておいてください。&lt;/p&gt;
&lt;h3 id=&#34;skywayを使ってラズパイとブラウザ間でビデオチャット&#34;&gt;SkyWayを使ってラズパイとブラウザ間でビデオチャット&lt;/h3&gt;
&lt;p&gt;今回も、&lt;a href=&#34;https://dotstud.io/blog/howto-make-webrtc-pokeberu/&#34;&gt;以前にポケベルを作成した記事&lt;/a&gt;と同様に、通信部分で&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;というWebRTCプラットホームを利用します。&lt;br /&gt;
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br /&gt;
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong&gt;WebRTC Gateway&lt;/strong&gt; というものが開発されていて、無償で利用することができます。&lt;br /&gt;
詳細は以下をご覧ください。&lt;br /&gt;
&lt;a href=&#34;https://github.com/skyway/skyway-webrtc-gateway&#34;&gt;skyway/skyway-webrtc-gateway: &lt;em&gt;Experimental&lt;/em&gt; WebRTC Gateway for SkyWay&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;skywayのアカウント作成とapiキーの取得&#34;&gt;SkyWayのアカウント作成とAPIキーの取得&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://webrtc.ecl.ntt.com/signup.html&#34;&gt;新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a&gt;&lt;br /&gt;
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Application description: my midi chat client&lt;/code&gt;（一例。任意の名前でよいです）&lt;br /&gt;
&lt;code&gt;Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほどブラウザ上からビデオチャットを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br /&gt;
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;作成後のページはこのように表示されているかと思います。&lt;br /&gt;
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p&gt;
&lt;h4 id=&#34;webrtc-gatewayの取得と起動&#34;&gt;WebRTC Gatewayの取得と起動&lt;/h4&gt;
&lt;p&gt;Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br /&gt;
&lt;code&gt;$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;実行権限を付与してから、バックエンドで起動させます。&lt;br /&gt;
&lt;code&gt;$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;raspberry-pi-とブラウザ間で接続&#34;&gt;Raspberry Pi とブラウザ間で接続&lt;/h4&gt;
&lt;p&gt;以下のコマンドでサンプルスクリプトを実行します。&lt;br /&gt;
&lt;code&gt;$ python3 skygate/sample.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br /&gt;
今回は &amp;ldquo;keyboard&amp;rdquo; という値を使いましょう。&lt;br /&gt;
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Peer created as keyboard: pt-529579b6-1b69-4f81-b213-3400d039a3da&lt;/code&gt;&lt;br /&gt;
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;/p&gt;
&lt;p&gt;では次に、このRaspberry Piと通信したいPCのブラウザなどから、以下のURLを開きましょう。&lt;br /&gt;
&lt;a href=&#34;https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;&gt;SkyWay P2P Video &amp;amp; Text Chat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こちらはWeb側のチャット画面となるページですが、URLは以下のようになっています。&lt;br /&gt;
&lt;code&gt;https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;このうち、&lt;code&gt;apikey=&lt;/code&gt;より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;このような感じになっているかと思います。&lt;br /&gt;
このとき、Raspberry Pi側が正常にSkyWayに認識されていれば、左下のドロップダウンメニューに「keyboard」と表示が出ますので、その右横のcallボタンを押すと……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Raspberry Pi側からの映像が大きく映し出されていれば、問題なく接続されています！&lt;/p&gt;
&lt;h3 id=&#34;ビデオチャットにmidiメッセージングを組み込もう&#34;&gt;ビデオチャットにMIDIメッセージングを組み込もう&lt;/h3&gt;
&lt;p&gt;ここまでくれば、あとはビデオチャットとテキストチャットを結合し、さらにMIDIキーボードの2タッチ入力でテキスト入力ができるようにすれば、「キーボードを弾きながらオンラインミーティングに参加できるマシン」のできあがりです！&lt;br /&gt;
こちらも、ソースコードが少し長くなるのでリポジトリの中にサンプルを置いておきました。これをそのまま利用してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python3 skygate/video-and-text-by-midi.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;こちらのコードでは先ほどのMIDIキーボードの2タッチ入力に加え、WebRTCで着信した相手に対してその入力テキストを送り返すようになっています。&lt;br /&gt;
これを実行すると、以下のようになります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;2タッチ入力で「おつかれさまです！」と入力したのですが、最後だけ間違えて「おつかれさまですW」になってしまいました……　慣れないと難しいですね。&lt;br /&gt;
このまま送信すると、ブラウザ側では以下のようになります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/250/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ブラウザ側からも文字列が表示されました！&lt;br /&gt;
もちろん、返事をすることもできます。ここでは「進捗どう？」とブラウザ側から送りましたが、すでに表示されているとおり、Raspberry Pi側にもちゃんと送られていることが確認できます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;WebRTCを使うと、映像・音声のようなメディアストリームのほか、バイナリにすることができるデータならなんでも送ることができます！　また、本来はWebブラウザ同士でしか使えなかったこの技術が、SkyWayのGatewayによってRaspberry PiのようなIoTデバイスでも実現できるようになったため、さらにものづくりの幅が広がります。少し難しいところもありますが、ぜひともWebRTCによる新しい可能性を感じていただければと思います。&lt;/p&gt;</description></item><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【スタジオ編】</title><link>https://dotstud.io/blog/meeting-via-webrtc-piano/</link><pubDate>Mon, 13 May 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/meeting-via-webrtc-piano/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;最近、趣味でバンドを始めました。&lt;br /&gt;
なんとなくキーボードを担当しています。&lt;br /&gt;
いやー、音楽っていいものですね。&lt;br /&gt;
仕事のことを忘れてノリノリになっちゃいますね！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;こちらはギター担当の自給力さんです。&lt;br /&gt;
彼はパワー自慢なので、とても力強い演奏をしてくれるんですよ。&lt;br /&gt;
練習中でも、ヒートアップしてくると周りが見えなくなるぐらい熱いプレイを見せてくれる、素敵なメンバーです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;さて、セッティングも終わったし、そろそろ合わせ練習を始めますか！&lt;br /&gt;
3、2、1、ハイ！！&lt;/p&gt;
&lt;p&gt;………&lt;br /&gt;
……&lt;br /&gt;
…&lt;/p&gt;
&lt;h2 id=&#34;何か忘れているような&#34;&gt;何か忘れているような&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;あれ、スマホが鳴ってるな……&lt;br /&gt;
せっかくノッてきたのに。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;あ！！！！！そういえば！！！！！&lt;br /&gt;
今日ミーティング入ってた気がするぞ……！！&lt;br /&gt;
やばいやばい、完全に忘れてスタジオに来てしまった……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;そういえば、この前もミーティングすっぽかしちゃって、次やらかしたらクビだぞ！！　って社長のびすけに言われたばかりなんだった……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ああ、自給力さん、完全にスイッチ入ったな。&lt;br /&gt;
彼はこうなると、少なくとも1時間はもう戻ってこれなくなっちゃうんだよな。&lt;br /&gt;
どうしたものか……&lt;/p&gt;
&lt;p&gt;………&lt;br /&gt;
……&lt;br /&gt;
…&lt;/p&gt;
&lt;h2 id=&#34;ミーティングをサボらずにバンド練習を続けたい&#34;&gt;ミーティングをサボらずにバンド練習を続けたい&lt;/h2&gt;
&lt;p&gt;＼ｶﾗﾝｶﾗﾝ／&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;しまった、社会人なら必ずポケットに1人1セットは入っていると言われるラズベリーパイと専用カメラを、焦った拍子に落としてしまった。踏まなくてよかった。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;（ハッ！　まてよ、このスタジオはWiFi完備だったはず……　そして今日のミーティングはオンラインで、まだもう少し時間あるじゃないか！　これは、いける！）&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;（さらにノってきた自給力さん）&lt;/p&gt;
&lt;p&gt;〜　30分後　〜&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;できたぞ！！！！&lt;/strong&gt;&lt;br /&gt;
予備で持ってきていたシンセを改造して……&lt;br /&gt;
&lt;strong&gt;バンドをプレイしつつオンラインでミーティングにコミットできるソリューション……ッ！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;これは、ラズパイにつないだカメラの映像を、Webブラウザの画面にWebRTCの&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;を使って送信できる機能がついたシンセなのだ！&lt;br /&gt;
なに？　バンド演奏してたら、音がうるさすぎてマトモに会話できないって？　いーや問題ない！&lt;br /&gt;
このシンセは、打鍵のたびに &lt;strong&gt;「MIDI信号」&lt;/strong&gt; を発することができるのだけど、これをテキストに変換して映像と同時に送信できるような仕組みにしたのだ！　つまり、 &lt;strong&gt;音を出しながらもテキストデータを送信することができる！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;さて、マイクは壊れている、ということにして、映像とテキストチャットだけを送り、あとは自給力さんが映らないようにすれば、まさか仕事をすっぽかしてるなんてバレないでしょう。僕ってば天才！！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;そうこうしてるうちにミーティング時間だ！&lt;br /&gt;
演奏しつつ参加するぞ〜〜&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/15.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;カメラがキーボードの端にあるので、身体の中心を少しずらして目線を合わせて……&lt;br /&gt;
文字列の送信は、キーボードの1オクターブ・12鍵を、「ポケベルの2タッチ入力」のようにして扱うことで行います。&lt;br /&gt;
向こうからの映像は見えないけど、スマホからラズベリーパイにSSH接続することで、向こうから送られたテキストなら確認可能！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/16.png&#34; alt=&#34;16&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
お疲れ様です！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
お疲れ。あれ、音聞こえてないけど。なんでテキストメッセージ？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
マイクの調子が悪いんです。すいませんがテキストで送りますんで……
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あっそう。無理せずに電話かけてくれてもいいよ
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（そっちのが楽だけどかけたらバレる……汗）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/17.png&#34; alt=&#34;17&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
おいおい〜〜さっきから音が変だぞ？　大丈夫か？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ﾍｱｯすみません！！　ちょっとここのフレーズが難しくて！（自給力さんの自己陶酔タイムが切れた！　まずいまずい、しかもなんか近い！）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ああ、ここは俺の超絶技巧が光るところだから、お前はそんなに頑張らなくていいぞ。でももう少し真剣に頼むよ
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
はいぃ……（危なかった、バレてないバレてない）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/18.png&#34; alt=&#34;18&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
〜〜ということで、次回イベントを企画したいんだけど……　聞こえてる？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
だっ大丈夫です！（大丈夫じゃない）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
うおおおーッノッてきたぜッッッ！！！（ｼﾞｬｶｼﾞｬｶｼﾞｬｰﾝ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（ﾋｯ……ここは演奏とチャットを同時に頑張って耐えるんだ……！）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;………&lt;br /&gt;
……&lt;br /&gt;
…&lt;/p&gt;
&lt;h2 id=&#34;なんとか乗り越えられそうだ&#34;&gt;なんとか乗り越えられそうだ&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/19.png&#34; alt=&#34;19&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
……じゃ、今度のイベントはそういう感じになるから。お願いできるね？
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
もちろんです！（よし、終わりが見えてきたぞ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（黙々とロックンロールしている）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（自給力さんも気づいてないな……　でもさらに近づいてきててなんか怖い）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_n&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/nobi.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;のびすけ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
あ、そういえばさ、別件で……
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
ｱｯﾊｲ！！（まだあるんかーい！）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/20.png&#34; alt=&#34;20&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_s&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/sugaya.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;自給力&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
♪♪♪♪（激しく頭を振りながらプレイ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;parent&#34;&gt;
&lt;div class=&#34;dialogue&#34;&gt;
&lt;div class=&#34;image_u&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/uko2.png&#34; /&gt;
&lt;section class=&#34;name&#34;&gt;うこ&lt;/section&gt;
&lt;/div&gt;
&lt;div class=&#34;text&#34;&gt;
（あっ自給力さんそんなに近寄らないで……ちょ、ちょっ…… &lt;b&gt;アッ、アーッ！！！！！！&lt;/b&gt;　ｺﾞﾝｯ）
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/21.png&#34; alt=&#34;21&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/249/22.png&#34; alt=&#34;22&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&#34;結局バレてしまいましたが&#34;&gt;結局バレてしまいましたが&lt;/h2&gt;
&lt;p&gt;次回は、今回作った「演奏と同時にWebRTCでビデオ・テキストチャットができるシンセ」の作り方を紹介していきます！&lt;br /&gt;
ミーティングをサボるため以外にも、映像・歌・演奏MIDIデータを同時にリアルタイム配信するなどの（まともな）用途にも使えますので、気になった方はぜひ続きもご覧くださいね！&lt;/p&gt;
&lt;style&gt;
.dialogue {
padding: 10px;
display: table;
}
.image_s, .image_n, .image_u {
width: 75px;
height: 75px;
margin-right: 10px;
display: table-cell;
vertical-align: middle;
}
.image_s img {
border-radius: 50%;
border: 2px solid red;
}
.image_n img {
border-radius: 50%;
border: 2px solid blue;
}
.image_u img {
border-radius: 50%;
border: 2px solid green;
}
.name {
font-weight: bold;
text-align: center;
}
.text {
display: table-cell;
padding: 0;
vertical-align: middle;
padding-left: 20px;
}
&lt;/style&gt;</description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。
&lt;a href=&#34;https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/&#34;&gt;前回の記事&lt;/a&gt;では、最新技術でポケベルを作ってみた！　というお話と、Webから2タッチ入力ができる公衆電話アプリの紹介をさせていただきました。&lt;/p&gt;
&lt;p&gt;2回目の今回は「制作編」ということで、パーツさえ用意できれば誰でも作れてしまうポケベルの作り方を紹介したいと思います！&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア部分の制作&#34;&gt;ハードウェア部分の制作&lt;/h2&gt;
&lt;h3 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3B+&lt;/li&gt;
&lt;li&gt;マイクロUSBケーブル&lt;/li&gt;
&lt;li&gt;マイクロSDカード（8GB以上）&lt;/li&gt;
&lt;li&gt;GrovePi+&lt;/li&gt;
&lt;li&gt;Grove Buzzer&lt;/li&gt;
&lt;li&gt;Grove LCD RGB Backlight&lt;/li&gt;
&lt;li&gt;有線LANで作業用PCと接続できる環境（セットアップに使います）&lt;/li&gt;
&lt;li&gt;テープ（ガムテープやセロハンテープ、マスキングできれば何でも可）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前提として、最低限のCLI（ターミナル）操作ができる方を対象として記事を書いています。予めご了承ください。&lt;/p&gt;
&lt;h3 id=&#34;組み立て&#34;&gt;組み立て&lt;/h3&gt;
&lt;h4 id=&#34;grovepi-をraspberry-piとドッキングする&#34;&gt;GrovePi+をRaspberry Piとドッキングする&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ガムテープやセロテープなどで、Raspberry PiのUSB端子の上部を図のように「マスキング」します。&lt;br /&gt;
これは、上に乗せるGrovePi+の基板が直接触れることによるショートを防止するためです。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Raspberry Piの端子にGrovePi+のソケットを上から挿し込みます。&lt;br /&gt;
このとき互いの端子の長さが異なりますが、写真のようにカド部分にあわせるようにしてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;斜め上から見るとこのようになります。&lt;/p&gt;
&lt;h4 id=&#34;groveのrgb-lcdとブザーを接続する&#34;&gt;GroveのRGB LCDとブザーを接続する&lt;/h4&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Groveのブザーを「D8」と書かれている端子にGroveケーブルで接続します。&lt;br /&gt;
また、Grove LCD RGB BacklightをI2Cと書かれている端子に接続します。こちらはI2C接続なので、I2Cと記述がある端子ならどこでもかまいませんが、写真ではI2C-1という端子に接続しています。&lt;/p&gt;
&lt;h2 id=&#34;ソフトウェアのインストールと設定&#34;&gt;ソフトウェアのインストールと設定&lt;/h2&gt;
&lt;h3 id=&#34;grovepi-向けos-raspbian-for-robots&#34;&gt;GrovePi+向けOS「Raspbian For Robots」&lt;/h3&gt;
&lt;p&gt;このパートは以下のチュートリアルの概略になります。&lt;br /&gt;
&lt;a href=&#34;https://www.dexterindustries.com/GrovePi/get-started-with-the-grovepi/&#34;&gt;Get Started with GrovePi&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;マイクロsdカードへのインストール&#34;&gt;マイクロSDカードへのインストール&lt;/h4&gt;
&lt;p&gt;GrovePi+を動作させられるソフトウェアがプリインストールされたOSが格納されたマイクロSDカードを作成します。&lt;/p&gt;
&lt;p&gt;公式サイトによると、すでにインストール済みのRaspbianも後から追加でGrovePi+用のソフトウェアがインストールできるとのことですが、記事執筆時点の最新ソフトウェアではうまく動作しませんでした。&lt;br /&gt;
すでにRaspbianを使われている方も、お手数ではありますが新しいマイクロSDカードを入手してお試しください。&lt;/p&gt;
&lt;p&gt;まず、以下のページからOSイメージファイルを入手します。&lt;br /&gt;
&lt;a href=&#34;https://sourceforge.net/projects/dexterindustriesraspbianflavor/&#34;&gt;Raspbian For Robots by Dexter Industries download | SourceForge.net&lt;/a&gt;&lt;br /&gt;
圧縮ファイルになっていますので、ダウンロード完了後に解凍しておきましょう。&lt;/p&gt;
&lt;p&gt;このイメージファイルをマイクロSDカードに書き込みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作業PCがWindowsの方は以下を参考に進めてください。&lt;br /&gt;
&lt;a href=&#34;https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/&#34;&gt;最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作業PCがMacの方は以下を参考に進めてください。&lt;br /&gt;
&lt;a href=&#34;https://qiita.com/py_iK/items/9070fc58f69d8c063e44&#34;&gt;MacでRaspberryPi入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールが完了したら、RaspberryPiに挿入して電源を接続し起動させます。&lt;br /&gt;
LANケーブルを使い、Raspberry Piと作業用PCを接続します。最近の小型PCはLANポートがついていないことも多いため、その際はUSBイーサネットアダプタなどを使うとよいでしょう。&lt;/p&gt;
&lt;p&gt;接続が完了し、Raspberry PiとGrovePi+のPWR LEDが点灯していることを確認したら、作業用PCブラウザのURL入力欄に&lt;br /&gt;
&lt;code&gt;http://dex.local/&lt;/code&gt;&lt;br /&gt;
と入力して移動します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ここまででうまくインストールと接続が完了していれば、このような画面が表示されます。&lt;br /&gt;
ブラウザ中段左側の、&amp;rdquo;VNC&amp;rdquo; をクリックすると、ブラウザからRaspberry Piのデスクトップ画面へと直接アクセスすることができます。&lt;/p&gt;
&lt;h4 id=&#34;設定とシステムのアップデート&#34;&gt;設定とシステムのアップデート&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;VNC&amp;rdquo; をクリックします。もしもパスワードが求められたら、&amp;rdquo;robots1234&amp;rdquo; と入力しましょう。&lt;br /&gt;
Raspberry Piの本体にWiFiが内蔵されているモデル以外をお使いの場合は、WiFiドングル（USB接続の子機）を接続します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;右上に上下の矢印2つのアイコンをクリックして、WiFiに接続しましょう。&lt;br /&gt;
有線LANによる接続と別でWiFiに接続していないと、アップデートやSkyWayへの接続などができません。&lt;/p&gt;
&lt;p&gt;次にソフトウェアのアップデートを行います。&lt;br /&gt;
&amp;ldquo;DI Software Update&amp;rdquo; というアイコンをダブルクリックして開き、しばらく待つと以下の画面になります。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;以下の作業でダイアログが何回か出ますがすべてOKをクリックしてください。&lt;br /&gt;
ドロップダウンメニューから &amp;ldquo;GrovePi&amp;rdquo; を選択し、&amp;rdquo;Update Firmware&amp;rdquo; をクリックします。&lt;br /&gt;
それが完了したら、&amp;rdquo;Update Dexter Software&amp;rdquo; のボタンもクリックしてアップデートを行います。&lt;/p&gt;
&lt;p&gt;ターミナルウインドウが出てアップデートが進行していきますので、少し時間がかかりますが終わるまで気長に待ちましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ターミナルがこのような画面になったら閉じて、Raspberry Piを再起動します。&lt;br /&gt;
再起動後は同様の手順でブラウザからデスクトップが表示できるところまで進めて、このデスクトップからターミナルを開きましょう。&lt;br /&gt;
あるいは、SSHが使い慣れている方であれば、作業用PCから&lt;br /&gt;
&lt;code&gt;$ ssh pi@dex.local&lt;/code&gt;&lt;br /&gt;
で直接CLI操作をすることも可能ですので、使いやすいほうをお試しください。&lt;/p&gt;
&lt;h2 id=&#34;ポケベルのプログラム部分の制作&#34;&gt;ポケベルのプログラム部分の制作&lt;/h2&gt;
&lt;h3 id=&#34;groveのlcdとブザーを扱う&#34;&gt;GroveのLCDとブザーを扱う&lt;/h3&gt;
&lt;p&gt;さて、ここからはポケベルを実際に動作させるためのプログラムを作成していきます！&lt;br /&gt;
といっても、全てコピー&amp;amp;ペーストで作成していただけますのでご安心を。&lt;/p&gt;
&lt;p&gt;まずは適当なディレクトリを作成して移動します。&lt;br /&gt;
&lt;code&gt;$ mkdir ~/pocketbell; cd ~/pocketbell&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;LCDディスプレイを簡単に扱えるようにしてくれるモジュールをコピーします。&lt;br /&gt;
&lt;code&gt;$ cp ~/Desktop/GrovePi/Software/Python/grove_rgb_lcd/grove_rgb_lcd.py ./&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同じディレクトリに、テスト用スクリプトを作成しましょう。&lt;br /&gt;
&lt;code&gt;$ vi grove_test.py&lt;/code&gt;&lt;br /&gt;
ここではviエディタを使っていますが、vimやemacsなど、編集のできるものであれば何でもかまいません。&lt;br /&gt;
編集画面になったら、以下のソースコードをコピー&amp;amp;ペーストして保存してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ファイル:grove_test.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
try:
setRGB(200, 200, 200)
setText(&amp;quot;Hello PocketBell&amp;quot;)
grovepi.digitalWrite(buzzer, 1)
time.sleep(1)
grovepi.digitalWrite(buzzer, 0)
except KeyboardInterrupt:
grovepi.digitalWrite(buzzer, 0)
except IOError:
print (&amp;quot;Error&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存したら、python3で実行してみましょう。&lt;br /&gt;
&lt;code&gt;$ python3 grove_test.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ブザーからビープ音が鳴ると同時に、LCDに &amp;ldquo;Hello PocketBell&amp;rdquo; と表示されていれば、GroveがRaspberry PiのPythonから正しく扱えていることがわかります。&lt;/p&gt;
&lt;h3 id=&#34;skywayと接続する&#34;&gt;SkyWayと接続する&lt;/h3&gt;
&lt;p&gt;今回のポケベル制作における通信部分は、&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;というWebRTCプラットホームを利用します。&lt;br /&gt;
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br /&gt;
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong&gt;WebRTC Gateway&lt;/strong&gt; というものが開発されていて、無償で利用することができます。&lt;br /&gt;
詳細は以下をご覧ください。&lt;br /&gt;
&lt;a href=&#34;https://github.com/skyway/skyway-webrtc-gateway&#34;&gt;skyway/skyway-webrtc-gateway: &lt;em&gt;Experimental&lt;/em&gt; WebRTC Gateway for SkyWay&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;skywayのアカウント作成とapiキーの取得&#34;&gt;SkyWayのアカウント作成とAPIキーの取得&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://webrtc.ecl.ntt.com/signup.html&#34;&gt;新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a&gt;&lt;br /&gt;
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p&gt;
&lt;p&gt;Application description: my pocketbell（一例。任意の名前でよいです）&lt;br /&gt;
Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/p&gt;
&lt;p&gt;&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほど公衆電話アプリからこのアプリケーションを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br /&gt;
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;作成後のページはこのように表示されているかと思います。&lt;br /&gt;
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p&gt;
&lt;h4 id=&#34;webrtc-gatewayの取得と起動&#34;&gt;WebRTC Gatewayの取得と起動&lt;/h4&gt;
&lt;p&gt;Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br /&gt;
&lt;code&gt;$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;実行権限を付与してから、バックエンドで起動させます。&lt;br /&gt;
&lt;code&gt;$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;gatewayをpythonで扱えるようにするモジュールの取得&#34;&gt;GatewayをPythonで扱えるようにするモジュールの取得&lt;/h4&gt;
&lt;p&gt;今回、WebRTC Gatewayを扱うにあたり、簡単なモジュールを作成しました。&lt;br /&gt;
Gitリポジトリをローカルにクローンします。&lt;br /&gt;
&lt;code&gt;$ git clone https://github.com/ukkz/skygate.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;未完成のモジュールですので、今回は開発者モードでインストールします。&lt;br /&gt;
&lt;code&gt;$ pip3 install -e skygate/&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ sudo python3 skygate/setup.py develop&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;skywayへの接続テスト&#34;&gt;SkyWayへの接続テスト&lt;/h4&gt;
&lt;p&gt;以下のコマンドでサンプルスクリプトを実行します。&lt;br /&gt;
&lt;code&gt;$ python3 skygate/sample.py bell-0000 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br /&gt;
今回は &amp;ldquo;bell-0000&amp;rdquo; という値を使いましょう。&lt;br /&gt;
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Peer created as bell-0000: pt-829aa04e-449d-44a1-94f8-03481741cc5c&lt;/code&gt;&lt;br /&gt;
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;br /&gt;
Ctrl+C でサンプルスクリプトを終了させましょう。&lt;/p&gt;
&lt;h3 id=&#34;skyway接続とgroveを組み合わせる&#34;&gt;SkyWay接続とGroveを組み合わせる&lt;/h3&gt;
&lt;p&gt;以下のソースコードをコピー&amp;amp;ペーストし &amp;ldquo;pocketbell.py&amp;rdquo; という名前のファイルに保存してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ファイル:pocketbell.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import time, sys, skygate, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
if len(sys.argv) &amp;gt;= 3:
peer_id = str(sys.argv[1])
api_key = str(sys.argv[2])
try:
peer = skygate.Peer(peer_id, api_key)
except Exception as e:
print(e)
setRGB(100, 0, 0)
quit()
else:
print(&#39;Peer created as &#39;+peer.id+&#39;: &#39;+peer.token)
setRGB(0, 100, 0)
try:
while True:
for data in peer.getDataConnections():
if not data.getQueue().empty():
mes = data.getQueue().get().decode()
setText(mes)
setRGB(200, 200, 200)
print(mes)
grovepi.digitalWrite(buzzer, 1)
time.sleep(.1)
grovepi.digitalWrite(buzzer, 0)
time.sleep(2)
setRGB(0, 100, 0)
except KeyboardInterrupt:
try:
peer.close()
except Exception as e:
print(e)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接続テストのときと同様、ピアIDとAPIキーを指定して実行します。&lt;br /&gt;
ただし、ここではピアIDは &amp;ldquo;bell-0001&amp;rdquo; にしましょう。&lt;br /&gt;
&lt;code&gt;$ python3 pocketbell.py bell-0001 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;さて、ここまででポケベルは完成で、上記のプログラムを実行することで待ち受け状態となります。&lt;br /&gt;
ではさっそく、公衆電話からデータを送ってみましょう！&lt;/p&gt;
&lt;h2 id=&#34;web上の公衆電話から数字を送信しよう&#34;&gt;Web上の公衆電話から数字を送信しよう&lt;/h2&gt;
&lt;p&gt;前回の記事で紹介した、Webから使えて自作ポケベルと通信ができる公衆電話を使います。&lt;br /&gt;
&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この公衆電話のURLは以下のようになっています。&lt;br /&gt;
&lt;code&gt;https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;このうち、&lt;code&gt;apikey=&lt;/code&gt;より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;コインの投入口付近をクリックして、画面上の電話機のディスプレイが &amp;ldquo;CALL&amp;rdquo; になれば問題なくSkyWayに接続されています。&lt;br /&gt;
これが確認できたら、以下の順番で操作を進めてみてください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;ldquo;0001&amp;rdquo;（ポケベルのピアIDであるbell-xxxxのxxxxに相当する4桁の数字）&lt;/li&gt;
&lt;li&gt;電話機ディスプレイが &amp;ldquo;0001&amp;rdquo; 表示に変化&lt;/li&gt;
&lt;li&gt;好きな数字を2〜3文字ほど打ち込んでみる&lt;/li&gt;
&lt;li&gt;受話器を置く部分をクリックして終話する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/247/14.gif&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ポケベルを確認してみましょう。&lt;br /&gt;
ビープ音とともに、自分で打ち込んだ数字がGrove LCDの画面上に表示されましたでしょうか？&lt;br /&gt;
今回は簡略版ですので、2タッチ入力で送ったカタカナ文字は表示できないという点がありますが、通信の難しさを意識することなくP2Pでのデータ送受信を体験いただけたかと思います。&lt;/p&gt;
&lt;p&gt;ちなみに、前半の紹介記事で作っていたポケベルの動作のようすは以下のようになります。&lt;/p&gt;
&lt;div style=&#34;margin:auto&#34;&gt;
&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;着信音作っただけでまだ通信してなかった &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%9D%E3%82%B1%E3%83%99%E3%83%AB?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ポケベル&lt;/a&gt; ちゃんとメッセージ受信できるようにしました📟送信側の公衆電話はWebで動きます☎️ 2タッチ入力対応・WebAudioでDTMF発音・WebRTCでデータ送信してますよん &lt;a href=&#34;https://t.co/NKauF6wd6E&#34;&gt;https://t.co/NKauF6wd6E&lt;/a&gt; &lt;a href=&#34;https://t.co/e4eOLBYbU1&#34;&gt;pic.twitter.com/e4eOLBYbU1&lt;/a&gt;&lt;/p&gt; うこ (@harmoniko) &lt;a href=&#34;https://twitter.com/harmoniko/status/1100371782152773633?ref_src=twsrc%5Etfw&#34;&gt;2019年2月26日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;WebRTCはWebブラウザ間でリアルタイムなデータの送受信を扱える最新の規格として普及していますが、ブラウザ以外のIoTデバイスでもこんなに簡単に扱えてしまう技術が登場しています。&lt;br /&gt;
今回利用したSkyWayというサービスはJavaScriptのSDKが無償配布されていて、Webブラウザ上で動作するWebRTCアプリケーションを誰でも気軽に作成することができます。また、Raspberry Piから利用したGatewayも、WindowsやLinux上からブラウザを介さずに利用できるようになっています。&lt;br /&gt;
あまり複雑なコードを書かなくてもこのようなP2P送受信ができますので、この機会にWebRTCを活用したものづくりにぜひともチャレンジしてみてくださいね！&lt;/p&gt;</description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【体験編】</title><link>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当うこです。&lt;br/&gt;
ここ最近は次の元号が気になって、改元まで眠れません！&lt;/p&gt;
&lt;p&gt;そんな平成の終了を追うように、平成初期に一世を風靡した「ポケベル」が、今年9月末で終了してしまうようですね。&lt;br/&gt;
&lt;a href=&#34;http://www.teleme.co.jp/service/magicmail/index.html&#34;&gt;東京テレメッセージ株式会社｜ページャー（マジックメール）サービス終了のお知らせ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;平成生まれの僕としては、聞いたことはあるけれど、使ったことはないポケベル。&lt;br/&gt;
これは無くなってしまう前に体験しなくては！&lt;br/&gt;
でも、もうポケベル本体は生産されておらず、新規契約もできません。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;ならば…… 作ってしまいましょう！&lt;/b&gt;&lt;/p&gt;
&lt;h2 id=&#34;ポケベルのしくみ&#34;&gt;ポケベルのしくみ&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ガラケー世代、スマホ世代からすれば衝撃なのですが、 &lt;strong&gt;ポケベルは受信専用&lt;/strong&gt;です。&lt;br/&gt;
基本は「無線呼び出し」という、小型の受信機に対し遠隔から合図を送る汎用的な仕組みであったものが発達し、報知局から受信専用の携帯機器のベルを鳴らすことができるようになりました。これがいわゆる「ポケベル」のはじまりです。その後、公衆電話から数字を送ったり、2つの数字の組み合わせで文字を表現する「2タッチ入力」で文字列を送ることができるようになったりして、今の30代〜40代が記憶に残すところのポケベルとなりました。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://ja.wikipedia.org/wiki/無線呼び出し&#34;&gt;無線呼び出し - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;さて、仕組みはわかったものの、現代で手軽に扱える技術で、ハードウェア・ソフトウェア・通信方法をどのようにしたらうまく作れるでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;作ってみた&#34;&gt;作ってみた&lt;/h2&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;説明が複雑になりそうなので先に作りました（結論）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;送信側である公衆電話も作りました。こちらはWeb上で動作します。&lt;/p&gt;
&lt;h3 id=&#34;ポケベル側&#34;&gt;ポケベル側&lt;/h3&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;ポケベル側は、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;レトロ感のあるディスプレイ&lt;/li&gt;
&lt;li&gt;安っぽい音のするブザー&lt;/li&gt;
&lt;li&gt;速いけど確実に届くかは無保証な通信プロトコル&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の3点が課題でした。&lt;/p&gt;
&lt;p&gt;まず最初に、ハードウェア上でLinuxが動作するなら開発も比較的やりやすいので、Raspberry Pi 3 B+ を製作のベースに選択しました。&lt;br/&gt;
次に、1.については、秋葉原でよく売られているのを見かける「16文字×2行」のディスプレイ（1580円）を使いました。しかしながら時代に即して、液晶ではなく有機ELであるところがちょっとナウいですね（死語）。&lt;br/&gt;
2.も、秋葉原でよく見る圧電ブザー（50円）を採用して音のチープ感を重視しました。&lt;br/&gt;
3.は、P2PでUDP伝送を行えばそれっぽくなりそうですが、そのままだと難しいので、NTTコミュニケーションズの提供する&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;を利用したWebRTC通信を採用することにしました。これについては後述します。&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&#34;公衆電話側&#34;&gt;公衆電話側&lt;/h3&gt;
&lt;p&gt;公衆電話は、実機を使おうとすると設置場所を探さなければいけないのと、ハードウェアを作るのが大変そうだったので、Webで実装しました。&lt;br/&gt;
以下より誰でも利用することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;往年のプッシュホンのDTMF音も再現しています。&lt;br/&gt;
これ単体でも2タッチ入力（ポケベル打ち）が体験できますので、ぜひ触ってみてください。&lt;/p&gt;
&lt;h2 id=&#34;ポケベルがさわれそうな世代を探そう&#34;&gt;ポケベルがさわれそうな世代を探そう&lt;/h2&gt;
&lt;p&gt;ネットから情報をできるだけ収集してとりあえず作ってみたものの、同じように作っている事例がまず存在せず、かつてのポケベルをどれだけ再現できているのかまったく自信がありません。&lt;br/&gt;
そこで、実際にポケベルを所持していた世代の方に見ていただくべく、&lt;a href=&#34;https://iotlt.connpass.com/event/118404/&#34;&gt;IoTLT大阪(Vol.10)&lt;/a&gt;でこのポケベルについて発表しました。&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5c62585978ca428f83d0581efb6ae50a&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;当日の参加者は50人前後。&lt;br/&gt;
ここで「実際にポケベルを使っていた方はどれぐらいいらっしゃいますか？」と聞いてみたところ……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;写真幅に収まりきらなかったのですが、およそ5人〜10人の方に挙手いただきました！&lt;br/&gt;
IoTLTは勉強会としては年齢層が若めの部類ではないかと考えているのですが、1割ほどの方が実際にご使用されていたとのこと。今回はポケベル初出のため、できれば今後の勉強会でも調査していきたいと思っております！&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;発表の最後に、「実際に利用されていた方、触ってみたい方は懇親会で僕のところにお越しください」と申し上げたところ、多くの人が見に来てくださいました。 &lt;del&gt;おっさんホイホイとはこのことか&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「公衆電話のデザインが地味にリアル！」&lt;/strong&gt;　と、ツボにはまっている方が多かったです。&lt;/p&gt;
&lt;p&gt;「これ（公衆電話）触ってもいいんですか？」「どうぞどうぞ」と、実際に触っていただいたところ、「もう忘れたよ〜〜」と言いつつも「2タッチ入力」を軽々こなせた方が3名ほどいらっしゃいました。&lt;br/&gt;
いまだにブラインドでポケベル打てる（人生の）先輩方、おそるべしです……。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;メッセージ、ちゃんと当時と同じように打てますね！！　と絶賛いただけたので見てみると……&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これはリア充しとったやつやな……&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;「アイシテル」は、2タッチ入力では「1112324493」と打ちますが、当時はド定番のメッセージだったそうです。文字が送れるようになる前の数字送信だけだったときには、語呂合わせで「114106」などとも送っていたんだとか。&lt;br/&gt;
その他、お話を伺ったところによると&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公衆電話は時間課金なので、10円でメッセージを送るには、時間内に早打ちをする必要があった。&lt;/li&gt;
&lt;li&gt;いつも20円使ってたけど、10円で打てる人がいて、神のように崇められていた。&lt;/li&gt;
&lt;li&gt;「88」と打てばハートの絵文字が出るのは当たり前（ドコモのポケベルがそうなっていたらしいです）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの思い出があったそうです。&lt;/p&gt;
&lt;p&gt;今も「LINEの既読無視」のように、通信手段の特性に基づいた独特の「あるある」が存在しますが、それは四半世紀前でも変わらなかったんですねえ……。&lt;/p&gt;
&lt;h2 id=&#34;みなさんもポケベル体験してみよう&#34;&gt;みなさんもポケベル体験してみよう！&lt;/h2&gt;
&lt;p&gt;さてそんな手作りのポケベルですが、送信側の公衆電話はWebで実装されているため、 &lt;strong&gt;ブラウザで実際にポケベル打ちを試していただくことが可能&lt;/strong&gt;です！&lt;br/&gt;
先ほど紹介させていただいたページにぜひアクセスしてみてください。&lt;br/&gt;
Google Chromeでの動作のみ確認しています。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY&#34;&gt;PayPhone for SkyWay PocketBell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;まずコイン投入口をクリックすると、液晶部分に「TEST」という表示が出ることを確認してください。これで、実際の受信端末がなくても、打ったメッセージをブラウザで確認することができるようになります。&lt;br/&gt;
次に、数字ボタンで「*2*2」と打ち込みます。これはフリーメッセージの入力を開始するコマンドのようなものです。これが打てたら、以下のページで紹介されているフリーワードの表を見ながら、数字2つずつ打ち込んでゆきます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.kerokero.net/makosuke/pbcode/docomo.htm&#34;&gt;Tele-Call page / DoCoMo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表の縦列数字が1つめ、横列数字が2つめです。例えば「うに」と入力するときは、まず「13」次に「52」のように2つずつ打ちます。&lt;br/&gt;
定番メッセージ「アイシテル」は「1112324493」と打つと表現することができます。&lt;/p&gt;
&lt;p&gt;&lt;center style=&#34;color: #585858; font-size: 95%; padding-bottom: 10px;&#34;&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/246/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;メッセージが打ち込めたら、最後に「##」と入力し、受話器置きの部分をクリックして「終話」すると、ポップアップでメッセージが表示されます。
うまく入力できたでしょうか？&lt;/p&gt;
&lt;h3 id=&#34;公衆電話の通信について&#34;&gt;公衆電話の通信について&lt;/h3&gt;
&lt;p&gt;このWeb公衆電話は、このままだと通信をしない「テストモード」で動作しますが、実際には&lt;a href=&#34;https://webrtc.ecl.ntt.com&#34;&gt;SkyWay&lt;/a&gt;を利用したWebRTC通信に対応しています。執筆時点で、WebとRaspberry Piのような組み込み機器をP2Pでリアルタイムに、かつ簡単に繋ぐことのできるサービスはこれがほぼ唯一です。しかもSkyWayのコミュニティ版は完全無料で使うことができます。&lt;br/&gt;
Webと組み込み機器を繋ぐのなら、以前まではWebSocketやMQTTを使うのが主でしたが、こちらは2者とも「サーバー対クライアント」の通信であり、バックエンドを準備するのが大変でした。&lt;br/&gt;
このSkyWayが組み込みに対応したWebRTCエンジン「&lt;a href=&#34;https://support.skyway.io/hc/ja/articles/360008586334--SkyWay-WebRTC-Gateway-試験提供開始&#34;&gt;WebRTC Gateway&lt;/a&gt;」を提供開始したことで、本来はWeb環境同士でしか成立しなかったWebRTC通信を、Raspberry Piのような低レベルのデバイスから直接的に接続させることが可能になりました。&lt;br/&gt;
この記事で作ったポケベルは、実際にこれで文字列をWeb公衆電話からRaspberry Pi製のポケベルへと送信しています。&lt;/p&gt;
&lt;h2 id=&#34;ポケベル本体も-はんだづけなしで作れます&#34;&gt;ポケベル本体も、はんだづけなしで作れます&lt;/h2&gt;
&lt;p&gt;さて、ここまでモノが揃っているのなら、実際のハードウェアに文字列を送信してみたいな、と思われたことではないでしょうか。そこで、今回のポケベルは全てはんだづけを行っていますが、「Grove」と呼ばれる規格に対応したディスプレイやブザーを使うことで、一切はんだづけをせずに同じポケベルを作っていただける方法を準備しました！&lt;br/&gt;
その詳細は次回の記事に書かせていただきますので、ご興味を持たれたかたはぜひ当ブログをチェックしておいてくださいね！&lt;/p&gt;</description></item><item><title>パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#3 - 改造編</title><link>https://dotstud.io/blog/usb-power-supply-making3/</link><pubDate>Sat, 05 May 2018 14:00:26 +0900</pubDate><guid>https://dotstud.io/blog/usb-power-supply-making3/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当のうこ（&lt;a href=&#34;https://twitter.com/harmoniko&#34;&gt;@harmoniko&lt;/a&gt;）です。&lt;/p&gt;
&lt;p&gt;みなさんは、&lt;strong&gt;電子工作をするときの電源はどこから取っていますか？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Arduinoをよく使われる方だと5V端子や3.3V端子から取っている場合が非常に多いですが、ではArduinoを使わない、ピュアな電子工作の場合だとどうしたらいいでしょうか？&lt;/p&gt;
&lt;p&gt;第1回と第2回では、USB端子から給電可能なデバイスを作るための基礎知識と理論を解説しました。今回は、&lt;u&gt;実際にUSBを使ったモノづくりに挑戦していきます。&lt;/u&gt;&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;151&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/151/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#1 - 基礎知識編
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-02-26
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
電子工作をする際の電源はどうしていますか？電子工作用電源として有用なUSBの基本と扱い方について紹介します！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;159&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making2/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/159/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#2 - 理論編
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-04-30
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
電子工作をする際の電源はどうしていますか？電池駆動の機器をUSB駆動に改造するために、電源と機器の関係を解説していきます。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;h2 id=&#34;改造に使うもの&#34;&gt;改造に使うもの&lt;/h2&gt;
&lt;p&gt;今回、電池駆動の機器をUSB駆動に改造するにあたって使うものを紹介します。&lt;/p&gt;
&lt;h3 id=&#34;電池式ライト-100均&#34;&gt;電池式ライト（100均）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/770618be-11f5-dea1-d8ac-7d7fc194f5d1.png&#34; alt=&#34;IMG_20180408_0023009.png&#34; title=&#34;IMG_20180408_0023009.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;今回は、100円ショップ・ダ◯ソーで購入した電池式のライトを、USBモバイルバッテリーから給電して光らせる仕様に改造してみます。&lt;/p&gt;
&lt;p&gt;このライトは、単3乾電池3本（4.5V）で動作するタイプのものなので、USB電源を直接接続することが可能だと思われます。というのも、100円ショップの商品は似ているが設計の異なるものが多種あるため、改造を施した全てが「必ず動作する」と断言することが難しいです。&lt;/p&gt;
&lt;p&gt;ただ、100円ショップの商品は、失敗しても元々が安いので恐れずにどんどん試すことができます。ショートによる火事などには気をつけなければいけませんが、保護回路が入っていて安全に配慮されている製品も増えてきていますので、積極的に活用することをオススメしたいです。&lt;/p&gt;
&lt;p&gt;他にどんな電池タイプのものがUSB駆動に改造可能かは、前回の「&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making2&#34;&gt;&lt;strong&gt;理論編&lt;/strong&gt;&lt;/a&gt;」を参照にしてみてください。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;159&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making2/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/159/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#2 - 理論編
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-04-30
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
電子工作をする際の電源はどうしていますか？電池駆動の機器をUSB駆動に改造するために、電源と機器の関係を解説していきます。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;h3 id=&#34;usbケーブル&#34;&gt;USBケーブル&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/c0e90b33-2ddb-b5ff-2822-07851aa1a64d.png&#34; alt=&#34;IMG_20180408_0023480.png&#34; title=&#34;IMG_20180408_0023480.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第1回では「&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making/#%E5%85%A5%E6%89%8B%E6%96%B9%E6%B3%95&#34;&gt;USBケーブルは延長タイプがよい&lt;/a&gt;」と書きましたが、今回は入手できなかったため、プリンタとの接続などで使われる「標準Aオス端子-標準Bオス端子」のケーブルを利用しました。同じ商品が手に入らなくても、似たようなものが売っていれば応用が可能なのも、100円ショップのいいところです。&lt;/p&gt;
&lt;p&gt;また、今回は1mのUSBケーブルを使用しましたが、リール巻きとり式のUSBケーブルのほうが収納もできて便利かもしれません（制作難易度は少しあがります）。&lt;/p&gt;
&lt;h2 id=&#34;実際に改造してみよう&#34;&gt;実際に改造してみよう&lt;/h2&gt;
&lt;h3 id=&#34;電源部分の確認&#34;&gt;電源部分の確認&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/c0df5c1e-e295-8913-68bb-d44c6b6ed917.png&#34; alt=&#34;IMG_20180408_0025270.png&#34; title=&#34;IMG_20180408_0025270.png&#34; /&gt;
この製品は下部に電源フタがついています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/bf7d36f5-24f7-92fe-94d1-bdb2dcdee00c.png&#34; alt=&#34;IMG_20180408_0024225.png&#34; title=&#34;IMG_20180408_0024225.png&#34; /&gt;
中に電池ホルダーがあります。&lt;/p&gt;
&lt;p&gt;電池は基本的に直列接続ですので、端子を見て、どこがプラスでどこがマイナスなのか判断しましょう。&lt;strong&gt;電池同士をつないでいない端子が機器のプラスとマイナスとなります&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;フタ部分に穴をあけてUSBケーブルを通し、ホルダーのところでプラスとマイナスの端子を接続することで通電できます。実際にやっていきましょう。&lt;/p&gt;
&lt;h3 id=&#34;usbケーブルを中にいれる準備&#34;&gt;USBケーブルを中にいれる準備&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/1bcce441-b427-04a3-b0e1-def65ce6f834.png&#34; alt=&#34;IMG_20180408_0233088.png&#34; title=&#34;IMG_20180408_0233088.png&#34; /&gt;
バッテリに挿す側は標準Aオス端子のほうなので、今回は不要な標準Bオス端子側を短く切ってしまいます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/68193c53-fc39-56c4-2969-f0616ed4a9a3.png&#34; alt=&#34;IMG_20180408_0234587.png&#34; title=&#34;IMG_20180408_0234587.png&#34; /&gt;
電池フタのLEDライトでないほう（末端側）からUSBケーブルを通し、そこから遠いほうの電池ホルダー端子までケーブルを到達させることを想定します。そうすると、この電池ホルダーと同じ長さぶんだけ、USBケーブルの外側の皮膜を取り除けばうまく配線できそうです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/5c2b2c13-2b8a-1796-dd56-c1e6c8ad0134.png&#34; alt=&#34;IMG_20180408_0244323.png&#34; title=&#34;IMG_20180408_0244323.png&#34; /&gt;
皮膜を取り除くと4本の線がでてきます。電源線である赤と黒の線だけ、先端の皮膜をさらに取り外しておきます。緑と白の2本はこのままおいておきます。&lt;/p&gt;
&lt;p&gt;USBケーブルの中身については、詳細は第1回の「&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making/&#34;&gt;&lt;strong&gt;基礎知識編&lt;/strong&gt;&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;151&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/151/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#1 - 基礎知識編
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-02-26
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
電子工作をする際の電源はどうしていますか？電子工作用電源として有用なUSBの基本と扱い方について紹介します！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/30f0c3b6-3cce-0684-51a3-cd9018c6b6dc.png&#34; alt=&#34;IMG_20180408_0238596.png&#34; title=&#34;IMG_20180408_0238596.png&#34; /&gt;
電池フタの末端側をV字の形にニッパで切り取り、USBケーブルが入るようにします。丸型でなくV字にするのは、&lt;strong&gt;V字の直線部分がUSBケーブルの皮膜に食い込むことで、引っ張っても外れにくくするため&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;なお今回は &lt;del&gt;力加減や形状の問題があり&lt;/del&gt; 下手くそだったため、V字に切るときフタにヒビが入ってしまいましたので、接着剤で補修しています。&lt;/p&gt;
&lt;p&gt;はんだごて等で溶かす方法もありますが、有害なガスが発生し、コテが傷みやすくなることから、あまりオススメはできません。&lt;/p&gt;
&lt;h3 id=&#34;はんだづけ&#34;&gt;はんだづけ&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/30a0f044-5c11-3db1-8fa0-293d069fe2d3.png&#34; alt=&#34;IMG_20180408_0252091.png&#34; title=&#34;IMG_20180408_0252091.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;この段階が最も重要なポイントで、 &lt;strong&gt;はんだづけ部分に負荷をかけないこと&lt;/strong&gt;が、接触不良などを起こさず安定した動作を実現するキモとなります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用しない緑と白の信号線を、使用しない電源端子（ここではライト側のマイナス端子）に引っかける&lt;/li&gt;
&lt;li&gt;赤の電源線をマイナス端子に一度通し、ライト側のプラス端子にはんだづけする&lt;/li&gt;
&lt;li&gt;緑と白の信号線をピンとひっぱり、赤の電源線がすこしだけ「&lt;strong&gt;たるむ&lt;/strong&gt;」ようにする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このようにすることで、ケーブルが引っ張られたとしてもその負荷は緑と白の信号線にかかり、マイナス端子のバネの効果で吸収することで、 &lt;strong&gt;はんだづけ部分に負荷がかからなくなる&lt;/strong&gt;ようになります。&lt;/p&gt;
&lt;p&gt;はんだづけは端子表面でなく、側面のエッジに引っ掛けるようにするとのりやすいです。うまく接着しない場合ははんだごての出力を大きいものにするか、フラックスを塗ることで比較的つきやすくなります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/3a173fe6-8cc5-67f0-3d7a-e4715b51ce3f.png&#34; alt=&#34;IMG_20180408_0259427.png&#34; title=&#34;IMG_20180408_0259427.png&#34; /&gt;
折り返した緑と白の信号線、赤の電源線、マイナス端子を含めて、ケーブルタイでしっかりととめてしまいます。必須ではありませんが、これを行わない場合は、&lt;u&gt;何らかの手段で緑と白の信号線を固定する必要&lt;/u&gt;があります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/f10d37b3-ef0e-a675-9a7d-207f75d1abce.png&#34; alt=&#34;IMG_20180408_0305008.png&#34; title=&#34;IMG_20180408_0305008.png&#34; /&gt;
残りの黒の電源線は、すでに引っ張り負荷に対する軽減対策はしているので、そのまま接続してしまってもかまいません。ただし長すぎて収まりが悪くなりそうなので、もう一つの使っていないマイナス端子の中を通してから、機器のマイナス端子にはんだづけしました。&lt;/p&gt;
&lt;p&gt;ここでは、引っかける方もはんだづけする方も両方ともマイナス端子なので、間違えないように気をつけましょう。&lt;/p&gt;
&lt;p&gt;これで完成です！&lt;/p&gt;
&lt;h3 id=&#34;完成図&#34;&gt;完成図&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/d2b2a6ef-ca38-8434-a630-af0566648161.png&#34; alt=&#34;IMG_20180408_0305529.png&#34; title=&#34;IMG_20180408_0305529.png&#34; /&gt;
上から見るとこのようになっています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/5cba4304-3393-f47b-6040-2915b09ba3f1.png&#34; alt=&#34;IMG_20180408_0307141.png&#34; title=&#34;IMG_20180408_0307141.png&#34; /&gt;
V字に切り込みを入れたフタをつけたところ、ぴったりはまってくれました。&lt;strong&gt;穴が○状ではなく△のようになっていること&lt;/strong&gt;と、&lt;strong&gt;この△の内接円の径がUSBケーブルの太さよりも若干小さくなるように作ること&lt;/strong&gt;（だいたいでOK）がポイントです。&lt;/p&gt;
&lt;h2 id=&#34;動作確認&#34;&gt;動作確認&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/1ddc2159-b82b-6cda-58e3-0747da3f7555.png&#34; alt=&#34;IMG_20180408_0309439.png&#34; title=&#34;IMG_20180408_0309439.png&#34; /&gt;
早速手持ちのUSBモバイルバッテリーと接続してみましょう！&lt;/p&gt;
&lt;p&gt;ライト本体上部のスイッチを押してみます。
&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/989e2dc5-b57e-07bf-0f7c-ab3219ad6cbd.png&#34; alt=&#34;IMG_20180408_0309364.png&#34; title=&#34;IMG_20180408_0309364.png&#34; /&gt;
ちゃんと点灯してくれました！そして意外と明るく、実際に役に立ってくれそうですね。&lt;/p&gt;
&lt;p&gt;電池駆動機器は、機器本体の設計をしっかりしていないと（機器回路の負荷抵抗が非常に低いなど）、際限なく電流を流してしまう危険があります。&lt;/p&gt;
&lt;p&gt;モバイルバッテリー駆動の場合は、ショートなどの改造ミスを除くと、&lt;u&gt;バッテリー側で電流の制御をしてくれるため逆に安全で効率がよい場合があります&lt;u&gt;。&lt;/p&gt;
&lt;p&gt;もし愛用している安い電池駆動製品があり、&lt;strong&gt;持ち運ばないなど電池である必要がない場合&lt;/strong&gt;は、ぜひこの改造方法を検討してみてくださいね。&lt;/p&gt;
&lt;p&gt;&lt;font size=&#34;2&#34;&gt;※ただし、当記事を参考にした電子製品の改造は、&lt;strong&gt;あくまでも自己責任&lt;/strong&gt;にて行ってくださいますようお願いいたします。&lt;/font&gt;&lt;/p&gt;</description></item><item><title>パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#2 - 理論編</title><link>https://dotstud.io/blog/usb-power-supply-making2/</link><pubDate>Mon, 30 Apr 2018 14:00:26 +0900</pubDate><guid>https://dotstud.io/blog/usb-power-supply-making2/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当のうこ（&lt;a href=&#34;https://twitter.com/harmoniko&#34;&gt;@harmoniko&lt;/a&gt;）です。&lt;/p&gt;
&lt;p&gt;みなさんは、&lt;strong&gt;電子工作をするときの電源はどこから取っていますか？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Arduinoをよく使われる方だと5V端子や3.3V端子から取っている場合が非常に多いですが、ではArduinoを使わない、ピュアな電子工作の場合だとどうしたらいいでしょうか？&lt;/p&gt;
&lt;p&gt;第1回は、USB端子から給電可能なデバイスを作るための基礎知識を解説しました。今回は、&lt;u&gt;電池/USB電源と機器の関係について解説していきたいと思います。&lt;/u&gt;&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;151&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/151/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#1 - 基礎知識編
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-02-26
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
電子工作をする際の電源はどうしていますか？電子工作用電源として有用なUSBの基本と扱い方について紹介します！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;
&lt;h2 id=&#34;電源と機器の関係&#34;&gt;電源と機器の関係&lt;/h2&gt;
&lt;p&gt;改造を始める前に、&lt;u&gt;&lt;strong&gt;電源と機器の関係&lt;/strong&gt;&lt;/u&gt;について知っておきましょう。&lt;/p&gt;
&lt;!-- こちらはかなり理論的になるので、「ちょっと難しい」と言う方は次回の「改造編」から進めていただいても大丈夫です。
&lt;section class=&#34;link&#34; id=&#34;160&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making3/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/160/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#3 - 改造編
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-05-05
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
電子工作をする際の電源はどうしていますか？電池駆動の機器をUSB駆動に改造する方法を紹介します！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
--&gt;
&lt;p&gt;まず基本として、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;「&lt;strong&gt;電子機器&lt;/strong&gt;」の動作には「&lt;strong&gt;電流&lt;/strong&gt;」が必要である（定格電流といいます）&lt;/li&gt;
&lt;li&gt;「&lt;strong&gt;電子機器&lt;/strong&gt;」と「&lt;strong&gt;電源&lt;/strong&gt;」で構成される回路には「&lt;strong&gt;抵抗値（負荷）&lt;/strong&gt;」が存在する&lt;/li&gt;
&lt;li&gt;「&lt;strong&gt;抵抗値&lt;/strong&gt;」がある回路に、「&lt;strong&gt;電子機器&lt;/strong&gt;」が必要とする電流を流せるような「&lt;strong&gt;電圧&lt;/strong&gt;」が必要である&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上の3点を覚えておいてください。&lt;/p&gt;
&lt;h3 id=&#34;電源が電池の場合&#34;&gt;電源が電池の場合&lt;/h3&gt;
&lt;p&gt;ここでは、改造対象を「&lt;strong&gt;電池を利用する電子機器&lt;/strong&gt;」としたときの電源（＝電池）と機器の関係の説明とします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/20aa277d-f791-a33c-6249-59379787e428.png&#34; alt=&#34;1.png&#34; title=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;電池は「&lt;strong&gt;定電圧電源&lt;/strong&gt;」といい、&lt;u&gt;電圧が一定で、電流が負荷によって変動する電源&lt;/u&gt;です（厳密には負荷によって電圧は低下します）。&lt;/p&gt;
&lt;p&gt;機器が必要とする電流I（以下、定格電流I）は、上図において下記の式で表せます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I = V/(R1+R2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;つまり、定格電流Iを機器側で定めるには&lt;u&gt;機器の内部抵抗R2（＝機器全体の負荷）を調整&lt;/u&gt;すればよく、R2が十分に調整できない場合は&lt;u&gt;電池の個数を変えて電圧Vを大きくする&lt;/u&gt;ことで、R2の調整幅を変えられます。&lt;/p&gt;
&lt;p&gt;また、R2が限りなく0に近い（無負荷またはショートの）場合を考えると、R1は非常に小さい値ですが0にはならないため、電流Iは下記の式で表されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I = V/R1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは&lt;strong&gt;乾電池から取り出すことのできる最大の電流&lt;/strong&gt;です。このようなことは一時的には可能ですが、&lt;u&gt;あまりに大きいために発熱・発火などが起こることがある&lt;/u&gt;ので、機器側を適切に設計する必要があります。&lt;/p&gt;
&lt;h3 id=&#34;電源がusbの場合&#34;&gt;電源がUSBの場合&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://qiita-image-store.s3.amazonaws.com/0/116011/e736a7f5-cb9e-c881-7153-eaeffa0df369.png&#34; alt=&#34;2.png&#34; title=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;次にUSB電源を考えてみます。USB電源も同じく、5Vの「&lt;strong&gt;定電圧電源&lt;/strong&gt;」ですが、&lt;u&gt;出力可能な電流の上限値Imaxが明示的に定められています&lt;/u&gt;。このため、内部抵抗を直接考慮する必要はありません。&lt;/p&gt;
&lt;p&gt;この電流値はモバイルバッテリーの裏面などで確認することができます。&lt;/p&gt;
&lt;p&gt;このとき、機器が必要とする電流Iは、USB電源の電圧が5Vなので&lt;code&gt;V = 5&lt;/code&gt;であり、下記の式で表すことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I = 5/R2 (ただし I ≦ Imax)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;USB電源の場合は、電圧が5Vと固定されているので、&lt;u&gt;定格電流を定めるにはR2を調整するしかありません&lt;/u&gt;。ただしR2が小さかったとしても、流せる電流の最大値がImaxと決まっているため、大電流を流しすぎるといったことは起こりにくい回路となります。&lt;/p&gt;
&lt;h3 id=&#34;電池を電源とする回路を-usb電源で駆動する場合&#34;&gt;電池を電源とする回路を、USB電源で駆動する場合&lt;/h3&gt;
&lt;p&gt;例として、通常の乾電池（1.5V）を2本必要とする機器（3V動作）と、4本必要とする機器（6V動作）を考えてみます。それぞれの機器の定格電流Iは以下のようになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乾電池2本を必要とする回路：&lt;code&gt;I = 3/(R1+R2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;乾電池4本を必要とする回路：&lt;code&gt;I = 6/(R1+R2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この定格電流Iは、計算値より&lt;u&gt;大きすぎると機器の破損の原因となり、小さすぎると機器が動作しない原因となります&lt;/u&gt;が、ある程度幅がある場合が多いです。&lt;/p&gt;
&lt;p&gt;次に、この2つの回路の定格電流を左辺、USB電源が出力可能な最大電流値を右辺として比較すると、以下のようになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乾電池2本を必要とする回路：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3/(R1+R2) &amp;lt; 5/R2&lt;/code&gt; …… USB電源電流で出力可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;乾電池4本を必要とする回路：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R2 &amp;gt; Imax&lt;/code&gt;のとき：&lt;code&gt;6/(R1+R2) &amp;gt; 5/R2&lt;/code&gt; …… USB電源電流では足りない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R2 = Imax&lt;/code&gt;のとき：&lt;code&gt;6/(R1+R2) = 5/R2&lt;/code&gt; …… USB電源電流で出力可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R2 &amp;lt; Imax&lt;/code&gt;のとき：&lt;code&gt;6/(R1+R2) &amp;lt; 5/R2&lt;/code&gt; …… USB電源電流で出力可能&lt;/li&gt;
&lt;li&gt;ただし、&lt;code&gt;R1&lt;/code&gt;は非常に小さく、通常&lt;code&gt;R2 &amp;gt;&amp;gt; R1&lt;/code&gt;であるため「USB電源電流では足りない」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;答えは単純で、基本的に&lt;u&gt;電圧5V以下で動作する電池駆動電子機器はUSB電源で動作可能&lt;/u&gt;となりますが、以下の&lt;strong&gt;電流に関する条件&lt;/strong&gt;で動作要件が細かく変化します。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;case&#34;&gt;
&lt;p&gt;CASE1&lt;/p&gt;
&lt;/div&gt;
USB電源は電流Imaxを上限とした定電圧電源のため、&lt;strong&gt;機器の定格電流の上限が電流Imaxより大きければ、動作電圧が5V以下の電池を電源とする機器にUSB電源を直接接続することが可能&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;具体的な例だと、乾電池3本（4.5V）を必要とする機器は、大抵はそのまま動作させることができます。しかし、乾電池2本（3V）以下だと定格オーバーとなることが多く、レギュレータという部品を使って電圧を降下させることで動作が可能となります。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;case&#34;&gt;
&lt;p&gt;CASE2&lt;/p&gt;
&lt;/div&gt;
&lt;strong&gt;機器の定格電流の下限が電流Imaxより小さければ、動作電圧が5V以上の電池を電源とする機器にUSB電源を直接駆動させることが可能&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;そもそもR2が5V以上の入力で定格電流を流せるような設計となっていることが多いため、電源に十分な電流を流す能力があっても、電圧が低いと機器内部で定格電流を満たせずに動作ができないことが多いです。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;case&#34;&gt;
&lt;p&gt;CASE3&lt;/p&gt;
&lt;/div&gt;
フェイルセーフ（定格を上回ると危険だが定格未満では安全上は問題がない）の観点から、多少定格を超えての動作は可能にしても、定格に満たなければ動作しなくても仕方がない、という設計になっていることがあります。このような機器は、&lt;strong&gt;機器の定格電流の上限が電流Imaxより大きい場合に動作可能&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;case&#34;&gt;
&lt;p&gt;CASE4&lt;/p&gt;
&lt;/div&gt;
ニッケル水素電池などの2次電池4本（1.2V*4 = 4.8V）で動作する機器は、5V以下であるためUSB電源でも利用可能ですが、大きめの電流を必要とする特性であるため、&lt;strong&gt;Imaxが低い（500mAなど）と動作しない&lt;/strong&gt;ことがあります。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;case&#34;&gt;
&lt;p&gt;CASE5&lt;/p&gt;
&lt;/div&gt;
乾電池4本（6V）が必要な機器でも、実際には負荷によって電圧が低下し、5V程度で動作していることがあります。また、そのような電圧低下を見越して、電圧が低めでも動作するように設計されている機器もあります。このため、&lt;strong&gt;乾電池で5Vを超える電圧を必要とする機器であっても、USB電源で動作可能なものは多い&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;電子機器は、基本的な設計として&lt;u&gt;供給電圧は一定のまま、動作状況によって内部抵抗（負荷）が変化するので必要な電流も変化する&lt;/u&gt;ような仕組みとなっています。つまり、&lt;strong&gt;電源が供給可能な電流範囲内に機器の求める電流（定格電流）があれば動作可能&lt;/strong&gt;なので、電圧が多少違っていても動作自体は可能であるということになります。逆の言い方をすると、&lt;strong&gt;電子機器はある一定電圧のもとで最適なパフォーマンスを発揮できるように設計されている&lt;/strong&gt;ということになります。&lt;/p&gt;
&lt;h2 id=&#34;具体的にどんなものが改造できる&#34;&gt;具体的にどんなものが改造できる？？&lt;/h2&gt;
&lt;p&gt;ややこしく理論的なものを解説してしまいましたが、基本的には&lt;strong&gt;乾電池で動く電子機器で、必要な電池の個数が1〜4個のもの&lt;/strong&gt;であれば大抵動作します。&lt;/p&gt;
&lt;p&gt;ただし、ライトのようにLEDだけを使う電子機器と、モーターを用いる扇風機のように大電流を必要とする電子機器とでは、元々想定されている電池の個数によって&lt;u&gt;USB電源で動作可能なものとそうでないものに分かれます。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;また、USB電源をPCからとる際は、過電流などによる故障に十分注意して行ってください。&lt;/p&gt;
&lt;p&gt;実際に僕がUSB化改造をしてみたもののうち、「LED・電球」を用いる電子機器と、電流が多く必要な「モーター・ヒーター」などを用いる電子機器とに分けて、動作が可能だったものを以下の表に示します。&lt;/p&gt;
&lt;p&gt;○：USB(モバイルバッテリー)から直接給電可能&lt;br /&gt;
△：レギュレータを使用して電圧調整が必要&lt;br /&gt;
ー：未検証&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;必要電圧 / 駆動対象&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;LED・電球&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;モーター・ヒーター&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1.5V（乾電池1本）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3.0V（乾電池2本）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;△&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;◯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4.5V（乾電池3本）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;◯&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;6.0V（乾電池4本）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;乾電池4本を必要とする機器は正常に動作しない可能性が高く、動作してもパフォーマンスが低下（ライトが暗めであるなど）する場合がほとんどだと考えられます。&lt;/p&gt;
&lt;p&gt;また、製品によって定格電流の値や幅が異なるため、すべての機器でこのように動作するという保証はありません。予めご了承ください。&lt;/p&gt;
&lt;p&gt;さて、電源と機器の関係がわかったらいよいよ次回は改造していきます！&lt;/p&gt;
&lt;!--
&lt;section class=&#34;link&#34; id=&#34;160&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making3/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/160/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#3 - 改造編
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-05-05
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
電子工作をする際の電源はどうしていますか？電池駆動の機器をUSB駆動に改造する方法を紹介します！
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
--&gt;
&lt;style&gt;
.case {
padding: 0.5em 1em;
margin: 2em 0;
color: #474747;
background: whitesmoke;/*背景色*/
border-left: double 7px #ffc06e;/*左線*/
border-right: double 7px #ffc06e;/*右線*/
}
.case p {
margin: 0;
padding: 0;
}
&lt;/style&gt;</description></item><item><title>パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#1 - 基礎知識編</title><link>https://dotstud.io/blog/usb-power-supply-making/</link><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/usb-power-supply-making/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当のうこ(&lt;a href=&#34;https://twitter.com/harmoniko&#34;&gt;@harmoniko&lt;/a&gt;)です。&lt;/p&gt;
&lt;p&gt;みなさんは、&lt;strong&gt;電子工作をするときの電源はどこから取っていますか？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Arduinoをよく使われる方だと5V端子や3.3V端子から取っている場合が非常に多いですが、ではArduinoを使わない、ピュアな電子工作の場合だとどうしたらいいでしょうか？&lt;/p&gt;
&lt;p&gt;今回は、電子工作用電源としても非常に有用な&lt;strong&gt;USBの基本と扱い方&lt;/strong&gt;についてお伝えします。&lt;/p&gt;
&lt;h2 id=&#34;usbのしくみ&#34;&gt;USBのしくみ&lt;/h2&gt;
&lt;p&gt;「&lt;strong&gt;USB&lt;/strong&gt;」は「&lt;strong&gt;Universal Serial Bus&lt;/strong&gt;」の略で、PCとその周辺機器の間の汎用的な通信規格として1996年に登場しました。USBは1対2本の信号線（※）で順番にデータを送る「&lt;strong&gt;シリアル接続&lt;/strong&gt;」という方式で、複数のデバイスを吊り下げられる「&lt;strong&gt;バス規格&lt;/strong&gt;」の1つです。&lt;/p&gt;
&lt;p&gt;※…USB 2.0まで&lt;/p&gt;
&lt;p&gt;端子は従来のものと比べてシンプルになり、ホストとデバイスをすぐに区別できるようなものになりました。&lt;/p&gt;
&lt;p&gt;USBを使って通信をするには、USBを制御する専用のコントローラハードウェアが必要となるため、電子工作では少し難易度があがります。ただし、&lt;strong&gt;電源を使うだけならケーブルを切って電源のVcc線（+）とGnd線（-）を引き出すだけでよい&lt;/strong&gt;ので、スマホが普及しはじめるよりも早くから電源用ケーブルとしても使われるようになりました。&lt;/p&gt;
&lt;p&gt;USBの簡単な特徴をまとめると、以下のようになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信は、 1つの「ホスト」（PC側）と1〜複数の「デバイス」（周辺機器側）との間で行われる。&lt;/li&gt;
&lt;li&gt;ホスト側とデバイス側で端子形状が区別されている（タイプC端子を除く）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;電源供給用のケーブルおよび端子として使うなら扱いは簡単！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ここ数年普及してきている「USB PD」は、大電力の供給が可能でMacBookの給電などにも利用されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さて当記事は、 &lt;strong&gt;「電子工作において電源として気軽に使えるUSB」&lt;/strong&gt; を知っていただくためのものですので、扱いの簡単な「USB2.0規格（タイプC端子を除く）」までを使う前提の説明にとどめます。&lt;/p&gt;
&lt;p&gt;USB3.0規格以降は端子が増えたり電源規格が多様になったりしているため、電子工作での利用であれば、USB2.0規格までの理解で問題ありません。&lt;/p&gt;
&lt;p&gt;さらに詳しくUSBについて知りたい方は、以下のリンクを参考にしてください。&lt;/p&gt;
&lt;p&gt;⇒ 参考: &lt;a href=&#34;https://thinkit.co.jp/article/11142&#34;&gt;現代PCの基礎知識(7):仕様書を紐解くとわかる―本当はややこしいUSB（Think IT）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;電源に使うことのメリット&#34;&gt;電源に使うことのメリット&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;モバイルバッテリー、PC、コンセントアダプタなど、多彩なソースが選べる。&lt;/li&gt;
&lt;li&gt;給電方法に汎用性があるため、必要なパーツが安くて手に入りやすい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;電源に使うことのデメリット&#34;&gt;電源に使うことのデメリット&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;「外部電源」となるため、電池として本体に含めることができない。&lt;/li&gt;
&lt;li&gt;規格上、5V電圧以外を扱うときや大電流が必要なものには適さない（USB PDを除く）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;仕様の一覧&#34;&gt;仕様の一覧&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;USB 1.0&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;USB 1.1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;USB 2.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;端子タイプ（ホスト側）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;標準A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;標準A&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;標準A, タイプC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;端子タイプ（デバイス側）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ミニA, マイクロA, ミニB, マイクロB, タイプC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;通信速度&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12Mビット/秒&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12Mビット/秒&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;480Mビット/秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;定格電圧&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;同右&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;同右&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;約5V（ホスト側4.4~5.25V）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;最大電流&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;500mA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;500mA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;500mA（USB BC拡張:1.5A）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上は通信に関する基本的なバージョン仕様ですが、さらにUSB2.0を拡張したUSB電源専用規格である「USB BC（Battery Charging）」というものがあり、1.5Aまでの電流を流すことが可能となっています。&lt;/p&gt;
&lt;p&gt;また、電子工作で利用するためのUSBパーツは100円ショップなどで購入できます。&lt;strong&gt;100円ショップなどで安価に入手可能なUSBパーツはほぼ100%がUSB2.0規格またはUSB BC規格のもの&lt;/strong&gt;となります。&lt;/p&gt;
&lt;p&gt;よって、電子工作の&lt;strong&gt;電源として&lt;/strong&gt;USBを使ってみたいときは&lt;strong&gt;USB2.0規格またはUSB BC規格&lt;/strong&gt;に準じたUSB部品の仕様を知っておけばOKです。&lt;/p&gt;
&lt;h2 id=&#34;usbケーブルの配線図&#34;&gt;USBケーブルの配線図&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/151/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;USB2.0には、電源線の5V（VccやVBUSとも）とGND、信号線のD-とD+の合計4種類の線があります。ケーブルのほとんどは2層構造になっていて、内側に収められている4本の線の色分けも上図のように決まっています。&lt;/p&gt;
&lt;p&gt;電子工作でUSBを使うときは、「標準Aメス端子を基板に実装する」か、上図のような「標準Aオス端子がついたケーブルの電源線を接続する」ことになるので、端子の順番や色分けは覚えておくと楽です。&lt;/p&gt;
&lt;h2 id=&#34;電圧と電流&#34;&gt;電圧と電流&lt;/h2&gt;
&lt;p&gt;USB電源の基本は「&lt;strong&gt;電圧5V/電流500mAまで&lt;/strong&gt;」です。&lt;/p&gt;
&lt;p&gt;といっても、これはパソコンのような「電源供給」を主目的としないホストから給電する場合の「USB2.0規格」による制限値です。&lt;/p&gt;
&lt;p&gt;電子工作でUSB電源を扱う場合は、モバイルバッテリーやUSBコンセントなどからの給電がほとんどになると思われます。その場合は、USB BC規格の上限値である1.5Aとなりますが、普通はバッテリーやコンセントに最大出力が書いてあります（例：5V/800mA）ので、電流値の最大はそれに従いましょう。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&#34;usbケーブルの注意点&#34;&gt;USBケーブルの注意点&lt;/h4&gt;
&lt;p style=&#34;font-size: 80%&#34;&gt;細かい話をすると、市場で出回る多くの充電器は「最大2.4A出力」などを謳っていて、この場合だとUSB BC規格にもあてはまりません。このような製品は、USBを通信を行わない完全な電源ケーブルとみなし、独自の規格を採用している場合が多いです。よって、電子工作でUSB電源を使うときは、「USB2.0規格の配線」と「使いたい電源供給源（バッテリーやコンセント等）の出力電流」を考慮して回路設計をするのがベストだといえます。難しく考えたくない人は、 **とにかく省エネになるように意識して作る**ようにするのがよいでしょう。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-size: 80%&#34;&gt;⇒ 参考: &lt;a href=&#34;https://hanpenblog.com/1472/&#34;&gt;乱立するスマホ向け急速充電の規格について調べた（HANPEN-BLOG）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;電子工作での利用を考えると電流消費を見ることが大事で、個人で製作する小規模な回路であればほとんどが500mA以内に収まることが多いです。&lt;/p&gt;
&lt;p&gt;ヒーターやモーターを使った回路は例外的で、接続された個数や負荷で変動しますが、最大電流が容易に1Aを超えてしまうことがあります。しかし、どのような場合であっても、個人製作された電子回路は漏電流やショートへの配慮、適切な電流制限などが行われていないことが大半です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本的には、USB電源を利用する自作の電子回路は、安全上の理由からパソコンに接続して給電してはいけません。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;⇒ 参考：&lt;a href=&#34;http://www.wheel.gr.jp/~dai/hardware/usb-port.html&#34;&gt;USBポートは電源ではありません&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;現実には今のパソコンは全て保護回路が入っているため、ブレッドボードを繋げたArduinoにパソコンから給電するといったようなことを行なっていてもまず問題はありません。しかし&lt;strong&gt;危険性は少なからずあるもの&lt;/strong&gt;だとして意識してもらえれば幸いです。&lt;/p&gt;
&lt;p&gt;（15年ほど前のパソコンでは、USB端子に500mA以上の過電流を流すといきなりパソコンの電源ごと落ちるものもありました。）&lt;/p&gt;
&lt;h2 id=&#34;入手方法&#34;&gt;入手方法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;おすすめは100円ショップ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/151/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;100円ショップの電気系コーナーに行くと、どこに行っても大抵はUSBケーブルが置いてあります。USBケーブルの中でも取り扱いが多いのは、おそらく次の3つでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aオス端子-microBオス端子（スマホ充電用）&lt;/li&gt;
&lt;li&gt;Aオス端子-Bオス端子（プリンタなどの接続用）&lt;/li&gt;
&lt;li&gt;Aオス端子-Aメス端子（ケーブル延長用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このうち、最後の &lt;strong&gt;Aオス端子-Aメス端子（ケーブル延長用）&lt;/strong&gt; は、置いていない店舗もありますが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ケーブル部分が比較的長い。&lt;/li&gt;
&lt;li&gt;基本的にはAオス端子側を使うが、工作の内容によってはAメス端子があると便利なことがある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった点から、電子工作で利用するには最もおすすめなケーブルとなっています。売られているのを発見したら、ぜひ買っておきましょう。&lt;/p&gt;
&lt;h2 id=&#34;実際に電子工作で使うには&#34;&gt;実際に電子工作で使うには&lt;/h2&gt;
&lt;p&gt;USBについて、どんなものなのかなんとなくおわかりいただけましたでしょうか？&lt;/p&gt;
&lt;p&gt;とりあえず要約すると、 &lt;strong&gt;「100円で手に入って電子工作で簡単に利用できる汎用電源インターフェース」&lt;/strong&gt; といったところでしょうか。では、実際に使うにはどうすればいいかを見ていきましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/151/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;USBケーブルを電源として利用する上で最も重要なパーツが「Aオス端子」部分となります。&lt;/p&gt;
&lt;p&gt;100円ショップで購入できるUSBケーブルは少なくとも一方がこの端子ですので、この端子から伸びるケーブルを十分長く残したうえでニッパで切断します。長さは、製作するモノによって適切に決めてください。あとから調整できるという意味では長めに切り取るのがよいでしょう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/151/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/151/5.png&#34; alt=&#34;&#34; /&gt;
切り取った部分の一番外側の皮膜をニッパまたは皮膜剥き用のニッパで1cm程度除去します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/151/6.png&#34; alt=&#34;&#34; /&gt;
すると細い4本のケーブルが中から出てきますが、このうち赤色と黒色がそれぞれ電源となります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/151/7.png&#34; alt=&#34;&#34; /&gt;
残りの2本は信号線で、&lt;del&gt;USB BC規格として大きめの電流を流したい場合は、この信号線を200Ωの抵抗でショートします。が、実際には何もしなくても給電はなされます。&lt;/del&gt;ここでは簡単にするため切り落としました。&lt;/p&gt;
&lt;p style=&#34;font-size: 80%; color: red;&#34;&gt;
（3/4 修正）200Ωの抵抗を接続するのは充電器側であるとのご指摘をいただき、上記訂正します。
&lt;/p&gt;
&lt;p style=&#34;font-size: 80%;&#34;&gt;
⇒ 出展: USB.orgの&lt;a href =&#34;http://www.usb.org/developers/docs/devclass_docs/&#34;&gt;開発者向けドキュメント&lt;/a&gt;にある「Battery Charging v1.2 Spec and Adopters Agreement.zip」内のBC1.2_FINAL.pdf「Battery Charging Specification, Revision 1.2」3.2.4項「Primary Detection」のFigure 3-6 など）
&lt;/p&gt;
&lt;p&gt;これで、Aオス端子が電源側、切断したほうが電子回路側となります。&lt;/p&gt;
&lt;p&gt;さて、次回は電池駆動の機器をUSB駆動に改造するために、電源と機器の関係について考えてみたいと思います。&lt;/p&gt;
&lt;p&gt;お楽しみに。&lt;/p&gt;
&lt;section class=&#34;link&#34; id=&#34;159&#34;&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;a href=&#34;https://dotstud.io/blog/usb-power-supply-making2/&#34;&gt;&lt;/a&gt;
&lt;img src=&#34;https://dotstud.io/img/blog/159/00_thumbnail.png&#34; alt=&#34;サムネイル&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;link_content&#34;&gt;
&lt;div class=&#34;link_detail&#34;&gt;
&lt;div class=&#34;link_title&#34;&gt;
パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#2 - 理論編
&lt;/div&gt;
&lt;div class=&#34;link_date&#34;&gt;
2018-04-30
&lt;/div&gt;
&lt;div class=&#34;link_desc&#34;&gt;
電子工作をする際の電源はどうしていますか？電池駆動の機器をUSB駆動に改造するために、電源と機器の関係を解説していきます。
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;/section&gt;&lt;/p&gt;</description></item><item><title>フォトダイオードでリモコンの信号を検出してみよう</title><link>https://dotstud.io/blog/photodiode-remote-controll-signal/</link><pubDate>Wed, 02 Aug 2017 16:42:19 +0900</pubDate><guid>https://dotstud.io/blog/photodiode-remote-controll-signal/</guid><description>
&lt;p&gt;こんにちは、ものづくり担当のうこ（&lt;a href=&#34;https://twitter.com/harmoniko/&#34;&gt;@harmoniko&lt;/a&gt;）です。&lt;/p&gt;
&lt;p&gt;今回は、フォトダイオードというパーツを使ってリモコンの信号を読み取る方法を紹介します！&lt;/p&gt;
&lt;h2 id=&#34;フォトダイオードとは&#34;&gt;フォトダイオードとは？&lt;/h2&gt;
&lt;p&gt;半導体素子のひとつで、照射される光の強さによって流れる電流の強さが変化します。太陽光パネルと仕組みはほとんど同じで、光によって電流を発生しますが、非常に小さいため電源としては使用されません。&lt;/p&gt;
&lt;p&gt;一口にフォトダイオードと言っても様々な種類があります。光を検出するセンサとしてはほかにCdSなどがありますが、応答の速さ・感度・信号強度特性・対応する波長などに優位性があり、リモコンの受光器などとして産業用途に幅広く利用されています。&lt;/p&gt;
&lt;p&gt;今回はそんなリモコンの受光器を作り、信号の中身をみてみましょう。&lt;/p&gt;
&lt;h2 id=&#34;リモコンの仕組み&#34;&gt;リモコンの仕組み&lt;/h2&gt;
&lt;p&gt;リモコンは、赤外線LEDを高速で点滅させて家電などに信号を送っています。信号の中身は、国内ではNECが開発した方式が主流で、次いで家電製品協会の方式、ソニーなどの独自方式があります。今回は、最も普及しているNEC方式を用いたリモコン信号検出システムを作ってみます。&lt;/p&gt;
&lt;p&gt;このフォーマットを採用している主なメーカーとして、NEC・東芝・日立などがあります。これらのメーカーのリモコンなどをお持ちでしたら、ぜひ作ってみてください。&lt;/p&gt;
&lt;p&gt;【参考】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.asahi-net.or.jp/~gt3n-tnk/IR_TX1.html&#34;&gt;赤外線リモコンのフォーマット&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;作ってみよう&#34;&gt;作ってみよう&lt;/h2&gt;
&lt;h3 id=&#34;準備するもの&#34;&gt;準備するもの&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/117/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arduino Due × 1&lt;/li&gt;
&lt;li&gt;ブレッドボード × 1&lt;/li&gt;
&lt;li&gt;抵抗1kΩ × 1&lt;/li&gt;
&lt;li&gt;フォトダイオード S5971 × 1&lt;/li&gt;
&lt;li&gt;ジャンパワイヤ × 4&lt;/li&gt;
&lt;li&gt;黒画用紙(3cm×6cmぐらい)&lt;/li&gt;
&lt;li&gt;USBマイクロBケーブル&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;作り方&#34;&gt;作り方&lt;/h3&gt;
&lt;h4 id=&#34;フォトダイオードに黒画用紙を巻く&#34;&gt;フォトダイオードに黒画用紙を巻く&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/117/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/117/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;フォトダイオードには、細長く切った黒画用紙を巻き寿司のように巻きつけてテープで固定します。こうすることでフォトダイオードを常に暗い状態にし、光の誤検出を防ぎます。&lt;/p&gt;
&lt;h4 id=&#34;配線&#34;&gt;配線&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/117/4.png&#34; alt=&#34;&#34; /&gt;
まずはじめに、ブレッドボード上に抵抗器とフォトダイオードを、上の写真のように配置します。フォトダイオードは向きに注意してください。
&lt;img src=&#34;https://dotstud.io/img/blog/117/5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;次に、4つのジャンパワイヤを使って、ブレッドボードとArduino Dueを接続します。
&lt;img src=&#34;https://dotstud.io/img/blog/117/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接続が終わったら、このような感じになっています。
&lt;img src=&#34;https://dotstud.io/img/blog/117/7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最後に、USBのマイクロBケーブルでArduino Dueとパソコンを接続して完了です。USBは、Arduino Due側は、黒いコネクタに近い方のUSBポート「Programming Port」に接続してください。&lt;/p&gt;
&lt;h3 id=&#34;arduino-dueボード対応化&#34;&gt;Arduino Dueボード対応化&lt;/h3&gt;
&lt;p&gt;Arduino IDEでプログラムを作成し書き込んでいきます。Arduino IDEのインストールが済んでいない方は、&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34;&gt;公式サイト&lt;/a&gt;からダウンロードして進めてください。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/117/8.png&#34; alt=&#34;&#34; /&gt;
Arduino IDEのメニューから、
Tools -&amp;gt; Boards:&amp;ldquo;&amp;hellip;&amp;rdquo; -&amp;gt; Board Manager&amp;hellip;
を選択すると、小さい画面が表示されます。検索窓に「due」と打ち込むと、ひとつだけヒットするパッケージがありますので、最新版をインストールしてください。&lt;/p&gt;
&lt;p&gt;次に、
Tools -&amp;gt; Boards&amp;rdquo;&amp;hellip;&amp;rdquo;
で、&amp;rdquo;Arduino Due (Programming Port)&amp;ldquo;を選択しておきます。&lt;/p&gt;
&lt;h3 id=&#34;ソースコードを書き込む&#34;&gt;ソースコードを書き込む&lt;/h3&gt;
&lt;p&gt;以下のソースコードをコピーし、スケッチにコピーしてください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const int thresholdH = 30; // フォトダイオードの閾値(Off-&amp;gt;On)
const int thresholdL = 20; // フォトダイオードの閾値(On-&amp;gt;Off)
const int input = A0; // フォトダイオードの入力ピン
int signalCnt = -1; // 信号カウンタ
int level = 0; // フォトダイオードのanalogRead値
unsigned long offSpan; // 信号L値持続時間(計測用)
unsigned long offTime; // 信号Off時間(計測用)
unsigned long startTime; // 時間計算用
unsigned long signals = 0; // 信号保存(カスタム16bit+データ8bit+反転データ8bit)
bool now = false; // フォトダイオード状態遷移フラグ1
bool prev = false; // フォトダイオード状態遷移フラグ2
bool detected = false; // リーダコード検出フラグ
// フォトダイオードからアナログ値を読んで論理値に変換
bool photoRead() {
level = analogRead(input);
if (level &amp;gt; thresholdH) return true;
if (level &amp;lt; thresholdL) return false;
}
// リーダコード認識
bool leaderDetect() {
// 積分
unsigned long integral0 = 0;
unsigned long integral1 = 0;
startTime = micros();
// 9msループ(0.1msおまけ)
while (micros() &amp;lt; (startTime+9100)) {
if (photoRead()) integral1++;
else integral0++;
}
/*
副搬送波38kHz変調のデューティ比は1:2である
また信号で0を表す場合はPPM方式によりHとLがそれぞれ0.56ms(1:1)であるため
リーダコード以外の部分でフォトダイオードで得られるOnとOffの時間比は
Onが1に対してOffが6である
リーダコード部分は常にHであるのでOnが1に対してOffが3である
よってOnとOffの差がおおむね4倍以下であればリーダコードを判定することができる
*/
if (integral1 &amp;gt; ((integral0)/4)) return true;
else return false;
}
void setup() {
// シリアルポートを開く
Serial.begin(115200);
// アナログ入力の細かさを12bit(4096段階)に設定
analogReadResolution(12);
}
void loop() {
// ダイオードの状態確認ループ
while(now == prev) {
now = photoRead();
// 一度検出できたらループを極力回さずにディレイさせたい
// 副搬送波のL値を誤検出しないようにするため
if (now) {
if (!detected) {
// Off-&amp;gt;On遷移かつリーダコード未検出
if (leaderDetect()) {
Serial.println(&amp;quot;------- LEADER -------&amp;quot;);
detected = true;
signalCnt = -1;
}
}
}
}
// 以下は状態変化した瞬間だけ実行される
//
if (detected) {
if (now) {
// Off-&amp;gt;On遷移かつリーダコード検出済
offSpan = micros() - offTime;
// 最初のリーダコードの直後のL値
if (signalCnt &amp;lt; 0) {
// リピートの検出(3ms未満)
if (offSpan &amp;lt; 3000) {
Serial.println(&amp;quot;------- REPEAT -------&amp;quot;);
Serial.println(&amp;quot;&amp;quot;);
signals = 0;
signalCnt = -1;
detected = false;
} else {
signalCnt++;
}
} else {
// off時間が1000msより多いか少ないか
if (offSpan &amp;lt; 1000) {
// 1判定
signals += 1&amp;lt;&amp;lt;(31-signalCnt);
} else {
// 0判定
}
signalCnt++;
}
// 570msも待てば必ずLになり次のコード先頭までHにならないので誤検出しない
delayMicroseconds(570);
} else {
// On-&amp;gt;Off遷移かつリーダコード検出済
offTime = micros();
}
}
// 反転
prev = now;
// 最後まで読めたら表示する
if (signalCnt &amp;gt;= 31) {
// カスタムコード16bit
int custom = (int)(signals&amp;gt;&amp;gt;16);
Serial.print(&amp;quot;Custom code: &amp;quot;); Serial.println(custom,HEX);
Serial.print(&amp;quot; &amp;quot;); Serial.println(custom,BIN);
// データコード8bit
byte data1 = (byte)((signals&amp;gt;&amp;gt;8)&amp;amp;B11111111);
Serial.println(&amp;quot;Data code:&amp;quot;);
Serial.print(&amp;quot; &amp;quot;); Serial.print(data1,BIN); Serial.print(&amp;quot; = &amp;quot;); Serial.println(data1,HEX);
// データコード(反転)8bit
byte data2 = (byte)(signals&amp;amp;B11111111);
Serial.print(&amp;quot; &amp;quot;); Serial.print(data2,BIN); Serial.print(&amp;quot; = &amp;quot;); Serial.println(data2,HEX);
// データ検証
byte vf = data1^data2;
Serial.println(&amp;quot;Data verify: &amp;quot;);
Serial.print(&amp;quot; &amp;quot;); Serial.print(data1,HEX); Serial.print(&amp;quot; xor &amp;quot;); Serial.print(data2,HEX); Serial.print(&amp;quot; = &amp;quot;); Serial.println(vf,HEX);
if (vf == 0xFF) Serial.println(&amp;quot; [ VERIFIED ]&amp;quot;);
else Serial.println(&amp;quot; [ ERROR ]&amp;quot;);
// おわり
Serial.println(&amp;quot;------- ------ -------&amp;quot;);
Serial.println(&amp;quot;&amp;quot;);
signals = 0;
signalCnt = -1;
detected = false;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;試してみよう&#34;&gt;試してみよう&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/117/9.png&#34; alt=&#34;&#34; /&gt;
アップロードが完了したら、Tools -&amp;gt; Serial Monitor からシリアルモニタを表示させ、通信速度を「115200bps」に変更します。その状態のまま、リモコンをフォトダイオードに近づけてボタンを押すと……&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/117/10.png&#34; alt=&#34;&#34; /&gt;
いくつか値が表示されましたね！
点線で囲まれたブロックが信号の1セットで、中身には「Custom code」「Data code」「Data verify」が入っています。
「Custom code」は製品固有のコードで、同じリモコンだと基本的に固定の値です。&lt;/p&gt;
&lt;p&gt;色々ボタンを押していると、「Data code」が変化するようすがわかります。「Data verify」は、信号に含まれている2つのデータを照合して、信号が壊れていないかを確認するためのものです。
&lt;img src=&#34;https://dotstud.io/img/blog/117/11.png&#34; alt=&#34;&#34; /&gt;
自宅の扇風機のリモコンで試してみたところ、確かにボタンで値が変わっていることがわかりました。&lt;/p&gt;
&lt;h2 id=&#34;応用編&#34;&gt;応用編&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/117/12.png&#34; alt=&#34;&#34; /&gt;
Arduino IDEには「シリアルプロッタ」という、グラフを描画できる機能が備わっています。それを利用して、リモコンの信号波形を描画してみるとこんな感じになりました。規則的な波形をところどころに確認することができます。&lt;/p&gt;
&lt;p&gt;また、今回使用したマイコンボード「Arduino Due」は、USB接続の外付けマウス・外付けキーボードとして簡単に動作させることができるライブラリが備わっています。例えば、今回のプログラムにこの機能を取り入れて少し書き換えるだけで、普段使っているTVリモコンでパソコンの動画プレイヤーを制御、なんてこともすぐにできちゃいます。&lt;/p&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;いかがでしたでしょうか？
フォトダイオードはいろんな種類がありますが、Arduinoのようなマイコンボードを使えば意外と簡単に光センサを作ることができます。この機会にぜひ作ってみては。&lt;/p&gt;</description></item></channel></rss>