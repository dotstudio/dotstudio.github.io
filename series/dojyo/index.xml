<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dojyo on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/dojyo/</link><description>Recent content in dojyo on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Tue, 17 Sep 2019 00:00:00 +0900</lastBuildDate><atom:link href="/series/dojyo/" rel="self" type="application/rss+xml"/><item><title>可愛いあの子のペットになりたい！！SkyWayロボットで挑戦してみた</title><link>https://dotstud.io/blog/pet-of-cutegirl-skyway/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/pet-of-cutegirl-skyway/</guid><description>&lt;p>〜　ある夏の昼下がり、自給力は悩んでいた　〜&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="skyway">SkyWayロボットでペットの気持ちになれる！？&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>🎵　テレテテッテテ〜　🎵&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>SkyWayロボットの作り方は↓&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">実際に女の子に頼んでみよう！&lt;/h2>
&lt;p>ロボットができて数分後……　&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-1">ペットになるとこんな気分になれる！？&lt;/h2>
&lt;p>①ペットとして一緒に遊んだり&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>②ペットとしてソファで一緒にテレビを見たり&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>③ペットとして抱っこされてみたり&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;em>&lt;strong>こんな夢のような時間が過ごせるのです　
by 自給力&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="heading-2">夢を叶えた男の次なる野望&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>おしまい&lt;/p>
&lt;h2 id="heading-3">あなたは何を作りますか？&lt;/h2>
&lt;p>SkyWayロボットを使えば、ペットになりたいという悩みだけでなく、自宅監視から茶運びマシーンまで、アイデア次第で何でも作ることができます。&lt;br>
気になった方はぜひチャレンジしてみてくださいね！&lt;/p>
&lt;p>SkyWayロボットの作り方は↓&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;/blockquote></description></item><item><title>今年の夏休みは最新技術で工作しよう！　〜Webブラウザから操作できる「SkyWayロボット」の作り方〜</title><link>https://dotstud.io/blog/lets-make-webrtc-robot/</link><pubDate>Sat, 03 Aug 2019 00:00:00 +0900</pubDate><guid>https://dotstud.io/blog/lets-make-webrtc-robot/</guid><description>&lt;p>こんにちは、ものづくり担当のうこ(&lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a>)です。&lt;br>
連日猛暑が続きますが、暑さに負けず、ものづくりやってますかー？&lt;br>
今回は、WebRTCを用いたサービスの1つである&lt;a href="https://webrtc.ecl.ntt.com/">SkyWay&lt;/a>を利用した、遠隔操作可能でカメラの映像も見れちゃうロボットの作り方を解説します。&lt;br>
また、実際のラジコンは、&lt;a href="https://makezine.jp/event/makers-mft2019/skyway/">Maker Faire Tokyo 2019のSkyWayブース&lt;/a>にてデモ展示されます。&lt;br>
少し難しいところもありますが、ぜひチャレンジしてみてください！&lt;/p>
&lt;h2 id="heading">必要な部品&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こちらのパーツ類をそれぞれ購入して揃えましょう。1〜4番はタミヤの製品です。5〜7番はホームセンター等で入手できます。右下の小さい部品は以下を参照してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>8番の銅線の長さは、9番のラズパイ用カメラのフラットケーブルと同じくらいの長さでよいです。10番はWaveShareという会社の製品で、1500〜2000円前後で通販などでも入手できます。12番のセメント抵抗は、秋葉原のパーツ屋さんなどでないと入手しにくいかもしれません。13番のマイクロSDカードは4GB以上のものであれば何でもかまいません。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>製作に必要な工具類がこちらです。はんだごてはあってもなくても作れますが、100円ショップでも手に入るのでできるだけあったほうがいいでしょう。&lt;/p>
&lt;h2 id="heading-1">組み立て&lt;/h2>
&lt;h3 id="heading-2">車体本体&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>部品のうち、1〜3番は中に説明書が入っているため、まずそれを読みながらそれぞれ組み立てます。1番のボールキャスターは「高さ35mm」で作成、3番のツインモーターギヤボックスは「低速タイプ」で作成してください。ギヤボックスは、小さな輪っかのようなものが部品として余りますので、2つは捨てずに置いておいてください。後ほど「スペーサー」として利用します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>モーターを一度ギヤボックスから抜き、8番の銅線をそれぞれモーター端子に接続します。はんだごてがない場合は、多めに皮膜をむいてよく巻きつけるようにしましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>モーターをギヤボックスに戻し、タイヤをギヤボックスのシャフトに差し込みます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>4番のユニバーサルプレートセットを取り出し、一番大きな部材の短辺に近い一部分（上図参考、端から穴一つぶん空けて内側）をニッパで切り取って複数の穴を連結させます。これをスリットと呼びます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>先ほど切り取ったスリットの上あたりに、スリットを隠さないようにして、ユニバーサルプレートセット内にある「軸受け」を付属のネジとナットを使って上図のように固定してください。本来は、これはシャフトを通したりするのに使うパーツですが、今回はカメラを設置するためのパーツとして転用しています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ユニバーサルプレートの軸受けをつけていない面に、タイヤをつけたギヤボックスとボールキャスターをネジとナットで固定します。ネジの位置は上図をよく見て同じ位置に留めてください。ボールキャスターはネジ穴が4つありますが、留めるのは2点だけで問題ありません。&lt;/p>
&lt;h3 id="raspberry-pi">電源とRaspberry Piの取り付け&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>5〜7番をまとめて1つにして、バッテリーボックスを作ります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>12番のセメント抵抗2本の脚部分を短めに切り、10番のMotor Driver HATの「MA1」端子と「MB1」端子にそれぞれ片方の脚ずつ挿入します（図はMA1のみ挿入しているところです）。マイナスドライバーを使って端子を締め込み、外れないよう固定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>次に11番のRaspberry Pi 3 B+（以下ラズパイ）を手に持ち、マイクロSDカードスロットがある短辺をこちらに向けます。その状態で、両端にあるネジ穴にギヤボックスの余り部品であるネジと、あらかじめ確保しておいたスペーサーを図のように差し込みます。固い場合があるので、その際はドライバーで回しながら差し込んでください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>車体本体に、ネジ2つがついたラズパイを設置します。図を参考にして、ユニバーサルプレート先端部分が穴2つぶんのスペースが空くようにラズパイを置き、ネジをプレートの穴にはめ込んでください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>9番のラズパイ用カメラのケーブルを、ユニバーサルプレートの下からスリットに入れて上に通し、そのままラズパイ本体のカメラコネクタに接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>セメント抵抗をつけたMotor Driver HATを、ラズパイの上に設置します。GPIOピンがずれないようにうまくドッキングしてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>左右のモーターからそれぞれ銅線を1本ずつ、ユニバーサルプレートの穴を通してオモテ側に2本引っ張って持ってきます。その2本をそれぞれ、Motor Driver HATの「MA2」端子と「MB2」端子に挿入し、マイナスドライバーでネジを締めて固定してください。なお、1つのモーターからは2本の銅線が出ていますが、ここではどちらを使ってもかまいません。左右各々から1本ずつ接続してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>左右の各モーターの残りの銅線2本をユニバーサルプレート下から上に通し、今度はセメント抵抗の脚部分に接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ここも、基本的にははんだづけしたほうがよいですが、しない場合は銅線をよく巻きつけてください。金属用ボンドなどをあとで上から塗り保護するのもよいです。&lt;/p>
&lt;h3 id="sd">マイクロSDカードのセットアップ&lt;/h3>
&lt;h4 id="os">OSインストール&lt;/h4>
&lt;p>まず、以下のURLからセットアップ済みのRaspberry Pi用OSイメージをダウンロードしてください。&lt;br>
およそ3GBありますので、ディスク容量と通信量にこ注意ください。&lt;br>
&lt;a href="https://drive.google.com/file/d/1O6UqWZHVknEJ0g2E5wjEJZhn59DFqfsU/view?usp=sharing">SkyWayRobot.iso&lt;/a>&lt;/p>
&lt;p>こちらのイメージは、ユーザー名が「pi」、パスワードが「raspverry」となっています。&lt;br>
SSH接続される際の参考にしてください。&lt;/p>
&lt;p>ダウンロードができたら、以下のサイトを参考にしてマイクロSDカードにダウンロードしたOSイメージをインストールしてください。&lt;br>
Windowsの場合：&lt;a href="https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/">最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a> の「SDカードのフォーマット」から「初期設定」直前まで&lt;br>
Macの場合：&lt;a href="https://qiita.com/shippokun/items/9070fc58f69d8c063e44">MacでRaspberryPi入門 - Qiita&lt;/a> の「2.microSDカードに書き込み」の部分&lt;/p>
&lt;p>OSをインストールしているあいだ、次のSkyWayセットアップを行なっておいてください。&lt;/p>
&lt;h4 id="skyway">SkyWayのセットアップ&lt;/h4>
&lt;p>次に、SkyWayにユーザー登録をして、APIキーを発行します。&lt;br>
&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の “Create new application” をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p>
&lt;pre>&lt;code>Application description: My WebRTC Robot（一例。任意の名前でよいです）
Available domains: localhost, 127.0.0.1, ukkz.github.io
&lt;/code>&lt;/pre>&lt;p>“ukkz.github.io” は、後ほどWeb上のロボットコントローラーからアクセスする際に必要なので、最初は必ず入れておいてください。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="heading-3">環境設定&lt;/h4>
&lt;p>OSのインストールが完了すると、「boot」という外付けディスクがPCに認識されていると思います。そのディスクを開くと色々なファイルが入っていますが、その中から「wifi_passwd_list.conf」と、「robot.json」があることを確認してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず最初に「wifi_passwd_list.conf」を開き、自宅などのWiFiのSSIDとパスワードを入力します。こうすることでWiFiに自動で接続することができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>次に「robot.json」を開きます。この中の&lt;code>&amp;quot;YOUR_SKYWAY_APIKEY&amp;quot;&lt;/code>となっている部分に、先ほど取得したご自身のAPIキーをペーストしてください。また、&lt;code>&amp;quot;robot-NEW&amp;quot;&lt;/code>となっているところはこのロボットを識別するための「ピアID」となります。ここは好きな名前をいれましょう。&lt;/p>
&lt;p>今回は必要ありませんが、このラズパイと同じLAN内でもしSSH接続をする場合は、&lt;br>
&lt;code>ssh pi@ピアID.local&lt;/code>&lt;br>
とするとそのままアクセスすることができます。&lt;br>
また上述したとおり、パスワードは「raspverry」に設定しています。&lt;/p>
&lt;p>この「robot.json」の他の項目として&lt;code>&amp;quot;reverse&amp;quot;&lt;/code>と書かれた部分があります。ここを&lt;code>false&lt;/code>から&lt;code>true&lt;/code>にすると、モーターの回転方向が逆転します。銅線の接続方法によっては最初から逆回転をするようになっている場合があるので、完成後にコントローラからロボットを操作した際に操作と逆方向に進んでしまったりする場合は、こちらのパラメータを変更してみてください。&lt;/p>
&lt;p>以上まで終了したら、マイクロSDカードをPCから取り外します。&lt;/p>
&lt;h3 id="heading-4">仕上げ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ペンチやピンセットなどを使って、マイクロSDカードをラズパイのスロットに挿入します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>カメラがだらんと垂れた状態になっているので、厚めの両面テープを使い、ユニバーサルプレート先端の「軸受けパーツ」に上図のように固定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>電池ボックスをロボット後部の空いた部分に載せ、輪ゴムや髪留め用のゴムなどで落ちないよう簡単に固定します。最後に電池スナップから伸びる赤と黒の線を、それぞれ「VIN」端子と「GND」端子に接続すれば完成です！&lt;/p>
&lt;h2 id="heading-5">試してみよう&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>電源スイッチを入れて、30秒ほど待ってみましょう。モーターが動き、ロボットが軽く前後に移動するような「シグナリング動作」を行うのが確認できたら、SkyWayへの接続が完了しています。何も起こらない場合は、環境設定のところで入力したWiFiの情報が間違っていないか、APIキーがちゃんと入力されているか確認しましょう。&lt;/p>
&lt;p>SkyWayへの接続ができているようであれば、以下のURLをまずコピーして、お使いのブラウザのアドレスバーにペーストしてください。&lt;br>
&lt;code>https://ukkz.github.io/skyway-robot/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>ペーストできたら、ページを表示する前に、このアドレスの「?apikey=」に続く文字列をご自身で取得したAPIキーに書き換えてからこのURLにアクセスしてください。すると次のような画面が出ます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この画面では、各ロボットごとに設定した「ピアID」の文字列のボタンが複数表示されています。このように、うまく接続できている場合は環境設定のところで書いたロボットの「ピアID」が画面上部に表示されます。同じAPIキーで複数台接続している場合は、その台数分だけボタンが出現します。この時点ではまだロボットとP2P接続していません。ボタンをクリックしてみると……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>問題なく接続されていれば、このようにカメラからの画像がブラウザの画面に表示され、十字キーでロボットを操作することができます。他にもゲーミング用のWASDキーでの操作や、LeapMotionでの操作に加え、スマホなどからは画面をなぞることでバーチャルジョイスティックによる操作をすることもできます。&lt;/p>
&lt;h2 id="heading-6">トラブルシューティング&lt;/h2>
&lt;p>&lt;strong>ラズパイが起動しない&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ISOの書き込みがきちんとできているか確認&lt;/li>
&lt;li>電池を満充電のものと交換してみる&lt;/li>
&lt;li>SDカードが壊れてしまっていないか&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>起動したようだが「シグナリング動作」が行われない&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>WiFiのアクセスポイント名とパスワードの確認&lt;/li>
&lt;li>SkyWayのAPIキーの確認&lt;/li>
&lt;li>モーターとモータードライバの物理的な接触不良はないか&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ブラウザでボタンを押しても接続後すぐに切れて「シグナリング動作」を繰り返す&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>カメラモジュールの故障または接触不良&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>操作に大幅な遅延がある&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ロボットとコントローラを同一のLAN内で動かしてみる&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ロボットがキー操作と逆の動作をする&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>前後逆になってしまう場合は、&lt;code>/boot/robot.json&lt;/code>の中にあるreverseをtrueにする&lt;/li>
&lt;li>左右逆になってしまう場合は、&lt;code>/boot/robot.json&lt;/code>の中にあるab_swapをtrueにする&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>最初からロボットとの接続が確立できず起動後すぐに暴走してしまう&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>セメント抵抗の値を大きくしてみる&lt;/li>
&lt;li>どこかで端子がショートしていないか確認&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>接続後しばらくして操作に反応しなくなり暴走してしまう&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>電池を新品に交換する&lt;/li>
&lt;li>電源用USB接続を併用する&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>その他、うまく動かない……&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Twitter &lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a> 宛にDM、もしくは&lt;br>
メールで ukok(at_mark)dotstud.io までお気軽にご質問ください。&lt;/li>
&lt;/ul>
&lt;h2 id="heading-7">まとめ&lt;/h2>
&lt;p>いかがでしたでしょうか？&lt;br>
今回は、最初からプログラムを書くとやはり難易度が高くなってしまうので、ロボットをOSイメージとして配布してみました。もし余力のある方は、ホームフォルダにある&lt;code>app.js&lt;/code>がロボットの本体ですので、ぜひご自身で色々とさわってみてくださいね。&lt;/p></description></item><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-piano/</link><pubDate>Tue, 14 May 2019 00:00:00 +1800</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-piano/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。&lt;br>
&lt;a href="https://dotstud.io/blog/meeting-via-webrtc-piano/">前回&lt;/a>は、スタジオからなんとかオンラインミーティングに参加したのですが、当然ながらバレちゃいましたね……&lt;br>
しかし、新社会人も多いこの季節、同じような境遇に陥る若人も少なくないでしょう！！&lt;br>
というわけで、今回は市販のMIDIキーボードを使って、簡単にこの仕組みを自作する方法を解説します！&lt;/p>
&lt;h2 id="heading">ハードウェア部分&lt;/h2>
&lt;h3 id="heading-1">必要なもの&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Raspberry Pi 3B+&lt;/li>
&lt;li>マイクロSDカード（8GB以上）&lt;/li>
&lt;li>USB-MIDIキーボード&lt;br>
今回はKORG社のnanoKey2を使っていきますが、基本的には何でもOKです。&lt;/li>
&lt;li>Raspberry Pi Camera Module&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ハードウェアは特に作成する必要がなく、カメラモジュールを基板にとりつけ、USB-MIDIキーボードを接続するだけでOKです！&lt;br>
スタジオ編では、実際にYAMAHAのMIDIキーボードを分解して内部にRaspberry Piを組み込んだものを使用しました。余力がある方は試してみてください♪&lt;/p>
&lt;h2 id="heading-2">ソフトウェアのインストールと設定&lt;/h2>
&lt;p>ここからは、すでにRaspberry PiへのOSインストールが完了していて、SSHなどを経由してターミナル操作ができる前提で解説してゆきます。&lt;br>
よくわからない、という方は、以下の記事の「2. ソフトウェアのインストールと設定」あたりを参照しながら、OSのインストールから始めてみてください。&lt;br>
&lt;a href="https://dotstud.io/blog/howto-make-webrtc-pokeberu/">【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】 | dotstudio&lt;/a>&lt;/p>
&lt;h3 id="heading-3">映像のストリーミング&lt;/h3>
&lt;p>まず映像ストリーミングに必要なソフトウェアをインストールします。&lt;br>
gstreamerというストリーミングソフトウェアを使いますが、Raspberry Piへのインストールは少々複雑になります。
以下をそのままコピペしてターミナルで実行してください。&lt;br>
&lt;code>$ sudo apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio libgstreamer-plugins-base1.0-dev&lt;/code>&lt;br>
（参考：&lt;a href="https://gstreamer.freedesktop.org/documentation/installing/on-linux.html">GStreamer Installing on Linux&lt;/a>）&lt;/p>
&lt;p>上記のインストールが完了したら、次はラズパイカメラでgstreamerを扱うライブラリをインストールします。以下のコマンドを順番に実行してください。&lt;/p>
&lt;pre>&lt;code>$ cd ~/Documents
$ git clone https://github.com/thaytan/gst-rpicamsrc.git
$ cd gst-rpicamsrc/
$ ./autogen.sh --prefix=/usr --libdir=/usr/lib/arm-linux-gnueabihf/
$ make
$ sudo make install
&lt;/code>&lt;/pre>&lt;h3 id="midipython">MIDIキーボードをPythonから扱う&lt;/h3>
&lt;p>MIDIキーボードからの入力を取得できるPythonライブラリをインストールします。&lt;/p>
&lt;p>&lt;code>$ sudo apt-get install libasound2-dev libjack-jackd2-dev&lt;/code>&lt;br>
&lt;code>$ pip3 install mido python-rtmidi&lt;/code>&lt;/p>
&lt;h2 id="heading-4">プログラム部分の制作&lt;/h2>
&lt;h3 id="midi">MIDIキーボードの確認&lt;/h3>
&lt;p>必要なライブラリがインストールできたところで、まずはMIDIキーボードで2タッチ入力ができるか試してみましょう！&lt;br>
今回は、ソースコードが少し長いので、gitリポジトリからクローンします。&lt;br>
ディレクトリはあらかじめ適当なものを作成して移動するなどしておいてください。&lt;br>
&lt;code>$ git clone https://github.com/ukkz/skygate.git&lt;/code>&lt;/p>
&lt;p>このリポジトリには、今回使う「SkyWay」に関するモジュールが含まれていますので、開発者モードでインストールします。&lt;br>
&lt;code>$ pip3 install -e skygate/&lt;/code>&lt;br>
&lt;code>$ sudo python3 skygate/setup.py develop&lt;/code>&lt;/p>
&lt;p>クローンとモジュールのインストールができたら、MIDIキーボードから2タッチ入力ができるサンプルを、Python3で実行してみましょう。&lt;br>
このサンプルでは、外部MIDIインターフェースからのMIDIメッセージを解析して押されている鍵盤を特定し、鍵盤に割り当てられた数字をもとにして2タッチ入力変換をするものになっています。 &lt;br>
&lt;code>$ python3 skygate/2touch-input-by-midi.py&lt;/code>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実行すると入力待ちになります。&lt;br>
上図を参考にして、&amp;ldquo;41128122##&amp;rdquo; と打ち込んでみてください。すると……&lt;/p>
&lt;pre>&lt;code>pi@raspberrypi:~ $ python3 skygate/2touch-input-by-midi.py
たいやき
&lt;/code>&lt;/pre>&lt;p>このように表示されましたでしょうか？&lt;br>
&amp;ldquo;41128122&amp;rdquo; が、2タッチ入力では「たいやき」となり、また &amp;ldquo;##&amp;rdquo; が、ここでは「入力確定」の意味合いで使用するコマンドのようなものになっています。今回は、デバイス側からのメッセージ送信はこれを使って行いますのでぜひ覚えておいてください。&lt;/p>
&lt;h3 id="skyway">SkyWayを使ってラズパイとブラウザ間でビデオチャット&lt;/h3>
&lt;p>今回も、&lt;a href="https://dotstud.io/blog/howto-make-webrtc-pokeberu/">以前にポケベルを作成した記事&lt;/a>と同様に、通信部分で&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>というWebRTCプラットホームを利用します。&lt;br>
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br>
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong>WebRTC Gateway&lt;/strong> というものが開発されていて、無償で利用することができます。&lt;br>
詳細は以下をご覧ください。&lt;br>
&lt;a href="https://github.com/skyway/skyway-webrtc-gateway">skyway/skyway-webrtc-gateway: &lt;em>Experimental&lt;/em> WebRTC Gateway for SkyWay&lt;/a>&lt;/p>
&lt;h4 id="skywayapi">SkyWayのアカウント作成とAPIキーの取得&lt;/h4>
&lt;p>&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。&lt;/p>
&lt;p>&lt;code>Application description: my midi chat client&lt;/code>（一例。任意の名前でよいです）&lt;br>
&lt;code>Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/code>&lt;/p>
&lt;p>&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほどブラウザ上からビデオチャットを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="webrtc-gateway">WebRTC Gatewayの取得と起動&lt;/h4>
&lt;p>Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br>
&lt;code>$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code>&lt;/p>
&lt;p>実行権限を付与してから、バックエンドで起動させます。&lt;br>
&lt;code>$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code>&lt;/p>
&lt;h4 id="raspberry-pi-">Raspberry Pi とブラウザ間で接続&lt;/h4>
&lt;p>以下のコマンドでサンプルスクリプトを実行します。&lt;br>
&lt;code>$ python3 skygate/sample.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br>
今回は &amp;ldquo;keyboard&amp;rdquo; という値を使いましょう。&lt;br>
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p>
&lt;p>&lt;code>Peer created as keyboard: pt-529579b6-1b69-4f81-b213-3400d039a3da&lt;/code>&lt;br>
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;/p>
&lt;p>では次に、このRaspberry Piと通信したいPCのブラウザなどから、以下のURLを開きましょう。&lt;br>
&lt;a href="https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx">SkyWay P2P Video &amp;amp; Text Chat&lt;/a>&lt;/p>
&lt;p>こちらはWeb側のチャット画面となるページですが、URLは以下のようになっています。&lt;br>
&lt;code>https://ukkz.github.io/skygate/web/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>このうち、&lt;code>apikey=&lt;/code>より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このような感じになっているかと思います。&lt;br>
このとき、Raspberry Pi側が正常にSkyWayに認識されていれば、左下のドロップダウンメニューに「keyboard」と表示が出ますので、その右横のcallボタンを押すと……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Raspberry Pi側からの映像が大きく映し出されていれば、問題なく接続されています！&lt;/p>
&lt;h3 id="midi-1">ビデオチャットにMIDIメッセージングを組み込もう&lt;/h3>
&lt;p>ここまでくれば、あとはビデオチャットとテキストチャットを結合し、さらにMIDIキーボードの2タッチ入力でテキスト入力ができるようにすれば、「キーボードを弾きながらオンラインミーティングに参加できるマシン」のできあがりです！&lt;br>
こちらも、ソースコードが少し長くなるのでリポジトリの中にサンプルを置いておきました。これをそのまま利用してください。&lt;/p>
&lt;p>&lt;code>$ python3 skygate/video-and-text-by-midi.py keyboard xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>こちらのコードでは先ほどのMIDIキーボードの2タッチ入力に加え、WebRTCで着信した相手に対してその入力テキストを送り返すようになっています。&lt;br>
これを実行すると、以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>2タッチ入力で「おつかれさまです！」と入力したのですが、最後だけ間違えて「おつかれさまですW」になってしまいました……　慣れないと難しいですね。&lt;br>
このまま送信すると、ブラウザ側では以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ブラウザ側からも文字列が表示されました！&lt;br>
もちろん、返事をすることもできます。ここでは「進捗どう？」とブラウザ側から送りましたが、すでに表示されているとおり、Raspberry Pi側にもちゃんと送られていることが確認できます。&lt;/p>
&lt;h2 id="heading-5">まとめ&lt;/h2>
&lt;p>WebRTCを使うと、映像・音声のようなメディアストリームのほか、バイナリにすることができるデータならなんでも送ることができます！　また、本来はWebブラウザ同士でしか使えなかったこの技術が、SkyWayのGatewayによってRaspberry PiのようなIoTデバイスでも実現できるようになったため、さらにものづくりの幅が広がります。少し難しいところもありますが、ぜひともWebRTCによる新しい可能性を感じていただければと思います。&lt;/p></description></item><item><title>【シンセ魔改造】仕事サボってバンド演奏しながら会社のミーティングに無理やり参加してみた【スタジオ編】</title><link>https://dotstud.io/blog/meeting-via-webrtc-piano/</link><pubDate>Mon, 13 May 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/meeting-via-webrtc-piano/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>最近、趣味でバンドを始めました。&lt;br>
なんとなくキーボードを担当しています。&lt;br>
いやー、音楽っていいものですね。&lt;br>
仕事のことを忘れてノリノリになっちゃいますね！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こちらはギター担当の自給力さんです。&lt;br>
彼はパワー自慢なので、とても力強い演奏をしてくれるんですよ。&lt;br>
練習中でも、ヒートアップしてくると周りが見えなくなるぐらい熱いプレイを見せてくれる、素敵なメンバーです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>さて、セッティングも終わったし、そろそろ合わせ練習を始めますか！&lt;br>
3、2、1、ハイ！！&lt;/p>
&lt;p>………&lt;br>
……&lt;br>
…&lt;/p>
&lt;h2 id="heading">何か忘れているような&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>あれ、スマホが鳴ってるな……&lt;br>
せっかくノッてきたのに。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>あ！！！！！そういえば！！！！！&lt;br>
今日ミーティング入ってた気がするぞ……！！&lt;br>
やばいやばい、完全に忘れてスタジオに来てしまった……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そういえば、この前もミーティングすっぽかしちゃって、次やらかしたらクビだぞ！！　って社長のびすけに言われたばかりなんだった……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ああ、自給力さん、完全にスイッチ入ったな。&lt;br>
彼はこうなると、少なくとも1時間はもう戻ってこれなくなっちゃうんだよな。&lt;br>
どうしたものか……&lt;/p>
&lt;p>………&lt;br>
……&lt;br>
…&lt;/p>
&lt;h2 id="heading-1">ミーティングをサボらずにバンド練習を続けたい&lt;/h2>
&lt;p>＼ｶﾗﾝｶﾗﾝ／&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>しまった、社会人なら必ずポケットに1人1セットは入っていると言われるラズベリーパイと専用カメラを、焦った拍子に落としてしまった。踏まなくてよかった。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>（ハッ！　まてよ、このスタジオはWiFi完備だったはず……　そして今日のミーティングはオンラインで、まだもう少し時間あるじゃないか！　これは、いける！）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>（さらにノってきた自給力さん）&lt;/p>
&lt;p>〜　30分後　〜&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>できたぞ！！！！&lt;/strong>&lt;br>
予備で持ってきていたシンセを改造して……&lt;br>
&lt;strong>バンドをプレイしつつオンラインでミーティングにコミットできるソリューション……ッ！！&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>これは、ラズパイにつないだカメラの映像を、Webブラウザの画面にWebRTCの&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>を使って送信できる機能がついたシンセなのだ！&lt;br>
なに？　バンド演奏してたら、音がうるさすぎてマトモに会話できないって？　いーや問題ない！&lt;br>
このシンセは、打鍵のたびに &lt;strong>「MIDI信号」&lt;/strong> を発することができるのだけど、これをテキストに変換して映像と同時に送信できるような仕組みにしたのだ！　つまり、 &lt;strong>音を出しながらもテキストデータを送信することができる！&lt;/strong>&lt;/p>
&lt;p>さて、マイクは壊れている、ということにして、映像とテキストチャットだけを送り、あとは自給力さんが映らないようにすれば、まさか仕事をすっぽかしてるなんてバレないでしょう。僕ってば天才！！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そうこうしてるうちにミーティング時間だ！&lt;br>
演奏しつつ参加するぞ〜〜&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>カメラがキーボードの端にあるので、身体の中心を少しずらして目線を合わせて……&lt;br>
文字列の送信は、キーボードの1オクターブ・12鍵を、「ポケベルの2タッチ入力」のようにして扱うことで行います。&lt;br>
向こうからの映像は見えないけど、スマホからラズベリーパイにSSH接続することで、向こうから送られたテキストなら確認可能！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>………&lt;br>
……&lt;br>
…&lt;/p>
&lt;h2 id="heading-2">なんとか乗り越えられそうだ&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-3">結局バレてしまいましたが&lt;/h2>
&lt;p>次回は、今回作った「演奏と同時にWebRTCでビデオ・テキストチャットができるシンセ」の作り方を紹介していきます！&lt;br>
ミーティングをサボるため以外にも、映像・歌・演奏MIDIデータを同時にリアルタイム配信するなどの（まともな）用途にも使えますので、気になった方はぜひ続きもご覧くださいね！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【作り方編】</title><link>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0700</pubDate><guid>https://dotstud.io/blog/howto-make-webrtc-pokeberu/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。
&lt;a href="https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/">前回の記事&lt;/a>では、最新技術でポケベルを作ってみた！　というお話と、Webから2タッチ入力ができる公衆電話アプリの紹介をさせていただきました。&lt;/p>
&lt;p>2回目の今回は「制作編」ということで、パーツさえ用意できれば誰でも作れてしまうポケベルの作り方を紹介したいと思います！&lt;/p>
&lt;h2 id="heading">ハードウェア部分の制作&lt;/h2>
&lt;h3 id="heading-1">必要なもの&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Raspberry Pi 3B+&lt;/li>
&lt;li>マイクロUSBケーブル&lt;/li>
&lt;li>マイクロSDカード（8GB以上）&lt;/li>
&lt;li>GrovePi+&lt;/li>
&lt;li>Grove Buzzer&lt;/li>
&lt;li>Grove LCD RGB Backlight&lt;/li>
&lt;li>有線LANで作業用PCと接続できる環境（セットアップに使います）&lt;/li>
&lt;li>テープ（ガムテープやセロハンテープ、マスキングできれば何でも可）&lt;/li>
&lt;/ul>
&lt;p>前提として、最低限のCLI（ターミナル）操作ができる方を対象として記事を書いています。予めご了承ください。&lt;/p>
&lt;h3 id="heading-2">組み立て&lt;/h3>
&lt;h4 id="grovepiraspberry-pi">GrovePi+をRaspberry Piとドッキングする&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ガムテープやセロテープなどで、Raspberry PiのUSB端子の上部を図のように「マスキング」します。&lt;br>
これは、上に乗せるGrovePi+の基板が直接触れることによるショートを防止するためです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Raspberry Piの端子にGrovePi+のソケットを上から挿し込みます。&lt;br>
このとき互いの端子の長さが異なりますが、写真のようにカド部分にあわせるようにしてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>斜め上から見るとこのようになります。&lt;/p>
&lt;h4 id="grovergb-lcd">GroveのRGB LCDとブザーを接続する&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Groveのブザーを「D8」と書かれている端子にGroveケーブルで接続します。&lt;br>
また、Grove LCD RGB BacklightをI2Cと書かれている端子に接続します。こちらはI2C接続なので、I2Cと記述がある端子ならどこでもかまいませんが、写真ではI2C-1という端子に接続しています。&lt;/p>
&lt;h2 id="heading-3">ソフトウェアのインストールと設定&lt;/h2>
&lt;h3 id="grovepiosraspbian-for-robots">GrovePi+向けOS「Raspbian For Robots」&lt;/h3>
&lt;p>このパートは以下のチュートリアルの概略になります。&lt;br>
&lt;a href="https://www.dexterindustries.com/GrovePi/get-started-with-the-grovepi/">Get Started with GrovePi&lt;/a>&lt;/p>
&lt;h4 id="sd">マイクロSDカードへのインストール&lt;/h4>
&lt;p>GrovePi+を動作させられるソフトウェアがプリインストールされたOSが格納されたマイクロSDカードを作成します。&lt;/p>
&lt;p>公式サイトによると、すでにインストール済みのRaspbianも後から追加でGrovePi+用のソフトウェアがインストールできるとのことですが、記事執筆時点の最新ソフトウェアではうまく動作しませんでした。&lt;br>
すでにRaspbianを使われている方も、お手数ではありますが新しいマイクロSDカードを入手してお試しください。&lt;/p>
&lt;p>まず、以下のページからOSイメージファイルを入手します。&lt;br>
&lt;a href="https://sourceforge.net/projects/dexterindustriesraspbianflavor/">Raspbian For Robots by Dexter Industries download | SourceForge.net&lt;/a>&lt;br>
圧縮ファイルになっていますので、ダウンロード完了後に解凍しておきましょう。&lt;/p>
&lt;p>このイメージファイルをマイクロSDカードに書き込みます。&lt;/p>
&lt;ul>
&lt;li>作業PCがWindowsの方は以下を参考に進めてください。&lt;br>
&lt;a href="https://www.1ft-seabass.jp/memo/2018/07/23/raspbian-install-201807-memo/">最近のRaspberry Piイメージ（Raspbian）をインストールするメモ - 1ft-seabass.jp.MEMO&lt;/a>&lt;/li>
&lt;li>作業PCがMacの方は以下を参考に進めてください。&lt;br>
&lt;a href="https://qiita.com/py_iK/items/9070fc58f69d8c063e44">MacでRaspberryPi入門 - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>インストールが完了したら、RaspberryPiに挿入して電源を接続し起動させます。&lt;br>
LANケーブルを使い、Raspberry Piと作業用PCを接続します。最近の小型PCはLANポートがついていないことも多いため、その際はUSBイーサネットアダプタなどを使うとよいでしょう。&lt;/p>
&lt;p>接続が完了し、Raspberry PiとGrovePi+のPWR LEDが点灯していることを確認したら、作業用PCブラウザのURL入力欄に&lt;br>
&lt;code>http://dex.local/&lt;/code>&lt;br>
と入力して移動します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ここまででうまくインストールと接続が完了していれば、このような画面が表示されます。&lt;br>
ブラウザ中段左側の、&amp;ldquo;VNC&amp;rdquo; をクリックすると、ブラウザからRaspberry Piのデスクトップ画面へと直接アクセスすることができます。&lt;/p>
&lt;h4 id="heading-4">設定とシステムのアップデート&lt;/h4>
&lt;p>&amp;ldquo;VNC&amp;rdquo; をクリックします。もしもパスワードが求められたら、&amp;ldquo;robots1234&amp;rdquo; と入力しましょう。&lt;br>
Raspberry Piの本体にWiFiが内蔵されているモデル以外をお使いの場合は、WiFiドングル（USB接続の子機）を接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>右上に上下の矢印2つのアイコンをクリックして、WiFiに接続しましょう。&lt;br>
有線LANによる接続と別でWiFiに接続していないと、アップデートやSkyWayへの接続などができません。&lt;/p>
&lt;p>次にソフトウェアのアップデートを行います。&lt;br>
&amp;ldquo;DI Software Update&amp;rdquo; というアイコンをダブルクリックして開き、しばらく待つと以下の画面になります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>以下の作業でダイアログが何回か出ますがすべてOKをクリックしてください。&lt;br>
ドロップダウンメニューから &amp;ldquo;GrovePi&amp;rdquo; を選択し、&amp;ldquo;Update Firmware&amp;rdquo; をクリックします。&lt;br>
それが完了したら、&amp;ldquo;Update Dexter Software&amp;rdquo; のボタンもクリックしてアップデートを行います。&lt;/p>
&lt;p>ターミナルウインドウが出てアップデートが進行していきますので、少し時間がかかりますが終わるまで気長に待ちましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ターミナルがこのような画面になったら閉じて、Raspberry Piを再起動します。&lt;br>
再起動後は同様の手順でブラウザからデスクトップが表示できるところまで進めて、このデスクトップからターミナルを開きましょう。&lt;br>
あるいは、SSHが使い慣れている方であれば、作業用PCから&lt;br>
&lt;code>$ ssh pi@dex.local&lt;/code>&lt;br>
で直接CLI操作をすることも可能ですので、使いやすいほうをお試しください。&lt;/p>
&lt;h2 id="heading-5">ポケベルのプログラム部分の制作&lt;/h2>
&lt;h3 id="grovelcd">GroveのLCDとブザーを扱う&lt;/h3>
&lt;p>さて、ここからはポケベルを実際に動作させるためのプログラムを作成していきます！&lt;br>
といっても、全てコピー&amp;amp;ペーストで作成していただけますのでご安心を。&lt;/p>
&lt;p>まずは適当なディレクトリを作成して移動します。&lt;br>
&lt;code>$ mkdir ~/pocketbell; cd ~/pocketbell&lt;/code>&lt;/p>
&lt;p>LCDディスプレイを簡単に扱えるようにしてくれるモジュールをコピーします。&lt;br>
&lt;code>$ cp ~/Desktop/GrovePi/Software/Python/grove_rgb_lcd/grove_rgb_lcd.py ./&lt;/code>&lt;/p>
&lt;p>同じディレクトリに、テスト用スクリプトを作成しましょう。&lt;br>
&lt;code>$ vi grove_test.py&lt;/code>&lt;br>
ここではviエディタを使っていますが、vimやemacsなど、編集のできるものであれば何でもかまいません。&lt;br>
編集画面になったら、以下のソースコードをコピー&amp;amp;ペーストして保存してください。&lt;/p>
&lt;p>&lt;code>ファイル:grove_test.py&lt;/code>&lt;/p>
&lt;pre>&lt;code>import time, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
try:
setRGB(200, 200, 200)
setText(&amp;quot;Hello PocketBell&amp;quot;)
grovepi.digitalWrite(buzzer, 1)
time.sleep(1)
grovepi.digitalWrite(buzzer, 0)
except KeyboardInterrupt:
grovepi.digitalWrite(buzzer, 0)
except IOError:
print (&amp;quot;Error&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>保存したら、python3で実行してみましょう。&lt;br>
&lt;code>$ python3 grove_test.py&lt;/code>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ブザーからビープ音が鳴ると同時に、LCDに &amp;ldquo;Hello PocketBell&amp;rdquo; と表示されていれば、GroveがRaspberry PiのPythonから正しく扱えていることがわかります。&lt;/p>
&lt;h3 id="skyway">SkyWayと接続する&lt;/h3>
&lt;p>今回のポケベル制作における通信部分は、&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>というWebRTCプラットホームを利用します。&lt;br>
本来WebRTCはP2P通信なので、サーバーは必要ありません。ただし、最初のノード間の情報交換（シグナリング）がかなり大変なので、このSkyWayのシステムを使って実現します。&lt;br>
また、WebRTCはもともとリッチなWebブラウザでしか動作しないものでしたが、ブラウザを介さずに動作させることのできる &lt;strong>WebRTC Gateway&lt;/strong> というものが開発されていて、無償で利用することができます。&lt;br>
詳細は以下をご覧ください。&lt;br>
&lt;a href="https://github.com/skyway/skyway-webrtc-gateway">skyway/skyway-webrtc-gateway: &lt;em>Experimental&lt;/em> WebRTC Gateway for SkyWay&lt;/a>&lt;/p>
&lt;h4 id="skywayapi">SkyWayのアカウント作成とAPIキーの取得&lt;/h4>
&lt;p>&lt;a href="https://webrtc.ecl.ntt.com/signup.html">新規登録 - SkyWay - Enterprise Cloud WebRTC Platform&lt;/a>&lt;br>
上記のページの「Community Edition」にある「無料で新規登録」のボタンから、アカウントを新規に作成しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>アカウントを作成したらログインして、上段の &amp;ldquo;Create new application&amp;rdquo; をクリックします。するとアプリケーション作成ページに飛びますので、以下のように入力します。　　&lt;/p>
&lt;p>Application description: my pocketbell（一例。任意の名前でよいです）&lt;br>
Available domains: localhost, 127.0.0.1, ukkz.github.io&lt;/p>
&lt;p>&amp;ldquo;ukkz.github.io&amp;rdquo; は、後ほど公衆電話アプリからこのアプリケーションを利用するときのための設定なので、一通り終わったら削除しておいて構いません。&lt;br>
入力完了したら緑色のCreateボタンをクリックして作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>作成後のページはこのように表示されているかと思います。&lt;br>
API Keyの欄に表示されている文字列をコピーしてどこかに控えておきましょう。&lt;/p>
&lt;h4 id="webrtc-gateway">WebRTC Gatewayの取得と起動&lt;/h4>
&lt;p>Raspberry Piに戻り、以下のコマンドを実行して &amp;ldquo;WebRTC Gateway&amp;rdquo; をダウンロードします。&lt;br>
&lt;code>$ wget https://github.com/skyway/skyway-webrtc-gateway/releases/download/0.0.4/gateway_linux_arm&lt;/code>&lt;/p>
&lt;p>実行権限を付与してから、バックエンドで起動させます。&lt;br>
&lt;code>$ chmod +x gateway_linux_arm ; sudo ./gateway_linux_arm &amp;amp;&lt;/code>&lt;/p>
&lt;h4 id="gatewaypython">GatewayをPythonで扱えるようにするモジュールの取得&lt;/h4>
&lt;p>今回、WebRTC Gatewayを扱うにあたり、簡単なモジュールを作成しました。&lt;br>
Gitリポジトリをローカルにクローンします。&lt;br>
&lt;code>$ git clone https://github.com/ukkz/skygate.git&lt;/code>&lt;/p>
&lt;p>未完成のモジュールですので、今回は開発者モードでインストールします。&lt;br>
&lt;code>$ pip3 install -e skygate/&lt;/code>&lt;br>
&lt;code>$ sudo python3 skygate/setup.py develop&lt;/code>&lt;/p>
&lt;h4 id="skyway-1">SkyWayへの接続テスト&lt;/h4>
&lt;p>以下のコマンドでサンプルスクリプトを実行します。&lt;br>
&lt;code>$ python3 skygate/sample.py bell-0000 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>第1引数は「ピアID」といい、接続するデバイスに固有に割り振られるIDを自分で指定します。&lt;br>
今回は &amp;ldquo;bell-0000&amp;rdquo; という値を使いましょう。&lt;br>
第2引数は「APIキー」です。先ほど取得した、ご自身のアプリのAPIキーを入力しましょう。&lt;/p>
&lt;p>&lt;code>Peer created as bell-0000: pt-829aa04e-449d-44a1-94f8-03481741cc5c&lt;/code>&lt;br>
以上のような結果が返ってきていれば、SkyWayと正常に接続しピアとして認識されています。&lt;br>
Ctrl+C でサンプルスクリプトを終了させましょう。&lt;/p>
&lt;h3 id="skywaygrove">SkyWay接続とGroveを組み合わせる&lt;/h3>
&lt;p>以下のソースコードをコピー&amp;amp;ペーストし &amp;ldquo;pocketbell.py&amp;rdquo; という名前のファイルに保存してください。&lt;/p>
&lt;p>&lt;code>ファイル:pocketbell.py&lt;/code>&lt;/p>
&lt;pre>&lt;code>#!/usr/bin/env python
import time, sys, skygate, grovepi
from grove_rgb_lcd import *
buzzer = 8
grovepi.pinMode(buzzer, &amp;quot;OUTPUT&amp;quot;)
if len(sys.argv) &amp;gt;= 3:
peer_id = str(sys.argv[1])
api_key = str(sys.argv[2])
try:
peer = skygate.Peer(peer_id, api_key)
except Exception as e:
print(e)
setRGB(100, 0, 0)
quit()
else:
print('Peer created as '+peer.id+': '+peer.token)
setRGB(0, 100, 0)
try:
while True:
for data in peer.getDataConnections():
if not data.getQueue().empty():
mes = data.getQueue().get().decode()
setText(mes)
setRGB(200, 200, 200)
print(mes)
grovepi.digitalWrite(buzzer, 1)
time.sleep(.1)
grovepi.digitalWrite(buzzer, 0)
time.sleep(2)
setRGB(0, 100, 0)
except KeyboardInterrupt:
try:
peer.close()
except Exception as e:
print(e)
&lt;/code>&lt;/pre>&lt;p>接続テストのときと同様、ピアIDとAPIキーを指定して実行します。&lt;br>
ただし、ここではピアIDは &amp;ldquo;bell-0001&amp;rdquo; にしましょう。&lt;br>
&lt;code>$ python3 pocketbell.py bell-0001 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>さて、ここまででポケベルは完成で、上記のプログラムを実行することで待ち受け状態となります。&lt;br>
ではさっそく、公衆電話からデータを送ってみましょう！&lt;/p>
&lt;h2 id="web">Web上の公衆電話から数字を送信しよう&lt;/h2>
&lt;p>前回の記事で紹介した、Webから使えて自作ポケベルと通信ができる公衆電話を使います。&lt;br>
&lt;a href="https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx">PayPhone for SkyWay PocketBell&lt;/a>&lt;/p>
&lt;p>この公衆電話のURLは以下のようになっています。&lt;br>
&lt;code>https://ukkz.github.io/skyway-payphone/?apikey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/code>&lt;/p>
&lt;p>このうち、&lt;code>apikey=&lt;/code>より右の部分を、ご自身で発行されたSkyWayのAPIキーに置き換えてもう一度アクセスしてみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>コインの投入口付近をクリックして、画面上の電話機のディスプレイが &amp;ldquo;CALL&amp;rdquo; になれば問題なくSkyWayに接続されています。&lt;br>
これが確認できたら、以下の順番で操作を進めてみてください。&lt;/p>
&lt;ol>
&lt;li>&amp;ldquo;0001&amp;rdquo;（ポケベルのピアIDであるbell-xxxxのxxxxに相当する4桁の数字）&lt;/li>
&lt;li>電話機ディスプレイが &amp;ldquo;0001&amp;rdquo; 表示に変化&lt;/li>
&lt;li>好きな数字を2〜3文字ほど打ち込んでみる&lt;/li>
&lt;li>受話器を置く部分をクリックして終話する&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ポケベルを確認してみましょう。&lt;br>
ビープ音とともに、自分で打ち込んだ数字がGrove LCDの画面上に表示されましたでしょうか？&lt;br>
今回は簡略版ですので、2タッチ入力で送ったカタカナ文字は表示できないという点がありますが、通信の難しさを意識することなくP2Pでのデータ送受信を体験いただけたかと思います。&lt;/p>
&lt;p>ちなみに、前半の紹介記事で作っていたポケベルの動作のようすは以下のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>WebRTCはWebブラウザ間でリアルタイムなデータの送受信を扱える最新の規格として普及していますが、ブラウザ以外のIoTデバイスでもこんなに簡単に扱えてしまう技術が登場しています。&lt;br>
今回利用したSkyWayというサービスはJavaScriptのSDKが無償配布されていて、Webブラウザ上で動作するWebRTCアプリケーションを誰でも気軽に作成することができます。また、Raspberry Piから利用したGatewayも、WindowsやLinux上からブラウザを介さずに利用できるようになっています。&lt;br>
あまり複雑なコードを書かなくてもこのようなP2P送受信ができますので、この機会にWebRTCを活用したものづくりにぜひともチャレンジしてみてくださいね！&lt;/p></description></item><item><title>【114106→ｱｲｼﾃﾙ】平成の最後に最新のWebRTCでポケベルをつくってみた【体験編】</title><link>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/latest-webrtc-pokeberu-end-of-heisei/</guid><description>&lt;p>こんにちは、ものづくり担当うこです。&lt;!-- raw HTML omitted -->
ここ最近は次の元号が気になって、改元まで眠れません！&lt;/p>
&lt;p>そんな平成の終了を追うように、平成初期に一世を風靡した「ポケベル」が、今年9月末で終了してしまうようですね。&lt;!-- raw HTML omitted -->
&lt;a href="http://www.teleme.co.jp/service/magicmail/index.html">東京テレメッセージ株式会社｜ページャー（マジックメール）サービス終了のお知らせ&lt;/a>&lt;/p>
&lt;p>平成生まれの僕としては、聞いたことはあるけれど、使ったことはないポケベル。&lt;!-- raw HTML omitted -->
これは無くなってしまう前に体験しなくては！&lt;!-- raw HTML omitted -->
でも、もうポケベル本体は生産されておらず、新規契約もできません。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->ならば…… 作ってしまいましょう！&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="heading">ポケベルのしくみ&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ガラケー世代、スマホ世代からすれば衝撃なのですが、 &lt;strong>ポケベルは受信専用&lt;/strong>です。&lt;!-- raw HTML omitted -->
基本は「無線呼び出し」という、小型の受信機に対し遠隔から合図を送る汎用的な仕組みであったものが発達し、報知局から受信専用の携帯機器のベルを鳴らすことができるようになりました。これがいわゆる「ポケベル」のはじまりです。その後、公衆電話から数字を送ったり、2つの数字の組み合わせで文字を表現する「2タッチ入力」で文字列を送ることができるようになったりして、今の30代〜40代が記憶に残すところのポケベルとなりました。&lt;/p>
&lt;p>参考：&lt;a href="https://ja.wikipedia.org/wiki/%E7%84%A1%E7%B7%9A%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97">無線呼び出し - Wikipedia&lt;/a>&lt;/p>
&lt;p>さて、仕組みはわかったものの、現代で手軽に扱える技術で、ハードウェア・ソフトウェア・通信方法をどのようにしたらうまく作れるでしょうか。&lt;/p>
&lt;h2 id="heading-1">作ってみた&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>説明が複雑になりそうなので先に作りました（結論）&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>送信側である公衆電話も作りました。こちらはWeb上で動作します。&lt;/p>
&lt;h3 id="heading-2">ポケベル側&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ポケベル側は、&lt;/p>
&lt;ol>
&lt;li>レトロ感のあるディスプレイ&lt;/li>
&lt;li>安っぽい音のするブザー&lt;/li>
&lt;li>速いけど確実に届くかは無保証な通信プロトコル&lt;/li>
&lt;/ol>
&lt;p>の3点が課題でした。&lt;/p>
&lt;p>まず最初に、ハードウェア上でLinuxが動作するなら開発も比較的やりやすいので、Raspberry Pi 3 B+ を製作のベースに選択しました。&lt;!-- raw HTML omitted -->
次に、1.については、秋葉原でよく売られているのを見かける「16文字×2行」のディスプレイ（1580円）を使いました。しかしながら時代に即して、液晶ではなく有機ELであるところがちょっとナウいですね（死語）。&lt;!-- raw HTML omitted -->
2.も、秋葉原でよく見る圧電ブザー（50円）を採用して音のチープ感を重視しました。&lt;!-- raw HTML omitted -->
3.は、P2PでUDP伝送を行えばそれっぽくなりそうですが、そのままだと難しいので、NTTコミュニケーションズの提供する&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>を利用したWebRTC通信を採用することにしました。これについては後述します。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="heading-3">公衆電話側&lt;/h3>
&lt;p>公衆電話は、実機を使おうとすると設置場所を探さなければいけないのと、ハードウェアを作るのが大変そうだったので、Webで実装しました。&lt;!-- raw HTML omitted -->
以下より誰でも利用することができます。&lt;/p>
&lt;p>&lt;a href="https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY">PayPhone for SkyWay PocketBell&lt;/a>&lt;/p>
&lt;p>往年のプッシュホンのDTMF音も再現しています。&lt;!-- raw HTML omitted -->
これ単体でも2タッチ入力（ポケベル打ち）が体験できますので、ぜひ触ってみてください。&lt;/p>
&lt;h2 id="heading-4">ポケベルがさわれそうな世代を探そう&lt;/h2>
&lt;p>ネットから情報をできるだけ収集してとりあえず作ってみたものの、同じように作っている事例がまず存在せず、かつてのポケベルをどれだけ再現できているのかまったく自信がありません。&lt;!-- raw HTML omitted -->
そこで、実際にポケベルを所持していた世代の方に見ていただくべく、&lt;a href="https://iotlt.connpass.com/event/118404/">IoTLT大阪(Vol.10)&lt;/a>でこのポケベルについて発表しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>当日の参加者は50人前後。&lt;!-- raw HTML omitted -->
ここで「実際にポケベルを使っていた方はどれぐらいいらっしゃいますか？」と聞いてみたところ……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>写真幅に収まりきらなかったのですが、およそ5人〜10人の方に挙手いただきました！&lt;!-- raw HTML omitted -->
IoTLTは勉強会としては年齢層が若めの部類ではないかと考えているのですが、1割ほどの方が実際にご使用されていたとのこと。今回はポケベル初出のため、できれば今後の勉強会でも調査していきたいと思っております！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>発表の最後に、「実際に利用されていた方、触ってみたい方は懇親会で僕のところにお越しください」と申し上げたところ、多くの人が見に来てくださいました。 &lt;del>おっさんホイホイとはこのことか&lt;/del>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>「公衆電話のデザインが地味にリアル！」&lt;/strong>　と、ツボにはまっている方が多かったです。&lt;/p>
&lt;p>「これ（公衆電話）触ってもいいんですか？」「どうぞどうぞ」と、実際に触っていただいたところ、「もう忘れたよ〜〜」と言いつつも「2タッチ入力」を軽々こなせた方が3名ほどいらっしゃいました。&lt;!-- raw HTML omitted -->
いまだにブラインドでポケベル打てる（人生の）先輩方、おそるべしです……。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>メッセージ、ちゃんと当時と同じように打てますね！！　と絶賛いただけたので見てみると……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>これはリア充しとったやつやな……&lt;/strong>&lt;/p>
&lt;p>「アイシテル」は、2タッチ入力では「1112324493」と打ちますが、当時はド定番のメッセージだったそうです。文字が送れるようになる前の数字送信だけだったときには、語呂合わせで「114106」などとも送っていたんだとか。&lt;!-- raw HTML omitted -->
その他、お話を伺ったところによると&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ul>
&lt;li>公衆電話は時間課金なので、10円でメッセージを送るには、時間内に早打ちをする必要があった。&lt;/li>
&lt;li>いつも20円使ってたけど、10円で打てる人がいて、神のように崇められていた。&lt;/li>
&lt;li>「88」と打てばハートの絵文字が出るのは当たり前（ドコモのポケベルがそうなっていたらしいです）。&lt;/li>
&lt;/ul>
&lt;p>などの思い出があったそうです。&lt;/p>
&lt;p>今も「LINEの既読無視」のように、通信手段の特性に基づいた独特の「あるある」が存在しますが、それは四半世紀前でも変わらなかったんですねえ……。&lt;/p>
&lt;h2 id="heading-5">みなさんもポケベル体験してみよう！&lt;/h2>
&lt;p>さてそんな手作りのポケベルですが、送信側の公衆電話はWebで実装されているため、 &lt;strong>ブラウザで実際にポケベル打ちを試していただくことが可能&lt;/strong>です！&lt;!-- raw HTML omitted -->
先ほど紹介させていただいたページにぜひアクセスしてみてください。&lt;!-- raw HTML omitted -->
Google Chromeでの動作のみ確認しています。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a href="https://ukkz.github.io/skyway-payphone/?apikey=YOUR_API_KEY">PayPhone for SkyWay PocketBell&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まずコイン投入口をクリックすると、液晶部分に「TEST」という表示が出ることを確認してください。これで、実際の受信端末がなくても、打ったメッセージをブラウザで確認することができるようになります。&lt;!-- raw HTML omitted -->
次に、数字ボタンで「&lt;em>2&lt;/em>2」と打ち込みます。これはフリーメッセージの入力を開始するコマンドのようなものです。これが打てたら、以下のページで紹介されているフリーワードの表を見ながら、数字2つずつ打ち込んでゆきます。&lt;/p>
&lt;p>&lt;a href="http://www.kerokero.net/makosuke/pbcode/docomo.htm">Tele-Call page / DoCoMo&lt;/a>&lt;/p>
&lt;p>表の縦列数字が1つめ、横列数字が2つめです。例えば「うに」と入力するときは、まず「13」次に「52」のように2つずつ打ちます。&lt;!-- raw HTML omitted -->
定番メッセージ「アイシテル」は「1112324493」と打つと表現することができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>メッセージが打ち込めたら、最後に「##」と入力し、受話器置きの部分をクリックして「終話」すると、ポップアップでメッセージが表示されます。
うまく入力できたでしょうか？&lt;/p>
&lt;h3 id="heading-6">公衆電話の通信について&lt;/h3>
&lt;p>このWeb公衆電話は、このままだと通信をしない「テストモード」で動作しますが、実際には&lt;a href="https://webrtc.ecl.ntt.com">SkyWay&lt;/a>を利用したWebRTC通信に対応しています。執筆時点で、WebとRaspberry Piのような組み込み機器をP2Pでリアルタイムに、かつ簡単に繋ぐことのできるサービスはこれがほぼ唯一です。しかもSkyWayのコミュニティ版は完全無料で使うことができます。&lt;!-- raw HTML omitted -->
Webと組み込み機器を繋ぐのなら、以前まではWebSocketやMQTTを使うのが主でしたが、こちらは2者とも「サーバー対クライアント」の通信であり、バックエンドを準備するのが大変でした。&lt;!-- raw HTML omitted -->
このSkyWayが組み込みに対応したWebRTCエンジン「&lt;a href="https://support.skyway.io/hc/ja/articles/360008586334--SkyWay-WebRTC-Gateway-%E8%A9%A6%E9%A8%93%E6%8F%90%E4%BE%9B%E9%96%8B%E5%A7%8B">WebRTC Gateway&lt;/a>」を提供開始したことで、本来はWeb環境同士でしか成立しなかったWebRTC通信を、Raspberry Piのような低レベルのデバイスから直接的に接続させることが可能になりました。&lt;!-- raw HTML omitted -->
この記事で作ったポケベルは、実際にこれで文字列をWeb公衆電話からRaspberry Pi製のポケベルへと送信しています。&lt;/p>
&lt;h2 id="heading-7">ポケベル本体も、はんだづけなしで作れます&lt;/h2>
&lt;p>さて、ここまでモノが揃っているのなら、実際のハードウェアに文字列を送信してみたいな、と思われたことではないでしょうか。そこで、今回のポケベルは全てはんだづけを行っていますが、「Grove」と呼ばれる規格に対応したディスプレイやブザーを使うことで、一切はんだづけをせずに同じポケベルを作っていただける方法を準備しました！&lt;!-- raw HTML omitted -->
その詳細は次回の記事に書かせていただきますので、ご興味を持たれたかたはぜひ当ブログをチェックしておいてくださいね！&lt;/p></description></item><item><title>パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#3 - 改造編</title><link>https://dotstud.io/blog/usb-power-supply-making3/</link><pubDate>Sat, 05 May 2018 14:00:26 +0900</pubDate><guid>https://dotstud.io/blog/usb-power-supply-making3/</guid><description>&lt;p>こんにちは、ものづくり担当のうこ（&lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a>）です。&lt;/p>
&lt;p>みなさんは、&lt;strong>電子工作をするときの電源はどこから取っていますか？&lt;/strong>&lt;/p>
&lt;p>Arduinoをよく使われる方だと5V端子や3.3V端子から取っている場合が非常に多いですが、ではArduinoを使わない、ピュアな電子工作の場合だとどうしたらいいでしょうか？&lt;/p>
&lt;p>第1回と第2回では、USB端子から給電可能なデバイスを作るための基礎知識と理論を解説しました。今回は、&lt;!-- raw HTML omitted -->実際にUSBを使ったモノづくりに挑戦していきます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">改造に使うもの&lt;/h2>
&lt;p>今回、電池駆動の機器をUSB駆動に改造するにあたって使うものを紹介します。&lt;/p>
&lt;h3 id="100">電池式ライト（100均）&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/770618be-11f5-dea1-d8ac-7d7fc194f5d1.png" alt="IMG_20180408_0023009.png" title="IMG_20180408_0023009.png">&lt;/p>
&lt;p>今回は、100円ショップ・ダ◯ソーで購入した電池式のライトを、USBモバイルバッテリーから給電して光らせる仕様に改造してみます。&lt;/p>
&lt;p>このライトは、単3乾電池3本（4.5V）で動作するタイプのものなので、USB電源を直接接続することが可能だと思われます。というのも、100円ショップの商品は似ているが設計の異なるものが多種あるため、改造を施した全てが「必ず動作する」と断言することが難しいです。&lt;/p>
&lt;p>ただ、100円ショップの商品は、失敗しても元々が安いので恐れずにどんどん試すことができます。ショートによる火事などには気をつけなければいけませんが、保護回路が入っていて安全に配慮されている製品も増えてきていますので、積極的に活用することをオススメしたいです。&lt;/p>
&lt;p>他にどんな電池タイプのものがUSB駆動に改造可能かは、前回の「&lt;a href="https://dotstud.io/blog/usb-power-supply-making2">&lt;strong>理論編&lt;/strong>&lt;/a>」を参照にしてみてください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="usb">USBケーブル&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/c0e90b33-2ddb-b5ff-2822-07851aa1a64d.png" alt="IMG_20180408_0023480.png" title="IMG_20180408_0023480.png">&lt;/p>
&lt;p>第1回では「&lt;a href="https://dotstud.io/blog/usb-power-supply-making/#%E5%85%A5%E6%89%8B%E6%96%B9%E6%B3%95">USBケーブルは延長タイプがよい&lt;/a>」と書きましたが、今回は入手できなかったため、プリンタとの接続などで使われる「標準Aオス端子-標準Bオス端子」のケーブルを利用しました。同じ商品が手に入らなくても、似たようなものが売っていれば応用が可能なのも、100円ショップのいいところです。&lt;/p>
&lt;p>また、今回は1mのUSBケーブルを使用しましたが、リール巻きとり式のUSBケーブルのほうが収納もできて便利かもしれません（制作難易度は少しあがります）。&lt;/p>
&lt;h2 id="heading-1">実際に改造してみよう&lt;/h2>
&lt;h3 id="heading-2">電源部分の確認&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/c0df5c1e-e295-8913-68bb-d44c6b6ed917.png" alt="IMG_20180408_0025270.png" title="IMG_20180408_0025270.png">
この製品は下部に電源フタがついています。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/bf7d36f5-24f7-92fe-94d1-bdb2dcdee00c.png" alt="IMG_20180408_0024225.png" title="IMG_20180408_0024225.png">
中に電池ホルダーがあります。&lt;/p>
&lt;p>電池は基本的に直列接続ですので、端子を見て、どこがプラスでどこがマイナスなのか判断しましょう。&lt;strong>電池同士をつないでいない端子が機器のプラスとマイナスとなります&lt;/strong>。&lt;/p>
&lt;p>フタ部分に穴をあけてUSBケーブルを通し、ホルダーのところでプラスとマイナスの端子を接続することで通電できます。実際にやっていきましょう。&lt;/p>
&lt;h3 id="usb-1">USBケーブルを中にいれる準備&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/1bcce441-b427-04a3-b0e1-def65ce6f834.png" alt="IMG_20180408_0233088.png" title="IMG_20180408_0233088.png">
バッテリに挿す側は標準Aオス端子のほうなので、今回は不要な標準Bオス端子側を短く切ってしまいます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/68193c53-fc39-56c4-2969-f0616ed4a9a3.png" alt="IMG_20180408_0234587.png" title="IMG_20180408_0234587.png">
電池フタのLEDライトでないほう（末端側）からUSBケーブルを通し、そこから遠いほうの電池ホルダー端子までケーブルを到達させることを想定します。そうすると、この電池ホルダーと同じ長さぶんだけ、USBケーブルの外側の皮膜を取り除けばうまく配線できそうです。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/5c2b2c13-2b8a-1796-dd56-c1e6c8ad0134.png" alt="IMG_20180408_0244323.png" title="IMG_20180408_0244323.png">
皮膜を取り除くと4本の線がでてきます。電源線である赤と黒の線だけ、先端の皮膜をさらに取り外しておきます。緑と白の2本はこのままおいておきます。&lt;/p>
&lt;p>USBケーブルの中身については、詳細は第1回の「&lt;a href="https://dotstud.io/blog/usb-power-supply-making/">&lt;strong>基礎知識編&lt;/strong>&lt;/a>」を参照してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/30f0c3b6-3cce-0684-51a3-cd9018c6b6dc.png" alt="IMG_20180408_0238596.png" title="IMG_20180408_0238596.png">
電池フタの末端側をV字の形にニッパで切り取り、USBケーブルが入るようにします。丸型でなくV字にするのは、&lt;strong>V字の直線部分がUSBケーブルの皮膜に食い込むことで、引っ張っても外れにくくするため&lt;/strong>です。&lt;/p>
&lt;p>なお今回は &lt;del>力加減や形状の問題があり&lt;/del> 下手くそだったため、V字に切るときフタにヒビが入ってしまいましたので、接着剤で補修しています。&lt;/p>
&lt;p>はんだごて等で溶かす方法もありますが、有害なガスが発生し、コテが傷みやすくなることから、あまりオススメはできません。&lt;/p>
&lt;h3 id="heading-3">はんだづけ&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/30a0f044-5c11-3db1-8fa0-293d069fe2d3.png" alt="IMG_20180408_0252091.png" title="IMG_20180408_0252091.png">&lt;/p>
&lt;p>この段階が最も重要なポイントで、 &lt;strong>はんだづけ部分に負荷をかけないこと&lt;/strong>が、接触不良などを起こさず安定した動作を実現するキモとなります。&lt;/p>
&lt;ol>
&lt;li>使用しない緑と白の信号線を、使用しない電源端子（ここではライト側のマイナス端子）に引っかける&lt;/li>
&lt;li>赤の電源線をマイナス端子に一度通し、ライト側のプラス端子にはんだづけする&lt;/li>
&lt;li>緑と白の信号線をピンとひっぱり、赤の電源線がすこしだけ「&lt;strong>たるむ&lt;/strong>」ようにする&lt;/li>
&lt;/ol>
&lt;p>このようにすることで、ケーブルが引っ張られたとしてもその負荷は緑と白の信号線にかかり、マイナス端子のバネの効果で吸収することで、 &lt;strong>はんだづけ部分に負荷がかからなくなる&lt;/strong>ようになります。&lt;/p>
&lt;p>はんだづけは端子表面でなく、側面のエッジに引っ掛けるようにするとのりやすいです。うまく接着しない場合ははんだごての出力を大きいものにするか、フラックスを塗ることで比較的つきやすくなります。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/3a173fe6-8cc5-67f0-3d7a-e4715b51ce3f.png" alt="IMG_20180408_0259427.png" title="IMG_20180408_0259427.png">
折り返した緑と白の信号線、赤の電源線、マイナス端子を含めて、ケーブルタイでしっかりととめてしまいます。必須ではありませんが、これを行わない場合は、&lt;!-- raw HTML omitted -->何らかの手段で緑と白の信号線を固定する必要&lt;!-- raw HTML omitted -->があります。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/f10d37b3-ef0e-a675-9a7d-207f75d1abce.png" alt="IMG_20180408_0305008.png" title="IMG_20180408_0305008.png">
残りの黒の電源線は、すでに引っ張り負荷に対する軽減対策はしているので、そのまま接続してしまってもかまいません。ただし長すぎて収まりが悪くなりそうなので、もう一つの使っていないマイナス端子の中を通してから、機器のマイナス端子にはんだづけしました。&lt;/p>
&lt;p>ここでは、引っかける方もはんだづけする方も両方ともマイナス端子なので、間違えないように気をつけましょう。&lt;/p>
&lt;p>これで完成です！&lt;/p>
&lt;h3 id="heading-4">完成図&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/d2b2a6ef-ca38-8434-a630-af0566648161.png" alt="IMG_20180408_0305529.png" title="IMG_20180408_0305529.png">
上から見るとこのようになっています。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/5cba4304-3393-f47b-6040-2915b09ba3f1.png" alt="IMG_20180408_0307141.png" title="IMG_20180408_0307141.png">
V字に切り込みを入れたフタをつけたところ、ぴったりはまってくれました。&lt;strong>穴が○状ではなく△のようになっていること&lt;/strong>と、&lt;strong>この△の内接円の径がUSBケーブルの太さよりも若干小さくなるように作ること&lt;/strong>（だいたいでOK）がポイントです。&lt;/p>
&lt;h2 id="heading-5">動作確認&lt;/h2>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/1ddc2159-b82b-6cda-58e3-0747da3f7555.png" alt="IMG_20180408_0309439.png" title="IMG_20180408_0309439.png">
早速手持ちのUSBモバイルバッテリーと接続してみましょう！&lt;/p>
&lt;p>ライト本体上部のスイッチを押してみます。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/989e2dc5-b57e-07bf-0f7c-ab3219ad6cbd.png" alt="IMG_20180408_0309364.png" title="IMG_20180408_0309364.png">
ちゃんと点灯してくれました！そして意外と明るく、実際に役に立ってくれそうですね。&lt;/p>
&lt;p>電池駆動機器は、機器本体の設計をしっかりしていないと（機器回路の負荷抵抗が非常に低いなど）、際限なく電流を流してしまう危険があります。&lt;/p>
&lt;p>モバイルバッテリー駆動の場合は、ショートなどの改造ミスを除くと、&lt;!-- raw HTML omitted -->バッテリー側で電流の制御をしてくれるため逆に安全で効率がよい場合があります&lt;!-- raw HTML omitted -->。&lt;/p>
&lt;p>もし愛用している安い電池駆動製品があり、&lt;strong>持ち運ばないなど電池である必要がない場合&lt;/strong>は、ぜひこの改造方法を検討してみてくださいね。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->※ただし、当記事を参考にした電子製品の改造は、&lt;strong>あくまでも自己責任&lt;/strong>にて行ってくださいますようお願いいたします。&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#2 - 理論編</title><link>https://dotstud.io/blog/usb-power-supply-making2/</link><pubDate>Mon, 30 Apr 2018 14:00:26 +0900</pubDate><guid>https://dotstud.io/blog/usb-power-supply-making2/</guid><description>&lt;p>こんにちは、ものづくり担当のうこ（&lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a>）です。&lt;/p>
&lt;p>みなさんは、&lt;strong>電子工作をするときの電源はどこから取っていますか？&lt;/strong>&lt;/p>
&lt;p>Arduinoをよく使われる方だと5V端子や3.3V端子から取っている場合が非常に多いですが、ではArduinoを使わない、ピュアな電子工作の場合だとどうしたらいいでしょうか？&lt;/p>
&lt;p>第1回は、USB端子から給電可能なデバイスを作るための基礎知識を解説しました。今回は、&lt;!-- raw HTML omitted -->電池/USB電源と機器の関係について解説していきたいと思います。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">電源と機器の関係&lt;/h2>
&lt;p>改造を始める前に、&lt;!-- raw HTML omitted -->&lt;strong>電源と機器の関係&lt;/strong>&lt;!-- raw HTML omitted -->について知っておきましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず基本として、&lt;/p>
&lt;ol>
&lt;li>「&lt;strong>電子機器&lt;/strong>」の動作には「&lt;strong>電流&lt;/strong>」が必要である（定格電流といいます）&lt;/li>
&lt;li>「&lt;strong>電子機器&lt;/strong>」と「&lt;strong>電源&lt;/strong>」で構成される回路には「&lt;strong>抵抗値（負荷）&lt;/strong>」が存在する&lt;/li>
&lt;li>「&lt;strong>抵抗値&lt;/strong>」がある回路に、「&lt;strong>電子機器&lt;/strong>」が必要とする電流を流せるような「&lt;strong>電圧&lt;/strong>」が必要である&lt;/li>
&lt;/ol>
&lt;p>以上の3点を覚えておいてください。&lt;/p>
&lt;h3 id="heading-1">電源が電池の場合&lt;/h3>
&lt;p>ここでは、改造対象を「&lt;strong>電池を利用する電子機器&lt;/strong>」としたときの電源（＝電池）と機器の関係の説明とします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/20aa277d-f791-a33c-6249-59379787e428.png" alt="1.png" title="1.png">&lt;/p>
&lt;p>電池は「&lt;strong>定電圧電源&lt;/strong>」といい、&lt;!-- raw HTML omitted -->電圧が一定で、電流が負荷によって変動する電源&lt;!-- raw HTML omitted -->です（厳密には負荷によって電圧は低下します）。&lt;/p>
&lt;p>機器が必要とする電流I（以下、定格電流I）は、上図において下記の式で表せます。&lt;/p>
&lt;pre>&lt;code>I = V/(R1+R2)
&lt;/code>&lt;/pre>&lt;p>つまり、定格電流Iを機器側で定めるには&lt;!-- raw HTML omitted -->機器の内部抵抗R2（＝機器全体の負荷）を調整&lt;!-- raw HTML omitted -->すればよく、R2が十分に調整できない場合は&lt;!-- raw HTML omitted -->電池の個数を変えて電圧Vを大きくする&lt;!-- raw HTML omitted -->ことで、R2の調整幅を変えられます。&lt;/p>
&lt;p>また、R2が限りなく0に近い（無負荷またはショートの）場合を考えると、R1は非常に小さい値ですが0にはならないため、電流Iは下記の式で表されます。&lt;/p>
&lt;pre>&lt;code>I = V/R1
&lt;/code>&lt;/pre>&lt;p>これは&lt;strong>乾電池から取り出すことのできる最大の電流&lt;/strong>です。このようなことは一時的には可能ですが、&lt;!-- raw HTML omitted -->あまりに大きいために発熱・発火などが起こることがある&lt;!-- raw HTML omitted -->ので、機器側を適切に設計する必要があります。&lt;/p>
&lt;h3 id="usb">電源がUSBの場合&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/e736a7f5-cb9e-c881-7153-eaeffa0df369.png" alt="2.png" title="2.png">&lt;/p>
&lt;p>次にUSB電源を考えてみます。USB電源も同じく、5Vの「&lt;strong>定電圧電源&lt;/strong>」ですが、&lt;!-- raw HTML omitted -->出力可能な電流の上限値Imaxが明示的に定められています&lt;!-- raw HTML omitted -->。このため、内部抵抗を直接考慮する必要はありません。&lt;/p>
&lt;p>この電流値はモバイルバッテリーの裏面などで確認することができます。&lt;/p>
&lt;p>このとき、機器が必要とする電流Iは、USB電源の電圧が5Vなので&lt;code>V = 5&lt;/code>であり、下記の式で表すことができます。&lt;/p>
&lt;pre>&lt;code>I = 5/R2 (ただし I ≦ Imax)
&lt;/code>&lt;/pre>&lt;p>USB電源の場合は、電圧が5Vと固定されているので、&lt;!-- raw HTML omitted -->定格電流を定めるにはR2を調整するしかありません&lt;!-- raw HTML omitted -->。ただしR2が小さかったとしても、流せる電流の最大値がImaxと決まっているため、大電流を流しすぎるといったことは起こりにくい回路となります。&lt;/p>
&lt;h3 id="usb-1">電池を電源とする回路を、USB電源で駆動する場合&lt;/h3>
&lt;p>例として、通常の乾電池（1.5V）を2本必要とする機器（3V動作）と、4本必要とする機器（6V動作）を考えてみます。それぞれの機器の定格電流Iは以下のようになります。&lt;/p>
&lt;ul>
&lt;li>乾電池2本を必要とする回路：&lt;code>I = 3/(R1+R2)&lt;/code>&lt;/li>
&lt;li>乾電池4本を必要とする回路：&lt;code>I = 6/(R1+R2)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>この定格電流Iは、計算値より&lt;!-- raw HTML omitted -->大きすぎると機器の破損の原因となり、小さすぎると機器が動作しない原因となります&lt;!-- raw HTML omitted -->が、ある程度幅がある場合が多いです。&lt;/p>
&lt;p>次に、この2つの回路の定格電流を左辺、USB電源が出力可能な最大電流値を右辺として比較すると、以下のようになります。&lt;/p>
&lt;ul>
&lt;li>乾電池2本を必要とする回路：
&lt;ul>
&lt;li>&lt;code>3/(R1+R2) &amp;lt; 5/R2&lt;/code> …… USB電源電流で出力可能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>乾電池4本を必要とする回路：
&lt;ul>
&lt;li>&lt;code>R2 &amp;gt; Imax&lt;/code>のとき：&lt;code>6/(R1+R2) &amp;gt; 5/R2&lt;/code> …… USB電源電流では足りない&lt;/li>
&lt;li>&lt;code>R2 = Imax&lt;/code>のとき：&lt;code>6/(R1+R2) = 5/R2&lt;/code> …… USB電源電流で出力可能&lt;/li>
&lt;li>&lt;code>R2 &amp;lt; Imax&lt;/code>のとき：&lt;code>6/(R1+R2) &amp;lt; 5/R2&lt;/code> …… USB電源電流で出力可能&lt;/li>
&lt;li>ただし、&lt;code>R1&lt;/code>は非常に小さく、通常&lt;code>R2 &amp;gt;&amp;gt; R1&lt;/code>であるため「USB電源電流では足りない」&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>答えは単純で、基本的に&lt;!-- raw HTML omitted -->電圧5V以下で動作する電池駆動電子機器はUSB電源で動作可能&lt;!-- raw HTML omitted -->となりますが、以下の&lt;strong>電流に関する条件&lt;/strong>で動作要件が細かく変化します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>具体的な例だと、乾電池3本（4.5V）を必要とする機器は、大抵はそのまま動作させることができます。しかし、乾電池2本（3V）以下だと定格オーバーとなることが多く、レギュレータという部品を使って電圧を降下させることで動作が可能となります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>そもそもR2が5V以上の入力で定格電流を流せるような設計となっていることが多いため、電源に十分な電流を流す能力があっても、電圧が低いと機器内部で定格電流を満たせずに動作ができないことが多いです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>電子機器は、基本的な設計として&lt;!-- raw HTML omitted -->供給電圧は一定のまま、動作状況によって内部抵抗（負荷）が変化するので必要な電流も変化する&lt;!-- raw HTML omitted -->ような仕組みとなっています。つまり、&lt;strong>電源が供給可能な電流範囲内に機器の求める電流（定格電流）があれば動作可能&lt;/strong>なので、電圧が多少違っていても動作自体は可能であるということになります。逆の言い方をすると、&lt;strong>電子機器はある一定電圧のもとで最適なパフォーマンスを発揮できるように設計されている&lt;/strong>ということになります。&lt;/p>
&lt;h2 id="heading-2">具体的にどんなものが改造できる？？&lt;/h2>
&lt;p>ややこしく理論的なものを解説してしまいましたが、基本的には&lt;strong>乾電池で動く電子機器で、必要な電池の個数が1〜4個のもの&lt;/strong>であれば大抵動作します。&lt;/p>
&lt;p>ただし、ライトのようにLEDだけを使う電子機器と、モーターを用いる扇風機のように大電流を必要とする電子機器とでは、元々想定されている電池の個数によって&lt;!-- raw HTML omitted -->USB電源で動作可能なものとそうでないものに分かれます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>また、USB電源をPCからとる際は、過電流などによる故障に十分注意して行ってください。&lt;/p>
&lt;p>実際に僕がUSB化改造をしてみたもののうち、「LED・電球」を用いる電子機器と、電流が多く必要な「モーター・ヒーター」などを用いる電子機器とに分けて、動作が可能だったものを以下の表に示します。&lt;/p>
&lt;p>○：USB(モバイルバッテリー)から直接給電可能&lt;!-- raw HTML omitted -->
△：レギュレータを使用して電圧調整が必要&lt;!-- raw HTML omitted -->
ー：未検証&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">必要電圧 / 駆動対象&lt;/th>
&lt;th align="center">LED・電球&lt;/th>
&lt;th align="center">モーター・ヒーター&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">1.5V（乾電池1本）&lt;/td>
&lt;td align="center">△&lt;/td>
&lt;td align="center">△&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">3.0V（乾電池2本）&lt;/td>
&lt;td align="center">△&lt;/td>
&lt;td align="center">◯&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">4.5V（乾電池3本）&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;td align="center">◯&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">6.0V（乾電池4本）&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;td align="center">ー&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>乾電池4本を必要とする機器は正常に動作しない可能性が高く、動作してもパフォーマンスが低下（ライトが暗めであるなど）する場合がほとんどだと考えられます。&lt;/p>
&lt;p>また、製品によって定格電流の値や幅が異なるため、すべての機器でこのように動作するという保証はありません。予めご了承ください。&lt;/p>
&lt;p>さて、電源と機器の関係がわかったらいよいよ次回は改造していきます！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>パソコンやモバイルバッテリーに繋いで動かせるデバイスを作ろう！USB電子工作のすすめ#1 - 基礎知識編</title><link>https://dotstud.io/blog/usb-power-supply-making/</link><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/usb-power-supply-making/</guid><description>&lt;p>こんにちは、ものづくり担当のうこ(&lt;a href="https://twitter.com/harmoniko">@harmoniko&lt;/a>)です。&lt;/p>
&lt;p>みなさんは、&lt;strong>電子工作をするときの電源はどこから取っていますか？&lt;/strong>&lt;/p>
&lt;p>Arduinoをよく使われる方だと5V端子や3.3V端子から取っている場合が非常に多いですが、ではArduinoを使わない、ピュアな電子工作の場合だとどうしたらいいでしょうか？&lt;/p>
&lt;p>今回は、電子工作用電源としても非常に有用な&lt;strong>USBの基本と扱い方&lt;/strong>についてお伝えします。&lt;/p>
&lt;h2 id="usb">USBのしくみ&lt;/h2>
&lt;p>「&lt;strong>USB&lt;/strong>」は「&lt;strong>Universal Serial Bus&lt;/strong>」の略で、PCとその周辺機器の間の汎用的な通信規格として1996年に登場しました。USBは1対2本の信号線（※）で順番にデータを送る「&lt;strong>シリアル接続&lt;/strong>」という方式で、複数のデバイスを吊り下げられる「&lt;strong>バス規格&lt;/strong>」の1つです。&lt;/p>
&lt;p>※…USB 2.0まで&lt;/p>
&lt;p>端子は従来のものと比べてシンプルになり、ホストとデバイスをすぐに区別できるようなものになりました。&lt;/p>
&lt;p>USBを使って通信をするには、USBを制御する専用のコントローラハードウェアが必要となるため、電子工作では少し難易度があがります。ただし、&lt;strong>電源を使うだけならケーブルを切って電源のVcc線（+）とGnd線（-）を引き出すだけでよい&lt;/strong>ので、スマホが普及しはじめるよりも早くから電源用ケーブルとしても使われるようになりました。&lt;/p>
&lt;p>USBの簡単な特徴をまとめると、以下のようになります。&lt;/p>
&lt;ul>
&lt;li>通信は、 1つの「ホスト」（PC側）と1〜複数の「デバイス」（周辺機器側）との間で行われる。&lt;/li>
&lt;li>ホスト側とデバイス側で端子形状が区別されている（タイプC端子を除く）。&lt;/li>
&lt;li>&lt;strong>電源供給用のケーブルおよび端子として使うなら扱いは簡単！&lt;/strong>&lt;/li>
&lt;li>ここ数年普及してきている「USB PD」は、大電力の供給が可能でMacBookの給電などにも利用されている。&lt;/li>
&lt;/ul>
&lt;p>さて当記事は、 &lt;strong>「電子工作において電源として気軽に使えるUSB」&lt;/strong> を知っていただくためのものですので、扱いの簡単な「USB2.0規格（タイプC端子を除く）」までを使う前提の説明にとどめます。&lt;/p>
&lt;p>USB3.0規格以降は端子が増えたり電源規格が多様になったりしているため、電子工作での利用であれば、USB2.0規格までの理解で問題ありません。&lt;/p>
&lt;p>さらに詳しくUSBについて知りたい方は、以下のリンクを参考にしてください。&lt;/p>
&lt;p>⇒ 参考: &lt;a href="https://thinkit.co.jp/article/11142">現代PCの基礎知識(7):仕様書を紐解くとわかる―本当はややこしいUSB（Think IT）&lt;/a>&lt;/p>
&lt;h3 id="heading">電源に使うことのメリット&lt;/h3>
&lt;ul>
&lt;li>モバイルバッテリー、PC、コンセントアダプタなど、多彩なソースが選べる。&lt;/li>
&lt;li>給電方法に汎用性があるため、必要なパーツが安くて手に入りやすい。&lt;/li>
&lt;/ul>
&lt;h3 id="heading-1">電源に使うことのデメリット&lt;/h3>
&lt;ul>
&lt;li>「外部電源」となるため、電池として本体に含めることができない。&lt;/li>
&lt;li>規格上、5V電圧以外を扱うときや大電流が必要なものには適さない（USB PDを除く）。&lt;/li>
&lt;/ul>
&lt;h3 id="heading-2">仕様の一覧&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">&lt;/th>
&lt;th align="center">USB 1.0&lt;/th>
&lt;th align="center">USB 1.1&lt;/th>
&lt;th align="center">USB 2.0&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">端子タイプ（ホスト側）&lt;/td>
&lt;td align="center">標準A&lt;/td>
&lt;td align="center">標準A&lt;/td>
&lt;td align="center">標準A, タイプC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">端子タイプ（デバイス側）&lt;/td>
&lt;td align="center">B&lt;/td>
&lt;td align="center">B&lt;/td>
&lt;td align="center">ミニA, マイクロA, ミニB, マイクロB, タイプC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">通信速度&lt;/td>
&lt;td align="center">12Mビット/秒&lt;/td>
&lt;td align="center">12Mビット/秒&lt;/td>
&lt;td align="center">480Mビット/秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">定格電圧&lt;/td>
&lt;td align="center">同右&lt;/td>
&lt;td align="center">同右&lt;/td>
&lt;td align="center">約5V（ホスト側4.4~5.25V）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">最大電流&lt;/td>
&lt;td align="center">500mA&lt;/td>
&lt;td align="center">500mA&lt;/td>
&lt;td align="center">500mA（USB BC拡張:1.5A）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>以上は通信に関する基本的なバージョン仕様ですが、さらにUSB2.0を拡張したUSB電源専用規格である「USB BC（Battery Charging）」というものがあり、1.5Aまでの電流を流すことが可能となっています。&lt;/p>
&lt;p>また、電子工作で利用するためのUSBパーツは100円ショップなどで購入できます。&lt;strong>100円ショップなどで安価に入手可能なUSBパーツはほぼ100%がUSB2.0規格またはUSB BC規格のもの&lt;/strong>となります。&lt;/p>
&lt;p>よって、電子工作の&lt;strong>電源として&lt;/strong>USBを使ってみたいときは&lt;strong>USB2.0規格またはUSB BC規格&lt;/strong>に準じたUSB部品の仕様を知っておけばOKです。&lt;/p>
&lt;h2 id="usb-1">USBケーブルの配線図&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/151/1.png" alt="">&lt;/p>
&lt;p>USB2.0には、電源線の5V（VccやVBUSとも）とGND、信号線のD-とD+の合計4種類の線があります。ケーブルのほとんどは2層構造になっていて、内側に収められている4本の線の色分けも上図のように決まっています。&lt;/p>
&lt;p>電子工作でUSBを使うときは、「標準Aメス端子を基板に実装する」か、上図のような「標準Aオス端子がついたケーブルの電源線を接続する」ことになるので、端子の順番や色分けは覚えておくと楽です。&lt;/p>
&lt;h2 id="heading-3">電圧と電流&lt;/h2>
&lt;p>USB電源の基本は「&lt;strong>電圧5V/電流500mAまで&lt;/strong>」です。&lt;/p>
&lt;p>といっても、これはパソコンのような「電源供給」を主目的としないホストから給電する場合の「USB2.0規格」による制限値です。&lt;/p>
&lt;p>電子工作でUSB電源を扱う場合は、モバイルバッテリーやUSBコンセントなどからの給電がほとんどになると思われます。その場合は、USB BC規格の上限値である1.5Aとなりますが、普通はバッテリーやコンセントに最大出力が書いてあります（例：5V/800mA）ので、電流値の最大はそれに従いましょう。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="usb-2">USBケーブルの注意点&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->⇒ 参考: &lt;a href="https://hanpenblog.com/1472/">乱立するスマホ向け急速充電の規格について調べた（HANPEN-BLOG）&lt;/a>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>電子工作での利用を考えると電流消費を見ることが大事で、個人で製作する小規模な回路であればほとんどが500mA以内に収まることが多いです。&lt;/p>
&lt;p>ヒーターやモーターを使った回路は例外的で、接続された個数や負荷で変動しますが、最大電流が容易に1Aを超えてしまうことがあります。しかし、どのような場合であっても、個人製作された電子回路は漏電流やショートへの配慮、適切な電流制限などが行われていないことが大半です。&lt;/p>
&lt;p>&lt;strong>基本的には、USB電源を利用する自作の電子回路は、安全上の理由からパソコンに接続して給電してはいけません。&lt;/strong>&lt;/p>
&lt;p>⇒ 参考：&lt;a href="http://www.wheel.gr.jp/~dai/hardware/usb-port.html">USBポートは電源ではありません&lt;/a>&lt;/p>
&lt;p>現実には今のパソコンは全て保護回路が入っているため、ブレッドボードを繋げたArduinoにパソコンから給電するといったようなことを行なっていてもまず問題はありません。しかし&lt;strong>危険性は少なからずあるもの&lt;/strong>だとして意識してもらえれば幸いです。&lt;/p>
&lt;p>（15年ほど前のパソコンでは、USB端子に500mA以上の過電流を流すといきなりパソコンの電源ごと落ちるものもありました。）&lt;/p>
&lt;h2 id="heading-4">入手方法&lt;/h2>
&lt;p>&lt;strong>おすすめは100円ショップ&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/151/2.png" alt="">&lt;/p>
&lt;p>100円ショップの電気系コーナーに行くと、どこに行っても大抵はUSBケーブルが置いてあります。USBケーブルの中でも取り扱いが多いのは、おそらく次の3つでしょう。&lt;/p>
&lt;ul>
&lt;li>Aオス端子-microBオス端子（スマホ充電用）&lt;/li>
&lt;li>Aオス端子-Bオス端子（プリンタなどの接続用）&lt;/li>
&lt;li>Aオス端子-Aメス端子（ケーブル延長用）&lt;/li>
&lt;/ul>
&lt;p>このうち、最後の &lt;strong>Aオス端子-Aメス端子（ケーブル延長用）&lt;/strong> は、置いていない店舗もありますが、&lt;/p>
&lt;ul>
&lt;li>ケーブル部分が比較的長い。&lt;/li>
&lt;li>基本的にはAオス端子側を使うが、工作の内容によってはAメス端子があると便利なことがある。&lt;/li>
&lt;/ul>
&lt;p>といった点から、電子工作で利用するには最もおすすめなケーブルとなっています。売られているのを発見したら、ぜひ買っておきましょう。&lt;/p>
&lt;h2 id="heading-5">実際に電子工作で使うには&lt;/h2>
&lt;p>USBについて、どんなものなのかなんとなくおわかりいただけましたでしょうか？&lt;/p>
&lt;p>とりあえず要約すると、 &lt;strong>「100円で手に入って電子工作で簡単に利用できる汎用電源インターフェース」&lt;/strong> といったところでしょうか。では、実際に使うにはどうすればいいかを見ていきましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/151/3.png" alt="">&lt;/p>
&lt;p>USBケーブルを電源として利用する上で最も重要なパーツが「Aオス端子」部分となります。&lt;/p>
&lt;p>100円ショップで購入できるUSBケーブルは少なくとも一方がこの端子ですので、この端子から伸びるケーブルを十分長く残したうえでニッパで切断します。長さは、製作するモノによって適切に決めてください。あとから調整できるという意味では長めに切り取るのがよいでしょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/151/4.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/151/5.png" alt="">
切り取った部分の一番外側の皮膜をニッパまたは皮膜剥き用のニッパで1cm程度除去します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/151/6.png" alt="">
すると細い4本のケーブルが中から出てきますが、このうち赤色と黒色がそれぞれ電源となります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/151/7.png" alt="">
残りの2本は信号線で、~~USB BC規格として大きめの電流を流したい場合は、この信号線を200Ωの抵抗でショートします。が、実際には何もしなくても給電はなされます。~~ここでは簡単にするため切り落としました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>これで、Aオス端子が電源側、切断したほうが電子回路側となります。&lt;/p>
&lt;p>さて、次回は電池駆動の機器をUSB駆動に改造するために、電源と機器の関係について考えてみたいと思います。&lt;/p>
&lt;p>お楽しみに。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>フォトダイオードでリモコンの信号を検出してみよう</title><link>https://dotstud.io/blog/photodiode-remote-controll-signal/</link><pubDate>Wed, 02 Aug 2017 16:42:19 +0900</pubDate><guid>https://dotstud.io/blog/photodiode-remote-controll-signal/</guid><description>&lt;p>こんにちは、ものづくり担当のうこ（&lt;a href="https://twitter.com/harmoniko/">@harmoniko&lt;/a>）です。&lt;/p>
&lt;p>今回は、フォトダイオードというパーツを使ってリモコンの信号を読み取る方法を紹介します！&lt;/p>
&lt;h2 id="heading">フォトダイオードとは？&lt;/h2>
&lt;p>半導体素子のひとつで、照射される光の強さによって流れる電流の強さが変化します。太陽光パネルと仕組みはほとんど同じで、光によって電流を発生しますが、非常に小さいため電源としては使用されません。&lt;/p>
&lt;p>一口にフォトダイオードと言っても様々な種類があります。光を検出するセンサとしてはほかにCdSなどがありますが、応答の速さ・感度・信号強度特性・対応する波長などに優位性があり、リモコンの受光器などとして産業用途に幅広く利用されています。&lt;/p>
&lt;p>今回はそんなリモコンの受光器を作り、信号の中身をみてみましょう。&lt;/p>
&lt;h2 id="heading-1">リモコンの仕組み&lt;/h2>
&lt;p>リモコンは、赤外線LEDを高速で点滅させて家電などに信号を送っています。信号の中身は、国内ではNECが開発した方式が主流で、次いで家電製品協会の方式、ソニーなどの独自方式があります。今回は、最も普及しているNEC方式を用いたリモコン信号検出システムを作ってみます。&lt;/p>
&lt;p>このフォーマットを採用している主なメーカーとして、NEC・東芝・日立などがあります。これらのメーカーのリモコンなどをお持ちでしたら、ぜひ作ってみてください。&lt;/p>
&lt;p>【参考】&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.asahi-net.or.jp/~gt3n-tnk/IR_TX1.html">赤外線リモコンのフォーマット&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="heading-2">作ってみよう&lt;/h2>
&lt;h3 id="heading-3">準備するもの&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/117/1.png" alt="">&lt;/p>
&lt;ul>
&lt;li>Arduino Due × 1&lt;/li>
&lt;li>ブレッドボード × 1&lt;/li>
&lt;li>抵抗1kΩ × 1&lt;/li>
&lt;li>フォトダイオード S5971 × 1&lt;/li>
&lt;li>ジャンパワイヤ × 4&lt;/li>
&lt;li>黒画用紙(3cm×6cmぐらい)&lt;/li>
&lt;li>USBマイクロBケーブル&lt;/li>
&lt;/ul>
&lt;h3 id="heading-4">作り方&lt;/h3>
&lt;h4 id="heading-5">フォトダイオードに黒画用紙を巻く&lt;/h4>
&lt;p>&lt;img src="https://dotstud.io/img/blog/117/2.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/117/3.png" alt="">&lt;/p>
&lt;p>フォトダイオードには、細長く切った黒画用紙を巻き寿司のように巻きつけてテープで固定します。こうすることでフォトダイオードを常に暗い状態にし、光の誤検出を防ぎます。&lt;/p>
&lt;h4 id="heading-6">配線&lt;/h4>
&lt;p>&lt;img src="https://dotstud.io/img/blog/117/4.png" alt="">
まずはじめに、ブレッドボード上に抵抗器とフォトダイオードを、上の写真のように配置します。フォトダイオードは向きに注意してください。
&lt;img src="https://dotstud.io/img/blog/117/5.png" alt="">&lt;/p>
&lt;p>次に、4つのジャンパワイヤを使って、ブレッドボードとArduino Dueを接続します。
&lt;img src="https://dotstud.io/img/blog/117/6.png" alt="">&lt;/p>
&lt;p>接続が終わったら、このような感じになっています。
&lt;img src="https://dotstud.io/img/blog/117/7.png" alt="">&lt;/p>
&lt;p>最後に、USBのマイクロBケーブルでArduino Dueとパソコンを接続して完了です。USBは、Arduino Due側は、黒いコネクタに近い方のUSBポート「Programming Port」に接続してください。&lt;/p>
&lt;h3 id="arduino-due">Arduino Dueボード対応化&lt;/h3>
&lt;p>Arduino IDEでプログラムを作成し書き込んでいきます。Arduino IDEのインストールが済んでいない方は、&lt;a href="https://www.arduino.cc/en/Main/Software">公式サイト&lt;/a>からダウンロードして進めてください。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/117/8.png" alt="">
Arduino IDEのメニューから、
Tools -&amp;gt; Boards:&amp;quot;&amp;hellip;&amp;rdquo; -&amp;gt; Board Manager&amp;hellip;
を選択すると、小さい画面が表示されます。検索窓に「due」と打ち込むと、ひとつだけヒットするパッケージがありますので、最新版をインストールしてください。&lt;/p>
&lt;p>次に、
Tools -&amp;gt; Boards&amp;rdquo;&amp;hellip;&amp;rdquo;
で、&amp;ldquo;Arduino Due (Programming Port)&amp;ldquo;を選択しておきます。&lt;/p>
&lt;h3 id="heading-7">ソースコードを書き込む&lt;/h3>
&lt;p>以下のソースコードをコピーし、スケッチにコピーしてください。&lt;/p>
&lt;pre>&lt;code>const int thresholdH = 30; // フォトダイオードの閾値(Off-&amp;gt;On)
const int thresholdL = 20; // フォトダイオードの閾値(On-&amp;gt;Off)
const int input = A0; // フォトダイオードの入力ピン
int signalCnt = -1; // 信号カウンタ
int level = 0; // フォトダイオードのanalogRead値
unsigned long offSpan; // 信号L値持続時間(計測用)
unsigned long offTime; // 信号Off時間(計測用)
unsigned long startTime; // 時間計算用
unsigned long signals = 0; // 信号保存(カスタム16bit+データ8bit+反転データ8bit)
bool now = false; // フォトダイオード状態遷移フラグ1
bool prev = false; // フォトダイオード状態遷移フラグ2
bool detected = false; // リーダコード検出フラグ
// フォトダイオードからアナログ値を読んで論理値に変換
bool photoRead() {
level = analogRead(input);
if (level &amp;gt; thresholdH) return true;
if (level &amp;lt; thresholdL) return false;
}
// リーダコード認識
bool leaderDetect() {
// 積分
unsigned long integral0 = 0;
unsigned long integral1 = 0;
startTime = micros();
// 9msループ(0.1msおまけ)
while (micros() &amp;lt; (startTime+9100)) {
if (photoRead()) integral1++;
else integral0++;
}
/*
副搬送波38kHz変調のデューティ比は1:2である
また信号で0を表す場合はPPM方式によりHとLがそれぞれ0.56ms(1:1)であるため
リーダコード以外の部分でフォトダイオードで得られるOnとOffの時間比は
Onが1に対してOffが6である
リーダコード部分は常にHであるのでOnが1に対してOffが3である
よってOnとOffの差がおおむね4倍以下であればリーダコードを判定することができる
*/
if (integral1 &amp;gt; ((integral0)/4)) return true;
else return false;
}
void setup() {
// シリアルポートを開く
Serial.begin(115200);
// アナログ入力の細かさを12bit(4096段階)に設定
analogReadResolution(12);
}
void loop() {
// ダイオードの状態確認ループ
while(now == prev) {
now = photoRead();
// 一度検出できたらループを極力回さずにディレイさせたい
// 副搬送波のL値を誤検出しないようにするため
if (now) {
if (!detected) {
// Off-&amp;gt;On遷移かつリーダコード未検出
if (leaderDetect()) {
Serial.println(&amp;quot;------- LEADER -------&amp;quot;);
detected = true;
signalCnt = -1;
}
}
}
}
// 以下は状態変化した瞬間だけ実行される
//
if (detected) {
if (now) {
// Off-&amp;gt;On遷移かつリーダコード検出済
offSpan = micros() - offTime;
// 最初のリーダコードの直後のL値
if (signalCnt &amp;lt; 0) {
// リピートの検出(3ms未満)
if (offSpan &amp;lt; 3000) {
Serial.println(&amp;quot;------- REPEAT -------&amp;quot;);
Serial.println(&amp;quot;&amp;quot;);
signals = 0;
signalCnt = -1;
detected = false;
} else {
signalCnt++;
}
} else {
// off時間が1000msより多いか少ないか
if (offSpan &amp;lt; 1000) {
// 1判定
signals += 1&amp;lt;&amp;lt;(31-signalCnt);
} else {
// 0判定
}
signalCnt++;
}
// 570msも待てば必ずLになり次のコード先頭までHにならないので誤検出しない
delayMicroseconds(570);
} else {
// On-&amp;gt;Off遷移かつリーダコード検出済
offTime = micros();
}
}
// 反転
prev = now;
// 最後まで読めたら表示する
if (signalCnt &amp;gt;= 31) {
// カスタムコード16bit
int custom = (int)(signals&amp;gt;&amp;gt;16);
Serial.print(&amp;quot;Custom code: &amp;quot;); Serial.println(custom,HEX);
Serial.print(&amp;quot; &amp;quot;); Serial.println(custom,BIN);
// データコード8bit
byte data1 = (byte)((signals&amp;gt;&amp;gt;8)&amp;amp;B11111111);
Serial.println(&amp;quot;Data code:&amp;quot;);
Serial.print(&amp;quot; &amp;quot;); Serial.print(data1,BIN); Serial.print(&amp;quot; = &amp;quot;); Serial.println(data1,HEX);
// データコード(反転)8bit
byte data2 = (byte)(signals&amp;amp;B11111111);
Serial.print(&amp;quot; &amp;quot;); Serial.print(data2,BIN); Serial.print(&amp;quot; = &amp;quot;); Serial.println(data2,HEX);
// データ検証
byte vf = data1^data2;
Serial.println(&amp;quot;Data verify: &amp;quot;);
Serial.print(&amp;quot; &amp;quot;); Serial.print(data1,HEX); Serial.print(&amp;quot; xor &amp;quot;); Serial.print(data2,HEX); Serial.print(&amp;quot; = &amp;quot;); Serial.println(vf,HEX);
if (vf == 0xFF) Serial.println(&amp;quot; [ VERIFIED ]&amp;quot;);
else Serial.println(&amp;quot; [ ERROR ]&amp;quot;);
// おわり
Serial.println(&amp;quot;------- ------ -------&amp;quot;);
Serial.println(&amp;quot;&amp;quot;);
signals = 0;
signalCnt = -1;
detected = false;
}
}
&lt;/code>&lt;/pre>&lt;h2 id="heading-8">試してみよう&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/117/9.png" alt="">
アップロードが完了したら、Tools -&amp;gt; Serial Monitor からシリアルモニタを表示させ、通信速度を「115200bps」に変更します。その状態のまま、リモコンをフォトダイオードに近づけてボタンを押すと……&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/117/10.png" alt="">
いくつか値が表示されましたね！
点線で囲まれたブロックが信号の1セットで、中身には「Custom code」「Data code」「Data verify」が入っています。
「Custom code」は製品固有のコードで、同じリモコンだと基本的に固定の値です。&lt;/p>
&lt;p>色々ボタンを押していると、「Data code」が変化するようすがわかります。「Data verify」は、信号に含まれている2つのデータを照合して、信号が壊れていないかを確認するためのものです。
&lt;img src="https://dotstud.io/img/blog/117/11.png" alt="">
自宅の扇風機のリモコンで試してみたところ、確かにボタンで値が変わっていることがわかりました。&lt;/p>
&lt;h2 id="heading-9">応用編&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/117/12.png" alt="">
Arduino IDEには「シリアルプロッタ」という、グラフを描画できる機能が備わっています。それを利用して、リモコンの信号波形を描画してみるとこんな感じになりました。規則的な波形をところどころに確認することができます。&lt;/p>
&lt;p>また、今回使用したマイコンボード「Arduino Due」は、USB接続の外付けマウス・外付けキーボードとして簡単に動作させることができるライブラリが備わっています。例えば、今回のプログラムにこの機能を取り入れて少し書き換えるだけで、普段使っているTVリモコンでパソコンの動画プレイヤーを制御、なんてこともすぐにできちゃいます。&lt;/p>
&lt;h2 id="heading-10">おわりに&lt;/h2>
&lt;p>いかがでしたでしょうか？
フォトダイオードはいろんな種類がありますが、Arduinoのようなマイコンボードを使えば意外と簡単に光センサを作ることができます。この機会にぜひ作ってみては。&lt;/p></description></item></channel></rss>