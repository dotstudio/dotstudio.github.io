<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>driving on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/driving/</link><description>Recent content in driving on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Tue, 28 Aug 2018 14:55:44 +0900</lastBuildDate><atom:link href="/series/driving/" rel="self" type="application/rss+xml"/><item><title>【ソレノイド詳細解説】IoTの力でスマホを振るとソレノイドがシュコシュコ動く仕組みを作ってみる</title><link>https://dotstud.io/blog/control-solenoid-nefrybt-nodered/</link><pubDate>Tue, 28 Aug 2018 14:55:44 +0900</pubDate><guid>https://dotstud.io/blog/control-solenoid-nefrybt-nodered/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/takudooon/">たくろーどん&lt;/a>です。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/series/driving/">これまでの記事&lt;/a>では、電子工作に使えそうな駆動部品を紹介してきました。サーボモータ、ステッピングモータときたら……次に使ってみたいのは&lt;strong>ソレノイド&lt;/strong>ですよね！&lt;/p>
&lt;p>ということで、ソレノイドをNefry BTで使えるようにしていきたいと思います。&lt;/p>
&lt;p>そして、最終的には&lt;strong>スマートフォンをシェイクするとソレノイドをシュコシュコ動かせる&lt;/strong>ようにしてみたいと思います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">ソレノイドのしくみ&lt;/h2>
&lt;p>ソレノイドとは&lt;!-- raw HTML omitted -->&lt;strong>銅線（コイル）に電流を流すことにより磁界を発生させ、磁性体の可動鉄芯を吸い寄せる（吸引）電気部品&lt;/strong>&lt;!-- raw HTML omitted -->のことです。電流を流している間は常に吸い寄せられていますが、電流を切ると吸引力はなくなります。&lt;/p>
&lt;p>下記に、その仕組みを簡単に示しました。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/2854b315-e58b-63f0-cd49-87d761625053.png" alt="仕組み.png">&lt;/p>
&lt;p>また、この動作を応用して&lt;/p>
&lt;ul>
&lt;li>プル（吸引）ソレノイド&lt;/li>
&lt;li>プッシュ（押し）ソレノイド：プッシュバーを装着した「吸引=押し」動作&lt;/li>
&lt;li>自己保持ソレノイド：永久磁石を組込むことによりそれぞれの動作を保持&lt;/li>
&lt;/ul>
&lt;p>といった種類があります。&lt;/p>
&lt;h2 id="heading-1">ソレノイドを使ってみる&lt;/h2>
&lt;p>まずは簡単な例として、Nefry BTについているスイッチを押すとソレノイドが動くようにしてみます。&lt;/p>
&lt;h3 id="heading-2">用意するもの&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://akizukidenshi.com/catalog/g/gI-02414/">NchパワーMOSFET 2SK2232&lt;/a>：スイッチングのために使用(FETはトランジスタと違って電圧でトリガーとなる)&lt;/li>
&lt;li>&lt;a href="http://akizukidenshi.com/catalog/g/gP-10761/">ソレノイド 5V ZHO-0420S-05A4.5A プッシュ型&lt;/a>&lt;/li>
&lt;li>整流ダイオード：逆起電力(ソレノイドへの電力供給停止後、ソレノイドの棒が元に戻るときに発生する起電力)を防止するため(マイコンの破壊を防止する)&lt;/li>
&lt;/ul>
&lt;h3 id="heading-3">回路&lt;/h3>
&lt;p>※&lt;strong>ソレノイドに極性(+、-)はありません&lt;/strong>！なので、安心して配線しましょう！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/255b91a2-7e2b-b5c9-6168-4cb604a35da2.png" alt="回路図.png">&lt;/p>
&lt;h3 id="heading-4">プログラム&lt;/h3>
&lt;p>「&lt;a href="https://dotstud.io/docs/nefrybt-arduino-ide-setup/">NefryBTの環境構築&lt;/a>」を参考に、Nefry BTに下記のプログラムを書き込みます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
Serial.print(&lt;span style="color:#ae81ff">115200&lt;/span>);
pinMode(D4, OUTPUT);
}
&lt;span style="color:#75715e">//FET:電圧閾値0.8～2.0V　今回使っているトランジスタの場合は！
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
digitalWrite(D4,LOW);
&lt;span style="color:#66d9ef">if&lt;/span>(Nefry.readSW()){
digitalWrite(D4,HIGH);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-5">動かしてみると&lt;/h3>
&lt;p>Nefry BTのスイッチを押すと、シュコシュコします。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/25c5ea02c0fc0e3ab327f3aff4719f28">&lt;img src="https://i.gyazo.com/25c5ea02c0fc0e3ab327f3aff4719f28.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;h2 id="iot">IoTでソレノイドをシュコシュコする&lt;/h2>
&lt;p>それでは、スマートフォンをシェイクするとソレノイドをシュコシュコ動かせるようにしていきたいと思います。ここでは、スマートフォンの加速度を利用します（スマートフォンの加速度の利用する方法は&lt;a href="https://qiita.com/minwinmin/items/af1d8ba68d0ec3f52fa9">こちら&lt;/a>に少しまとめてあります）。&lt;/p>
&lt;h3 id="node-red">Node-Redのフローを作る&lt;/h3>
&lt;p>&lt;a href="https://nodered.org/">Node-RED&lt;/a>で下記のようなフローを作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Node-REDの詳細は前回の記事をご覧ください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="nefry-bt">Nefry BTにプログラムを書き込む&lt;/h3>
&lt;p>Nefry BTに書き込むプログラムはこちらです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code> IPAddress endpoint;
const int port = 1883;
const char *pubTopic;
const char *subTopic;
const char *deviceName;
const char *mqtt_server = &amp;quot;test.mosquitto.org&amp;quot;;
WiFiClient httpsClient;
PubSubClient mqttClient(httpsClient);
void setup() {
////ソレノイドのピン設定/////////////////////////////////
pinMode(D4, OUTPUT);
//// NefryBT設定 ////////////////////////////////////////
// NefryBT
subTopic = &amp;quot;/NefryBT/SOLE&amp;quot;;
deviceName = &amp;quot;NefryBT_SOLE&amp;quot;; // 複数台で利用する場合は必ずかぶらないように変更する
Serial.begin(115200);
mqttClient.setServer(mqtt_server, port);
mqttClient.setCallback(mqttCallback);
connectMQTT();
}
void connectMQTT() {
Serial.println(&amp;quot;connectMQTT&amp;quot;);
Serial.println(deviceName);
while (!mqttClient.connected()) {
Serial.print(&amp;quot;.&amp;quot;);
if (mqttClient.connect(deviceName)) {
Serial.println(&amp;quot;Connected.&amp;quot;);
int qos = 0;
mqttClient.subscribe(subTopic, qos);
Serial.println(&amp;quot;Subscribed.&amp;quot;);
} else {
Serial.print(&amp;quot;Failed. Error state=&amp;quot;);
Serial.print(mqttClient.state());
// Wait 5 seconds before retrying
delay(5000);
}
}
}
char pubMessage[128];
void mqttCallback (char* topic, byte* payload, unsigned int length) {
String str = &amp;quot;&amp;quot;;
Serial.print(&amp;quot;Received. topic=&amp;quot;);
Serial.println(topic);
for (int i = 0; i &amp;lt; length; i++) {
Serial.print((char)payload[i]);
str += (char)payload[i];
}
Serial.print(&amp;quot;\n&amp;quot;);
StaticJsonBuffer&amp;lt;200&amp;gt; jsonBuffer;
JsonObject&amp;amp; root = jsonBuffer.parseObject(str);
// パースが成功かどうか判断
if (!root.success()) {
Serial.println(&amp;quot;parseObject() failed&amp;quot;);
return;
}
//z軸方向の加速度を取り出している
const char* message = root[&amp;quot;message&amp;quot;];
int accz = root[&amp;quot;accz&amp;quot;];
Serial.print(&amp;quot;accz = &amp;quot;);
Serial.println(accz);
//加速度に応じてソレノイドのシュコシュコ速度が変化
if(accz &amp;gt;= 10 || accz &amp;lt;= -10){
Serial.println(&amp;quot;シュコシュコシュコ&amp;quot;);
digitalWrite(D4,LOW);
delay(50);
digitalWrite(D4,HIGH);
delay(50);
}else if(10 &amp;gt; accz &amp;gt;= 6 || -10 &amp;lt; accz &amp;lt;= 6){
Serial.println(&amp;quot;シュコシュコ&amp;quot;);
digitalWrite(D4,LOW);
delay(200);
digitalWrite(D4,HIGH);
delay(200);
}else{
Serial.println(&amp;quot;シュコ&amp;quot;);
digitalWrite(D4,LOW);
delay(500);
digitalWrite(D4,HIGH);
delay(500);
}
delay(100);
}
void mqttLoop() {
if (!mqttClient.connected()) {
connectMQTT();
}
mqttClient.loop();
}
void loop() {
mqttLoop();
}
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-6">動かしてみると&lt;/h3>
&lt;p>シリアルモニタを見てみると、スマートフォンの加速度の変化に応じて値が表示されます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/7fb2accc-5f35-bc31-7366-04d7e0c2de99.gif" alt="ソレノイド＿シュコシュコ事案.gif">&lt;/p>
&lt;p>下記のようにスマートフォンをシェイクすると、ソレノイドの挙動が変化してます（音をよく聞くと、ソレノイドが早く動いたり遅く動いたりしているのがわかります)。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>無事、&lt;strong>スマートフォンをシェイクするとソレノイドをシュコシュコ動かすデバイス&lt;/strong>ができました！&lt;/p>
&lt;h2 id="heading-7">ソレノイドを使った機構の例&lt;/h2>
&lt;p>ソレノイドはシンプルな動作をしますが、何かをつくるときの機構として使うことができます。動画ではソレノイドを上下させることでクラッピーに拍手させています。工夫次第では面白い機構が作れるでしょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-8">おわりに&lt;/h2>
&lt;p>発想は自分次第です。
ソレノイドを使って面白いデバイスをつくってみてください！&lt;/p>
&lt;h2 id="heading-9">参考&lt;/h2>
&lt;p>&lt;a href="http://www.takaha.co.jp/technological/action.html">ソレノイドの動作説明&lt;/a>: ソレノイドの製造・販売で有名なタカハ機工株式会社より&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【詳細解説】ステッピングモータの仕組みを理解しよう！解説とNefry BTでステッピングモータを使う方法</title><link>https://dotstud.io/blog/stepper-motor-nefrybt-control/</link><pubDate>Mon, 23 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/stepper-motor-nefrybt-control/</guid><description>&lt;p>モータの種類にはいろいろあります。前回は回転角度を調整できる&lt;a href="https://dotstud.io/blog/nefry-servo-handson-takudooon/">サーボモータ&lt;/a>について紹介しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回は、&lt;strong>ロボットアームや3Dプリンタの制御に使われるステッピングモータ&lt;/strong>について説明し、Nefry BTで制御に挑戦してみたいと思います。&lt;/p>
&lt;h2 id="heading">ステッピングモータとは？&lt;/h2>
&lt;p>ステッピングモータは、DCモータ（Direct-current motor、直流電動機）とは異なり、&lt;strong>電力信号を与えることで正確に回転を制御&lt;/strong>できます。&lt;/p>
&lt;p>例えばステッピングモータの使われている3Dプリンタでは、正確に回転を制御できているからこそ3Dプリントが実現しているとも言えます。&lt;/p>
&lt;p>各モータの特徴をまとめると下記のようになります。&lt;/p>
&lt;ul>
&lt;li>DCモータ: 電力を与えるとずっと回転する&lt;/li>
&lt;li>サーボモータ: ある信号に対応してある角度の範囲で回転する&lt;/li>
&lt;li>ステッピングモータ: 回転範囲に制限はなく、電力信号を与えることで正確に回転し続ける&lt;/li>
&lt;/ul>
&lt;h3 id="heading-1">ステッピングモータの種類〈１〉&lt;/h3>
&lt;p>ステッピングモータには3種類あります。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PM型&lt;/strong>（Permanent Magnet Type、永久磁石）
&lt;ul>
&lt;li>回転子として円周上にN極とS極の交互に着磁した磁性体を使用する。安価だが、着磁間隔を細かくすることに限界があり、ステップ角度は小さくできない。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>VR型&lt;/strong>（Variable Reluctance Type、歯車状鉄心形）
&lt;ul>
&lt;li>回転子として歯車状の鉄心を使用する。ステップ角度を小さくできるが、トルクがやや低い。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>HB型&lt;/strong>（Hybrid Type、複合形）
&lt;ul>
&lt;li>PM型とVR型の特徴をもつ構造をしている。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>※回転子（ローター）…モーターとして回転する軸のこと。&lt;/p>
&lt;h3 id="heading-2">ステッピングモータの仕組み&lt;/h3>
&lt;p>PM型のステッピングモータの仕組みを簡単に説明したいと思います。&lt;/p>
&lt;p>まず、下記の図のようにPM型のステッピングモータは&lt;strong>中心の永久磁石からなる回転子&lt;/strong>と&lt;strong>外側のコイルから構成されている固定子&lt;/strong>から構成されています。コイルに電流を流すことで磁力が発生し、この磁力を利用して回転子を回転させていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ol>
&lt;li>コイル1に電流を流すと固定子と回転子のN極とS極が引き合う。&lt;/li>
&lt;li>さらにコイル2に電流を流すと、両方の固定子が磁化して回転子を引きつける。つまり45°回転する。&lt;/li>
&lt;li>コイル1の電流を切ると、さらに45°回転する。&lt;/li>
&lt;li>コイル3にコイル1に流した電流と逆方向の電流を流すと、さらに45°回転する。&lt;/li>
&lt;li>コイル2の電流を切ると、さらに45°回転する。&lt;/li>
&lt;/ol>
&lt;p>上記と同様の動作を繰り返すと回転子が回転します。&lt;/p>
&lt;p>また、動画にすると下記のようなイメージです。
&lt;img src="https://dotstud.io/img/blog/189/2.gif" alt="">
&lt;strong>制御信号（ステップと呼びます）を与えると回転する&lt;/strong>イメージです。また、&lt;strong>1ステップあたりの回転角度を基本ステップ角度&lt;/strong>と呼びます。&lt;/p>
&lt;h3 id="heading-3">ステッピングモータの種類〈２〉&lt;/h3>
&lt;p>先ほど述べたようにステッピングモータの種類には3種類あります。そして、&lt;strong>さらに2種類&lt;/strong>あります。ただし、この2種類とはステッピングモータ内部にあるコイルへの電流の流し方の違いによるものです。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ユニポーラ型&lt;/strong>（単極性）
&lt;ul>
&lt;li>相電流の切り替えのとき、1つのコイルに対して一定方向の電流しか流さない。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>バイポーラ型&lt;/strong>（双極性）
&lt;ul>
&lt;li>相電流の切り替えのたび、電流の方向が変わる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>※ステッピングモータの仕組みで説明したように磁極を変えるため内部のコイルをスイッチングする必要がある。その磁極をどのように変更するかというイメージ。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-4">励磁（れいじ）方式&lt;/h3>
&lt;p>励磁方式とは、簡単に言えば「どのようにコイルに電流を流し、ステッピングモータを回転させるか」です。つまり、どのコイル（どのピン）に電圧をどの順番で印加していくかということです。&lt;/p>
&lt;p>これは、制御するときに方式を選ぶことができます（プログラムで書くことができます）。ライブラリを使って制御するとわかりにくい部分かもしれません。&lt;/p>
&lt;p>大まかに3つの励磁方式があるので、それぞれ紹介したいと思います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-1">■ 1相励磁&lt;/h4>
&lt;p>&lt;code>A→B→A'→B'&lt;/code>の順に電流を流します（つまり励磁します）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このようにパルスを与えるたびに決められてステップ角だけ回転します。励磁の順を&lt;code>A'→B'→A→B&lt;/code>とすると逆回転します。&lt;/p>
&lt;p>1相励磁は最も単純な方式ですが、トルクが弱く高速回転には向いていません。また、安定性が良くないため実用的ではありません｡&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-2">■ 2相励磁&lt;/h4>
&lt;p>次の相と1パルスずつずらして同時に励磁する方式です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>パルス幅が1相励磁の2倍となり、1相励磁に比べて回転が安定して、大きなトルクが得られますが消費電力も2倍になります｡&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-1-2">■ 1-2相励磁&lt;/h4>
&lt;p>1相励磁と2相励磁を交互に繰り返す方式です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>各相のパルス幅が3となり、次の相とは2パルスだけずらして励磁されます。1パルスごとに回転する角度が1相励磁と2相励磁に比べて半分になり、細かいモータ制御ができます。&lt;strong>基本的にこの励磁方式で制御すれば間違いない&lt;/strong>でしょう。&lt;/p>
&lt;h2 id="nefry-bt">Nefry BTでステッピングモータを制御しよう！&lt;/h2>
&lt;h3 id="heading-5">ステッピングモータを購入&lt;/h3>
&lt;p>今回は、Amazonで&lt;a href="https://www.amazon.co.jp/gp/product/B010RYH74U/ref=oh_aui_detailpage_o03_s00?ie=UTF8&amp;amp;psc=1">こちらのステッピングモータ&lt;/a>を購入して使いました。ステッピングモータとドライバが5セット入っており、それでいて価格が約1000円という激安です。ちょっと試してみるには良い商品かと思います。&lt;/p>
&lt;h4 id="-28byj-48-stepper-motor">■ 28BYJ-48 Stepper Motor&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-uln2003-driver">■ ULN2003 driver&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-6">それぞれの仕様&lt;/h3>
&lt;h4 id="-28byj-48-stepper-motor-1">■ 28BYJ-48 Stepper Motor&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>概要&lt;/th>
&lt;th>仕様&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>種類&lt;/td>
&lt;td>ユニポーラ型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>結線&lt;/td>
&lt;td>5線式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>電圧&lt;/td>
&lt;td>5-12V（直流電圧）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>周波数&lt;/td>
&lt;td>100 Hz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ステップモード&lt;/td>
&lt;td>ハーフステップモード（推奨）（8ステップの信号で制御）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ステップ角&lt;/td>
&lt;td>ハーフステップモード：64ステップで5.625°回転&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ギア比&lt;/td>
&lt;td>64:1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>※ギア比…2つの歯車（ギア）の歯数の比率のこと。自転車をイメージすると良い。&lt;!-- raw HTML omitted -->
※ハーフステップモード…ステップ角が基本ステップ角度の1/2の角度で駆動する方式。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-uln2003-driver-1">■ ULN2003 driver&lt;/h4>
&lt;p>ステッピングモータを使う際には、&lt;strong>ステッピングモータ用のドライバ&lt;/strong>を使用します。マイコンボードの信号だけでは制御できないので、制御を補助するためのものです。&lt;/p>
&lt;p>1-2相励磁で制御する場合は、下記のような信号の組み合わせになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>（参照：http://eeshop.unl.edu/pdf/Stepper+Driver.pdf ）&lt;/p>
&lt;p>このステッピングモータでは8ステップで1つの動作を表しています。つまり、8ステップ×8ステップ=64ステップで5.625°回転します。よって1回転するには360°÷5.625°×64=4096ステップで1回転します。&lt;/p>
&lt;h3 id="heading-7">回路&lt;/h3>
&lt;p>Nefry BTとステッピングモータの回路は下記のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回、使用するステッピングモータは5~12Vの間で動作します。また、Nefry BTとステッピングモータの電源は分けて使います。&lt;/p>
&lt;h3 id="heading-8">プログラム（ライブラリあり）&lt;/h3>
&lt;p>プログラムは下記の通りです。&lt;/p>
&lt;p>Nefry BT上のスイッチを押すとステッピングモータが180°回転するというものです。今回は、ステッピングモータを回転させるため「Stepper.h」ライブラリを使いました。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// ステッピングモータとNefry BTを制御するためのライブラリをinclude
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Stepper.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e">・フルステップ方式で2相励磁の場合は1つの動作で4ステップ
&lt;/span>&lt;span style="color:#75715e">・8回繰り返す（4×8 = 32ステップ）で11.25度回転
&lt;/span>&lt;span style="color:#75715e">・つまり、360度回転しようとするとき360/11.25 = 32ステップ
&lt;/span>&lt;span style="color:#75715e">・ギア比を考慮して32×64 = 2048ステップ
&lt;/span>&lt;span style="color:#75715e">・よって、ハフルステップ方式で2相励磁の場合、2048ステップで1回転
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e">・ハーフステップ方式で1-2相励磁の場合は1つの動作で8ステップ
&lt;/span>&lt;span style="color:#75715e">・8回繰り返す（8×8 = 64ステップ）と5.625度回転
&lt;/span>&lt;span style="color:#75715e">・つまり、360度回転しようとすると360/5.625 = 64ステップ
&lt;/span>&lt;span style="color:#75715e">・ギア比を考慮して64×64 = 4096ステップ
&lt;/span>&lt;span style="color:#75715e">・よって、ハーフステップ方式で1-2相励磁の場合、4096ステップで1回転
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_1 D2 &lt;/span>&lt;span style="color:#75715e">// blue
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_2 D3 &lt;/span>&lt;span style="color:#75715e">// pink
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_3 D4 &lt;/span>&lt;span style="color:#75715e">// yellow
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_4 D5 &lt;/span>&lt;span style="color:#75715e">// orange
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// ステッピングモータが1回転するのに必要なステップ数を定義
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_STEPS 2048&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Stepper &lt;span style="color:#a6e22e">myStepper&lt;/span>(MOTOR_STEPS, MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4);
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;span style="color:#75715e">// setspeed()関数でrpm（1分あたりの回転数）を設定
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 例：10rpm=10回転/分
&lt;/span>&lt;span style="color:#75715e">&lt;/span> myStepper.setSpeed(&lt;span style="color:#ae81ff">10&lt;/span>);&lt;span style="color:#75715e">//10回転/分
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span>(Nefry.readSW()){
&lt;span style="color:#75715e">// 1024ステップ回転、つまり180°回転
&lt;/span>&lt;span style="color:#75715e">&lt;/span> myStepper.step(&lt;span style="color:#ae81ff">1024&lt;/span>);
}
&lt;span style="color:#75715e">// 静止時の負荷がないので電流を止める
&lt;/span>&lt;span style="color:#75715e">&lt;/span> stopMotor();
}
&lt;span style="color:#75715e">// モーターへの電流を止める
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">stopMotor&lt;/span>() {
digitalWrite(MOTOR_1, LOW);
digitalWrite(MOTOR_2, LOW);
digitalWrite(MOTOR_3, LOW);
digitalWrite(MOTOR_4, LOW);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-9">動かしてみると&lt;/h3>
&lt;p>実際に動かしてみると、180°回転していることがわかります。
&lt;img src="https://dotstud.io/img/blog/189/12.gif" alt="">&lt;/p>
&lt;h3 id="heading-10">プログラム（ライブラリなし）&lt;/h3>
&lt;p>ステッピングモータの仕組みを理解する場合、ライブラリなしの方がわかりやすいかと思います。&lt;/p>
&lt;p>下記はライブラリを使わずに励磁方式を変えてステッピングモータを制御したプログラムです。先ほど示した励磁方式の図を見ながら理解すると、良くわかるかと思います。&lt;/p>
&lt;p>今回、使用するドライバには各相に対応してLEDが点灯するので、どの相に電圧を印加したかわかりやすいですね。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-1-1">■ 1相励磁&lt;/h4>
&lt;pre>&lt;code>#include&amp;lt;Nefry.h&amp;gt;
// 任意のピンを設定してください。基本、デジタルピンでOKです。都合上A2,A3を使っています。
#define PIN1 A2
#define PIN2 A3
#define PIN3 D3
#define PIN4 D4
void setup()
{
Serial.begin(115200);
pinMode(PIN1, OUTPUT); // PIN1を出力モードにする
pinMode(PIN2, OUTPUT); // PIN2を出力モードにする
pinMode(PIN3, OUTPUT); // PIN3を出力モードにする
pinMode(PIN4, OUTPUT); // PIN4を出力モードにする
}
void loop()
{
int sleep_time = 300; // スリープ時間[ms]、時間を短くすると回転速度上昇
digitalWrite(PIN1, 1);
digitalWrite(PIN2, 0);
digitalWrite(PIN3, 0);
digitalWrite(PIN4, 0);
delay(sleep_time);
digitalWrite(PIN1, 0);
digitalWrite(PIN2, 0);
digitalWrite(PIN3, 1);
digitalWrite(PIN4, 0);
delay(sleep_time);
digitalWrite(PIN1, 0);
digitalWrite(PIN2, 0);
digitalWrite(PIN3, 0);
digitalWrite(PIN4, 1);
delay(sleep_time);
// 電流を流し続けると発熱するのでいったん止める
digitalWrite(PIN1, 0);
digitalWrite(PIN2, 0);
digitalWrite(PIN3, 0);
digitalWrite(PIN4, 0);
delay(sleep_time);
}
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/189/13.gif" alt="">&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-2-1">■ 2相励磁&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN1 A2&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN2 A3&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN3 D3&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN4 D4&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>()
{
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
pinMode(PIN1, OUTPUT);
pinMode(PIN2, OUTPUT);
pinMode(PIN3, OUTPUT);
pinMode(PIN4, OUTPUT);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>()
{
&lt;span style="color:#66d9ef">int&lt;/span> sleep_time &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
&lt;span style="color:#75715e">// 電流を流し続けると発熱するのでいったん止める
&lt;/span>&lt;span style="color:#75715e">&lt;/span> digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://dotstud.io/img/blog/189/14.gif" alt="">&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-1-2-1">■ 1-2相励磁&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN1 A2&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN2 A3&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN3 D3&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN4 D4&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>()
{
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
pinMode(PIN1, OUTPUT);
pinMode(PIN2, OUTPUT);
pinMode(PIN3, OUTPUT);
pinMode(PIN4, OUTPUT);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>()
{
&lt;span style="color:#66d9ef">int&lt;/span> sleep_time &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
&lt;span style="color:#75715e">//電流を流し続けると発熱するのでいったん止める
&lt;/span>&lt;span style="color:#75715e">&lt;/span> digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://dotstud.io/img/blog/189/15.gif" alt="">&lt;/p>
&lt;h2 id="-xy">作例: xy軸ステージ&lt;/h2>
&lt;p>ステッピングモータを使えば、3Dプリンタの軸に使われているような可動式のステージを自作することも可能です。&lt;/p>
&lt;p>たとえば、下記が自作したxy軸の2軸ステージです。また、これはNode-REDで遠隔制御できるようにしています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-11">おわりに&lt;/h2>
&lt;p>モータの世界はまだまだ奥深いのですが、今回はここまでです。&lt;/p>
&lt;p>ステッピングモータが使えれば、さらにモノづくりの幅が広がることでしょう。また、IoT向きの開発ボードNefry BTを使えば、**遠隔制御できる「何か」**を割と簡単に作ることができます。&lt;/p>
&lt;h2 id="heading-12">参考サイト&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://42bots.com/tutorials/28byj-48-stepper-motor-with-uln2003-driver-and-arduino-uno/">28BYJ-48 Stepper Motor with ULN2003 driver and Arduino Uno | 42 Bots&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://toshiba.semicon-storage.com/jp/design-support/e-learning/stepping_motor/chap3/1274646.html">励磁モードまとめ | TOSHIBA e-ラーニング&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>PWM制御をマスターしよう！Node-REDでサーボモータを遠隔制御する方法＆初ハンズオンレポート</title><link>https://dotstud.io/blog/nefry-servo-handson-takudooon/</link><pubDate>Thu, 12 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/nefry-servo-handson-takudooon/</guid><description>&lt;h2 id="heading">暑さ本番、いよいよ大好きな生ビールの季節がやってまいりました！&lt;/h2>
&lt;p>みなさまいかがお過ごしでしょうか？どうも、宇宙エンジニアの&lt;a href="https://dotstud.io/members/takudooon">たくろーどん&lt;/a>です。毎日、暑いですね。&lt;/p>
&lt;p>さて先日、&lt;strong>初めてハンズオンイベント&lt;strong>を企画・実施してみました！題して、「&lt;/strong>【IoT】PWM制御をマスター！Nefry BT+Node-REDでサーボモータを遠隔制御&lt;/strong>&lt;a href="https://dotstudio.connpass.com/event/91695/">&lt;/a>」！&lt;/p>
&lt;p>「モノづくりをしたい！」「こんなものをつくりたい！」と思っても「&lt;strong>こういう技術がつかえる&lt;/strong>」ということを知らないと、なかなかモノづくりが進みません。&lt;/p>
&lt;p>なので、動くものを作りたいときに便利な&lt;!-- raw HTML omitted -->&lt;strong>サーボモータとその制御方法であるPWM制御&lt;/strong>をマスターし、&lt;strong>PCからサーボモータを遠隔制御をしよう&lt;/strong>&lt;!-- raw HTML omitted -->というのがハンズオンの目論見です。&lt;/p>
&lt;p>では、ちらっとハンズオンの内容を振り返ってみたいと思います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="pwm">PWM制御を用いたプログラムの書き方&lt;/h2>
&lt;h3 id="pwm-1">PWM制御について&lt;/h3>
&lt;p>&lt;a href="https://dotstud.io/docs/pulse-width-modulation/">PWM制御の大まかな説明&lt;/a>は以前、ドキュメントに書きました。ようするに、PWM制御は「&lt;strong>パルスのオン・オフ繰り返し切り替えることで出力される電力を制御&lt;/strong>」するという意味です。&lt;/p>
&lt;p>でも結局のところ、「&lt;strong>PWM制御ってどんなイメージやねん！&lt;/strong>」と多くの方が思うでしょう。&lt;/p>
&lt;p>なので、これがわかりやすいのではないかという説明を思いつきました。それが、下記の動画です。
&lt;img src="https://dotstud.io/img/blog/187/2.gif" alt="">&lt;/p>
&lt;p>例えば、自宅から最寄りの駅まで走らなければならない状況を考えます。まるで、小学校の算数にでてくるたかしくんの問題を彷彿させますね。知らんけど。&lt;/p>
&lt;ul>
&lt;li>100%の力で走れば5分で駅につく ≒ 100%出力されるので、5V出力される&lt;/li>
&lt;li>全力で走って途中で歩くと9分で駅に着く（全体的に80%の力で走る） ≒ 80%出力されるので、4V出力される&lt;/li>
&lt;li>全力で走って途中で歩くと10分で駅に着く（全体的に50%の力で走る） ≒ 50%出力されるので、2.5V出力される&lt;/li>
&lt;li>全力で走って途中で歩くと15分で駅に着く（全体的に10%の力で走る） ≒ 10%出力されるので、0.5V出力される&lt;/li>
&lt;/ul>
&lt;p>というようなイメージです。自宅から駅まで走る場合は走る速さの具合によって、到着時間が伸びます。しかし、電圧の場合は実行電圧（実際に出力される電圧）は下がっていきます。&lt;/p>
&lt;h3 id="esp32">ESP32開発ボードでのプログラムについて&lt;/h3>
&lt;p>&lt;a href="https://dotstud.io/docs/nefrybt">Nefry BT&lt;/a>のようなESP32を搭載しているような開発ボードでPWM制御する場合は、ledc関数を使います。&lt;strong>ESP32ではArduinoでつかうようなanalogWrite関数が実装されていない&lt;/strong>とのことなので注意しましょう（ただし、今後変更される可能性があります）。&lt;/p>
&lt;p>例えば、下記のようなプログラムになります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">
&lt;span style="color:#75715e">//基本Iotは2.4GHz帯を使うこと
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//PWM信号の周波数をPWMをつくっているクロック周波数で割ったもの
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//ledcSetupでPWMの範囲を8bitに設定したとき、0～255　10bitのときは0～1023となる、2進数の話
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PWM_BITWIDTH 16&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//わかりやすいように角度に変換する関数/////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">deg2pw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> deg, &lt;span style="color:#66d9ef">int&lt;/span> bit){
&lt;span style="color:#66d9ef">double&lt;/span> ms &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">double&lt;/span>) deg &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.95&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1.45&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) (ms &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">20.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> pow(&lt;span style="color:#ae81ff">2&lt;/span>, bit));
}
&lt;span style="color:#75715e">//////////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
&lt;span style="color:#75715e">//ledcSetup(チャンネル数(0～),周波数(たとえばPWMサイクル20mHzなら50Hzになるという意味(SG90の場合))、分解能は任意(ただし限度はある))
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(&lt;span style="color:#960050;background-color:#1e0010">ピ&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">ン&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">番&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">号&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);&lt;span style="color:#75715e">//left_motor
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.enableSW();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>(){
&lt;span style="color:#66d9ef">if&lt;/span>((Nefry.readSW())){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">0&lt;/span>, PWM_BITWIDTH));
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-1">プログラムの書き方&lt;/h3>
&lt;p>プログラムを詳しく見てましょう。&lt;/p>
&lt;p>ledc関数を使うため、ライブラリ「esp32-hal-ledc.h」を最初にインクルードします。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ライブラリ「esp32-hal-ledc.h」を使うときの主な関数は以下に示すものです。&lt;/p>
&lt;ol>
&lt;li>ledcSetup（チャンネル,周波数,分解能）&lt;/li>
&lt;li>ledcAttachPin（ピン番号,チャンネル）：チャンネルはピン番号の識別番号です&lt;/li>
&lt;li>ledcWrite（チャンネル,パルス幅）：設定した角度になるように与えるべきパルス幅を算出する関数&lt;/li>
&lt;/ol>
&lt;p>実際の記述は以下のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(A2,&lt;span style="color:#ae81ff">0&lt;/span>);&lt;span style="color:#75715e">//left_motor
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.enableSW();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>分解能は&lt;strong>どれだけ細かく制御するのか&lt;/strong>を表しているイメージです。これは&lt;strong>ビット数&lt;/strong>で表します。&lt;/p>
&lt;p>例えば、分解能を&lt;strong>8ビットとするれば0〜255バイト&lt;/strong>（2の8乗）、&lt;strong>10ビットなら0〜1023バイト&lt;/strong>（2の10乗）となります。&lt;/p>
&lt;p>これを、どのようにPWM制御に使えるのか説明します。PWM制御とは一定電圧の入力から&lt;strong>パルス列のオンとオフの一定周期を作り、オンの時間幅を変化させる電力制御方式&lt;/strong>のことです。つまり、&lt;strong>実効電圧を変化させる&lt;/strong>ことができます。&lt;/p>
&lt;p>なので、例えば、最大5[V]の出力を考えたとき、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分解能8ビットだと0→0[V]、127→2.5[V]、255→5[V]&lt;/strong>&lt;/li>
&lt;li>&lt;strong>分解能10ビットだと0→0[V]、511→2.5[V]、1023→5[V]&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>と表せます。分解能が大きい方が、細かい制御ができることがわかるかと思います。&lt;/p>
&lt;h2 id="node-redmqtt">Node-RED×MQTTでサーボモータを遠隔制御&lt;/h2>
&lt;h3 id="node-red">Node-REDとは&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;a href="https://nodered.jp/">Node-RED&lt;/a>はハードウェアデバイス/APIおよびオンラインサービスを接続するためのツールです。ウェブ上で、フローチャートのように直感的にプログラムをつくることができます。そして、最終的に自分が欲しい仕組みを作り上げるというものです。&lt;/p>
&lt;p>Node-REDを使うには大まかに2パターンあります。&lt;/p>
&lt;ul>
&lt;li>自分のPC上でローカルで動かす（今回はこちらで進めていきます）&lt;/li>
&lt;li>外部のサービスを利用する（IBMクラウドやenebularなど）&lt;/li>
&lt;/ul>
&lt;p>導入方法は、&lt;a href="https://qiita.com/minwinmin/private/6c13d2c912d0d7e8e197">こちら&lt;/a>で説明していますので参考にしてください。&lt;/p>
&lt;p>また、後ほどNode-REDにフローのコードを貼り付ける必要があるので簡単に貼り付け方法を説明します。&lt;/p>
&lt;p>まずフローのコードをコピーし、Node-REDを立ち上げたら右上のメニュー（3本線）をクリックします。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>すると上記のような画面があらわれます。「読み込み」をクリックして、あらわれた画面にコピーしたコードを貼り付ければ完了です。&lt;/p>
&lt;h3 id="mqtt">MQTTとは&lt;/h3>
&lt;p>MQTTとは、&lt;strong>多数のデバイスの間で短いメッセージを頻繁に送受信する&lt;/strong>ことを想定した通信プロトコルです。つまりインフラのようなもの、もしくはメッセージを送受信するので土管のようなものをイメージすると良いかと思います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>MQTTは先ほど説明したような仕組みの名前です。なので、実際にメッセージを送受信するためにはMQTTブローカーが必要です。イメージは下記の画像のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>MQTTブローカーを用意するには、いくつか方法があります（&lt;a href="http://acro-engineer.hatenablog.com/entry/2015/06/19/120000">こちらのサイト&lt;/a>にまとめられています）。今回、ハンズオンでつかったの以下の2パターンです。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ローカルホストでMQTTブローカーをたてる&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://github.com/mcollina/mosca">Mosca&lt;/a>を利用する -&amp;gt; MQTT brokerのためのライブラリ（IBMクラウドのような外部サービスでNode-REDを使う場合、うまくいきませんでした）&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://test.mosquitto.org/">mosquitto&lt;/a>のテストサーバーを利用する&lt;/strong>&lt;/li>
&lt;li>これから記載するプログラムはこちらを使っています。&lt;/li>
&lt;/ul>
&lt;h3 id="node-red-1">Node-REDのフローのコード&lt;/h3>
&lt;p>下記のNode-REDのフローのコードを、Node-REDにコピーして使いましょう。&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;id&amp;quot;: &amp;quot;7878093f.d68778&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;debug&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;active&amp;quot;: true,
&amp;quot;tosidebar&amp;quot;: true,
&amp;quot;console&amp;quot;: false,
&amp;quot;tostatus&amp;quot;: false,
&amp;quot;complete&amp;quot;: &amp;quot;payload&amp;quot;,
&amp;quot;x&amp;quot;: 522.0130081176758,
&amp;quot;y&amp;quot;: 161.99999809265137,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;22ca4d97.8e3382&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;inject&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;payload&amp;quot;: &amp;quot;{\&amp;quot;motor\&amp;quot;:1}&amp;quot;,
&amp;quot;payloadType&amp;quot;: &amp;quot;json&amp;quot;,
&amp;quot;repeat&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;crontab&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;once&amp;quot;: false,
&amp;quot;onceDelay&amp;quot;: 0.1,
&amp;quot;x&amp;quot;: 220.01303100585938,
&amp;quot;y&amp;quot;: 244.00000190734863,
&amp;quot;wires&amp;quot;: [
[
&amp;quot;6b18ace.785b854&amp;quot;
]
]
},
{
&amp;quot;id&amp;quot;: &amp;quot;6b18ace.785b854&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt out&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;/sub/NefryBT/SAMPLE&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;/sub/NefryBT/SAMPLE&amp;quot;,
&amp;quot;qos&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;retain&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;3890dddf.26f532&amp;quot;,
&amp;quot;x&amp;quot;: 508.0130386352539,
&amp;quot;y&amp;quot;: 293.9999957084656,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;e0581ff4.bce8a&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;inject&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;payload&amp;quot;: &amp;quot;{\&amp;quot;motor\&amp;quot;:0}&amp;quot;,
&amp;quot;payloadType&amp;quot;: &amp;quot;json&amp;quot;,
&amp;quot;repeat&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;crontab&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;once&amp;quot;: false,
&amp;quot;onceDelay&amp;quot;: 0.1,
&amp;quot;x&amp;quot;: 220.01303100585938,
&amp;quot;y&amp;quot;: 344.00000190734863,
&amp;quot;wires&amp;quot;: [
[
&amp;quot;6b18ace.785b854&amp;quot;
]
]
},
{
&amp;quot;id&amp;quot;: &amp;quot;3dccf617.5970da&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt in&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;/sub/NefryBT/SAMPLE&amp;quot;,
&amp;quot;qos&amp;quot;: &amp;quot;2&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;cd2e6f9.ab8069&amp;quot;,
&amp;quot;x&amp;quot;: 235.09634399414062,
&amp;quot;y&amp;quot;: 159.3697967529297,
&amp;quot;wires&amp;quot;: [
[
&amp;quot;7878093f.d68778&amp;quot;
]
]
},
{
&amp;quot;id&amp;quot;: &amp;quot;f5c8b0fb.93d8&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;comment&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Node-RED上に文字列表示&amp;quot;,
&amp;quot;info&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;x&amp;quot;: 237.09635162353516,
&amp;quot;y&amp;quot;: 114.08594131469727,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;47872155.bfb16&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;comment&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;MQTTブローカー側に文字列を送信&amp;quot;,
&amp;quot;info&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;x&amp;quot;: 265.0130310058594,
&amp;quot;y&amp;quot;: 206.0104217529297,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;d5a5e79d.ec27a8&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;comment&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;MQTTブローカー側に文字列を送信するためのフロー&amp;quot;,
&amp;quot;info&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;x&amp;quot;: 609.0130004882812,
&amp;quot;y&amp;quot;: 257.0104160308838,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;3700aeb9.5a7ec2&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;comment&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;ｍosquittoのテストサーバーを利用&amp;quot;,
&amp;quot;info&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;x&amp;quot;: 265.0130310058594,
&amp;quot;y&amp;quot;: 52.010416984558105,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;3890dddf.26f532&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt-broker&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;http://test.mosquitto.org/&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;1883&amp;quot;,
&amp;quot;clientid&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;usetls&amp;quot;: false,
&amp;quot;compatmode&amp;quot;: true,
&amp;quot;keepalive&amp;quot;: &amp;quot;60&amp;quot;,
&amp;quot;cleansession&amp;quot;: true,
&amp;quot;birthTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;birthQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;birthPayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;closePayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;willPayload&amp;quot;: &amp;quot;&amp;quot;
},
{
&amp;quot;id&amp;quot;: &amp;quot;cd2e6f9.ab8069&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt-broker&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;http://test.mosquitto.org/&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;1883&amp;quot;,
&amp;quot;clientid&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;usetls&amp;quot;: false,
&amp;quot;compatmode&amp;quot;: true,
&amp;quot;keepalive&amp;quot;: &amp;quot;60&amp;quot;,
&amp;quot;cleansession&amp;quot;: true,
&amp;quot;birthTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;birthQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;birthPayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;closePayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;willPayload&amp;quot;: &amp;quot;&amp;quot;
}
]
&lt;/code>&lt;/pre>&lt;h3 id="nefry-bt">Nefry BTのプログラム&lt;/h3>
&lt;p>下記がNefry BT側のプログラムになります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">//Nefryがwifiにつながっているか確認、2.4Ghzにつなごう
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//できたtest.mosquitto.orgで使える！
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;WiFiClient.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;PubSubClient.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;ArduinoJson.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define URL &amp;#34;mosquitto.org&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PWM_BITWIDTH 16&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">deg2pw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> deg, &lt;span style="color:#66d9ef">int&lt;/span> bit){
&lt;span style="color:#66d9ef">double&lt;/span> ms &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">double&lt;/span>) deg &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.95&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1.45&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) (ms &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">20.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> pow(&lt;span style="color:#ae81ff">2&lt;/span>, bit));
}
IPAddress endpoint;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1883&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pubTopic;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>subTopic;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>deviceName;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>mqtt_server &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">test.mosquitto.org&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
WiFiClient httpsClient;
PubSubClient &lt;span style="color:#a6e22e">mqttClient&lt;/span>(httpsClient);
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(A2,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#75715e">//// NefryBT設定画面まわり ////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// NefryBT
&lt;/span>&lt;span style="color:#75715e">&lt;/span> pubTopic &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/pub/NefryBT/SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
subTopic &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/sub/NefryBT/SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
deviceName &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">NefryBT_SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// 複数台で利用する場合は必ずかぶらないように変更する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ローカルホストでMQTTブローカーを立てている場合は、パソコンのIPAddress型に収納。配列っぽく入れる。ここはその都度確認すること
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//endpoint指定部
&lt;/span>&lt;span style="color:#75715e">&lt;/span> endpoint[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">192&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">168&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">43&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">105&lt;/span>;
&lt;span style="color:#75715e">//// 以下通常処理 ////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
&lt;span style="color:#75715e">//mqttClient.setServer()関数でMQTTブローカーを指定する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> mqttClient.setServer(mqtt_server, port);
mqttClient.setCallback(mqttCallback);
connectMQTT();
}
&lt;span style="color:#75715e">//MQTTがちゃんと動いているか、つながっているかを判断
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">connectMQTT&lt;/span>() {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">connectMQTT&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(deviceName);
&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mqttClient.connected()) {
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (mqttClient.connect(deviceName)) {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Connected.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">int&lt;/span> qos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
mqttClient.subscribe(subTopic, qos);
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Subscribed.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Failed. Error state=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.print(mqttClient.state());
&lt;span style="color:#75715e">// Wait 5 seconds before retrying
&lt;/span>&lt;span style="color:#75715e">&lt;/span> delay(&lt;span style="color:#ae81ff">5000&lt;/span>);
}
}
}
&lt;span style="color:#75715e">///////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">char&lt;/span> pubMessage[&lt;span style="color:#ae81ff">128&lt;/span>];
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mqttCallback&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> topic, byte&lt;span style="color:#f92672">*&lt;/span> payload, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> length) {
String str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Received. topic=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(topic);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> length; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>) {
Serial.print((&lt;span style="color:#66d9ef">char&lt;/span>)payload[i]);
str &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>)payload[i];
}
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
StaticJsonBuffer&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> jsonBuffer;
JsonObject&lt;span style="color:#f92672">&amp;amp;&lt;/span> root &lt;span style="color:#f92672">=&lt;/span> jsonBuffer.parseObject(str);
&lt;span style="color:#75715e">// 読み取った文字列をパース
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>root.success()) {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">parseObject() failed&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span>;
}
&lt;span style="color:#75715e">//Node-REDから文字列を読み取ってくる部分//////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> message &lt;span style="color:#f92672">=&lt;/span> root[&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">message&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>];
&lt;span style="color:#66d9ef">int&lt;/span> motor &lt;span style="color:#f92672">=&lt;/span> root[&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">motor&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>];
&lt;span style="color:#75715e">////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">motor = &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(motor);
&lt;span style="color:#75715e">///サーボモータを動かす処理//////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>( motor &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ){
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">115&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65&lt;/span>; &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i){&lt;span style="color:#75715e">//0～180°の位置で考える、90度が基準点としてそこからどう動くかを考える
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
}
Nefry.ndelay(&lt;span style="color:#ae81ff">1000&lt;/span>);
}
&lt;span style="color:#75715e">//////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//mqttを動かしている部分///////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mqttLoop&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mqttClient.connected()) {
connectMQTT();
}
mqttClient.loop();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
mqttLoop();
}
&lt;span style="color:#75715e">//////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-2">動作させてみると……&lt;/h3>
&lt;p>このように、PC上から遠隔でサーボモータを制御できるようになります。
&lt;img src="https://dotstud.io/img/blog/187/5.gif" alt="">&lt;/p>
&lt;h2 id="node-redmqttui">Node-RED×MQTTでサーボモータをUI（ブラウザ）から制御&lt;/h2>
&lt;p>先ほどのプログラムはNode-RED上のボタンを押すとある角度回転するというものでした。次はそれを発展させて、&lt;strong>ブラウザから操作して角度を遠隔で制御&lt;/strong>してみます。&lt;/p>
&lt;p>ハンズオンでは、製作途中にタイムアップしてしまいました。少し難易度高めです。&lt;/p>
&lt;h3 id="node-red-2">Node-REDのフローのコード&lt;/h3>
&lt;p>下記のNode-REDのフローのコードをNode-REDにコピーして使いましょう。&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;id&amp;quot;: &amp;quot;f2dc1b0b.520f98&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt out&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;fab71764.66ef78&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;servo/pan&amp;quot;,
&amp;quot;qos&amp;quot;: &amp;quot;1&amp;quot;,
&amp;quot;retain&amp;quot;: &amp;quot;false&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;954b988c.ec1e08&amp;quot;,
&amp;quot;x&amp;quot;: 520,
&amp;quot;y&amp;quot;: 400,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;954b988c.ec1e08&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt-broker&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;https://test.mosquitto.org/&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;1883&amp;quot;,
&amp;quot;clientid&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;usetls&amp;quot;: false,
&amp;quot;compatmode&amp;quot;: true,
&amp;quot;keepalive&amp;quot;: &amp;quot;60&amp;quot;,
&amp;quot;cleansession&amp;quot;: true,
&amp;quot;birthTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;birthQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;birthPayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closePayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;willPayload&amp;quot;: &amp;quot;&amp;quot;
}
]
&lt;/code>&lt;/pre>&lt;h3 id="nefry-bt-1">Nefry BTのプログラム&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;WiFiClient.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;PubSubClient.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;ArduinoJson.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//esp32でPWMを使えるようにするためのライブラリー//
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//分解能//////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PWM_BITWIDTH 16&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//PWM制御：周波数-&amp;gt;角度に変換(プログラムするときにわかりやすい)//
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">deg2pw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> deg, &lt;span style="color:#66d9ef">int&lt;/span> bit){
&lt;span style="color:#66d9ef">double&lt;/span> ms &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">double&lt;/span>) deg &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.95&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1.45&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) (ms &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">20.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> pow(&lt;span style="color:#ae81ff">2&lt;/span>, bit));
}
&lt;span style="color:#75715e">////////////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
IPAddress endpoint;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1883&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pubTopic;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>subTopic;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>deviceName;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>mqtt_server &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">test.mosquitto.org&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
WiFiClient httpsClient;
PubSubClient &lt;span style="color:#a6e22e">mqttClient&lt;/span>(httpsClient);
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(A1,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#75715e">//// NefryBT設定 ////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// NefryBT
&lt;/span>&lt;span style="color:#75715e">&lt;/span> pubTopic &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/pub/NefryBT/SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
subTopic &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/sub/NefryBT/SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
deviceName &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">NefryBT_SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// 複数台で利用する場合は必ずかぶらないように変更する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ローカルホストならパソコンのIPAddress型に収納。配列っぽく入れる。ここはその都度確認すること
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//mosquittoのテストサーバーを使うときは下記のednpointは気にしなくて大丈夫です
&lt;/span>&lt;span style="color:#75715e">&lt;/span> endpoint[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">192&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">168&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#75715e">////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
mqttClient.setServer(mqtt_server, port);
mqttClient.setCallback(mqttCallback);
connectMQTT();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">connectMQTT&lt;/span>() {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">connectMQTT&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(deviceName);
&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mqttClient.connected()) {
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (mqttClient.connect(deviceName)) {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Connected.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">int&lt;/span> qos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
mqttClient.subscribe(subTopic, qos);
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Subscribed.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Failed. Error state=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.print(mqttClient.state());
&lt;span style="color:#75715e">// Wait 5 seconds before retrying
&lt;/span>&lt;span style="color:#75715e">&lt;/span> delay(&lt;span style="color:#ae81ff">5000&lt;/span>);
}
}
}
&lt;span style="color:#66d9ef">char&lt;/span> pubMessage[&lt;span style="color:#ae81ff">128&lt;/span>];
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mqttCallback&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> topic, byte&lt;span style="color:#f92672">*&lt;/span> payload, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> length) {
String str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Received. topic=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(topic);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> length; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>) {
Serial.print((&lt;span style="color:#66d9ef">char&lt;/span>)payload[i]);
str &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>)payload[i];
}
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
StaticJsonBuffer&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> jsonBuffer;
JsonObject&lt;span style="color:#f92672">&amp;amp;&lt;/span> root &lt;span style="color:#f92672">=&lt;/span> jsonBuffer.parseObject(str);
&lt;span style="color:#75715e">// パースが成功かどうか判断
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>root.success()) {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">parseObject() failed&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span>;
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> message &lt;span style="color:#f92672">=&lt;/span> root[&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">message&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>];
&lt;span style="color:#66d9ef">int&lt;/span> takudooon &lt;span style="color:#f92672">=&lt;/span> root[&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">takudooon&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>];
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">takudooon = &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(takudooon);
&lt;span style="color:#66d9ef">if&lt;/span>( takudooon &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ){
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">115&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65&lt;/span>; &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i){&lt;span style="color:#75715e">//0～180°の位置で考える、90度が基準点としてそこからどう動くかを考える
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
}
Nefry.ndelay(&lt;span style="color:#ae81ff">1000&lt;/span>);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mqttLoop&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mqttClient.connected()) {
connectMQTT();
}
mqttClient.loop();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
mqttLoop();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-3">操作画面を用意&lt;/h3>
&lt;p>それぞれのプログラムが準備できたら、Node-REDの画面から、&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>URLの「&lt;code>http://localhost:1880&lt;/code>」を「&lt;code>http://localhost:1880/ui&lt;/code>」と記述すると以下のような操作画面があらわれます。ここから、直感的にサーボモータの角度を遠隔制御できるようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-4">実際に動かすと……&lt;/h3>
&lt;p>このようになります。
&lt;img src="https://dotstud.io/img/blog/187/8.gif" alt="">&lt;/p>
&lt;h2 id="heading-5">おわりに&lt;/h2>
&lt;p>いろいろな技術を知ることでモノづくりの幅が増え、作ってみたいものを自由に作れるようになってもらえればな、と思います。&lt;/p>
&lt;p>では！&lt;/p></description></item></channel></rss>