<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nefrybt on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/nefrybt/</link><description>Recent content in nefrybt on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Thu, 31 Jan 2019 03:21:47 +0900</lastBuildDate><atom:link href="/series/nefrybt/" rel="self" type="application/rss+xml"/><item><title>NefryBTからGoogleDriveにデータをアップロードする方法</title><link>https://dotstud.io/blog/update-nefrybt-to-googledrive/</link><pubDate>Thu, 31 Jan 2019 03:21:47 +0900</pubDate><guid>https://dotstud.io/blog/update-nefrybt-to-googledrive/</guid><description>&lt;p>こんにちは、NefryBTきっかけでIoTの世界に入った&lt;a href="https://dotstud.io/members/kuroda">黒田&lt;/a>と言います。Webとどう接していけばいいのか分からないときにNefryBTと出会い、意外と難しくない(何とかなる)ことを知りました。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/members/wami">わみさん&lt;/a>、ありがとうございます。&lt;/p>
&lt;p>今回は、NefryBTからGoogleDriveにデータをアップロード出来たので紹介したいと思います。&lt;/p>
&lt;p>おそらく&lt;strong>ESP32マイコン搭載モジュール&lt;/strong>であれば、同じ考えで出来ると思います。&lt;/p>
&lt;h2 id="heading">アップロードまでの手順&lt;/h2>
&lt;ol>
&lt;li>リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/li>
&lt;li>リフレッシュトークンから認証用のアクセストークンを取得する&lt;/li>
&lt;li>http POSTリクエストでデータをアップロードする&lt;/li>
&lt;/ol>
&lt;p>はい、とてもシンプルです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->httpを全く分からない私としてはここまでたどり着くまでかなり苦労しました・・・先人の方々が様々な実績を残してくれているのを本当に感謝しています。) &lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>もう少し詳しく説明します。&lt;/p>
&lt;p>&lt;a href="https://developers.google.com/drive/api/v3/about-sdk">Google Drive REST APIのサイト&lt;/a>を読みますと、まずGoogleDriveへアクセスするには認証用のアクセストークンが必要なこと、データをアップロードするときの&lt;a href="https://developers.google.com/drive/api/v3/multipart-upload">POSTリクエストの書き方&lt;/a>が決まっていることが分かります。&lt;/p>
&lt;p>そのためアクセストークンで認証を行いつつPOSTリクエストを投げれば、NefryBTからでもデータをアップロード出来ます。&lt;/p>
&lt;p>ここで一つ&lt;strong>トラップ&lt;/strong>があります。
アクセストークンの有効期限は3600秒(1時間)です。当初これを知らなかったので、&lt;!-- raw HTML omitted -->時間が経つとなぜか認証エラーになる問題&lt;!-- raw HTML omitted -->に悩まされました。&lt;/p>
&lt;p>回避策としてリフレッシュトークンからアクセストークンを取得するようにします。すると、アクセストークンが新しくなるので、認証もばっちり通ります。
つまり、&lt;!-- raw HTML omitted -->アクセストークンよりも再発行用のリフレッシュトークンが欲しい&lt;!-- raw HTML omitted -->のです。&lt;/p>
&lt;p>ではでは、具体的な手順を説明していきたいと思います。&lt;/p>
&lt;h3 id="1-">[手順1] リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/h3>
&lt;p>今回はNode.jsで取得します。&lt;/p>
&lt;p>公式サイトの&lt;a href="https://developers.google.com/drive/api/v3/quickstart/nodejs">Node.js Quickstart&lt;/a>に従って進めていきます。&lt;/p>
&lt;p>公式サイトにある「ENABLE THE DRIVE API」を押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/0ba2b731-7e29-2db2-7591-6ae56f1a7950.png" alt="OAuth0.PNG">&lt;/p>
&lt;p>するとOAuth2.0クライアントIDを作ってくれます。
続けて「DOWNLOAD CLIENT CONFIGURATION」を押してcredentials.jsonを取得します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/d4efa193-e36c-2e83-81f5-590cf105894a.png" alt="OAuth1.PNG">&lt;/p>
&lt;hr>
&lt;p>(補足)
例えばcredentials.jsonを削除してしまって、もう一度取得したい場合・・・
Google Cloud PlatformのAPI認証情報からダウンロードできます。&lt;/p>
&lt;p>左上のメニューを押して「APIとサービス」を押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/b26bff46-0dea-afba-38cd-51cb6ba8eb68.png" alt="OAuth2-1.PNG">&lt;/p>
&lt;p>認証情報の中に先ほど作成したクライアントIDがありますので、ダウンロードします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/901be3e5-b947-c290-e641-8db7dd075dcf.png" alt="OAuth2-2.PNG">&lt;/p>
&lt;p>※ファイル名は「client_secret_***.json」となっていますので「credentials.json」に変更します。&lt;/p>
&lt;hr>
&lt;p>次にNode.jsでアクセストークンなどの情報を取得します。(Node.jsやnpmが動く環境は用意されているものとします。)&lt;/p>
&lt;ul>
&lt;li>アクセストークンを取得するフォルダを用意して以下のモジュールをインストールします。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>npm install googleapis@27 --save
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>credentials.jsonも同じフォルダに移動させます。&lt;/li>
&lt;li>index.jsを作成します。公式サイトのままではスコープがReadOnlyになっているのでアップロードできるスコープに変更します。それ以外は全く同じです。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>[変更前]
const SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly'];
[変更後]
const SCOPES = ['https://www.googleapis.com/auth/drive'];
&lt;/code>&lt;/pre>&lt;p>スコープについて詳しくは&lt;a href="https://developers.google.com/drive/api/v2/about-auth">About Authorization&lt;/a>を参照ください。&lt;/p>
&lt;ul>
&lt;li>準備は整ったのでNode.jsを実行します。&lt;/li>
&lt;/ul>
&lt;p>１. credentials.json、index.jsなど一式入っているフォルダです。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/52fdf814-f643-1754-9a6c-2a6d9e3fe8bd.png" alt="AccessToken_0.PNG">&lt;/p>
&lt;p>２. nodeを実行します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/1ce7b76c-988e-fd6f-c863-eef96b1fa4ac.png" alt="AccessToken_1.PNG">&lt;/p>
&lt;p>３. URLが表示されるのでアクセスします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/64852163-ae0f-6156-6d7d-fac9e90c7a27.png" alt="AccessToken_2.PNG">&lt;/p>
&lt;p>４. 紐づけるGoogleアカウントを選択し、GoogleDriveへのアクセスを許可します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/dac52655-b356-073b-96bf-678c073897c1.png" alt="AccessToken_3.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/55cd28a0-da9b-e5ee-2b91-095030c96f37.png" alt="AccessToken_4.PNG">&lt;/p>
&lt;p>５. 最後に表示されるコードを上記3.の続きに貼り付けます。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/3fd64238-c27d-6412-23f9-d9754bec9ff9.png" alt="AccessToken_5.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/90f1683d-0731-25e9-e376-cdbb11156e2b.png" alt="AccessToken_6.PNG">&lt;/p>
&lt;p>６.無事token.jsonを取得できました。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/7aa8a2bb-b2d0-f5d0-787c-6f142da997a8.png" alt="AccessToken_7.PNG">&lt;/p>
&lt;h3 id="2-">[手順2] リフレッシュトークンから認証用のアクセストークンを取得する&lt;/h3>
&lt;p>アップロードに必要な情報は揃ったので、あとはNefryBTだけ触っていきます。&lt;/p>
&lt;p>リフレッシュトークンからアクセストークンを取得するhttp POSTリクエストは次の通りとなります。&lt;/p>
&lt;pre>&lt;code>[ヘッダー]
POST /oauth2/v4/token HTTP/1.1
Host: www.googleapis.com:443
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: [POSTするデータの長さ]
[POSTするデータ]
refresh_token=[リフレッシュトークン]&amp;amp;client_id=[クライアントID]&amp;amp;client_secret=[クライアントシークレット]&amp;amp;grant_type=refresh_token
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>クライアントIDとクライアントシークレットは「credentials.json」に書いてあります。もしくはGoogle Cloud PlatformのAPIの認証情報でも確認できます。&lt;/li>
&lt;li>リフレッシュトークンは「token.json」に書いてあります。&lt;/li>
&lt;/ul>
&lt;p>POSTリクエストを投げるとレスポンスがjson形式で返ってきます。&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;access_token&amp;quot;: &amp;quot;***&amp;quot;,
&amp;quot;expires_in&amp;quot;: 3600,
&amp;quot;scope&amp;quot;: &amp;quot;https://www.googleapis.com/auth/drive&amp;quot;,
&amp;quot;token_type&amp;quot;: &amp;quot;Bearer&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>access_token:***が取得したいアクセストークンになります。&lt;/p>
&lt;hr>
&lt;p>上記の内容をNefryBTで書くと次のようになります。&lt;/p>
&lt;p>※&lt;a href="https://github.com/NearMugi/NefrySample/tree/master/GoogleAPI/%23createLibrary/googleAPI/PostDrive">プログラムソース&lt;/a>のうち主要な部分を抜粋しています。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>リフレッシュトークン・クライアントID・クライアントシークレットは個人情報なので、直接プログラムソースに記載するのではなくNefryBTのDataStoreに登録します。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POSTするデータを設定します。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postData = &amp;quot;&amp;quot;;
postData += &amp;quot;refresh_token=&amp;quot; + refresh_token;
postData += &amp;quot;&amp;amp;client_id=&amp;quot; + client_id;
postData += &amp;quot;&amp;amp;client_secret=&amp;quot; + client_secret;
postData += &amp;quot;&amp;amp;grant_type=&amp;quot; + String(&amp;quot;refresh_token&amp;quot;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>ヘッダーを設定します。
データの長さはPOSTするデータ(postData)から算出します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postHeader = &amp;quot;&amp;quot;;
postHeader += (&amp;quot;POST &amp;quot; + token_uri + &amp;quot; HTTP/1.1\r\n&amp;quot;);
postHeader += (&amp;quot;Host: &amp;quot; + String(host) + &amp;quot;:&amp;quot; + String(httpsPort) + &amp;quot;\r\n&amp;quot;);
postHeader += (&amp;quot;Connection: close\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Type: application/x-www-form-urlencoded\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Length: &amp;quot;);
postHeader += (postData.length());
postHeader += (&amp;quot;\r\n\r\n&amp;quot;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>POSTリクエストを投げてレスポンスを取得します。更にレスポンスからアクセストークンを取得します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String result = postRequest(host, postHeader, postData);
//取得したjsonデータからAccessTokenを取得する
const int BUFFER_SIZE = JSON_OBJECT_SIZE(4) + JSON_ARRAY_SIZE(1);
StaticJsonBuffer&amp;lt;BUFFER_SIZE&amp;gt; jsonBuffer;
char json[result.length() + 1];
result.toCharArray(json, sizeof(json));
JsonObject&amp;amp; root = jsonBuffer.parseObject(json);
const char* tmp = root[&amp;quot;access_token&amp;quot;];
token = tmp;
return token;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>POSTリクエストを行っているソース(&lt;code>postRequest&lt;/code>)です。正常に処理が終わればレスポンスを返します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postRequest(const char* server, String header, String data) {
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
Serial.print(&amp;quot;Connecting to: &amp;quot;); Serial.println(server);
if (!client.connect(server, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return result;
}
Serial.println(&amp;quot;certificate matches&amp;quot;);
Serial.print(&amp;quot;post: &amp;quot;); Serial.println(header + data);
client.print(header + data);
Serial.println(&amp;quot;Receiving response&amp;quot;);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil('\r');
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
}
String line = client.readStringUntil('\r');
Serial.println(line);
result += line;
}
Serial.println(&amp;quot;closing connection&amp;quot;);
return result;
}
&lt;/code>&lt;/pre>&lt;p>だいたいこんな感じで無事アクセストークンを取得できました。&lt;/p>
&lt;h3 id="3-http-post">[手順3] http POSTリクエストでデータをアップロードする&lt;/h3>
&lt;p>いよいよデータをアップロードしてみます。今回はテキストファイルとJpegファイルのアップロード方法を紹介します。
公式サイトの&lt;a href="https://developers.google.com/drive/api/v3/manage-uploads">Uploading Files&lt;/a>によりますと、アップロード方法は3パターンあります。&lt;/p>
&lt;ul>
&lt;li>Simple upload&lt;/li>
&lt;li>Multipart upload&lt;/li>
&lt;li>Resumable upload&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Simple upload&amp;quot;の場合、アップロードしたファイル名は全て&amp;quot;untitled&amp;quot;となってしまい、具合がよろしくありません。
&amp;ldquo;Multipart upload&amp;quot;の場合、ファイルに様々な設定を付加できます。今回はファイル名・親フォルダの指定・コメントを設定しました。
(&amp;ldquo;Resumable upload&amp;quot;はどんなものか調べていません・・・)&lt;/p>
&lt;p>Multipart uploadのPOSTリクエストは次の通りです。&lt;/p>
&lt;pre>&lt;code>POST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart HTTP/1.1
Authorization: Bearer [YOUR_AUTH_TOKEN]
Content-Type: multipart/related; boundary=foo_bar_baz
Content-Length: [NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]
--foo_bar_baz
Content-Type: application/json; charset=UTF-8
{
&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;
}
--foo_bar_baz
Content-Type: image/jpeg
[JPEG_DATA]
--foo_bar_baz--
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>[YOUR_AUTH_TOKEN]はアクセストークンを設定します。&lt;/li>
&lt;li>[NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]は &lt;strong>ヘッダーから最後のデータまですべてのサイズ&lt;/strong> となります。つまり最初のPOSTから最後の&amp;ndash;foo_bar_baz&amp;ndash;まで全てのサイズを設定します。これを間違えると正しくPOSTリクエストを投げることが出来ません。&lt;/li>
&lt;li>&lt;code>&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;&lt;/code> の部分がアップロードするファイルの設定を記載する部分となります。
何を設定できるかは&lt;a href="https://developers.google.com/drive/api/v3/reference/files">公式ページの&amp;quot;Files&amp;rdquo;&lt;/a>を参照ください。&lt;/li>
&lt;li>その下の&lt;code>Content-Type: image/jpeg&lt;/code> がアップロードするデータの形式となり、その次にデータの中身を記述していきます。&lt;/li>
&lt;li>最後に&lt;code>--foo_bar_baz--&lt;/code> で閉めます。&lt;/li>
&lt;/ul>
&lt;p>まとめますと、プログラムを書くとき毎回設定しなければならないのは次の4つです。&lt;/p>
&lt;ul>
&lt;li>アクセストークン&lt;/li>
&lt;li>POSTリクエスト全体のサイズ&lt;/li>
&lt;li>ファイルの設定(ファイル名・親フォルダ・コメント)&lt;/li>
&lt;li>ファイルの中身&lt;/li>
&lt;/ul>
&lt;h2 id="heading-1">テキストファイルをアップロードする&lt;/h2>
&lt;p>上記の仕様を踏まえてテキストファイルをアップロードする例を挙げます。この次に紹介するJpegファイルのアップロードと比べるとシンプルで分かりやすいと思います。&lt;/p>
&lt;ol>
&lt;li>POSTリクエストのファイルの指定周り(&lt;code>--foo_bar_baz&lt;/code>部分)を設定します。&lt;/li>
&lt;li>上記1.のあとPOSTリクエスト全体のサイズが分かるのでヘッダー(&lt;code>POST https://&lt;/code>部分)を設定します。&lt;/li>
&lt;li>上記1.と2.をPOSTします。&lt;/li>
&lt;li>データの中身をPOSTします。&lt;/li>
&lt;li>最後の&amp;rsquo;&amp;ndash;foo_bar_baz&amp;ndash;&amp;lsquo;をPOSTします。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> void postDrive_Text(String _fileName, String _textData, String _comment) {
uint8_t DataSize = _textData.length();
uint8_t postData[DataSize];
for (int i = 0; i &amp;lt; DataSize; i++) {
postData[i] = (uint8_t)_textData[i];
}
1. POSTリクエストのファイルの指定周りを設定
String start_request = getStartRequest_Text(_fileName, _comment);
2. ヘッダーを設定
uint16_t full_length;
full_length = start_request.length() + DataSize + end_request.length();
String postHeader = getPostHeader(full_length);
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
if (!client.connect(host, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return ;
}
3. 1.と2.をPOST
client.print(postHeader + start_request);
4. データの中身をPOST
client.write(&amp;amp;postData[0] , DataSize);
5. --foo_bar_baz--をPOST
client.println(end_request);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil('\r');
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
} else {
Serial.println(F(&amp;quot;[WARNING] Response Data is Nothing&amp;quot;));
}
String line = client.readStringUntil('\r');
Serial.println(line);
result += line;
}
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-2">実際にテキストファイルをアップロードしている様子&lt;/h3>
&lt;p>１. アップロード先のフォルダを作成しておきます。親フォルダIDは「&lt;code>https://drive.google.com/drive/folders/***&lt;/code>」の***の部分です。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c32ed96f-9dc4-59cb-0eef-c1091b088397.png" alt="GoogleDrive_Text_0.PNG">&lt;/p>
&lt;p>２. NefryBTのセットアップが完了するのを待ちます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/699a3064-ec88-d560-2429-f5cab310ce9b.jpeg" alt="DSC_0003.JPG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/3b5bc537-b82a-eb2e-a751-077817386f7e.jpeg" alt="DSC_0005.JPG">&lt;/p>
&lt;p>３. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/cfafe65c-ebb7-d82c-e566-d47436cf7ee9.jpeg" alt="DSC_0006.JPG">&lt;/p>
&lt;p>４. 成功しました！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/97de4845-f602-0aa5-26ac-064cd47609be.jpeg" alt="DSC_0007.JPG">&lt;/p>
&lt;p>５. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/72fae28e-6ac8-4fca-e940-265031c2c8cf.png" alt="GoogleDrive_Text_1.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/5b5cb82b-7dd1-d3e4-bf3b-bb60bfffdb1a.png" alt="GoogleDrive_Text_2.PNG">&lt;/p>
&lt;h2 id="jpeg">Jpegファイルをアップロードする&lt;/h2>
&lt;p>続いてJpegファイルをアップロードする方法です。&lt;strong>ここからかなり込み入った内容になります。&lt;/strong>
今回JpegファイルにしてアップロードしたものはNefryBTに接続したカメラモジュールで撮った画像となります。そのためカメラモジュールの話とGoogleDriveへアップロードする話が混在しますのでご了承ください・・・&lt;/p>
&lt;h3 id="heading-3">カメラモジュールについて&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/eeaaa02a-2c36-b131-aa32-eeacef9abb63.jpeg" alt="ArduCAM.jpg">&lt;/p>
&lt;p>使用したカメラモジュールは&lt;a href="https://www.switch-science.com/catalog/3780/">Arducam Miniモジュール(2メガピクセル)&lt;/a>です。ESP32向けのサンプルがあったので動かせるだろうと思って選びました。
(NefryBTのことを考えれば&lt;a href="https://www.switch-science.com/catalog/1626/">Groveのカメラ&lt;/a>でも良かったとあとで気づきました・・・)&lt;/p>
&lt;p>初期設定やカメラモジュールからデータを取得するところは&lt;a href="https://github.com/NearMugi/NefrySample/tree/master/ArduCAM/OV2640">プログラムソース&lt;/a>を参照ください。&lt;/p>
&lt;p>厄介なのは&lt;strong>取得したデータ全てがJpegデータではない&lt;/strong>ことです。このカメラモジュールの場合、1バイト目に0x00が入っています。これ、要らないデータなのです。きちんとJpegファイルにあたるデータをアップロードしないと正しく表示されません。&lt;/p>
&lt;p>&lt;a href="https://www.setsuki.com/hsp/ext/jpg.htm">Jpegファイル&lt;/a>は開始位置(0xFFD8)と終了位置(0xFFD9)が決まっています。この範囲のデータだけをアップロードすればJpegファイルとして正しく表示されます。&lt;/p>
&lt;h3 id="heading-4">プログラムのポイント&lt;/h3>
&lt;p>カメラモジュールの仕様を踏まえてアップロードします。&lt;/p>
&lt;ul>
&lt;li>Jpegファイルのデータサイズは何十万バイトと膨大なので全て変数に入れて一括でPOSTすることはできません。そのためデータを分割してカメラモジュールから取得、POSTを繰り返します。&lt;/li>
&lt;li>POSTリクエスト全体のサイズとJpegファイルのサイズが異なるので、&lt;strong>POSTリクエスト全体のサイズに足りない分を最後に0x00をPOSTする&lt;/strong>ことで整合性を合わせています。&lt;/li>
&lt;/ul>
&lt;p>プログラムソースを抜粋します。&lt;/p>
&lt;pre>&lt;code>// ReadSizeはカメラモジュールで取得したデータサイズ
//GoogleDriveへポスト
String start_request = api.getStartRequest_Jpeg(&amp;quot;Capture&amp;quot;, &amp;quot;From ArduCam&amp;quot;);
String end_request = api.getEndRequest();
uint32_t full_length;
full_length = start_request.length() + ReadSize + end_request.length();
String postHeader = api.getPostHeader(full_length);
(中略)
client.print(postHeader + start_request);
//JPEGデータ
static const size_t bufferSize = 2048;
static uint8_t buffer[bufferSize] = {0xFF};
uint32_t index = 0;
uint32_t sizeCnt = 0;
uint8_t now = 0;
uint8_t prev = 0;
myCAM.CS_LOW();
myCAM.set_fifo_burst();
カメラモジュールのデータをPOSTしている部分
bool isHeader = false;
while (ReadSize--) {
prev = now;
now = SPI.transfer(0x00);
//ヘッダーを探す(0xFF,0xD8)
if (!isHeader) {
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD8) {
Serial.println(F(&amp;quot;JPEG First Data is Found&amp;quot;));
buffer[0] = 0xFF;
buffer[1] = 0xD8;
index = 2;
sizeCnt = 2;
isHeader = true;
}
continue;
}
//ヘッダーが見つかったあと
sizeCnt++;
// JPEGファイルの最後を検出したら終了(0xFF,0xD9)
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD9) {
Serial.println(F(&amp;quot;JPEG Last Data is Found&amp;quot;));
buffer[index++] = now;
client.write(&amp;amp;buffer[0], index);
myCAM.CS_HIGH();
break;
}
if (index &amp;lt; bufferSize) {
buffer[index] = now;
index++;
} else {
if (!client.connected()) break;
client.write(&amp;amp;buffer[0], bufferSize);
index = 0;
buffer[index++] = now;
}
}
myCAM.CS_HIGH();
ReadSize += 1;
Serial.print(F(&amp;quot;JPEG Data Size: &amp;quot;)); Serial.println(sizeCnt);
Serial.print(F(&amp;quot;Remaining Data Size: &amp;quot;)); Serial.println(ReadSize);
client.println(end_request);
POSTリクエスト全体のサイズを調整している部分
//バッファーメモリサイズと画像サイズが異なるため、full_lengthに達していない。
//足りない分の帳尻を合わせる
uint8_t tmpbuf[ReadSize] = {0x00};
client.write(&amp;amp;tmpbuf[0], ReadSize);
(以下、省略)
}
&lt;/code>&lt;/pre>&lt;h3 id="jpeg-1">実際にJpegファイルをアップロードしている様子&lt;/h3>
&lt;p>１. アップロード先のフォルダはテキストファイルと同じところにします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/2660eda8-1474-644d-fae2-bba8b87c502d.png" alt="GoogleDrive_Jpeg_0.PNG">&lt;/p>
&lt;p>２. カメラで撮ってみます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c25e4a34-5b9c-44ff-3f78-b390c2c492de.jpeg" alt="DSC_0015.JPG">&lt;/p>
&lt;p>３. NefryBTのセットアップが完了するのを待ちます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/91963234-adc5-7317-654b-41dbd6b8b9ca.jpeg" alt="DSC_0010.JPG">
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/a85255a7-e375-2d75-c7d0-4d126e66b60f.jpeg" alt="DSC_0012.JPG">&lt;/p>
&lt;p>４. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/6e91d9ac-0e56-6df0-062b-2d158fd75b3e.jpeg" alt="DSC_0013.JPG">&lt;/p>
&lt;p>５. 成功しました！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c7291283-ac2a-feb9-d924-9c23963058b1.jpeg" alt="DSC_0014.JPG">&lt;/p>
&lt;p>６. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/b9ed65c6-185b-a57c-1877-1bb079b2400f.png" alt="GoogleDrive_Jpeg_1.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/fac4420d-d91a-3849-f71c-b17ab86d842f.png" alt="GoogleDrive_Jpeg_2.PNG">&lt;/p>
&lt;h2 id="heading-5">参考にしたサイト&lt;/h2>
&lt;p>大変助かりました。&lt;/p>
&lt;p>*&lt;a href="https://github.com/jalmeroth/ESP8266-OAUTH2/blob/master/ESP8266-OAUTH2/ESP8266-OAUTH2.ino">jalmeroth/ESP8266-OAUTH2&lt;/a>&lt;/p>
&lt;p>*&lt;a href="https://himakan.net/websites/how_to_google_oauth">Google APIを使用するためにGoogle OAuth認証をしようよ&lt;/a>&lt;/p>
&lt;p>*&lt;a href="https://zudoh.com/trouble-shooting/google-oauth-expired">時間が立つとGoogle APIのOAuth認証に失敗する&lt;/a>&lt;/p>
&lt;p>*&lt;a href="http://indoor.lolipop.jp/IndoorCorgiElec/ESP-SensorCam.php">ESP-SensorCam&lt;/a>&lt;/p>
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>NefryBTから直接GoogleDriveにアクセスできたときは感動しました！こんな小さなボードがネットに繋がるなんて！&lt;/p>
&lt;p>またGmailやスプレッドシートなどの他のアプリケーションにもアクセスできると思います。面白い組み合わせがあるかもしれません。&lt;/p>
&lt;p>みなさんのIoTライフの参考になれば幸いです。ではでは。&lt;/p></description></item><item><title>【ハンズオン資料】NefryBTでハジメテノIoT開発やってみよう！</title><link>https://dotstud.io/blog/handson-nefry-ma-kanazawa/</link><pubDate>Thu, 01 Nov 2018 10:07:13 +0900</pubDate><guid>https://dotstud.io/blog/handson-nefry-ma-kanazawa/</guid><description>&lt;p>この記事は11/1の&lt;a href="https://mashupawards.connpass.com/event/103791/">ハジメテノIoTハンズオン&lt;/a>向け資料です。記事を読んで試せる内容になっているので、終了後や参加されていない方もぜひ試してみてください！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->Nefry BTドキュメント&lt;!-- raw HTML omitted -->: NefryBTの使い方に関するドキュメントページです。基本の動作や、調べ方、質問できる場所なども案内しています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">今回やってみること&lt;/h2>
&lt;p>&lt;strong>湿度が高くなると自分のLINEに通知がくる仕組み&lt;/strong>を、Nefry BT、温湿度センサ、IFTTTというWebサービスを使って作ってみます。室内の状態が異常になったときに通知する仕組みのようなイメージです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-1">用意するもの&lt;/h3>
&lt;h4 id="nefry-bt">■Nefry BT＆ディスプレイ&lt;/h4>
&lt;p>Nefry BTは「ESP-WROOM-32」というWi-Fi・BLE通信モジュールを搭載した、Arduinoと同じように開発できるマイコンボードです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;a href="https://dotstud.io/docs/grove/">Grove&lt;/a>という刺すだけで配線できるモジュール対応のコネクタを搭載していて、&lt;strong>ハードウェアをあまり意識せず&lt;/strong>に開発できます。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="grove-">■Grove 温湿度センサ&lt;/h4>
&lt;p>刺すだけで配線できる&lt;a href="https://dotstud.io/docs/grove/">Grove&lt;/a>シリーズの、温度と湿度を取得できるセンサです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>安価で扱いやすいセンサですが、高い精度や細かいデータの取得には向きません。プロトタイプ向きなセンサです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-ide">■Arduino IDE&lt;/h4>
&lt;p>開発（プログラムの書き込み）には&lt;a href="https://www.arduino.cc/en/Main/Software">Arduino IDE&lt;/a>というフリーソフトウェアを利用します。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/docs/arduinoide-setup/">こちら&lt;/a>の手順を見ながらご自身のPCにインストールしてください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-ide-1">■Arduino IDE&lt;/h4>
&lt;p>開発（プログラムの書き込み）には&lt;a href="https://www.arduino.cc/en/Main/Software">Arduino IDE&lt;/a>というフリーソフトウェアを利用します。&lt;/p>
&lt;p>まだインストールしていない方は、&lt;a href="https://dotstud.io/docs/arduinoide-setup/">こちら&lt;/a>の手順を見ながら進めてください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="ifttt">■IFTTTアカウント&lt;/h4>
&lt;p>&lt;a href="https://ifttt.com/">IFTTT&lt;/a>（いふと）は、モノとWebやWebサービス同士を簡単に連携できるサービスです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>他の人が作ったアプレット（連携レシピ）を使ったり、自分で新たに作成したりできます。Nefry BTでは、簡単にIFTTT連携できるツールを用意しています。&lt;/p>
&lt;p>ページトップの「&lt;strong>Sign Up&lt;/strong>」からアカウントをご作成ください。&lt;/p>
&lt;h2 id="heading-2">事前準備（セットアップ）&lt;/h2>
&lt;h3 id="nefry-btwi-fi">Nefry BTのWi-Fi設定&lt;/h3>
&lt;p>まずはNefry BTがインターネットにつながるよう、会場のWi-Fi情報をNefry BTに教えてあげます。スマホやPCを使う時と同じですね。&lt;/p>
&lt;p>Nefry BTとPCを直接通信させ（アドホックモード）、立ち上がるNefryポータル（設定ウィンドウ）からSSIDとパスワードを入力する手順です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-3">■ディスプレイを取り付け電源を入れる&lt;/h4>
&lt;p>Nefry BTにディスプレイを取り付けます。4本の足をNefryの4本のピンソケットにさします。
&lt;img src="https://dotstud.io/img/docs/nefrybt/display2.png" alt="">&lt;/p>
&lt;p>このような形でささります。
&lt;img src="https://dotstud.io/img/docs/nefrybt/display3.png" alt="">&lt;/p>
&lt;p>Nefry BTに、PCやモバイルバッテリーなどから給電を開始します。ディスプレイに表示荒れる「NefryBT-XXXX」という部分が、&lt;strong>ご自身のNefry BTが出す無線の名称&lt;/strong>になります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="pcnefry-bt">■PCをNefry BTの無線に接続する&lt;/h4>
&lt;p>PCのWi-Fi接続設定から、ディスプレイに表示されている「NefryBT-XXXX」という無線を選び接続します。
&lt;img src="https://dotstud.io/img/docs/nefrybt/nefry_wifi.png" alt="">
セットアップ中PCはインターネットに繋がらなくなるので、この説明ページは開いたまま進めるのがオススメです。&lt;/p>
&lt;p>ちなみにSSIDは自由に変更することができます。（参照：&lt;a href="https://dotstud.io/docs/nefrybt-conv-change-ssid/">SSIDを変更する&lt;/a>）&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="nefry">■Nefryポータルで設定する&lt;/h4>
&lt;p>Nefry BTのWi-Fiに接続すると、自動でNefryポータルのウィンドウが立ち上がります（立ち上がらない場合はブラウザでhttp://192.168.4.1 にアクセスします）。
&lt;img src="https://dotstud.io/img/docs/nefrybt/setup_page.png" alt="">&lt;/p>
&lt;p>「お探しのページは…」と表示された場合は、「Move to main page」を洗濯してください。「Setup WiFi」をクリックし、利用するWi-FiのSSIDとパスワードを入力して「Save」で保存します。
&lt;img src="https://dotstud.io/img/docs/nefrybt/setup_wifi.png" alt="">
保存すると、Nefry BTは自動で再起動します。緑の点滅が終了し再起動が完了したら、Wi-Fiのセットアップは完了です。&lt;/p>
&lt;p>一度設定したら、同じWi-Fiを使っている間は起動するだけで接続されます。Wi-Fi情報は5つまで保存でき、消去もできます。&lt;/p>
&lt;h3 id="arduino-ide-2">開発環境（Arduino IDE）にボードを追加&lt;/h3>
&lt;p>Nefty BTの開発にはフリーソフトウェアの&lt;a href="https://www.arduino.cc/en/Main/Software">Arduino IDE&lt;/a>を利用します。インストールがまだの方は「&lt;a href="https://dotstud.io/docs/arduinoide-setup/">Arduino IDEのインストール&lt;/a>」を見ながら進めてください。&lt;/p>
&lt;p>Arduino IDEには、Nefry BTのボード情報の追加が必要です。「&lt;a href="https://dotstud.io/docs/nefrybt-setup-arduino-ide/">環境構築（Arduino IDE）&lt;/a>」を見ながら追加してください。&lt;/p>
&lt;h2 id="heading-4">はじめてのプログラムを書き込んでみる&lt;/h2>
&lt;p>まずはNefry BTに簡単なプログラムを書き込んでみましょう。Nefry BTは、最初から下記の機能が搭載されています。&lt;/p>
&lt;ul>
&lt;li>内蔵フルカラーLED&lt;/li>
&lt;li>スイッチ（SW/RST）&lt;/li>
&lt;/ul>
&lt;h3 id="nefry-bt-1">Nefry BTを起動&lt;/h3>
&lt;p>一度Nefry BTを電源から外し、ディスプレイを外します（内蔵LEDが隠れてしまうため）。マイコンボードに配線する時は、&lt;strong>常に電源OFFの状態で操作&lt;/strong>してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>マイコンボードは基本的に、給電によって電源のON/OFFを制御します。再起動時には最後に書き込んだプログラムが実行されます。プログラムは書き込むたびに上書きされます。&lt;/p>
&lt;p>再度給電します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>緑色のLEDが点滅したあと、ランダムに光ります。&lt;/p>
&lt;h3 id="l">まずはLチカ&lt;/h3>
&lt;p>最初のプログラムとして、Lチカをやってみます。LEDチカチカの略で、入門向けのプログラムとして汎用的に紹介されています。&lt;/p>
&lt;p>簡単なプログラムを書き込むことで、ボードが正常に動くか試す際に利用することも多いです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-ide-3">■Arduino IDEでプログラムを書く&lt;/h4>
&lt;p>Arduino IDEを立ち上げ、メニューから&lt;strong>&lt;code>ファイル &amp;gt; 新規ファイル&lt;/code>&lt;/strong>を選択します。下記のような画面が開きます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>エディタ部分に、下記のプログラムをコピーして貼り付けましょう（行番号までコピーしてしまわないようご注意ください）。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
void setup() {
}
void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code>&lt;/pre>&lt;p>下記でプログラムの内容を解説しています。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-5">■ボードを選択&lt;/h4>
&lt;p>メニューの&lt;strong>&lt;code>ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code>&lt;/strong>を選択します。この際、ボードは使っているリビジョンに合わせて選択してください。（参照：&lt;a href="https://dotstud.io/docs/nefrybt-setup-revision/">リビジョンを確認&lt;/a>）&lt;/p>
&lt;p>例えば、使っている基板がR3の場合は&lt;strong>&lt;code>ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code>&lt;/strong>を選択します（ハンズオンでは全てR3を使用しています）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-6">■シリアルポートを選択&lt;/h4>
&lt;p>Nefry BTをPCのUSBポートにさします。プログラムはこのポートを介して、シリアル通信でNefry BTに流し込まれます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/docs/nefrybt/power_supply.png" alt="">&lt;/p>
&lt;p>Macの場合は、メニューの&lt;strong>&lt;code>ツール &amp;gt; シリアルポート &amp;gt; /dev/cu.usbserial-xxxxxx&lt;/code>&lt;/strong>を選択します。環境によっては&lt;strong>&lt;code>/dev/tty.usbserial-xxxxxx&lt;/code>&lt;/strong>などの場合もあります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Windowsの場合は、&lt;strong>&lt;code>ツール &amp;gt; シリアルポート &amp;gt; /dev/COM-XX&lt;/code>&lt;/strong>を選択します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-7">■名前をつけて保存&lt;/h4>
&lt;p>&lt;strong>&lt;code>ファイル&amp;gt;名前をつけて保存&lt;/code>&lt;/strong>を選択して保存します。「NefryLedBlink」など、後からみてわかりやすい名前がオススメです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-8">■プログラムを書き込む&lt;/h4>
&lt;p>「✔️」を押してプログラムをコンパイルします。コンパイルとは、プログラムを機械が理解できる（人間には読みづらい）形式に変換することです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この手順は省略しても大丈夫ですが、シンタックス（文法）チェックをしてくれるので実施するのがオススメです。&lt;/p>
&lt;p>左上の「→」ボタンを押してNefry BTにプログラムを書き込みます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ESP32モジュールの特性上、書き込みに1分ほどかかります。エラーが出てしまうときは、「&lt;a href="https://dotstud.io/docs/nefrybt-error-handling-2/">コンパイルは成功するのに書き込みが失敗する&lt;/a>」を参照してください。&lt;/p>
&lt;p>3分以上かかる場合、Nefry BTの不良の可能性があるので申し出てください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-9">■動作を確認&lt;/h4>
&lt;p>起動したら、「青いLEDが1秒ごとに光る」ことを確認しましょう。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3">&lt;img src="https://i.gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>LEDがチカチカしました！&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-10">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を説明していきます。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
&lt;/code>&lt;/pre>&lt;p>冒頭でライブラリを読み込んでいます。Nefry BTのライブラリでできることは「&lt;a href="https://dotstud.io/docs/nefrybt-liblary/">Nefryのライブラリ&lt;/a>」を参照してください。&lt;/p>
&lt;pre>&lt;code>void setup() {
}
&lt;/code>&lt;/pre>&lt;p>起動時に処理される部分です。今回はなにもしません。&lt;/p>
&lt;pre>&lt;code>void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code>&lt;/pre>&lt;p>起動時に繰り返し実行する部分です。&lt;code>//&lt;/code>の後ろには任意のコメントを記入することができます。&lt;/p>
&lt;p>&lt;code>Nefry.setLed()&lt;/code>という関数で、光らせる色合いをRGBの順で指定します。始めにR=0, G=0, B=255を渡しているので、青く光ります。&lt;/p>
&lt;p>続いて&lt;code>Nefry.ndelay()&lt;/code>という関数で次の処理まで指定した時間待ちます。Arduinoでは時間はミリ秒で指定するので、1000は1秒です。&lt;/p>
&lt;p>&lt;code>Nefry.setLed()&lt;/code>に0, 0, 0を渡すことで、LEDはオフになります。オンとオフのあと1秒ずつ待つことで、点滅を表現しています。&lt;/p>
&lt;p>このように、マイコンボードは&lt;strong>①起動時に行う処理&lt;/strong>、&lt;strong>②起動中に繰り返される処理&lt;/strong>をプログラムして扱います。意外と簡単ではないですか……？&lt;/p>
&lt;h3 id="l-1">スイッチを押したらLチカ&lt;/h3>
&lt;h4 id="arduino-ide-4">■Arduino IDEでプログラムを書く&lt;/h4>
&lt;p>同様の手順で新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。おさらいがてら、やってみましょう。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
void setup() {
// スイッチを有効化
Nefry.enableSW();
}
void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code>&lt;/pre>&lt;p>下記でプログラムの内容を解説しています。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-11">■動作を確認&lt;/h4>
&lt;p>スイッチ（RSTではない方）を押したら、LEDが赤く光ることを確認します。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/73185cad56d6374e6ad394eafbfef51d">&lt;img src="https://i.gyazo.com/73185cad56d6374e6ad394eafbfef51d.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-12">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を説明します。&lt;/p>
&lt;pre>&lt;code>void setup() {
// スイッチを有効化
Nefry.enableSW();
}
&lt;/code>&lt;/pre>&lt;p>起動時の処理では、&lt;code>Nefry.enableSW()&lt;/code>という関数でスイッチを有効化しています。マイコンボードでは、入力・出力に使うピンなどは&lt;code>setup()&lt;/code>関数内で有効化します。&lt;/p>
&lt;pre>&lt;code>void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0);//色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>if(){}&lt;/code>という条件式で、なにか動作させたいときの条件を決めます。&lt;code>Nefry.readSW()&lt;/code>でスイッチが押されたことを取得し、スイッチが押されたら&lt;code>{}&lt;/code>内を実行します。&lt;/p>
&lt;p>&lt;code>{}&lt;/code>内ではLEDを赤く光らせ、1秒間待つ処理をしています。1秒後はまた&lt;code>void loop()&lt;/code>内を実行し、スイッチが押されているかどうか判定します。&lt;/p>
&lt;p>スイッチが押されている以外のときは、青色のLEDを光らせます。&lt;/p>
&lt;h2 id="grove">オフラインでGroveセンサを試す&lt;/h2>
&lt;p>次は、配線してセンサのデータを取得してみます。&lt;strong>まずはインターネットに繋がらない電子工作&lt;/strong>、です。&lt;/p>
&lt;p>エラーの切り分け（どこでエラーが起こっているか）を特定するために、自分で開発するときもステップバイステップでできているか確認しつつ進めるのがオススメです。&lt;/p>
&lt;h3 id="grove--1">Grove 温湿度センサを接続&lt;/h3>
&lt;p>Groveは刺すだけで配線できるのでGNDや信号線などの確認は必要ありませんが、デジタル・アナログ・I2Cなどの通信方法はGroveモジュールによって違います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>通信方式は温湿度センサの製造元・SeeedStudioの&lt;a href="http://wiki.seeedstudio.com/Grove-TemperatureAndHumidity_Sensor/">Wikiページ&lt;/a>を見て確認しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回は「A0」というソケットに差し込みます。少し硬いですが、カチッと言うまで押し込めます。&lt;strong>配線作業は常に電源オフの状態&lt;/strong> で行います。&lt;/p>
&lt;h3 id="heading-13">温湿度センサを扱うライブラリを読み込む&lt;/h3>
&lt;p>温湿度センサを扱うためのライブラリ（※）を追加でダウンロードします。リンク先のページで「Clone or Download」から「Download ZIP」を選択します（2つのページから両方ダウンロードしてください）。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/adafruit/DHT-sensor-library">https://github.com/adafruit/DHT-sensor-library&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/adafruit/Adafruit_Sensor">https://github.com/adafruit/Adafruit_Sensor&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Arduino IDEの&lt;strong>&lt;code>スケッチ &amp;gt; ライブラリをインクルード &amp;gt; .ZIP形式のライブラリをインストール&lt;/code>&lt;/strong>から、ダウンロードされたZIPファイルを2つとも追加して完了です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-14">プログラムを書き込む&lt;/h3>
&lt;p>新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。書き込み手順は、上記の「&lt;a href="#%E3%81%BE%E3%81%9A%E3%81%AFL%E3%83%81%E3%82%AB">まずはLチカ&lt;/a>」を参照してくださいね。&lt;/p>
&lt;pre>&lt;code>#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
#define DHTPIN A0
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
void setup() {
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
dht.begin();
}
void loop() {
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
if (isnan(h) || isnan(t)) {
Nefry.println(&amp;quot;読み取りに失敗しました…&amp;quot;);
return;
}
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
}
if (t &amp;gt; 30) {
Nefry.println(&amp;quot;すっごく部屋が暑いよ！&amp;quot;);
}
Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-15">動作を確認&lt;/h3>
&lt;p>メニューの&lt;strong>&lt;code>ツール&amp;gt;シリアルモニタ&lt;/code>&lt;/strong> を選択して開きます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>右下のbps設定を「115200bps」に変更します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>2秒ごとに、シリアルモニタに温度と湿度が表示されて行きます。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/1d912b8d68ca7b63eb0c991c262d83f0">&lt;img src="https://i.gyazo.com/1d912b8d68ca7b63eb0c991c262d83f0.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>あまり動きがないですが、息を吹きかけると湿度が上がることを確認できます。湿度や温度が上がるとアラートメッセージが出ることを確認できたでしょうか？&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-16">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を解説します。&lt;/p>
&lt;pre>&lt;code>#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
&lt;/code>&lt;/pre>&lt;p>ライブラリの読み込み部分です。&lt;/p>
&lt;pre>&lt;code>#define DHTPIN A0
#define DHTTYPE DHT11
&lt;/code>&lt;/pre>&lt;p>&lt;code>#define&lt;/code>で、配線したピンの場所を定義しています。「DHTPIN」という名前の箱に「A0」という値を入れているイメージです。&lt;/p>
&lt;p>こうしておくことで、あとでピンの場所を変えても、ここの値だけ変更すればOKになります。DHTTYPEの値はWikiを参考に入れているだけなので、覚えなくて大丈夫です。&lt;/p>
&lt;pre>&lt;code>void setup()
{
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
dht.begin();
}
&lt;/code>&lt;/pre>&lt;p>setup関数内ではセンサの読み込みの開始と、シリアルモニタへの表示メッセージを指定しています。&lt;/p>
&lt;pre>&lt;code>void loop()
{
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
// 省略
}
&lt;/code>&lt;/pre>&lt;p>loop関数では、まず2秒ごとにループすることを指定しています。&lt;/p>
&lt;p>&lt;code>dht&lt;/code>関数で湿度と温度の値を読み取っていて、値を&lt;code>h&lt;/code>と&lt;code>t&lt;/code>という変数にそれぞれ入れています。&lt;/p>
&lt;pre>&lt;code>void loop()
{
// 省略
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
}
if (t &amp;gt; 30) {
Nefry.println(&amp;quot;すっごく部屋が暑いよ！&amp;quot;);
}
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>if() {}&lt;/code> の条件式で、湿度が70を超えた時、温度が30を超えたときの処理をそれぞれ指定しています。&lt;/p>
&lt;pre>&lt;code>Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
&lt;/code>&lt;/pre>&lt;p>それ以外のときは温度・湿度を表示させます。&lt;/p>
&lt;h2 id="web">Webサービスと連携してみる&lt;/h2>
&lt;p>それでは、湿度が70％を超えたら自分のメールやチャットに通知がくるようにしてみましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;a href="https://ifttt.com/discover">IFTTT&lt;/a>で提供されているサービスであれば、LINE、メール、SMS、Twitter、Facebookなどなど、自由に通知先を設定することができます。この記事では、例としてLINEへの通知方法を紹介します。&lt;/p>
&lt;p>余裕のある方は好きな通知先を選択してみてください！&lt;/p>
&lt;h3 id="ifttt-1">IFTTTにアプレットを作成&lt;/h3>
&lt;p>まずはIFTTTにアプレット（レシピ）を作成します。IFTTTのアカウントを持っていない場合はアカウント取得から進めてください。&lt;/p>
&lt;p>IFTTTのアプレットは「〇〇が起きたら△△する」というようにトリガー（〇〇）とアクション（△△）に分けられます。&lt;/p>
&lt;p>今回は自作のサービスを利用できる「Webhooks」という機能を使い、「Webhooksを受け取ったらLINEに通知する」というアプレットを作ってみます。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-17">■トリガーの作成&lt;/h4>
&lt;p>IFTTTの&lt;a href="https://ifttt.com/create">アプレット作成ページ&lt;/a>から「+this」部分をクリックし、トリガーの作成をします。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「Webhooks」を検索しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「Receive a web request」を選択します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>任意のイベント名をつけます。後ほどNefry BTにも登録するのでメモ帳などにコピーしておきましょう（大文字・小文字の区別があるのでコピー＆ペーストがオススメです）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-18">■アクションの作成&lt;/h4>
&lt;p>続いてアクションを作成します。「+that」から進めましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Nefry BTからの送信を受け取ったら実行したいWebサービスを自由に選びます。今回はサンプルとしてLINEを連携してみますが、Twitter、Slack、Gmail、Googleカレンダー、Facebookなどなど、たぶん思いつく有名Webサービスはだいたいあります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>起こしたいアクションを選びます。LINEは「メッセージを送る」機能のみですが、サービスによってはさまざまなアクションが起こせます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>クリックすると、初回はアカウント認証を求められる気がします。LINEのログインメールアドレスがわからない、という方は、スマホのLINEアプリの設定から確認できます（&lt;strong>&lt;code>友だちタブ &amp;gt; 設定（歯車）ボタン &amp;gt; アカウント&amp;gt;メールアドレス・パスワード&lt;/code>&lt;/strong>）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>メッセージを送るルーム、メッセージ内容を設定します。「1:1で〜」を選択すると自分個人宛てにメッセージが届きます。メッセージは「LINE Notify」というアカウントから送られる仕組みです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>通知先は自分個人の他に、グループも選択できます。&lt;/p>
&lt;p>メッセージを自由に作成します。Nefry BTから値を送信し受け取りたい場合は、「Add Ingredient」から&lt;code>Value1&lt;/code>を選択します。下記のような場合は、NefryBT側のプログラムで1つ目の値に湿度を送るよう設定します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このような感じで設定したら、「Create action」で作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>最終確認がされるので「Finish」で登録しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="webhookssecretkey">■WebhooksのSecretKeyを取得&lt;/h4>
&lt;p>Nefry BTとWebhooksと紐付けるための「Secret Key」を取得します。パスワードのようなものです。上部の検索欄からWebhooksを検索しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Webhooksのページに移動します（初回は認証画面が表示されるので「Connect」で開始しましょう）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>右上の「Setting」に移動します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「URL」の末尾に自身のSecret Keyが記載されているのでコピーし、メモしておきます。このKeyは漏れると他人が自分にLINEを送れるようになってしまうので、&lt;strong>Web上に公開しないよう注意&lt;/strong>してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-19">プログラムを書き込む&lt;/h3>
&lt;h4 id="heading-20">■プログラム&lt;/h4>
&lt;p>以下のプログラムをNefry BTに書き込みます。&lt;/p>
&lt;pre>&lt;code>#include &amp;quot;DHT.h&amp;quot;
#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;NefryIFTTT.h&amp;gt;
#define DHTPIN A0
#define DHTTYPE DHT11
String Event, SecretKey;
DHT dht(DHTPIN, DHTTYPE);
void setup() {
Nefry.println(&amp;quot;温度・湿度をチェック&amp;quot;);
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;, 0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;, 1);
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
dht.begin();
}
void loop() {
delay(2000);
float h = dht.readHumidity();
float t = dht.readTemperature();
if (isnan(h) || isnan(t)) {
Nefry.println(&amp;quot;読み取りに失敗しました…&amp;quot;);
return;
}
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
bool sendData = IFTTT.send(Event, SecretKey, (String)h);
if (!sendData) { //IFTTTにデータ送信が成功したかの判定
Nefry.setLed(255, 0, 0); //エラーの時、赤色点灯
delay(3000);
} else {
Nefry.setLed(0, 255, 0); //成功の時、緑色点灯
delay(3000);
}
Nefry.ndelay(1000 * 30);
}
Nefry.print(&amp;quot;湿度: &amp;quot;);
Nefry.print(h);
Nefry.print(&amp;quot; %\t&amp;quot;);
Nefry.print(&amp;quot;温度: &amp;quot;);
Nefry.print(t);
Nefry.println(&amp;quot; *C &amp;quot;);
}
&lt;/code>&lt;/pre>&lt;h3 id="nefry-btifttt">Nefry BTにIFTTTのアカウント情報を設定&lt;/h3>
&lt;p>Nefry BTにディスプレイを取り付けてから起動し、表示されているIPアドレスにアクセスします（画像の場合は&lt;code>http://192.168.4.1/&lt;/code>。人によって違います。 ）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「Data Store」に移動します。
&lt;img src="https://dotstud.io/img/docs/nefrybt/ifttt_setup1.png" alt="">&lt;/p>
&lt;p>先ほど取得したWebhooksの「Secret Key」と「Event Name」をそれぞれ入力し保存します。Event Nameは大文字・小文字の区別があります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「Save」で保存するとNefry BTが再起動し、準備は完了です。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="heading-21">動作を確認&lt;/h3>
&lt;p>さっそく完成したものを動かしてみましょう。&lt;/p>
&lt;p>湿度の値が高くなると……&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/bd6a5ae77bc93459b3c602d82fb00faa">&lt;img src="https://i.gyazo.com/bd6a5ae77bc93459b3c602d82fb00faa.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>LINEに通知されました！&lt;/p>
&lt;p>お疲れ様でした〜！&lt;/p>
&lt;h3 id="heading-22">プログラムの解説&lt;/h3>
&lt;p>要所を説明します。大事なところはちょっとだけです。&lt;/p>
&lt;pre>&lt;code>void setup() {
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;, 0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;, 1);
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>Nefry.setStoreTitle({タイトル}, {チャンネル番号})&lt;/code>関数を使い、Nefry BTのDataStore機能に場所を作っています。この値はNefryポータル側から入力でき、変更があってもプログラムを書き換える必要はありません。&lt;/p>
&lt;p>また値を&lt;code>getStoreStr({チャンネル番号})&lt;/code>で、ポータル側で設定した値を受け取っています。&lt;/p>
&lt;pre>&lt;code>void loop() {
// 省略
if (h &amp;gt; 70) {
Nefry.println(&amp;quot;すっごく湿度が高いよ！&amp;quot;);
bool sendData = IFTTT.send(Event, SecretKey, (String)h);
if (!sendData) { //IFTTTにデータ送信が成功したかの判定
Nefry.setLed(255, 0, 0); //エラーの時、赤色点灯
delay(3000);
} else {
Nefry.setLed(0, 255, 0); //成功の時、緑色点灯
delay(3000);
}
Nefry.ndelay(1000 * 30);
}
}
&lt;/code>&lt;/pre>&lt;p>先ほど同様湿度が70%を超えたとき、という条件文を作っています。&lt;code>IFTTT.send()&lt;/code>関数を使い、もし送れなかったときは赤いLEDを光らせるという処理をしています（&lt;code>!&lt;/code>は&lt;code>!==&lt;/code>と同義で、&lt;code>FALSE&lt;/code>が返ったときに実行されます）。&lt;/p>
&lt;p>何度も連続して通知が来るとウザいので、一度送ったあとは30秒（1000ミリ秒×30）待ちます。場合によっては30分待つ、1日待つ、などに変更します。&lt;/p>
&lt;h2 id="-">応用: いろいろなセンサを試してみる&lt;/h2>
&lt;p>刺すだけで配線できるGroveモジュールは100種類以上あり、いろいろなデータを手軽に扱うことができます。下記ではモジュールと利用例を紹介します。&lt;/p>
&lt;h3 id="heading-23">磁気スイッチ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>磁石がくっついているか否か、を検知するセンサです。ドアの開閉検知によく使われ、市販の開閉検知装置も磁気センサを使っていることが多いです。&lt;/p>
&lt;p>ドアが閉まっているときは磁石とセンサが接着、開いたときは離れるように設置することで開閉を検知できます。&lt;/p>
&lt;ul>
&lt;li>例: 開閉検知&lt;/li>
&lt;li>参考: &lt;a href="http://www.atmarkit.co.jp/ait/articles/1806/26/news001.html">磁気スイッチを使ってポストの開閉をメールで通知&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-24">人感センサ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>人が近くにいることを検知するセンサです。防犯用の近づくと光るなどに使われます。&lt;/p>
&lt;ul>
&lt;li>例: 防犯灯&lt;/li>
&lt;li>参考: &lt;a href="https://dotstud.io/blog/nefrybt-handson-pir-linebot/">Nefry BTと人感センサで防犯LINE BOTを作ってみよう&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-25">光センサ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>照度（光の度合い）を検知します。暗くなったら明かりをつける仕組みや、異常のときに光るパトランプの近くに起き通知するなど、異常検知にも利用できます。&lt;/p>
&lt;ul>
&lt;li>例: 異常検知&lt;/li>
&lt;li>参考: &lt;a href="https://qiita.com/n0bisuke/items/257126448cf4db482d43">NefryでGrove Luminance Sensor(照度センサ)を触るメモ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-26">超音波距離センサ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>センサからモノへの距離を測るセンサです。超音波をぶつけて跳ね返りを調べる仕組みです。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://qiita.com/HiroyukiYasui/items/cf477e9ce83682513ab1">NefryBTでGroveセンサーをつなげる時の？について&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-27">サーボモータ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>角度を指定して回転させることができるアクチュエータです。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://poche-magique.com/2018/05/06/nefrybt_grove_servo/">[Nefry BTとGrove接続実験] サーボモータ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="heading-28">カメラ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>例: 機械学習で画像認識&lt;/li>
&lt;li>&lt;a href="https://dotstud.io/blog/nefrybt-pepper-monitoring-system/">Node.jsとNefry BTで監視システムを作ろう！ for Pepper #iotlt&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="heading-29">関連情報&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstud.io/shop/nefry-bt-set/">Nefr BTの購入&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefry BTはこちらから購入できます（送料無料）。その他にも千石電商、ツクモ、若松通商、共立電子などの実店舗やECサイトで購入できます。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstud.io/docs/nefrybt/">Nefry BTドキュメント&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefry BTでは、IFTTTを使ったWebサービスとの連携や、その他のクラウドサービスとの連携も簡単です。ディスプレイを使ったイラスト描画や、100以上あるGroveモジュールの活用なども、ぜひ試してみてください。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.facebook.com/groups/nefry">Nefryユーザーグループ（FB）&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefryユーザ同士が交流するページです。質問を投稿して解決した事例もたくさんありますので、困った際などはぜひお気軽にご利用ください。開発者もよく登場します。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://nefry.connpass.com/event/97692/">Nefry User Meetup!&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefryユーザによる開催イベントです。ハンズオンやLT会、もくもく会などを実施しています。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstudio.connpass.com/">dotstudioイベント&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>dotstudioによる開催イベントです。Nefry BT以外の題材を扱うことも多いです。&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【ハンズオン資料】Nefry BTと人感センサで防犯LINE BOTを作ってみよう</title><link>https://dotstud.io/blog/nefrybt-handson-pir-linebot/</link><pubDate>Thu, 30 Aug 2018 09:40:24 +0900</pubDate><guid>https://dotstud.io/blog/nefrybt-handson-pir-linebot/</guid><description>&lt;p>この記事は8/30の&lt;a href="https://algyan.connpass.com/event/90564/">IoT超入門！「Nefry BT」無料お試し体験ハンズオン！&lt;/a>向け資料です。&lt;strong>記事を読んで試せる内容&lt;/strong>になっているので、参加されていない方もぜひ試してみてください！&lt;/p>
&lt;p>最終的にはこんなものが出来上がります。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/a2548f0ff2534496f75b85e87b5b629d">&lt;img src="https://i.gyazo.com/a2548f0ff2534496f75b85e87b5b629d.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">今回やってみること&lt;/h2>
&lt;p>&lt;strong>人が近づくと自分のLINEに通知がくる仕組み&lt;/strong>を、Nefry BT、LINE（、Azure）を使って作ってみます。近づくと点灯する玄関の防犯ライトに近いイメージです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-1">用意するもの&lt;/h3>
&lt;h4 id="nefry-bt">■Nefry BT＆ディスプレイ&lt;/h4>
&lt;p>Nefry BTは「ESP-WROOM-32」というWi-Fi・BLE通信モジュールを搭載した、Arduinoと同じように開発できるマイコンボードです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;a href="https://dotstud.io/docs/grove/">Grove&lt;/a>という刺すだけで配線できるモジュール対応のコネクタを搭載していて、&lt;strong>ハードウェアをあまり意識せず&lt;/strong>に開発できます。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="grove-pir">■Grove PIRモーションセンサ&lt;/h4>
&lt;p>刺すだけで配線できる&lt;a href="https://dotstud.io/docs/grove/">Grove&lt;/a>シリーズの、人感センサです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-ide">■Arduino IDE&lt;/h4>
&lt;p>開発（プログラムの書き込み）には&lt;a href="https://www.arduino.cc/en/Main/Software">Arduino IDE&lt;/a>というフリーソフトウェアを利用します。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/docs/arduinoide-setup/">こちら&lt;/a>の手順を見ながらご自身のPCにインストールしてください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="line">■LINEアカウント&lt;/h4>
&lt;p>今回はLINE通知の機能を作成します。LINEアカウントをご用意ください。&lt;/p>
&lt;p>また、PCから設定する際にメールアドレスでのログインが必要になります。あらかじめスマートフォンアプリでメールアドレスを設定しておいてください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="azure">■Azureアカウント&lt;/h4>
&lt;p>WIP&lt;/p>
&lt;h2 id="heading-2">事前準備（セットアップ）&lt;/h2>
&lt;h3 id="nefry-btwi-fi">Nefry BTのWi-Fi設定&lt;/h3>
&lt;p>まずはNefry BTがインターネットにつながるよう、会場のWi-Fi情報をNefry BTに教えてあげます。&lt;/p>
&lt;p>Nefry BTとPCを直接通信させ（アドホックモード）、立ち上がるNefryポータル（設定ウィンドウ）からSSIDとパスワードを入力する手順です。&lt;a href="https://dotstud.io/docs/nefrybt-setup-wifi/">こちら&lt;/a>の手順を見ながら進めてみてください。&lt;/p>
&lt;p>一度設定したら、同じWi-Fiを使っている間は起動するだけで接続されます。Wi-Fi情報は5つまで保存でき、消去もできます。&lt;/p>
&lt;h3 id="arduino-ide-1">開発環境（Arduino IDE）にボードを追加&lt;/h3>
&lt;p>Nefty BTの開発にはフリーソフトウェアの&lt;a href="https://www.arduino.cc/en/Main/Software">Arduino IDE&lt;/a>を利用します。インストールがまだの方は「&lt;a href="https://dotstud.io/docs/arduinoide-setup/">Arduino IDEのインストール&lt;/a>」を見ながら進めてください。&lt;/p>
&lt;p>Arduino IDEには、Nefry BTのボード情報の追加が必要です。「&lt;a href="https://dotstud.io/docs/nefrybt-setup-arduino-ide/">環境構築（Arduino IDE）&lt;/a>」を見ながら追加してください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-3">はじめてのプログラムを書き込んでみる&lt;/h2>
&lt;p>まずはNefry BTに簡単なプログラムを書き込んでみましょう。Nefry BTは、最初から下記の機能が搭載されています。&lt;/p>
&lt;ul>
&lt;li>内蔵フルカラーLED&lt;/li>
&lt;li>スイッチ（SW/RST）&lt;/li>
&lt;/ul>
&lt;h3 id="l">まずはLチカ&lt;/h3>
&lt;p>最初のプログラムとして、Lチカをやってみます。LEDチカチカの略で、Webでいう”Hello, World!”です。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-ide-2">■Arduino IDEでプログラムを書く&lt;/h4>
&lt;p>Arduino IDEを立ち上げ、メニューから&lt;strong>&lt;code>ファイル &amp;gt; 新規ファイル&lt;/code>&lt;/strong>を選択します。下記のような画面が開きます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>エディタ部分に、下記のプログラムをコピーして貼り付けましょう。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
void setup() {
}
void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code>&lt;/pre>&lt;p>下記でプログラムの内容を解説しています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-4">■ボードを選択&lt;/h4>
&lt;p>メニューの&lt;strong>&lt;code>ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code>&lt;/strong>を選択します。この際、ボードは使っているリビジョンに合わせて選択してください。（参照：&lt;a href="https://dotstud.io/docs/nefrybt-setup-revision/">リビジョンを確認&lt;/a>）&lt;/p>
&lt;p>例えば、使っている基板がR3の場合は&lt;strong>&lt;code>ツール &amp;gt; ボード &amp;gt; Nefry BT R2 / R3&lt;/code>&lt;/strong>を選択します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-5">■シリアルポートを選択&lt;/h4>
&lt;p>Nefry BTをPCのUSBポートにさします。プログラムはこのポートを介して、シリアル通信でNefry BTに流し込まれます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/docs/nefrybt/power_supply.png" alt="">&lt;/p>
&lt;p>Macの場合は、メニューの&lt;strong>&lt;code>ツール &amp;gt; シリアルポート &amp;gt; /dev/cu.usbserial-xxxxxx&lt;/code>&lt;/strong>を選択します。環境によっては&lt;strong>&lt;code>/dev/tty.usbserial-xxxxxx&lt;/code>&lt;/strong>などの場合もあります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Windowsの場合は、&lt;strong>&lt;code>ツール &amp;gt; シリアルポート &amp;gt; /dev/COM-XX&lt;/code>&lt;/strong>を選択します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-6">■名前をつけて保存&lt;/h4>
&lt;p>&lt;strong>&lt;code>ファイル&amp;gt;名前をつけて保存&lt;/code>&lt;/strong>を選択して保存します。「NefryLedBlink」など、後からみてわかりやすい名前がオススメです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-7">■プログラムを書き込む&lt;/h4>
&lt;p>「✔️」を押してプログラムをコンパイルします。
&lt;img src="https://dotstud.io/img/docs/nefrybt/compile.png" alt="">
この手順は省略しても大丈夫ですが、シンタックス（文法）チェックをしてくれるので実施するのがオススメです。&lt;/p>
&lt;p>左上の「→」ボタンを押してNefry BTにプログラムを書き込みます。
&lt;img src="https://dotstud.io/img/docs/nefrybt/write.png" alt="">&lt;/p>
&lt;p>ESP32モジュールの特性上、書き込みに1分ほどかかります。エラーが出てしまうときは、「&lt;a href="https://dotstud.io/docs/nefrybt-error-handling-2/">コンパイルは成功するのに書き込みが失敗する&lt;/a>」を参照してください。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-8">■動作を確認&lt;/h4>
&lt;p>起動したら、「青いLEDが1秒ごとに光る」ことを確認しましょう。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3">&lt;img src="https://i.gyazo.com/801e9ff4982f3326e6f1c3a133fd8de3.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-9">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を説明していきます。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
&lt;/code>&lt;/pre>&lt;p>冒頭でライブラリを読み込んでいます。Nefry BTのライブラリでできることは「&lt;a href="https://dotstud.io/docs/nefrybt-liblary/">Nefryのライブラリ&lt;/a>」を参照してください。&lt;/p>
&lt;pre>&lt;code>void setup() {
}
&lt;/code>&lt;/pre>&lt;p>起動時に処理される部分です。今回はなにもしません。&lt;/p>
&lt;pre>&lt;code>void loop() {
Nefry.setLed(0, 0, 255); //色合いをRGBで指定
Nefry.ndelay(1000); //1秒待つ
Nefry.setLed(0, 0, 0); //LEDをオフにする
Nefry.ndelay(1000); //1秒待つ
}
&lt;/code>&lt;/pre>&lt;p>起動時に繰り返し実行する部分です。&lt;/p>
&lt;p>&lt;code>Nefry.setLed()&lt;/code>という関数で、光らせる色合いをRGBの順で指定します。始めにR=0, G=0, B=255を渡しているので、青く光ります。&lt;/p>
&lt;p>続いて&lt;code>Nefry.ndelay()&lt;/code>という関数で次の処理まで指定した時間待ちます。Arduinoでは時間はミリ秒で指定するので、1000は1秒です。&lt;/p>
&lt;p>&lt;code>Nefry.setLed()&lt;/code>に0, 0, 0を渡すことで、LEDはオフになります。オンとオフのあと1秒ずつ待つことで、点滅を表現しています。&lt;/p>
&lt;h3 id="l-1">スイッチを押したらLチカ&lt;/h3>
&lt;h4 id="arduino-ide-3">■Arduino IDEでプログラムを書く&lt;/h4>
&lt;p>同様の手順で新規ファイルを作成し、下記のプログラムをNefry BTに書き込みます。おさらいがてら、やってみましょう。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
void setup() {
// スイッチを有効化
Nefry.enableSW();
}
void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0);
Nefry.ndelay(1000);
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code>&lt;/pre>&lt;p>下記でプログラムの内容を解説しています。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-10">■動作を確認&lt;/h4>
&lt;p>スイッチ（RSTではない方）を押したら、LEDが赤く光ることを確認します。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/73185cad56d6374e6ad394eafbfef51d">&lt;img src="https://i.gyazo.com/73185cad56d6374e6ad394eafbfef51d.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-11">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を説明します。&lt;/p>
&lt;pre>&lt;code>void setup() {
// スイッチを有効化
Nefry.enableSW();
}
&lt;/code>&lt;/pre>&lt;p>起動時の処理では、&lt;code>Nefry.enableSW()&lt;/code>という関数でスイッチを有効化しています。マイコンボードでは、入力・出力に使うピンなどは&lt;code>setup()&lt;/code>関数内で有効化します。&lt;/p>
&lt;pre>&lt;code>void loop() {
// スイッチが押されたら
if (Nefry.readSW()) {
Nefry.setLed(255, 0, 0);
Nefry.ndelay(1000);
}
// 青色に戻す
Nefry.setLed(0, 0, 255);
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>if(){}&lt;/code>という条件式で、スイッチが押されたことを取得します。スイッチが押されたら1秒間赤いLEDを光らせます。スイッチが押されている以外のときは、青色のLEDを光らせます。&lt;/p>
&lt;h2 id="grove">オフラインでGroveセンサを試す&lt;/h2>
&lt;p>次は、配線してセンサのデータを取得してみます。&lt;strong>まずはインターネットに繋がらない電子工作&lt;/strong>、です。&lt;/p>
&lt;p>エラーの切り分け（どこでエラーが起こっているか）を特定するために、自分で開発するときもステップバイステップでできているか確認しつつ進めるのがオススメです。&lt;/p>
&lt;h3 id="grove-pir-1">Grove PIRモーションセンサを接続&lt;/h3>
&lt;p>Groveは刺すだけで配線できるのでGNDや信号線などの確認は必要ありませんが、デジタル・アナログ・I2Cなどの通信方法はGroveモジュールによって違います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>PIRモーションセンサの製造元・SeeedStudioの&lt;a href="http://wiki.seeedstudio.com/Grove-PIR_Motion_Sensor/">Wikiページ&lt;/a>を見てみると、デジタルで読みとることがわかります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Nefry BTのデジタル入力に対応する、「D2」というソケットに差し込みます。少し硬いですが、カチッと言うまで押し込めます。&lt;strong>配線作業は常に電源オフの状態&lt;/strong>で行います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-12">プログラムを書き込む&lt;/h3>
&lt;h4 id="heading-13">■プログラム&lt;/h4>
&lt;p>以下のプログラムをNefry BTに書き込みます。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
#define PIR_MOTION_SENSOR D2
void setup()
{
pinMode(PIR_MOTION_SENSOR, INPUT);
}
void loop()
{
if(digitalRead(PIR_MOTION_SENSOR)) {
Nefry.println(&amp;quot;誰かきたよ&amp;quot;);
} else {
Nefry.println(&amp;quot;監視中&amp;quot;);
}
delay(200);
}
&lt;/code>&lt;/pre>&lt;p>書き込み手順は、上記の「&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%82%93%E3%81%A7%E3%81%BF%E3%82%8B">はじめてのプログラムを書き込んでみる&lt;/a>」を参照してくださいね。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-14">■動作を確認&lt;/h4>
&lt;p>メニューの&lt;strong>&lt;code>ツール&amp;gt;シリアルモニタ&lt;/code>&lt;/strong>を選択して開きます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>右下のbps設定を「115200bps」に変更します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>人感センサに手をかざすと、シリアルモニタに「誰かきたよ」というメッセージが流れます。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/adaf9534c9e944f3131336058a304671">&lt;img src="https://i.gyazo.com/adaf9534c9e944f3131336058a304671.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-15">■プログラムの解説&lt;/h4>
&lt;p>プログラムの要所を解説します。&lt;/p>
&lt;pre>&lt;code>#define PIR_MOTION_SENSOR D2
&lt;/code>&lt;/pre>&lt;p>&lt;code>#define&lt;/code>で、配線したピンの場所を定義しています。「PIR_MOTION_SENSOR」という名前の箱に「D2」という値を入れているイメージです。&lt;/p>
&lt;p>こうしておくことで、あとでピンの場所を変えても、ここの値だけ変更すればOKになります。&lt;/p>
&lt;pre>&lt;code>void setup()
{
pinMode(PIR_MOTION_SENSOR, INPUT);
}
&lt;/code>&lt;/pre>&lt;p>setup関数内ではスイッチのとき同様、今回使うピンを有効化しています。&lt;code>pinMode({ピンの場所}, {モード})&lt;/code>で指定します。&lt;/p>
&lt;pre>&lt;code>void loop()
{
if(digitalRead(PIR_MOTION_SENSOR)) {
Nefry.println(&amp;quot;誰かきたよ&amp;quot;);
} else {
Nefry.println(&amp;quot;監視中&amp;quot;);
}
delay(200);
}
&lt;/code>&lt;/pre>&lt;p>loop関数では、モーションセンサに入力があったとき/それ以外のときで処理を分けています。&lt;/p>
&lt;p>&lt;code>digitalRead({ピン番号})&lt;/code>で指定したピンの信号を読み取っていて、戻り値は「人を検知している = HIGH」「検知していない = LOW」です。&lt;/p>
&lt;p>&lt;code>if(digitalRead(PIR_MOTION_SENSOR)) {}&lt;/code> の部分は&lt;code>if(digitalRead(PIR_MOTION_SENSOR) == HIGH) {&lt;/code>と同義で、比較演算子を省略するとHIGHのときにに実行されます。&lt;/p>
&lt;p>200ミリ秒待つことで、0.2秒に1回センサの値をチェックするようになっています。&lt;/p>
&lt;h2 id="line-1">LINEに通知してみる&lt;/h2>
&lt;p>それでは、人感センサが検知したら（= 人が来たら）自分のLINEに通知がくるようにしてみましょう。LINEが提供している、LINE Notifyというサービスを使っていきます。&lt;/p>
&lt;h3 id="line-2">LINEの設定&lt;/h3>
&lt;h4 id="line-notify">■LINE Notifyアカウントと友達になる&lt;/h4>
&lt;p>LINE Notifyでは、「LINE Notify」というアカウントからメッセージが届きます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/109f4aa667871bcdb82342d6e2ac3233.png" alt="">&lt;/p>
&lt;p>まずはQRコードを読み取り、アカウントと友達になっておきましょう。&lt;/p>
&lt;h4 id="heading-16">■トークンを作成&lt;/h4>
&lt;p>自分のLINEと紐付けるために、トークン（鍵のようなもの）を発行します。&lt;/p>
&lt;p>&lt;a href="https://notify-bot.line.me/my/">LINE Notifyの設定ページ&lt;/a>にいき、「トークンを発行する」ボタンを押します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>下記のようなウィンドウが表示されます。「トークン名」にはLINE Notifyが何のサービスと連携したかわかる名前をつけましょう。通知するルームは、今回は「1:1」を選択します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>トークンが発行されたら、コピーしてメモしておきます（あとで使います）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-17">プログラムを書き込む&lt;/h3>
&lt;h4 id="heading-18">■プログラム&lt;/h4>
&lt;p>以下のプログラムをNefry BTに書き込みます。すごく長いですが、後ほど説明します。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;NefryLineNotify.h&amp;gt;
#define PIR_MOTION_SENSOR D2
String auth, message;
void setup() {
pinMode(PIR_MOTION_SENSOR, INPUT);
Nefry.setStoreTitle(&amp;quot;LINE Auth&amp;quot;,0);
Nefry.setStoreTitle(&amp;quot;LINEMessage&amp;quot;,1);
auth = Nefry.getStoreStr(0);
message = Nefry.getStoreStr(1);
Nefry.enableSW();
}
void loop() {
if(digitalRead(PIR_MOTION_SENSOR)) {
Nefry.println(&amp;quot;誰かきたよ&amp;quot;);
if (!LineNotify.send(auth, message)) {
Nefry.setLed(255, 0, 0);
}
Nefry.ndelay(1000*30);
} else {
Nefry.println(&amp;quot;監視中&amp;quot;);
}
delay(200);
}
&lt;/code>&lt;/pre>&lt;p>書き込み手順は、上記の「&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%82%93%E3%81%A7%E3%81%BF%E3%82%8B">はじめてのプログラムを書き込んでみる&lt;/a>」を参照してくださいね。&lt;/p>
&lt;h3 id="nefry-bt-1">Nefry BTにトークン情報を設定&lt;/h3>
&lt;p>ディスプレイに表示されているIPアドレスに接続し、&lt;a href="https://dotstud.io/docs/nefrybt-basic-portal/">Nefryポータル&lt;/a>を開きます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「DataStore」のページに行くと2つのフォームが用意されているので、「LINE Auth」には先ほどコピーしたトークン、「LINEMessage」には送りたいメッセージを入力します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-19">■動作を確認&lt;/h4>
&lt;p>さっそく完成したものを動かしてみましょう。&lt;/p>
&lt;p>センサに人が近づくと……&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/a2548f0ff2534496f75b85e87b5b629d">&lt;img src="https://i.gyazo.com/a2548f0ff2534496f75b85e87b5b629d.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>LINEに通知されました！&lt;/p>
&lt;p>完成できた方、お疲れ様でした〜！&lt;/p>
&lt;h3 id="heading-20">プログラムの解説&lt;/h3>
&lt;p>例のすごく長いコードについて、要所を説明します。大事なところはちょっとだけです。&lt;/p>
&lt;pre>&lt;code>void setup() {
pinMode(PIR_MOTION_SENSOR, INPUT);
Nefry.setStoreTitle(&amp;quot;LINE Auth&amp;quot;,0);
Nefry.setStoreTitle(&amp;quot;LINEMessage&amp;quot;,1);
auth = Nefry.getStoreStr(0);
message = Nefry.getStoreStr(1);
Nefry.enableSW();
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>Nefry.setStoreTitle({タイトル}, {チャンネル番号})&lt;/code>関数を使い、Nefry BTのDataStore機能に場所を作っています。この値はNefryポータル側から入力でき、変更があってもプログラムを書き換える必要はありません。&lt;/p>
&lt;p>また値を&lt;code>getStoreStr({チャンネル番号})&lt;/code>で、ポータル側で設定した値を受け取っています。&lt;/p>
&lt;pre>&lt;code>void loop() {
if(digitalRead(PIR_MOTION_SENSOR)) {
Nefry.println(&amp;quot;誰かきたよ&amp;quot;);
if (!LineNotify.send(auth, message)) {
Nefry.setLed(255, 0, 0);
}
Nefry.ndelay(1000*30);
} else {
Nefry.println(&amp;quot;監視中&amp;quot;);
}
delay(200);
}
&lt;/code>&lt;/pre>&lt;p>先ほど同様人感センサが検知したとき、という条件文を作っています。&lt;code>LineNotify.send()&lt;/code>関数を使い、もし送れなかったときは赤いLEDを光らせるという処理をしています（&lt;code>!&lt;/code>は&lt;code>!==&lt;/code>と同義で、&lt;code>FALSE&lt;/code>が返ったときに実行されます）。&lt;/p>
&lt;p>何度も連続してLINEが来るとウザいので、一度送ったあとは30秒待ちます。&lt;/p>
&lt;p>~~LINE送信を実装している部分です、が、これ以降は&lt;strong>気にしなくていいです&lt;/strong>。この部分は&lt;a href="https://dotstud.io/docs/nefrybt-default/">初期プログラム&lt;/a>をコピーして作っています。たぶん近々ライブラリ化されます。~~&lt;/p>
&lt;p>LINE Notifyがライブラリ化されたので編集しました！&lt;/p>
&lt;h2 id="-">応用課題: データをクラウドに送ってみる（ロギング）&lt;/h2>
&lt;p>WIP（追記します）&lt;/p>
&lt;h2 id="heading-21">関連情報&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstud.io/shop/nefry-bt-set/">Nefr BTの購入&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefry BTはこちらから購入できます（送料無料）。その他にも千石電商、ツクモ、若松通商、共立電子などの実店舗やECサイトで購入できます。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstud.io/docs/nefrybt/">Nefry BTドキュメント&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefry BTでは、IFTTTを使ったWebサービスとの連携や、その他のクラウドサービスとの連携も簡単です。ディスプレイを使ったイラスト描画や、100以上あるGroveモジュールの活用なども、ぜひ試してみてください。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.facebook.com/groups/nefry">Nefryユーザーグループ（FB）&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefryユーザ同士が交流するページです。質問を投稿して解決した事例もたくさんありますので、困った際などはぜひお気軽にご利用ください。開発者もよく登場します。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://nefry.connpass.com/event/97692/">Nefry User Meetup!&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Nefryユーザによる開催イベントです。ハンズオンやLT会、もくもく会などを実施しています。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://dotstudio.connpass.com/">dotstudioイベント&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>dotstudioによる開催イベントです。Nefry BT以外の題材を扱うことも多いです。&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【ソレノイド詳細解説】IoTの力でスマホを振るとソレノイドがシュコシュコ動く仕組みを作ってみる</title><link>https://dotstud.io/blog/control-solenoid-nefrybt-nodered/</link><pubDate>Tue, 28 Aug 2018 14:55:44 +0900</pubDate><guid>https://dotstud.io/blog/control-solenoid-nefrybt-nodered/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/takudooon/">たくろーどん&lt;/a>です。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/series/driving/">これまでの記事&lt;/a>では、電子工作に使えそうな駆動部品を紹介してきました。サーボモータ、ステッピングモータときたら……次に使ってみたいのは&lt;strong>ソレノイド&lt;/strong>ですよね！&lt;/p>
&lt;p>ということで、ソレノイドをNefry BTで使えるようにしていきたいと思います。&lt;/p>
&lt;p>そして、最終的には&lt;strong>スマートフォンをシェイクするとソレノイドをシュコシュコ動かせる&lt;/strong>ようにしてみたいと思います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading">ソレノイドのしくみ&lt;/h2>
&lt;p>ソレノイドとは&lt;!-- raw HTML omitted -->&lt;strong>銅線（コイル）に電流を流すことにより磁界を発生させ、磁性体の可動鉄芯を吸い寄せる（吸引）電気部品&lt;/strong>&lt;!-- raw HTML omitted -->のことです。電流を流している間は常に吸い寄せられていますが、電流を切ると吸引力はなくなります。&lt;/p>
&lt;p>下記に、その仕組みを簡単に示しました。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/2854b315-e58b-63f0-cd49-87d761625053.png" alt="仕組み.png">&lt;/p>
&lt;p>また、この動作を応用して&lt;/p>
&lt;ul>
&lt;li>プル（吸引）ソレノイド&lt;/li>
&lt;li>プッシュ（押し）ソレノイド：プッシュバーを装着した「吸引=押し」動作&lt;/li>
&lt;li>自己保持ソレノイド：永久磁石を組込むことによりそれぞれの動作を保持&lt;/li>
&lt;/ul>
&lt;p>といった種類があります。&lt;/p>
&lt;h2 id="heading-1">ソレノイドを使ってみる&lt;/h2>
&lt;p>まずは簡単な例として、Nefry BTについているスイッチを押すとソレノイドが動くようにしてみます。&lt;/p>
&lt;h3 id="heading-2">用意するもの&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://akizukidenshi.com/catalog/g/gI-02414/">NchパワーMOSFET 2SK2232&lt;/a>：スイッチングのために使用(FETはトランジスタと違って電圧でトリガーとなる)&lt;/li>
&lt;li>&lt;a href="http://akizukidenshi.com/catalog/g/gP-10761/">ソレノイド 5V ZHO-0420S-05A4.5A プッシュ型&lt;/a>&lt;/li>
&lt;li>整流ダイオード：逆起電力(ソレノイドへの電力供給停止後、ソレノイドの棒が元に戻るときに発生する起電力)を防止するため(マイコンの破壊を防止する)&lt;/li>
&lt;/ul>
&lt;h3 id="heading-3">回路&lt;/h3>
&lt;p>※&lt;strong>ソレノイドに極性(+、-)はありません&lt;/strong>！なので、安心して配線しましょう！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/255b91a2-7e2b-b5c9-6168-4cb604a35da2.png" alt="回路図.png">&lt;/p>
&lt;h3 id="heading-4">プログラム&lt;/h3>
&lt;p>「&lt;a href="https://dotstud.io/docs/nefrybt-arduino-ide-setup/">NefryBTの環境構築&lt;/a>」を参考に、Nefry BTに下記のプログラムを書き込みます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
Serial.print(&lt;span style="color:#ae81ff">115200&lt;/span>);
pinMode(D4, OUTPUT);
}
&lt;span style="color:#75715e">//FET:電圧閾値0.8～2.0V　今回使っているトランジスタの場合は！
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
digitalWrite(D4,LOW);
&lt;span style="color:#66d9ef">if&lt;/span>(Nefry.readSW()){
digitalWrite(D4,HIGH);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-5">動かしてみると&lt;/h3>
&lt;p>Nefry BTのスイッチを押すと、シュコシュコします。&lt;/p>
&lt;p>&lt;a href="https://gyazo.com/25c5ea02c0fc0e3ab327f3aff4719f28">&lt;img src="https://i.gyazo.com/25c5ea02c0fc0e3ab327f3aff4719f28.gif" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;h2 id="iot">IoTでソレノイドをシュコシュコする&lt;/h2>
&lt;p>それでは、スマートフォンをシェイクするとソレノイドをシュコシュコ動かせるようにしていきたいと思います。ここでは、スマートフォンの加速度を利用します（スマートフォンの加速度の利用する方法は&lt;a href="https://qiita.com/minwinmin/items/af1d8ba68d0ec3f52fa9">こちら&lt;/a>に少しまとめてあります）。&lt;/p>
&lt;h3 id="node-red">Node-Redのフローを作る&lt;/h3>
&lt;p>&lt;a href="https://nodered.org/">Node-RED&lt;/a>で下記のようなフローを作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Node-REDの詳細は前回の記事をご覧ください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="nefry-bt">Nefry BTにプログラムを書き込む&lt;/h3>
&lt;p>Nefry BTに書き込むプログラムはこちらです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code> IPAddress endpoint;
const int port = 1883;
const char *pubTopic;
const char *subTopic;
const char *deviceName;
const char *mqtt_server = &amp;quot;test.mosquitto.org&amp;quot;;
WiFiClient httpsClient;
PubSubClient mqttClient(httpsClient);
void setup() {
////ソレノイドのピン設定/////////////////////////////////
pinMode(D4, OUTPUT);
//// NefryBT設定 ////////////////////////////////////////
// NefryBT
subTopic = &amp;quot;/NefryBT/SOLE&amp;quot;;
deviceName = &amp;quot;NefryBT_SOLE&amp;quot;; // 複数台で利用する場合は必ずかぶらないように変更する
Serial.begin(115200);
mqttClient.setServer(mqtt_server, port);
mqttClient.setCallback(mqttCallback);
connectMQTT();
}
void connectMQTT() {
Serial.println(&amp;quot;connectMQTT&amp;quot;);
Serial.println(deviceName);
while (!mqttClient.connected()) {
Serial.print(&amp;quot;.&amp;quot;);
if (mqttClient.connect(deviceName)) {
Serial.println(&amp;quot;Connected.&amp;quot;);
int qos = 0;
mqttClient.subscribe(subTopic, qos);
Serial.println(&amp;quot;Subscribed.&amp;quot;);
} else {
Serial.print(&amp;quot;Failed. Error state=&amp;quot;);
Serial.print(mqttClient.state());
// Wait 5 seconds before retrying
delay(5000);
}
}
}
char pubMessage[128];
void mqttCallback (char* topic, byte* payload, unsigned int length) {
String str = &amp;quot;&amp;quot;;
Serial.print(&amp;quot;Received. topic=&amp;quot;);
Serial.println(topic);
for (int i = 0; i &amp;lt; length; i++) {
Serial.print((char)payload[i]);
str += (char)payload[i];
}
Serial.print(&amp;quot;\n&amp;quot;);
StaticJsonBuffer&amp;lt;200&amp;gt; jsonBuffer;
JsonObject&amp;amp; root = jsonBuffer.parseObject(str);
// パースが成功かどうか判断
if (!root.success()) {
Serial.println(&amp;quot;parseObject() failed&amp;quot;);
return;
}
//z軸方向の加速度を取り出している
const char* message = root[&amp;quot;message&amp;quot;];
int accz = root[&amp;quot;accz&amp;quot;];
Serial.print(&amp;quot;accz = &amp;quot;);
Serial.println(accz);
//加速度に応じてソレノイドのシュコシュコ速度が変化
if(accz &amp;gt;= 10 || accz &amp;lt;= -10){
Serial.println(&amp;quot;シュコシュコシュコ&amp;quot;);
digitalWrite(D4,LOW);
delay(50);
digitalWrite(D4,HIGH);
delay(50);
}else if(10 &amp;gt; accz &amp;gt;= 6 || -10 &amp;lt; accz &amp;lt;= 6){
Serial.println(&amp;quot;シュコシュコ&amp;quot;);
digitalWrite(D4,LOW);
delay(200);
digitalWrite(D4,HIGH);
delay(200);
}else{
Serial.println(&amp;quot;シュコ&amp;quot;);
digitalWrite(D4,LOW);
delay(500);
digitalWrite(D4,HIGH);
delay(500);
}
delay(100);
}
void mqttLoop() {
if (!mqttClient.connected()) {
connectMQTT();
}
mqttClient.loop();
}
void loop() {
mqttLoop();
}
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-6">動かしてみると&lt;/h3>
&lt;p>シリアルモニタを見てみると、スマートフォンの加速度の変化に応じて値が表示されます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/7fb2accc-5f35-bc31-7366-04d7e0c2de99.gif" alt="ソレノイド＿シュコシュコ事案.gif">&lt;/p>
&lt;p>下記のようにスマートフォンをシェイクすると、ソレノイドの挙動が変化してます（音をよく聞くと、ソレノイドが早く動いたり遅く動いたりしているのがわかります)。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>無事、&lt;strong>スマートフォンをシェイクするとソレノイドをシュコシュコ動かすデバイス&lt;/strong>ができました！&lt;/p>
&lt;h2 id="heading-7">ソレノイドを使った機構の例&lt;/h2>
&lt;p>ソレノイドはシンプルな動作をしますが、何かをつくるときの機構として使うことができます。動画ではソレノイドを上下させることでクラッピーに拍手させています。工夫次第では面白い機構が作れるでしょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-8">おわりに&lt;/h2>
&lt;p>発想は自分次第です。
ソレノイドを使って面白いデバイスをつくってみてください！&lt;/p>
&lt;h2 id="heading-9">参考&lt;/h2>
&lt;p>&lt;a href="http://www.takaha.co.jp/technological/action.html">ソレノイドの動作説明&lt;/a>: ソレノイドの製造・販売で有名なタカハ機工株式会社より&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>【詳細解説】ステッピングモータの仕組みを理解しよう！解説とNefry BTでステッピングモータを使う方法</title><link>https://dotstud.io/blog/stepper-motor-nefrybt-control/</link><pubDate>Mon, 23 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/stepper-motor-nefrybt-control/</guid><description>&lt;p>モータの種類にはいろいろあります。前回は回転角度を調整できる&lt;a href="https://dotstud.io/blog/nefry-servo-handson-takudooon/">サーボモータ&lt;/a>について紹介しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回は、&lt;strong>ロボットアームや3Dプリンタの制御に使われるステッピングモータ&lt;/strong>について説明し、Nefry BTで制御に挑戦してみたいと思います。&lt;/p>
&lt;h2 id="heading">ステッピングモータとは？&lt;/h2>
&lt;p>ステッピングモータは、DCモータ（Direct-current motor、直流電動機）とは異なり、&lt;strong>電力信号を与えることで正確に回転を制御&lt;/strong>できます。&lt;/p>
&lt;p>例えばステッピングモータの使われている3Dプリンタでは、正確に回転を制御できているからこそ3Dプリントが実現しているとも言えます。&lt;/p>
&lt;p>各モータの特徴をまとめると下記のようになります。&lt;/p>
&lt;ul>
&lt;li>DCモータ: 電力を与えるとずっと回転する&lt;/li>
&lt;li>サーボモータ: ある信号に対応してある角度の範囲で回転する&lt;/li>
&lt;li>ステッピングモータ: 回転範囲に制限はなく、電力信号を与えることで正確に回転し続ける&lt;/li>
&lt;/ul>
&lt;h3 id="heading-1">ステッピングモータの種類〈１〉&lt;/h3>
&lt;p>ステッピングモータには3種類あります。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PM型&lt;/strong>（Permanent Magnet Type、永久磁石）
&lt;ul>
&lt;li>回転子として円周上にN極とS極の交互に着磁した磁性体を使用する。安価だが、着磁間隔を細かくすることに限界があり、ステップ角度は小さくできない。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>VR型&lt;/strong>（Variable Reluctance Type、歯車状鉄心形）
&lt;ul>
&lt;li>回転子として歯車状の鉄心を使用する。ステップ角度を小さくできるが、トルクがやや低い。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>HB型&lt;/strong>（Hybrid Type、複合形）
&lt;ul>
&lt;li>PM型とVR型の特徴をもつ構造をしている。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>※回転子（ローター）…モーターとして回転する軸のこと。&lt;/p>
&lt;h3 id="heading-2">ステッピングモータの仕組み&lt;/h3>
&lt;p>PM型のステッピングモータの仕組みを簡単に説明したいと思います。&lt;/p>
&lt;p>まず、下記の図のようにPM型のステッピングモータは&lt;strong>中心の永久磁石からなる回転子&lt;/strong>と&lt;strong>外側のコイルから構成されている固定子&lt;/strong>から構成されています。コイルに電流を流すことで磁力が発生し、この磁力を利用して回転子を回転させていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ol>
&lt;li>コイル1に電流を流すと固定子と回転子のN極とS極が引き合う。&lt;/li>
&lt;li>さらにコイル2に電流を流すと、両方の固定子が磁化して回転子を引きつける。つまり45°回転する。&lt;/li>
&lt;li>コイル1の電流を切ると、さらに45°回転する。&lt;/li>
&lt;li>コイル3にコイル1に流した電流と逆方向の電流を流すと、さらに45°回転する。&lt;/li>
&lt;li>コイル2の電流を切ると、さらに45°回転する。&lt;/li>
&lt;/ol>
&lt;p>上記と同様の動作を繰り返すと回転子が回転します。&lt;/p>
&lt;p>また、動画にすると下記のようなイメージです。
&lt;img src="https://dotstud.io/img/blog/189/2.gif" alt="">
&lt;strong>制御信号（ステップと呼びます）を与えると回転する&lt;/strong>イメージです。また、&lt;strong>1ステップあたりの回転角度を基本ステップ角度&lt;/strong>と呼びます。&lt;/p>
&lt;h3 id="heading-3">ステッピングモータの種類〈２〉&lt;/h3>
&lt;p>先ほど述べたようにステッピングモータの種類には3種類あります。そして、&lt;strong>さらに2種類&lt;/strong>あります。ただし、この2種類とはステッピングモータ内部にあるコイルへの電流の流し方の違いによるものです。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ユニポーラ型&lt;/strong>（単極性）
&lt;ul>
&lt;li>相電流の切り替えのとき、1つのコイルに対して一定方向の電流しか流さない。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>バイポーラ型&lt;/strong>（双極性）
&lt;ul>
&lt;li>相電流の切り替えのたび、電流の方向が変わる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>※ステッピングモータの仕組みで説明したように磁極を変えるため内部のコイルをスイッチングする必要がある。その磁極をどのように変更するかというイメージ。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-4">励磁（れいじ）方式&lt;/h3>
&lt;p>励磁方式とは、簡単に言えば「どのようにコイルに電流を流し、ステッピングモータを回転させるか」です。つまり、どのコイル（どのピン）に電圧をどの順番で印加していくかということです。&lt;/p>
&lt;p>これは、制御するときに方式を選ぶことができます（プログラムで書くことができます）。ライブラリを使って制御するとわかりにくい部分かもしれません。&lt;/p>
&lt;p>大まかに3つの励磁方式があるので、それぞれ紹介したいと思います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-1">■ 1相励磁&lt;/h4>
&lt;p>&lt;code>A→B→A'→B'&lt;/code>の順に電流を流します（つまり励磁します）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このようにパルスを与えるたびに決められてステップ角だけ回転します。励磁の順を&lt;code>A'→B'→A→B&lt;/code>とすると逆回転します。&lt;/p>
&lt;p>1相励磁は最も単純な方式ですが、トルクが弱く高速回転には向いていません。また、安定性が良くないため実用的ではありません｡&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-2">■ 2相励磁&lt;/h4>
&lt;p>次の相と1パルスずつずらして同時に励磁する方式です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>パルス幅が1相励磁の2倍となり、1相励磁に比べて回転が安定して、大きなトルクが得られますが消費電力も2倍になります｡&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-1-2">■ 1-2相励磁&lt;/h4>
&lt;p>1相励磁と2相励磁を交互に繰り返す方式です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>各相のパルス幅が3となり、次の相とは2パルスだけずらして励磁されます。1パルスごとに回転する角度が1相励磁と2相励磁に比べて半分になり、細かいモータ制御ができます。&lt;strong>基本的にこの励磁方式で制御すれば間違いない&lt;/strong>でしょう。&lt;/p>
&lt;h2 id="nefry-bt">Nefry BTでステッピングモータを制御しよう！&lt;/h2>
&lt;h3 id="heading-5">ステッピングモータを購入&lt;/h3>
&lt;p>今回は、Amazonで&lt;a href="https://www.amazon.co.jp/gp/product/B010RYH74U/ref=oh_aui_detailpage_o03_s00?ie=UTF8&amp;amp;psc=1">こちらのステッピングモータ&lt;/a>を購入して使いました。ステッピングモータとドライバが5セット入っており、それでいて価格が約1000円という激安です。ちょっと試してみるには良い商品かと思います。&lt;/p>
&lt;h4 id="-28byj-48-stepper-motor">■ 28BYJ-48 Stepper Motor&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-uln2003-driver">■ ULN2003 driver&lt;/h4>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-6">それぞれの仕様&lt;/h3>
&lt;h4 id="-28byj-48-stepper-motor-1">■ 28BYJ-48 Stepper Motor&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>概要&lt;/th>
&lt;th>仕様&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>種類&lt;/td>
&lt;td>ユニポーラ型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>結線&lt;/td>
&lt;td>5線式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>電圧&lt;/td>
&lt;td>5-12V（直流電圧）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>周波数&lt;/td>
&lt;td>100 Hz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ステップモード&lt;/td>
&lt;td>ハーフステップモード（推奨）（8ステップの信号で制御）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ステップ角&lt;/td>
&lt;td>ハーフステップモード：64ステップで5.625°回転&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ギア比&lt;/td>
&lt;td>64:1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>※ギア比…2つの歯車（ギア）の歯数の比率のこと。自転車をイメージすると良い。&lt;!-- raw HTML omitted -->
※ハーフステップモード…ステップ角が基本ステップ角度の1/2の角度で駆動する方式。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-uln2003-driver-1">■ ULN2003 driver&lt;/h4>
&lt;p>ステッピングモータを使う際には、&lt;strong>ステッピングモータ用のドライバ&lt;/strong>を使用します。マイコンボードの信号だけでは制御できないので、制御を補助するためのものです。&lt;/p>
&lt;p>1-2相励磁で制御する場合は、下記のような信号の組み合わせになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>（参照：http://eeshop.unl.edu/pdf/Stepper+Driver.pdf ）&lt;/p>
&lt;p>このステッピングモータでは8ステップで1つの動作を表しています。つまり、8ステップ×8ステップ=64ステップで5.625°回転します。よって1回転するには360°÷5.625°×64=4096ステップで1回転します。&lt;/p>
&lt;h3 id="heading-7">回路&lt;/h3>
&lt;p>Nefry BTとステッピングモータの回路は下記のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回、使用するステッピングモータは5~12Vの間で動作します。また、Nefry BTとステッピングモータの電源は分けて使います。&lt;/p>
&lt;h3 id="heading-8">プログラム（ライブラリあり）&lt;/h3>
&lt;p>プログラムは下記の通りです。&lt;/p>
&lt;p>Nefry BT上のスイッチを押すとステッピングモータが180°回転するというものです。今回は、ステッピングモータを回転させるため「Stepper.h」ライブラリを使いました。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// ステッピングモータとNefry BTを制御するためのライブラリをinclude
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Stepper.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e">・フルステップ方式で2相励磁の場合は1つの動作で4ステップ
&lt;/span>&lt;span style="color:#75715e">・8回繰り返す（4×8 = 32ステップ）で11.25度回転
&lt;/span>&lt;span style="color:#75715e">・つまり、360度回転しようとするとき360/11.25 = 32ステップ
&lt;/span>&lt;span style="color:#75715e">・ギア比を考慮して32×64 = 2048ステップ
&lt;/span>&lt;span style="color:#75715e">・よって、ハフルステップ方式で2相励磁の場合、2048ステップで1回転
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e">・ハーフステップ方式で1-2相励磁の場合は1つの動作で8ステップ
&lt;/span>&lt;span style="color:#75715e">・8回繰り返す（8×8 = 64ステップ）と5.625度回転
&lt;/span>&lt;span style="color:#75715e">・つまり、360度回転しようとすると360/5.625 = 64ステップ
&lt;/span>&lt;span style="color:#75715e">・ギア比を考慮して64×64 = 4096ステップ
&lt;/span>&lt;span style="color:#75715e">・よって、ハーフステップ方式で1-2相励磁の場合、4096ステップで1回転
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_1 D2 &lt;/span>&lt;span style="color:#75715e">// blue
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_2 D3 &lt;/span>&lt;span style="color:#75715e">// pink
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_3 D4 &lt;/span>&lt;span style="color:#75715e">// yellow
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_4 D5 &lt;/span>&lt;span style="color:#75715e">// orange
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// ステッピングモータが1回転するのに必要なステップ数を定義
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define MOTOR_STEPS 2048&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Stepper &lt;span style="color:#a6e22e">myStepper&lt;/span>(MOTOR_STEPS, MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4);
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;span style="color:#75715e">// setspeed()関数でrpm（1分あたりの回転数）を設定
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 例：10rpm=10回転/分
&lt;/span>&lt;span style="color:#75715e">&lt;/span> myStepper.setSpeed(&lt;span style="color:#ae81ff">10&lt;/span>);&lt;span style="color:#75715e">//10回転/分
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span>(Nefry.readSW()){
&lt;span style="color:#75715e">// 1024ステップ回転、つまり180°回転
&lt;/span>&lt;span style="color:#75715e">&lt;/span> myStepper.step(&lt;span style="color:#ae81ff">1024&lt;/span>);
}
&lt;span style="color:#75715e">// 静止時の負荷がないので電流を止める
&lt;/span>&lt;span style="color:#75715e">&lt;/span> stopMotor();
}
&lt;span style="color:#75715e">// モーターへの電流を止める
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">stopMotor&lt;/span>() {
digitalWrite(MOTOR_1, LOW);
digitalWrite(MOTOR_2, LOW);
digitalWrite(MOTOR_3, LOW);
digitalWrite(MOTOR_4, LOW);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-9">動かしてみると&lt;/h3>
&lt;p>実際に動かしてみると、180°回転していることがわかります。
&lt;img src="https://dotstud.io/img/blog/189/12.gif" alt="">&lt;/p>
&lt;h3 id="heading-10">プログラム（ライブラリなし）&lt;/h3>
&lt;p>ステッピングモータの仕組みを理解する場合、ライブラリなしの方がわかりやすいかと思います。&lt;/p>
&lt;p>下記はライブラリを使わずに励磁方式を変えてステッピングモータを制御したプログラムです。先ほど示した励磁方式の図を見ながら理解すると、良くわかるかと思います。&lt;/p>
&lt;p>今回、使用するドライバには各相に対応してLEDが点灯するので、どの相に電圧を印加したかわかりやすいですね。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-1-1">■ 1相励磁&lt;/h4>
&lt;pre>&lt;code>#include&amp;lt;Nefry.h&amp;gt;
// 任意のピンを設定してください。基本、デジタルピンでOKです。都合上A2,A3を使っています。
#define PIN1 A2
#define PIN2 A3
#define PIN3 D3
#define PIN4 D4
void setup()
{
Serial.begin(115200);
pinMode(PIN1, OUTPUT); // PIN1を出力モードにする
pinMode(PIN2, OUTPUT); // PIN2を出力モードにする
pinMode(PIN3, OUTPUT); // PIN3を出力モードにする
pinMode(PIN4, OUTPUT); // PIN4を出力モードにする
}
void loop()
{
int sleep_time = 300; // スリープ時間[ms]、時間を短くすると回転速度上昇
digitalWrite(PIN1, 1);
digitalWrite(PIN2, 0);
digitalWrite(PIN3, 0);
digitalWrite(PIN4, 0);
delay(sleep_time);
digitalWrite(PIN1, 0);
digitalWrite(PIN2, 0);
digitalWrite(PIN3, 1);
digitalWrite(PIN4, 0);
delay(sleep_time);
digitalWrite(PIN1, 0);
digitalWrite(PIN2, 0);
digitalWrite(PIN3, 0);
digitalWrite(PIN4, 1);
delay(sleep_time);
// 電流を流し続けると発熱するのでいったん止める
digitalWrite(PIN1, 0);
digitalWrite(PIN2, 0);
digitalWrite(PIN3, 0);
digitalWrite(PIN4, 0);
delay(sleep_time);
}
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/189/13.gif" alt="">&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-2-1">■ 2相励磁&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN1 A2&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN2 A3&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN3 D3&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN4 D4&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>()
{
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
pinMode(PIN1, OUTPUT);
pinMode(PIN2, OUTPUT);
pinMode(PIN3, OUTPUT);
pinMode(PIN4, OUTPUT);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>()
{
&lt;span style="color:#66d9ef">int&lt;/span> sleep_time &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
&lt;span style="color:#75715e">// 電流を流し続けると発熱するのでいったん止める
&lt;/span>&lt;span style="color:#75715e">&lt;/span> digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://dotstud.io/img/blog/189/14.gif" alt="">&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-1-2-1">■ 1-2相励磁&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN1 A2&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN2 A3&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN3 D3&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PIN4 D4&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>()
{
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
pinMode(PIN1, OUTPUT);
pinMode(PIN2, OUTPUT);
pinMode(PIN3, OUTPUT);
pinMode(PIN4, OUTPUT);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>()
{
&lt;span style="color:#66d9ef">int&lt;/span> sleep_time &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
digitalWrite(PIN1, &lt;span style="color:#ae81ff">1&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">1&lt;/span>);
delay(sleep_time);
&lt;span style="color:#75715e">//電流を流し続けると発熱するのでいったん止める
&lt;/span>&lt;span style="color:#75715e">&lt;/span> digitalWrite(PIN1, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN2, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN3, &lt;span style="color:#ae81ff">0&lt;/span>);
digitalWrite(PIN4, &lt;span style="color:#ae81ff">0&lt;/span>);
delay(sleep_time);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://dotstud.io/img/blog/189/15.gif" alt="">&lt;/p>
&lt;h2 id="-xy">作例: xy軸ステージ&lt;/h2>
&lt;p>ステッピングモータを使えば、3Dプリンタの軸に使われているような可動式のステージを自作することも可能です。&lt;/p>
&lt;p>たとえば、下記が自作したxy軸の2軸ステージです。また、これはNode-REDで遠隔制御できるようにしています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-11">おわりに&lt;/h2>
&lt;p>モータの世界はまだまだ奥深いのですが、今回はここまでです。&lt;/p>
&lt;p>ステッピングモータが使えれば、さらにモノづくりの幅が広がることでしょう。また、IoT向きの開発ボードNefry BTを使えば、**遠隔制御できる「何か」**を割と簡単に作ることができます。&lt;/p>
&lt;h2 id="heading-12">参考サイト&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://42bots.com/tutorials/28byj-48-stepper-motor-with-uln2003-driver-and-arduino-uno/">28BYJ-48 Stepper Motor with ULN2003 driver and Arduino Uno | 42 Bots&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://toshiba.semicon-storage.com/jp/design-support/e-learning/stepping_motor/chap3/1274646.html">励磁モードまとめ | TOSHIBA e-ラーニング&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>PWM制御をマスターしよう！Node-REDでサーボモータを遠隔制御する方法＆初ハンズオンレポート</title><link>https://dotstud.io/blog/nefry-servo-handson-takudooon/</link><pubDate>Thu, 12 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/nefry-servo-handson-takudooon/</guid><description>&lt;h2 id="heading">暑さ本番、いよいよ大好きな生ビールの季節がやってまいりました！&lt;/h2>
&lt;p>みなさまいかがお過ごしでしょうか？どうも、宇宙エンジニアの&lt;a href="https://dotstud.io/members/takudooon">たくろーどん&lt;/a>です。毎日、暑いですね。&lt;/p>
&lt;p>さて先日、&lt;strong>初めてハンズオンイベント&lt;strong>を企画・実施してみました！題して、「&lt;/strong>【IoT】PWM制御をマスター！Nefry BT+Node-REDでサーボモータを遠隔制御&lt;/strong>&lt;a href="https://dotstudio.connpass.com/event/91695/">&lt;/a>」！&lt;/p>
&lt;p>「モノづくりをしたい！」「こんなものをつくりたい！」と思っても「&lt;strong>こういう技術がつかえる&lt;/strong>」ということを知らないと、なかなかモノづくりが進みません。&lt;/p>
&lt;p>なので、動くものを作りたいときに便利な&lt;!-- raw HTML omitted -->&lt;strong>サーボモータとその制御方法であるPWM制御&lt;/strong>をマスターし、&lt;strong>PCからサーボモータを遠隔制御をしよう&lt;/strong>&lt;!-- raw HTML omitted -->というのがハンズオンの目論見です。&lt;/p>
&lt;p>では、ちらっとハンズオンの内容を振り返ってみたいと思います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="pwm">PWM制御を用いたプログラムの書き方&lt;/h2>
&lt;h3 id="pwm-1">PWM制御について&lt;/h3>
&lt;p>&lt;a href="https://dotstud.io/docs/pulse-width-modulation/">PWM制御の大まかな説明&lt;/a>は以前、ドキュメントに書きました。ようするに、PWM制御は「&lt;strong>パルスのオン・オフ繰り返し切り替えることで出力される電力を制御&lt;/strong>」するという意味です。&lt;/p>
&lt;p>でも結局のところ、「&lt;strong>PWM制御ってどんなイメージやねん！&lt;/strong>」と多くの方が思うでしょう。&lt;/p>
&lt;p>なので、これがわかりやすいのではないかという説明を思いつきました。それが、下記の動画です。
&lt;img src="https://dotstud.io/img/blog/187/2.gif" alt="">&lt;/p>
&lt;p>例えば、自宅から最寄りの駅まで走らなければならない状況を考えます。まるで、小学校の算数にでてくるたかしくんの問題を彷彿させますね。知らんけど。&lt;/p>
&lt;ul>
&lt;li>100%の力で走れば5分で駅につく ≒ 100%出力されるので、5V出力される&lt;/li>
&lt;li>全力で走って途中で歩くと9分で駅に着く（全体的に80%の力で走る） ≒ 80%出力されるので、4V出力される&lt;/li>
&lt;li>全力で走って途中で歩くと10分で駅に着く（全体的に50%の力で走る） ≒ 50%出力されるので、2.5V出力される&lt;/li>
&lt;li>全力で走って途中で歩くと15分で駅に着く（全体的に10%の力で走る） ≒ 10%出力されるので、0.5V出力される&lt;/li>
&lt;/ul>
&lt;p>というようなイメージです。自宅から駅まで走る場合は走る速さの具合によって、到着時間が伸びます。しかし、電圧の場合は実行電圧（実際に出力される電圧）は下がっていきます。&lt;/p>
&lt;h3 id="esp32">ESP32開発ボードでのプログラムについて&lt;/h3>
&lt;p>&lt;a href="https://dotstud.io/docs/nefrybt">Nefry BT&lt;/a>のようなESP32を搭載しているような開発ボードでPWM制御する場合は、ledc関数を使います。&lt;strong>ESP32ではArduinoでつかうようなanalogWrite関数が実装されていない&lt;/strong>とのことなので注意しましょう（ただし、今後変更される可能性があります）。&lt;/p>
&lt;p>例えば、下記のようなプログラムになります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">
&lt;span style="color:#75715e">//基本Iotは2.4GHz帯を使うこと
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//PWM信号の周波数をPWMをつくっているクロック周波数で割ったもの
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//ledcSetupでPWMの範囲を8bitに設定したとき、0～255　10bitのときは0～1023となる、2進数の話
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PWM_BITWIDTH 16&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//わかりやすいように角度に変換する関数/////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">deg2pw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> deg, &lt;span style="color:#66d9ef">int&lt;/span> bit){
&lt;span style="color:#66d9ef">double&lt;/span> ms &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">double&lt;/span>) deg &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.95&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1.45&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) (ms &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">20.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> pow(&lt;span style="color:#ae81ff">2&lt;/span>, bit));
}
&lt;span style="color:#75715e">//////////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
&lt;span style="color:#75715e">//ledcSetup(チャンネル数(0～),周波数(たとえばPWMサイクル20mHzなら50Hzになるという意味(SG90の場合))、分解能は任意(ただし限度はある))
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(&lt;span style="color:#960050;background-color:#1e0010">ピ&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">ン&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">番&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">号&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);&lt;span style="color:#75715e">//left_motor
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.enableSW();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>(){
&lt;span style="color:#66d9ef">if&lt;/span>((Nefry.readSW())){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">0&lt;/span>, PWM_BITWIDTH));
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-1">プログラムの書き方&lt;/h3>
&lt;p>プログラムを詳しく見てましょう。&lt;/p>
&lt;p>ledc関数を使うため、ライブラリ「esp32-hal-ledc.h」を最初にインクルードします。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ライブラリ「esp32-hal-ledc.h」を使うときの主な関数は以下に示すものです。&lt;/p>
&lt;ol>
&lt;li>ledcSetup（チャンネル,周波数,分解能）&lt;/li>
&lt;li>ledcAttachPin（ピン番号,チャンネル）：チャンネルはピン番号の識別番号です&lt;/li>
&lt;li>ledcWrite（チャンネル,パルス幅）：設定した角度になるように与えるべきパルス幅を算出する関数&lt;/li>
&lt;/ol>
&lt;p>実際の記述は以下のようになります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(A2,&lt;span style="color:#ae81ff">0&lt;/span>);&lt;span style="color:#75715e">//left_motor
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.enableSW();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>分解能は&lt;strong>どれだけ細かく制御するのか&lt;/strong>を表しているイメージです。これは&lt;strong>ビット数&lt;/strong>で表します。&lt;/p>
&lt;p>例えば、分解能を&lt;strong>8ビットとするれば0〜255バイト&lt;/strong>（2の8乗）、&lt;strong>10ビットなら0〜1023バイト&lt;/strong>（2の10乗）となります。&lt;/p>
&lt;p>これを、どのようにPWM制御に使えるのか説明します。PWM制御とは一定電圧の入力から&lt;strong>パルス列のオンとオフの一定周期を作り、オンの時間幅を変化させる電力制御方式&lt;/strong>のことです。つまり、&lt;strong>実効電圧を変化させる&lt;/strong>ことができます。&lt;/p>
&lt;p>なので、例えば、最大5[V]の出力を考えたとき、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分解能8ビットだと0→0[V]、127→2.5[V]、255→5[V]&lt;/strong>&lt;/li>
&lt;li>&lt;strong>分解能10ビットだと0→0[V]、511→2.5[V]、1023→5[V]&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>と表せます。分解能が大きい方が、細かい制御ができることがわかるかと思います。&lt;/p>
&lt;h2 id="node-redmqtt">Node-RED×MQTTでサーボモータを遠隔制御&lt;/h2>
&lt;h3 id="node-red">Node-REDとは&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;a href="https://nodered.jp/">Node-RED&lt;/a>はハードウェアデバイス/APIおよびオンラインサービスを接続するためのツールです。ウェブ上で、フローチャートのように直感的にプログラムをつくることができます。そして、最終的に自分が欲しい仕組みを作り上げるというものです。&lt;/p>
&lt;p>Node-REDを使うには大まかに2パターンあります。&lt;/p>
&lt;ul>
&lt;li>自分のPC上でローカルで動かす（今回はこちらで進めていきます）&lt;/li>
&lt;li>外部のサービスを利用する（IBMクラウドやenebularなど）&lt;/li>
&lt;/ul>
&lt;p>導入方法は、&lt;a href="https://qiita.com/minwinmin/private/6c13d2c912d0d7e8e197">こちら&lt;/a>で説明していますので参考にしてください。&lt;/p>
&lt;p>また、後ほどNode-REDにフローのコードを貼り付ける必要があるので簡単に貼り付け方法を説明します。&lt;/p>
&lt;p>まずフローのコードをコピーし、Node-REDを立ち上げたら右上のメニュー（3本線）をクリックします。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>すると上記のような画面があらわれます。「読み込み」をクリックして、あらわれた画面にコピーしたコードを貼り付ければ完了です。&lt;/p>
&lt;h3 id="mqtt">MQTTとは&lt;/h3>
&lt;p>MQTTとは、&lt;strong>多数のデバイスの間で短いメッセージを頻繁に送受信する&lt;/strong>ことを想定した通信プロトコルです。つまりインフラのようなもの、もしくはメッセージを送受信するので土管のようなものをイメージすると良いかと思います。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>MQTTは先ほど説明したような仕組みの名前です。なので、実際にメッセージを送受信するためにはMQTTブローカーが必要です。イメージは下記の画像のようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>MQTTブローカーを用意するには、いくつか方法があります（&lt;a href="http://acro-engineer.hatenablog.com/entry/2015/06/19/120000">こちらのサイト&lt;/a>にまとめられています）。今回、ハンズオンでつかったの以下の2パターンです。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ローカルホストでMQTTブローカーをたてる&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://github.com/mcollina/mosca">Mosca&lt;/a>を利用する -&amp;gt; MQTT brokerのためのライブラリ（IBMクラウドのような外部サービスでNode-REDを使う場合、うまくいきませんでした）&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://test.mosquitto.org/">mosquitto&lt;/a>のテストサーバーを利用する&lt;/strong>&lt;/li>
&lt;li>これから記載するプログラムはこちらを使っています。&lt;/li>
&lt;/ul>
&lt;h3 id="node-red-1">Node-REDのフローのコード&lt;/h3>
&lt;p>下記のNode-REDのフローのコードを、Node-REDにコピーして使いましょう。&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;id&amp;quot;: &amp;quot;7878093f.d68778&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;debug&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;active&amp;quot;: true,
&amp;quot;tosidebar&amp;quot;: true,
&amp;quot;console&amp;quot;: false,
&amp;quot;tostatus&amp;quot;: false,
&amp;quot;complete&amp;quot;: &amp;quot;payload&amp;quot;,
&amp;quot;x&amp;quot;: 522.0130081176758,
&amp;quot;y&amp;quot;: 161.99999809265137,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;22ca4d97.8e3382&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;inject&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;payload&amp;quot;: &amp;quot;{\&amp;quot;motor\&amp;quot;:1}&amp;quot;,
&amp;quot;payloadType&amp;quot;: &amp;quot;json&amp;quot;,
&amp;quot;repeat&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;crontab&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;once&amp;quot;: false,
&amp;quot;onceDelay&amp;quot;: 0.1,
&amp;quot;x&amp;quot;: 220.01303100585938,
&amp;quot;y&amp;quot;: 244.00000190734863,
&amp;quot;wires&amp;quot;: [
[
&amp;quot;6b18ace.785b854&amp;quot;
]
]
},
{
&amp;quot;id&amp;quot;: &amp;quot;6b18ace.785b854&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt out&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;/sub/NefryBT/SAMPLE&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;/sub/NefryBT/SAMPLE&amp;quot;,
&amp;quot;qos&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;retain&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;3890dddf.26f532&amp;quot;,
&amp;quot;x&amp;quot;: 508.0130386352539,
&amp;quot;y&amp;quot;: 293.9999957084656,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;e0581ff4.bce8a&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;inject&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;payload&amp;quot;: &amp;quot;{\&amp;quot;motor\&amp;quot;:0}&amp;quot;,
&amp;quot;payloadType&amp;quot;: &amp;quot;json&amp;quot;,
&amp;quot;repeat&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;crontab&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;once&amp;quot;: false,
&amp;quot;onceDelay&amp;quot;: 0.1,
&amp;quot;x&amp;quot;: 220.01303100585938,
&amp;quot;y&amp;quot;: 344.00000190734863,
&amp;quot;wires&amp;quot;: [
[
&amp;quot;6b18ace.785b854&amp;quot;
]
]
},
{
&amp;quot;id&amp;quot;: &amp;quot;3dccf617.5970da&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt in&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;/sub/NefryBT/SAMPLE&amp;quot;,
&amp;quot;qos&amp;quot;: &amp;quot;2&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;cd2e6f9.ab8069&amp;quot;,
&amp;quot;x&amp;quot;: 235.09634399414062,
&amp;quot;y&amp;quot;: 159.3697967529297,
&amp;quot;wires&amp;quot;: [
[
&amp;quot;7878093f.d68778&amp;quot;
]
]
},
{
&amp;quot;id&amp;quot;: &amp;quot;f5c8b0fb.93d8&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;comment&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Node-RED上に文字列表示&amp;quot;,
&amp;quot;info&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;x&amp;quot;: 237.09635162353516,
&amp;quot;y&amp;quot;: 114.08594131469727,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;47872155.bfb16&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;comment&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;MQTTブローカー側に文字列を送信&amp;quot;,
&amp;quot;info&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;x&amp;quot;: 265.0130310058594,
&amp;quot;y&amp;quot;: 206.0104217529297,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;d5a5e79d.ec27a8&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;comment&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;MQTTブローカー側に文字列を送信するためのフロー&amp;quot;,
&amp;quot;info&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;x&amp;quot;: 609.0130004882812,
&amp;quot;y&amp;quot;: 257.0104160308838,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;3700aeb9.5a7ec2&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;comment&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;782bda22.769d84&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;ｍosquittoのテストサーバーを利用&amp;quot;,
&amp;quot;info&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;x&amp;quot;: 265.0130310058594,
&amp;quot;y&amp;quot;: 52.010416984558105,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;3890dddf.26f532&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt-broker&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;http://test.mosquitto.org/&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;1883&amp;quot;,
&amp;quot;clientid&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;usetls&amp;quot;: false,
&amp;quot;compatmode&amp;quot;: true,
&amp;quot;keepalive&amp;quot;: &amp;quot;60&amp;quot;,
&amp;quot;cleansession&amp;quot;: true,
&amp;quot;birthTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;birthQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;birthPayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;closePayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;willPayload&amp;quot;: &amp;quot;&amp;quot;
},
{
&amp;quot;id&amp;quot;: &amp;quot;cd2e6f9.ab8069&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt-broker&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;http://test.mosquitto.org/&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;1883&amp;quot;,
&amp;quot;clientid&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;usetls&amp;quot;: false,
&amp;quot;compatmode&amp;quot;: true,
&amp;quot;keepalive&amp;quot;: &amp;quot;60&amp;quot;,
&amp;quot;cleansession&amp;quot;: true,
&amp;quot;birthTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;birthQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;birthPayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;closePayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;willPayload&amp;quot;: &amp;quot;&amp;quot;
}
]
&lt;/code>&lt;/pre>&lt;h3 id="nefry-bt">Nefry BTのプログラム&lt;/h3>
&lt;p>下記がNefry BT側のプログラムになります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">//Nefryがwifiにつながっているか確認、2.4Ghzにつなごう
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//できたtest.mosquitto.orgで使える！
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;WiFiClient.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;PubSubClient.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;ArduinoJson.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define URL &amp;#34;mosquitto.org&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PWM_BITWIDTH 16&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">deg2pw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> deg, &lt;span style="color:#66d9ef">int&lt;/span> bit){
&lt;span style="color:#66d9ef">double&lt;/span> ms &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">double&lt;/span>) deg &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.95&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1.45&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) (ms &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">20.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> pow(&lt;span style="color:#ae81ff">2&lt;/span>, bit));
}
IPAddress endpoint;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1883&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pubTopic;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>subTopic;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>deviceName;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>mqtt_server &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">test.mosquitto.org&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
WiFiClient httpsClient;
PubSubClient &lt;span style="color:#a6e22e">mqttClient&lt;/span>(httpsClient);
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(A2,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#75715e">//// NefryBT設定画面まわり ////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// NefryBT
&lt;/span>&lt;span style="color:#75715e">&lt;/span> pubTopic &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/pub/NefryBT/SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
subTopic &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/sub/NefryBT/SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
deviceName &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">NefryBT_SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// 複数台で利用する場合は必ずかぶらないように変更する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ローカルホストでMQTTブローカーを立てている場合は、パソコンのIPAddress型に収納。配列っぽく入れる。ここはその都度確認すること
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//endpoint指定部
&lt;/span>&lt;span style="color:#75715e">&lt;/span> endpoint[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">192&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">168&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">43&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">105&lt;/span>;
&lt;span style="color:#75715e">//// 以下通常処理 ////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
&lt;span style="color:#75715e">//mqttClient.setServer()関数でMQTTブローカーを指定する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> mqttClient.setServer(mqtt_server, port);
mqttClient.setCallback(mqttCallback);
connectMQTT();
}
&lt;span style="color:#75715e">//MQTTがちゃんと動いているか、つながっているかを判断
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">connectMQTT&lt;/span>() {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">connectMQTT&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(deviceName);
&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mqttClient.connected()) {
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (mqttClient.connect(deviceName)) {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Connected.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">int&lt;/span> qos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
mqttClient.subscribe(subTopic, qos);
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Subscribed.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Failed. Error state=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.print(mqttClient.state());
&lt;span style="color:#75715e">// Wait 5 seconds before retrying
&lt;/span>&lt;span style="color:#75715e">&lt;/span> delay(&lt;span style="color:#ae81ff">5000&lt;/span>);
}
}
}
&lt;span style="color:#75715e">///////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">char&lt;/span> pubMessage[&lt;span style="color:#ae81ff">128&lt;/span>];
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mqttCallback&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> topic, byte&lt;span style="color:#f92672">*&lt;/span> payload, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> length) {
String str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Received. topic=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(topic);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> length; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>) {
Serial.print((&lt;span style="color:#66d9ef">char&lt;/span>)payload[i]);
str &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>)payload[i];
}
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
StaticJsonBuffer&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> jsonBuffer;
JsonObject&lt;span style="color:#f92672">&amp;amp;&lt;/span> root &lt;span style="color:#f92672">=&lt;/span> jsonBuffer.parseObject(str);
&lt;span style="color:#75715e">// 読み取った文字列をパース
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>root.success()) {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">parseObject() failed&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span>;
}
&lt;span style="color:#75715e">//Node-REDから文字列を読み取ってくる部分//////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> message &lt;span style="color:#f92672">=&lt;/span> root[&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">message&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>];
&lt;span style="color:#66d9ef">int&lt;/span> motor &lt;span style="color:#f92672">=&lt;/span> root[&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">motor&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>];
&lt;span style="color:#75715e">////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">motor = &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(motor);
&lt;span style="color:#75715e">///サーボモータを動かす処理//////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>( motor &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ){
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">115&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65&lt;/span>; &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i){&lt;span style="color:#75715e">//0～180°の位置で考える、90度が基準点としてそこからどう動くかを考える
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
}
Nefry.ndelay(&lt;span style="color:#ae81ff">1000&lt;/span>);
}
&lt;span style="color:#75715e">//////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//mqttを動かしている部分///////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mqttLoop&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mqttClient.connected()) {
connectMQTT();
}
mqttClient.loop();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
mqttLoop();
}
&lt;span style="color:#75715e">//////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-2">動作させてみると……&lt;/h3>
&lt;p>このように、PC上から遠隔でサーボモータを制御できるようになります。
&lt;img src="https://dotstud.io/img/blog/187/5.gif" alt="">&lt;/p>
&lt;h2 id="node-redmqttui">Node-RED×MQTTでサーボモータをUI（ブラウザ）から制御&lt;/h2>
&lt;p>先ほどのプログラムはNode-RED上のボタンを押すとある角度回転するというものでした。次はそれを発展させて、&lt;strong>ブラウザから操作して角度を遠隔で制御&lt;/strong>してみます。&lt;/p>
&lt;p>ハンズオンでは、製作途中にタイムアップしてしまいました。少し難易度高めです。&lt;/p>
&lt;h3 id="node-red-2">Node-REDのフローのコード&lt;/h3>
&lt;p>下記のNode-REDのフローのコードをNode-REDにコピーして使いましょう。&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;id&amp;quot;: &amp;quot;f2dc1b0b.520f98&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt out&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;fab71764.66ef78&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;topic&amp;quot;: &amp;quot;servo/pan&amp;quot;,
&amp;quot;qos&amp;quot;: &amp;quot;1&amp;quot;,
&amp;quot;retain&amp;quot;: &amp;quot;false&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;954b988c.ec1e08&amp;quot;,
&amp;quot;x&amp;quot;: 520,
&amp;quot;y&amp;quot;: 400,
&amp;quot;wires&amp;quot;: []
},
{
&amp;quot;id&amp;quot;: &amp;quot;954b988c.ec1e08&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;mqtt-broker&amp;quot;,
&amp;quot;z&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;broker&amp;quot;: &amp;quot;https://test.mosquitto.org/&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;1883&amp;quot;,
&amp;quot;clientid&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;usetls&amp;quot;: false,
&amp;quot;compatmode&amp;quot;: true,
&amp;quot;keepalive&amp;quot;: &amp;quot;60&amp;quot;,
&amp;quot;cleansession&amp;quot;: true,
&amp;quot;birthTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;birthQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;birthPayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closeTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;closePayload&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willTopic&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;willQos&amp;quot;: &amp;quot;0&amp;quot;,
&amp;quot;willPayload&amp;quot;: &amp;quot;&amp;quot;
}
]
&lt;/code>&lt;/pre>&lt;h3 id="nefry-bt-1">Nefry BTのプログラム&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;WiFiClient.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;PubSubClient.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;ArduinoJson.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//esp32でPWMを使えるようにするためのライブラリー//
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//分解能//////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PWM_BITWIDTH 16&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//PWM制御：周波数-&amp;gt;角度に変換(プログラムするときにわかりやすい)//
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">deg2pw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> deg, &lt;span style="color:#66d9ef">int&lt;/span> bit){
&lt;span style="color:#66d9ef">double&lt;/span> ms &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">double&lt;/span>) deg &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.95&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1.45&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) (ms &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">20.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> pow(&lt;span style="color:#ae81ff">2&lt;/span>, bit));
}
&lt;span style="color:#75715e">////////////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
IPAddress endpoint;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1883&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pubTopic;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>subTopic;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>deviceName;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>mqtt_server &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">test.mosquitto.org&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
WiFiClient httpsClient;
PubSubClient &lt;span style="color:#a6e22e">mqttClient&lt;/span>(httpsClient);
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(A1,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#75715e">//// NefryBT設定 ////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// NefryBT
&lt;/span>&lt;span style="color:#75715e">&lt;/span> pubTopic &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/pub/NefryBT/SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
subTopic &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/sub/NefryBT/SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
deviceName &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">NefryBT_SAMPLE&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// 複数台で利用する場合は必ずかぶらないように変更する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ローカルホストならパソコンのIPAddress型に収納。配列っぽく入れる。ここはその都度確認すること
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//mosquittoのテストサーバーを使うときは下記のednpointは気にしなくて大丈夫です
&lt;/span>&lt;span style="color:#75715e">&lt;/span> endpoint[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">192&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">168&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
endpoint[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#75715e">////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
mqttClient.setServer(mqtt_server, port);
mqttClient.setCallback(mqttCallback);
connectMQTT();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">connectMQTT&lt;/span>() {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">connectMQTT&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(deviceName);
&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mqttClient.connected()) {
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">if&lt;/span> (mqttClient.connect(deviceName)) {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Connected.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">int&lt;/span> qos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
mqttClient.subscribe(subTopic, qos);
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Subscribed.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
} &lt;span style="color:#66d9ef">else&lt;/span> {
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Failed. Error state=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.print(mqttClient.state());
&lt;span style="color:#75715e">// Wait 5 seconds before retrying
&lt;/span>&lt;span style="color:#75715e">&lt;/span> delay(&lt;span style="color:#ae81ff">5000&lt;/span>);
}
}
}
&lt;span style="color:#66d9ef">char&lt;/span> pubMessage[&lt;span style="color:#ae81ff">128&lt;/span>];
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mqttCallback&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> topic, byte&lt;span style="color:#f92672">*&lt;/span> payload, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> length) {
String str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Received. topic=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(topic);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> length; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>) {
Serial.print((&lt;span style="color:#66d9ef">char&lt;/span>)payload[i]);
str &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>)payload[i];
}
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
StaticJsonBuffer&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> jsonBuffer;
JsonObject&lt;span style="color:#f92672">&amp;amp;&lt;/span> root &lt;span style="color:#f92672">=&lt;/span> jsonBuffer.parseObject(str);
&lt;span style="color:#75715e">// パースが成功かどうか判断
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>root.success()) {
Serial.println(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">parseObject() failed&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span>;
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> message &lt;span style="color:#f92672">=&lt;/span> root[&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">message&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>];
&lt;span style="color:#66d9ef">int&lt;/span> takudooon &lt;span style="color:#f92672">=&lt;/span> root[&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">takudooon&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>];
Serial.print(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">takudooon = &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Serial.println(takudooon);
&lt;span style="color:#66d9ef">if&lt;/span>( takudooon &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> ){
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">115&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65&lt;/span>; &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i){&lt;span style="color:#75715e">//0～180°の位置で考える、90度が基準点としてそこからどう動くかを考える
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
}
Nefry.ndelay(&lt;span style="color:#ae81ff">1000&lt;/span>);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mqttLoop&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mqttClient.connected()) {
connectMQTT();
}
mqttClient.loop();
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
mqttLoop();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading-3">操作画面を用意&lt;/h3>
&lt;p>それぞれのプログラムが準備できたら、Node-REDの画面から、&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>URLの「&lt;code>http://localhost:1880&lt;/code>」を「&lt;code>http://localhost:1880/ui&lt;/code>」と記述すると以下のような操作画面があらわれます。ここから、直感的にサーボモータの角度を遠隔制御できるようになります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-4">実際に動かすと……&lt;/h3>
&lt;p>このようになります。
&lt;img src="https://dotstud.io/img/blog/187/8.gif" alt="">&lt;/p>
&lt;h2 id="heading-5">おわりに&lt;/h2>
&lt;p>いろいろな技術を知ることでモノづくりの幅が増え、作ってみたいものを自由に作れるようになってもらえればな、と思います。&lt;/p>
&lt;p>では！&lt;/p></description></item><item><title>ClovaとNefryBT（ESP32）を連携させてみよう</title><link>https://dotstud.io/blog/clova-ifttt-nefrybt-arduino/</link><pubDate>Tue, 10 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/clova-ifttt-nefrybt-arduino/</guid><description>&lt;p>こんにちは、代表の&lt;a href="https://twitter.com/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>LINEのスマートスピーカーClova（正式にはAIアシスタントの名前）が&lt;a href="http://clova-blog.line.me/ja/archives/7990256.html">IFTTTに対応&lt;/a>したのでNefry BT（ESP32）と連携してみました。（実は結構前から対応してたんだけど試せてなかった）&lt;/p>
&lt;p>先日作った勤怠システムについては以下の記事をご参照ください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ちなみにこの勤怠システムは割と運用できてます。今の所は。&lt;/p>
&lt;h2 id="clova">Clovaって？&lt;/h2>
&lt;p>ClovaはLINEが開発したAIアシスタントです。Clova FriendsやClova Friends mini、Clova Waveなどの対応スマートスピーカー端末が販売されています。&lt;/p>
&lt;ul>
&lt;li>公式サイト: &lt;a href="https://clova.line.me/">https://clova.line.me/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>GoogleのGoogle アシスタント（Google Home）やAmazonのAlexa（Amazon Echo）などと同じ並びの立ち位置という認識で大丈夫です。&lt;/p>
&lt;p>LINEといえばスタンプやキャラクターが特徴的ですが、Clova Friendsに関してもLINEが提供しているということもあり、 &lt;strong>キャラクターをベースにしたデバイスが特徴的です&lt;/strong>。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>─ ちなみにこの写真は先日のLINE CONFERENCE 2018で発表があったミニオンズモデル&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>この記事の執筆時点（2018年7月7日）ではまだ開発用SDKは公開されていませんが、IFTTTに対応したというリリースが出ているのでIFTTT経由で色々なサービスと接続することが出来ます。&lt;/p>
&lt;h2 id="clova-1">出勤するとClovaがしゃべる&lt;/h2>
&lt;p>今回作ったものはこんな感じです。&lt;/p>
&lt;p>試してるのはアルバイトの佐々木さんです。ドヤ顔は素です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>先日作った勤怠システムと連携してキーパッドのボタンを押して出勤登録するとClovaに通知がいきます。&lt;/p>
&lt;h2 id="nefry-btclova">Nefry BTとClovaを連携してみよう&lt;/h2>
&lt;p>IFTTTのWebhookを用いてNefry BTからPOSTリクエストを送り、Clova側に通知させます。&lt;/p>
&lt;p>イメージはこんな感じです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="ifttt">IFTTTでアプレットの登録&lt;/h3>
&lt;p>アプレットとは連携させるサービスとサービスの組み合わせのことを指します。&lt;/p>
&lt;p>IFTTTのユーザー登録などを完了したら&lt;a href="https://ifttt.com/create">アプレット作成&lt;/a>のページから新規のアプレットを作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず&lt;code>this&lt;/code>を押すとトリガーとなるサービスを選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/185/4.gif" alt="">
Webhookを選択しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>任意のEvent Nameを指定します。&lt;code>clova_things&lt;/code>としました。&lt;/p>
&lt;p>次に&lt;code>that&lt;/code>を押してアウトプットとなるサービスを選択します。
&lt;img src="https://dotstud.io/img/blog/185/6.gif" alt="">
clovaを選択しましょう。&lt;/p>
&lt;p>メッセージ内容の箇所に&lt;code>Value1&lt;/code>を指定します。これはNefry BTから受け取る1つ目の値を指します。
&lt;img src="https://i.gyazo.com/d868fea0c1d1738593a1f82d26ffbde2.png" alt="">
&lt;code>Create action&lt;/code>のボタンを押して次のページで&lt;code>Finish&lt;/code>で完了です。&lt;/p>
&lt;h3 id="curl">curlで試してみる&lt;/h3>
&lt;p>&lt;a href="https://ifttt.com/services/maker_webhooks/settings">IFTTTのWebhooksの設定画面&lt;/a>を見てAPI KEYを確認しましょう。&lt;/p>
&lt;p>&lt;code>https://maker.ifttt.com/use/xxxxxxxxx&lt;/code>というURLが表示されていると思いますが、&lt;code>xxxxxxxxx&lt;/code>の箇所がAPI KEYになります。&lt;/p>
&lt;p>curlでは以下のように試せます。&lt;/p>
&lt;pre>&lt;code>$ curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d '{&amp;quot;value1&amp;quot;:&amp;quot;てすと&amp;quot;}' https://maker.ifttt.com/trigger/clova_things/with/key/xxxxxxxxx
&lt;/code>&lt;/pre>&lt;p>リクエストするURLはこのような形です。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>https://maker.ifttt.com/trigger/{{Event Name}}/with/key/{{API KEY}}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>Event Nameは今回の場合は任意の名前として&lt;code>clova_things&lt;/code>としていて、API KEYは&lt;code>xxxxxxxxx&lt;/code>の部分です。&lt;/p>
&lt;h3 id="nefry-bt">Nefry BT側のコード&lt;/h3>
&lt;p>勤怠システムの記事のコードとほぼ同様です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>適宜読み替えてください。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;WiFiClientSecure.h&amp;gt;
WiFiClientSecure client;
const int HTTP_PORT = 443;
//途中省略
//・
//・
//・
void iftttClovaPost(String message){
const char* HOST = &amp;quot;maker.ifttt.com&amp;quot;;
String url = &amp;quot;/trigger/clova_things/with/key/xxxxxxxxx&amp;quot;;
url += &amp;quot;?value1=&amp;quot;; //value1にデータを送る
url += StrPerEncord(escapeParameter(message).c_str()); //勤怠システム記事参照
Serial.print(&amp;quot;connecting to &amp;quot;);
Serial.println(HOST);
if (!client.connect(HOST, HTTP_PORT)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return;
}
client.println(&amp;quot;POST &amp;quot; + url + &amp;quot; HTTP/1.1&amp;quot;);
client.println(&amp;quot;Content-Type: application/json&amp;quot;);
client.println(&amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot;);
client.println(&amp;quot;Host: &amp;quot; + String(HOST));
client.println(&amp;quot;Connection: close&amp;quot;);
client.println();
unsigned long timeout = millis();
while (client.available() == 0) {
if (millis() - timeout &amp;gt; 5000) {
Serial.println(&amp;quot;&amp;gt;&amp;gt;&amp;gt; Client Timeout !&amp;quot;);
client.stop();
return;
}
}
// Read all the lines of the reply from server and print them to Serial
while(client.available()) {
String line = client.readStringUntil('\r');
Serial.print(line);
}
Serial.println();
Serial.println(&amp;quot;closing connection&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>全体コードは&lt;a href="https://gist.github.com/n0bisuke/d2fab404e5073e936339a6c3442c1e4c#file-kintai-ino-L94-L133">こちら&lt;/a>です。&lt;/p>
&lt;h2 id="heading">試し方と使う際の注意点&lt;/h2>
&lt;p>さて完成したら試してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>キーパッドを押すとClovaに通知がいき、**「通知を読み上げて」**とClovaに話かけてあげると読み上げてくれます。&lt;/p>
&lt;p>&lt;strong>はじめはWebhooksで通知するとそのままClovaが喋ってくれると思ったのですがそうではないので注意です。&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>通知が来た時点で何も喋ってくれないのは分かりにくいですね。現時点だと「通知を読み上げて」と言わないと読み上げてくれないので注意ですね。&lt;/p>
&lt;h2 id="heading-1">まとめ&lt;/h2>
&lt;p>Nefry BTをClovaを繋げることが出来ました。&lt;/p>
&lt;p>IFTTTに繋がると実質何とでも繋げられるので嬉しいですね。&lt;/p>
&lt;p>人間が「通知を読み上げて」と言わなくても喋ってくれるように機能追加してくれることに期待です。&lt;/p></description></item><item><title>NefryBTとキーボードで作る簡易勤怠管理システム</title><link>https://dotstud.io/blog/keyboard-kintai-system-diy/</link><pubDate>Thu, 05 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/keyboard-kintai-system-diy/</guid><description>&lt;p>こんにちは、代表の&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>今日はとある電子工作向けキーパッドを手に入れたので、&lt;strong>Nefry BTで簡易的な勤怠管理システム&lt;/strong>を作ってみました。ちなみにオチとかないです。&lt;/p>
&lt;h2 id="heading">使うもの&lt;/h2>
&lt;h3 id="--44">マトリックスフィルムボタンキーボード メンブレン式キーボード 4*4&lt;/h3>
&lt;p>HiLetgoというストアから出品されています。眺めていて使ってみたいなぁという欲求が湧いたのでポチりました。&lt;/p>
&lt;p>ちなみに5個セットなので、あと4個なにか作れます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="arduino-uno">Arduino Unoで動かしてみる&lt;/h2>
&lt;p>AmazonのページにはArduino対応と書いているのでどうやら使えるらしい。&lt;/p>
&lt;p>&lt;a href="https://techtutorialsx.com/2017/03/18/esp8266-interfacing-with-a-4x4-matrix-keypad/">ESP8266: Interfacing with a 4×4 Matrix Keypad
&lt;/a>という記事があったので参考にArduinoで動かしてみました。&lt;/p>
&lt;h3 id="heading-1">配線&lt;/h3>
&lt;p>&lt;img src="https://i.gyazo.com/3c3b4883c69f25b562906e38f853beb4.png" alt="">&lt;/p>
&lt;p>Arduino Unoとあとで紹介するNefry BTでの配線はこんな感じです。&lt;/p>
&lt;h3 id="heading-2">プログラム&lt;/h3>
&lt;p>&lt;a href="Chris--A/Keypad">こちらのライブラリ&lt;/a>をインストールしましょう。&lt;/p>
&lt;p>ライブラリマネージャからもインストールできます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/d1d90cb4712729faac8272bcf3274767.png" alt="">&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Keypad.h&amp;gt;
const byte n_rows = 4;
const byte n_cols = 4;
char keys[n_rows][n_cols] = {
{'1','2','3','A'},
{'4','5','6','B'},
{'7','8','9','C'},
{'*','0','#','D'}
};
byte colPins[n_rows] = {3, 2, 1, 0};
byte rowPins[n_cols] = {7, 6, 5, 4};
Keypad myKeypad = Keypad( makeKeymap(keys), rowPins, colPins, n_rows, n_cols);
void setup(){
Serial.begin(115200);
}
void loop(){
char myKey = myKeypad.getKey();
if (myKey != NULL){
Serial.print(&amp;quot;Key pressed: &amp;quot;);
Serial.println(myKey);
}
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-3">実行&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;h2 id="nefry-bt">Nefry BTで動作させて勤怠システムに&lt;/h2>
&lt;p>出退勤の記録を付ける電子工作は、&lt;strong>今まで何度か作りはしたものの導入まで至っていなかった&lt;/strong>です。&lt;/p>
&lt;p>&lt;strong>作り込もうとして力を入れすぎて力尽きる問題&lt;/strong>が大きいと思っています。&lt;/p>
&lt;p>ということで&lt;!-- raw HTML omitted -->実装がシンプルな勤怠システムをとりあえず導入&lt;!-- raw HTML omitted -->してみました。&lt;/p>
&lt;h3 id="heading-4">ボタン入力式&lt;/h3>
&lt;p>仕様は&lt;strong>数字を押して選択し、Aボタンで出勤記録、Bボタンで退勤記録&lt;/strong>です。&lt;/p>
&lt;p>ディスプレイには登録している名前が出ます。&lt;/p>
&lt;p>多分そのうちSuica連携とかBLEデバイス連携とか指紋とか声門とかそういうのも試してみる気はするのですが、 &lt;strong>ボタン入力とHTTP通信だけの実装のシンプルさ&lt;/strong>がとりあえず始めるには重要な気がしました。&lt;/p>
&lt;p>制作時間1時間程度。HTTP POST周りで少し手こずってました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-5">実装&lt;/h3>
&lt;p>&lt;a href="https://dotstud.io/docs/nefrybt-http-post/">Nefry BTでのHTTP POST&lt;/a>も合わせて読むとコード理解が進みます。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Keypad.h&amp;gt;
#include &amp;lt;NefryDisplay.h&amp;gt;
#include &amp;lt;WiFiClientSecure.h&amp;gt;
WiFiClientSecure client;
String StrPerEncord(const char* c_str);
String escapeParameter(String param);
void hipchatPost(String message);
const int HTTP_PORT = 443;
const char* HOST = &amp;quot;xxxxxxxxxx.hipchat.com&amp;quot;;
const byte n_rows = 4;
const byte n_cols = 4;
char keys[n_rows][n_cols] = {
{'1','2','3','A'},
{'4','5','6','B'},
{'7','8','9','C'},
{'*','0','#','D'}
};
byte colPins[n_rows] = {D3, D2, D1, D0};
byte rowPins[n_cols] = {D7, D6, D5, D4};
Keypad myKeypad = Keypad( makeKeymap(keys), rowPins, colPins, n_rows, n_cols);
String storeMessage = &amp;quot;&amp;quot;;
//3行目だけにPrint
void nfDisplay3Print(String mes){
NefryDisplay.print(&amp;quot;&amp;quot;);
NefryDisplay.print(&amp;quot;&amp;quot;);
NefryDisplay.print(mes);
}
void setup() {
Serial.begin(115200);
NefryDisplay.setTitle(&amp;quot;KINTAI&amp;quot;);
nfDisplay3Print(&amp;quot;Please Input...&amp;quot;);
}
void loop() {
char myKey = myKeypad.getKey();
String member = &amp;quot;&amp;quot;;
//ボタンが押された時の処理
if (myKey != NULL){
Serial.print(&amp;quot;Key pressed: &amp;quot;);
Serial.println(myKey);
if(String(myKey) == &amp;quot;1&amp;quot;){
member += &amp;quot;n0bisuke&amp;quot;;
storeMessage = member;
}else if(String(myKey) == &amp;quot;2&amp;quot;){
member += &amp;quot;chantoku&amp;quot;;
storeMessage = member;
}else if(String(myKey) == &amp;quot;3&amp;quot;){
member += &amp;quot;kiki&amp;quot;;
storeMessage = member;
}else if(String(myKey) == &amp;quot;4&amp;quot;){
member += &amp;quot;takudon&amp;quot;;
storeMessage = member;
}else if(String(myKey) == &amp;quot;5&amp;quot;){
member += &amp;quot;sasakitomohiro&amp;quot;;
storeMessage = member;
}
nfDisplay3Print(String(myKey) + &amp;quot;:&amp;quot; + member);
if(String(myKey) == &amp;quot;A&amp;quot;){
nfDisplay3Print(String(myKey) + &amp;quot;: [Office IN] post to HipChat...&amp;quot;);
storeMessage += &amp;quot;さんが出勤しました。&amp;quot;;
hipchatPost(storeMessage); //HipChatに投稿
storeMessage = &amp;quot;&amp;quot;; //リセット
nfDisplay3Print(String(myKey) + &amp;quot;: POST DONE&amp;quot;);
}else if(String(myKey) == &amp;quot;B&amp;quot;){
nfDisplay3Print(String(myKey) + &amp;quot;: [Office OUT] post to HipChat...&amp;quot;);
storeMessage += &amp;quot;さんが退勤しました。&amp;quot;;
hipchatPost(storeMessage); //HipChatに投稿
storeMessage = &amp;quot;&amp;quot;; //リセット
nfDisplay3Print(String(myKey) + &amp;quot;: POST DONE&amp;quot;);
}
}
}
void hipchatPost(String message){
String url = &amp;quot;/v2/room/4651875/notification?auth_token=xxxxxxxxxxxxxxxx&amp;quot;;
url += &amp;quot;&amp;amp;color=green&amp;amp;notify=false&amp;amp;message_format=text&amp;amp;message=&amp;quot;;
url += StrPerEncord(escapeParameter(message + &amp;quot; (yey)&amp;quot;).c_str());
Serial.print(&amp;quot;connecting to &amp;quot;);
Serial.println(HOST);
if (!client.connect(HOST, HTTP_PORT)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return;
}
client.println(&amp;quot;POST &amp;quot; + url + &amp;quot; HTTP/1.1&amp;quot;);
client.println(&amp;quot;Content-Type: application/json&amp;quot;);
client.println(&amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot;);
client.println(&amp;quot;Host: &amp;quot; + String(HOST));
client.println(&amp;quot;Connection: close&amp;quot;);
client.println();
unsigned long timeout = millis();
while (client.available() == 0) {
if (millis() - timeout &amp;gt; 5000) {
Serial.println(&amp;quot;&amp;gt;&amp;gt;&amp;gt; Client Timeout !&amp;quot;);
client.stop();
return;
}
}
// Read all the lines of the reply from server and print them to Serial
while(client.available()) {
String line = client.readStringUntil('\r');
Serial.print(line);
}
Serial.println();
Serial.println(&amp;quot;closing connection&amp;quot;);
}
String StrPerEncord(const char* c_str) {
uint16_t i = 0;
String str_ret = &amp;quot;&amp;quot;;
char c1[3], c2[3], c3[3];
while (c_str[i] != '\0') {
if (c_str[i] &amp;gt;= 0xC2 &amp;amp;&amp;amp; c_str[i] &amp;lt;= 0xD1) { //2バイト文字
sprintf(c1, &amp;quot;%2x&amp;quot;, c_str[i]);
sprintf(c2, &amp;quot;%2x&amp;quot;, c_str[i + 1]);
str_ret += &amp;quot;%&amp;quot; + String(c1) + &amp;quot;%&amp;quot; + String(c2);
i = i + 2;
} else if (c_str[i] &amp;gt;= 0xE2 &amp;amp;&amp;amp; c_str[i] &amp;lt;= 0xEF) {
sprintf(c1, &amp;quot;%2x&amp;quot;, c_str[i]);
sprintf(c2, &amp;quot;%2x&amp;quot;, c_str[i + 1]);
sprintf(c3, &amp;quot;%2x&amp;quot;, c_str[i + 2]);
str_ret += &amp;quot;%&amp;quot; + String(c1) + &amp;quot;%&amp;quot; + String(c2) + &amp;quot;%&amp;quot; + String(c3);
i = i + 3;
} else {
str_ret += String(c_str[i]);
i++;
}
}
return str_ret;
}
String escapeParameter(String param) {
param.replace(&amp;quot;%&amp;quot;, &amp;quot;%25&amp;quot;);
param.replace(&amp;quot;+&amp;quot;, &amp;quot;%2B&amp;quot;);
param.replace(&amp;quot; &amp;quot;, &amp;quot;+&amp;quot;);
param.replace(&amp;quot;\&amp;quot;&amp;quot;, &amp;quot;%22&amp;quot;);
param.replace(&amp;quot;#&amp;quot;, &amp;quot;%23&amp;quot;);
param.replace(&amp;quot;$&amp;quot;, &amp;quot;%24&amp;quot;);
param.replace(&amp;quot;&amp;amp;&amp;quot;, &amp;quot;%26&amp;quot;);
param.replace(&amp;quot;'&amp;quot;, &amp;quot;%27&amp;quot;);
param.replace(&amp;quot;(&amp;quot;, &amp;quot;%28&amp;quot;);
param.replace(&amp;quot;)&amp;quot;, &amp;quot;%29&amp;quot;);
param.replace(&amp;quot;*&amp;quot;, &amp;quot;%2A&amp;quot;);
param.replace(&amp;quot;,&amp;quot;, &amp;quot;%2C&amp;quot;);
param.replace(&amp;quot;/&amp;quot;, &amp;quot;%2F&amp;quot;);
param.replace(&amp;quot;:&amp;quot;, &amp;quot;%3A&amp;quot;);
param.replace(&amp;quot;;&amp;quot;, &amp;quot;%3B&amp;quot;);
param.replace(&amp;quot;&amp;lt;&amp;quot;, &amp;quot;%3C&amp;quot;);
param.replace(&amp;quot;=&amp;quot;, &amp;quot;%3D&amp;quot;);
param.replace(&amp;quot;&amp;gt;&amp;quot;, &amp;quot;%3E&amp;quot;);
param.replace(&amp;quot;?&amp;quot;, &amp;quot;%3F&amp;quot;);
param.replace(&amp;quot;@&amp;quot;, &amp;quot;%40&amp;quot;);
param.replace(&amp;quot;[&amp;quot;, &amp;quot;%5B&amp;quot;);
param.replace(&amp;quot;\\&amp;quot;, &amp;quot;%5C&amp;quot;);
param.replace(&amp;quot;]&amp;quot;, &amp;quot;%5D&amp;quot;);
param.replace(&amp;quot;^&amp;quot;, &amp;quot;%5E&amp;quot;);
param.replace(&amp;quot;'&amp;quot;, &amp;quot;%60&amp;quot;);
param.replace(&amp;quot;{&amp;quot;, &amp;quot;%7B&amp;quot;);
param.replace(&amp;quot;|&amp;quot;, &amp;quot;%7C&amp;quot;);
param.replace(&amp;quot;}&amp;quot;, &amp;quot;%7D&amp;quot;);
return param;
}
&lt;/code>&lt;/pre>&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>&lt;strong>運用1日目ですが問題ないです（謎）&lt;/strong>&lt;/p>
&lt;p>実際にはシートに記録したりした方が良いと思いますが今後検討です！&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/fcc920005a4a691f37081c936f6968d1.png" alt="">&lt;/p>
&lt;p>HipChatの部分はうちの社内がHipChatだからというだけですが、LINEだったりSlackだったりも同様のやり方で連携できます。&lt;/p>
&lt;p>思ったより簡単に試せたなぁという印象なのでみなさんもぜひ試してみてください。&lt;/p></description></item><item><title>自動水やり装置を作ろう！Nefry BTとGroveモジュールでズボラのための電子工作</title><link>https://dotstud.io/blog/nefrybt-motor-watering-system/</link><pubDate>Tue, 03 Apr 2018 10:00:26 +0900</pubDate><guid>https://dotstud.io/blog/nefrybt-motor-watering-system/</guid><description>&lt;p>こんにちは、ちゃんとくです！日中は温かくなって、すっかり春めいてきました。&lt;/p>
&lt;p>春といえば花。&lt;/p>
&lt;p>花といえばそう、&lt;strong>自動水やり装置ですね&lt;/strong>。&lt;/p>
&lt;p>この季節にぴったりの装置を、お手軽開発ボード&lt;a href="https://dotstud.io/docs/nefrybt">Nefry BT&lt;/a>を使って自作してみましょう！&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/148/watering.png" alt="">&lt;/p>
&lt;p>まずは簡単に、&lt;!-- raw HTML omitted -->土が乾いたら水をやる機構&lt;!-- raw HTML omitted -->を作っていきましょう。&lt;/p>
&lt;p>なお今回のレシピはNefry BT開発者の&lt;a href="https://dotstud.io/members/wami">わみ&lt;/a>さんにご提供いただきました！&lt;/p>
&lt;h2 id="heading">開発の前に&lt;/h2>
&lt;h3 id="heading-1">環境構築&lt;/h3>
&lt;p>初めてNefry BTを使う方は、ドキュメントを参考に&lt;!-- raw HTML omitted -->Nefry BTのWi-Fi&lt;!-- raw HTML omitted -->と&lt;!-- raw HTML omitted -->Arduino IDEのセットアップ&lt;!-- raw HTML omitted -->を済ませておきましょう。&lt;/p>
&lt;p>⇒ 参考: &lt;a href="https://dotstud.io/docs/nefrybt-wifi-setup/">Nefry BTのWi-Fiセットアップ&lt;/a>&lt;!-- raw HTML omitted -->
⇒ 参考: &lt;a href="https://dotstud.io/docs/nefrybt-arduino-ide-setup/">Nefry BT向けのArduino IDEセットアップ方法&lt;/a>&lt;/p>
&lt;h3 id="heading-2">使うもの&lt;/h3>
&lt;p>いろいろな実装方法がありますが、今回は簡単に電気をON/OFFできる「&lt;strong>リレー&lt;/strong>（継電器）」というモジュールを使います。
&lt;img src="https://dotstud.io/img/blog/148/parts.png" alt="">&lt;/p>
&lt;ul>
&lt;li>水をやりたい植物&lt;/li>
&lt;li>Nefry BT + 専用ディスプレイ（ディスプレイはなくてもOK）&lt;/li>
&lt;li>Grove 水分センサ（&lt;a href="https://www.seeedstudio.com/grove-moisture-sensor-p-955.html">SEEED-101020008&lt;/a>）&lt;/li>
&lt;li>Grove リレーモジュール（&lt;a href="http://www.seeedstudio.com/depot/grove-relay-p-769.html">SEEED-103020005&lt;/a>）&lt;/li>
&lt;li>DCウォーターポンプ（&lt;a href="https://amzn.to/2IoPJI7">こういうの&lt;/a>。型番忘れてしまいましたが千石さんで購入。）&lt;/li>
&lt;li>ポンプ用シリコンチューブ（&lt;a href="https://amzn.to/2q29vBE">こういうの&lt;/a>。熱帯魚屋さんなどに売ってます。）&lt;/li>
&lt;li>ジャンパワイヤ（オス-オス） 1本&lt;/li>
&lt;li>水を貯めておく容器（コップなど）&lt;/li>
&lt;li>はんだごて + はんだ&lt;/li>
&lt;/ul>
&lt;h2 id="heading-3">配線&lt;/h2>
&lt;p>さっそく配線をしていきます！全体はこんな感じ。
&lt;img src="https://dotstud.io/img/blog/148/circuits.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/148/handa.png" alt="">
ポンプへの給電はNefry BTからされるように、ポンプの線をリレーモジュールのGND部分にはんだづけします。モーターの回転方向は関係ないので今回はどちらの線でも大丈夫です。（一般的には赤がプラス、白または黒がマイナスです。）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/148/relay.png" alt="">
リレーにはこのように、ジャンパワイヤを挟んで止めることができます。小さいマイナスドライバなどで上部のネジを緩めて挟み、抜けないよう締めます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/148/kairo.png" alt="">
ジャンパワイヤとポンプの線をそれぞれ挟みます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/148/nipper.png" alt="">
挟む部分が足りない場合は、ニッパーやワイヤストリッパーでちょんちょんと切れ目を入れ被覆を剥きましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/148/grove.png" alt="">
Groveコネクタを使ってリレーモジュールはD2に、水分センサはA2（Nefry BT R2の場合はA1）に繋ぎます。（Nefry BT R2はA1の表記がA0になっているミスがあります。注意してください。）&lt;/p>
&lt;p>ジャンパはGPIOの5Vに刺します。&lt;/p>
&lt;h2 id="heading-4">プログラム&lt;/h2>
&lt;p>Arduino IDEに下記のプログラムを貼り付け、書き込みます。Nefry BT R2の場合はINの指定をA1にしてください。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;NefryDisplay.h&amp;gt;
#define IN A2 // 土壌センサ（R2の場合はA1）
#define OUT D2 // リレー-&amp;gt;モータ
#define AVE 5 // センサ値を平均化するための取得回数
int readRaw;
int aveRate;
int waterTimer;
void setup() {
pinMode(OUT, OUTPUT);
digitalWrite(OUT, LOW);
delay(10000);
NefryDisplay.print(&amp;quot;wait...&amp;quot;);
}
void loop() {
readRaw = 0;
for(int i=0;i&amp;lt;AVE;i++){
readRaw = analogRead(IN);
delay(500);
}
aveRate = readRaw/AVE;
NefryDisplay.print((String)&amp;quot;readAve : &amp;quot;+aveRate/10/4+&amp;quot; %&amp;quot;);
NefryDisplay.print((String)&amp;quot;aveRate : &amp;quot;+aveRate);
if(aveRate&amp;lt;250){
digitalWrite(OUT,HIGH);
NefryDisplay.print(&amp;quot;Motor ON&amp;quot;);
delay(3000);
digitalWrite(OUT,LOW);
}else{
digitalWrite(OUT,LOW);
NefryDisplay.print(&amp;quot;Motor OFF&amp;quot;);
}
delay(60000);
}
&lt;/code>&lt;/pre>&lt;h2 id="heading-5">動かしてみよう&lt;/h2>
&lt;p>さっそく試してみます！デモ用に下記の動きになっています。&lt;/p>
&lt;ul>
&lt;li>乾いていない時（水分センサが水に浸っている時）= ポンプから水は出ない&lt;/li>
&lt;li>乾いている時（水分センサが水から出た時）= ポンプから水が出る&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gyazo.com/34eb79467ebdd096591ecc893f1e5a5a.gif" alt="">
ポンプが動きました！少し見づらいですが、ディスプレイの表示もOFF-&amp;gt;ONと切り替わっています。&lt;/p>
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>ポンプを使った電子工作は一見難しいですが、Groveのリレーモジュールを使ってわりと簡単に作ることができました！&lt;/p>
&lt;p>ただこのままでは&lt;!-- raw HTML omitted -->給水用の水がなくなっても気づかなかったり、コップの水をこぼしそうになったり&lt;!-- raw HTML omitted -->、少し使いづらいですよね……。&lt;/p>
&lt;p>次回は外装制作とWeb通知の連携をして&lt;strong>より放置しやすい自動水やり装置にブラッシュアップ&lt;/strong>してみます！&lt;/p></description></item><item><title>JavaScriptで開発できる！Mongoose OSでNefry BTをLチカしよう</title><link>https://dotstud.io/blog/mongoose-os-nefry-blink/</link><pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/mongoose-os-nefry-blink/</guid><description>&lt;p>唐突ですが、森田(&lt;a href="https://twitter.com/morita_pac">@morita_pac&lt;/a>)と申します。&lt;/p>
&lt;p>ヘビーNefryBTユーザです。持ち歩いていろんな場所でNefry BTを利用したり、ケースを作ったりもしています。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/145/1.png" alt="">&lt;/p>
&lt;p>通常Nefry BTはArduino言語でプログラムするのですが、今回はJavaScriptで書き込めるようにしたいと思います。&lt;/p>
&lt;p>※この記事内のプログラムはNefy BT（無印）向けです。Nefry BT R2向けのプログラムは別途準備中です。&lt;/p>
&lt;h2 id="javascriptmongoose-os">JavaScriptで開発できるMongoose OSとは&lt;/h2>
&lt;p>今回は&lt;a href="https://mongoose-os.com/">Mongoose OS&lt;/a>というIoTのプロト開発を簡単にできるサービスを利用します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Mongoose OSでは、ESP32やESP8266へJavaScript（&lt;a href="https://github.com/cesanta/mjs">mJS&lt;/a>）でコードを書き込めます。
さらには、セキュアで、AWS IoTやGoogleのCloud IoT Coreなどとも連携設定がシンプルにできます。&lt;/p>
&lt;p>Mongoose OSをインストールしている間は元のNefry BTのプログラムは利用できなくなります。（Arduino IDEで書き込むことですぐに戻せます。）&lt;/p>
&lt;h2 id="mongoose-os">Mongoose OSの開発環境をセットアップ&lt;/h2>
&lt;h3 id="windows">Windowsの場合&lt;/h3>
&lt;p>&lt;a href="https://mongoose-os.com/software.html">Download Page&lt;/a>から、exeをダウンロードするだけで使えます。（アンチウイルス系のソフトが反応するかもしれません。）なお、以降MacOSでの説明になります。
&lt;img src="https://dotstud.io/img/blog/145/3.png" alt="">&lt;/p>
&lt;h3 id="mac-os">Mac OSの場合&lt;/h3>
&lt;p>&lt;a href="https://mongoose-os.com/software.html">Download Page&lt;/a>の、MacOS/Linuxのcurlコマンドをターミナルで実行します。&lt;/p>
&lt;pre>&lt;code>$ curl -fsSL https://mongoose-os.com/downloads/mos/install.sh | /bin/bash
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/145/4.png" alt="">&lt;/p>
&lt;p>ターミナルで以下のようになれば無事完了です。開く場合は、Runの&lt;code>/xxx/.mos/bin/mos&lt;/code>を実行するとWeb UIが開きます。&lt;/p>
&lt;pre>&lt;code>$ curl -fsSL https://mongoose-os.com/downloads/mos/install.sh | /bin/bash
Downloading https://mongoose-os.com/downloads/mos-release/mac/mos ...
########################################################################
100.0%
Installing into /xxx/.mos/bin/mos ...
Adding /xxx/.mos/bin to your PATH in /xxx/.profile
SUCCESS: /xxx/.mos/bin/mos is installed.
Run '/xxx/.mos/bin/mos --help' to see all available commands.
Run '/xxx/.mos/bin/mos' without arguments to start a simplified Web UI installer.
&lt;/code>&lt;/pre>&lt;h2 id="mongoose--osnefry-bt">いざ、Mongoose OSをNefry BTに入れてみよう&lt;/h2>
&lt;p>Nefry BTをUSBポートに差し込み、Mongose OSとサンプルコードをFlashします。（次回起動時は、ポート選択のみで利用可能です。）&lt;/p>
&lt;p>Mongoose OSのWeb UIは、ブラウザで開きます。①②③の設定が完了すれば無事、JavaScriptで書き込む準備完了です。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/145/5.png" alt="">&lt;/p>
&lt;p>①は、Nefry BTのポートを選択します。ポートが見つからない場合はUSBを認識させるための&lt;a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers">ドライバ&lt;/a>をインストールする必要があります。
②では、Platformで「esp32」とapp「demo-js」を選択し「Flash」ボタンをクリックし、処理が終わるまで待ちます。
③では、Wi-fi設定を行います。（今回は必須ではないです。）
全ての設定が完了したら、「Done」ボタンをおしてdevice setupを閉じます。&lt;/p>
&lt;h1 id="4-web-ui">4. 基本的なWeb UIとサンプルプログラム&lt;/h1>
&lt;h3 id="web-ui">Web UIについて&lt;/h3>
&lt;p>まず、画面左側Device Filesを選択します。すると、init.jsが選択され、メインプログラムが表示されます。init.jsファイルをメインで編集します。&lt;/p>
&lt;p>編集後、書き込みたい場合は、Save + Rebootボタンで行えます。このコードやファイルの情報は、端末から読んでいますので、コードを書き換えたら、書き込む前にバックアップを取っておくことをお勧めします。
&lt;img src="https://dotstud.io/img/blog/145/6.png" alt="">&lt;/p>
&lt;h3 id="heading">サンプルプログラムについて&lt;/h3>
&lt;p>デフォルトプログラムを僕の感性でコメントしましたので、ご確認ください。なお、色々と制限付きのJSなので、仕様は&lt;a href="https://github.com/cesanta/mjs">こちら&lt;/a>で確認ください。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js:init.js" data-lang="js:init.js">&lt;span style="color:#75715e">// 利用するAPIを読み出します。Flashした時点のサンプルAPIが呼ばれています。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// 各APIの仕様やサンプルは画面左のファイル一覧で参照可能です。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_config.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_events.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_gpio.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_mqtt.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_net.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_sys.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_timer.js&amp;#39;&lt;/span>);
&lt;span style="color:#75715e">// 変数宣言はletのみです。const, varは使えません。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">led&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Cfg&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;pins.led&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">button&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Cfg&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;pins.button&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">topic&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/devices/&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">Cfg&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;device.id&amp;#39;&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/events&amp;#39;&lt;/span>;
&lt;span style="color:#a6e22e">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;LED GPIO:&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">led&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;button GPIO:&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">button&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">getInfo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">JSON&lt;/span>.&lt;span style="color:#a6e22e">stringify&lt;/span>({
&lt;span style="color:#a6e22e">total_ram&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Sys&lt;/span>.&lt;span style="color:#a6e22e">total_ram&lt;/span>(),
&lt;span style="color:#a6e22e">free_ram&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Sys&lt;/span>.&lt;span style="color:#a6e22e">free_ram&lt;/span>()
});
};
&lt;span style="color:#75715e">// 1秒おきにLEDをチカチカさせてます。ついでにチクタク時を刻んでいます。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">set_mode&lt;/span>(&lt;span style="color:#a6e22e">led&lt;/span>, &lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">MODE_OUTPUT&lt;/span>);
&lt;span style="color:#a6e22e">Timer&lt;/span>.&lt;span style="color:#a6e22e">set&lt;/span>(&lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#75715e">/* 1 sec */&lt;/span>, &lt;span style="color:#a6e22e">Timer&lt;/span>.&lt;span style="color:#a6e22e">REPEAT&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">toggle&lt;/span>(&lt;span style="color:#a6e22e">led&lt;/span>);
&lt;span style="color:#a6e22e">print&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tick&amp;#39;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tock&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;uptime:&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">Sys&lt;/span>.&lt;span style="color:#a6e22e">uptime&lt;/span>(), &lt;span style="color:#a6e22e">getInfo&lt;/span>());
}, &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;span style="color:#75715e">// リセットボタンではない方のボタンを押すとMQTTでpublishします。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">set_button_handler&lt;/span>(&lt;span style="color:#a6e22e">button&lt;/span>, &lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">PULL_UP&lt;/span>, &lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">INT_EDGE_NEG&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getInfo&lt;/span>();
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">MQTT&lt;/span>.&lt;span style="color:#a6e22e">pub&lt;/span>(&lt;span style="color:#a6e22e">topic&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#a6e22e">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Published:&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span>, &lt;span style="color:#a6e22e">topic&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-&amp;gt;&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
}, &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;span style="color:#75715e">// ネットワークモニタです。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Event&lt;/span>.&lt;span style="color:#a6e22e">addGroupHandler&lt;/span>(&lt;span style="color:#a6e22e">Net&lt;/span>.&lt;span style="color:#a6e22e">EVENT_GRP&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">ev&lt;/span>, &lt;span style="color:#a6e22e">evdata&lt;/span>, &lt;span style="color:#a6e22e">arg&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">evs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;???&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">ev&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">Net&lt;/span>.&lt;span style="color:#a6e22e">STATUS_DISCONNECTED&lt;/span>) {
&lt;span style="color:#a6e22e">evs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;DISCONNECTED&amp;#39;&lt;/span>;
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">ev&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">Net&lt;/span>.&lt;span style="color:#a6e22e">STATUS_CONNECTING&lt;/span>) {
&lt;span style="color:#a6e22e">evs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CONNECTING&amp;#39;&lt;/span>;
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">ev&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">Net&lt;/span>.&lt;span style="color:#a6e22e">STATUS_CONNECTED&lt;/span>) {
&lt;span style="color:#a6e22e">evs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CONNECTED&amp;#39;&lt;/span>;
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">ev&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">Net&lt;/span>.&lt;span style="color:#a6e22e">STATUS_GOT_IP&lt;/span>) {
&lt;span style="color:#a6e22e">evs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;GOT_IP&amp;#39;&lt;/span>;
}
&lt;span style="color:#a6e22e">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;== Net event:&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">ev&lt;/span>, &lt;span style="color:#a6e22e">evs&lt;/span>);
}, &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nefry-btled">Nefry BTのフルカラーLEDを点灯しよう&lt;/h2>
&lt;p>やっと本題に入ります。&lt;/p>
&lt;p>Mongoose OSでは、様々なオープンソースコードがあり、それをインポートすることができます。今回は、NefryBTのフルカラーLEDを点灯させるためにNeoPixelのサンプルコードを入手します。&lt;/p>
&lt;p>画面左のProjectsを選択し、Importをクリックします。
&lt;img src="https://dotstud.io/img/blog/145/7.png" alt="">&lt;/p>
&lt;p>App Managerのサーチ部分に「neopixel」と入力し、HARDWAREから「example-neopixel-js」をimportします。完了したらApp Managerの画面を閉じます。
&lt;img src="https://dotstud.io/img/blog/145/8.png" alt="">
次に、サンプルプログラムをNefryBTに書き込みます。&lt;/p>
&lt;p>今ImportしたAppが選択されていることを確認し、①Rebuildアイコンと②Flashアイコンを処理が完了次第、順番にクリックすることで書き込み完了です。（それぞれ少々時間がかかります。）
&lt;img src="https://dotstud.io/img/blog/145/9.png" alt="">&lt;/p>
&lt;p>Device Filesのinit.jsの内容を以下の内容に書き換えます。Nefry BTのボタンを押したらフルカラーLEDが点灯するという内容のプログラムです。&lt;/p>
&lt;p>※なお、R2に関しては動作確認中ですので、確認次第内容を変更いたします。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js:init.js" data-lang="js:init.js">&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_config.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_events.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_gpio.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_sys.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_timer.js&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">load&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;api_neopixel.js&amp;#39;&lt;/span>);
&lt;span style="color:#75715e">// 今回は一部しか利用していませんが、NefryのピンNoです。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pin&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#e6db74">&amp;#34;nefrybt&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;sw&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d0&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">22&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d1&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">21&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d2&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">23&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d3&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">19&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d4&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a0&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">25&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a1&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">26&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a2&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a3&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">33&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a4&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">27&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a5&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a6&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">13&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a7&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">35&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;LED&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>
},
&lt;span style="color:#e6db74">&amp;#34;nefrybtR2&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>{
&lt;span style="color:#e6db74">&amp;#34;sw&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d0&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">22&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d1&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">21&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d2&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">23&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d3&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">19&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d4&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d5&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">25&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d6&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">26&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d7&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">13&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;d8&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a0&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">33&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a1&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a2&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">39&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;a3&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">36&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;LED&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>
}
};
&lt;span style="color:#75715e">// フルカラーLEDのピンと個数、オーダーを指定しています。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">Lpin&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">pin&lt;/span>.&lt;span style="color:#a6e22e">nefrybt&lt;/span>.&lt;span style="color:#a6e22e">LED&lt;/span>, &lt;span style="color:#a6e22e">numPixels&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">colorOrder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">NeoPixel&lt;/span>.&lt;span style="color:#a6e22e">GRB&lt;/span>;
&lt;span style="color:#75715e">// api_neopixel.jsに基づき初期化を行います。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">strip&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">NeoPixel&lt;/span>.&lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#a6e22e">Lpin&lt;/span>, &lt;span style="color:#a6e22e">numPixels&lt;/span>, &lt;span style="color:#a6e22e">colorOrder&lt;/span>);
&lt;span style="color:#a6e22e">strip&lt;/span>.&lt;span style="color:#a6e22e">clear&lt;/span>();
&lt;span style="color:#a6e22e">strip&lt;/span>.&lt;span style="color:#a6e22e">setPixel&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#a6e22e">strip&lt;/span>.&lt;span style="color:#a6e22e">show&lt;/span>();
&lt;span style="color:#75715e">// ボタンを押したら赤色をつけます。setpixel(0,0,0,0)は、ピクセルナンバーとRGBになっています。Redの数字は20としていますが、数字をあげるとかなり明るくなります。
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// GPIO.set_button_handlerの仕様は、
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">set_button_handler&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">PULL_UP&lt;/span>, &lt;span style="color:#a6e22e">GPIO&lt;/span>.&lt;span style="color:#a6e22e">INT_EDGE_NEG&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>() {
    &lt;span style="color:#a6e22e">strip&lt;/span>.&lt;span style="color:#a6e22e">clear&lt;/span>();
    &lt;span style="color:#a6e22e">strip&lt;/span>.&lt;span style="color:#a6e22e">setPixel&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">20&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
    &lt;span style="color:#a6e22e">strip&lt;/span>.&lt;span style="color:#a6e22e">show&lt;/span>();
}, &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="heading-1">困った時は&lt;/h2>
&lt;p>Q. DeviceLogsにエラーがでている。&lt;/p>
&lt;p>A. Mongoose OS画面右上のdevice setupより、ポートを選択し直してください。それでも治らない場合は、ターミナルにて、&lt;code>control+c&lt;/code>でMongoose OSを一度終わらせて、再起動をしてみてください。&lt;/p>
&lt;p>それでもエラーが発生する場合は、一度Arduino IDEからNefry BTをボードに選択し、何も書いていないコードで書き込み直してください。なお、Nefry BTの状態に戻したい場合もArduino IDEから書き込むことで初期状態にもどせます。&lt;/p>
&lt;h2 id="heading-2">まとめ&lt;/h2>
&lt;p>Nefry BTをJavaScriptでプログラムして、LEDを点灯させるところまでできました。&lt;/p>
&lt;p>ディスプレイも表示させることができるので、次回は、Mongoose OSを使ったディスプレイの表示方法をご紹介しようと思います。&lt;/p></description></item><item><title>Nefry BT（ESP32）からBLEでNode.jsにデータを送ってみよう</title><link>https://dotstud.io/blog/nefrybt-ble-bluetooth-peripheral/</link><pubDate>Fri, 12 Jan 2018 23:58:16 +0900</pubDate><guid>https://dotstud.io/blog/nefrybt-ble-bluetooth-peripheral/</guid><description>&lt;p>こんにちは、代表ののびすけ（&lt;a href="https://twitter.com/n0bisuke">@n0bisuke&lt;/a>）です。Nefry BTを使ってBluetooth / BLEを利用する方法を紹介します。&lt;/p>
&lt;p>ほぼESP32のコードなので、検証してませんが他のESP32系のボードでも動作すると思います。&lt;/p>
&lt;h2 id="ble">BLEについて&lt;/h2>
&lt;p>BLEには大きく分け**Peripheral （ペリフェラル）&lt;strong>と&lt;/strong>Central（セントラル）**という二つの役割があります。&lt;/p>
&lt;ul>
&lt;li>Peripheral: 発信側端末、ビーコンやBLEタグなど受信端末に対して情報を送る側&lt;/li>
&lt;li>Central: 受信側端末、iPhoneやMacなどBLEデバイスの情報を探して受け取る側&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://dotstud.io/img/blog/143/1.png" alt="">&lt;/p>
&lt;p>Nefry BTは書き込むコードによって、PeripheralにもCentralにもなることができます。&lt;/p>
&lt;h2 id="heading">環境&lt;/h2>
&lt;ul>
&lt;li>Arduino IDE 1.8.5&lt;/li>
&lt;li>Nefry ライブラリ 1.1.4&lt;/li>
&lt;li>Nefry BT R2&lt;/li>
&lt;li>macOS High Sierra&lt;/li>
&lt;li>Node.js v9.2.0&lt;/li>
&lt;/ul>
&lt;h2 id="peripheral">Peripheralの作成&lt;/h2>
&lt;p>情報発信側のPeripheralをNefry BTで作成します。&lt;/p>
&lt;h3 id="uuid">UUIDの作成&lt;/h3>
&lt;p>BLEを利用するためには**SERVICE（サービス）&lt;strong>と&lt;/strong>CHARACTERISTIC（キャラクタリスティック）**という各機能を司るUUIDを設定する必要があります。プログラミングでいうクラスとメソッドの関係だと思うと良いかもしれません。&lt;/p>
&lt;p>BLEデバイスは部屋の中やカフェ、駅などいたるところに存在するのでそれらのデバイスと自分が所持しているデバイスのIDが競合しないようにユニークな値にする必要があります。そこでUUIDを作成し、設定する必要があります。&lt;/p>
&lt;p>&lt;a href="https://www.uuidgenerator.net/">https://www.uuidgenerator.net/&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/143/2.png" alt="">&lt;/p>
&lt;p>このサイトでUUIDが作成出きるので各自作成しましょう。&lt;/p>
&lt;h3 id="nefry-bt">Nefry BTのスケッチ&lt;/h3>
&lt;p>大元のコードはnkolban氏の&lt;a href="https://github.com/nkolban/ESP32_BLE_Arduino/blob/f8fe9d7cdfb20caa54b70849826d1ac6e375ff78/examples/BLE_notify/BLE_notify.ino">こちらのコード&lt;/a>です。&lt;/p>
&lt;p>&lt;code>#define SERVICE_UUID&lt;/code>の箇所と&lt;code>#define CHARACTERISTIC_UUID&lt;/code>の箇所に先ほど作成したUUIDを指定します。&lt;/p>
&lt;p>また&lt;code>BLEDevice::init(&amp;quot;&amp;quot;);&lt;/code>の箇所にBLEデバイスの名前を設定できます。
以下のコードではNefryBT-n0bisukeという名前を指定しています。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;BLEDevice.h&amp;gt;
#include &amp;lt;BLEServer.h&amp;gt;
#include &amp;lt;BLEUtils.h&amp;gt;
#include &amp;lt;BLE2902.h&amp;gt;
BLECharacteristic *pCharacteristic;
bool deviceConnected = false;
uint8_t value = 0;
// See the following for generating UUIDs:
// https://www.uuidgenerator.net/
#define SERVICE_UUID &amp;quot;D5875408-FA51-4763-A75D-7D33CECEBC31&amp;quot;
#define CHARACTERISTIC_UUID &amp;quot;A4F01D8C-A037-43B6-9050-1876A8C23584&amp;quot;
class MyServerCallbacks: public BLEServerCallbacks {
void onConnect(BLEServer* pServer) {
deviceConnected = true;
};
void onDisconnect(BLEServer* pServer) {
deviceConnected = false;
}
};
void setup() {
Serial.begin(115200);
// Create the BLE Device
BLEDevice::init(&amp;quot;NefryBT-n0bisuke&amp;quot;);
// Create the BLE Server
BLEServer *pServer = BLEDevice::createServer();
pServer-&amp;gt;setCallbacks(new MyServerCallbacks());
// Create the BLE Service
BLEService *pService = pServer-&amp;gt;createService(SERVICE_UUID);
// Create a BLE Characteristic
pCharacteristic = pService-&amp;gt;createCharacteristic(
CHARACTERISTIC_UUID,
BLECharacteristic::PROPERTY_READ |
BLECharacteristic::PROPERTY_WRITE |
BLECharacteristic::PROPERTY_NOTIFY |
BLECharacteristic::PROPERTY_INDICATE
);
// https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml
// Create a BLE Descriptor
pCharacteristic-&amp;gt;addDescriptor(new BLE2902());
// Start the service
pService-&amp;gt;start();
// Start advertising
pServer-&amp;gt;getAdvertising()-&amp;gt;start();
Serial.println(&amp;quot;Waiting a client connection to notify...&amp;quot;);
}
void loop() {
if (deviceConnected) {
Serial.printf(&amp;quot;*** NOTIFY: %d ***\n&amp;quot;, value);
char buffer[10];
sprintf(buffer, &amp;quot;{\&amp;quot;val\&amp;quot;:%d}&amp;quot;, value);
Serial.printf(buffer);
pCharacteristic-&amp;gt;setValue(buffer);
pCharacteristic-&amp;gt;notify();
//pCharacteristic-&amp;gt;indicate();
value++;
}
delay(2000);
}
&lt;/code>&lt;/pre>&lt;p>コンパイルエラーが出ないで書き込みが出来ればOKです。&lt;/p>
&lt;h3 id="heading-1">確認&lt;/h3>
&lt;p>デバッグには&lt;a href="https://itunes.apple.com/jp/app/lightblue/id639944780?mt=12">LightBlue&lt;/a>などのBLEデバッグ用のアプリケーションを利用することをお勧めします。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/143/3.png" alt="">&lt;/p>
&lt;p>Nefry BTが起動すると先ほど指定した&lt;strong>NefryBT-n0bisuke&lt;/strong>という名前でBLEデバイスが検出されます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/143/4.png" alt="">&lt;/p>
&lt;p>SERVICEのUUIDやCHARACTERISTICのUUIDも先ほど指定したものが表示されていると思います。&lt;/p>
&lt;p>&lt;strong>これで問題なく、Nefry BTから情報が発信されていることが確認出来ました。&lt;/strong>&lt;/p>
&lt;h2 id="central">Centralの作成&lt;/h2>
&lt;p>次は受信側のCentralを作成していきます。
データの確認だけであれば先ほどのLightBlueなどのアプリで確認でも良いのですが、自分のサービスに組み込む際には何かしらのプログラミング言語でアクセスできた方が都合が良いです。&lt;/p>
&lt;h3 id="noble">nobleの利用&lt;/h3>
&lt;p>&lt;a href="https://github.com/sandeepmistry/noble">noble&lt;/a>はNode.js向けのBLEライブラリです。MacやWindows、Raspberry PiなどのデバイスをBLEのCentralにすることができます。&lt;/p>
&lt;pre>&lt;code>mkdir ble_central
cd ble_central
touch app.js
npm init -y
npm i --save noble
&lt;/code>&lt;/pre>&lt;p>これで準備とnobleのインストールが完了しました。&lt;/p>
&lt;p>&lt;code>app.js&lt;/code>に以下を記述します。SERVICE_UUIDやCHARACTERISTIC_UUIDは自分で作成したNefry BT側に書き込んだUUIDと同様のものを指定しましょう。&lt;/p>
&lt;blockquote>
&lt;p>[WIP] Async/Awaitに書き換えたい。&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>'use strict';
const noble = require('noble');
const serviceuuid = `d5875408fa514763a75d7d33cecebc31`;
const charauuid = `a4f01d8ca03743b690501876a8c23584`;
//キャラクタリスティックにアクセスしてデータやりとり
const accessChara = (chara) =&amp;gt; {
console.log('-----Start GATT Access-----')
chara.notify(true, (err) =&amp;gt; {
if (err) {
console.log('listen notif error', err)
} else {
console.log('listen notif')
}
});
chara.on('data', (data, isNotif) =&amp;gt; {
const jsonStr = data.toString('utf-8');
const jsonData = JSON.parse(jsonStr);
console.log(jsonData);
});
}
//discovered BLE device
const discovered = (peripheral) =&amp;gt; {
console.log(`BLE Device Found: ${peripheral.advertisement.localName}(${peripheral.uuid}) RSSI${peripheral.rssi}`);
if(peripheral.advertisement.localName === 'NefryBT-n0bisuke'){
noble.stopScanning();
console.log('device found');
console.log(`service discover...`);
peripheral.connect(error =&amp;gt; {
if (error) {
console.log(&amp;quot;connection error:&amp;quot;, error)
} else {
console.log(&amp;quot;device connected&amp;quot;);
}
peripheral.discoverServices([],(err, services) =&amp;gt; {
if (error) {
console.log(&amp;quot;discover service error&amp;quot;, error)
}
console.log('discover service');
services.forEach(service =&amp;gt; {
if(service.uuid === serviceuuid){
service.discoverCharacteristics([], (error, charas) =&amp;gt; {
console.log('discover chara');
charas.forEach(chara =&amp;gt; {
if(chara.uuid === charauuid){
console.log(&amp;quot;found chara: &amp;quot;, chara.uuid)
accessChara(chara);
}
});
});
}
});
});
});
}
}
//BLE scan start
const scanStart = () =&amp;gt; {
noble.startScanning();
noble.on('discover', discovered);
}
if(noble.state === 'poweredOn'){
scanStart();
}else{
noble.on('stateChange', scanStart);
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-2">実行&lt;/h3>
&lt;pre>&lt;code>node app.js
&lt;/code>&lt;/pre>&lt;p>で実行します。この時、先ほどのLightBlueなどのアプリでNefryBTにBLEアクセスしていると上手くいかないのでアプリ側の接続は解除しましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/143/5.gif" alt="">&lt;/p>
&lt;p>Mac側のNode.jsのログはこんな感じで表示されます。&lt;/p>
&lt;pre>&lt;code>BLE Device Found: LED(59aa15c3a3274ed7b11d334b5c0d0900) RSSI-68
BLE Device Found: NefryBT-n0bisuke(d0b77d4611f54380b8b63e6d05765ad6) RSSI-49
device found
service discover...
device connected
discover service
discover chara
found chara: a4f01d8ca03743b690501876a8c23584
-----Start GATT Access-----
listen notif
{ val: 147 }
{ val: 148 }
・
・
・
&lt;/code>&lt;/pre>&lt;h3 id="heading-3">解説&lt;/h3>
&lt;p>NefryBT側ではデバイスにアクセスがありCentralとのコネクションが確立すると、&lt;code>変数value&lt;/code>の値をセット(pCharacteristic-&amp;gt;setValue)して送信（pCharacteristic-&amp;gt;notify）し、valueの値をインクリメントします。&lt;/p>
&lt;p>これを2秒ごとに行うので2秒間隔でNefryBTからMacのNode.jsに情報が送信されます。&lt;/p>
&lt;pre>&lt;code>・
(省略)
・
・
void loop() {
if (deviceConnected) {
Serial.printf(&amp;quot;*** NOTIFY: %d ***\n&amp;quot;, value);
char buffer[10];
sprintf(buffer, &amp;quot;{\&amp;quot;val\&amp;quot;:%d}&amp;quot;, value);
Serial.printf(buffer);
pCharacteristic-&amp;gt;setValue(buffer);
pCharacteristic-&amp;gt;notify();
//pCharacteristic-&amp;gt;indicate();
value++;
}
delay(2000);
}
&lt;/code>&lt;/pre>&lt;p>Node.js（noble）側では、PERIPHERAL -&amp;gt; SERVICE -&amp;gt; CHARACTERISTICと階層的にアクセスしていき、CHARACTERISTICまでアクセスが出きると、accessChara関数が呼ばれます。&lt;/p>
&lt;p>この中の&lt;code>chara.on('data')&lt;/code>の箇所でデータが送られてくるたびにイベントが発火して、データの中身を確認できます。&lt;/p>
&lt;pre>&lt;code>・
・
(省略)
・
const accessChara = (chara) =&amp;gt; {
console.log('-----Start GATT Access-----')
chara.notify(true, (err) =&amp;gt; {
if (err) {
console.log('listen notif error', err)
} else {
console.log('listen notif')
}
});
chara.on('data', (data, isNotif) =&amp;gt; {
const jsonStr = data.toString('utf-8');
const jsonData = JSON.parse(jsonStr);
console.log(jsonData);
});
}
・
・
(省略)
・
&lt;/code>&lt;/pre>&lt;h2 id="heading-4">まとめ&lt;/h2>
&lt;p>Nefry BTでBLEを利用する方法を紹介しました。
Nefry BTでセンサーのデータを取得し、Centralに送信する方法なども応用して作れそうですね。&lt;/p>
&lt;p>これを参考にNefry BTとBLEデバイスの連携などに活用していきましょう。&lt;/p>
&lt;p>今回はNefry BTをPeripheralにする実装でしたが、別の機会でCentralにする方法も紹介できればと思っています。&lt;/p>
&lt;p>それでは！&lt;/p>
&lt;h2 id="heading-5">所感&lt;/h2>
&lt;p>今回の実装ですが色々と途中でのハマりが多いかつ、調べてもまだまだESP32のBLE利用をArduinoでやってる事例は少なくけっこう大変でした。この辺の大変だった知見はQiitaなどでまとめらたらと思っています。お疲れ様です笑&lt;/p></description></item><item><title>Nefry BT（ESP32）でMQTTを使ってみよう Subscribe編</title><link>https://dotstud.io/blog/nefry-bt-connect-mqtt/</link><pubDate>Sat, 06 Jan 2018 14:28:04 +0900</pubDate><guid>https://dotstud.io/blog/nefry-bt-connect-mqtt/</guid><description>&lt;p>あけましておめでとうございます。 代表ののびすけ（&lt;a href="https://twitter.com/n0bisuke">@n0bisuke&lt;/a>）です。&lt;/p>
&lt;p>Nefry BTを使ってMQTTを利用する方法を紹介します。&lt;/p>
&lt;p>今回はMQTTでNefry BTに情報を送信してみます。&lt;/p>
&lt;p>ほぼESP32のコードなので、ESP32系の他のボードを利用している人の参考にもなると思います。&lt;/p>
&lt;h2 id="mqtt">MQTTの登場人物&lt;/h2>
&lt;ul>
&lt;li>Broker - 通信のサーバー&lt;/li>
&lt;li>Publisher - 情報の送信側&lt;/li>
&lt;li>Subscriber - 情報の受信側&lt;/li>
&lt;/ul>
&lt;p>WebSocketではサーバーとクライアントだけで双方向通信をしますが、MQTTではサーバーはBrocker、クライアント側が送信者のPublisherと受信者のSubscriberに分かれます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/141/1.png" alt="">&lt;/p>
&lt;p>今回はNefry BTをSubscriber（受信者）にして、外部からNefry BTに情報を送ってみたいと思います。&lt;/p>
&lt;h2 id="heading">環境&lt;/h2>
&lt;ul>
&lt;li>Arduino IDE 1.8.5&lt;/li>
&lt;li>Nefry ライブラリ 1.1.4&lt;/li>
&lt;li>Nefry BT R2&lt;/li>
&lt;li>macOS High Sierra&lt;/li>
&lt;li>Node.js v9.2.0&lt;/li>
&lt;/ul>
&lt;h2 id="subscriber">Subscriberの作成&lt;/h2>
&lt;h3 id="arduinomqtt">Arduino向けのMQTTライブラリをインストール&lt;/h3>
&lt;p>&lt;a href="https://github.com/knolleary/pubsubclient">knolleary/pubsubclient&lt;/a>を利用します。&lt;/p>
&lt;p>zipファイルをダウンロードしたら、 &lt;code>スケッチ &amp;gt; ライブラリのインポート &amp;gt; .ZIP形式のライブラリをインストール&lt;/code>からArduino IDEにライブラリをインストールします。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/141/2.png" alt="">&lt;/p>
&lt;h3 id="nefry-bt">Nefry BTのスケッチ&lt;/h3>
&lt;p>ブローカーは&lt;a href="https://mosquitto.org/">Mosquitto&lt;/a>を利用します。&lt;/p>
&lt;p>&amp;ldquo;mosquitto.org&amp;quot;の&amp;quot;n0bisuke&amp;quot;という名前のトピックに情報が送信されたら受信します。&lt;/p>
&lt;p>MQTTはデフォルト1883ポートを利用するので、1883ポートを指定します。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;PubSubClient.h&amp;gt;
WiFiClient httpsClient;
PubSubClient mqttClient(httpsClient);
#define TOPIC &amp;quot;n0bisuke&amp;quot;
#define QOS 0
#define URL &amp;quot;mosquitto.org&amp;quot;
#define PORT 1883
void setup() {
mqttClient.setServer(URL, PORT);
mqttClient.setCallback(callback);
}
void loop() {
if(!mqttClient.connected()) {
if (mqttClient.connect(TOPIC)) {
Serial.println(&amp;quot;Connected.&amp;quot;);
mqttClient.subscribe(TOPIC, QOS);
Serial.println(&amp;quot;Subscribed.&amp;quot;);
}
else {
errorReport();
}
}
mqttClient.loop();
}
void callback(char* topic, byte* payload, unsigned int length) {
Serial.print(&amp;quot;Message arrived [&amp;quot;);
Serial.print(topic);
Serial.print(&amp;quot;] &amp;quot;);
for (int i = 0; i &amp;lt; length; i++) {
Serial.print((char)payload[i]);
}
Serial.println();
}
void errorReport(){
Serial.print(&amp;quot;Failed. Error state = &amp;quot;);
switch (mqttClient.state()) {
case MQTT_CONNECT_UNAUTHORIZED:
Serial.println(&amp;quot;MQTT_CONNECT_UNAUTHORIZED&amp;quot;);
break;
case MQTT_CONNECT_BAD_CREDENTIALS:
Serial.println(&amp;quot;MQTT_CONNECT_BAD_CREDENTIALS&amp;quot;);
break;
case MQTT_CONNECT_UNAVAILABLE:
Serial.println(&amp;quot;MQTT_CONNECT_UNAVAILABLE&amp;quot;);
break;
case MQTT_CONNECT_BAD_CLIENT_ID:
Serial.println(&amp;quot;MQTT_CONNECT_BAD_CLIENT_ID&amp;quot;);
break;
case MQTT_CONNECT_BAD_PROTOCOL:
Serial.println(&amp;quot;MQTT_CONNECT_BAD_PROTOCOL&amp;quot;);
break;
case MQTT_CONNECTED:
Serial.println(&amp;quot;MQTT_CONNECTED&amp;quot;);
break;
case MQTT_DISCONNECTED:
Serial.println(&amp;quot;MQTT_DISCONNECTED&amp;quot;);
break;
case MQTT_CONNECT_FAILED:
Serial.println(&amp;quot;MQTT_CONNECT_FAILED&amp;quot;);
break;
case MQTT_CONNECTION_LOST:
Serial.println(&amp;quot;MQTT_CONNECTION_LOST&amp;quot;);
break;
case MQTT_CONNECTION_TIMEOUT:
Serial.println(&amp;quot;MQTT_CONNECTION_TIMEOUT&amp;quot;);
break;
}
delay(5000); // Wait 5 seconds before retrying
}
&lt;/code>&lt;/pre>&lt;h2 id="publisher">Publisherの作成&lt;/h2>
&lt;p>情報の送信側であるPublisherは手元のMac Book上のNode.jsで作成しました。&lt;/p>
&lt;p>Node.jsでMQTTを利用する場合は&lt;a href="https://www.npmjs.com/package/mqtt">mqtt.js&lt;/a>を利用するのが手頃です。&lt;/p>
&lt;pre>&lt;code>mkdir mqtt-test
cd mqtt-test
npm init -y
npm i --save mqtt
touch publisher.js
&lt;/code>&lt;/pre>&lt;pre>&lt;code>//publisher.js
'use strict';
const mqtt = require('mqtt');
const client = mqtt.connect('mqtt://mosquitto.org');
client.on('connect', () =&amp;gt; console.log('publisher.connected.'));
setInterval(() =&amp;gt; {
const message = Date.now().toString();
client.publish('n0bisuke', message);
console.log('publisher.publish:', message);
}, 1000);
&lt;/code>&lt;/pre>&lt;p>これで実行すると、以下のように時間の情報をパブリッシュ（送信）し始めます。&lt;/p>
&lt;pre>&lt;code>node publisher.js
publisher.publish: 1515219086876
publisher.publish: 1515219087879
publisher.publish: 1515219088880
publisher.publish: 1515219089882
・
・
・
(省略)
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/141/3.png" alt="">&lt;/p>
&lt;h2 id="heading-1">所感&lt;/h2>
&lt;p>思ってたより簡単に実装出来ました。
これを参考にNefry BTとWebサービスの連携などに活用していきましょう。&lt;/p>
&lt;p>&lt;a href="http://www.mosca.io/">Mosca&lt;/a>などを使うとBrokerも自分で作成することが出来るので試してみると良いかもしれません。&lt;/p></description></item><item><title>Node.jsとNefry BTで監視システムを作ろう！ for Pepper #iotlt</title><link>https://dotstud.io/blog/nefrybt-pepper-monitoring-system/</link><pubDate>Thu, 21 Sep 2017 18:40:38 +0900</pubDate><guid>https://dotstud.io/blog/nefrybt-pepper-monitoring-system/</guid><description>&lt;p>こんにちは、のびすけです。&lt;/p>
&lt;p>IoTLT vol31で話をしたNefry BT（ESP32系ボード）を使ってネットワークカメラを作ってみたいと思います。&lt;/p>
&lt;p>発表資料もご参照ください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>&lt;a href="https://speakerdeck.com/n0bisuke/pepperlian-xi-falsejian-shi-sisutemu-number-iotlt">Pepper連携の監視システム? #iotlt by n0bisuke&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://dotstudio.connpass.com/event/61189/">Nefry BTのハンズオン&lt;/a>も開催しますので合わせてご覧ください。&lt;/p>
&lt;h2 id="heading">やりたいこと&lt;/h2>
&lt;p>&lt;strong>Pepperを監視したい。&lt;/strong>&lt;/p>
&lt;p>謎ですが、Pepperを監視したいです。&lt;/p>
&lt;p>&lt;a href="https://iotlt.connpass.com/event/65379/">IoTLT vol31&lt;/a>で話をした内容ですが、Pepperが動いてくれないので、Pepperがいつ動き出しても大丈夫なように&lt;strong>Pepperを見守り&lt;/strong>します。&lt;/p>
&lt;p>巷では「Pepperが見守り」だったり、「Pepperが防犯」みたいな先進的な取り組みがありますが、僕は&lt;strong>あえてPepperを見守ります。&lt;/strong>&lt;/p>
&lt;h2 id="heading-1">完成イメージ&lt;/h2>
&lt;p>こんな感じで見守ります。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/c3fa7c7bb7dbdd5bba505e7a3de3b54b.png" alt="">&lt;/p>
&lt;p>そして、外からでもブラウザでPepperを見守るストリーミングサービスっぽいものを作ります。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/09e912583e26710a13f0d49f4a866b55.png" alt="">&lt;/p>
&lt;h2 id="heading-2">使うもの&lt;/h2>
&lt;p>デバイスはNefry BTとGroveカメラの二つです。
（ちょっとジャンパワイヤ使います。）&lt;/p>
&lt;h3 id="nefry-bt">Nefry BT&lt;/h3>
&lt;p>ESP32ベースのArduino互換開発ボードです。
&lt;a href="http://sengoku.co.jp/mod/sgk_cart/detail.php?code=EEHD-55W8">千石電商さん&lt;/a>でも購入できます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/d43d9926b0e5293b1045890bdd7fbc6c.png" alt="">&lt;/p>
&lt;h3 id="grove-">Grove シリアルカメラキット&lt;/h3>
&lt;p>Grove対応のカメラです。&lt;/p>
&lt;p>&lt;a href="https://www.switch-science.com/catalog/1626/">スイッチサイエンスさん&lt;/a>などで購入できます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/99ad24d2ffcfd62c8407d7db7fb753c5.png" alt="">&lt;/p>
&lt;h2 id="heading-3">構成イメージ&lt;/h2>
&lt;p>カメラで撮影した画像をNefry BT経由でサーバーにアップロードします。
アップロードされた画像はNode.jsで立てたサーバーで受け取り、WebSocket(Socket.io)でブラウザに配信します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/bfdd4f3e37898144268c2edd086320dc.png" alt="">&lt;/p>
&lt;h2 id="heading-4">作り方&lt;/h2>
&lt;p>3つに分けて紹介します。&lt;/p>
&lt;p>デバイス（Nefry BT）で撮影した画像をサーバーに送りサーバーからブラウザに配信します。&lt;/p>
&lt;p>データの流れ的に&lt;code>デバイス -&amp;gt; サーバー -&amp;gt; ブラウザ&lt;/code>という流れです。&lt;/p>
&lt;p>全体のコードは&lt;a href="https://github.com/dotstudio/nefrybt_camera_server">こちらのGitHubリポジトリ&lt;/a>にあります。&lt;/p>
&lt;h3 id="---arduino">デバイス側 - Arduino&lt;/h3>
&lt;p>デバイス側は&lt;a href="http://wiki.seeed.cc/Grove-Serial_Camera_Kit/">Grove - Serial Camera Kitの公式Wiki&lt;/a>にあるサンプルコードをもとに作っています。&lt;/p>
&lt;p>dotstudioの&lt;a href="https://dotstud.io/members/ukkz/">ものづくりアーティストうこ&lt;/a>さんがメインで作ってくれました。&lt;/p>
&lt;p>少し長いので&lt;a href="https://github.com/dotstudio/nefrybt_camera_server/blob/master/nefry/nefrybt_grove_camera/nefrybt_grove_camera.ino">GitHubのリポジトリ&lt;/a>を参照しましょう。&lt;/p>
&lt;p>このプログラムをNefry BTに書き込みましょう。&lt;/p>
&lt;p>&lt;code>host&lt;/code>の箇所に画像アップロード先のサーバーを指定します。&lt;/p>
&lt;h4 id="heading-5">配線&lt;/h4>
&lt;p>配線はD3,D4に繋ぎます。&lt;/p>
&lt;p>プログラム的には&lt;/p>
&lt;pre>&lt;code>#define SEREAL_RX 19 //Nefry BT D3
#define SEREAL_TX 18 //Nefry BT D4
&lt;/code>&lt;/pre>&lt;p>の部分が該当します。NefryBTの&lt;a href="https://drive.google.com/file/d/0B_mvDQF8yaQRLVprUHl4WTFLWVE/view">仕様書&lt;/a>を見ると分かりますが、ESP32のGPIO 19番がNefryBTのD3にあたり、18番がD4になります。&lt;/p>
&lt;h3 id="---nodejs">サーバー側 - Node.js&lt;/h3>
&lt;p>Node.jsで画像を受信するサーバーを作ります。&lt;/p>
&lt;p>無難にSocket.ioとexpressを使います。 Node.jsのバージョンは8.4です。
7系以前だと動かない可能性があります。&lt;/p>
&lt;pre>&lt;code>npm i --save socket.io express
&lt;/code>&lt;/pre>&lt;pre>&lt;code>//server.js
'use strict';
const fs = require('fs');
const app = require('express')();
const http = require('http').Server(app);
const io = require('socket.io')(http);
const express = require('express');
const PORT = process.env.PORT || 3000;
app.use(express.static(__dirname));
const {promisify} = require('util');
const writeFileAsync = promisify(fs.writeFile);
io.on('connection', (socket) =&amp;gt; console.log('a user connected')); //socket.ioのコネクション
app.get('/', (req, res) =&amp;gt; res.sendFile('./index.thml'));
app.post('/', (req, res) =&amp;gt; {
let buffers = [];
let cur = 0;
const len = parseInt(req.headers['content-length'], 10);
req.on('data', (chunk) =&amp;gt; {
buffers.push(chunk);
cur += chunk.length;
console.log(`Downloading...${(100.0 * cur / len).toFixed(2)}%`);
});
req.on('end', async () =&amp;gt; {
console.log(`\n[done] Image upload`);
req.rawBody = Buffer.concat(buffers);
const base64image = req.rawBody.toString('base64'); //base64変換
await writeFileAsync('./img.jpeg', req.rawBody, 'utf-8')
console.log(`[done] Image Save`);
io.sockets.emit('new image',base64image); //画像送信
});
});
http.listen(PORT, () =&amp;gt; console.log(`listening on *:${PORT}`));
&lt;/code>&lt;/pre>&lt;p>通常Expressを使う際に&lt;a href="https://github.com/expressjs/body-parser">body-parser&lt;/a>をよく使いますが、今回はあえて使わずに、&lt;code>dataイベント&lt;/code>で&lt;code>chunk&lt;/code>を拾って画像アップロードのプログレス表示を実装しています。&lt;/p>
&lt;p>Nefry BTも含めてこういったマイコンボードはスマートフォンやPCに比べるとCPUパワーが弱いため、画像アップロードに時間がかかることがあります。&lt;/p>
&lt;p>サーバー側でどれくらいのデータ送信が完了しているのかの進捗が分かると安心して開発できます。
画像を受信したら&lt;code>toString('base64')&lt;/code>でBase64の文字列に変換をしています。&lt;/p>
&lt;p>&lt;code>io.sockets.emit()&lt;/code>の箇所では変換した文字列をSocket.io経由でブラウザに配信しています。&lt;/p>
&lt;h3 id="---javascript">ブラウザ側 - JavaScript&lt;/h3>
&lt;p>ブラウザ側では、文字列で送られた画像データを受け取り、Canvasに流し込みます。
HTML側では&lt;code>id=&amp;quot;myCanvas&amp;quot;&lt;/code>のcanvasを作り、&lt;code>socket.io&lt;/code>の読み込みと以下で作る&lt;code>app.js&lt;/code>の読み込みをします。&lt;/p>
&lt;pre>&lt;code>&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
&amp;lt;title&amp;gt;Nefry BT Camera&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body style=&amp;quot;background-color:#D0D0D0;&amp;quot;&amp;gt;
&amp;lt;canvas id=&amp;quot;myCanvas&amp;quot; width=&amp;quot;640&amp;quot; height=&amp;quot;480&amp;quot; style=&amp;quot;background-color:#FFFFFF;&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script src=&amp;quot;/socket.io/socket.io.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/public/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;code>draw()&lt;/code>では、canvasに&lt;code>drawImage()&lt;/code>で画像を描画します。
Base64の場合はsrcが画像パスではなく&lt;code>data:image/jpeg;base64,~~~~~&lt;/code>という指定方法です。&lt;/p>
&lt;pre>&lt;code>// /public/app.js
'use strict';
const socket = io();
const draw = (imageData = '') =&amp;gt; {
const canvas = document.getElementById('myCanvas');
const ctx = canvas.getContext('2d');
const img = new Image();
img.src = `data:image/jpeg;base64,${imageData}`; //基本base64の文字列
if(imageData === 'init') img.src = `./img.jpeg`; //初期実行時のみサーバーのimg.jpegを取得
img.onload = () =&amp;gt; {
canvas.width = img.width;
canvas.height = img.height;
ctx.drawImage(img, 0, 0, 640, 480);
}
console.log(`update ${new Date()}`);
}
socket.on('new image', draw); //画像更新時
draw('init'); //初期実行
&lt;/code>&lt;/pre>&lt;p>&lt;code>socket.on('new image', draw)&lt;/code>でサーバーからデータが送られてくるたびに&lt;code>draw()&lt;/code>を実行します。&lt;/p>
&lt;h2 id="heading-6">使ってみた感想&lt;/h2>
&lt;p>1週間ほど動かしていますが、問題なくずっと稼働写真を送り続けてくれるので意外と&lt;strong>ラズパイなどで作るシステムより安定しているかも&lt;/strong>しれません。&lt;/p>
&lt;p>あと、発表のオチだったのですが、Pepperの調子が悪く被写体が動かないので成功してるのか分かりにくいです苦笑&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/b2fb0a60f31c12e61e99b51d442dd563.png" alt="">&lt;/p>
&lt;h2 id="heading-7">まとめ&lt;/h2>
&lt;p>Nefry BTとNode.jsを使ってネットワークカメラを作ることができました。&lt;/p>
&lt;p>GroveのカメラとNefry V2を使って過去に&lt;a href="https://am-our.com/love/110/13945/">【大島薫×IoT】浮気男を社会的に制裁するマシーンを作ってみた&lt;/a>こともありましたが、ネットワークカメラを作りたい需要はそこそこあると思うので、その際の参考になれば幸いです。&lt;/p></description></item><item><title>Nefry BTとIFTTTでスイッチを押したらLINEを送る仕組みを作ってみよう</title><link>https://dotstud.io/blog/nefry-ifttt-push-line/</link><pubDate>Thu, 18 May 2017 02:51:27 +0900</pubDate><guid>https://dotstud.io/blog/nefry-ifttt-push-line/</guid><description>&lt;p>こんにちは。外部ライターのわみ（&lt;a href="https://twitter.com/wamisnet">@wamisnet&lt;/a>）です。Unirobot株式会社でロボットのソフトウェアエンジニアをやりながら、dotstudioでは私が作成しているIoTデバイス「Nefry」シリーズの販売やチュートリアル記事の執筆をしています。&lt;/p>
&lt;p>Nefryは、ユーザの皆様からのフィードバックを頂き成長しています。新たなWi-Fi・BLEモジュール「ESP-WROOM-32」の発売もあり、このたび&lt;strong>新機能と改良を加えた次世代の「Nefry BT」を発表&lt;/strong>する事になりました。&lt;/p>
&lt;p>今回は新しい「Nefry BT」を使って、Amazon Dash Buttonのようにスイッチを押した時にLINEに通知が行く仕組みを作ってみます。&lt;/p>
&lt;h2 id="nefry-bt">Nefry BTとは&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/100/01_nefry.png" alt="">
Nefryシリーズは、「&lt;strong>簡単にインターネットにつながること&lt;/strong>」をテーマにしたFRISKサイズのIoTデバイスです。Nefry BTからはWi-Fiに加えてBLE（Bluetooth Low Energy）に対応し、I/O機能も増えて開発の幅がさらに広がりました！&lt;/p>
&lt;p>ハードウェアをできるだけ意識しなくて済むよう設計され、はんだづけや複雑な接続なしで動かすことができるため、初めてハードウェアを触る方にオススメのデバイスです。&lt;/p>
&lt;h2 id="heading">作ってみる&lt;/h2>
&lt;p>今回試す流れは以下です。&lt;/p>
&lt;ul>
&lt;li>IFTTTにレシピを作成する&lt;/li>
&lt;li>開発環境（Arduino IDE）を整える&lt;/li>
&lt;li>プログラムを書き込む&lt;/li>
&lt;li>Nefry BTとIFTTTを紐付ける&lt;/li>
&lt;li>スイッチを押してLINEにメッセージを送ってみる&lt;/li>
&lt;/ul>
&lt;h3 id="heading-1">用意するもの&lt;/h3>
&lt;ul>
&lt;li>Nefry BT&lt;/li>
&lt;li>IFTTTのアカウント&lt;/li>
&lt;li>LINEのアカウント&lt;/li>
&lt;/ul>
&lt;h3 id="heading-2">筆者の環境&lt;/h3>
&lt;ul>
&lt;li>Nefry BT library Version 0.6.1&lt;/li>
&lt;li>Windows 10&lt;/li>
&lt;li>Arduino IDE 1.8.2&lt;/li>
&lt;/ul>
&lt;h4 id="heading-3">注意&lt;/h4>
&lt;p>Nefry BTは開発中のため、実際のコードや画面と異なる可能性があります。&lt;/p>
&lt;h3 id="ifttt">IFTTTにレシピを作成する&lt;/h3>
&lt;p>IFTTTは様々なWebサービス同士を簡単に連携できるサービスです。連携したものは「レシピ」と呼ばれ、自分で新しいレシピを作成することもできます。今回はNefry BTとLINEを連携するレシピを作ってみます。&lt;/p>
&lt;p>アカウントを持っていない場合は下記の記事を参考にアカウントを取得してください。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://liginc.co.jp/263899">Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>アカウントを取得したら、Nefry BTとLINEを連携させるレシピを登録していきましょう。&lt;/p>
&lt;p>IFTTTのレシピは「〇〇が起きたら△△する」というようにトリガーとアクションに分けられます。今回のトリガーは「&lt;strong>Nefry BTのスイッチをクリックしたら&lt;/strong>」、アクションは「&lt;strong>LINEに通知する&lt;/strong>」となります。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="nefry-bt-1">トリガーとNefry BTを紐付けるキーの取得&lt;/h4>
&lt;p>今回はトリガーとして自作のWebサービスを利用できる「Webhooks」を使います。&lt;/p>
&lt;p>まずはWebhooksをあとでNefry BTと紐付けるために、Secret Keyというキーを取得します。&lt;a href="https://ifttt.com/discover">IFTTT公式サイト&lt;/a>上部の「Search」から、Webhooksを検索しクリックしましょう。（&amp;ldquo;web&amp;quot;で候補に出てきます。）
&lt;img src="https://dotstud.io/img/blog/100/if1.png" alt="">&lt;/p>
&lt;p>設定ページに移動しました。このとき初めての方はこのような認証画面が表示されます。ページ中央の「Connect」をクリックしてWebhooksを有効にしましょう。
&lt;img src="https://dotstud.io/img/blog/100/if2.png" alt="">&lt;/p>
&lt;p>Settingをクリックし、移動します。
&lt;img src="https://dotstud.io/img/blog/100/if3.png" alt="">&lt;/p>
&lt;p>アカウントごとに割り当てられるSecret KeyがURLのuse/以下に記載されているのでコピーしておきます。今回の例ではSecret Keyは &lt;code>GnzpClq0nDwt4WEdTyTmt&lt;/code> の部分です。（このSecret Keyはサンプルです。既に無効になっていますので自身で取得してください。）
&lt;img src="https://dotstud.io/img/blog/100/if4.png" alt="">&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-4">トリガーの作成&lt;/h4>
&lt;p>続いてトリガーとなるWebhooksの詳細を作成します。
&lt;img src="https://dotstud.io/img/blog/100/06_ifttt5.png" alt="">
&lt;a href="https://ifttt.com/create">IFTTTのレシピ作成ページ&lt;/a>から、「+this」のリンクをクリックします。&lt;/p>
&lt;p>「Choose a service」から再度Webhooksを検索しましょう。
&lt;img src="https://dotstud.io/img/blog/100/if5.png" alt="">&lt;/p>
&lt;p>WebhooksはEventという単位でトリガーとなります。今回はEvent Nameを&amp;quot;Nefry&amp;quot;とし、「Create trigger」をクリックし作成します。Event NameはあとでNefry BTにも同じ名前で入力します。
&lt;img src="https://dotstud.io/img/blog/100/if6.png" alt="">&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-5">アクションの作成&lt;/h4>
&lt;p>最後に、トリガーが生じた時に起こすアクションを登録します。
&lt;img src="https://dotstud.io/img/blog/100/09_ifttt8.png" alt="">
「+that」のリンクをクリックして、検索欄からLINEを検索しましょう。ここでTwitterやGmailなどを選択すると、それぞれのサービスと連携させることが出来ます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/100/10_ifttt9.png" alt="">
Recipientと書かれた欄にメッセージを送るLINEの送信先を選択します。&lt;/p>
&lt;p>Messageと書かれた欄には送信するメッセージを入力します。MessageのValueにはプログラムから値を渡すことができるので、温度センサや明るさセンサなどの値をメッセージに組み込むことが可能です。写真のURLがあれば写真を送信することもできます。&lt;/p>
&lt;p>入力が完了したら、Create actionをクリックして保存します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/100/11_ifttt10.png" alt="">
最後にFinishを押し、IFTTTのレシピの作成は完了です。&lt;/p>
&lt;h3 id="arduino-ide">開発環境（Arduino IDE）を整える&lt;/h3>
&lt;p>続いてNefy BTにプログラムを書く環境を整えます。プログラムの書き込みにはArduino IDEと呼ばれるエディタを使用します。&lt;a href="https://www.arduino.cc/en/Main/Software">公式サイト&lt;/a>からダウンロードし、以下の手順でNefry BT用の設定を追加してください。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/100/12_program.png" alt="">
Arduino IDEの「環境設定」のページから、「追加のボードマネージャのURL」に以下のリンクを入力して検索します。&lt;/p>
&lt;p>&lt;code>https://nefry.studio/package_nefrybt_index.json&lt;/code>&lt;/p>
&lt;p>メニューバーの[ツール]から、[ボード] -&amp;gt; [ボードマネージャー]を選択します。選択肢に「Nefry by Nefry Community」が表示されているので、インストールします。
&lt;img src="https://dotstud.io/img/blog/100/13_library.png" alt="">&lt;/p>
&lt;p>これでプログラムを書き込む準備が整いました。&lt;/p>
&lt;h3 id="heading-6">プログラムを書き込む&lt;/h3>
&lt;p>以下はNefry BTに搭載されている「スイッチ」を押したときにIFTTTのEventを呼ぶプログラムです。&lt;/p>
&lt;p>Arduino IDEを開き、以下のコードを貼り付けます。（//以降の部分はコメントです。）&lt;/p>
&lt;pre>&lt;code class="language-cpp:" data-lang="cpp:">#include &amp;lt;Nefry.h&amp;gt;
#include &amp;lt;NefryIFTTT.h&amp;gt;
String Event, SecretKey;
int counter =0; //送信データのカウンタ
void setup() {
Nefry.setStoreTitle(&amp;quot;SecretKey&amp;quot;,0); //Nefry DataStoreのタイトルを指定
Nefry.setStoreTitle(&amp;quot;Event&amp;quot;,1); //Nefry DataStoreのタイトルを指定
SecretKey = Nefry.getStoreStr(0); //Nefry DataStoreからデータを取得
Event = Nefry.getStoreStr(1); //Nefry DataStoreからデータを取得
Nefry.enableSW(); //SW有効化
}
void loop() {
if (Nefry.readSW()) { //SWを押した時
counter++; //送信回数加算
bool sendData = IFTTT.send(Event, SecretKey,&amp;quot;Nefry&amp;quot;,(String)(micros()/1000000)+&amp;quot;秒&amp;quot;,(String)counter);//IFTTTにデータを送信
//Value1:Nefry,Value2:Nefryが起動してからの秒数,Value3:送信カウンタ
if (!sendData) {//IFTTTにデータを送信が成功したか失敗したかの判定
Nefry.setLed(255, 0, 0); //Errの時、赤色点灯
}
Nefry.ndelay(1000); //送信後1秒間待つ
}
}
&lt;/code>&lt;/pre>&lt;p>貼り付けできたら[ツール] -&amp;gt; [ボード]から「Nefry BT」を選択します。Nefry BTとPCを繋ぎ、[ツール] -&amp;gt; [シリアルポート]でNefry BTのシリアルポートを選択しましょう。
&lt;img src="https://dotstud.io/img/blog/100/14_arduinoide.png" alt="">
ボードとシリアルポートを選んだらArduino IDEの左上にある「→」を押しプログラムを書き込みます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/100/15_arduinoide2.png" alt="">
「ボードへの書き込みが完了しました。」と表示されたら、Nefry BTへのプログラムの書き込みは完了です。&lt;/p>
&lt;p>最後にNefry BTにIFTTTとの連携情報を入力します。あと少しですので頑張っていきましょう！&lt;/p>
&lt;h3 id="nefry-btifttt">Nefry BTとIFTTTを紐付ける&lt;/h3>
&lt;p>Nefry BTから&amp;quot;Nefry-OOOO&amp;quot;というWi-Fiの信号が発信されているので接続します。
&lt;img src="https://dotstud.io/img/blog/100/16_wifi.png" alt="">&lt;/p>
&lt;p>接続できたらChromeやIEなどのWebブラウザで&lt;a href="http://192.168.4.1">Nefry BTのサイト&lt;/a>にアクセスしましょう。&lt;code>http://192.168.4.1&lt;/code>にアクセスするとNefry BTの設定サイトが表示されます。このページからNefry BTに関する様々な設定ができます。
&lt;img src="https://dotstud.io/img/blog/100/17_nefry.png" alt="">&lt;/p>
&lt;p>まずは「Setup WiFi」をクリックし、Wi-Fiの設定をしましょう。
&lt;img src="https://dotstud.io/img/blog/100/18_nefry.png" alt="">
接続するWi-Fiを入力して「Save」をクリックすると、Nefry BTに設定を保存＆再起動します。Wi-Fiが切断したら再接続してください。&lt;/p>
&lt;p>設定が完了したら、トップページに戻り「Data Store」のページに移動します。
&lt;img src="https://dotstud.io/img/blog/100/19_nefry.png" alt="">
SecretKeyにはWebhooksで確認した値を、EventにはLINEと連携した際に入力したEvent Name（今回は”Nefry”）を入力します。Saveをクリックし値を保存するとNefry BTが再起動します。&lt;/p>
&lt;p>いよいよNefry BTについているスイッチを押してLINEにメッセージを送ってみましょう！&lt;/p>
&lt;h3 id="line">スイッチを押してLINEにメッセージを送ってみる&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/100/20_nefry.gif" alt="">
Nefry BTのスイッチを押すとLEDの色が変わり送信を始めます。送信が完了するとLEDが水色になり、LINEに通知されました！IFTTTのサーバ状態により応答が悪い場合もありますが、その時はIFTTTのページにてリロードをすると反応してくれます。&lt;/p>
&lt;p>初回は登録が多く時間がかかりますが、今後はサクっと作れるでしょう。&lt;/p>
&lt;h2 id="heading-7">さいごに&lt;/h2>
&lt;p>半田付けや複雑な設定なしで、ハードウェアをきっかけにしてLINEへメッセージを投稿する連携をサクッと試すことができました。今回紹介したNefry BTとIFTTTの連携を応用すればTwitterやGmailなどにもメッセージを送信できます。&lt;/p>
&lt;p>リアルタイム通信が得意な「Milkcocoa」やクラウドサービスMicrosoft AzureのIoT向け機能である「Azure IoT Hub」などを使うとより幅広い開発ができるでしょう。&lt;/p>
&lt;p>今後の更新で簡単に接続できるライブラリやサンプルコードを追加していく予定です。生まれたばかりでまだまだヒヨッコですが、進化していくNefry BTを応援していただけたらと思います。&lt;/p></description></item></channel></rss>