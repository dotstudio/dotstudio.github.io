<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/series/nodejs/</link>
    <description>Recent content in Nodejs on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Wed, 07 Sep 2016 10:00:00 +0900</lastBuildDate>
    <atom:link href="https://dotstud.io/series/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pokemon GOで近くにポケモンが出たらPepperが教えてくれる仕組みをNode.jsだけで作る</title>
      <link>https://dotstud.io/blog/pepper-pokemon-go-notice/</link>
      <pubDate>Wed, 07 Sep 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/pepper-pokemon-go-notice/</guid>
      <description>

<p>こんにちは、dotstduio代表ののびすけです。</p>

<p>みなさん、Pokemon GOやってますか?　僕はけっこう作業ゲーな気がしていて、最近飽き気味だったんですよね。現在だとLv.18で止まってしまっている中途半端組です。</p>

<p>そんな感じなので、僕は「ポケモンが出てきたら教えてくれる仕組み」があるといいなって思い、PepperとPokemon GOを繋げて <strong>近くにポケモンが出現したら通知する</strong> 仕組みを作ってみました。</p>

<p>Slack通知とかはたまに記事で見かけたんですけど、たまたまPepperが部屋にいたので活用することにしました。なかなかPepperが手元にないかと思いますが、試せる人は試してみてください（笑）</p>

<h2 id="全体像と開発手順">全体像と開発手順</h2>

<p><img src="/img/blog/017/01_structure.png" alt="" /></p>

<p>やったことは次の3つです。</p>

<ul>
<li>1. Node.jsを使い、Pokemon GOのAPIから近くのポケモンを探す</li>
<li>2. ポケモンを見つけたら、ポケモン名を日本語変換する</li>
<li>3. Nightmareを使い、Pepperを制御するブラウザアプリを自動制御して喋らせる</li>
</ul>

<p>このときはMac OS 10.11のNode.js6.3.1で試しました。ポイントは Choregraphe（Pepperのアプリ開発者向けアプリ）を使わずに <strong>Node.jsだけで完結する</strong> ところだと思います。単純に喋らせるだけならChoregraphe使わなくてもなんとかなりますね。</p>

<p>※きちんと開発をするならChoregrapheが必須です。</p>

<script async class="speakerdeck-embed" data-id="93daabf2deac4ac68cb016ee2d2109d9" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>先日Amazonで開催したIoTの勉強会「IoTLT」で話した内容をまとめました。そのときのスライドも貼っておくので、参考までにご覧ください。完全にLT駆動開発です（笑）</p>

<h2 id="作り方">作り方</h2>

<h3 id="1-pokemon-g0のapiをnode-jsで使う">1. Pokemon G0のAPIをNode.jsで使う</h3>

<p>npmでPokemon G0を調べるとちょくちょくモジュールが見つかります。中でもメンテナンスされていそうな<a href="https://www.npmjs.com/package/pokemon-go-node-api">node-pokemon-go-api</a>を使いました。</p>

<p>まずは<code>ポケモンが出たら〇〇する</code>トリガーを作ります。以下のコマンドでインストールしましょう。</p>

<pre><code>npm install pokemon-go-node-api --save
</code></pre>

<p>実際に使う部分は、以下の僕のQiitaの記事を参考に進めてください。</p>

<p><a href="http://qiita.com/n0bisuke/items/31daa590056d3d5d8336">Pokemon GOで近くにポケモンが出たら〇〇するトリガーをNode.jsで作る</a></p>

<h4 id="index-js">index.js</h4>

<pre><code>'use strict';

const PokemonGO = require('pokemon-go-node-api');

// using var so you can login with multiple users
let a = new PokemonGO.Pokeio();

//Set environment variables or replace placeholder text
let location = {
    type: 'name',
    name: 'Tokyo/Taito-ku' //東京都台東区
};

let username = '登録したGoogleアカウントのメールアドレス';
let password = '登録したGoogleアカウントのパスワード';
let provider = 'google';

a.init(username, password, location, provider, (err) =&gt; {
    if (err) throw err;

    console.log('1[i] Current location: ' + a.playerInfo.locationName);
    console.log('1[i] lat/long/alt: : ' + a.playerInfo.latitude + ' ' + a.playerInfo.longitude + ' ' + a.playerInfo.altitude);

    a.GetProfile((err, profile) =&gt; {
        if (err) throw err;

        console.log('1[i] Username: ' + profile.username);
        console.log('1[i] Poke Storage: ' + profile.poke_storage);
        console.log('1[i] Item Storage: ' + profile.item_storage);

        let poke = 0;
        if (profile.currency[0].amount) {
            poke = profile.currency[0].amount;
        }

        console.log('1[i] Pokecoin: ' + poke);
        console.log('1[i] Stardust: ' + profile.currency[1].amount);

        setInterval(() =&gt; {
            a.Heartbeat((err,hb)=&gt;{
                if(err) {
                    console.log(err);
                }

                let texts = '';
                for (var i = hb.cells.length - 1; i &gt;= 0; i--) {
                    if(hb.cells[i].NearbyPokemon[0]) {
                        //console.log(a.pokemonlist[0])
                        let pokemon = a.pokemonlist[parseInt(hb.cells[i].NearbyPokemon[0].PokedexNumber)-1];
                        console.log('1[+] There is a ' + pokemon.name + ' near.');
                        //この辺にWebhookとか噛ませればSlack通知とかも余裕ですね。
                    }
                }
            });
        }, 5000);

    });
});
</code></pre>

<p>これを実行してみると、</p>

<p><img src="/img/blog/017/02_result.png" alt="" /></p>

<p>一番下に <strong>There is a Pinsir near.</strong> と表示されているのがわかると思います。
どうやらPinsirが近くにいるようです。</p>

<h3 id="2-気になる人は-ポケモン名を日本語化する">2. （気になる人は）ポケモン名を日本語化する</h3>

<p>ここで「Pinsirってなんだ」という話になるんですけど、ググったらカイロスの英語名らしいですね。</p>

<p><img src="/img/blog/017/03_pinsir.png" alt="" /></p>

<p><a href="https://gist.github.com/PonDad/93922f63c3143489e30c3716d3d176d2">GitHubGistのPonDad氏</a>が、ポケモンの英語名と日本語名を変換するデータをJSONとして公開していたので、ありがたく使いましょう。index.jsの<a href="https://github.com/n0bisuke/pepper_pokemon_go/blob/master/index.js#L54-L56">ここ</a>で使ってます。</p>

<h3 id="3-nightmareでpepperを喋らせる">3. NightmareでPepperを喋らせる</h3>

<p>Nightmareはブラウザの自動テストをおこなうツールです。ログイン処理や、ボタンを押した際の挙動などを自動テストする際に使います。PhantomJSが有名ですが、そのラッパーライブラリでかなり使いやすいです。</p>

<p>サンプルなどを見ると、Nightmareを使うときは<a href="https://www.npmjs.com/package/vo">vo</a>というモジュールを使ってGeneratorで書くのが主流っぽいです。以下のコマンドでインストールしてください。Nightmareはv2からElectronベースになったということもあり、インストールには結構時間がかかります。</p>

<pre><code>npm i nightmare vo --save
</code></pre>

<p>以下のQiitaの記事も参考にしてみてください。</p>

<p><a href="http://qiita.com/n0bisuke/items/8a7a52321380e5cf0379">Nightmareがv2(Electronベース)になり、使いやすく感動したのでLIGブログのPV/UUデータ取得を自動化してみた。
</a></p>

<p><img src="/img/blog/017/04_pepper_controller.png" alt="" /></p>

<p>接続先は<a href="https://github.com/kuetsuhara">kuetsuharaさん</a>の<a href="http://kuetsuhara.github.io/pepperConnect.html">ペッパーコントローラーブラウザアプリ</a>です。このブラウザアプリは同じIP内にあるPCからなら、ブラウザだけでPepperをある程度操作できるかなり便利なものです。</p>

<h4 id="pepper-connect-js">pepper_connect.js</h4>

<pre><code>'use strict'

const Nightmare = require('nightmare');
const vo = require('vo');
const IP = '192.168.179.29';

function pepper(text) {
    vo(function* () {
    const nightmare = Nightmare({ show: true });
    const link = yield nightmare
        .goto('http://kuetsuhara.github.io/pepperConnect.html')
        .insert('input#pepperIP','')
        .type('input#pepperIP', ip)
        .click('button[onclick=&quot;connect()&quot;]')
        .wait(4000)
        .type('input#sayText', text)
        .click('button[onclick=&quot;say()&quot;]')
        .evaluate(() =&gt; {
            return document.getElementsByClassName('ac-21th')[0].href;
        });
    yield nightmare.end();
        return link;
    })((err, result) =&gt; {
        if (err) return console.log(err);
        console.log(result);
    });   
}

pepper(&quot;こんばんわ&quot;);

//モジュール化する場合
//module.exports = pepper;
</code></pre>

<p>こんな感じで記述しました。192.168.179.29がPepperのIPになります。</p>

<p>ちなみにPepperのIPアドレスは、タブレットの裏側の胸にあるボタンを押すとPepperが喋って教えてくれます。</p>

<h3 id="実行して試してみる">実行して試してみる</h3>

<p>ちなみに、このときはMac OS 10.11上のNode.js6.3系で試しました。</p>

<pre><code>node pepper_connect.js
</code></pre>

<p>この時点で実行すると、Nightmare経由でPepperに自動接続して、「こんばんわ」と喋ってくれると思います。</p>

<p><img src="/img/blog/017/05_result.gif" alt="" /></p>

<p><a href="https://goo.gl/photos/6GKXDMMbTGPtXf3A6">こちら</a>で実際に動いている動画を見られます。</p>

<h3 id="コードのまとめとデモ">コードのまとめとデモ</h3>

<p><a href="https://github.com/n0bisuke/pepper_pokemon_go">こちら</a>に今回使ったコードをまとめておきました。</p>

<pre><code>git clone git@github.com:n0bisuke/pepper_pokemon_go.git
cd pepper_pokemon_go
npm i
</code></pre>

<p>のあと、index.jsのユーザー名とパスワードを入力したのち</p>

<pre><code>node index.js
</code></pre>

<p>で動作すると思います。動かない場合は<a href="https://twitter.com/n0bisuke">@n0bisuke</a>まで！</p>

<h2 id="まとめ">まとめ</h2>

<p>Nightmareを使えば、Node.jsだけでも、ブラウザコントロールが可能なロボットやハードウェアの簡単な接続はできそうだなと感じました。</p>

<p>実際のところ、Pepperと同じネットワークにNode.js（とNightmare）が動く環境が必要なので、運用などは難しそうです。しかし、喋ってくれること自体は通知として気づきやすいので、かなりアリだと思っています。</p>

<p>試せる方はぜひ試してみてください！　それでは。</p>
</description>
    </item>
    
    <item>
      <title>史上初!? NodeBotsの日本向けキットを作成しました！ #nodebots</title>
      <link>https://dotstud.io/blog/nodebots-kit-guide-vol1/</link>
      <pubDate>Tue, 26 Jul 2016 14:48:32 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodebots-kit-guide-vol1/</guid>
      <description>

<p>こんにちは、dotstudio代表の<a href="https://twitter.com/n0bisuke">のびすけ</a>です。
今日は、世界で人気のNode.js/Johnny-Fiveのワークショップ「<a href="https://github.com/tableflip/nodebot-workshop">NodeBot Workshop</a>」で使うアイテムをまとめた、「<strong>NodeBot Workshop Kit JP ver</strong>」というキットを作ったのでその紹介をします。
また、 NodeBot Workshopの1問目の配線解説も本記事で行いますので、ぜひ挑戦してみてください！</p>

<p><strong>NodeBot Workshop向けにカスタマイズされたキットはおそらく世界初です！</strong></p>

<p>NodeBotsの入門は<a href="http://liginc.co.jp/283711">こちらの記事(Webな人でもハードウェア制御が簡単に！Node.jsでJavaScript Roboticsを楽しもう #nodebots_jp)</a>を参照してください！</p>

<blockquote>
<p>購入ページは<a href="https://dotstud.io/projects/nodebots-seeeduino-for-beginners/">こちら</a>になります。</p>
</blockquote>

<h2 id="iotやるときの-まずはじめに何を買えばいいか分からない-を解消">IoTやるときの”まずはじめに何を買えばいいか分からない”を解消</h2>

<p>　入門者にとって最初に何を買えばいいのかって分からないんですよね。NodeBot Workshopでもプログラムまでは書くことができるけど、実際に電子工作をするフェーズで何を準備すればいいのか分からないという人がけっこういました。</p>

<p><a href="http://nodebots.io/">http://nodebots.io/</a> にも掲載されてますが、&rdquo;最初にこれを買うといいよ&rdquo;というキットは海外ではいくつか存在します。
<img src="/img/blog/004/01_nodebots_kit.png" alt="" /></p>

<p>ただこれらは</p>

<ul>
<li><strong>国際輸送になるため、手元に届くまでにお金と時間がけっこうかかってしまう</strong></li>
<li><strong>利用されているマイコンボードは日本の電波法の認証(技摘)が通っていないものもある</strong></li>
</ul>

<p><strong>などの問題点</strong> がありました。そのため、日本国内でNodeBot WorkshopやJohnny-Fiveに対応しているマイコンボードやセンサーの代替品を探して利用するのが早いし確実なのですが、これも手間と時間が掛かります。</p>

<p>そこで僕たちの方でNodeBot WorkshopやJohnny-Fiveに対応しているキットを作ることにして、今回のキット開発に至りました。
<img src="/img/blog/004/02_kitpackage.png" alt="" /></p>

<p>今回用意したキットはプロトタイピングボードも含めてキット化してあるので、 <strong>とりあえずこれを買ってNodeBot Workshopをやれば入門できる</strong>状態になります。</p>

<p><code>試したい！</code>と思った時にサクッと試せるキットになっています。</p>

<h2 id="nodebot-workshop-kit-jp-ver-の中身を解説">「NodeBot Workshop Kit JP ver」の中身を解説！</h2>

<p>実際に中身を見てみましょう。</p>

<h3 id="nodebot-workshopの設問">NodeBot Workshopの設問</h3>

<p>準備は<a href="http://liginc.co.jp/283711">こちらの記事</a>を参考にしてください。</p>

<p>インストールするとNodeBot Workshopコマンドが使えるようになります。</p>

<pre><code class="language-bash">$ nodebot-workshop
</code></pre>

<p><img src="/img/blog/004/03_screenshot.png" alt="" /></p>

<p>ここまで動くようにしておきましょう。
各問題のタイトルと内容は以下になります。</p>

<table>
<thead>
<tr>
<th align="left">番号</th>
<th align="left">タイトル</th>
<th align="left">タイトル(日本語)</th>
<th align="left">概要</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">1問</td>
<td align="left">Blink Blink</td>
<td align="left">Lチカ</td>
<td align="left">LEDをチカチカ点滅させよう</td>
</tr>

<tr>
<td align="left">2問</td>
<td align="left">Servo Wave</td>
<td align="left">サーボウェーブ</td>
<td align="left">サーボモータを動かそう</td>
</tr>

<tr>
<td align="left">3問</td>
<td align="left">Spin Moter Spin</td>
<td align="left">くるくるモーター回転</td>
<td align="left">DCモータを動かそう</td>
</tr>

<tr>
<td align="left">4問</td>
<td align="left">Light Switch</td>
<td align="left">ライトスイッチ</td>
<td align="left">スイッチとLEDを連動させよう</td>
</tr>

<tr>
<td align="left">5問</td>
<td align="left">Street Lamp</td>
<td align="left">ストリートランプ</td>
<td align="left">照度センサとLEDを連動させよう</td>
</tr>

<tr>
<td align="left">6問</td>
<td align="left">Ping Bell</td>
<td align="left">ピングベル</td>
<td align="left">メッセージを受信すると音が鳴るUDPサーバーを作ろう</td>
</tr>

<tr>
<td align="left">7問</td>
<td align="left">Robot Arm</td>
<td align="left">ロボットアーム</td>
<td align="left">サーボモータとポテンショメータを連動させよう</td>
</tr>

<tr>
<td align="left">8問</td>
<td align="left">Remote Temperature</td>
<td align="left">遠隔地の温度</td>
<td align="left">温度を教えてくれるRPCサーバーを作ろう</td>
</tr>

<tr>
<td align="left">9問</td>
<td align="left">Fire Alarm</td>
<td align="left">火災報知器</td>
<td align="left">温度センサとブザーを使って火災報知器を作ろう</td>
</tr>
</tbody>
</table>

<h3 id="キットの内容物">キットの内容物</h3>

<p>こちらの写真がキットの中身です。パーツの名前と見た目が一致しない人は要確認です。</p>

<p><img src="/img/blog/004/04_nodebotskit.png" alt="" /></p>

<p>各設問でどのパーツを利用するかを以下の表にまとめました。困ったときは確認しましょう。</p>

<table>
<thead>
<tr>
<th align="left">ID</th>
<th align="left">NAME</th>
<th align="left">利用する問題番号</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">a</td>
<td align="left"><a href="http://www.seeedstudio.com/wiki/Seeeduino_v4.2">Seeeduino v4.2</a></td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">b</td>
<td align="left">USBmicroB ケーブル</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">c</td>
<td align="left">ブレッドボード</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">d</td>
<td align="left">ジャンプワイヤ</td>
<td align="left">1~9</td>
</tr>

<tr>
<td align="left">e</td>
<td align="left">カーボン抵抗 330Ω</td>
<td align="left">1,4,5,9</td>
</tr>

<tr>
<td align="left">f</td>
<td align="left">カーボン抵抗 10kΩ</td>
<td align="left">4,5,9</td>
</tr>

<tr>
<td align="left">g</td>
<td align="left">LED</td>
<td align="left">1,4,5,9</td>
</tr>

<tr>
<td align="left">h</td>
<td align="left">マイクロサーボモータ</td>
<td align="left">2,7</td>
</tr>

<tr>
<td align="left">i</td>
<td align="left">小型DCモータ</td>
<td align="left">3</td>
</tr>

<tr>
<td align="left">j</td>
<td align="left">タクトスイッチ</td>
<td align="left">4,9</td>
</tr>

<tr>
<td align="left">k</td>
<td align="left">CdSセル 1MΩ(照度センサ)</td>
<td align="left">5</td>
</tr>

<tr>
<td align="left">l</td>
<td align="left">半固定抵抗 (ポテンショメータ)</td>
<td align="left">7</td>
</tr>

<tr>
<td align="left">n</td>
<td align="left">温度センサ</td>
<td align="left">8,9</td>
</tr>

<tr>
<td align="left">m</td>
<td align="left">圧電ブザー</td>
<td align="left">6,9</td>
</tr>
</tbody>
</table>

<h3 id="1問目のlチカの回路図解説">1問目のLチカの回路図解説</h3>

<p>1秒ごとにLチカさせるプログラムを書く問題です。問題文は<a href="https://github.com/tableflip/nodebot-workshop/blob/master/exercises/blink_blink/problem.ja.md">こちら</a>をどうぞ。</p>

<h4 id="準備物">準備物</h4>

<p>先ほどの表のIDと照らし合わせて見てみましょう。
ちなみにすべての問題でa~dは利用します。</p>

<ul>
<li>a: Seeeduino</li>
<li>b: USBmicroB ケーブル</li>
<li>c: ブレッドボード</li>
<li>d: ジャンプワイヤ x 2</li>
<li>e: カーボン抵抗 330Ω</li>
<li>g: LED</li>
</ul>

<h4 id="配線">配線</h4>

<p>1問目はLEDを点灯させることが目的です。SeeeduinoとLEDを線でつないでみましょう。</p>

<p><img src="/img/blog/004/05_fritzing.png" alt="" /></p>

<h4 id="実行">実行</h4>

<p>プログラムを作成し、配線も行ったら実際に<code>nodeコマンド</code>で実行してみましょう。</p>

<p><img src="/img/blog/004/06_exec.gif" alt="" /></p>

<p>プログラムと配線が成功していれば、こんな感じでLEDが点滅します。</p>

<p>どうでしょう、できましたか?</p>

<h2 id="おわりに">おわりに</h2>

<p>NodeBotsでイベントを開催したり、こういった記事を書いたりしてますが、JavaScript Robotics界がもっと盛り上がって欲しいという気持ちがあります。
ブラウザの実装はやはりJavaScriptなので、JavaScriptでハードウェア制御できるとWeb側もHW側も共通言語を使うことができて、JSerにはかなり楽しい世界になるのではないでしょうか？</p>

<p>今回のNodeBot Workshop Kitを使うことで、そういったJavaScript好きな人がハードウェアやセンサー選びでつまづかないためのものになればいいなと思っています。
イベントなどでも販売していきますが、とりあえずはオンラインで買えるようにしてあります。</p>

<p><center>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">まぁ僕がいたらせっかくのオフィスもダーツ仕様になりますよね <a href="https://t.co/bej7l8QBCE">pic.twitter.com/bej7l8QBCE</a></p>&mdash; chachamaru (@chachmaru) <a href="https://twitter.com/chachmaru/status/757848176657260544">2016年7月26日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</center></p>

<p>こんな感じ(笑)で丁寧に梱包してますのでご興味を持った方がいれば是非試してみてください！</p>

<blockquote>
<p>購入ページは<a href="https://dotstud.io/projects/nodebots-seeeduino-for-beginners/">こちら</a>になります。</p>
</blockquote>
</description>
    </item>
    
    <item>
      <title>今週末はInternational NodeBots Dayですよ！( #NodeBots vol2のイベレポと次回告知 )</title>
      <link>https://dotstud.io/blog/nodebots-handson-report-vol2/</link>
      <pubDate>Mon, 25 Jul 2016 15:31:20 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodebots-handson-report-vol2/</guid>
      <description>

<p>こんにちは、のびすけです。</p>

<p>時間が経ってしまいましたが、NodeBotsハンズオンのレポートをします！ <a href="http://nodebots.connpass.com/event/34073/">明日もイベントがある</a>のでその告知もさせてください（笑）</p>

<h2 id="nodebotsって">NodeBotsって?</h2>

<p>さて、みなさんは「NodeBots」という言葉を知ってますか？</p>

<p><a href="http://nodebots.io/">http://nodebots.io/</a></p>

<p><img src="/img/blog/003/01_nodebots.png" alt="" /></p>

<p>NodeBotsとは、Node.jsでハードウェアを制御するイベントやコミュニティの総称です。世界的に開催されています。</p>

<p>僕が以前書いた、<a href="http://liginc.co.jp/283711">Webな人でもハードウェア制御が簡単に！Node.jsでJavaScript Roboticsを楽しもう #nodebots_jp</a>を読んでもらえると早いんですけど、いろんな場所でNodeBotsについては書き続けます（笑）</p>

<h2 id="nodebots-johnny-fiveハンズオン">NodeBots Johnny-Fiveハンズオン</h2>

<p><img src="/img/blog/003/02_op.png" alt="" /></p>

<p><a href="http://johnny-five.io/">Johnny-Five</a>というNode.jsで、マイコンボード「Arduino」を制御するライブラリがあります。各国では、このライブラリを使ってNodeBotsのイベントを開催することが多いようです。</p>

<h3 id="dmm-make-akibaを会場にvol2開催">DMM.make AKIBAを会場にvol2開催</h3>

<p><img src="/img/blog/003/03_kamimura.png" alt="" /></p>

<p><a href="http://nodebots.connpass.com/event/31580/">vol2</a>は<a href="https://akiba.dmm-make.com/">DMM.Make AKIBA</a>を会場に実施しました。 DMMの上村さんからDMM.make AKIBAの会場説明でスタートです。大半の方が初めて来たとのことで、会場に興味持っている人も多い印象でした。</p>

<p>さて、<strong>ハンズオンでは人によって進捗が変わるため、ゴールをいくつか設定</strong> するようにしました。</p>

<p>&nbsp;
<center>
<blockquote class="twitter-tweet" data-lang="ja">
    <p lang="ja" dir="ltr">今日の目標！ぞい！
        <a href="https://twitter.com/hashtag/nodebots_jp?src=hash">#nodebots_jp</a>
        <a href="https://t.co/k4Eky2Iz5E">pic.twitter.com/k4Eky2Iz5E</a>
    </p>&mdash; ちゃんとく (@tokutoku393) <a href="https://twitter.com/tokutoku393/status/742667503654961156">2016年6月14日</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</center></p>

<p><a href="https://github.com/tableflip/nodebot-workshop">NodeBot Workshop</a>というツールを用いてハンズオンを行うのですが、電子工作はプログラミングフェーズと工作フェーズに分かれるため</p>

<ul>
<li>NodeBot Workshopの3問目（全9問）までクリア</li>
<li>用意したパーツを使って3問目までを工作してみる</li>
<li>4問目以降もチャレンジ</li>
</ul>

<p>というような設定にしました。</p>

<p>&nbsp;
<img src="/img/blog/003/04_look.png" alt="" /></p>

<p>分からない方にはメンターの方がサポートをして、各々が進めるスタイルのもくもく会に近いタイプのハンズオンです。（ちなみにNodeSchool系のイベントはだいたいこんな感じです）</p>

<p>JavaScriptを使う前提+そこまでJavaScript分からなくても聞けばなんとかなるんじゃないかと思ってた節はあるのですが、参加者の方が書いてくれた<a href="http://wp.pxdesign.jp/2016/06/15/nodebots-johnny-five-arduino-servo/">レポート記事</a>を見る限り、JavaScriptをほとんど触ったことのない初心者だと少しハードルが高かったようでした（苦笑）</p>

<p>これはなんとかしないといけないですね。もう少し丁寧な解説記事などを用意したほうが良さそうだなと思いつつ、とりあえず
<a href="https://www.github.com/sethvincent/javascripting">NodeSchoolのJavaScriptカリキュラム</a>をお勧めしておきます。</p>

<p>少しは敷居を下げてくれるかもしれません。</p>

<p>&nbsp;
<img src="/img/blog/003/05_toast.png" alt="" /></p>

<p>頭を使ったあとは、懇親会で感想などをわいわい言い合いました。</p>

<h3 id="感想など">感想など</h3>

<p>主催側の感触なのですが、だいたい2問目まではみんな動かすことができていました。「JSを初めて触った！」という人でも3問目には取り組めてた印象です。2時間弱程度の短い時間にしてはいい進み具合だった気もしてますが、もっと丁寧なサポートも必要だなと感じました。</p>

<p><strong>Johnny-FiveのメリットはJavaScriptで書けてWebとの接続が行いやすい</strong> ところだと思っているので、ハードウェア側だけではなく、 <strong>Milkcocoaを使ったりしてWebと繋げるやり方も紹介したらもっと楽しくなる</strong> 気がしました。</p>

<p>とりあえず、みんな笑顔で終われていたので大満足です。（けっこう大事）</p>

<h2 id="次回は-7-26-明日">次回は <sup>7</sup>&frasl;<sub>26</sub> （明日!）</h2>

<p>さて、こんなイベントを毎月やってるのですが、次回はなんと <sup>7</sup>&frasl;<sub>26</sub> （明日）です（笑）</p>

<p><img src="/img/blog/003/06_vol3.png" alt="" /></p>

<p><a href="http://nodebots.connpass.com/event/34073/">connpassのページ</a>から応募できるので是非今からでも参加登録してください！ :)</p>

<ul>
<li><strong>Web界隈の人でハードウェアや電子工作が気になってる人</strong></li>
<li><strong>ハードウェア界隈の人でJavaScriptが気になってる人</strong></li>
<li><strong>その他IoTとか興味ある人</strong></li>
</ul>

<p>が主な対象ですので、当てはまる！って人は是非お越しください!</p>

<h2 id="そして週末-7-30-土-は全世界同時開催のinternational-nodebots-day">そして週末 <sup>7</sup>&frasl;<sub>30</sub> （土）は全世界同時開催のInternational NodeBots Day!!</h2>

<p><img src="/img/blog/003/07_nodebots_day.png" alt="" /></p>

<p><sup>7</sup>&frasl;<sub>30</sub> には全世界同時開催のイベントである<a href="https://github.com/nodebots/nodebotsday">NodeBots Day</a>が開催されます。</p>

<p>東京イベントとしてNodeBots Day Tokyoも開催されますので、是非こちらもご参加ください!</p>

<p><a href="http://nodebots.connpass.com/event/35559/">http://nodebots.connpass.com/event/35559/</a></p>

<p>それではイベントでお会いしましょう！</p>
</description>
    </item>
    
  </channel>
</rss>