<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/series/nodejs/</link>
    <description>Recent content in Nodejs on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <lastBuildDate>Wed, 05 Oct 2016 10:00:00 +0900</lastBuildDate>
    <atom:link href="https://dotstud.io/series/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node.jsでコマンドラインツール作るときに使いやすいreadline-sync</title>
      <link>https://dotstud.io/blog/nodejs-npm-readline-sync/</link>
      <pubDate>Wed, 05 Oct 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodejs-npm-readline-sync/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://dotstud.io/members/n0bisuke/&#34;&gt;のびすけ&lt;/a&gt;です。
&lt;a href=&#34;https://dotstud.io/series/nodejs/&#34;&gt;Node.js Magazine&lt;/a&gt;という連載を作ったのでNode.js系のTipsを紹介していく予定です。&lt;/p&gt;

&lt;p&gt;今日はNode.jsでコマンドラインツールを作る際に役立つreadline-syncというパッケージを紹介します。&lt;/p&gt;

&lt;p&gt;実際にサンプルを動かして見ましょう。&lt;/p&gt;

&lt;h2 id=&#34;執筆時点のマシンスペック&#34;&gt;執筆時点のマシンスペック&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;macOS Sierra (v10.12)&lt;/li&gt;
&lt;li&gt;Node.js v6.6.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;何か不具合があったときに参照してください。&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;URL: &lt;a href=&#34;https://www.npmjs.com/package/readline-sync&#34;&gt;https://www.npmjs.com/package/readline-sync&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i readline-sync
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サンプルを動かしてみる&#34;&gt;サンプルを動かしてみる&lt;/h2&gt;

&lt;p&gt;まずは基本的なサンプルです。&lt;code&gt;.question()&lt;/code&gt;で質問して入力結果をそのまま変数に入れ込めます。このサンプルでいうと&lt;code&gt;userName&lt;/code&gt;と&lt;code&gt;favFood&lt;/code&gt;の変数に入力した値が入ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
const readlineSync = require(&#39;readline-sync&#39;);

let userName = readlineSync.question(&#39;あなたの名前は? &#39;);
console.log(`-&amp;gt;こんにちは ${userName}!`);

let favFood = readlineSync.question(&#39;好きな食べ物は? &#39;, {hideEchoBack: true});
console.log(`-&amp;gt;${userName}は${favFood}が好きなんだね!`);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;{hideEchoBack: true}&lt;/code&gt;というオプションをつけると入力時は&lt;code&gt;*&lt;/code&gt;で表示されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/01_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;選択肢を出して選ばせる&#34;&gt;選択肢を出して選ばせる&lt;/h2&gt;

&lt;p&gt;選択肢を提示してユーザーに選ばせる方法もよく使われます。&lt;/p&gt;

&lt;p&gt;keyInSelectメソッドを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
const readlineSync = require(&#39;readline-sync&#39;);

let animals = [&#39;のびすけ&#39;, &#39;うらら&#39;, &#39;ちゃちゃまる&#39;, &#39;うこ&#39;, &#39;ギャル電&#39;];
let index = readlineSync.keyInSelect(animals, &#39;誰に連絡しますか?&#39;);
console.log(`${animals[index]}に連絡します。`);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/02_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人の名前を選択肢して、その人に連絡をする&lt;/strong&gt;みたいなインターフェイスを作って見ました。変数がanimalsなのは気にしません。&lt;/p&gt;

&lt;h2 id=&#34;cliループでサブコマンドを作る&#34;&gt;CLIループでサブコマンドを作る&lt;/h2&gt;

&lt;p&gt;コマンド終了のタイミングをユーザーに委ねたいときに使えます。&lt;/p&gt;

&lt;p&gt;promptCLLoopメソッドで関数を引数に渡すと関数をループ実行してくれます。&lt;/p&gt;

&lt;p&gt;このサンプルだと&lt;code&gt;bye&lt;/code&gt;というサブコマンドを入力すると終了します。&lt;/p&gt;

&lt;p&gt;逆に言えば&lt;code&gt;bye&lt;/code&gt;を入力するまではずっとその他コマンドの入力を待ち受けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js

const readlineSync = require(&#39;readline-sync&#39;);
readlineSync.promptCLLoop({
  add: (target, into) =&amp;gt; {
    console.log(`${target}を${into}に追加します。`);
    // Do something...
  },
  remove: (target) =&amp;gt; {
    console.log(`${target}を削除します。`);
    // Do something...
  },
  bye: () =&amp;gt; { return true; }
});
console.log(&#39;終了します。&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/03_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; コマンド名 変数1 変数2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という入力を受け付けて紐づけられている関数の引数として変数が渡されます。&lt;/p&gt;

&lt;h2 id=&#34;キー入力でメモリから値を選んでもらう&#34;&gt;キー入力でメモリから値を選んでもらう&lt;/h2&gt;

&lt;p&gt;この表現がいいのか分からないですけど、、、見ればわかります。&lt;/p&gt;

&lt;p&gt;keyInメソッドでキー入力の待ち受けを実現しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js

const readlineSync = require(&#39;readline-sync&#39;);

const MAX = 60, MIN = 0;
let value = 30, key;
console.log(`\n\n${(new Array(20)).join(&#39; &#39;)}[Z] &amp;lt;- -&amp;gt; [X]  決定: [SPACE]\n`);
while (true) {
  console.log(&#39;\x1B[1A\x1B[K|&#39; +
    (new Array(value + 1)).join(&#39;-&#39;) + &#39;O&#39; +
    (new Array(MAX - value + 1)).join(&#39;-&#39;) + &#39;| &#39; + value);
  key = readlineSync.keyIn(&#39;&#39;,
    {hideEchoBack: true, mask: &#39;&#39;, limit: &#39;zx &#39;});
  if (key === &#39;z&#39;) { if (value &amp;gt; MIN) { value--; } }
  else if (key === &#39;x&#39;) { if (value &amp;lt; MAX) { value++; } }
  else { break; }
}
console.log(`\nあなたが決めた値: ${value}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/024/04_image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;zとxで値を調節してスペースで決定です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;簡単でしたが以上になります。&lt;/p&gt;

&lt;p&gt;いかがでしたでしょうか。
非同期が基本になっているJavaScriptでコマンドラインからの入力受付を同期的にやる場合にはかなり使いやすいパッケージだと思います。&lt;/p&gt;

&lt;p&gt;readline-syncでコマンドラインツールを作って見ましょう！&lt;/p&gt;

&lt;p&gt;もっとこっちの方がオススメだよ！ってものがあれば是非&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;@n0bisuke&lt;/a&gt;に教えてください :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pokemon GOで近くにポケモンが出たらPepperが教えてくれる仕組みをNode.jsだけで作る</title>
      <link>https://dotstud.io/blog/pepper-pokemon-go-notice/</link>
      <pubDate>Wed, 07 Sep 2016 10:00:00 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/pepper-pokemon-go-notice/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstduio代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;みなさん、Pokemon GOやってますか?　僕はけっこう作業ゲーな気がしていて、最近飽き気味だったんですよね。現在だとLv.18で止まってしまっている中途半端組です。&lt;/p&gt;

&lt;p&gt;そんな感じなので、僕は「ポケモンが出てきたら教えてくれる仕組み」があるといいなって思い、PepperとPokemon GOを繋げて &lt;strong&gt;近くにポケモンが出現したら通知する&lt;/strong&gt; 仕組みを作ってみました。&lt;/p&gt;

&lt;p&gt;Slack通知とかはたまに記事で見かけたんですけど、たまたまPepperが部屋にいたので活用することにしました。なかなかPepperが手元にないかと思いますが、試せる人は試してみてください（笑）&lt;/p&gt;

&lt;h2 id=&#34;全体像と開発手順&#34;&gt;全体像と開発手順&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/01_structure.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;やったことは次の3つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Node.jsを使い、Pokemon GOのAPIから近くのポケモンを探す&lt;/li&gt;
&lt;li&gt;2. ポケモンを見つけたら、ポケモン名を日本語変換する&lt;/li&gt;
&lt;li&gt;3. Nightmareを使い、Pepperを制御するブラウザアプリを自動制御して喋らせる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このときはMac OS 10.11のNode.js6.3.1で試しました。ポイントは Choregraphe（Pepperのアプリ開発者向けアプリ）を使わずに &lt;strong&gt;Node.jsだけで完結する&lt;/strong&gt; ところだと思います。単純に喋らせるだけならChoregraphe使わなくてもなんとかなりますね。&lt;/p&gt;

&lt;p&gt;※きちんと開発をするならChoregrapheが必須です。&lt;/p&gt;

&lt;script class=&#34;speakerdeck-embed&#34; data-id=&#34;93daabf2deac4ac68cb016ee2d2109d9&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;先日Amazonで開催したIoTの勉強会「IoTLT」で話した内容をまとめました。そのときのスライドも貼っておくので、参考までにご覧ください。完全にLT駆動開発です（笑）&lt;/p&gt;

&lt;h2 id=&#34;作り方&#34;&gt;作り方&lt;/h2&gt;

&lt;h3 id=&#34;1-pokemon-g0のapiをnode-jsで使う&#34;&gt;1. Pokemon G0のAPIをNode.jsで使う&lt;/h3&gt;

&lt;p&gt;npmでPokemon G0を調べるとちょくちょくモジュールが見つかります。中でもメンテナンスされていそうな&lt;a href=&#34;https://www.npmjs.com/package/pokemon-go-node-api&#34;&gt;node-pokemon-go-api&lt;/a&gt;を使いました。&lt;/p&gt;

&lt;p&gt;まずは&lt;code&gt;ポケモンが出たら〇〇する&lt;/code&gt;トリガーを作ります。以下のコマンドでインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install pokemon-go-node-api --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際に使う部分は、以下の僕のQiitaの記事を参考に進めてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/31daa590056d3d5d8336&#34;&gt;Pokemon GOで近くにポケモンが出たら〇〇するトリガーをNode.jsで作る&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;index-js&#34;&gt;index.js&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;

const PokemonGO = require(&#39;pokemon-go-node-api&#39;);

// using var so you can login with multiple users
let a = new PokemonGO.Pokeio();

//Set environment variables or replace placeholder text
let location = {
    type: &#39;name&#39;,
    name: &#39;Tokyo/Taito-ku&#39; //東京都台東区
};

let username = &#39;登録したGoogleアカウントのメールアドレス&#39;;
let password = &#39;登録したGoogleアカウントのパスワード&#39;;
let provider = &#39;google&#39;;

a.init(username, password, location, provider, (err) =&amp;gt; {
    if (err) throw err;

    console.log(&#39;1[i] Current location: &#39; + a.playerInfo.locationName);
    console.log(&#39;1[i] lat/long/alt: : &#39; + a.playerInfo.latitude + &#39; &#39; + a.playerInfo.longitude + &#39; &#39; + a.playerInfo.altitude);

    a.GetProfile((err, profile) =&amp;gt; {
        if (err) throw err;

        console.log(&#39;1[i] Username: &#39; + profile.username);
        console.log(&#39;1[i] Poke Storage: &#39; + profile.poke_storage);
        console.log(&#39;1[i] Item Storage: &#39; + profile.item_storage);

        let poke = 0;
        if (profile.currency[0].amount) {
            poke = profile.currency[0].amount;
        }

        console.log(&#39;1[i] Pokecoin: &#39; + poke);
        console.log(&#39;1[i] Stardust: &#39; + profile.currency[1].amount);

        setInterval(() =&amp;gt; {
            a.Heartbeat((err,hb)=&amp;gt;{
                if(err) {
                    console.log(err);
                }

                let texts = &#39;&#39;;
                for (var i = hb.cells.length - 1; i &amp;gt;= 0; i--) {
                    if(hb.cells[i].NearbyPokemon[0]) {
                        //console.log(a.pokemonlist[0])
                        let pokemon = a.pokemonlist[parseInt(hb.cells[i].NearbyPokemon[0].PokedexNumber)-1];
                        console.log(&#39;1[+] There is a &#39; + pokemon.name + &#39; near.&#39;);
                        //この辺にWebhookとか噛ませればSlack通知とかも余裕ですね。
                    }
                }
            });
        }, 5000);

    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行してみると、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/02_result.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一番下に &lt;strong&gt;There is a Pinsir near.&lt;/strong&gt; と表示されているのがわかると思います。
どうやらPinsirが近くにいるようです。&lt;/p&gt;

&lt;h3 id=&#34;2-気になる人は-ポケモン名を日本語化する&#34;&gt;2. （気になる人は）ポケモン名を日本語化する&lt;/h3&gt;

&lt;p&gt;ここで「Pinsirってなんだ」という話になるんですけど、ググったらカイロスの英語名らしいですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/03_pinsir.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/PonDad/93922f63c3143489e30c3716d3d176d2&#34;&gt;GitHubGistのPonDad氏&lt;/a&gt;が、ポケモンの英語名と日本語名を変換するデータをJSONとして公開していたので、ありがたく使いましょう。index.jsの&lt;a href=&#34;https://github.com/n0bisuke/pepper_pokemon_go/blob/master/index.js#L54-L56&#34;&gt;ここ&lt;/a&gt;で使ってます。&lt;/p&gt;

&lt;h3 id=&#34;3-nightmareでpepperを喋らせる&#34;&gt;3. NightmareでPepperを喋らせる&lt;/h3&gt;

&lt;p&gt;Nightmareはブラウザの自動テストをおこなうツールです。ログイン処理や、ボタンを押した際の挙動などを自動テストする際に使います。PhantomJSが有名ですが、そのラッパーライブラリでかなり使いやすいです。&lt;/p&gt;

&lt;p&gt;サンプルなどを見ると、Nightmareを使うときは&lt;a href=&#34;https://www.npmjs.com/package/vo&#34;&gt;vo&lt;/a&gt;というモジュールを使ってGeneratorで書くのが主流っぽいです。以下のコマンドでインストールしてください。Nightmareはv2からElectronベースになったということもあり、インストールには結構時間がかかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i nightmare vo --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のQiitaの記事も参考にしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/8a7a52321380e5cf0379&#34;&gt;Nightmareがv2(Electronベース)になり、使いやすく感動したのでLIGブログのPV/UUデータ取得を自動化してみた。
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/04_pepper_controller.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接続先は&lt;a href=&#34;https://github.com/kuetsuhara&#34;&gt;kuetsuharaさん&lt;/a&gt;の&lt;a href=&#34;http://kuetsuhara.github.io/pepperConnect.html&#34;&gt;ペッパーコントローラーブラウザアプリ&lt;/a&gt;です。このブラウザアプリは同じIP内にあるPCからなら、ブラウザだけでPepperをある程度操作できるかなり便利なものです。&lt;/p&gt;

&lt;h4 id=&#34;pepper-connect-js&#34;&gt;pepper_connect.js&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;

const Nightmare = require(&#39;nightmare&#39;);
const vo = require(&#39;vo&#39;);
const IP = &#39;192.168.179.29&#39;;

function pepper(text) {
    vo(function* () {
    const nightmare = Nightmare({ show: true });
    const link = yield nightmare
        .goto(&#39;http://kuetsuhara.github.io/pepperConnect.html&#39;)
        .insert(&#39;input#pepperIP&#39;,&#39;&#39;)
        .type(&#39;input#pepperIP&#39;, ip)
        .click(&#39;button[onclick=&amp;quot;connect()&amp;quot;]&#39;)
        .wait(4000)
        .type(&#39;input#sayText&#39;, text)
        .click(&#39;button[onclick=&amp;quot;say()&amp;quot;]&#39;)
        .evaluate(() =&amp;gt; {
            return document.getElementsByClassName(&#39;ac-21th&#39;)[0].href;
        });
    yield nightmare.end();
        return link;
    })((err, result) =&amp;gt; {
        if (err) return console.log(err);
        console.log(result);
    });   
}

pepper(&amp;quot;こんばんわ&amp;quot;);

//モジュール化する場合
//module.exports = pepper;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで記述しました。192.168.179.29がPepperのIPになります。&lt;/p&gt;

&lt;p&gt;ちなみにPepperのIPアドレスは、タブレットの裏側の胸にあるボタンを押すとPepperが喋って教えてくれます。&lt;/p&gt;

&lt;h3 id=&#34;実行して試してみる&#34;&gt;実行して試してみる&lt;/h3&gt;

&lt;p&gt;ちなみに、このときはMac OS 10.11上のNode.js6.3系で試しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node pepper_connect.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時点で実行すると、Nightmare経由でPepperに自動接続して、「こんばんわ」と喋ってくれると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/017/05_result.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://goo.gl/photos/6GKXDMMbTGPtXf3A6&#34;&gt;こちら&lt;/a&gt;で実際に動いている動画を見られます。&lt;/p&gt;

&lt;h3 id=&#34;コードのまとめとデモ&#34;&gt;コードのまとめとデモ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/n0bisuke/pepper_pokemon_go&#34;&gt;こちら&lt;/a&gt;に今回使ったコードをまとめておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:n0bisuke/pepper_pokemon_go.git
cd pepper_pokemon_go
npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のあと、index.jsのユーザー名とパスワードを入力したのち&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で動作すると思います。動かない場合は&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;@n0bisuke&lt;/a&gt;まで！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Nightmareを使えば、Node.jsだけでも、ブラウザコントロールが可能なロボットやハードウェアの簡単な接続はできそうだなと感じました。&lt;/p&gt;

&lt;p&gt;実際のところ、Pepperと同じネットワークにNode.js（とNightmare）が動く環境が必要なので、運用などは難しそうです。しかし、喋ってくれること自体は通知として気づきやすいので、かなりアリだと思っています。&lt;/p&gt;

&lt;p&gt;試せる方はぜひ試してみてください！　それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>史上初!? NodeBotsの日本向けキットを作成しました！ #nodebots</title>
      <link>https://dotstud.io/blog/nodebots-kit-guide-vol1/</link>
      <pubDate>Tue, 26 Jul 2016 14:48:32 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodebots-kit-guide-vol1/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudio代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。
今日は、世界で人気のNode.js/Johnny-Fiveのワークショップ「&lt;a href=&#34;https://github.com/tableflip/nodebot-workshop&#34;&gt;NodeBot Workshop&lt;/a&gt;」で使うアイテムをまとめた、「&lt;strong&gt;NodeBot Workshop Kit JP ver&lt;/strong&gt;」というキットを作ったのでその紹介をします。
また、 NodeBot Workshopの1問目の配線解説も本記事で行いますので、ぜひ挑戦してみてください！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NodeBot Workshop向けにカスタマイズされたキットはおそらく世界初です！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NodeBotsの入門は&lt;a href=&#34;http://liginc.co.jp/283711&#34;&gt;こちらの記事(Webな人でもハードウェア制御が簡単に！Node.jsでJavaScript Roboticsを楽しもう #nodebots_jp)&lt;/a&gt;を参照してください！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;購入ページは&lt;a href=&#34;https://dotstud.io/projects/nodebots-seeeduino-for-beginners/&#34;&gt;こちら&lt;/a&gt;になります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;iotやるときの-まずはじめに何を買えばいいか分からない-を解消&#34;&gt;IoTやるときの”まずはじめに何を買えばいいか分からない”を解消&lt;/h2&gt;

&lt;p&gt;　入門者にとって最初に何を買えばいいのかって分からないんですよね。NodeBot Workshopでもプログラムまでは書くことができるけど、実際に電子工作をするフェーズで何を準備すればいいのか分からないという人がけっこういました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nodebots.io/&#34;&gt;http://nodebots.io/&lt;/a&gt; にも掲載されてますが、&amp;rdquo;最初にこれを買うといいよ&amp;rdquo;というキットは海外ではいくつか存在します。
&lt;img src=&#34;https://dotstud.io/img/blog/004/01_nodebots_kit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ただこれらは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;国際輸送になるため、手元に届くまでにお金と時間がけっこうかかってしまう&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利用されているマイコンボードは日本の電波法の認証(技摘)が通っていないものもある&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;などの問題点&lt;/strong&gt; がありました。そのため、日本国内でNodeBot WorkshopやJohnny-Fiveに対応しているマイコンボードやセンサーの代替品を探して利用するのが早いし確実なのですが、これも手間と時間が掛かります。&lt;/p&gt;

&lt;p&gt;そこで僕たちの方でNodeBot WorkshopやJohnny-Fiveに対応しているキットを作ることにして、今回のキット開発に至りました。
&lt;img src=&#34;https://dotstud.io/img/blog/004/02_kitpackage.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回用意したキットはプロトタイピングボードも含めてキット化してあるので、 &lt;strong&gt;とりあえずこれを買ってNodeBot Workshopをやれば入門できる&lt;/strong&gt;状態になります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;試したい！&lt;/code&gt;と思った時にサクッと試せるキットになっています。&lt;/p&gt;

&lt;h2 id=&#34;nodebot-workshop-kit-jp-ver-の中身を解説&#34;&gt;「NodeBot Workshop Kit JP ver」の中身を解説！&lt;/h2&gt;

&lt;p&gt;実際に中身を見てみましょう。&lt;/p&gt;

&lt;h3 id=&#34;nodebot-workshopの設問&#34;&gt;NodeBot Workshopの設問&lt;/h3&gt;

&lt;p&gt;準備は&lt;a href=&#34;http://liginc.co.jp/283711&#34;&gt;こちらの記事&lt;/a&gt;を参考にしてください。&lt;/p&gt;

&lt;p&gt;インストールするとNodeBot Workshopコマンドが使えるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nodebot-workshop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/004/03_screenshot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ここまで動くようにしておきましょう。
各問題のタイトルと内容は以下になります。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;番号&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;タイトル&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;タイトル(日本語)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blink Blink&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Lチカ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LEDをチカチカ点滅させよう&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Servo Wave&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;サーボウェーブ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;サーボモータを動かそう&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Spin Moter Spin&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;くるくるモーター回転&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;DCモータを動かそう&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Light Switch&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ライトスイッチ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;スイッチとLEDを連動させよう&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Street Lamp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ストリートランプ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;照度センサとLEDを連動させよう&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;6問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ping Bell&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ピングベル&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;メッセージを受信すると音が鳴るUDPサーバーを作ろう&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;7問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Robot Arm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ロボットアーム&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;サーボモータとポテンショメータを連動させよう&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;8問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Remote Temperature&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;遠隔地の温度&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;温度を教えてくれるRPCサーバーを作ろう&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;9問&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fire Alarm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;火災報知器&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;温度センサとブザーを使って火災報知器を作ろう&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;キットの内容物&#34;&gt;キットの内容物&lt;/h3&gt;

&lt;p&gt;こちらの写真がキットの中身です。パーツの名前と見た目が一致しない人は要確認です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/004/04_nodebotskit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;各設問でどのパーツを利用するかを以下の表にまとめました。困ったときは確認しましょう。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NAME&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;利用する問題番号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://www.seeedstudio.com/wiki/Seeeduino_v4.2&#34;&gt;Seeeduino v4.2&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1~9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;USBmicroB ケーブル&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1~9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ブレッドボード&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1~9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;d&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ジャンプワイヤ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1~9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;e&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;カーボン抵抗 330Ω&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1,4,5,9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;f&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;カーボン抵抗 10kΩ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4,5,9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;g&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1,4,5,9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;h&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;マイクロサーボモータ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2,7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;i&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;小型DCモータ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;j&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;タクトスイッチ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4,9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;k&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CdSセル 1MΩ(照度センサ)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;l&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;半固定抵抗 (ポテンショメータ)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;n&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;温度センサ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8,9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;m&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;圧電ブザー&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6,9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;1問目のlチカの回路図解説&#34;&gt;1問目のLチカの回路図解説&lt;/h3&gt;

&lt;p&gt;1秒ごとにLチカさせるプログラムを書く問題です。問題文は&lt;a href=&#34;https://github.com/tableflip/nodebot-workshop/blob/master/exercises/blink_blink/problem.ja.md&#34;&gt;こちら&lt;/a&gt;をどうぞ。&lt;/p&gt;

&lt;h4 id=&#34;準備物&#34;&gt;準備物&lt;/h4&gt;

&lt;p&gt;先ほどの表のIDと照らし合わせて見てみましょう。
ちなみにすべての問題でa~dは利用します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a: Seeeduino&lt;/li&gt;
&lt;li&gt;b: USBmicroB ケーブル&lt;/li&gt;
&lt;li&gt;c: ブレッドボード&lt;/li&gt;
&lt;li&gt;d: ジャンプワイヤ x 2&lt;/li&gt;
&lt;li&gt;e: カーボン抵抗 330Ω&lt;/li&gt;
&lt;li&gt;g: LED&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;配線&#34;&gt;配線&lt;/h4&gt;

&lt;p&gt;1問目はLEDを点灯させることが目的です。SeeeduinoとLEDを線でつないでみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/004/05_fritzing.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;実行&#34;&gt;実行&lt;/h4&gt;

&lt;p&gt;プログラムを作成し、配線も行ったら実際に&lt;code&gt;nodeコマンド&lt;/code&gt;で実行してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/004/06_exec.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;プログラムと配線が成功していれば、こんな感じでLEDが点滅します。&lt;/p&gt;

&lt;p&gt;どうでしょう、できましたか?&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;NodeBotsでイベントを開催したり、こういった記事を書いたりしてますが、JavaScript Robotics界がもっと盛り上がって欲しいという気持ちがあります。
ブラウザの実装はやはりJavaScriptなので、JavaScriptでハードウェア制御できるとWeb側もHW側も共通言語を使うことができて、JSerにはかなり楽しい世界になるのではないでしょうか？&lt;/p&gt;

&lt;p&gt;今回のNodeBot Workshop Kitを使うことで、そういったJavaScript好きな人がハードウェアやセンサー選びでつまづかないためのものになればいいなと思っています。
イベントなどでも販売していきますが、とりあえずはオンラインで買えるようにしてあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;まぁ僕がいたらせっかくのオフィスもダーツ仕様になりますよね &lt;a href=&#34;https://t.co/bej7l8QBCE&#34;&gt;pic.twitter.com/bej7l8QBCE&lt;/a&gt;&lt;/p&gt; chachamaru (@chachmaru) &lt;a href=&#34;https://twitter.com/chachmaru/status/757848176657260544&#34;&gt;2016年7月26日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;こんな感じ(笑)で丁寧に梱包してますのでご興味を持った方がいれば是非試してみてください！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;購入ページは&lt;a href=&#34;https://dotstud.io/projects/nodebots-seeeduino-for-beginners/&#34;&gt;こちら&lt;/a&gt;になります。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>今週末はInternational NodeBots Dayですよ！( #NodeBots vol2のイベレポと次回告知 )</title>
      <link>https://dotstud.io/blog/nodebots-handson-report-vol2/</link>
      <pubDate>Mon, 25 Jul 2016 15:31:20 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/nodebots-handson-report-vol2/</guid>
      
      <description>

&lt;p&gt;こんにちは、のびすけです。&lt;/p&gt;

&lt;p&gt;時間が経ってしまいましたが、NodeBotsハンズオンのレポートをします！ &lt;a href=&#34;http://nodebots.connpass.com/event/34073/&#34;&gt;明日もイベントがある&lt;/a&gt;のでその告知もさせてください（笑）&lt;/p&gt;

&lt;h2 id=&#34;nodebotsって&#34;&gt;NodeBotsって?&lt;/h2&gt;

&lt;p&gt;さて、みなさんは「NodeBots」という言葉を知ってますか？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nodebots.io/&#34;&gt;http://nodebots.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/003/01_nodebots.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;NodeBotsとは、Node.jsでハードウェアを制御するイベントやコミュニティの総称です。世界的に開催されています。&lt;/p&gt;

&lt;p&gt;僕が以前書いた、&lt;a href=&#34;http://liginc.co.jp/283711&#34;&gt;Webな人でもハードウェア制御が簡単に！Node.jsでJavaScript Roboticsを楽しもう #nodebots_jp&lt;/a&gt;を読んでもらえると早いんですけど、いろんな場所でNodeBotsについては書き続けます（笑）&lt;/p&gt;

&lt;h2 id=&#34;nodebots-johnny-fiveハンズオン&#34;&gt;NodeBots Johnny-Fiveハンズオン&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/003/02_op.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://johnny-five.io/&#34;&gt;Johnny-Five&lt;/a&gt;というNode.jsで、マイコンボード「Arduino」を制御するライブラリがあります。各国では、このライブラリを使ってNodeBotsのイベントを開催することが多いようです。&lt;/p&gt;

&lt;h3 id=&#34;dmm-make-akibaを会場にvol2開催&#34;&gt;DMM.make AKIBAを会場にvol2開催&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/003/03_kamimura.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nodebots.connpass.com/event/31580/&#34;&gt;vol2&lt;/a&gt;は&lt;a href=&#34;https://akiba.dmm-make.com/&#34;&gt;DMM.Make AKIBA&lt;/a&gt;を会場に実施しました。 DMMの上村さんからDMM.make AKIBAの会場説明でスタートです。大半の方が初めて来たとのことで、会場に興味持っている人も多い印象でした。&lt;/p&gt;

&lt;p&gt;さて、&lt;strong&gt;ハンズオンでは人によって進捗が変わるため、ゴールをいくつか設定&lt;/strong&gt; するようにしました。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;
    &lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;今日の目標！ぞい！
        &lt;a href=&#34;https://twitter.com/hashtag/nodebots_jp?src=hash&#34;&gt;#nodebots_jp&lt;/a&gt;
        &lt;a href=&#34;https://t.co/k4Eky2Iz5E&#34;&gt;pic.twitter.com/k4Eky2Iz5E&lt;/a&gt;
    &lt;/p&gt; ちゃんとく (@tokutoku393) &lt;a href=&#34;https://twitter.com/tokutoku393/status/742667503654961156&#34;&gt;2016年6月14日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tableflip/nodebot-workshop&#34;&gt;NodeBot Workshop&lt;/a&gt;というツールを用いてハンズオンを行うのですが、電子工作はプログラミングフェーズと工作フェーズに分かれるため&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeBot Workshopの3問目（全9問）までクリア&lt;/li&gt;
&lt;li&gt;用意したパーツを使って3問目までを工作してみる&lt;/li&gt;
&lt;li&gt;4問目以降もチャレンジ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というような設定にしました。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;img src=&#34;https://dotstud.io/img/blog/003/04_look.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;分からない方にはメンターの方がサポートをして、各々が進めるスタイルのもくもく会に近いタイプのハンズオンです。（ちなみにNodeSchool系のイベントはだいたいこんな感じです）&lt;/p&gt;

&lt;p&gt;JavaScriptを使う前提+そこまでJavaScript分からなくても聞けばなんとかなるんじゃないかと思ってた節はあるのですが、参加者の方が書いてくれた&lt;a href=&#34;http://wp.pxdesign.jp/2016/06/15/nodebots-johnny-five-arduino-servo/&#34;&gt;レポート記事&lt;/a&gt;を見る限り、JavaScriptをほとんど触ったことのない初心者だと少しハードルが高かったようでした（苦笑）&lt;/p&gt;

&lt;p&gt;これはなんとかしないといけないですね。もう少し丁寧な解説記事などを用意したほうが良さそうだなと思いつつ、とりあえず
&lt;a href=&#34;https://www.github.com/sethvincent/javascripting&#34;&gt;NodeSchoolのJavaScriptカリキュラム&lt;/a&gt;をお勧めしておきます。&lt;/p&gt;

&lt;p&gt;少しは敷居を下げてくれるかもしれません。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;img src=&#34;https://dotstud.io/img/blog/003/05_toast.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;頭を使ったあとは、懇親会で感想などをわいわい言い合いました。&lt;/p&gt;

&lt;h3 id=&#34;感想など&#34;&gt;感想など&lt;/h3&gt;

&lt;p&gt;主催側の感触なのですが、だいたい2問目まではみんな動かすことができていました。「JSを初めて触った！」という人でも3問目には取り組めてた印象です。2時間弱程度の短い時間にしてはいい進み具合だった気もしてますが、もっと丁寧なサポートも必要だなと感じました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Johnny-FiveのメリットはJavaScriptで書けてWebとの接続が行いやすい&lt;/strong&gt; ところだと思っているので、ハードウェア側だけではなく、 &lt;strong&gt;Milkcocoaを使ったりしてWebと繋げるやり方も紹介したらもっと楽しくなる&lt;/strong&gt; 気がしました。&lt;/p&gt;

&lt;p&gt;とりあえず、みんな笑顔で終われていたので大満足です。（けっこう大事）&lt;/p&gt;

&lt;h2 id=&#34;次回は-7-26-明日&#34;&gt;次回は &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;26&lt;/sub&gt; （明日!）&lt;/h2&gt;

&lt;p&gt;さて、こんなイベントを毎月やってるのですが、次回はなんと &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;26&lt;/sub&gt; （明日）です（笑）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/003/06_vol3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nodebots.connpass.com/event/34073/&#34;&gt;connpassのページ&lt;/a&gt;から応募できるので是非今からでも参加登録してください！ :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web界隈の人でハードウェアや電子工作が気になってる人&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ハードウェア界隈の人でJavaScriptが気になってる人&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;その他IoTとか興味ある人&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が主な対象ですので、当てはまる！って人は是非お越しください!&lt;/p&gt;

&lt;h2 id=&#34;そして週末-7-30-土-は全世界同時開催のinternational-nodebots-day&#34;&gt;そして週末 &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;30&lt;/sub&gt; （土）は全世界同時開催のInternational NodeBots Day!!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/003/07_nodebots_day.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;30&lt;/sub&gt; には全世界同時開催のイベントである&lt;a href=&#34;https://github.com/nodebots/nodebotsday&#34;&gt;NodeBots Day&lt;/a&gt;が開催されます。&lt;/p&gt;

&lt;p&gt;東京イベントとしてNodeBots Day Tokyoも開催されますので、是非こちらもご参加ください!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nodebots.connpass.com/event/35559/&#34;&gt;http://nodebots.connpass.com/event/35559/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;それではイベントでお会いしましょう！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>