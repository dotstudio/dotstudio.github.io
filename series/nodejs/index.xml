<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nodejs on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/nodejs/</link><description>Recent content in nodejs on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Wed, 13 Feb 2019 12:50:00 +0900</lastBuildDate><atom:link href="/series/nodejs/" rel="self" type="application/rss+xml"/><item><title>【どんと来い、列車遅延】 勤怠メールをサクッと送れるオレオレツールを作ってみた</title><link>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</link><pubDate>Wed, 13 Feb 2019 12:50:00 +0900</pubDate><guid>https://dotstud.io/blog/pokio-nodered-keikyu-chien/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/pokio">ポキオ&lt;/a>です。&lt;/p>
&lt;p>急いでるときに限って、いつも使ってる通勤列車が遅延してたりして、あたふたすることってありますよね？&lt;/p>
&lt;p>そんなときに、勤務先などにサクッとメールを送れるオレオレツールを作ってみました。&lt;/p>
&lt;h2 id="node-red">Node-REDで簡単に作ってみる&lt;/h2>
&lt;p>「ツールを作る」と聞くと、なんだか難しそうな雰囲気がしますよね？&lt;/p>
&lt;p>でも、&lt;strong>Node-RED&lt;/strong>を使うとちょっとのコーディングで簡単にツールが作れてしまいます！&lt;a href="https://dotstud.io/blog/nefry-servo-handson-takudooon/#node-red-mqtt%E3%81%A7%E3%82%B5%E3%83%BC%E3%83%9C%E3%83%A2%E3%83%BC%E3%82%BF%E3%82%92%E9%81%A0%E9%9A%94%E5%88%B6%E5%BE%A1">たくろーどんさんの記事&lt;/a>でもNode-REDが使われていましたが、&lt;strong>実行したい処理をフローチャートのように、ノードとノードをつなぐことによって設計できるツール&lt;/strong>になっています。&lt;/p>
&lt;p>Node-REDはその名の通り、&lt;strong>Node.js&lt;/strong>上で動作するツールです。普段使っているPCなどNode.jsが動作している環境であればNode−REDを動かすことができますが、今回は外出先からでもアクセスできるツールを簡単に作成したかったので、&lt;!-- raw HTML omitted -->Node-REDをサービスとして提供している&lt;strong>enebular&lt;/strong>&lt;!-- raw HTML omitted -->を使ってみようと思います。&lt;/p>
&lt;h2 id="node-red-1">Node-REDでツールを作ってみる&lt;/h2>
&lt;p>はじめに、今回作ったツールがこちら。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>このツールの機能は、以下の3つです。&lt;/p>
&lt;ul>
&lt;li>外出先からでもアクセスできるWebページを作る（念の為、BASIC認証を設けておく）&lt;/li>
&lt;li>そのページ上で勤怠メールの文言をプリセットから選べるようにして、特定の宛先にメール送信できるようにする&lt;/li>
&lt;li>**「本当に電車遅延が原因で遅刻するの？」**と言われないように、京急の遅延証明書ページで発行されている遅延証明書を表示して、メールに遅延証明書へのリンクを貼れるようにする&lt;/li>
&lt;/ul>
&lt;p>遅延状況は例によって&lt;strong>京浜急行&lt;/strong>のWebページ上の情報を取得しています。また、不特定多数の人が勝手にこのツールを使ってしまわないように、BASIC認証を設けてアクセスを制限しています。&lt;/p>
&lt;h2 id="node-redweb">Node-REDでWebページを作る&lt;/h2>
&lt;p>Node-REDで用意されているノードのなかに、HTTPリクエストを受ける&lt;strong>&lt;code>HTTP In&lt;/code>&lt;/strong>ノードと、それに対するレスポンスを返す&lt;strong>&lt;code>HTTP Response&lt;/code>&lt;/strong>ノードがあります。&lt;/p>
&lt;p>この&lt;code>HTTP In&lt;/code>ノードを作るとHTTPのエンドポイントができます。このノードと&lt;code>HTTP Response&lt;/code>ノードを下の絵のようにつなぎ、レスポンスとなるソースを返すようにすれば、Webページができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>上の例では、静的な&lt;code>Hello, world!&lt;/code>という文字列を返すだけですが、&lt;strong>&lt;code>HTTP Response&lt;/code>&lt;/strong>ノードで返す情報を動的に変化させたり、Webページ上で動作させるスクリプトを記述してレスポンスとして返せば、よりリッチなWebページをNode-REDで作成することができます。
&lt;/p>
&lt;p>次にBASIC認証ですが、Node-REDに対して追加でモジュールをインストールすることで、簡単に機能を追加することができます。&lt;/p>
&lt;p>Node-REDの設定メニューから、[Settings] &amp;gt; [Palette] &amp;gt; [Install]と進み、&lt;strong>&lt;code>node-red-contrib-httpauth&lt;/code>&lt;/strong>を探します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>これをインストールすることで、BASIC認証が行えるノードを追加できます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>使い方は至ってシンプルで、先程の&lt;code>HTTP In&lt;/code>ノードの後ろにBASIC認証のノードをつけて、BASIC認証で使うユーザー名とパスワードをノードの設定で指定するだけです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>実際に、この状態でエンドポイントにアクセスすると、確かにBASIC認証がワークしています。&lt;/p>
&lt;h2 id="heading">勤怠メールを送れるようにする&lt;/h2>
&lt;p>ここまでで、&lt;code>Hello, world!&lt;/code>が表示できるWebページができました。ここからは&lt;!-- raw HTML omitted -->&lt;code>HTTP Response&lt;/code>ノードで返すHTMLをよしなに編集して、勤怠メールを作成できるようにします。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>具体的には、次のような機能をHTMLやJavaScriptで記述して、それをレスポンスで返すようにしました。&lt;/p>
&lt;ul>
&lt;li>プルダウンメニューで遅刻する理由を選択できるようにする&lt;/li>
&lt;li>選択した理由に応じて、メールの本文を変更する&lt;/li>
&lt;li>&lt;strong>mailtoスキーム&lt;/strong>を使って、メーラーを起動してメールを送れるようにする&lt;/li>
&lt;/ul>
&lt;p>遅刻の理由も、必ずしも電車遅延だけではないので、体調不良や保育園関係の理由も選択できるようにしました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>遅刻の理由を選択すると、メール本文が変わるようになっています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>&lt;code>勤怠メールを送る&lt;/code>&lt;/strong>を押すとメーラーが起動し、ツールで指定した文言をそのままメールとして送ることができます。&lt;/p>
&lt;h2 id="heading-1">遅延証明書情報を取得する&lt;/h2>
&lt;p>ツール上で表示する京浜急行の運行情報は、&lt;a href="https://delay.keikyu.co.jp/delay/">京急線遅延証明書の発行&lt;/a>のページから取得します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>その日に発行されている遅延証明書のリスト化し、その遅延証明書ページへのリンクをメール本文に貼り付けるか選択できるようになっています。&lt;/p>
&lt;p>ただし、下記のような問題があるため、泥臭いワークアラウンドを入れています。&lt;/p>
&lt;ul>
&lt;li>遅延証明書ページへのリンクのアドレスに、mailtoスキームでは扱えない文字が含まれているため、&lt;a href="https://is.gd/">外部のURL短縮サービス「is.gd」&lt;/a>を使ってアドレスを短く変換している&lt;/li>
&lt;li>URL短縮のWebAPIを叩こうとするとCORSポリシーに引っかかったため、URL短縮のために同じドメインでエンドポイントを作成し、それ経由でアドレスの変換を行う&lt;/li>
&lt;/ul>
&lt;h2 id="heading-2">実際のフローはこちら&lt;/h2>
&lt;p>Node-REDで作成したフローを、エクスポートしたものはこちらです。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-JSON" data-lang="JSON">[{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;tab&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;label&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Flow 1&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;disabled&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;a45bf2b.b54621&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http request&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;遅延証明書ページ取得&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ret&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;txt&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;https://delay.keikyu.co.jp/delay/&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tls&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;89f0f7a0.a8bda8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;3a7ae4dc.fc9f5c&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;active&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tosidebar&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;console&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tostatus&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;complete&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;delayData&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">600&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;89f0f7a0.a8bda8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;情報をパース&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let table = msg.payload.split(&amp;#39;&amp;lt;tbody&amp;gt;&amp;#39;)[1];\ntable = table.split(&amp;#39;&amp;lt;/tbody&amp;gt;&amp;#39;)[0];\n\nlet rows = table.split(&amp;#39;\\n&amp;#39;).join(&amp;#39;&amp;#39;);\nrows = rows.split(&amp;#39;&amp;lt;tr&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;/tr&amp;gt;&amp;#39;);\n\nlet data = {};\nlet dateOffset = 0;\ndata.date = rows[0 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;)[0].replace(&amp;#39;&amp;lt;tr style=\&amp;#34;background-color:#ADD8E6;\&amp;#34;&amp;gt;&amp;#39;,&amp;#39;&amp;#39;).replace(&amp;#39;&amp;lt;td rowspan=3&amp;gt;&amp;#39;,&amp;#39;&amp;#39;).replace(&amp;#39;&amp;lt;br/&amp;gt;&amp;#39;,&amp;#39;&amp;#39;);\n\nlet morningData = rows[0 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet dayData = rows[1 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet nightData = rows[2 + 3 * dateOffset].split(&amp;#39;&amp;lt;/td&amp;gt;&amp;#39;).join(&amp;#39;&amp;#39;).split(&amp;#39;&amp;lt;td&amp;gt;&amp;#39;).slice(1);\nlet dataTitles = [&amp;#39;品川～横浜：上り&amp;#39;,&amp;#39;品川～横浜：下り&amp;#39;,&amp;#39;横浜以南：上り&amp;#39;,&amp;#39;横浜以南：下り&amp;#39;,&amp;#39;空港線内：上り&amp;#39;,&amp;#39;空港線内：下り&amp;#39;];\n\ndata.morningTitle = morningData[0];\ndata.dayTitle = dayData[0];\ndata.nightTitle = nightData[0];\n\nmorningData = morningData.slice(1);\ndayData = dayData.slice(1);\nnightData = nightData.slice(1);\n\ndata.morningData = [];\ndata.dayData = [];\ndata.nightData = [];\ndata.allData = [];\n\nfor(let i = 0; i &amp;lt; 6; i++){\n if(morningData[i] !== &amp;#39;-&amp;#39;){\n let detail = morningData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + morningData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.morningData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.morningTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n \n if(dayData[i] !== &amp;#39;-&amp;#39;){\n let detail = dayData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + dayData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.dayData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.dayTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n \n if(nightData[i] !== &amp;#39;-&amp;#39;){\n let detail = nightData[i].split(&amp;#39;&amp;gt;&amp;#39;)[1].split(&amp;#39;&amp;lt;&amp;#39;)[0];\n let link = &amp;#39;https://delay.keikyu.co.jp&amp;#39; + nightData[i].split(&amp;#39;\&amp;#34;&amp;#39;)[1];\n data.nightData.push({zone : dataTitles[i], detail : detail, link : link});\n data.allData.push({title : data.nightTitle + &amp;#39; - &amp;#39; + dataTitles[i] + &amp;#39; - &amp;#39; + detail, link : link});\n }\n}\n\nmsg.delayData = data;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;e0512d8a.0fe7f&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;3a7ae4dc.fc9f5c&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;5c37249e.aecf1c&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http in&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPリクエスト&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;upload&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;swaggerDoc&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">120&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;b83cd390.27959&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;bbc86a41.f453e8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http response&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPレスポンス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;statusCode&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;headers&amp;#34;&lt;/span>:{},&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">610&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">180&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;e0512d8a.0fe7f&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;パースした情報を整形&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let delayBody = &amp;#39;&amp;#39;;\n\ndelayBody += &amp;#39;&amp;lt;h1&amp;gt;&amp;#39; + msg.delayData.date + &amp;#39;&amp;lt;/h1&amp;gt;\\n&amp;#39;;\n\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.morningTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.morningData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.morningData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.dayTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.dayData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.dayData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;h2&amp;gt;&amp;#39; + msg.delayData.nightTitle + &amp;#39;&amp;lt;/h2&amp;gt;\\n&amp;#39;;\ndelayBody += &amp;#39;&amp;lt;ul&amp;gt;&amp;#39;;\n\nif(msg.delayData.nightData.length === 0){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;遅延情報なし&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n}else{\n msg.delayData.nightData.forEach(function(data){\n delayBody += &amp;#39;&amp;lt;li&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;a href=\&amp;#34;&amp;#39; + data.link + &amp;#39;\&amp;#34; target=\&amp;#34;_blank\&amp;#34;&amp;gt;&amp;#39;;\n delayBody += data.zone + &amp;#39; (&amp;#39; + data.detail + &amp;#39;)&amp;#39;; \n delayBody += &amp;#39;&amp;lt;/a&amp;gt;&amp;#39;;\n delayBody += &amp;#39;&amp;lt;/li&amp;gt;&amp;#39;;\n });\n}\n\ndelayBody += &amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;;\nmsg.delayBody = delayBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">260&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;5f89b7b8.249788&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;6e8b7f2.3c2238&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;ページの要素を結合&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let bodyHeader = &amp;#39;&amp;lt;html&amp;gt;&amp;lt;header&amp;gt;&amp;lt;meta name=\&amp;#34;viewport\&amp;#34; content=\&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no\&amp;#34;&amp;gt;&amp;lt;link rel=\&amp;#34;stylesheet\&amp;#34; href=\&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\&amp;#34; integrity=\&amp;#34;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/header&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div class=\&amp;#34;container\&amp;#34;&amp;gt;&amp;lt;div class=\&amp;#34;row\&amp;#34;&amp;gt;&amp;lt;div class=\&amp;#34;col-sm my-2\&amp;#34;&amp;gt;&amp;#39;;\nlet bootstrap = &amp;#39;&amp;lt;script src=\&amp;#34;https://code.jquery.com/jquery-3.3.1.slim.min.js\&amp;#34; integrity=\&amp;#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\&amp;#34; integrity=\&amp;#34;sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=\&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\&amp;#34; integrity=\&amp;#34;sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k\&amp;#34; crossorigin=\&amp;#34;anonymous\&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;#39;;\nlet bodyFooter = &amp;#39;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;;\n\nmsg.payload = bodyHeader + msg.delayBody + msg.mailBody + msg.scriptBody + bootstrap + bodyFooter;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">380&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;bbc86a41.f453e8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;5f89b7b8.249788&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;メール送信部分&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let mailBody = &amp;#39;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;h1&amp;gt;勤怠メールを作成&amp;lt;/h1&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;reason\&amp;#34;&amp;gt;遅延理由を選択する&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;select class=\&amp;#34;custom-select\&amp;#34; name=\&amp;#34;reason\&amp;#34; id=\&amp;#34;reason\&amp;#34; onchange=\&amp;#34;updateMessage()\&amp;#34;&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;電車遅延のため\&amp;#34; selected&amp;gt;電車遅延&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;腹痛のため\&amp;#34;&amp;gt;体調不良（腹痛）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;頭痛のため\&amp;#34;&amp;gt;体調不良（頭痛）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;体調不良のため\&amp;#34;&amp;gt;体調不良（理由なし）&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;保育園登園に時間がかかったため\&amp;#34;&amp;gt;保育園関係&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;家事都合のため\&amp;#34;&amp;gt;家事都合&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;私用のため\&amp;#34;&amp;gt;私用&amp;lt;/option&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;/select&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;chien\&amp;#34;&amp;gt;遅延証明書へのリンクを貼る&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;select class=\&amp;#34;custom-select\&amp;#34; name=\&amp;#34;chien\&amp;#34; id=\&amp;#34;chien\&amp;#34; onchange=\&amp;#34;updateMessage()\&amp;#34;&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;option value=\&amp;#34;\&amp;#34; selected&amp;gt;なし&amp;lt;/option&amp;gt;&amp;#39;;\n\nmsg.delayData.allData.forEach(function(value){\n mailBody += &amp;#39;&amp;lt;option value=\&amp;#34;&amp;#39; + value.link + &amp;#39;\&amp;#34;&amp;gt;&amp;#39; + value.title + &amp;#39;&amp;lt;/option&amp;gt;&amp;#39;;\n});\n\nmailBody += &amp;#39;&amp;lt;/select&amp;gt;&amp;#39;;\n\nmailBody += &amp;#39;&amp;lt;label for=\&amp;#34;message\&amp;#34;&amp;gt;メール本文&amp;lt;/label&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;textarea class=\&amp;#34;form-control\&amp;#34; id=\&amp;#34;message\&amp;#34; rows=\&amp;#34;5\&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;#39;;\nmailBody += &amp;#39;&amp;lt;br&amp;gt;&amp;lt;button type=\&amp;#34;button\&amp;#34; class=\&amp;#34;btn btn-primary btn-block\&amp;#34; onclick=\&amp;#34;sendMessage()\&amp;#34;&amp;gt;勤怠メールを送る&amp;lt;/button&amp;gt;&amp;#39;;\n\nmsg.mailBody = mailBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">300&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;a41aa11e.86e04&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;a41aa11e.86e04&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;スクリプト部分&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;let name = global.get(&amp;#39;name&amp;#39;);\nlet address = global.get(&amp;#39;address&amp;#39;);\n\nlet scriptBody = &amp;#39;&amp;lt;script&amp;gt;&amp;#39;;\nscriptBody += &amp;#39;let reasonSelect = document.getElementById(\&amp;#34;reason\&amp;#34;); let chienSelect = document.getElementById(\&amp;#34;chien\&amp;#34;); let textArea = document.getElementById(\&amp;#34;message\&amp;#34;); function updateMessage() { let reasonIndex = reasonSelect.selectedIndex; let chienIndex = chienSelect.selectedIndex; let message = \&amp;#34;\&amp;#34;; message += \&amp;#34;&amp;#39; + name + &amp;#39;です。\\\\n\\\\n\&amp;#34;; message += \&amp;#34;大変申し訳ありませんが、\&amp;#34;; message += reasonSelect.options[reasonIndex].value; message += \&amp;#34;出社が遅れます。\\\\n\&amp;#34;; message += \&amp;#34;何卒宜しくお願いします。\&amp;#34;; if (!chienSelect.options[chienIndex].value) { textArea.value = message; return; } let request = new XMLHttpRequest(); request.onload = function () { message += \&amp;#34;\\\\n\\\\n遅延証明書はこちらです。\\\\n\&amp;#34;; message += request.responseText; textArea.value = message; }; request.open(\&amp;#34;GET\&amp;#34;, \&amp;#34;./encode/\&amp;#34; + encodeURIComponent(chienSelect.options[chienIndex].value.trim()), false, \&amp;#34;USER_NAME\&amp;#34;, \&amp;#34;PASSWORD\&amp;#34;); request.send(); } function sendMessage() { window.open(\&amp;#34;mailto:&amp;#39; + address + &amp;#39;?body=\&amp;#34; + encodeURIComponent(textArea.value)); } updateMessage();&amp;#39;;\nscriptBody += &amp;#39;&amp;lt;/script&amp;gt;&amp;#39;;\n\nmsg.scriptBody = scriptBody;\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">340&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;6e8b7f2.3c2238&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;867b9e9b.bb5b8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http in&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPリクエスト&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;/encode/:url&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;upload&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;swaggerDoc&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">120&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;eb246d76.1afeb&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;fdb9da8c.f0ebf8&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;55421d41.0dc1b4&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http response&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;HTTPレスポンス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;statusCode&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;headers&amp;#34;&lt;/span>:{},&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">610&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;303db0f1.b72bf&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;http request&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;APIを叩く&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ret&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;txt&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tls&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">330&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">520&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;55421d41.0dc1b4&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;808e61ff.edc38&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;URL変換&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;msg.url = &amp;#39;https://is.gd/create.php?format=simple&amp;amp;url=&amp;#39; + encodeURIComponent(msg.req.params.url);\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">320&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">480&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;303db0f1.b72bf&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;eb246d76.1afeb&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;active&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tosidebar&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;console&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tostatus&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;complete&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">310&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">560&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b475750f.2c9468&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;ページへのアクセス&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">130&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">140&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b61cb0ab.67446&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;URL短縮&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">440&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;892cd0e6.0c4ae&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;comment&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;定数の宣言&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;info&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">40&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;92da441f.e87958&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;inject&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;起動時&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;topic&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;payload&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;payloadType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;date&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;repeat&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;crontab&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;once&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">true&lt;/span>,&lt;span style="color:#f92672">&amp;#34;onceDelay&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0.1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">100&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;7e9e582f.c0d258&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7e9e582f.c0d258&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;function&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;差出人、宛先の設定&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;func&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;global.set(&amp;#39;name&amp;#39;, &amp;#39;ポキオ&amp;#39;);\nglobal.set(&amp;#39;address&amp;#39;, &amp;#39;example@example.com&amp;#39;);\nreturn msg;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;outputs&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#f92672">&amp;#34;noerr&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">360&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;b83cd390.27959&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;node-red-contrib-httpauth&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;BASIC認証&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;file&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;cred&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;authType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Basic&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;realm&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;USER_NAME&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;password&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;PASSWORD&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;hashed&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">110&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">220&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;a45bf2b.b54621&amp;#34;&lt;/span>]]},{&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;fdb9da8c.f0ebf8&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;node-red-contrib-httpauth&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;z&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;7cbe5b40.a0b054&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;BASIC認証&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;file&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;cred&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;authType&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Basic&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;realm&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;USER_NAME&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;password&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;PASSWORD&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;hashed&amp;#34;&lt;/span>:&lt;span style="color:#66d9ef">false&lt;/span>,&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">110&lt;/span>,&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">520&lt;/span>,&lt;span style="color:#f92672">&amp;#34;wires&amp;#34;&lt;/span>:[[&lt;span style="color:#e6db74">&amp;#34;808e61ff.edc38&amp;#34;&lt;/span>]]}]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>フローエディターは、こんな感じになっています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heroku">Herokuにデプロイして本格運用&lt;/h2>
&lt;p>今回は、enebularが提供してるNode-REDの仕組みを利用して、フローを設計してみました。&lt;/p>
&lt;p>フロー設計時にはテンポラリのエンドポイントURLが付与されるので、作りながら実際のWebページの挙動を試すことができます。&lt;/p>
&lt;p>また、実際に本格運用しようと思ったときも、enebularからHerokuやAWS Lambdaにフローをデプロイ可能なので、簡単に日々の業務改善ツールとして導入可能です。&lt;!-- raw HTML omitted -->enebularも無料で始められますし、HerokuやAWSも無料枠で運用することが可能です。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>サクッと業務改善ツールが作れる環境が揃っているので、みなさんもぜひ作ってみてください！&lt;/p></description></item><item><title>CloudflareのAPIをNode.js+GitLab CIから実行してキャッシュクリアしてみよう</title><link>https://dotstud.io/blog/cloudflare-cache-clear-nodejs/</link><pubDate>Tue, 12 Feb 2019 12:20:03 +0900</pubDate><guid>https://dotstud.io/blog/cloudflare-cache-clear-nodejs/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>過去にも書いているように、dotstudioでは&lt;a href="https://cloudflare.com">Cloudflare&lt;/a>を使っています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>無料で使えて便利なのですが、&lt;!-- raw HTML omitted -->キャッシュが強くて中々更新されないといった現象&lt;!-- raw HTML omitted -->があります。&lt;/p>
&lt;p>調べてみるとCloudflareのAPIでキャッシュクリアが出来るみたいだったのでNode.jsで叩きつつデプロイ時のCIタスクに乗せてみました。&lt;/p>
&lt;h2 id="heading">今回の環境&lt;/h2>
&lt;p>参考までに今回の筆者の環境です。&lt;/p>
&lt;ul>
&lt;li>macOS 10.14 Mojave&lt;/li>
&lt;li>Node.js v11.9.0&lt;/li>
&lt;li>npm 6.7.0&lt;/li>
&lt;/ul>
&lt;h2 id="cloudflare">Cloudflareでのキャッシュクリア方法&lt;/h2>
&lt;p>APIを使わない場合は、ページから直接削除できます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/1.png" alt="">&lt;/p>
&lt;p>Custom Purgeのボタンを押すと、モーダルウィンドウが出てくるのでキャッシュクリアしたいドメインやページを指定しましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/2.png" alt="">&lt;/p>
&lt;p>こんな感じの指定が出来ます。&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://dotstud.io&lt;/code>のようにメインドメイン指定が出来ます。&lt;/li>
&lt;li>&lt;code>https://hogehoge.dotstud.io&lt;/code>のようにサブドメインでも大丈夫です。&lt;/li>
&lt;li>&lt;code>https://hogehoge.dotstud.io/hoge.html&lt;/code>のようにファイル指定も可能です。&lt;/li>
&lt;/ul>
&lt;p>記述したら&lt;code>Purge&lt;/code>ボタンを押してキャッシュクリアです。&lt;/p>
&lt;p>確認する際ですが、ブラウザ側のキャッシュが残ってしまってる可能性もあるので、ブラウザのシークレットモードなどでページを開いてあげると確実だと思います。&lt;/p>
&lt;h2 id="apicloudflare">API経由でCloudflareのキャッシュをクリア&lt;/h2>
&lt;p>デプロイ時にキャッシュクリアをしたいので、API経由でキャッシュクリアをしてみましょう。&lt;/p>
&lt;h3 id="cloudflareapi-">CloudflareのAPI キーの取得&lt;/h3>
&lt;p>まずはAPIキーを取得します。右上のユーザーアイコンから&lt;code>My Profile&lt;/code>を選択し、ページ下部のAPI Keysの箇所を確認します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/3.png" alt="">&lt;/p>
&lt;p>Global API KeyのViewボタンを押すとパスワード入力を求められるので、パスワードを入力するとAPIキーが表示されます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/4.png" alt="">&lt;/p>
&lt;h3 id="apicurl">APIキーを使ってcurlでキャッシュクリアをしてみる&lt;/h3>
&lt;p>参考記事を元に試してみます。最初からNode.jsでやりたい人はスキップでOKです。&lt;/p>
&lt;blockquote>
&lt;p>参考: &lt;a href="https://blog.mosuke.tech/entry/2017/05/29/how_to_use_cloudflare_api/">CloudFlare APIを使ってキャッシュを削除する&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>CloudflareのAPIの呼び出しはヘッダーには&lt;code>X-Auth-Email&lt;/code>と&lt;code>X-Auth-Key&lt;/code>の指定、&lt;code>Content-Type: application/json&lt;/code>の指定をする必要があります。&lt;/p>
&lt;p>手順としては大きく分けて2つSTEPです。&lt;/p>
&lt;ul>
&lt;li>STEP1. ZONE IDと呼ばれるIDを取得&lt;/li>
&lt;li>STEP2. ZONE IDを使ってキャッシュクリア&lt;/li>
&lt;/ul>
&lt;p>以下のコマンドをターミナルなどで実行してみましょう。&lt;/p>
&lt;h4 id="step1-zone-idid">STEP1. ZONE IDと呼ばれるIDを取得&lt;/h4>
&lt;p>まずはZONE　IDの取得です。以下のコマンドで取得できます。&lt;/p>
&lt;p>&lt;code>curl -s -X GET &amp;quot;https://api.cloudflare.com/client/v4/zones?name=&amp;lt;MY DOMAIN&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Email: &amp;lt;MY EMAIL&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Key: &amp;lt;MY API KEY&amp;gt;&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;strong>&lt;code>&amp;lt;MY DOMAIN&amp;gt;&lt;/code>、&lt;code>&amp;lt;MY EMAIL&amp;gt;&lt;/code>、&lt;code>&amp;lt;MY API KEY&amp;gt;&lt;/code>の箇所を適宜変更して実行して下さい。&lt;/strong>&lt;/p>
&lt;p>それぞれ、自分が管理しているドメイン、登録しているメールアドレス、先ほど取得したAPIキーです。&lt;/p>
&lt;ul>
&lt;li>実行例&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>curl -s -X GET &amp;quot;https://api.cloudflare.com/client/v4/zones?name=dotstud.io&amp;quot; \
-H &amp;quot;X-Auth-Email: hogehoge@gmail.com&amp;quot; \
-H &amp;quot;X-Auth-Key: xxxxxxxxxxxxxxxx&amp;quot; \
-H &amp;quot;Content-Type: application/json&amp;quot;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>ZONE ID&lt;/li>
&lt;/ul>
&lt;p>コマンドを実行してエラーがなければ、JSONがかえってきます。ここのidの値がZONE IDになります。&lt;/p>
&lt;pre>&lt;code>{&amp;quot;result&amp;quot;:[{&amp;quot;id&amp;quot;:&amp;quot;yyyyyyyyyyyyyyyyyyyy&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;dotstud.io&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;active&amp;quot;,&amp;quot;paused&amp;quot;:false,&amp;quot;type&amp;quot;:&amp;quot;full&amp;quot;, (......以下省略)
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/242/5.png" alt="">&lt;/p>
&lt;h4 id="step2-zone-id">STEP2. ZONE IDを使ってキャッシュクリア&lt;/h4>
&lt;p>次にZONE IDを使ってキャッシュクリアです。&lt;/p>
&lt;p>&lt;code>curl -X DELETE &amp;quot;https://api.cloudflare.com/client/v4/zones/&amp;lt;ZONE ID&amp;gt;/purge_cache&amp;quot; -H &amp;quot;Content-Type:application/json&amp;quot; -H &amp;quot;X-Auth-Key: &amp;lt;MY EMAIL&amp;gt;&amp;quot; -H &amp;quot;X-Auth-Email: &amp;lt;MY API KEY&amp;gt;&amp;quot; --data '{&amp;quot;files&amp;quot;:[&amp;quot;&amp;lt;TARGET&amp;gt;&amp;quot;]}'&lt;/code>&lt;/p>
&lt;p>先ほどと同様に適宜変更します。&lt;/p>
&lt;p>&lt;strong>&lt;code>&amp;lt;ZONE ID&amp;gt;&lt;/code>、&lt;code>&amp;lt;MY EMAIL&amp;gt;&lt;/code>、&lt;code>&amp;lt;MY API KEY&amp;gt;&lt;/code>、&lt;code>&amp;lt;TARGET&amp;gt;&lt;/code>の箇所を適宜変更して実行して下さい。&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;ZONE ID&amp;gt;&lt;/code>はSTEP1で取得したZONE IDで、&lt;code>&amp;lt;TARGET&amp;gt;&lt;/code>はキャッシュクリアさせたいドメインやファイル名の指定です。最初にAPI利用なしでCloudflareのサイト上でキャッシュクリアをした時に指定したときと同様の指定ができます。&lt;/p>
&lt;ul>
&lt;li>実行例&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>curl -X DELETE &amp;quot;https://api.cloudflare.com/client/v4/zones/yyyyyyyyyyyyyyyyyyyy/purge_cache&amp;quot; \
-H &amp;quot;Content-Type:application/json&amp;quot; \
-H &amp;quot;X-Auth-Key: xxxxxxxxxxxxxxxx&amp;quot; \
-H &amp;quot;X-Auth-Email: hogehoge@gmail.com&amp;quot; \
--data '{&amp;quot;files&amp;quot;:[&amp;quot;https://hogehoge.dotstud.io/&amp;quot;]}'
&lt;/code>&lt;/pre>&lt;p>成功すると以下のようなレスポンスがあり、キャッシュがクリアされます。&lt;/p>
&lt;pre>&lt;code>{&amp;quot;result&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;yyyyyyyyyyyyyyyyyyyy&amp;quot;},&amp;quot;success&amp;quot;:true,&amp;quot;errors&amp;quot;:[],&amp;quot;messages&amp;quot;:[]}%
&lt;/code>&lt;/pre>&lt;h3 id="nodejsapi">Node.jsでAPIを叩いてみる&lt;/h3>
&lt;p>まずはフォルダやファイルの準備をしましょう。
mycfフォルダ内に&lt;code>purge_cache.js&lt;/code>というファイルを作成します。&lt;/p>
&lt;pre>&lt;code>mkdir mycf
cd mycf
touch purge_cache.js
&lt;/code>&lt;/pre>&lt;p>HTTPリクエストを利用する為に&lt;a href="https://www.npmjs.com/package/axios">axios&lt;/a>をインストールします。&lt;/p>
&lt;pre>&lt;code>npm init -y
npm i axios
&lt;/code>&lt;/pre>&lt;p>&lt;code>purge_cache.js&lt;/code>に以下の内容をコピペして、&lt;code>YOUREMAIL&lt;/code>、&lt;code>APIKEY&lt;/code>、&lt;code>PURGE_TARGETS&lt;/code>を適宜書き換えましょう。&lt;/p>
&lt;pre>&lt;code>'use strict';
const YOUREMAIL = `hogehoge@gmail.com`; //Cloudflareに登録してるメールアドレス
const APIKEY = `xxxxxxxxxxxxxxxxx`; //CloudflareのAPI KEY
const PURGE_TARGETS = [`https://hogehoge.dotstud.io`]; //消す対象ページ
const axiosBase = require('axios');
const axios = axiosBase.create({
baseURL: `https://api.cloudflare.com/client/v4/zones`,
headers: {
'Content-Type': 'application/json',
'X-Auth-Key': APIKEY,
'X-Auth-Email': YOUREMAIL
}
})
const main = async() =&amp;gt; {
try {
//STEP1. ZoneIDの取得
let res = await axios.get('/');
const zoneid = res.data.result[0].id;
//STEP2. キャッシュ削除
res = await axios.delete(`/${zoneid}/purge_cache`,{
data: {
files: PURGE_TARGETS
}
});
console.log(res.data);
} catch (error) {
console.log(error.response.data)
}
}
main();
&lt;/code>&lt;/pre>&lt;p>実行します。エラーが出なければこれでキャッシュクリアされます。&lt;/p>
&lt;pre>&lt;code>node purge_cache.js
&lt;/code>&lt;/pre>&lt;p>これでNode.jsからCloudflareのキャッシュクリアをすることが出来ました。&lt;/p>
&lt;h2 id="gitlab-ci">GitLab CIのタスクで実行する&lt;/h2>
&lt;p>実際にデプロイした際にキャッシュクリアされるようにしたいのでGitLab CIのタスクに入れ込みました。&lt;/p>
&lt;h3 id="heading-1">ソースコードの変更&lt;/h3>
&lt;p>先ほどソースコード上に書いていた&lt;code>YOUREMAIL&lt;/code>などの値は環境変数から取得するように&lt;code>purge_cache.js&lt;/code>を変更しました。また、最後(STEP3)にDiscordにデプロイ成功を通知する処理も追加しています。&lt;/p>
&lt;pre>&lt;code>'use strict';
if(!process.env.YOUREMAIL || !process.env.APIKEY || !process.env.PURGE_TARGET){
console.log('環境変数が足りません');
return;
}
const YOUREMAIL = process.env.YOUREMAIL; //Cloudflareに登録してるメールアドレス
const APIKEY = process.env.APIKEY; //CloudflareのAPI KEY
const PURGE_TARGETS = [process.env.PURGE_TARGET]; //消す対象ページ
const axiosBase = require('axios');
const axios = axiosBase.create({
baseURL: `https://api.cloudflare.com/client/v4/zones`,
headers: {
'Content-Type': 'application/json',
'X-Auth-Key': APIKEY,
'X-Auth-Email': YOUREMAIL
}
})
const main = async() =&amp;gt; {
try {
//STEP1. ZoneIDの取得
let res = await axios.get('/');
const zoneid = res.data.result[0].id;
//STEP2. キャッシュ削除
res = await axios.delete(`/${zoneid}/purge_cache`,{
data: {
files: PURGE_TARGETS
}
});
console.log(res.data);
//STEP3. Discordへ通知
res = await axiosBase.post(process.env.DISCORD_WEBHOOK_URL,{
content: 'デプロイ成功 &amp;amp; キャッシュクリア'
});
console.log(res.data);
} catch (error) {
console.log(error.response.data)
}
}
main();
&lt;/code>&lt;/pre>&lt;h3 id="packagejson">package.jsonの変更&lt;/h3>
&lt;p>また、先日書いた記事にもあるような、VuePressのデプロイフローに今回のタスクを乗せていきます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;code>package.json&lt;/code>に&lt;code>ci:purge_cache&lt;/code>を追加して&lt;code>purge_cache.js&lt;/code>を実行するスクリプトを追加します。&lt;/p>
&lt;pre>&lt;code>(省略)
&amp;quot;scripts&amp;quot;: {
&amp;quot;dev&amp;quot;: &amp;quot;vuepress dev docs&amp;quot;,
&amp;quot;build&amp;quot;: &amp;quot;vuepress build docs&amp;quot;,
&amp;quot;ci:purge_cache&amp;quot;: &amp;quot;node purge_cache.js&amp;quot;,
},
(省略)
&lt;/code>&lt;/pre>&lt;h3 id="gitlab-ciyml">.gitlab-ci.ymlの変更&lt;/h3>
&lt;p>GitLab CIの挙動として&lt;code>.gitlab-ci.yml&lt;/code>の記述は以下のようにしています。&lt;/p>
&lt;p>&lt;code>after_script&lt;/code>の箇所で&lt;code>npm run ci:purge_cache&lt;/code>をすることで、デプロイが終わった後に&lt;code>purge_cache.js&lt;/code>が実行されてキャッシュクリアがされます。&lt;/p>
&lt;pre>&lt;code>image: node:current-alpine
pages:
cache:
paths:
- node_modules/
before_script:
- node -v
- npm i
script:
- npm run build
- cp docs/robots.txt docs/.vuepress/dist #限定公開の場合
- cp -pr docs/.vuepress/dist public
after_script:
- npm run ci:purge_cache #Cloudflareのキャッシュクリア &amp;amp; Discordへ通知
artifacts:
paths:
- public
only:
- master
&lt;/code>&lt;/pre>&lt;h3 id="heading-2">環境変数の登録&lt;/h3>
&lt;p>GitLabのリポジトリから環境変数を追加することができます。&lt;/p>
&lt;p>リポジトリの&lt;code>Settings&amp;gt;CI/CD&lt;/code>から&lt;code>Environment variables&lt;/code>の箇所を開きます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/6.png" alt="">&lt;/p>
&lt;p>各値を名前をソースコードに記述した変数名と一致させつつ設定しましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/242/7.png" alt="">&lt;/p>
&lt;h2 id="heading-3">まとめ&lt;/h2>
&lt;p>ここまでの手順が出来るとデプロイするたびに、Cloudflareのキャッシュがクリアされて、なかなか更新されない問題が解消できると思います。&lt;/p>
&lt;p>これでもページが更新されない場合はブラウザ側でキャッシュされている可能性が高いのでシークレットモードなどで確認したり、ブラウザを変えてみるのがベターだと思います。&lt;/p>
&lt;p>キャッシュコントロールをしてCloudflareをもっと便利に使っていきましょう。&lt;/p>
&lt;p>それでは！&lt;/p></description></item><item><title>NefryBTからGoogleDriveにデータをアップロードする方法</title><link>https://dotstud.io/blog/update-nefrybt-to-googledrive/</link><pubDate>Thu, 31 Jan 2019 03:21:47 +0900</pubDate><guid>https://dotstud.io/blog/update-nefrybt-to-googledrive/</guid><description>&lt;p>こんにちは、NefryBTきっかけでIoTの世界に入った&lt;a href="https://dotstud.io/members/kuroda">黒田&lt;/a>と言います。Webとどう接していけばいいのか分からないときにNefryBTと出会い、意外と難しくない(何とかなる)ことを知りました。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/members/wami">わみさん&lt;/a>、ありがとうございます。&lt;/p>
&lt;p>今回は、NefryBTからGoogleDriveにデータをアップロード出来たので紹介したいと思います。&lt;/p>
&lt;p>おそらく&lt;strong>ESP32マイコン搭載モジュール&lt;/strong>であれば、同じ考えで出来ると思います。&lt;/p>
&lt;h2 id="heading">アップロードまでの手順&lt;/h2>
&lt;ol>
&lt;li>リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/li>
&lt;li>リフレッシュトークンから認証用のアクセストークンを取得する&lt;/li>
&lt;li>http POSTリクエストでデータをアップロードする&lt;/li>
&lt;/ol>
&lt;p>はい、とてもシンプルです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->httpを全く分からない私としてはここまでたどり着くまでかなり苦労しました・・・先人の方々が様々な実績を残してくれているのを本当に感謝しています。) &lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>もう少し詳しく説明します。&lt;/p>
&lt;p>&lt;a href="https://developers.google.com/drive/api/v3/about-sdk">Google Drive REST APIのサイト&lt;/a>を読みますと、まずGoogleDriveへアクセスするには認証用のアクセストークンが必要なこと、データをアップロードするときの&lt;a href="https://developers.google.com/drive/api/v3/multipart-upload">POSTリクエストの書き方&lt;/a>が決まっていることが分かります。&lt;/p>
&lt;p>そのためアクセストークンで認証を行いつつPOSTリクエストを投げれば、NefryBTからでもデータをアップロード出来ます。&lt;/p>
&lt;p>ここで一つ&lt;strong>トラップ&lt;/strong>があります。
アクセストークンの有効期限は3600秒(1時間)です。当初これを知らなかったので、&lt;!-- raw HTML omitted -->時間が経つとなぜか認証エラーになる問題&lt;!-- raw HTML omitted -->に悩まされました。&lt;/p>
&lt;p>回避策としてリフレッシュトークンからアクセストークンを取得するようにします。すると、アクセストークンが新しくなるので、認証もばっちり通ります。
つまり、&lt;!-- raw HTML omitted -->アクセストークンよりも再発行用のリフレッシュトークンが欲しい&lt;!-- raw HTML omitted -->のです。&lt;/p>
&lt;p>ではでは、具体的な手順を説明していきたいと思います。&lt;/p>
&lt;h3 id="1-">[手順1] リフレッシュトークンなど必要な情報を取得する(最初の一度だけ)&lt;/h3>
&lt;p>今回はNode.jsで取得します。&lt;/p>
&lt;p>公式サイトの&lt;a href="https://developers.google.com/drive/api/v3/quickstart/nodejs">Node.js Quickstart&lt;/a>に従って進めていきます。&lt;/p>
&lt;p>公式サイトにある「ENABLE THE DRIVE API」を押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/0ba2b731-7e29-2db2-7591-6ae56f1a7950.png" alt="OAuth0.PNG">&lt;/p>
&lt;p>するとOAuth2.0クライアントIDを作ってくれます。
続けて「DOWNLOAD CLIENT CONFIGURATION」を押してcredentials.jsonを取得します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/d4efa193-e36c-2e83-81f5-590cf105894a.png" alt="OAuth1.PNG">&lt;/p>
&lt;hr>
&lt;p>(補足)
例えばcredentials.jsonを削除してしまって、もう一度取得したい場合・・・
Google Cloud PlatformのAPI認証情報からダウンロードできます。&lt;/p>
&lt;p>左上のメニューを押して「APIとサービス」を押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/b26bff46-0dea-afba-38cd-51cb6ba8eb68.png" alt="OAuth2-1.PNG">&lt;/p>
&lt;p>認証情報の中に先ほど作成したクライアントIDがありますので、ダウンロードします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/901be3e5-b947-c290-e641-8db7dd075dcf.png" alt="OAuth2-2.PNG">&lt;/p>
&lt;p>※ファイル名は「client_secret_***.json」となっていますので「credentials.json」に変更します。&lt;/p>
&lt;hr>
&lt;p>次にNode.jsでアクセストークンなどの情報を取得します。(Node.jsやnpmが動く環境は用意されているものとします。)&lt;/p>
&lt;ul>
&lt;li>アクセストークンを取得するフォルダを用意して以下のモジュールをインストールします。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>npm install googleapis@27 --save
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>credentials.jsonも同じフォルダに移動させます。&lt;/li>
&lt;li>index.jsを作成します。公式サイトのままではスコープがReadOnlyになっているのでアップロードできるスコープに変更します。それ以外は全く同じです。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>[変更前]
const SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly'];
[変更後]
const SCOPES = ['https://www.googleapis.com/auth/drive'];
&lt;/code>&lt;/pre>&lt;p>スコープについて詳しくは&lt;a href="https://developers.google.com/drive/api/v2/about-auth">About Authorization&lt;/a>を参照ください。&lt;/p>
&lt;ul>
&lt;li>準備は整ったのでNode.jsを実行します。&lt;/li>
&lt;/ul>
&lt;p>１. credentials.json、index.jsなど一式入っているフォルダです。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/52fdf814-f643-1754-9a6c-2a6d9e3fe8bd.png" alt="AccessToken_0.PNG">&lt;/p>
&lt;p>２. nodeを実行します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/1ce7b76c-988e-fd6f-c863-eef96b1fa4ac.png" alt="AccessToken_1.PNG">&lt;/p>
&lt;p>３. URLが表示されるのでアクセスします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/64852163-ae0f-6156-6d7d-fac9e90c7a27.png" alt="AccessToken_2.PNG">&lt;/p>
&lt;p>４. 紐づけるGoogleアカウントを選択し、GoogleDriveへのアクセスを許可します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/dac52655-b356-073b-96bf-678c073897c1.png" alt="AccessToken_3.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/55cd28a0-da9b-e5ee-2b91-095030c96f37.png" alt="AccessToken_4.PNG">&lt;/p>
&lt;p>５. 最後に表示されるコードを上記3.の続きに貼り付けます。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/3fd64238-c27d-6412-23f9-d9754bec9ff9.png" alt="AccessToken_5.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/90f1683d-0731-25e9-e376-cdbb11156e2b.png" alt="AccessToken_6.PNG">&lt;/p>
&lt;p>６.無事token.jsonを取得できました。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/7aa8a2bb-b2d0-f5d0-787c-6f142da997a8.png" alt="AccessToken_7.PNG">&lt;/p>
&lt;h3 id="2-">[手順2] リフレッシュトークンから認証用のアクセストークンを取得する&lt;/h3>
&lt;p>アップロードに必要な情報は揃ったので、あとはNefryBTだけ触っていきます。&lt;/p>
&lt;p>リフレッシュトークンからアクセストークンを取得するhttp POSTリクエストは次の通りとなります。&lt;/p>
&lt;pre>&lt;code>[ヘッダー]
POST /oauth2/v4/token HTTP/1.1
Host: www.googleapis.com:443
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: [POSTするデータの長さ]
[POSTするデータ]
refresh_token=[リフレッシュトークン]&amp;amp;client_id=[クライアントID]&amp;amp;client_secret=[クライアントシークレット]&amp;amp;grant_type=refresh_token
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>クライアントIDとクライアントシークレットは「credentials.json」に書いてあります。もしくはGoogle Cloud PlatformのAPIの認証情報でも確認できます。&lt;/li>
&lt;li>リフレッシュトークンは「token.json」に書いてあります。&lt;/li>
&lt;/ul>
&lt;p>POSTリクエストを投げるとレスポンスがjson形式で返ってきます。&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;access_token&amp;quot;: &amp;quot;***&amp;quot;,
&amp;quot;expires_in&amp;quot;: 3600,
&amp;quot;scope&amp;quot;: &amp;quot;https://www.googleapis.com/auth/drive&amp;quot;,
&amp;quot;token_type&amp;quot;: &amp;quot;Bearer&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>access_token:***が取得したいアクセストークンになります。&lt;/p>
&lt;hr>
&lt;p>上記の内容をNefryBTで書くと次のようになります。&lt;/p>
&lt;p>※&lt;a href="https://github.com/NearMugi/NefrySample/tree/master/GoogleAPI/%23createLibrary/googleAPI/PostDrive">プログラムソース&lt;/a>のうち主要な部分を抜粋しています。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>リフレッシュトークン・クライアントID・クライアントシークレットは個人情報なので、直接プログラムソースに記載するのではなくNefryBTのDataStoreに登録します。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POSTするデータを設定します。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postData = &amp;quot;&amp;quot;;
postData += &amp;quot;refresh_token=&amp;quot; + refresh_token;
postData += &amp;quot;&amp;amp;client_id=&amp;quot; + client_id;
postData += &amp;quot;&amp;amp;client_secret=&amp;quot; + client_secret;
postData += &amp;quot;&amp;amp;grant_type=&amp;quot; + String(&amp;quot;refresh_token&amp;quot;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>ヘッダーを設定します。
データの長さはPOSTするデータ(postData)から算出します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postHeader = &amp;quot;&amp;quot;;
postHeader += (&amp;quot;POST &amp;quot; + token_uri + &amp;quot; HTTP/1.1\r\n&amp;quot;);
postHeader += (&amp;quot;Host: &amp;quot; + String(host) + &amp;quot;:&amp;quot; + String(httpsPort) + &amp;quot;\r\n&amp;quot;);
postHeader += (&amp;quot;Connection: close\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Type: application/x-www-form-urlencoded\r\n&amp;quot;);
postHeader += (&amp;quot;Content-Length: &amp;quot;);
postHeader += (postData.length());
postHeader += (&amp;quot;\r\n\r\n&amp;quot;);
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>POSTリクエストを投げてレスポンスを取得します。更にレスポンスからアクセストークンを取得します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String result = postRequest(host, postHeader, postData);
//取得したjsonデータからAccessTokenを取得する
const int BUFFER_SIZE = JSON_OBJECT_SIZE(4) + JSON_ARRAY_SIZE(1);
StaticJsonBuffer&amp;lt;BUFFER_SIZE&amp;gt; jsonBuffer;
char json[result.length() + 1];
result.toCharArray(json, sizeof(json));
JsonObject&amp;amp; root = jsonBuffer.parseObject(json);
const char* tmp = root[&amp;quot;access_token&amp;quot;];
token = tmp;
return token;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>POSTリクエストを行っているソース(&lt;code>postRequest&lt;/code>)です。正常に処理が終わればレスポンスを返します。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> String postRequest(const char* server, String header, String data) {
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
Serial.print(&amp;quot;Connecting to: &amp;quot;); Serial.println(server);
if (!client.connect(server, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return result;
}
Serial.println(&amp;quot;certificate matches&amp;quot;);
Serial.print(&amp;quot;post: &amp;quot;); Serial.println(header + data);
client.print(header + data);
Serial.println(&amp;quot;Receiving response&amp;quot;);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil('\r');
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
}
String line = client.readStringUntil('\r');
Serial.println(line);
result += line;
}
Serial.println(&amp;quot;closing connection&amp;quot;);
return result;
}
&lt;/code>&lt;/pre>&lt;p>だいたいこんな感じで無事アクセストークンを取得できました。&lt;/p>
&lt;h3 id="3-http-post">[手順3] http POSTリクエストでデータをアップロードする&lt;/h3>
&lt;p>いよいよデータをアップロードしてみます。今回はテキストファイルとJpegファイルのアップロード方法を紹介します。
公式サイトの&lt;a href="https://developers.google.com/drive/api/v3/manage-uploads">Uploading Files&lt;/a>によりますと、アップロード方法は3パターンあります。&lt;/p>
&lt;ul>
&lt;li>Simple upload&lt;/li>
&lt;li>Multipart upload&lt;/li>
&lt;li>Resumable upload&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Simple upload&amp;quot;の場合、アップロードしたファイル名は全て&amp;quot;untitled&amp;quot;となってしまい、具合がよろしくありません。
&amp;ldquo;Multipart upload&amp;quot;の場合、ファイルに様々な設定を付加できます。今回はファイル名・親フォルダの指定・コメントを設定しました。
(&amp;ldquo;Resumable upload&amp;quot;はどんなものか調べていません・・・)&lt;/p>
&lt;p>Multipart uploadのPOSTリクエストは次の通りです。&lt;/p>
&lt;pre>&lt;code>POST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart HTTP/1.1
Authorization: Bearer [YOUR_AUTH_TOKEN]
Content-Type: multipart/related; boundary=foo_bar_baz
Content-Length: [NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]
--foo_bar_baz
Content-Type: application/json; charset=UTF-8
{
&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;
}
--foo_bar_baz
Content-Type: image/jpeg
[JPEG_DATA]
--foo_bar_baz--
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>[YOUR_AUTH_TOKEN]はアクセストークンを設定します。&lt;/li>
&lt;li>[NUMBER_OF_BYTES_IN_ENTIRE_REQUEST_BODY]は &lt;strong>ヘッダーから最後のデータまですべてのサイズ&lt;/strong> となります。つまり最初のPOSTから最後の&amp;ndash;foo_bar_baz&amp;ndash;まで全てのサイズを設定します。これを間違えると正しくPOSTリクエストを投げることが出来ません。&lt;/li>
&lt;li>&lt;code>&amp;quot;name&amp;quot;: &amp;quot;myObject&amp;quot;&lt;/code> の部分がアップロードするファイルの設定を記載する部分となります。
何を設定できるかは&lt;a href="https://developers.google.com/drive/api/v3/reference/files">公式ページの&amp;quot;Files&amp;rdquo;&lt;/a>を参照ください。&lt;/li>
&lt;li>その下の&lt;code>Content-Type: image/jpeg&lt;/code> がアップロードするデータの形式となり、その次にデータの中身を記述していきます。&lt;/li>
&lt;li>最後に&lt;code>--foo_bar_baz--&lt;/code> で閉めます。&lt;/li>
&lt;/ul>
&lt;p>まとめますと、プログラムを書くとき毎回設定しなければならないのは次の4つです。&lt;/p>
&lt;ul>
&lt;li>アクセストークン&lt;/li>
&lt;li>POSTリクエスト全体のサイズ&lt;/li>
&lt;li>ファイルの設定(ファイル名・親フォルダ・コメント)&lt;/li>
&lt;li>ファイルの中身&lt;/li>
&lt;/ul>
&lt;h2 id="heading-1">テキストファイルをアップロードする&lt;/h2>
&lt;p>上記の仕様を踏まえてテキストファイルをアップロードする例を挙げます。この次に紹介するJpegファイルのアップロードと比べるとシンプルで分かりやすいと思います。&lt;/p>
&lt;ol>
&lt;li>POSTリクエストのファイルの指定周り(&lt;code>--foo_bar_baz&lt;/code>部分)を設定します。&lt;/li>
&lt;li>上記1.のあとPOSTリクエスト全体のサイズが分かるのでヘッダー(&lt;code>POST https://&lt;/code>部分)を設定します。&lt;/li>
&lt;li>上記1.と2.をPOSTします。&lt;/li>
&lt;li>データの中身をPOSTします。&lt;/li>
&lt;li>最後の&amp;rsquo;&amp;ndash;foo_bar_baz&amp;ndash;&amp;lsquo;をPOSTします。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> void postDrive_Text(String _fileName, String _textData, String _comment) {
uint8_t DataSize = _textData.length();
uint8_t postData[DataSize];
for (int i = 0; i &amp;lt; DataSize; i++) {
postData[i] = (uint8_t)_textData[i];
}
1. POSTリクエストのファイルの指定周りを設定
String start_request = getStartRequest_Text(_fileName, _comment);
2. ヘッダーを設定
uint16_t full_length;
full_length = start_request.length() + DataSize + end_request.length();
String postHeader = getPostHeader(full_length);
String result = &amp;quot;&amp;quot;;
// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure client;
if (!client.connect(host, httpsPort)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return ;
}
3. 1.と2.をPOST
client.print(postHeader + start_request);
4. データの中身をPOST
client.write(&amp;amp;postData[0] , DataSize);
5. --foo_bar_baz--をPOST
client.println(end_request);
if (client.connected()) {
if (client.find(&amp;quot;HTTP/1.1 &amp;quot;)) {
String status_code = client.readStringUntil('\r');
Serial.print(&amp;quot;Status code: &amp;quot;); Serial.println(status_code);
if (status_code != &amp;quot;200 OK&amp;quot;) {
Serial.println(&amp;quot;There was an error&amp;quot;);
}
}
if (client.find(&amp;quot;\r\n\r\n&amp;quot;)) {
Serial.println(F(&amp;quot;[Read Data]&amp;quot;));
} else {
Serial.println(F(&amp;quot;[WARNING] Response Data is Nothing&amp;quot;));
}
String line = client.readStringUntil('\r');
Serial.println(line);
result += line;
}
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-2">実際にテキストファイルをアップロードしている様子&lt;/h3>
&lt;p>１. アップロード先のフォルダを作成しておきます。親フォルダIDは「&lt;code>https://drive.google.com/drive/folders/***&lt;/code>」の***の部分です。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c32ed96f-9dc4-59cb-0eef-c1091b088397.png" alt="GoogleDrive_Text_0.PNG">&lt;/p>
&lt;p>２. NefryBTのセットアップが完了するのを待ちます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/699a3064-ec88-d560-2429-f5cab310ce9b.jpeg" alt="DSC_0003.JPG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/3b5bc537-b82a-eb2e-a751-077817386f7e.jpeg" alt="DSC_0005.JPG">&lt;/p>
&lt;p>３. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/cfafe65c-ebb7-d82c-e566-d47436cf7ee9.jpeg" alt="DSC_0006.JPG">&lt;/p>
&lt;p>４. 成功しました！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/97de4845-f602-0aa5-26ac-064cd47609be.jpeg" alt="DSC_0007.JPG">&lt;/p>
&lt;p>５. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/72fae28e-6ac8-4fca-e940-265031c2c8cf.png" alt="GoogleDrive_Text_1.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/5b5cb82b-7dd1-d3e4-bf3b-bb60bfffdb1a.png" alt="GoogleDrive_Text_2.PNG">&lt;/p>
&lt;h2 id="jpeg">Jpegファイルをアップロードする&lt;/h2>
&lt;p>続いてJpegファイルをアップロードする方法です。&lt;strong>ここからかなり込み入った内容になります。&lt;/strong>
今回JpegファイルにしてアップロードしたものはNefryBTに接続したカメラモジュールで撮った画像となります。そのためカメラモジュールの話とGoogleDriveへアップロードする話が混在しますのでご了承ください・・・&lt;/p>
&lt;h3 id="heading-3">カメラモジュールについて&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/eeaaa02a-2c36-b131-aa32-eeacef9abb63.jpeg" alt="ArduCAM.jpg">&lt;/p>
&lt;p>使用したカメラモジュールは&lt;a href="https://www.switch-science.com/catalog/3780/">Arducam Miniモジュール(2メガピクセル)&lt;/a>です。ESP32向けのサンプルがあったので動かせるだろうと思って選びました。
(NefryBTのことを考えれば&lt;a href="https://www.switch-science.com/catalog/1626/">Groveのカメラ&lt;/a>でも良かったとあとで気づきました・・・)&lt;/p>
&lt;p>初期設定やカメラモジュールからデータを取得するところは&lt;a href="https://github.com/NearMugi/NefrySample/tree/master/ArduCAM/OV2640">プログラムソース&lt;/a>を参照ください。&lt;/p>
&lt;p>厄介なのは&lt;strong>取得したデータ全てがJpegデータではない&lt;/strong>ことです。このカメラモジュールの場合、1バイト目に0x00が入っています。これ、要らないデータなのです。きちんとJpegファイルにあたるデータをアップロードしないと正しく表示されません。&lt;/p>
&lt;p>&lt;a href="https://www.setsuki.com/hsp/ext/jpg.htm">Jpegファイル&lt;/a>は開始位置(0xFFD8)と終了位置(0xFFD9)が決まっています。この範囲のデータだけをアップロードすればJpegファイルとして正しく表示されます。&lt;/p>
&lt;h3 id="heading-4">プログラムのポイント&lt;/h3>
&lt;p>カメラモジュールの仕様を踏まえてアップロードします。&lt;/p>
&lt;ul>
&lt;li>Jpegファイルのデータサイズは何十万バイトと膨大なので全て変数に入れて一括でPOSTすることはできません。そのためデータを分割してカメラモジュールから取得、POSTを繰り返します。&lt;/li>
&lt;li>POSTリクエスト全体のサイズとJpegファイルのサイズが異なるので、&lt;strong>POSTリクエスト全体のサイズに足りない分を最後に0x00をPOSTする&lt;/strong>ことで整合性を合わせています。&lt;/li>
&lt;/ul>
&lt;p>プログラムソースを抜粋します。&lt;/p>
&lt;pre>&lt;code>// ReadSizeはカメラモジュールで取得したデータサイズ
//GoogleDriveへポスト
String start_request = api.getStartRequest_Jpeg(&amp;quot;Capture&amp;quot;, &amp;quot;From ArduCam&amp;quot;);
String end_request = api.getEndRequest();
uint32_t full_length;
full_length = start_request.length() + ReadSize + end_request.length();
String postHeader = api.getPostHeader(full_length);
(中略)
client.print(postHeader + start_request);
//JPEGデータ
static const size_t bufferSize = 2048;
static uint8_t buffer[bufferSize] = {0xFF};
uint32_t index = 0;
uint32_t sizeCnt = 0;
uint8_t now = 0;
uint8_t prev = 0;
myCAM.CS_LOW();
myCAM.set_fifo_burst();
カメラモジュールのデータをPOSTしている部分
bool isHeader = false;
while (ReadSize--) {
prev = now;
now = SPI.transfer(0x00);
//ヘッダーを探す(0xFF,0xD8)
if (!isHeader) {
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD8) {
Serial.println(F(&amp;quot;JPEG First Data is Found&amp;quot;));
buffer[0] = 0xFF;
buffer[1] = 0xD8;
index = 2;
sizeCnt = 2;
isHeader = true;
}
continue;
}
//ヘッダーが見つかったあと
sizeCnt++;
// JPEGファイルの最後を検出したら終了(0xFF,0xD9)
if (prev == 0xFF &amp;amp;&amp;amp; now == 0xD9) {
Serial.println(F(&amp;quot;JPEG Last Data is Found&amp;quot;));
buffer[index++] = now;
client.write(&amp;amp;buffer[0], index);
myCAM.CS_HIGH();
break;
}
if (index &amp;lt; bufferSize) {
buffer[index] = now;
index++;
} else {
if (!client.connected()) break;
client.write(&amp;amp;buffer[0], bufferSize);
index = 0;
buffer[index++] = now;
}
}
myCAM.CS_HIGH();
ReadSize += 1;
Serial.print(F(&amp;quot;JPEG Data Size: &amp;quot;)); Serial.println(sizeCnt);
Serial.print(F(&amp;quot;Remaining Data Size: &amp;quot;)); Serial.println(ReadSize);
client.println(end_request);
POSTリクエスト全体のサイズを調整している部分
//バッファーメモリサイズと画像サイズが異なるため、full_lengthに達していない。
//足りない分の帳尻を合わせる
uint8_t tmpbuf[ReadSize] = {0x00};
client.write(&amp;amp;tmpbuf[0], ReadSize);
(以下、省略)
}
&lt;/code>&lt;/pre>&lt;h3 id="jpeg-1">実際にJpegファイルをアップロードしている様子&lt;/h3>
&lt;p>１. アップロード先のフォルダはテキストファイルと同じところにします。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/2660eda8-1474-644d-fae2-bba8b87c502d.png" alt="GoogleDrive_Jpeg_0.PNG">&lt;/p>
&lt;p>２. カメラで撮ってみます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c25e4a34-5b9c-44ff-3f78-b390c2c492de.jpeg" alt="DSC_0015.JPG">&lt;/p>
&lt;p>３. NefryBTのセットアップが完了するのを待ちます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/91963234-adc5-7317-654b-41dbd6b8b9ca.jpeg" alt="DSC_0010.JPG">
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/a85255a7-e375-2d75-c7d0-4d126e66b60f.jpeg" alt="DSC_0012.JPG">&lt;/p>
&lt;p>４. セットアップが完了したらNefryBTについているボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/6e91d9ac-0e56-6df0-062b-2d158fd75b3e.jpeg" alt="DSC_0013.JPG">&lt;/p>
&lt;p>５. 成功しました！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/c7291283-ac2a-feb9-d924-9c23963058b1.jpeg" alt="DSC_0014.JPG">&lt;/p>
&lt;p>６. GoogleDriveを見てみるとしっかりとアップロードされています！&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/b9ed65c6-185b-a57c-1877-1bb079b2400f.png" alt="GoogleDrive_Jpeg_1.PNG">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/237144/fac4420d-d91a-3849-f71c-b17ab86d842f.png" alt="GoogleDrive_Jpeg_2.PNG">&lt;/p>
&lt;h2 id="heading-5">参考にしたサイト&lt;/h2>
&lt;p>大変助かりました。&lt;/p>
&lt;p>*&lt;a href="https://github.com/jalmeroth/ESP8266-OAUTH2/blob/master/ESP8266-OAUTH2/ESP8266-OAUTH2.ino">jalmeroth/ESP8266-OAUTH2&lt;/a>&lt;/p>
&lt;p>*&lt;a href="https://himakan.net/websites/how_to_google_oauth">Google APIを使用するためにGoogle OAuth認証をしようよ&lt;/a>&lt;/p>
&lt;p>*&lt;a href="https://zudoh.com/trouble-shooting/google-oauth-expired">時間が立つとGoogle APIのOAuth認証に失敗する&lt;/a>&lt;/p>
&lt;p>*&lt;a href="http://indoor.lolipop.jp/IndoorCorgiElec/ESP-SensorCam.php">ESP-SensorCam&lt;/a>&lt;/p>
&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>NefryBTから直接GoogleDriveにアクセスできたときは感動しました！こんな小さなボードがネットに繋がるなんて！&lt;/p>
&lt;p>またGmailやスプレッドシートなどの他のアプリケーションにもアクセスできると思います。面白い組み合わせがあるかもしれません。&lt;/p>
&lt;p>みなさんのIoTライフの参考になれば幸いです。ではでは。&lt;/p></description></item><item><title>VuePressのブログをカスタムドメイン+SSL対応させたGitLab Pagesにデプロイする</title><link>https://dotstud.io/blog/gitlab-vuepress-custom-domain/</link><pubDate>Wed, 30 Jan 2019 10:47:09 +0900</pubDate><guid>https://dotstud.io/blog/gitlab-vuepress-custom-domain/</guid><description>&lt;p>こんにちは、最近スパにハマっている&lt;a href="https://twitter.com/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>今日はタイトル通り&lt;strong>VuePressで作ったブログをGitLab Pagesに乗せてカスタムドメイン+SSL対応していきます。&lt;/strong> 2019年1月時点版です。UIなどはガンガン変わっていくと思いますので適宜読み替えましょう。&lt;/p>
&lt;p>過去に書いたこの記事とは別のサイトの運用話です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>気持ち的にHugoブログもVuePressに移行したいと思っている感じですね。&lt;/p>
&lt;h2 id="gitlab-pages">GitLab Pagesの基本&lt;/h2>
&lt;p>GitLab PagesはGitLabで利用できる無料ホスティング環境です。&lt;/p>
&lt;p>GitHub PagesのGitLab版って認識で大丈夫です。&lt;/p>
&lt;h3 id="gitlab-pages-1">GitLab Pagesでサイト公開の仕方&lt;/h3>
&lt;ul>
&lt;li>publicフォルダを作成します。&lt;/li>
&lt;/ul>
&lt;p>リポジトリのルートに&lt;code>public&lt;/code>フォルダを作成して、その中にindex.htmlや関連するcssやjsファイルなどを入れていきます。基本的には&lt;code>public/index.html&lt;/code>がプロジェクトのトップページとして認識されます。&lt;/p>
&lt;ul>
&lt;li>.gitlab-ci.ymlを作成します。&lt;/li>
&lt;/ul>
&lt;p>リポジトリのルート（&lt;code>public&lt;/code>フォルダと同じ階層）に&lt;code>.gitlab-ci.yml&lt;/code>を作成します。&lt;/p>
&lt;pre>&lt;code>pages:
stage: deploy
script:
- echo 'Nothing to do...'
artifacts:
paths:
- public
only:
- master
&lt;/code>&lt;/pre>&lt;p>あとはGitLabのリポジトリにプッシュするだけです。
この場合masterブランチにプッシュすると更新されます。&lt;/p>
&lt;p>ファイル構成はイメージはこんな感じです。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/1.png" alt="">&lt;/p>
&lt;p>&lt;code>.gitlab-ci.yml&lt;/code>がある状態でGitLabのリポジトリにプッシュするとCIが動いてごにょごにょやってくれます。&lt;/p>
&lt;ul>
&lt;li>https://&amp;lt;ユーザー名&amp;gt;.gitlab.io/&amp;lt;リポジトリ名&amp;gt; にアクセス&lt;/li>
&lt;/ul>
&lt;p>&lt;code>https://&amp;lt;ユーザー名&amp;gt;.gitlab.io/&amp;lt;リポジトリ名&amp;gt;&lt;/code>が公開URLです。&lt;/p>
&lt;p>GitLabのリポジトリのURLが&lt;code>https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;&lt;/code>となっているので適宜読み替えましょう。&lt;/p>
&lt;p>&lt;strong>例えば、リポジトリのURLが&lt;code>https://gitlab.com/n0bisuke/akihabara&lt;/code>だとしたら、公開用のGitLab PagesのURLは&lt;code>https://n0bisuke.gitlab.io/akihabara&lt;/code>になります。&lt;/strong>&lt;/p>
&lt;p>プッシュしてから更新まで数分時間が掛かることがあるので少し経ってからまた確認してみましょう。&lt;/p>
&lt;p>うまくいかない場合は&lt;code>https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;/-/jobs&lt;/code>に行くとジョブの確認が出来るので、エラーなどを確認してみましょう。&lt;/p>
&lt;h2 id="vuepressgitlab-pages">VuePressをGitLab Pagesにデプロイ&lt;/h2>
&lt;p>先ほどの利用したGitLab CIを利用します。&lt;/p>
&lt;p>&lt;a href="https://vuepress.vuejs.org/">VuePress&lt;/a>はVue.jsの作者が作ったVue.js製の静的サイトジェネレータです。&lt;/p>
&lt;p>公式のドキュメントに、&lt;a href="https://vuepress.vuejs.org/guide/deploy.html#gitlab-pages-and-gitlab-ci">VuePressをGitLab PagesとGitLab CIにデプロイする方法&lt;/a>が載っていますが、個人的には以下の2ステップだけで問題ないと思います。&lt;/p>
&lt;h3 id="1-vuepressconfigjs">1. VuePressのconfig.jsの設定&lt;/h3>
&lt;p>&lt;code>docs/.vuepress/config.js&lt;/code>の中に&lt;code>base&lt;/code>というキーがあります。
ここにリポジトリ名をパスとして設定してあげます。&lt;/p>
&lt;p>例えば&lt;code>https://gitlab.com/n0bisuke/hogehoge&lt;/code>というリポジトリで&lt;code>https://n0bisuke.gitlab.io/hogehoge&lt;/code>という公開URLになる場合は、&lt;code>base&lt;/code>の箇所を&lt;code>/hogehoge/&lt;/code>にしましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/2.png" alt="">&lt;/p>
&lt;p>後述しますが、もし、この後の手順のカスタムドメインまでを設定するならばここの&lt;code>base&lt;/code>は&lt;code>/&lt;/code>の設定のままで大丈夫です。&lt;/p>
&lt;h3 id="2-gitlab-ciyml">2. &lt;code>.gitlab-ci.yml&lt;/code>の記述&lt;/h3>
&lt;p>以下のyml記述だけで完了です。プッシュして&lt;code>https://n0bisuke.gitlab.io/hogehoge&lt;/code>(自分の環境に読み替え)などにアクセスして確認しましょう。&lt;/p>
&lt;pre>&lt;code>image: node:current-alpine
pages:
cache:
paths:
- node_modules/
before_script:
- node -v
- npm i
script:
- npm run docs:build
- cp -pr docs/.vuepress/dist public
artifacts:
paths:
- public
only:
- master
&lt;/code>&lt;/pre>&lt;p>デフォルトのチュートリアル通りだとビルドのコマンドが&lt;code>npm run docs:build&lt;/code>になっているはずなので、プッシュするとCI環境側で&lt;code>npm run docs:build&lt;/code>でビルドして、ビルド後のdistフォルダをpublicフォルダにコピー、その後publicフォルダをGitLab Pagesとしてデプロイします。&lt;/p>
&lt;p>公式ドキュメントにはビルド先のフォルダをdistではなくpublicにする設定などがありましたが、この記述でも問題ないです。&lt;/p>
&lt;h2 id="--ssl">カスタムドメインの利用 &amp;amp; SSL対応&lt;/h2>
&lt;p>現状で、&lt;code>https://n0bisuke.gitlab.io/hogehoge&lt;/code>というアドレスが公開URLになっているものを&lt;code>https://hogehoge.dotstud.io&lt;/code>でアクセスさせるようにしていきます。&lt;/p>
&lt;p>&lt;a href="https://www.cloudflare.com/">Cloudflare&lt;/a>を利用します。&lt;/p>
&lt;p>&lt;a href="https://letsencrypt.org/">Let's Encrypt&lt;/a>を利用する手もあるのですが、更新の手間があるのと既にdotstud.ioでCloudflareを使ってDNSやSSL設定をしていたので&lt;strong>Cloudflareを利用してのGitLab Pagesのカスタムドメイン&amp;amp;SSL対応を紹介&lt;/strong>します。&lt;/p>
&lt;p>GitLab公式の&lt;a href="https://about.gitlab.com/2017/02/07/setting-up-gitlab-pages-with-cloudflare-certificates/">Setting up GitLab Pages with CloudFlare Certificates&lt;/a>を見ながら試してみました。&lt;/p>
&lt;p>&lt;strong>DNSのAレコードをGitLab Pagesに向けることも出来るみたいですが、今回はCNAMEでサブドメインをリダイレクトさせる形にします。&lt;/strong>&lt;/p>
&lt;h3 id="1-">1. 証明書の作成&lt;/h3>
&lt;p>CloudflareのCrypto画面を開きます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/3.png" alt="">&lt;/p>
&lt;p>&lt;code>Origin Certificates&lt;/code>の項目にある&lt;code>Create Certificate&lt;/code>(証明書の作成)の青いボタンを押します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/4.png" alt="">&lt;/p>
&lt;p>モーダルウィンドウが開かれますが、&lt;code>List the hostnames&lt;/code>の箇所だけ変更して、利用したいドメイン名を記述して、NEXTボタンで進みましょう。&lt;/p>
&lt;p>今回は&lt;code>https://hogehoge.dotstud.io&lt;/code>でアクセスしたいので、ここには&lt;code>hogehoge.dotstud.io&lt;/code>などのドメイン名だけを入力しておきます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/5.png" alt="">&lt;/p>
&lt;p>これで証明書の文字列が生成されます。
&lt;code>Ker format&lt;/code>はデフォルトの&lt;code>PEM&lt;/code>のままで大丈夫です。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/6.png" alt="">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Origin certificate&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Private key&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>この二種類の文字列をあとで使うのでコピーしておきましょう。&lt;/strong>&lt;/p>
&lt;h3 id="2-gitlab-pages">2. GitLab Pagesに設定する&lt;/h3>
&lt;p>GitLabのリポジトリ設定画面からPagesの設定画面に行きます。&lt;/p>
&lt;p>&lt;code>https://gitlab.com/&amp;lt;ユーザー名&amp;gt;/&amp;lt;リポジトリ名&amp;gt;/pages&lt;/code>が設定画面です。&lt;/p>
&lt;p>ここから&lt;code>New Domain&lt;/code>ボタンを押してカスタムドメインの設定をします。&lt;/p>
&lt;p>また、この際に&lt;code>Force domains with SSL certificates to use HTTPS&lt;/code>のチェックがありますが、SSL対応させるのでデフォルトのままチェックしておきましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/7.png" alt="">&lt;/p>
&lt;p>&lt;code>Domain&lt;/code>の項目に設定したいカスタムドメイン（今回は&lt;code>hogehoge.dotstud.io&lt;/code>）を設定します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/8.png" alt="">&lt;/p>
&lt;p>以下の二箇所には先ほどのCloudflareで生成した証明書文字列を指定します。&lt;/p>
&lt;ul>
&lt;li>Certificate (PEM): &lt;code>Origin certificate&lt;/code>の文字列&lt;/li>
&lt;li>Key (PEM): &lt;code>Private key&lt;/code>の文字列&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>----BEGIN CERTIFICATE----&lt;/code>などの文字を含めて全部コピペしましょう。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/9.png" alt="">&lt;/p>
&lt;p>ここにさらにCloudflareの証明書の文字列が必要になります。&lt;a href="https://support.cloudflare.com/hc/en-us/articles/218689638">CloudFlare's Origin CA — RSA Root&lt;/a>というらしいです。&lt;/p>
&lt;p>以下の文字列(CloudFlare's Origin CA)をコピーしましょう。&lt;/p>
&lt;pre>&lt;code>-----BEGIN CERTIFICATE-----
MIID/DCCAuagAwIBAgIID+rOSdTGfGcwCwYJKoZIhvcNAQELMIGLMQswCQYDVQQG
EwJVUzEZMBcGA1UEChMQQ2xvdWRGbGFyZSwgSW5jLjE0MDIGA1UECxMrQ2xvdWRG
bGFyZSBPcmlnaW4gU1NMIENlcnRpZmljYXRlIEF1dGhvcml0eTEWMBQGA1UEBxMN
U2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZvcm5pYTAeFw0xNDExMTMyMDM4
NTBaFw0xOTExMTQwMTQzNTBaMIGLMQswCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xv
dWRGbGFyZSwgSW5jLjE0MDIGA1UECxMrQ2xvdWRGbGFyZSBPcmlnaW4gU1NMIENl
cnRpZmljYXRlIEF1dGhvcml0eTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEG
A1UECBMKQ2FsaWZvcm5pYTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
AMBIlWf1KEKR5hbB75OYrAcUXobpD/AxvSYRXr91mbRu+lqE7YbyyRUShQh15lem
ef+umeEtPZoLFLhcLyczJxOhI+siLGDQm/a/UDkWvAXYa5DZ+pHU5ct5nZ8pGzqJ
p8G1Hy5RMVYDXZT9F6EaHjMG0OOffH6Ih25TtgfyyrjXycwDH0u6GXt+G/rywcqz
/9W4Aki3XNQMUHNQAtBLEEIYHMkyTYJxuL2tXO6ID5cCsoWw8meHufTeZW2DyUpl
yP3AHt4149RQSyWZMJ6AyntL9d8Xhfpxd9rJkh9Kge2iV9rQTFuE1rRT5s7OSJcK
xUsklgHcGHYMcNfNMilNHb8CAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgAGMBIGA1Ud
EwEB/wQIMAYBAf8CAQIwHQYDVR0OBBYEFCToU1ddfDRAh6nrlNu64RZ4/CmkMB8G
A1UdIwQYMBaAFCToU1ddfDRAh6nrlNu64RZ4/CmkMAsGCSqGSIb3DQEBCwOCAQEA
cQDBVAoRrhhsGegsSFsv1w8v27zzHKaJNv6ffLGIRvXK8VKKK0gKXh2zQtN9SnaD
gYNe7Pr4C3I8ooYKRJJWLsmEHdGdnYYmj0OJfGrfQf6MLIc/11bQhLepZTxdhFYh
QGgDl6gRmb8aDwk7Q92BPvek5nMzaWlP82ixavvYI+okoSY8pwdcVKobx6rWzMWz
ZEC9M6H3F0dDYE23XcCFIdgNSAmmGyXPBstOe0aAJXwJTxOEPn36VWr0PKIQJy5Y
4o1wpMpqCOIwWc8J9REV/REzN6Z1LXImdUgXIXOwrz56gKUJzPejtBQyIGj0mveX
Fu6q54beR89jDc+oABmOgg==
-----END CERTIFICATE-----
&lt;/code>&lt;/pre>&lt;p>&lt;strong>この&lt;code>CloudFlare's Origin CA&lt;/code>をコピーしたら、先ほど&lt;code>Certificate (PEM)&lt;/code>のフォームに入れ込んだ文字列の後ろに改行をいれて、&lt;code>CloudFlare's Origin CA&lt;/code>を貼り付けます。&lt;/strong>&lt;/p>
&lt;p>この画面のような感じです。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/10.png" alt="">&lt;/p>
&lt;p>ここまで出来たら、ページ下部の&lt;code>Create New Domain&lt;/code>のボタンを押して進みましょう。&lt;/p>
&lt;h3 id="3-dns">3. DNSの設定&lt;/h3>
&lt;p>無事に作成出来ると、以下のような確認画面になります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/11.png" alt="">&lt;/p>
&lt;p>この画面の指示にしたがってCloudflareのDNS設定画面でCNAMEとTXTレコードを設定してあげる必要があります。&lt;/p>
&lt;h4 id="cname">CNAMEレコード設定&lt;/h4>
&lt;p>まずはCNAMEレコードです。 以下のように設定します。&lt;/p>
&lt;ul>
&lt;li>Type: CNAME&lt;/li>
&lt;li>Name: 利用したいカスタムドメイン名&lt;/li>
&lt;li>Value: &amp;lt;ユーザー名&amp;gt;.gitlab.io&lt;/li>
&lt;/ul>
&lt;p>例えば&lt;code>https://hogehoge.dotstud.io&lt;/code>にしたい場合は&lt;strong>Name&lt;/strong>を&lt;code>hogehoge&lt;/code>にし、元々のGitLabリポジトリが&lt;code>https://n0bisuke.gitlab.io/hogehoge&lt;/code>などであれば,&lt;strong>Value&lt;/strong>を&lt;code>n0bisuke.gitlab.io&lt;/code>にします。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/12.png" alt="">&lt;/p>
&lt;p>これで&lt;code>https://hogehoge.dotstud.io&lt;/code>にアクセスした際に&lt;code>https://n0bisuke.gitlab.io&lt;/code>側にリダイレクトされるようになります。&lt;/p>
&lt;h4 id="txt">TXTレコード設定（所有者確認）&lt;/h4>
&lt;p>GitLab側から見ると&lt;code>hogehoge.dotstud.io&lt;/code>をそのユーザーが所有しているか分からないため、所有権の確認作業が発生します。&lt;/p>
&lt;p>GitLabの設定画面に&lt;code>Verification status&lt;/code>の箇所に&lt;code>_gitlab-pages-verification-code.hogehoge.dotstud.io TXT gitlab-pages-verification-code=xxxxxxxxxxxxxxxxxx&lt;/code>などの文字列が表示されていることが分かります。この情報をCloudflareに登録してあげればOKです。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/13.png" alt="">&lt;/p>
&lt;p>登録が出来たら、おそらく赤くなっているUnverifiedのボタンを押して確認しましょう。
上手くいくとこんな感じで&lt;code>Successfully verified&lt;/code>などの文字が表示されます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/14.png" alt="">&lt;/p>
&lt;h3 id="4-ssl">4. SSLの設定&lt;/h3>
&lt;p>CloudflareのCrypto画面からSSLの設定が出来ます。&lt;code>Full&lt;/code>もしくは&lt;code>Full(strict)&lt;/code>にしておきましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/239/14.png" alt="">&lt;/p>
&lt;p>あとは、ドメインが浸透したりするのを少し待ちましょう。&lt;/p>
&lt;p>&lt;code>https://hogehoge.dotstud.io&lt;/code>にアクセすると&lt;code>https://n0bisuke.gitlab.io/hogehoge&lt;/code>に内部的にリダイレクトされるようになりました。&lt;/p>
&lt;h3 id="5-vuepress">5. VuePressの設定を戻す&lt;/h3>
&lt;p>先ほどの紹介で、VuePressをGitLab Pagesで公開する際に&lt;code>docs/.vuepress/config.js&lt;/code>の&lt;code>base&lt;/code>キーを&lt;code>/リポジトリ名/&lt;/code>とする紹介がありましたが、カスタムドメインまでやった人は&lt;code>base&lt;/code>キーを&lt;code>/&lt;/code>に戻しておいてください。&lt;/p>
&lt;p>&lt;strong>ここの設定を間違えるとCSSやJSが上手く読み込まれなくなってしまいます。&lt;/strong>&lt;/p>
&lt;h2 id="heading">まとめ&lt;/h2>
&lt;p>如何でしょう。GitLab Pagesや周辺ツール/サービスを活用して無料でカスタムドメイン+SSLのVuePressブログを作ることが出来ました。&lt;/p>
&lt;p>この辺のことを試す際の参考になれば幸いです。&lt;/p></description></item><item><title>Let's 顔面製造！第二弾！ 歌うサンタ顔面ロボットを作ろう</title><link>https://dotstud.io/blog/face-robot-making-basic2/</link><pubDate>Wed, 30 Jan 2019 04:43:15 +0900</pubDate><guid>https://dotstud.io/blog/face-robot-making-basic2/</guid><description>&lt;p>みなさん、こんにちは！&lt;a href="https://dotstud.io/members/maruko">へっぽこまるこ&lt;/a>です！&lt;/p>
&lt;p>今回は、クリスマスをいい感じに盛り上げてくれるサンタ（っぽい）ロボットを
&lt;strong>obnizとgoogle home mini&lt;/strong>でつくってみました！&lt;/p>
&lt;p>少し遅めの（めっちゃ早めの）サンタクロースをご覧あれ〜！&lt;/p>
&lt;p>以前に「&lt;a href="https://dotstud.io/blog/face-robot-making-basic/">Let's 顔面製造！ダンボールとサーボモータで喋る顔面ロボットを作ろう&lt;/a>」でつくった顔面ロボット（的なもの）を改造して作ってみます！&lt;/p>
&lt;h2 id="heading">完成イメージ&lt;/h2>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=zyrQC8Du9b0">&lt;img src="http://img.youtube.com/vi/zyrQC8Du9b0/0.jpg" alt="画像が表示できません">&lt;/a>&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->※LEDが結構強めに光っているので閲覧にはご注意ください&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>obnizでgoogle-home-notifierを使ってgoogle home miniから音源を再生します。
google-home-notifierは、&lt;strong>スキル開発なしでgoogle homeにテキストを読ませたり、MP3などの音源が再生できたりするnode.jsのライブラリ&lt;/strong>です。&lt;/p>
&lt;p>再生された曲に連動して下唇に仕込んだサーボモータを動かして、
歌ってる感じにしてみます。&lt;/p>
&lt;h2 id="heading-1">つくってみよう&lt;/h2>
&lt;h3 id="heading-2">&lt;/h3>
&lt;ul>
&lt;li>obniz&lt;/li>
&lt;li>sg90（顔面ロボの流用）&lt;/li>
&lt;li>LED（顔面ロボの流用）&lt;/li>
&lt;li>顔デバイス（顔面ロボの流用）&lt;/li>
&lt;li>ジャンパワイヤー（顔面ロボの流用）&lt;/li>
&lt;li>切ないクリスマスソングの音源&lt;/li>
&lt;li>白のファー生地や赤いフェルトなど（デバイス装飾用）&lt;/li>
&lt;/ul>
&lt;p>macOS High Sierraの環境で進めます。&lt;/p>
&lt;h3 id="heading-3">サンタデバイス準備&lt;/h3>
&lt;p>顔面デバイスをデコります。
毛足10cm程度のファー生地を裂いたものと、
赤いフェルトで適当につくった帽子をくっつけます。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/115325/56e1e21b-16cd-4d5e-0bdf-f8b8afdf4dba.jpeg" alt="IMG_2790.JPG">&lt;/p>
&lt;p>サーボモータとLEDをobnizに接続します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/115325/daae1da4-7ee0-dd52-978e-e64c46026a01.png" alt="obniz_servo_led.png">&lt;/p>
&lt;h3 id="heading-4">ライブラリやら準備&lt;/h3>
&lt;p>node.jsがインストールされてる前提で進めます。&lt;/p>
&lt;p>ターミナルで以下のコマンドを叩きます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">//ディレクトリ作成&amp;amp;移動
$ mkdir santa
$ cd santa
//google-home-notifierとobnizのライブラリをインストール
$ npm install google-home-notifier
$ npm install obniz
//メインのプログラムファイルを作成
$ touch face.js
//音源格納用ディレクトリを作成
$ mkdir audio　
&lt;/code>&lt;/pre>&lt;/div>&lt;p>audioフォルダには音源のkurisumasusong.mp3を格納しておきます。&lt;/p>
&lt;h3 id="heading-5">音源準備&lt;/h3>
&lt;p>google-home-notifierを使って簡単に曲を再生するには、
クリスマスソングが入ったMP3をネットにアップして、
URLを取得する必要があります。&lt;/p>
&lt;p>今回は、&lt;a href="https://qiita.com/n0bisuke/items/0c09ae5da43b551e98b1#%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B">n0bisuk先生のハンズオン&lt;/a>で教えてもらった
ngork+pythonを使った方法でホスティングします。&lt;/p>
&lt;p>santa ディレクトリ配下で作業します。&lt;/p>
&lt;pre>&lt;code>$ python -m SimpleHTTPServer 8080
&lt;/code>&lt;/pre>&lt;p>別タブで以下を実行します。&lt;/p>
&lt;pre>&lt;code>$ cd santa
$ ngrok http 8080
&lt;/code>&lt;/pre>&lt;p>実行結果です。&lt;/p>
&lt;pre>&lt;code>ngrok by @inconshreveable (Ctrl+C to quit)
Session Status online
Account nougami (Plan: Free)
Version 2.2.8
Region United States (us)
Web Interface http://127.0.0.1:4040
Forwarding http://84019d5b.ngrok.io -&amp;gt; localhost:8080
Forwarding https://84019d5b.ngrok.io -&amp;gt; localhost:8080
Connections ttl opn rt1 rt5 p50 p90
57 0 0.00 0.00 6.51 8.91
HTTP Requests
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://84019d5b.ngrok.io/audio/kurisumasusong.mp3">https://84019d5b.ngrok.io/audio/kurisumasusong.mp3&lt;/a> が音源ファイルのURLになります。&lt;/p>
&lt;h2 id="heading-6">へっぽこプログラム&lt;/h2>
&lt;p>node.jsでプログラムを書きます。
（async/awaitはまだ勉強中・・・）&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript:face.js" data-lang="javascript:face.js">
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">googlehome&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;google-home-notifier&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">language&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ja&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Obniz&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;obniz&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Obniz&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;××××-××××&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">onconnect&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mouth&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wired&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ServoMotor&amp;#34;&lt;/span>, {&lt;span style="color:#a6e22e">signal&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">vcc&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">gnd&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>});
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">leftLed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wired&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;LED&amp;#34;&lt;/span>, { &lt;span style="color:#a6e22e">anode&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#a6e22e">cathode&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span> });
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">rigthLed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wired&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;LED&amp;#34;&lt;/span>, { &lt;span style="color:#a6e22e">anode&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#a6e22e">cathode&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span> });
&lt;span style="color:#a6e22e">mouthMove&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">maxDeg&lt;/span>, &lt;span style="color:#a6e22e">maxDegWait&lt;/span>, &lt;span style="color:#a6e22e">minDeg&lt;/span>, &lt;span style="color:#a6e22e">minDegWait&lt;/span>) {
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouth&lt;/span>.&lt;span style="color:#a6e22e">angle&lt;/span>(&lt;span style="color:#a6e22e">maxDeg&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#a6e22e">maxDegWait&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouth&lt;/span>.&lt;span style="color:#a6e22e">angle&lt;/span>(&lt;span style="color:#a6e22e">minDeg&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#a6e22e">minDegWait&lt;/span>);
}
&lt;span style="color:#a6e22e">singMouth&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#75715e">//init
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">1300&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#75715e">//く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//り
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ま
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//きゃ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">120&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">900&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//な
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//れ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//こ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//に
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//は
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">1300&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//き
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//と
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ぼ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//の
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//こ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">170&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//た
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">170&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//え
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">170&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//も
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//き
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//と
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//で
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//て
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//だ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//あ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">800&lt;/span>, &lt;span style="color:#ae81ff">5.0&lt;/span>, &lt;span style="color:#ae81ff">600&lt;/span>);
&lt;span style="color:#75715e">//く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//り
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ま
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">80&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//きゃ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">120&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">900&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//な
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//が
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//れ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//こ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ろ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//に
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//は
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">1300&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//だ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//れ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//を
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//あ
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//し
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//て
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//る
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//の
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//か
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">30.0&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>);
&lt;span style="color:#75715e">//い
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//ま
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//は
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">500&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//み
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//え
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//な
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">20.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">20.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//て
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//も
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">40.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">//お
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouthMove&lt;/span>(&lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>, &lt;span style="color:#ae81ff">50.0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">49&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">&amp;gt;=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">--&lt;/span>){
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">mouth&lt;/span>.&lt;span style="color:#a6e22e">angle&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">obniz&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">80&lt;/span>);
}
}
&lt;span style="color:#a6e22e">google_home&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">googlehome&lt;/span>.&lt;span style="color:#a6e22e">device&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Google-Home&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">language&lt;/span>);
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">googlehome&lt;/span>.&lt;span style="color:#a6e22e">play&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;http://×××××.ngrok.io/audio/kurisumasusong.mp3&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>) {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>);
&lt;span style="color:#a6e22e">leftLed&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>();
&lt;span style="color:#a6e22e">rigthLed&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>();
&lt;span style="color:#a6e22e">singMouth&lt;/span>();
});
}
&lt;span style="color:#a6e22e">await&lt;/span> &lt;span style="color:#a6e22e">google_home&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>for (i=49; i&amp;gt;=0; i&amp;ndash;){
　await mouth.angle(i);
　await obniz.wait(80);
}
↑はこだわった部分なので、
注目してみてもらえると嬉しいです。&lt;/p>
&lt;h2 id="heading-7">実行&lt;/h2>
&lt;p>サンタデバイスにgoogle home miniをそっと添えて、
以下のコマンドで実行します。&lt;/p>
&lt;pre>&lt;code>$ node face.js
&lt;/code>&lt;/pre>&lt;p>サンタが歌ってる感じになります。&lt;/p>
&lt;h2 id="heading-8">まとめ&lt;/h2>
&lt;p>哀愁漂うサンタクロースができたのではないでしょうか。&lt;/p>
&lt;p>私にとって、スマートスピーカーは電子部品的存在なので、
今後も色々な作品に仕込んで、へっぽこなモノづくりに一役買ってもらおうと思っています。&lt;/p>
&lt;p>よかったら是非「スマスピ + デバイス」挑戦してみてください！&lt;/p></description></item><item><title>ArduinoでTwitter連携！愛しのぬいぐるみトンピーちゃんに命を吹き込んでみた</title><link>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</link><pubDate>Mon, 28 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/arduino-nodejs-twitter-connect/</guid><description>&lt;p>皆さん、大好きなぬいぐるみが動き出したらいいなと思ったこと、ありませんか？&lt;/p>
&lt;p>今回は私の愛すべきお友達「トンピーちゃん」に命を吹き込むべく、プログラミング初心者の私がArduinoとTwitterの連携に挑戦してみました！&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->こちらです！！&lt;!-- raw HTML omitted -->
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/721a8190-3ffc-8bca-c4b3-774ee58d45e9.gif" alt="ezgif.com-video-to-gif.gif">&lt;/p>
&lt;h2 id="heading">今回やること&lt;/h2>
&lt;h3 id="heading-1">実装の構成&lt;/h3>
&lt;p>&lt;a href="https://gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64">&lt;img src="https://i.gyazo.com/a75b45dc702b385f5e32fcd3e39c5b64.png" alt="Image from Gyazo">&lt;/a>&lt;/p>
&lt;p>ざっくりの構成です。Node.jsでTwitterの「#tonpy」というハッシュタグを監視し、「move #tonpy」「stop #tonpy」というツイートがあったらArduinoを経由してトンピーちゃんが動いたり止まったりします。&lt;/p>
&lt;h3 id="heading-2">用意するもの&lt;/h3>
&lt;h4 id="heading-3">■こぐまのトンピーちゃん&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/210df088-f5f0-6f8a-e9ee-2a63f06e2364.jpeg" alt="トンピー.jpg">
愛用のトンピーちゃんです。乾電池を入れるとピーヒャラドンドンします。&lt;/p>
&lt;ul>
&lt;li>購入: &lt;a href="https://www.amazon.co.jp/%E3%82%A4%E3%83%AF%E3%83%A4-%E3%81%93%E3%81%90%E3%81%BE%E3%81%AE%E3%83%88%E3%83%B3%E3%83%94%E3%83%BC/dp/B0002U3OBA">Amazon.co.jp&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="arduino-uno">■Arduino Uno&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/c26d230d-e320-b73d-f15f-32d813e1294f.jpeg" alt="Arduino Uno.jpg">
Arduino Unoは2010年に発売されたArduinoで、&lt;a href="https://store.arduino.cc/usa/arduino-uno-rev3">Arduinoの公式サイト&lt;/a>にも「&lt;strong>電子工作初心者に最適&lt;/strong>」と書いてあったのでこちらに決めました。&lt;/p>
&lt;p>購入にあたっては「Arduino 初心者」と調べヒットした「&lt;a href="https://www.amazon.co.jp/%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-SSCI-GettingStartedArduinoKit-Arduino%E3%82%92%E3%81%AF%E3%81%98%E3%82%81%E3%82%88%E3%81%86%E3%82%AD%E3%83%83%E3%83%88/dp/B0025Y6C5G/ref=sr_1_fkmr1_2?ie=UTF8&amp;amp;qid=1544321570&amp;amp;sr=8-2-fkmr1&amp;amp;keywords=arduino+%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%AD%E3%83%83%E3%83%88">Arduinoをはじめようキット&lt;/a>」を購入しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="fetfet-mosfet-2sjs527l-e-60v5a">■FET（FET MOSFET 2SJS527L-E 60V5A）&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/88510174-eed9-e286-5343-3deeb08a7884.jpeg" alt="I-08315.jpg">&lt;/p>
&lt;p>FETはロードスイッチとも呼ばれ、簡単にいうと外部からの電圧によって電流の流れを制御できるスイッチのようなもののようです。小さな電力で動作させる事ができます。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/#%E5%9B%9E%E8%B7%AF%E3%82%92%E4%BD%9C%E6%88%90">回路を作成&lt;/a>で説明しますが、FETには「Pチャネル」と「Nチャネル」の2種類あります。今回はNチャネルのFETを利用します。&lt;/p>
&lt;ul>
&lt;li>購入: &lt;a href="http://akizukidenshi.com/catalog/g/gI-07145/">秋月電子&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="nodejspc">■Node.jsをインストールしたPC&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/efcdf34b-504e-cc68-125a-0acadd815510.jpeg" alt="IMG_9204.jpg">&lt;/p>
&lt;p>今回はNode.jsでプログラムを動かします。下記記事を参考にインストールしてみてください！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>筆者PC: mac OS HighSierra バージョン10.13.6&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>Node.js: v10.10.0&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-4">■その他&lt;/h4>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/eb369434-a5ff-e44a-c7b9-02a065030098.jpeg" alt="IMG_9206.jpg">&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dotstud.io/docs/breadboard/">ブレッドボード&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://localhost:1313/docs/jumperwire/#%E3%83%9F%E3%83%8E%E3%83%A0%E3%82%B7%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97-%E3%83%AF%E3%83%8B%E5%8F%A3">ワニ口クリップ&lt;/a>&lt;/li>
&lt;li>抵抗（今回は220Ω）&lt;/li>
&lt;/ul>
&lt;h2 id="heading-5">トンピーちゃんを解体&lt;/h2>
&lt;p>まずはトンピーちゃんの導線を確認するため、少し解体します。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/69ccd688-afb6-0715-124a-44d886fe3178.jpeg" alt="IMG_6786.jpg">&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/84c4fcd7-8c65-a0dc-1a84-ee75b5c2ef48.jpeg" alt="IMG_9205.jpg">
電池の部分を取り外してみました。すると、導線は電池部分と本体でパックリ分かれている事が確認できました。今回はその部分にArduino Unoを繋げば回路の開/閉が制御できそうですね。&lt;/p>
&lt;h2 id="arduino-uno-1">Arduino Unoとトンピーちゃんを連携&lt;/h2>
&lt;h3 id="heading-6">回路を作成&lt;/h3>
&lt;p>Arduino Unoから直接ON/OFFを制御しようとすると、電流が少なく回路を開/閉できませんでした。そこでArduino Unoとトンピーちゃんの間に&lt;strong>FETを挿入&lt;/strong>します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>FETは、電圧の加え方の違いによって「Pチャネル」と「Nチャネル」の2種類に分かれます。今回はNチャネルのFETを利用します。&lt;/p>
&lt;p>また、回路の「+側」にFETを繋ぐことを「ハイサイド（スイッチ）」、-側に繋ぐことを「ローサイド（スイッチ）」と呼称します。今回はNチャネルなので、ローサイドにFETを繋ぎます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/d32c3f6f4b1de908ceced242cc2ba7f4.png" alt="Image from Gyazo">&lt;/p>
&lt;p>最終的に上記のような回路図になりました。&lt;/p>
&lt;h3 id="arduino-uno-2">Arduino Unoにプログラムを書き込む&lt;/h3>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/b544f541-a5ac-ee97-18a3-de3963210c92.png" alt="スクリーンショット 2018-12-18 12.35.58.png">
ArduinoをUSBケーブルでPCに繋ぎ、アプリケーションでArduino IDEを開きます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/da16043a-121e-52e2-e395-3121a8a3e48f.png" alt="スクリーンショット 2018-12-16 15.10.09.png">
ファイル→新規ファイルを選択します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/2a42d894-497d-a0c4-5573-6a4c148fc5fe.png" alt="スクリーンショット 2018-12-16 15.09.45.png">
ツール→ボード→繋いだArduino（今回はArduino Uno）を選択します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/9f5d63e2-454b-c637-ef5d-07550cccf8d5.png" alt="スクリーンショット 2018-12-16 15.11.33.png">
ツール→シリアルポート→接続したArduinoを選択します。&lt;/p>
&lt;p>下記コードを新規ファイルにコピー&amp;amp;ペーストします。&lt;/p>
&lt;pre>&lt;code>// pins
const int tonpyPin = 2;
void setup() {
// initialize serial:
Serial.begin(9600);
// make the pins outputs:
pinMode(tonpyPin, OUTPUT);
}
void loop() {
// if there's any serial available, read it:
while (Serial.available() &amp;gt; 0) {
char value = Serial.read();
if (value == 'p') {
digitalWrite(tonpyPin, HIGH);
} else if (value == 'q'){
digitalWrite(tonpyPin, LOW);
} else{
digitalWrite(tonpyPin, LOW);
}
Serial.println(value);
}
}
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/8ec32eee-c610-137c-febd-9408f22db6e1.png" alt="スクリーンショット 2018-12-10 9.25.26.png">
左上にある「→」ボタンを押してマイコンボードに書き込みます。&lt;/p>
&lt;p>これでArduino Unoからの信号（p: スイッチON、q: スイッチOFF）でトンピーちゃんが動く/止まるようになりました。&lt;/p>
&lt;p>これをツイートと連動できれば完成です！&lt;/p>
&lt;h2 id="nodejs">Node.jsのプログラム&lt;/h2>
&lt;p>ハッシュタグ「#tonpy」を取得し、さらに「move」「stop」のツイートがあったらArduino Unoに送るプログラムを作成します。&lt;/p>
&lt;h3 id="twitter-api">Twitter APIの準備&lt;/h3>
&lt;p>API使用には&lt;a href="https://developer.twitter.com/">Twitter Developer&lt;/a>へ登録する必要があります。登録の際、用途など英文で書く部分がありました（筆者はGoogle翻訳を駆使しました）。&lt;/p>
&lt;p>手順については下記の記事に詳しく書かれており、そちらに沿って登録しました。&lt;/p>
&lt;ul>
&lt;li>参考: &lt;a href="https://qiita.com/kngsym2018/items/2524d21455aac111cdee">Twitter API 登録 (アカウント申請方法) から承認されるまでの手順まとめ　※2018年9月時点の情報&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="tweetnodejs">Tweetを取得するNode.jsのプログラムを作成&lt;/h3>
&lt;h4 id="heading-7">■ディレクトリを用意&lt;/h4>
&lt;p>任意の保存場所にフォルダを用意します。今回はDesktopにTonpyフォルダを作りました。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="js">■JSファイルを作成&lt;/h4>
&lt;p>作成したフォルダに任意の名前のJSファイルを用意します。今回は「app.js」としました。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="twitter-api-1">■Twitter APIを使用するモジュールのインストール&lt;/h4>
&lt;p>Node.jsでTwitter APIが使用できるよう&lt;a href="https://www.npmjs.com/package/twitter">Twitterモジュール&lt;/a>をnpmでインストールします。ターミナルで作成したフォルダを開き、下記コマンドを叩きます。&lt;/p>
&lt;pre>&lt;code>$ npm install twitter
&lt;/code>&lt;/pre>&lt;p>これでNode.jsでTwitter APIが使用できるようになりました。&lt;/p>
&lt;p>実際に使用する際はJSファイル内で最初に下記のように書くとTwitter APIが呼び出されます。&lt;/p>
&lt;pre>&lt;code>const Twitter = require('twitter');
&lt;/code>&lt;/pre>&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-8">■ツイートを取得するプログラムを作成&lt;/h4>
&lt;p>TwitterAPIには「REST API」と「Streaming API」の2種類があります。&lt;/p>
&lt;p>REST APIはエンドポイントへリクエストして初めて結果が得られるものに対して、Streaming APIはレートのリミットなくツイートを受信し続ける事ができます。&lt;/p>
&lt;p>今回はツイートを常に監視し該当のツイートがあったら結果を取得する、という事がしたいので&lt;strong>Streaming API&lt;/strong>を使用します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">twitter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;twitter&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;fs&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">twitter&lt;/span>({
&lt;span style="color:#a6e22e">consumer_key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,&lt;span style="color:#75715e">//Dev Accountで取得したkeyを書く
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">consumer_secret&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">access_token_key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">access_token_secret&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,
});
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>;
&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">stream&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;statuses/filter&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">track&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#tonpy &amp;#34;&lt;/span>}, (&lt;span style="color:#a6e22e">stream&lt;/span>) =&amp;gt; {&lt;span style="color:#75715e">//Streaming APIを呼び出す
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">tweet&lt;/span>) =&amp;gt; {
&lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">tweet&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>;
(&lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#a6e22e">tweetText&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;move&amp;#39;&lt;/span>)) &lt;span style="color:#f92672">?&lt;/span> (&lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;p&amp;#39;&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#f92672">~&lt;/span>&lt;span style="color:#a6e22e">tweetText&lt;/span>.&lt;span style="color:#a6e22e">indexOf&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;stop&amp;#39;&lt;/span>)) &lt;span style="color:#f92672">?&lt;/span> (&lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;q&amp;#39;&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">tweetText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>);
});
&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;error&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">error&lt;/span>) =&amp;gt; {&lt;span style="color:#75715e">//エラー
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">Error: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">destroy&lt;/span>();
});
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ツイートを取得するNode.jsのプログラムが完成しました。&lt;/p>
&lt;h3 id="arduino">Arduinoに送るプログラムを作成&lt;/h3>
&lt;h4 id="heading-9">■シリアル通信をするモジュールのインストール&lt;/h4>
&lt;p>PCとArduino間でシリアル通信をするために、シリアルポートでシリアル通信を行うモジュールもnpmでインストールします。&lt;/p>
&lt;p>シリアルポートとは&lt;strong>シリアル通信を行う時の接続口&lt;/strong>のことで、今回はArduinoと接続したPCのUSBポートにあたります。&lt;/p>
&lt;p>ターミナルで下記コマンドを叩きます。&lt;/p>
&lt;pre>&lt;code>$ npm install serialport
&lt;/code>&lt;/pre>&lt;p>これでNode.jsでシリアルポートを制御できるようになりました。&lt;/p>
&lt;p>使用する際はJSファイル内で最初に下記のように呼び出します。&lt;/p>
&lt;pre>&lt;code>const Serialport = require('serialport');
&lt;/code>&lt;/pre>&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="heading-10">■シリアルポートの名前を調べる&lt;/h4>
&lt;p>プログラム内では、USBポートに挿しているArduino Uno（ttyデバイス）を指定します。&lt;/p>
&lt;p>ターミナルで下記コマンドを打ち、PCのシリアルポートに接続されている機器を表示します。&lt;/p>
&lt;pre>&lt;code>$ ls -l /dev/tty.*
&lt;/code>&lt;/pre>&lt;p>Auduino Unoを挿し、もう一度先ほどのコマンドを打ちます。新しく出てきたttyデバイス名がArduino Unoです。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="-arduino-unonodejs">■ Arduino Unoに送るNode.jsのプログラムを作成&lt;/h4>
&lt;p>下記がシリアル通信するためのコードです。ツイートを取得するためのJSファイルの続きに記述してください。&lt;/p>
&lt;p>1行目の&lt;code>/dev/tty.xxx&lt;/code>には上記のシリアルポート名を記入してください。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">SerialPort&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/dev/tty.xxx&amp;#39;&lt;/span>,{
&lt;span style="color:#a6e22e">baudRate&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">9600&lt;/span>&lt;span style="color:#75715e">//baudRate:9600は1秒に最大9600ビットを送信するという意味
&lt;/span>&lt;span style="color:#75715e">&lt;/span>});
&lt;span style="color:#a6e22e">port&lt;/span>.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;main screen turn on&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Error on write: &amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>);
}
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;message written&amp;#39;&lt;/span>);
});
&lt;span style="color:#a6e22e">port&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;open&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Serial open.&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">setInterval&lt;/span>(&lt;span style="color:#a6e22e">write&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>);
});
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">Input to Arduino: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">tweetText&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#a6e22e">port&lt;/span>.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#a6e22e">tweetText&lt;/span>, (&lt;span style="color:#a6e22e">error&lt;/span>) =&amp;gt; {
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>) {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">Error: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
}
});
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでツイート情報を取得し、Arduinoに信号を送る事ができるようになりました。&lt;/p>
&lt;h3 id="heading-11">完成コード&lt;/h3>
&lt;p>ツイートを取得するプログラム、Arduinoを制御するプログラムを合わせた完成コードは下記のようになります。&lt;/p>
&lt;pre>&lt;code>//-----------------------------------------------
// twitterからツイートを取得
//-----------------------------------------------
const twitter = require(&amp;quot;twitter&amp;quot;);
const client = new twitter({
consumer_key: '',//Dev Accountで取得したkeyを書く
consumer_secret: '',
access_token_key: '',
access_token_secret: '',
});
let tweetText ='w';
client.stream('statuses/filter', {track:&amp;quot;#tonpy &amp;quot;}, (stream) =&amp;gt; {
stream.on('data', (tweet) =&amp;gt; {
tweetText = tweet.text;
(~tweetText.indexOf('move')) ? (tweetText = 'p') : (~tweetText.indexOf('stop')) ? (tweetText = 'q') : (tweetText = 'w');
});
stream.on('error', (error) =&amp;gt; {
console.error(`Error: ${error.message}`);
stream.destroy();
});
});
//-----------------------------------------------
// Node.jsからArduinoに送信
//----------------------------------------------
const SerialPort = require('serialport');
const port = new SerialPort('/dev/tty.xxx',{
baudRate: 9600
});
port.on('open', () =&amp;gt; {
console.log('Serial open.');
setInterval(write, 1000);
});
port.on('data', (data) =&amp;gt; {
console.log(`Data from Arduino: ${data}`);
});
const write = () =&amp;gt; {
console.log(`Input to Arduino: ${tweetText}`);
port.write(tweetText, (error) =&amp;gt; {
if(error) {
console.error(`Error: ${error.message}`);
}
});
}
&lt;/code>&lt;/pre>&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="nodejs-1">■Node.jsを実行する&lt;/h4>
&lt;p>Node.jsは、ファイルのある場所で下記コマンドで実行します。&lt;/p>
&lt;pre>&lt;code>$ node app.js
&lt;/code>&lt;/pre>&lt;p>&lt;code>app.js&lt;/code>部分は、ご自身が作成したファイル名に置き換えてください。「Serial open」がターミナル上に表示されたら無事実行されています。&lt;/p>
&lt;h2 id="heading-12">動かしてみる&lt;/h2>
&lt;p>Node.jsを起動しながら、ツイートしてみましょう……。「&lt;strong>#tonpy move&lt;/strong>」!!!!!
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/309368/9c8c2611-d9b2-e7dd-3710-8d2011c2b424.gif" alt="ezgif.com-video-to-gif.gif">&lt;/p>
&lt;p>う、動いたーーーー！！！（少々タイムラグがありますが……。）&lt;/p>
&lt;p>初めてのIoTとっっても楽しかったです！電子工作やNode.jsの勉強にもなり一石二鳥ですね。&lt;/p>
&lt;p>これから色々作っていきたいです！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Moddable SDKを使ってJavaScriptでIoT開発してみた</title><link>https://dotstud.io/blog/developed-iot-using-moddable/</link><pubDate>Thu, 24 Jan 2019 00:51:35 +0900</pubDate><guid>https://dotstud.io/blog/developed-iot-using-moddable/</guid><description>&lt;p>どうも。&lt;a href="https://dotstud.io/members/horihiro">ほりひろ&lt;/a> です。
dotstudioブログでは、初めましてですね。&lt;/p>
&lt;p>JavaScript や IoT が好きな、でも実は半田付けも抵抗値の計算もろくにできないレベルの週末プログラマーです。
普段は某クラウドベンダーのサポートエンジニアをしています。
よろしくお願いします。&lt;/p>
&lt;p>Twitterアカウントは&lt;a href="https://twitter.com/hori__hiro">こちら&lt;/a>です。&lt;/p>
&lt;p>年末に自分の中で話題になっていた、&lt;!-- raw HTML omitted -->&lt;strong>Moddable SDK&lt;/strong>&lt;!-- raw HTML omitted -->というものをようやく触ってみました。&lt;/p>
&lt;h2 id="moddable-sdk--xs">Moddable SDK &amp;amp; XS&lt;/h2>
&lt;h3 id="moddable-sdk">Moddable SDK&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Moddable SDK は、&lt;strong>JavaScript コードを ESP32 や ESP8266 といったマイコン上で動作させるためのビルド環境やライブラリー群&lt;/strong>のこと、、、だと思います。&lt;/p>
&lt;p>これは Moddable 社から提供されていますが、&lt;!-- raw HTML omitted -->下記 GitHub リポジトリで公開されているので、無料で手に入れられます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a href="https://github.com/Moddable-OpenSource/moddable">https://github.com/Moddable-OpenSource/moddable&lt;/a>&lt;/p>
&lt;h3 id="xs">XS&lt;/h3>
&lt;p>XS は、&lt;strong>Moddable SDK で生成される JavaScript ランタイム環境&lt;/strong> （ドキュメントには &lt;strong>virtual machine&lt;/strong> と記載）で、なんと &lt;a href="https://github.com/Moddable-OpenSource/moddable#modern-software-development-for-microcontrollers">ES2018 に 99% 以上準拠&lt;/a>しているらしいです。すごいですね！&lt;/p>
&lt;p>※一部準拠していない部分は、注意事項として**&lt;a href="https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/XS%20Conformance.md#caveat">こちら&lt;/a>**に記載されています。&lt;/p>
&lt;p>これは&lt;a href="http://www.moddable.com/XS7-TC-39.php">公式ドキュメント&lt;/a>にある画像です。「XS は一番小さい」って意味でしょうね。シャレてます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ざっくりとした理解ですが、Moddable SDK のビルドツールで、自分が書いた JavaScript や C のソースコードと組み込みのクラスが含まれた XS を、一つのバイナリーにビルドし、マイコンに書き込んでいるようです。&lt;/p>
&lt;p>これまで JavaScript でのマイコン制御というと、以前から ホスト PC とマイコンをシリアル接続し、ホストPC上の Node.js と Johnny-Five を使ってマイコンを制御する方法があり、最近では obniz の制御をネットワークを介して JavaScript などから行う方法がありますが、いずれもマイコンの外に JavaScript の実行環境を用意する必要があります。&lt;/p>
&lt;p>一方で、Moddable SDK では、&lt;!-- raw HTML omitted -->JavaScript 実行環境である XS がマイコン上で動作することができます。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>この点は、&lt;strong>これまでの実行環境とは大きく違うところですね！&lt;/strong>&lt;/p>
&lt;h2 id="heading">開発環境の構築&lt;/h2>
&lt;p>基本的に、公式のリポジトリに記載された &lt;a href="https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/Moddable%20SDK%20-%20Getting%20Started.md">構築手順&lt;/a>通りに実施することで、ビルド ツールなどの環境が構築できます。&lt;/p>
&lt;p>構築手順は macOS/Linux/Windows の各プラットフォーム向けにまとまっており、それぞれが、下記の 3 つのパートに分かれて記載されています。&lt;/p>
&lt;ol>
&lt;li>&lt;code>mcconfig&lt;/code> や &lt;code>xsbug&lt;/code> などの開発ツールのビルド&lt;/li>
&lt;li>ESP8266 向けの開発環境の構築&lt;/li>
&lt;li>ESP32 向けの開発環境の構築&lt;/li>
&lt;/ol>
&lt;p>いずれのプラットフォームでも 1. は必須ですが、2. と 3. は手持ちのボードに合わせて、どちらかを実施するだけでよいです。&lt;/p>
&lt;p>私は Windows 用の環境構築をしましたが、Windows 向けの開発環境構築では、&lt;!-- raw HTML omitted -->**Windows ネイティブのコマンドを使用することをお勧めします。**&lt;!-- raw HTML omitted -->
WSL から &lt;code>git clone&lt;/code> などをすると、&lt;a href="https://github.com/Moddable-OpenSource/moddable/issues/110">&lt;strong>開発ツールがビルドできない&lt;/strong>&lt;/a>ようで、これに丸一日ハマりました。&lt;/p>
&lt;p>あと、ビルドツールの実行は、必ず&lt;code>開発者コマンドプロンプト for VS2017&lt;/code> を起動し、そのコマンドプロンプトの中でしましょう。&lt;/p>
&lt;h2 id="-">サンプル コード&lt;/h2>
&lt;p>マイコンのサンプルと言えば Lチカですが、手元に LED がなかったので、とりあえず ESP32 上での非同期実行を試してみます。&lt;/p>
&lt;h3 id="heading-1">ファイルの用意&lt;/h3>
&lt;p>プロジェクト ディレクトリに下記のような構造で、ファイルを作ります。&lt;/p>
&lt;pre>&lt;code>.
├── esp
│ ├── console.c
│ └── console.js
├── main.js
└── manifest.json
&lt;/code>&lt;/pre>&lt;h3 id="mainjs">main.js&lt;/h3>
&lt;p>1 秒おきに &lt;code>1&lt;/code> から &lt;code>10&lt;/code> の数字を、1.5 秒おきに &lt;code>a&lt;/code> から &lt;code>z&lt;/code> の文字を、シリアル コンソールに出力するプログラムです。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js:main.js" data-lang="js:main.js">&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">Timer&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;timer&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;console&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;z&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#a6e22e">Timer&lt;/span>.&lt;span style="color:#a6e22e">repeat&lt;/span>(() =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>String(Date.&lt;span style="color:#a6e22e">now&lt;/span>()).&lt;span style="color:#a6e22e">padStart&lt;/span>(&lt;span style="color:#ae81ff">15&lt;/span>)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;span style="color:#a6e22e">Timer&lt;/span>.&lt;span style="color:#a6e22e">repeat&lt;/span>(() =&amp;gt; {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>String(Date.&lt;span style="color:#a6e22e">now&lt;/span>()).&lt;span style="color:#a6e22e">padStart&lt;/span>(&lt;span style="color:#ae81ff">15&lt;/span>)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:&lt;/span> String.&lt;span style="color:#a6e22e">fromCharCode&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">charCodeAt&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
}, &lt;span style="color:#ae81ff">1500&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Web ブラウザーや Node.js なら、定期的な処理を書くなら &lt;code>setInterval&lt;/code> を使うところだと思いますが、Moddable SDK / XS では、グローバルに &lt;code>setInterval&lt;/code> が定義されていません。&lt;/p>
&lt;p>代わりに、&lt;code>Timer&lt;/code> オブジェクトの &lt;code>repeat&lt;/code> メソッドを使って、同じ処理が似たような感じで書くことができます。&lt;/p>
&lt;pre>&lt;code class="language-js:browser&amp;nodejs" data-lang="js:browser&amp;nodejs">setInterval(() =&amp;gt; {
:
}, 1000);
&lt;/code>&lt;/pre>&lt;pre>&lt;code class="language-js:XS" data-lang="js:XS">import Timer from 'timer';
Timer.repeat(() =&amp;gt; {
:
}, 1000);
&lt;/code>&lt;/pre>&lt;h3 id="consolejs-consolec">console.js /console.c&lt;/h3>
&lt;p>実は XS では &lt;code>console&lt;/code> オブジェクトもないので、とりあえず、下記の JS ファイルと C ファイルで、シリアルコンソールに 1 行出力できるメソッドを定義しておきます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c:esp/console.js" data-lang="c:esp/console.js">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Console&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xs_console_destructor&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">constructor&lt;/span>() {
}
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>() &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xs_console_log&amp;#34;&lt;/span>
}
Object.&lt;span style="color:#a6e22e">freeze&lt;/span>(&lt;span style="color:#a6e22e">Console&lt;/span>.&lt;span style="color:#a6e22e">prototype&lt;/span>);
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">Console&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>JS ファイルはタダのラッパーで、処理本体は C ファイルで定義しています。
JS ファイル内で &lt;code>@ ～&lt;/code> と書くと、C ファイルで宣言した関数とバインディングされます。
これは、XS 独自の実装のようです。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c:esp/console.c" data-lang="c:esp/console.c">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;#34;xsAll.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;#34;xs.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">xs_console_destructor&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
{
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">xs_console_log&lt;/span>(xsMachine &lt;span style="color:#f92672">*&lt;/span>the)
{
&lt;span style="color:#66d9ef">int&lt;/span> argc &lt;span style="color:#f92672">=&lt;/span> xsToInteger(xsArgc), i;
&lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> argc; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>) {
&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>str &lt;span style="color:#f92672">=&lt;/span> xsToString(xsArg(i));
&lt;span style="color:#66d9ef">do&lt;/span> {
uint8_t c &lt;span style="color:#f92672">=&lt;/span> c_read8(str);
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>c) {
ESP_putc(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">break&lt;/span>;
}
ESP_putc(c);
str&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>;
} &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="manifestjson">manifest.json&lt;/h3>
&lt;p>最後は manifest ファイルです。
正直言うと、ここはあまり把握できていません :sweat:&lt;/p>
&lt;p>&lt;code>include&lt;/code> で Moddable SDK で用意されている manifest を、ベースの manifest として読み込み、全プラットフォーム共通のモジュールとして &lt;code>main&lt;/code>(.js) を、&lt;code>esp32&lt;/code> 向けには、&lt;code>./esp/console&lt;/code>(.js) をロードする設定を書いています。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json:manifest.json" data-lang="json:manifest.json">{
&lt;span style="color:#f92672">&amp;#34;include&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;$(MODDABLE)/examples/manifest_base.json&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;modules&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;*&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;./main&amp;#34;&lt;/span>,
]
},
&lt;span style="color:#f92672">&amp;#34;platforms&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;esp32&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;modules&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;*&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;./esp/console&amp;#34;&lt;/span>,
],
}
}
},
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上の &lt;code>manifest.json&lt;/code> では &lt;code>Timer&lt;/code> クラスをロードしていませんが、&lt;code>main.js&lt;/code> では問題なく import することができます。
これは、Moddable SDK に含まれるベースの manifest でロード設定がされているためです。&lt;/p>
&lt;pre>&lt;code class="language-json:$(MODDABLE)/examples/manifest_base.json(抜粋)" data-lang="json:$(MODDABLE)/examples/manifest_base.json(抜粋)">{
:
(略)
:
&amp;quot;platforms&amp;quot;: {
:
(略)
:
&amp;quot;esp32&amp;quot;: {
&amp;quot;include&amp;quot;: &amp;quot;$(BUILD)/devices/esp32/manifest.json&amp;quot;
},
}
:
(略)
:
}
&lt;/code>&lt;/pre>&lt;pre>&lt;code class="language-json:$(BUILD)/devices/esp32/manifest.json(抜粋)" data-lang="json:$(BUILD)/devices/esp32/manifest.json(抜粋)">{
:
(略)
:
&amp;quot;modules&amp;quot;: {
&amp;quot;*&amp;quot;: [
&amp;quot;$(MODULES)/base/time/*&amp;quot;,
&amp;quot;$(MODULES)/base/time/esp/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/*&amp;quot;,
&amp;quot;$(MODULES)/base/timer/mc/*&amp;quot;,
]
},
&amp;quot;preload&amp;quot;: [
&amp;quot;time&amp;quot;,
&amp;quot;timer&amp;quot;,
],
:
(略)
:
}
&lt;/code>&lt;/pre>&lt;p>ちなみに manifest についてツイートしたところ、公式アカウントからも返事がありました。&lt;/p>
&lt;p>&lt;strong>ドキュメントは定期的にメンテナンスされそうです。&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-2">実行してみる&lt;/h2>
&lt;p>&lt;code>manifest.json&lt;/code> があるディレクトリで、&lt;code>mcconfig&lt;/code> コマンドを実行します。
大抵は、XS のビルドから始まるので、書き込みが完了するまでだいぶ時間がかかると思います。&lt;/p>
&lt;p>書き込みが完了すると、シリアルモニターに自動的に接続し、&lt;code>console.log&lt;/code> の出力内容が表示されます。&lt;/p>
&lt;pre>&lt;code>&amp;gt; mcconfig -m -p esp32
rm: cannot remove '/root/Projects/moddable/build/tmp/esp32/release/xsProj/sdkconfig': No such file or directory
# Running GENCONFIG...
fatal: Not a git repository (or any of the parent directories): .git
including /root/esp32/esp-idf/components/bootloader/Makefile.projbuild...
:
(略)
:
MONITOR
--- idf_monitor on /dev/ttyUSB0 115200 ---
--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---
ets Jun 8 2016 00:22:57
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0018,len:4
load:0x3fff001c,len:636
load:0x40078000,len:6192
load:0x40080000,len:5152
0x40080000: _iram_start at /root/esp32/esp-idf/components/freertos/xtensa_vectors.S:1685
entry 0x40080264
0x40080264: _Level5Vector at ??:?
1010:1
1510:a
2010:2
3010:3
3011:b
4010:4
4510:c
5010:5
6010:6
:
(略)
:
&lt;/code>&lt;/pre>&lt;p>指定した時間間隔で、コールバック関数が実行されています！
ES2017 で入った &lt;code>String.prototype.padStart&lt;/code> も正常に動作しているようです。&lt;/p>
&lt;p>なお、マイコンには時計がないので、&lt;code>Date.now()&lt;/code> は起動時からの時間を返します。&lt;/p>
&lt;h3 id="heading-3">デバッグ実行&lt;/h3>
&lt;p>先ほど実行したコマンド &lt;code>mcconfig -m -p esp32&lt;/code> にデバッグ オプション &lt;code>-d&lt;/code> を追加すると、デバッグ ビルドを実行し、デバッグ ツールである &lt;code>xsbug&lt;/code> が自動で起動します。&lt;/p>
&lt;p>この &lt;code>xsbug&lt;/code> は JavaScript コードにブレークポイントの設定や、ステップ実行、変数の内容などを表示することが
でき、結構本格的なデバッグツールです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今は独自の GUI ツールとして提供されているようですが、そのうち&lt;strong>VSCode から拡張機能として利用できるようになると嬉しいですね。&lt;/strong>&lt;/p>
&lt;h2 id="heading-4">まとめ&lt;/h2>
&lt;p>いかがだったでしょうか。
Moddable SDK を使うことで、JavaScript で書いたコードを、ESP8266/32 で動作させることができました。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Web フロントエンドや Node.js など、JavaScript を書くエンジニア人口は多いでしょうから、そういった方々も気軽にマイコン開発ができるようになりますね。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>あとは、manifest ファイルに関するドキュメントの整備がすすんだり、もう少し簡単に環境構築ができれば、格段に開発しやすくなるのではないでしょうか。&lt;/p></description></item><item><title>無料で手軽！コマンド一つで静的サイトホスティングできるSurgeを試してみた。</title><link>https://dotstud.io/blog/static-site-hosting-surge/</link><pubDate>Sun, 09 Sep 2018 04:58:49 +0900</pubDate><guid>https://dotstud.io/blog/static-site-hosting-surge/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>最近VuePressを触っていて、簡単に静的サイトホスティングできるサービスを探していました。&lt;/p>
&lt;p>そこで発見した&lt;strong>Surge（サージ）というサービスがすごく簡単だった&lt;/strong>ので紹介します。&lt;/p>
&lt;p>（日本語記事なさそうだったので勢いで書いておこう）&lt;/p>
&lt;h2 id="surge">Surgeとは&lt;/h2>
&lt;p>静的サイトホスティングが無料で行えるサービスです。&lt;/p>
&lt;p>&lt;strong>コマンド一発でデプロイが出来る&lt;/strong>のが特徴で、&lt;strong>使い方がすごくシンプルで感動&lt;/strong>しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>ちなみにサージって読むっぽいです。有料プランもありますがその辺は割愛して無料でできるところを紹介します。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.npmjs.com/package/surge">surge - npm&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>無料でどこまで使えるの？って気になる人は&lt;a href="https://surge.sh/help/why-is-surge-free">Why is Surge free?&lt;/a>という記事もあるので読んでみましょう。&lt;/p>
&lt;h2 id="surge-1">Surgeのインストールと使い方&lt;/h2>
&lt;h3 id="heading">インストール&lt;/h3>
&lt;pre>&lt;code>npm i -g surge
&lt;/code>&lt;/pre>&lt;h3 id="heading-1">デプロイ&lt;/h3>
&lt;pre>&lt;code>surge
&lt;/code>&lt;/pre>&lt;p>&lt;strong>&lt;!-- raw HTML omitted -->以上!!! &lt;!-- raw HTML omitted -->めちゃ簡単ですね。&lt;/strong>&lt;/p>
&lt;p>でも本当にこれだけなので驚きです。&lt;code>now.sh&lt;/code>に似た使い勝手。&lt;/p>
&lt;p>初めて使うときはメールアドレスとパスワードの入力をターミナル上で求められるのでそこでユーザー登録出来るのも個人的には好きです。&lt;strong>ターミナルだけで完結します&lt;/strong>。&lt;/p>
&lt;p>デプロイすると&lt;strong>&lt;code>xxxxxxx.surge.sh&lt;/code>&lt;/strong>という形式のURLが発行されるので、アクセスすればOKです。&lt;/p>
&lt;h2 id="heading-2">もう少し詳しく&lt;/h2>
&lt;p>surgeコマンドは、今いる場所を起点にそのままホスティングします。&lt;/p>
&lt;p>例えばmysiteフォルダ内部に&lt;code>index.html&lt;/code>を置いてたとします。&lt;/p>
&lt;pre>&lt;code>$ cd mysite
$ ls
index.html
&lt;/code>&lt;/pre>&lt;p>mysiteフォルダ内にいる状態で&lt;/p>
&lt;pre>&lt;code>surge ./
&lt;/code>&lt;/pre>&lt;p>とすればmysiteフォルダをまるっとホスティングできます。&lt;/p>
&lt;h3 id="heading-3">場所を指定してデプロイ&lt;/h3>
&lt;p>&lt;code>surge &amp;lt;フォルダの場所&amp;gt;&lt;/code>という形でデプロイできます。&lt;/p>
&lt;pre>&lt;code>surge ~/myblog/.vuepress/dist
&lt;/code>&lt;/pre>&lt;p>vuepressを使ったデプロイだとこんな感じでした&lt;/p>
&lt;h3 id="heading-4">場所とドメインを指定してデプロイ&lt;/h3>
&lt;p>さらにドメインを指定してデプロイができます。&lt;/p>
&lt;p>通常のデプロイだと、surgeコマンドでデプロイするたびに新しいドメインが生成されるので、更新性のあるサイトだと使い勝手が良くないです。&lt;/p>
&lt;p>&lt;code>surge &amp;lt;フォルダの場所&amp;gt; &amp;lt;ドメイン&amp;gt;&lt;/code>という形でデプロイすれば&lt;strong>毎回同じドメインにデプロイできます。&lt;/strong>&lt;/p>
&lt;pre>&lt;code>surge ~/myblog/.vuepress/dist hogehoge.surge.sh
&lt;/code>&lt;/pre>&lt;p>このコマンドを何回実行しても&lt;code>hogehoge.surge.sh&lt;/code>にデプロイされるので更新しても安心です。&lt;/p>
&lt;p>確か&lt;code>now.sh&lt;/code>だと毎回ドメインが発行されてaliasを貼り直さないといけない感じだったのでそこが少し手間だなぁと感じてました。この辺は後述します。&lt;/p>
&lt;h2 id="heading-5">カスタムドメインも無料で使える&lt;/h2>
&lt;p>無料でカスタムドメインを利用できます。&lt;/p>
&lt;p>「&lt;a href="https://surge.sh/help/adding-a-custom-domain">Adding a custom domain - surge&lt;/a>」を見るとやり方が書いてるのですが、利用しているドメイン事業者の管理画面で&lt;code>cname&lt;/code>の値に&lt;code>na-west1.surge.sh&lt;/code>を指定しましょう。&lt;/p>
&lt;p>&lt;code>grasping.studio&lt;/code>というドメインをお名前.comで管理しているので、&lt;code>hogehoge.graspin.studio&lt;/code>を利用したい場合は以下のように設定します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/9e316c5d1c6eeeebab84fb08819bdd37.png" alt="">&lt;/p>
&lt;p>更新してしばらく経つ（体感5~10分程度）と&lt;code>hogehoge.graspin.studio&lt;/code>に対してデプロイできるようになります。&lt;/p>
&lt;pre>&lt;code>$ surge ~/myblog/.vuepress/dist hogehoge.graspin.studio
&lt;/code>&lt;/pre>&lt;h2 id="heading-6">その他使い方&lt;/h2>
&lt;p>surgeコマンドのサブコマンドもいくつかあるので紹介します。&lt;/p>
&lt;h3 id="surge-list---">&lt;code>surge list&lt;/code> - アプリケーション一覧&lt;/h3>
&lt;pre>&lt;code>$ surge list
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.gyazo.com/904da5a62e40457539116e012d101418.png" alt="">&lt;/p>
&lt;h3 id="surge-teardown---">&lt;code>surge teardown&lt;/code> - アプリケーション削除&lt;/h3>
&lt;p>&lt;code>teardown&lt;/code>ってあんまり聞かないですけど他のサービスで言うところのrmとかremoveとかと同じような意味合いです。&lt;/p>
&lt;pre>&lt;code>$ surge teardown &amp;lt;アプリケーションのドメイン&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="surge-whoami---">&lt;code>surge whoami&lt;/code> - アカウント情報の確認&lt;/h3>
&lt;p>ログインしているアカウントのメールアドレスが表示されます。&lt;/p>
&lt;pre>&lt;code>$ surge whoami
&lt;/code>&lt;/pre>&lt;h3 id="surge-logout---">&lt;code>surge logout&lt;/code> - アカウントからログアウトする&lt;/h3>
&lt;pre>&lt;code>$ surge logout
&lt;/code>&lt;/pre>&lt;h3 id="surge-login---">&lt;code>surge login&lt;/code> - ログインしなおす&lt;/h3>
&lt;pre>&lt;code>$ surge login
&lt;/code>&lt;/pre>&lt;h2 id="heading-7">他のメンバーと共同でデプロイする&lt;/h2>
&lt;p>&lt;code>--add&lt;/code>というオプションをつけてデプロイするとアプリケーションに指定したメールアドレスのユーザーもデプロイ出来るようになります。&lt;/p>
&lt;p>ユーザー&lt;code>hogehoge@gmail.com&lt;/code>さんをアプリケーション&lt;code>hogehoge.graspin.studio&lt;/code>へのデプロイ権限を渡しつつ、&lt;code>public&lt;/code>フォルダをデプロイする。&lt;/p>
&lt;pre>&lt;code>surge --add hogehoge@gmail.com public hogehoge.graspin.studio
&lt;/code>&lt;/pre>&lt;p>この辺りもコマンドラインからやれて便利ですね。&lt;/p>
&lt;p>&lt;code>surge --remove&lt;/code>でユーザーの権限を削除することもできます。&lt;/p>
&lt;h2 id="heading-8">他のサービスと比較してどうか?&lt;/h2>
&lt;p>無料で使えるその他のホスティングサービスとの比較です。主観です。&lt;/p>
&lt;p>この辺、実は違う！みたいな話あれば@n0bisukeまでコメントください〜。&lt;/p>
&lt;h3 id="netlfy">Netlfy&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.netlify.com/">https://www.netlify.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>フォルダをドラッグ&amp;amp;ドロップでデプロイ出来るのは個人的に結構好きですが、毎回URLが再発行されてしまうのが少し手間がある印象です。&lt;/p>
&lt;p>netlfyのcliツールもあるみたいですが手順がsurgeよりはある模様&lt;/p>
&lt;h3 id="heroku">heroku&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://heroku.com/">http://heroku.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>サーバーサイドのプログラムを含めてデプロイするときには良さそうです。
僕もよく使います。&lt;/p>
&lt;p>デバッグなどでけっこう詰まるのと、surgeほどの手軽さではないです。&lt;/p>
&lt;p>とはいえサーバーサイドプログラムまで利用したかったら選択肢になります。&lt;/p>
&lt;h3 id="github-pages--bitbucket-pages">GitHub Pages &amp;amp; Bitbucket Pages&lt;/h3>
&lt;p>GitHub PagesとBitbucket Pagesは使い勝手はほぼ同じ印象で、git pushするだけで公開できます。&lt;/p>
&lt;p>Webエンジニアなら当たり前のように使いますが、SSHやGitコマンドは最初少しハードルがあるかも。&lt;/p>
&lt;p>更新されるまでに少し時間がかかること、GitHubだとソースコードが（無料だと）公開されてしまうのでそこに抵抗感がある人がいるかも。&lt;/p>
&lt;p>静的サイトなのでどっちにしても公開されているようなものだけどなんとなく。&lt;/p>
&lt;h3 id="gitlab-pages">GitLab Pages&lt;/h3>
&lt;p>CIを動かして作るのでCIの記述になれてないと最初少しハマるかもしれません。&lt;/p>
&lt;p>その分やれることも多いので個人的には注目してます。&lt;/p>
&lt;h3 id="now">now&lt;/h3>
&lt;p>&lt;a href="https://www.now.sh/">https://www.now.sh/&lt;/a>&lt;/p>
&lt;p>これはめちゃ便利で&lt;code>now&lt;/code>コマンドだけでデプロイできて&lt;code>surge&lt;/code>とほぼ同じ使い勝手です。更新のたびに毎回URLが変わってしまうのでそこを解消できたら良いなぁと思うのと、同時に無料プランだと作れるアプリケーションの制限があって現状だと毎回削除していくのも結構手間があるなぁという印象です。&lt;/p>
&lt;p>（&lt;code>now&lt;/code>はもしかしたら設定でなんとかなるのかも??）&lt;/p>
&lt;h2 id="heading-9">まとめ&lt;/h2>
&lt;p>&lt;code>Surge&lt;/code>どうでしょう？&lt;/p>
&lt;p>コマンド一発で出来るので、サクッと作成したWebサイトを誰かにシェアしたり、
ハンズオンや授業などでも使いやすいと思います。&lt;/p>
&lt;p>僕も昨日知ったばかりですが今の所すごく良い印象です。&lt;/p>
&lt;p>ぜひ使ってみてください。&lt;/p></description></item><item><title>NodeSchoolでNode.jsの学習を始めよう！#2 - 問題1〜3の解答と解説</title><link>https://dotstud.io/blog/node-school-1-3/</link><pubDate>Fri, 18 May 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/node-school-1-3/</guid><description>&lt;p>こんにちは、ちゃんとくです！&lt;/p>
&lt;p>前回の記事で、&lt;strong>NodeSchoolの概要と基本の解き方&lt;/strong>を紹介しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回はカリキュラム「&lt;strong>learnyounode&lt;/strong>」の問題1〜3の解答を解説付きで紹介したいと思います！&lt;/p>
&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->※筆者はMacユーザのため、基本的にMacに沿った説明になっています。Windows向けの説明も書いていますが、わからないときは適宜調べてみてください。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;h2 id="heading">はじめに&lt;/h2>
&lt;p>さっそく問題を解いていきましょう。インストール方法や基本の解き方は前回記事をチェック！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;pre>&lt;code>$ cd /your/working/directory
&lt;/code>&lt;/pre>&lt;p>まずは解答用のファイルを作成するディレクトリに移動します。パスはご自身のものに置き換えてください。&lt;/p>
&lt;p>おさらいですが、&lt;strong>&lt;code>$&lt;/code>マークはコマンドラインであることを表しているので不要&lt;/strong>ですよ！&lt;/p>
&lt;pre>&lt;code>$ learnyounode
&lt;/code>&lt;/pre>&lt;p>「&lt;strong>learnyounode&lt;/strong>」コマンドでNodeSchoolのカリキュラムを起動します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こんな画面が立ち上がりましたか？カーソルキーで問題を選択します。1問目の「&lt;strong>こんにちは世界&lt;/strong>」からやっていきましょう！&lt;/p>
&lt;h2 id="1">問題1「こんにちは世界」&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;p>問題の「コンソール」とは&lt;strong>今表示しているコマンドラインツール&lt;/strong>、「アプリ」とはここでは「&lt;strong>Node.jsのプログラム&lt;/strong>」を意味しています。&lt;/p>
&lt;p>この問題は「&lt;!-- raw HTML omitted -->実行するとコマンドラインに&amp;quot;こんにちは世界&amp;quot;と表示させるプログラムを書いてみましょう&lt;!-- raw HTML omitted -->」ということです。&lt;/p>
&lt;p>ヒントを読んでみると、&lt;/p>
&lt;blockquote>
&lt;p>Node.jsのアプリを作るためには .jsという拡張子を持つファイルを新規に作ってJavaScriptを書くだけです。&lt;/p>
&lt;/blockquote>
&lt;p>とあるので、&lt;code>.js&lt;/code>という拡張子のファイルを作りましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回は1.jsというファイルを作ったので、エディタでファイルを開き、編集していきます。（操作がよくわからないという方は&lt;a href="https://dotstud.io/blog/node-school-before-learn/">前回記事&lt;/a>を確認！）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>さらにヒントを読んでいくと、&lt;code>console.log(&amp;quot;text&amp;quot;)&lt;/code>と書くとコンソールに出力できます、とありますね。&lt;/p>
&lt;p>&lt;code>console.log()&lt;/code>は「&lt;strong>渡したものをコンソールに表示してね&lt;/strong>」という命令です。関数の&lt;code>()&lt;/code>に入れたものは「&lt;strong>引数&lt;/strong>」と呼ばれ、関数に渡されます。&lt;/p>
&lt;p>上記は&lt;code>console.log()&lt;/code>というメソッドに、&lt;code>&amp;quot;text&amp;quot;&lt;/code>という引数を渡している状態です。&lt;/p>
&lt;p>&lt;code>&amp;quot;&amp;quot;&lt;/code>（または&lt;code>''&lt;/code>）は、型が「&lt;strong>文字列&lt;/strong>」であることを表しています（その他の型は今後登場します）。&lt;/p>
&lt;p>つまり「こんにちは世界」という文字列を表示させたい場合は、&lt;code>console.log()&lt;/code>の引数に&lt;code>&amp;quot;こんにちは世界&amp;quot;&lt;/code>を渡してあげればよいですね！&lt;/p>
&lt;h3 id="heading-1">解答&lt;/h3>
&lt;pre>&lt;code>console.log(&amp;quot;こんにちは世界&amp;quot;);
&lt;/code>&lt;/pre>&lt;p>解答用のファイルに、上記のプログラムを書き込みましょう。&lt;/p>
&lt;pre>&lt;code>$ node 1.js
&lt;/code>&lt;/pre>&lt;p>Node.jsでファイルを実行して試してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こんにちは世界、と表示されました。これで良さそうですね！&lt;/p>
&lt;pre>&lt;code>$ learnyounode verify 1.js
&lt;/code>&lt;/pre>&lt;p>上記コマンドを実行して答え合わせをします。正解したら次の問題へ進みましょう！&lt;/p>
&lt;h2 id="2">問題2「ベイビーステップ」&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;p>ちょっとレベルが上がりました。先ほどは関数に直接引数を渡しましたが、「&lt;strong>コマンドライン引数&lt;/strong>」は、コマンドラインからプログラムに渡すものを指します。&lt;/p>
&lt;blockquote>
&lt;p>コマンドライン引数を読むためにはグローバル変数の process というオブジェクトが使えます。process には argv という配列のプロパティがあります。その配列の中には全てのコマンドライン引数が入っています。&lt;/p>
&lt;/blockquote>
&lt;p>とヒントに書いてあります。&lt;/p>
&lt;p>まず&lt;code>process.argv&lt;/code>の挙動を探るため、&lt;code>console.log()&lt;/code>を使って表示させてみましょう。&lt;/p>
&lt;pre>&lt;code>console.log(process.argv);
&lt;/code>&lt;/pre>&lt;p>上記のようなプログラムを書いた&lt;code>.js&lt;/code>ファイルを作成します（&lt;code>2.js&lt;/code>というファイルにしました）。&lt;/p>
&lt;pre>&lt;code>$ node 2.js &amp;quot;hello&amp;quot;
&lt;/code>&lt;/pre>&lt;p>プログラムに&lt;code>&amp;quot;hello&amp;quot;&lt;/code>という文字列を渡してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こんな感じの答えが返ってきました。&lt;code>[]&lt;/code>は「&lt;strong>配列&lt;/strong>」を表していて、&lt;code>,&lt;/code>で区切られた3つの要素が入っています。&lt;/p>
&lt;p>1つ目の要素の&lt;code>/Users/yuka/.nodebrew/node/v9.3.0/bin/node&lt;/code>は皆さんのNode.jsがインストールされているパス、2つ目の要素の&lt;code>/Users/yuka/workspace/nodeschool/learnyounode/2.js&lt;/code>は今実行したファイルのパス、3つ目の要素には&lt;strong>渡したコマンドライン引数&lt;/strong>が入っています。&lt;/p>
&lt;p>コマンドライン引数を表示させるには、&lt;strong>&lt;code>process.argv&lt;/code>の3つ目の要素&lt;/strong>を取り出してあげると良さそうです！&lt;/p>
&lt;p>試しにこんなプログラムを書いてみましょう。&lt;/p>
&lt;pre>&lt;code>console.log(process.argv[2]);
&lt;/code>&lt;/pre>&lt;p>配列の中身の位置を指定して取り出すには、&lt;code>[]&lt;/code>を使います。配列の序列は0から始まるので、3つ目の要素は「0,1,2」で「2」となります。&lt;/p>
&lt;p>このファイルに、先ほどと同様&lt;code>&amp;quot;hello&amp;quot;&lt;/code>を渡してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>コマンドライン引数だけを表示することができました！&lt;/p>
&lt;p>では&lt;strong>いくつかの引数を渡して足し算するプログラム&lt;/strong>を書いてみます。&lt;/p>
&lt;pre>&lt;code>console.log(process.argv[2]+process.argv[3]);
&lt;/code>&lt;/pre>&lt;p>こんなプログラムを書いてみます。&lt;/p>
&lt;pre>&lt;code>$ node 2.js 1 1
&lt;/code>&lt;/pre>&lt;p>実行して試してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「2」となって欲しいところ、「11」となってしまいました。&lt;/p>
&lt;p>これは、「1」という文字列と「1」という文字列をくっつけた結果になってしまっています（ちょっとわからない、という人は&lt;code>$ node 2.js &amp;quot;hel&amp;quot; &amp;quot;lo&amp;quot;&lt;/code>など実行してみてください）。&lt;/p>
&lt;p>&lt;code>process.argv&lt;/code>の要素は全て文字列になるので、プログラムには「&lt;strong>これは数字だよ！&lt;/strong>」と教えてあげないと、わかってくれないんですね。&lt;/p>
&lt;p>ヒントを読んでみると、数字に変換する方法が書いてあります。&lt;/p>
&lt;blockquote>
&lt;p>変換するには、数字の前に + を書きます。Number()を使う方法もあります。&lt;/p>
&lt;/blockquote>
&lt;p>数字の前に&lt;code>+&lt;/code>をつけるか、&lt;/p>
&lt;pre>&lt;code>console.log(+process.argv[2] + +process.argv[3]);
&lt;/code>&lt;/pre>&lt;p>&lt;code>Number()&lt;/code>という関数を使って文字列を数字に変換してあげます。&lt;/p>
&lt;pre>&lt;code>console.log(Number(process.argv[2]) + Number(process.argv[3]));
&lt;/code>&lt;/pre>&lt;p>エラーが出てしまった人は、&lt;code>Number()&lt;/code>の頭文字が大文字になっているか、()の数が合っているかなど確認してみてくださいね。&lt;/p>
&lt;h2 id="3io">問題3「初めてのI/O！」&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>3問目です。この問題は少し難しいので、「ファイルの中身を取り出す」ステップと、「改行を数える」ステップに分けてみます。&lt;/p>
&lt;h3 id="heading-2">ファイルの中身を取り出す&lt;/h3>
&lt;p>「&lt;strong>同期処理？ファイルシステムの関数？？？&lt;/strong>」となりますね。&lt;/p>
&lt;p>Node.jsには、あらかじめ色々な関数を用意してくれているモジュール（パッケージのようなもの）があります。その一つが&lt;code>fs&lt;/code>（file system）というモジュールです。&lt;/p>
&lt;p>&lt;code>fs&lt;/code>には、ファイルを扱うためのいろいろな関数が用意されています。&lt;/p>
&lt;pre>&lt;code>var fs = require('fs');
&lt;/code>&lt;/pre>&lt;p>モジュールを呼び出すためには、上記のように記述します。&lt;/p>
&lt;p>&lt;code>var&lt;/code>は、「&lt;strong>変数の宣言&lt;/strong>」です（最近は&lt;code>var&lt;/code>ではなく&lt;code>const&lt;/code>が推奨）。&lt;code>var fs&lt;/code>の&lt;code>fs&lt;/code>は「&lt;strong>変数名&lt;/strong>」で、任意の名前を付けられます。「fs」という名前の箱に、&lt;code>require('fs')&lt;/code>の結果を収納しているイメージです。&lt;/p>
&lt;p>&lt;code>require()&lt;/code>は&lt;strong>モジュールを呼び出す関数&lt;/strong>、引数には文字列で&lt;strong>モジュールの名前&lt;/strong>を渡します。&lt;/p>
&lt;pre>&lt;code>var fs = require('fs');
console.log(fs.readFileSync(process.argv[2]));
&lt;/code>&lt;/pre>&lt;p>&lt;code>3.js&lt;/code>というファイルを作って、上記のようなプログラムで&lt;code>fs&lt;/code>の機能を試してみましょう。ヒントによると&lt;code>fs.readFileSync()&lt;/code>の引数には読み込むファイルのパスを指定するので、コマンドライン引数で渡すようにしてみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>読み込みを試す用に、&lt;code>sample.txt&lt;/code>というテキストファイルを作ってみました。&lt;/p>
&lt;pre>&lt;code>$ node 3.js ./sample.txt
&lt;/code>&lt;/pre>&lt;p>実行して試してみます（&lt;code>./&lt;/code>は現在の位置です）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こんな結果が出ました。「なんじゃこりゃ！」ですね&lt;/p>
&lt;p>&lt;code>readFileSync()&lt;/code>は「Bufferオブジェクト」という形式でファイルの中身を返します。これを文字列に変換するには、&lt;code>toString()&lt;/code>という関数を使います。&lt;/p>
&lt;pre>&lt;code>var fs = require('fs');
var buf = fs.readFileSync(process.argv[2]);
var text = buf.toString();
console.log(text);
&lt;/code>&lt;/pre>&lt;p>取り出したものを変換してから&lt;code>console.log()&lt;/code>してみましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>文字列として取り出すことができました！&lt;/p>
&lt;h3 id="heading-3">改行を数える&lt;/h3>
&lt;p>改行を数えるには、ヒントのように&lt;code>split()&lt;/code>を使ってみます。&lt;/p>
&lt;blockquote>
&lt;p>JavaScriptの String は .split() 関数を使って分割出来ます。\n を区切り文字として使えば String を1行ずつに分割した Array を受け取ることが出来ます。ただし、ファイルの最後の改行には気をつけてください。&lt;/p>
&lt;/blockquote>
&lt;p>下記のようなプログラムで、文字列を&lt;code>\n&lt;/code>で分割してみます（&lt;code>\n&lt;/code>は改行を表しています）。&lt;/p>
&lt;pre>&lt;code>var fs = require('fs');
var buf = fs.readFileSync(process.argv[2]);
var text = buf.toString();
var array = text.split('\n');
console.log(array);
&lt;/code>&lt;/pre>&lt;p>実行してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ファイルの中身を&lt;code>\n&lt;/code>で区切ることができました！&lt;/p>
&lt;p>ただし、ヒントにあるように、最後に意図しない&lt;code>''&lt;/code>が入っていますね。これはファイルの最後には改行が入るようになっているためです。&lt;/p>
&lt;p>なので、改行の数を数えるには「要素の数 - 1」をしてあげればよさそうです。&lt;/p>
&lt;p>「こんな関数使いたい！」というときは「JavaScript 配列 要素 数える」などと検索してみましょう。配列の要素を数えるためには、&lt;code>Array.length&lt;/code>というプロパティを使います。&lt;/p>
&lt;pre>&lt;code>var fs = require('fs');
var buf = fs.readFileSync(process.argv[2]);
var text = buf.toString();
var array = text.split('\n');
var n_num = array.length - 1;
console.log(n_num);
&lt;/code>&lt;/pre>&lt;p>上記のように、&lt;code>配列.length&lt;/code>で要素数を数え、最後の改行分の1を引いてみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>意図した数字になりました！&lt;/p>
&lt;p>&lt;code>$ learnyounode verify 3.js&lt;/code>で答え合わせです。&lt;/p>
&lt;h2 id="heading-4">まとめ&lt;/h2>
&lt;p>これで「learnyounode」の1〜3問目は終了です。&lt;strong>お疲れ様でした！&lt;/strong>&lt;/p>
&lt;p>プログラミングを初めて学ぶ方は、新しい情報が多く難しく感じたかもしれません。でも問題を解きながら変数や関数に慣れていけば、&lt;strong>「おっ、こういうことか」とわかる瞬間&lt;/strong>がくるはずです！&lt;/p>
&lt;p>めげずにNode.js勉強頑張っていきましょう！&lt;/p></description></item><item><title>NodeSchoolでNode.jsの学習を始めよう！インストール手順から基本操作までステップ別解説</title><link>https://dotstud.io/blog/node-school-before-learn/</link><pubDate>Fri, 20 Apr 2018 14:00:26 +0900</pubDate><guid>https://dotstud.io/blog/node-school-before-learn/</guid><description>&lt;p>こんにちは、ちゃんとくです。&lt;strong>みなさんNode.jsしてますかー！&lt;/strong>&lt;/p>
&lt;p>dotstudioでは何度も紹介していますが、Node.jsは&lt;!-- raw HTML omitted -->超超ざっくり言うとサーバサイドで動くJavaScript&lt;!-- raw HTML omitted -->ですね。&lt;/p>
&lt;p>これからNode.jsを学びたい！という人も多いと思うのですが、初めてNode.jsを学びたいときにピッタリな「&lt;strong>NodeSchool&lt;/strong>」をご存知でしょうか。&lt;/p>
&lt;p>&lt;a href="https://nodeschool.io/">&lt;img src="https://dotstud.io/img/blog/156/nodeschool.png" alt="">&lt;/a>
NodeSchoolは&lt;strong>JavaScriptに関するいろいろな授業を集めた学校のようなもの&lt;/strong>で、コードを書いて問題を解いていくことで学習を進められます。&lt;/p>
&lt;p>世界各国のさまざまな言語に対応していて、日本語に対応した「&lt;a href="https://nodeschool.io/tokyo/">NodeSchool Tokyo&lt;/a>」のページもあります。&lt;/p>
&lt;p>みんなで集まって授業を進めるハンズオンイベントも盛んで、ちょうど&lt;!-- raw HTML omitted -->5月21日にNodeSchool Tokyoが開催&lt;!-- raw HTML omitted -->されるようです！
&lt;a href="https://nodejs.connpass.com/event/82742/">&lt;img src="https://dotstud.io/img/blog/156/link.png" alt="">&lt;/a>&lt;/p>
&lt;p>今回は、そもそも「コードを書くのもコマンドラインも初めて」という人向けに、&lt;strong>NodeSchoolを始めるまで&lt;/strong>を紹介してみたいと思います。&lt;/p>
&lt;p>CLIの操作方法、Node.jsの環境構築から解説していきますが、「コマンドライン使えるよ、もうNode.js入ってるよ」という人は「&lt;a href="https://dotstud.io/blog/node-school-before-learn/#nodeschool%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">NodeSchoolのインストール&lt;/a>」の章から進めましょう！&lt;/p>
&lt;p>それではやって行こう！&lt;/p>
&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->※筆者はMacユーザのため、基本的にMacに沿った説明になっています。Windows向けの説明も書いていますが、わからないときは適宜調べてみてください。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;h2 id="nodeschool">NodeSchoolを始める前に&lt;/h2>
&lt;h3 id="cli">コマンドラインインタフェース（CLI）の操作&lt;/h3>
&lt;p>NodeSchoolは、自身のPCのコマンドライン上（コマンドラインインタフェース、CLI）で進めるツールです。学習を始めるにあたって、基本の操作を覚えておきましょう！&lt;/p>
&lt;p>（↓長くなっちゃったので別記事にしました）&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="nodejs">Node.jsのインストール&lt;/h3>
&lt;p>NodeSchoolはNode.jsで動きます。NodeSchoolを動かすために、自身のPCにNode.js環境を準備をします。&lt;/p>
&lt;p>まずNode.jsがインストールされているかは、下記コマンドで確認してみてください。&lt;/p>
&lt;pre>&lt;code>$ node -v
&lt;/code>&lt;/pre>&lt;p>インストールされている場合はインストールされているバージョン、されていない場合は &lt;code>command not found&lt;/code> といったエラーが出ます。&lt;/p>
&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->※2018年4月20日時点の最新版はv9.11.1、安定板はv8.11.1です。新しめのバージョンを使うのがオススメです（v6、v7辺りで大きめの変更がありました）。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://nodejs.org/ja/">Node.js公式サイト&lt;/a>からインストーラを使ってインストールしてもよいのですが、Node.jsはバージョンアップが多いので、&lt;!-- raw HTML omitted -->Node.jsのバージョンを管理できるツールと一緒にインストールするのがオススメ&lt;!-- raw HTML omitted -->です。&lt;/p>
&lt;p>バージョン管理ツールには「nodebrew」や「nvm」、Windowsの方は「nodist」などがあります。&lt;/p>
&lt;p>「nodebrew」を使ったインストール方法をまとめたので、こちらを参考にインストールしてみてください！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="nodeschool-1">NodeSchoolのインストール&lt;/h2>
&lt;p>さて、Node.js環境の準備ができたら、&lt;strong>いよいよNodeSchoolをインストール&lt;/strong>しましょう。&lt;/p>
&lt;p>NodeSchoolは「npm」というパッケージ管理ツールで配布されているので、npmコマンドでインストールします（Node.jsと一緒にインストールされるのでとりあえず深く考えなくてOK）。&lt;/p>
&lt;p>&lt;a href="https://nodeschool.io/ja/index.html">&lt;img src="https://dotstud.io/img/blog/156/class.png" alt="">&lt;/a>
NodeSchoolには上記のようにいくつかの授業があるので、今回は「&lt;strong>learnyounode&lt;/strong>」という授業を入れてみます。下記コマンドを実行しましょう。&lt;/p>
&lt;pre>&lt;code>$ npm install -g learnyounode
&lt;/code>&lt;/pre>&lt;p>問題なくインストールされたか確認してみます。下記コマンドを実行しましょう。&lt;/p>
&lt;pre>&lt;code>$ learnyounode
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/156/learnyounode.png" alt="">
こんな画面が開いたでしょうか？&lt;/p>
&lt;p>これがNodeSchoolの実行画面で、ここから学習を進めていきます。&lt;strong>インストールお疲れ様でした！&lt;/strong>&lt;/p>
&lt;h2 id="nodeschool-2">NodeSchoolの基本操作&lt;/h2>
&lt;p>まず、「&lt;strong>とりあえずこの画面閉じたい！&lt;/strong>」というときは&lt;code>control+c&lt;/code>で終了できます。&lt;/p>
&lt;p>基本は十字キーの↑↓で移動し、エンターで選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/language.png" alt="">
「英語表示になっちゃってるよ！」という人は、まずは言語設定を日本語にしましょう。矢印キーで「CHOOSE LANGUAGE」に移動し、エンターで選択します。&lt;/p>
&lt;h2 id="heading">問題を解く方法&lt;/h2>
&lt;h3 id="heading-1">問題画面の見方&lt;/h3>
&lt;p>さてNodeSchoolを始める準備ができましたが、問題を解く方法も少し癖があります。試しに1問解いてみましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/helloworld.png" alt="">
十字キーで移動し、「こんにちは世界」を選んでエンターします（いわゆる&amp;quot;Hello, world&amp;quot;ですが、日本語訳するとやや不自然ですね）。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/question.png" alt="">
するとこんな文章が表示されます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/detail.png" alt="">
大きくわけると、3つの要素で構成されています。&lt;/p>
&lt;p>日本語なので、落ち着いて問題とヒントを読み進めましょう。&lt;/p>
&lt;h3 id="heading-2">ヒントを読んで進める&lt;/h3>
&lt;p>NodeSchoolでは、自分でNode.js実行ファイルを作り、実際に実行させて答え合わせをして進めていきます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/question_detail.png" alt="">
この問題は、&lt;!-- raw HTML omitted -->コンソール（ここではターミナル上）に「こんにちは世界」と表示するNode.jsスクリプトを書いてください&lt;!-- raw HTML omitted -->という意味です。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/hint1.png" alt="">
ヒントをみると、「&lt;code>.js&lt;/code>拡張子のファイルを作って、&lt;code>$ node xxx.js&lt;/code> を実行すればOKです」と書いてありますね。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/hint2.png" alt="">
そして 「&lt;code>console.log(&amp;quot;text&amp;quot;)&lt;/code> と記述するとコンソールに出力できます」とあります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/hint3.png" alt="">
答え合わせ方法は「&lt;code>$ learnyounode verify xxx.js&lt;/code>でテストする」とあります。&lt;/p>
&lt;p>その通りにやってみましょう！&lt;/p>
&lt;h3 id="nodejs-1">Node.js実行ファイルを作る&lt;/h3>
&lt;p>問題を解くとき、この問題文＆ヒントを見ながら進めたいですよね。&lt;/p>
&lt;p>そこで操作画面をもう一つ開きます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/terminal.png" alt="">
Macの場合はツールバーの「シェル」から「新規ウィンドウ」または「新規タブ」で開くことができます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/iterm.png" alt="">
前述の記事でオススメしたiTermを使っている場合は、画面分割機能がオススメです。ツールバーの「Shell」から「Split&amp;hellip;」を選ぶか、「⌘+D」で横に分割、「⌘+Shift+D」で縦に分割できます（使用頻度が高いので覚えておくのがオススメです）。&lt;/p>
&lt;p>問題を解くファイルは、あとで見つけやすいようにひとところにまとめておきましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/work_dir.png" alt="">
ちゃんとくはこんな感じで、ホームディレクトリ（開いた場所/cdを実行した移動先）の下に &lt;code>/workspace/nodeschool/learnyounode/&lt;/code>というディレクトリを作り、その下に実行ファイルを作っています。&lt;/p>
&lt;p>好みはそれぞれなので、自分がわかりやすい場所であればなんでもOKです。&lt;/p>
&lt;p>それではファイルを作成して、実行スクリプトを書きましょう！Macの場合は&lt;code>touch&lt;/code>コマンドで新規ファイルを作成できます。&lt;/p>
&lt;pre>&lt;code>$ touch 1.js
&lt;/code>&lt;/pre>&lt;p>ファイル名も、自分がわかればOKです。どの問題かわかるように番号や問題タイトルなどをつけておくのがオススメです。&lt;/p>
&lt;h3 id="heading-3">エディタでスクリプトを書く&lt;/h3>
&lt;p>それでは「こんにちは世界」用のファイルにスクリプトを書いていきます。&lt;/p>
&lt;p>&lt;code>vi&lt;/code>コマンドなどでターミナル上で開いてもよいのですが、プログラミング向けエディタ（IDE）を使うのがオススメです。無料エディタでは&lt;a href="https://www.microsoft.com/ja-jp/dev/products/code-vs.aspx">Visual Studio Code&lt;/a>や、軽量な&lt;a href="https://atom.io/">Atomエディタ&lt;/a>などが流行りです（ちゃんとくはAtom）。&lt;/p>
&lt;p>&lt;code>$ open ./&lt;/code>というコマンド（Windowsの人は&lt;code>explore&lt;/code>）でファイルの場所を開いてみましょう。（&lt;code>./&lt;/code>は今いるディレクトリを表しています。）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/open.png" alt="">
ファイルの場所がファインダーで表示されました。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/select_editor.png" alt="">
編集したいファイルを右クリックすると開くアプリを選択できるので、エディタで開きましょう。&lt;/p>
&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->※この「CLIからエディタでファイルを開く操作」は、エディタをカスタマイズしてコマンドで実行することもできます。Atomの場合は&lt;code>$ atom ./&lt;/code>など（後日記事にしてみたいと思います）。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/example.png" alt="">
ヒントを参考に、&lt;code>console.log(&amp;quot;text&amp;quot;)&lt;/code>コマンドを書いてみます。エディタで「⌘+s」などで保存して、試しに実行してみましょう。&lt;/p>
&lt;p>&lt;code>$ node xxx.js&lt;/code>でファイルを実行します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/script.png" alt="">
上記のような実行結果になったでしょうか？&lt;/p>
&lt;p>&lt;code>console.log()&lt;/code>というコマンドに&lt;code>&amp;quot;text&amp;quot;&lt;/code>を渡したら、「text」と表示されました。&lt;/p>
&lt;p>「こんにちは世界」と表示するには……もう分かったでしょうか？（ちょっと意地悪ですが、頑張って解いてみてください！）&lt;/p>
&lt;h3 id="heading-4">答え合わせ&lt;/h3>
&lt;p>さて、これだ！というスクリプトが書けたら答え合わせをします。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/verify.png" alt="">
ヒントのとおり、&lt;code>$ learnyounode verify xxx.js&lt;/code>を実行します（learnyounodeとかファイル名とか記述するの長いなあってときは、途中まで書いてTabを押すといいことがあります）。&lt;/p>
&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->※CLIに慣れてくると雰囲気がわかりますが、&lt;code>$ モジュール名 命令 引数&lt;/code>という風にコマンドを実行しています。引数とはプログラムに渡すモノです。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/verify_detail.png" alt="">
答え合わせの結果画面です。自分の書いたスクリプトの実行結果と、想定回答（求められている答え）が表示されます。&lt;/p>
&lt;p>&lt;strong>無事に正解していると褒められます。&lt;/strong>&lt;/p>
&lt;p>回答例も表示されるので、確認してみましょう。&lt;/p>
&lt;p>無事に解けたら、また「&lt;a href="https://dotstud.io/blog/node-school-before-learn/#%E5%95%8F%E9%A1%8C%E3%82%92%E8%A7%A3%E3%81%8F%E6%96%B9%E6%B3%95">問題を解く方法&lt;/a>」のように&lt;code>$ learnyounode&lt;/code> を実行して問題ファイルを開き、進めていきましょう。&lt;/p>
&lt;p>&lt;strong>NodeSchoolデビューお疲れ様でした！&lt;/strong>&lt;/p></description></item><item><title>【Mac向け】「黒い画面」の苦手意識を克服しよう！コマンドラインインタフェースの基本操作</title><link>https://dotstud.io/blog/how-to-use-cli/</link><pubDate>Mon, 09 Apr 2018 14:00:26 +0900</pubDate><guid>https://dotstud.io/blog/how-to-use-cli/</guid><description>&lt;p>こんにちは、ちゃんとくです。&lt;/p>
&lt;p>これからプログラミングの学習を始めたいと思っているみなさん、「&lt;strong>コマンドラインインタフェース&lt;/strong>」はご存知ですか？&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/illust.png" alt="">
いわゆるプログラマーなイメージの、「&lt;strong>黒い画面&lt;/strong>」ってやつですね。&lt;/p>
&lt;p>苦手意識を持つ方も多いと思いますが、プログラミングの学習を進めるにあたっては必須となっていきます。&lt;/p>
&lt;p>基本を覚えれば簡単なので、今回はコマンドラインインタフェースの基本操作を覚えていきましょう！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="cli">コマンドラインインタフェース（CLI）とは&lt;/h2>
&lt;p>コマンドラインインタフェースとは、簡単に言うとPC上で行う操作を&lt;!-- raw HTML omitted -->キーボード入力（コマンド）だけで操作する画面&lt;!-- raw HTML omitted -->のことです。&lt;strong>CLI&lt;/strong>（Comand Line Interface）と呼ばれ、逆に通常マウスなどでPCを扱う画面を&lt;strong>GUI&lt;/strong>（Grafical User Interface）と呼びます。&lt;/p>
&lt;p>Macの人は「ターミナル」を開いてみましょう。
&lt;img src="https://dotstud.io/img/blog/156/cli.png" alt="">
こういう画面です。いわゆる「黒い画面」（画像は白いけど）ってやつです。この画面は「&lt;strong>自分のPC&lt;/strong>」を表示しています。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/cli_pwd.png" alt="">
上記のように、「&lt;strong>pwd&lt;/strong>」と打ってエンターしてみてください。&lt;/p>
&lt;p>&lt;code>/Users/xxx&lt;/code> のように表示されたと思います。これは&lt;code>pwd&lt;/code>という「&lt;strong>現在のディレクトリを教えて&lt;/strong>」というコマンドを打ったので、現在いる場所が表示された状態です。（※ディレクトリ…PC上の住所。フォルダ的なもの。）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/gui.png" alt="">
&lt;code>/Users/xxx&lt;/code> はちょっと聞きなれないディレクトリですが、ファインダーなどで「ユーザ/xxx」を開いていることと同じことを表しています。このファインダーで表示している画面が「GUI」です。&lt;/p>
&lt;p>ちなみに「pwd」は「&lt;!-- raw HTML omitted -->present working directory&lt;!-- raw HTML omitted -->」の略で、それぞれのコマンドは英語に基づいているので合わせて覚えると簡単ですね。&lt;/p>
&lt;h2 id="heading">基本のコマンドいくつか&lt;/h2>
&lt;p>ターミナルを開いたときにいる&lt;!-- raw HTML omitted -->デフォルトの場所を「ホームディレクトリ」&lt;!-- raw HTML omitted -->と言います。「cd」というコマンドを打つことでここに戻れます。&lt;/p>
&lt;p>続いて「ls」と打ってみてください。
&lt;img src="https://dotstud.io/img/blog/156/cli_ls.png" alt="">
「ls」は「list」という意味で、現在のディレクトリ直下にあるディレクトリとファイルが表示されました。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/gui_ls.png" alt="">
この場所を見ている状態と同じです。英語と日本語ですが、同じものが表示されていますね！&lt;/p>
&lt;p>ではコマンドライン上で新しいディレクトリを作り、その中へ移動してみます。
&lt;img src="https://dotstud.io/img/blog/156/cli_mkdir.png" alt="">
「mkdir 任意のディレクトリ名」と打ち、そのあと「cd ディレクトリ名/」と打ちます。（nodeschool説明記事と一緒に書いているので、nodeschool用フォルダを作っています笑）&lt;/p>
&lt;p>※mkdir…make directory / cd…change directory&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/156/gui_mkdir.png" alt="">
これは「ファインダー上で右クリックでファイルを新規作成、ダブルクリックして開く」と同じことです。&lt;/p>
&lt;p>コマンドのあとにディレクトリ名などを指定した部分は、「&lt;strong>引数&lt;/strong>」と言います。コマンドに「こういう名前で作ってね」「ここに移動してね」と渡す部分です。&lt;/p>
&lt;h2 id="heading-1">コマンドライン操作の表し方&lt;/h2>
&lt;p>「このようにコマンドを打ってみてください」というのを、大抵下記のように表します。&lt;/p>
&lt;pre>&lt;code>$ mkdir nodeschool
$ cd nodeschool/
&lt;/code>&lt;/pre>&lt;p>「$」マークはコマンドラインの操作だよーということを表しているので、打つときは不要です。&lt;/p>
&lt;h2 id="heading-2">便利なターミナルアプリ&lt;/h2>
&lt;p>Macにデフォルトで入っている「ターミナル」で進めてもよいのですが、いろいろと便利なターミナルアプリを入れておくのがオススメです。&lt;/p>
&lt;p>よく使われているのは「&lt;a href="https://www.iterm2.com/">iTerm&lt;/a>」です。（ちゃんとくの画面もこれ。）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/158/separate.png" alt="">
いくつかの操作を並行したいときにこんな感じで画面を分割できたり、進めていく上でなにかと便利なカスタマイズができたりします。&lt;/p>
&lt;h2 id="heading-3">まとめ&lt;/h2>
&lt;p>このような感じで、コマンドでPCを操作する雰囲気が掴めたでしょうか。&lt;/p>
&lt;p>「&lt;strong>なんでわざわざ難しいコマンドで操作するの？&lt;/strong>」という感じもしますが、&lt;!-- raw HTML omitted -->ゆくゆくプログラムを管理したり書いたりしていく上で便利になっていく&lt;!-- raw HTML omitted -->ので覚えておきましょう！&lt;/p>
&lt;p>もっとコマンドを知りたい！という人は「&lt;strong>UNIXコマンド&lt;/strong>」を調べてみてください！&lt;/p></description></item><item><title>Google公式ライブラリを利用してNode.jsからGmailの送受信をしてみよう</title><link>https://dotstud.io/blog/gmail-api-from-nodejs/</link><pubDate>Wed, 21 Feb 2018 17:43:26 +0900</pubDate><guid>https://dotstud.io/blog/gmail-api-from-nodejs/</guid><description>&lt;p>こんにちは、のびすけです。&lt;/p>
&lt;p>Node.jsでGmailを制御する方法は、過去に色々な記事が出ているのですが、全体的に記事が古く、&lt;a href="https://developers.google.com/gmail/api/quickstart/nodejs?hl=ja">Gmail API Node.js Quickstart&lt;/a>のチュートリアルも割とわかりにくいなぁという印象です。英語しかないし。&lt;/p>
&lt;p>また、勝手ライブラリも多いのですがメンテナンスされてなく利用していく際の不安も多いです。&lt;/p>
&lt;p>ということで、今日はNode.jsでGmailを使う方法の紹介です。&lt;/p>
&lt;p>以前書いたSpreadSheets記事も同様のGoogle APIライブラリを利用しているので基本的な手順は同じです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="gmail-api">Gmail APIの有効化とクライアントシークレットの取得&lt;/h2>
&lt;p>&lt;a href="https://console.developers.google.com/start/api?id=gmail&amp;amp;hl=ja">こちらのリンク&lt;/a>からウィザード開始します。ログインしているGoogleアカウントが利用するGmailのアカウントになるので複数のGoogleやG Suiteのアカウントを持っている人は注意しましょう。&lt;/p>
&lt;p>チェックをして進みます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/7aa9886c3113712265ee866ed58f6658.png" alt="">&lt;/p>
&lt;p>少し待つとAPIが有効になるので進みます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/2babe62f7ce826080545439c3c2675d9.png" alt="">&lt;/p>
&lt;p>認証情報に進みますが&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>&lt;strong>例によってこの画面は何もせずに&lt;code>キャンセル&lt;/code>ボタンを押しましょう。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/1934915770a80c6fab94ee9818f9cf65.png" alt="">&lt;/p>
&lt;p>このダッシュボード画面になりますが、&lt;code>OAuth同意画面&lt;/code>のタブを選択します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/7f28a9c626ea9f2ecd0b4691ef337859.png" alt="">&lt;/p>
&lt;p>&lt;code>ユーザーに表示するサービス名&lt;/code>の箇所に任意の名前を入力して、保存を押して進みます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/b93e391525943007cddd5de87a22acbf.png" alt="">&lt;/p>
&lt;p>認証情報タブに戻り、&lt;code>認証情報を作成&lt;/code> -&amp;gt; &lt;code>OAuthクライアントID&lt;/code>を選択します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/57b7c424a42dd9fedaed483ebbf5d84b.png" alt="">&lt;/p>
&lt;p>クライアントID作成画面では&lt;code>その他&lt;/code>を選択し、任意の名前を入力します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/124eeda9adf92739b1eff9b1e3afcb42.png" alt="">&lt;/p>
&lt;p>作成すると最初のダッシュボード画面に戻りますが、作成したクライアントIDが表示されています。ここの右下のダウンロードボタンを押すとクライアントシークレットが保存されたJSONファイルがダウンロードされます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/64db51910795b26e05aef6cb9918c33f.png" alt="">&lt;/p>
&lt;p>任意の場所に&lt;code>client_secret.json&lt;/code>という名前にリネームして保存しましょう。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/8a4b65dfb3319eee11ddea1d0e7d407d.png" alt="">&lt;/p>
&lt;p>これで、 &lt;strong>クライアントシークレットの保存が出来ました。&lt;/strong>&lt;/p>
&lt;h2 id="nodejs">Node.jsプロジェクトの準備&lt;/h2>
&lt;p>Node.jsはv9.5.0です。&lt;/p>
&lt;pre>&lt;code>mkdir gmail
cd gmail
npm init -y
&lt;/code>&lt;/pre>&lt;p>先ほどの&lt;code>client_secret.json&lt;/code>をこのディレクトリに移動します。&lt;/p>
&lt;pre>&lt;code>ls
package.json client_secret.json
&lt;/code>&lt;/pre>&lt;p>ライブラリのインストールをすれば準備完了です。google-auth-libraryのバージョンは1.3.1になります。&lt;/p>
&lt;pre>&lt;code>$ npm i googleapis google-auth-library --save
&lt;/code>&lt;/pre>&lt;p>これで準備完了です。&lt;/p>
&lt;h2 id="heading">アクセストークンの保存&lt;/h2>
&lt;p>本家とは少し違うやり方です。&lt;/p>
&lt;p>本家のコードだとアクセストークンの作成&amp;amp;保存作業と実際のAPI呼び出しが一緒になったコードですがトークンの作成&amp;amp;保存は最初のみ行えば良いので手順を分けて紹介します。&lt;/p>
&lt;p>&lt;code>getAndStoreToken.js&lt;/code>を作成します。&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/blog/google-spreadsheets-from-nodejs/">前回の記事のコード&lt;/a>とほぼ同様ですが、APIライブラリのバージョンの違いにより、呼び出し方が少し異なります。注意しましょう。&lt;/p>
&lt;pre>&lt;code>//getAndStoreToken.js
'use strict';
const fs = require('fs');
const readline = require('readline');
const rl = readline.createInterface({
input: process.stdin,
output: process.stdout
});
const {promisify} = require('util');
const {google} = require('googleapis');
const {OAuth2Client} = require('google-auth-library');
//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const rlQuestionAsync = promisify(rl.question);
const SCOPES = ['https://www.googleapis.com/auth/gmail.send','https://www.googleapis.com/auth/gmail.readonly'];
const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR+'/gmail-nodejs-quickstart.json';
const main = async () =&amp;gt; {
const content = await readFileAsync(__dirname+'/client_secret.json');
const credentials = JSON.parse(content); //クレデンシャル
//認証
const clientSecret = credentials.installed.client_secret;
const clientId = credentials.installed.client_id;
const redirectUrl = credentials.installed.redirect_uris[0];
const oauth2Client = new OAuth2Client(clientId, clientSecret, redirectUrl);
//get new token
const authUrl = oauth2Client.generateAuthUrl({
access_type: 'offline',
scope: SCOPES
});
console.log('Authorize this app by visiting this url: ', authUrl);
rl.question('Enter the code from that page here: ', (code) =&amp;gt; {
rl.close();
oauth2Client.getToken(code, async (err, token) =&amp;gt; {
if (err) {
console.log('Error while trying to retrieve access token', err);
return;
}
oauth2Client.credentials = token;
try {
fs.mkdirSync(TOKEN_DIR);
} catch (err) {
if (err.code != 'EEXIST') throw err;
}
await writeFileAsync(TOKEN_PATH, JSON.stringify(token));
console.log('Token stored to ' + TOKEN_PATH);
});
});
};
main();
&lt;/code>&lt;/pre>&lt;p>ここで&lt;code>'https://www.googleapis.com/auth/gmail.readonly','https://www.googleapis.com/auth/gmail.send'&lt;/code>の二つのスコープを指定していますが、表示用のgmail.readonlyとメール送信用のgmail.sendとなっています。表示だけしたい場合や送信だけしたい場合などで使い分けましょう。スコープについては&lt;a href="https://developers.google.com/gmail/api/auth/scopes">
Choose Auth Scopes&lt;/a>で細かく確認できます。&lt;/p>
&lt;p>では、このプログラムを実行しましょう。&lt;/p>
&lt;pre>&lt;code>node getAndStoreToken.js
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.gyazo.com/379de8711e19b5510225e167de555ab6.png" alt="">&lt;/p>
&lt;p>&lt;code>https://accounts.google.com/~&lt;/code>で始まるURLが表示されるのでこれをコピーしてブラウザで開きます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/06afa961-4789-535b-3fee-8eaf67a997af.png" alt="">&lt;/p>
&lt;p>アカウント選択画面になります。 複数Googleアカウントを持っている人は、今回アクセスしようとしているアカウントを選択します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/c5f18901079fc0f4c0362cb0213e89c6.png" alt="">&lt;/p>
&lt;p>許可で進みます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/6058bd3e-258f-1d8d-a7c6-68962617f1b2.png" alt="">&lt;/p>
&lt;p>認証用のコードが発行されるので、ターミナルの&lt;code>Enter the code from that page here:&lt;/code>と書いてある箇所にコピぺしてEnterで進みます。&lt;/p>
&lt;pre>&lt;code>Token stored to /Users/path/to/myapp/gmail-nodejs-quickstart.json
&lt;/code>&lt;/pre>&lt;p>などの表示が出て、&lt;code>gmail-nodejs-quickstart.json&lt;/code>が保存されます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/4fc90f71b3520a01ce2c568eb28e005f.png" alt="">&lt;/p>
&lt;p>これでアクセストークンの保存が完了しました。&lt;/p>
&lt;h2 id="4-gmail">4. いよいよGmailにアクセス&lt;/h2>
&lt;p>いよいよGmailにアクセスします。&lt;/p>
&lt;h3 id="heading-1">ラベル一覧の取得&lt;/h3>
&lt;p>本家チュートリアルを参考に、ラベルの一覧を取得します。
&lt;code>getLabels.js&lt;/code>を作成します。&lt;/p>
&lt;p>ここから先に出てくる&lt;code>userId: 'me'&lt;/code>の&lt;code>me&lt;/code>は指定されている文字列らしく、自分のメアドやアカウント名をあえて指定する必要はなくそのまま&lt;code>me&lt;/code>と書いておけば問題なさそうです。&lt;/p>
&lt;pre>&lt;code>//getLabels.js
'use strict';
const fs = require('fs');
const {promisify} = require('util');
const {google} = require('googleapis');
const {OAuth2Client} = require('google-auth-library');
const gmail = google.gmail('v1');
//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const gmailListLabesAsync = promisify(gmail.users.labels.list); //Gmailのラベル一覧
const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR + '/gmail-nodejs-quickstart.json'; //アクセストークンのファイルを指定
const main = async () =&amp;gt; {
//クレデンシャル情報の取得
const content = await readFileAsync(__dirname+'/client_secret.json'); //クライアントシークレットのファイルを指定
const credentials = JSON.parse(content); //クレデンシャル
//認証
const clientSecret = credentials.installed.client_secret;
const clientId = credentials.installed.client_id;
const redirectUrl = credentials.installed.redirect_uris[0];
const oauth2Client = new OAuth2Client(clientId, clientSecret, redirectUrl);
const token = await readFileAsync(TOKEN_PATH);
oauth2Client.credentials = JSON.parse(token);
//API経由でシートにアクセス
const response = await gmailListLabesAsync({
auth: oauth2Client,
userId: 'me',
});
//結果を表示
console.log(response.data);
};
main();
&lt;/code>&lt;/pre>&lt;p>Async/Awaitで利用できるように&lt;code>const gmailListLabesAsync = promisify(gmail.users.labels.list); &lt;/code>の箇所でPromisifyを利用してプロミス化しています。&lt;/p>
&lt;p>実行するとラベル一覧が取得できます。&lt;/p>
&lt;pre>&lt;code>node getLabels.js
{ labels:
[ { id: 'Label_125',
name: '研修/青山学院大学',
messageListVisibility: 'show',
labelListVisibility: 'labelShow',
type: 'user',
color: [Object] },
{ id: 'Label_40',
name: '取引/養老乃瀧',
messageListVisibility: 'show',
labelListVisibility: 'labelShow',
type: 'user',
color: [Object] },
・
・
・
&lt;/code>&lt;/pre>&lt;p>会社のメールの内容なので出せるところだけ笑&lt;/p>
&lt;h3 id="heading-2">メールの内容を取得&lt;/h3>
&lt;p>メールの内容は&lt;code>Users.messages: list&lt;/code>と&lt;code>Users.messages: get&lt;/code>を利用します。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://developers.google.com/gmail/api/v1/reference/users/messages/get">https://developers.google.com/gmail/api/v1/reference/users/messages/get&lt;/a>
&lt;a href="https://developers.google.com/gmail/api/v1/reference/users/messages/list">https://developers.google.com/gmail/api/v1/reference/users/messages/list&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>必要な箇所だけ抜粋しますが、&lt;code>gmail.users.messages.list()&lt;/code>と&lt;code>gmail.users.messages.get()&lt;/code>というメソッドがあるので利用します。
Async/Awaitで利用できるように、先ほど同様Promisifyします。&lt;/p>
&lt;pre>&lt;code>const gmailGetMessagesAsync = promisify(gmail.users.messages.get);
const gmailListMessagesAsync = promisify(gmail.users.messages.list);
&lt;/code>&lt;/pre>&lt;p>メッセージリストを取得し、メッセージごとのIDを取得します。メッセージIDをもとにメッセージ本文を取得。
最後に本文はBase64変換されてるのでデコードして表示します。&lt;/p>
&lt;pre>&lt;code>省略
//メッセージリストの取得
let res = await gmailListMessagesAsync({
auth: oauth2Client,
userId: 'me'
});
const newestMessageId = res.messages[0].id; //最新のメッセージID
//メッセージの取得
res = await gmailGetMessagesAsync({
auth: oauth2Client,
userId: 'me',
id: newestMessageId
});
//結果を表示
const base64mailBody = res.payload.parts[0].body.data; //parts[0]がテキスト、parts[1]がHTMLメールっぽい(?)
const mailBody = new Buffer(base64mailBody, 'base64').toString(); //メール本文はBase64になってるので変換
console.log(mailBody);//やっとメール本文が表示される
省略
&lt;/code>&lt;/pre>&lt;h3 id="heading-3">メールの送信&lt;/h3>
&lt;p>送信が割と大変でした。&lt;/p>
&lt;p>&lt;code>Users.messages: send&lt;/code>を利用します。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://developers.google.com/gmail/api/v1/reference/users/messages/send">https://developers.google.com/gmail/api/v1/reference/users/messages/send&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>gmail.users.messages.send()&lt;/code>のメソッドを利用します。
先ほどと同様にPromisifyします。&lt;/p>
&lt;pre>&lt;code>const gmailSendMessagesAsync = promisify(gmail.users.messages.send);
&lt;/code>&lt;/pre>&lt;p>次にメール送信時の処理です。&lt;/p>
&lt;pre>&lt;code>省略
const makeBody = (params) =&amp;gt; {
params.subject = new Buffer(params.subject).toString(&amp;quot;base64&amp;quot;); //日本語対応
const str = [
`Content-Type: text/plain; charset=\&amp;quot;UTF-8\&amp;quot;\n`,
`MIME-Version: 1.0\n`,
`Content-Transfer-Encoding: 7bit\n`,
`to: ${params.to} \n`,
`from: ${params.from} \n`,
`subject: =?UTF-8?B?${params.subject}?= \n\n`,
params.message
].join('');
return new Buffer(str).toString(&amp;quot;base64&amp;quot;).replace(/\+/g, '-').replace(/\//g, '_');
}
const messageBody = `
XXXX 様
商品のご購入、誠にありがとうございます。
・Nefry BT x 1
の商品を本日発送しましたのでご連絡差し上げます。
こちらから配送状況をご確認頂けます。
(このメール送信の時点では反映されていない可能性もあります)
https://trackings.post.japanpost.jp/xxxxxxxxxx`;
const raw = makeBody({
to: '相手のメールアドレス',
from: '送信者のメールアドレス',
subject: '件名(日本語可)',
message: messageBody
});
const res = await gmailSendMessagesAsync({
auth: oauth2Client,
userId: 'me',
resource: {
raw: raw
}
});
console.log(res.data);
省略
&lt;/code>&lt;/pre>&lt;p>&lt;code>sendMail.js&lt;/code>などを作成し、この内容で実行するとメールが送信できます。&lt;/p>
&lt;pre>&lt;code>node sendMail.js
{ id: 'xxxxxxxxxxxxxxxxx',
threadId: 'xxxxxxxxxxxxxxxx',
labelIds: [ 'SENT' ] }
&lt;/code>&lt;/pre>&lt;p>Gmail側で受信確認をすると、しっかりと送られてきています。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/3ad5f4729e90c9523e2e6e5cb972349b.png" alt="">&lt;/p>
&lt;p>また、暗号化もされているようで、&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://support.google.com/mail/answer/6330403?authuser=2&amp;amp;visit_id=1-636548034928176578-836942562&amp;amp;p=tls&amp;amp;hl=ja&amp;amp;rd=1">送受信時のメールの暗号化 - Gmailヘルプ&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;img src="https://i.gyazo.com/247eb44de5f0b635d52fd2b0c06a4de3.png" alt="">&lt;/p>
&lt;/blockquote>
&lt;p>Node.jsのメール送信ライブラリはいくつかあって、いくつか試したときに暗号化されてない場合も多かった印象です。暗号化無しだと、この赤いアラートっぽいメール表示になります。&lt;/p>
&lt;p>今回のやり方はGoogle公式のライブラリで、特に意識せずに暗号化も行われているので暗号化に対するアラートなども受け取り手には表示されないので迷惑メールなどに振り分けられてしまう心配もたぶん少ないのでは。
（Gmailの迷惑メールアルゴリズムは色々な要素がありそうなので断言は出来ないですが）&lt;/p>
&lt;h2 id="heading-4">所感&lt;/h2>
&lt;p>実装途中の感想ですが、メール送信が割と苦労した印象です。&lt;/p>
&lt;p>メール送信のNode.jsサンプルが無かったので、&lt;a href="https://developers.google.com/gmail/api/v1/reference/users/messages/send#examples">JavaScript Sample&lt;/a>を見ると、送信パラメータに&lt;code>email RFC 5322 formatted String.&lt;/code>という記述があってRFCのフォーマットを確認する必要がありました。&lt;/p>
&lt;p>この手のライブラリだと&lt;/p>
&lt;pre>&lt;code>const params = {
to: '',
from: '',
subject: '',
body: ''
}
&lt;/code>&lt;/pre>&lt;p>みたいな形式のObjectを突っ込めばいい感じにやってくれる印象があったので&amp;hellip;&amp;hellip;苦笑&lt;/p>
&lt;p>Stack Over Flowの&lt;a href="https://stackoverflow.com/questions/34546142/gmail-api-for-sending-mails-in-node-js">Gmail API for sending mails in Node.js&lt;/a>がかなり参考になりました。&lt;/p>
&lt;p>また、日本語でのSubject送信に&lt;code>=?文字コード?メソッド?Base64変換した文字列?=&lt;/code>という形式で渡すなどは&lt;a href="http://hogem.hatenablog.com/entry/20100122/1264169093">メールのSubjectヘッダのエンコード&lt;/a>の記事が参考になりました。&lt;/p>
&lt;p>とはいえ、問題なくメール送信出来たので、この記事を参考に使ってみてください。&lt;/p>
&lt;p>それでは！&lt;/p>
&lt;h2 id="-">補足: 本家のチュートリアルのエラー&lt;/h2>
&lt;p>今回紹介した手順では問題ないですが、もともとのチュートリアルのコードだと以下の二つのエラーが出ました。(2018年2月時点)&lt;/p>
&lt;h3 id="googlegmail-is-not-a-function">google.gmail is not a function&lt;/h3>
&lt;pre>&lt;code>google.gmail() is giving an error TypeError: google.gmail is not a function?
&lt;/code>&lt;/pre>&lt;p>ってエラーが出ました。&lt;/p>
&lt;p>Stack Over Flowの&lt;a href="https://stackoverflow.com/questions/48762090/google-gmail-is-giving-an-error-typeerror-google-gmail-is-not-a-function">google.gmail() is giving an error TypeError: google.gmail is not a function?&lt;/a>を参考に&lt;/p>
&lt;pre>&lt;code>var google = require('googleapis');
&lt;/code>&lt;/pre>&lt;p>これを↓に変更するとエラー解消されます。&lt;/p>
&lt;pre>&lt;code>var {google} = require('googleapis');
&lt;/code>&lt;/pre>&lt;h3 id="googleauth-is-not-a-constructor">GoogleAuth is not a constructor&lt;/h3>
&lt;p>こちらはIssueがあがっていて&lt;a href="https://github.com/google/google-auth-library-nodejs/issues/251">GoogleAuth is not a constructor #251&lt;/a>を見ると、&lt;/p>
&lt;p>呼び出し方が変更されてて、以下の修正が必要です。&lt;/p>
&lt;pre>&lt;code>const { GoogleAuth } = require('google-auth-library');
&lt;/code>&lt;/pre>&lt;p>↓&lt;/p>
&lt;pre>&lt;code>const { OAuth2Client } = require('google-auth-library');
&lt;/code>&lt;/pre>&lt;p>また、今の変更に伴いOAuthの処理も変更が必要です。&lt;/p>
&lt;pre>&lt;code>const auth = new googleAuth();
const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);
&lt;/code>&lt;/pre>&lt;p>↓&lt;/p>
&lt;pre>&lt;code>//const auth = new googleAuth();
const oauth2Client = new OAuth2Client(clientId, clientSecret, redirectUrl);
&lt;/code>&lt;/pre>&lt;p>これで問題なく利用できるようになりました。&lt;/p></description></item><item><title>Node.jsを始めよう！nodebrewを使って5分で環境構築</title><link>https://dotstud.io/blog/nodejs-install-use-nodebrew/</link><pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/nodejs-install-use-nodebrew/</guid><description>&lt;p>この記事は&lt;a href="https://qiita.com/advent-calendar/2017/nodejs2">Node.js Advent Calendar 2017&lt;/a>に参加しています！&lt;/p>
&lt;p>こんにちは、エンジニアのちゃんとくです。「これからNode.jsを始めたい！」という人向けに導入記事をまとめていきたいと思います。まずは環境構築からはじめましょう！&lt;/p>
&lt;p>今回はNode.jsのバージョンを管理できる「&lt;strong>nodebrew&lt;/strong>」を使ったインストール手順を紹介します。&lt;/p>
&lt;h2 id="heading">普通のダウンロードじゃダメなの？&lt;/h2>
&lt;p>&lt;a href="https://nodejs.org/ja/">&lt;img src="https://dotstud.io/img/blog/136/1.png" alt="">&lt;/a>
&lt;a href="https://nodejs.org/ja/">Node.js公式ページ&lt;/a>にアクセスすると、どーんとダウンロードボタンがありますね。これをクリックすると、表記のバージョンのNode.jsパッケージが降ってきます。&lt;/p>
&lt;p>&lt;strong>しかし！&lt;/strong>&lt;/p>
&lt;p>Node.jsはバージョンアップの頻度が高く、その都度ダウンロードし直すのは大変ですよね。&lt;/p>
&lt;p>プロジェクトによっては古いバージョンを使いたかったり、プロジェクトごとにバージョンを変えたかったりしたいときもあります。&lt;/p>
&lt;p>&lt;strong>そこで役に立つのがNode.jsのバージョン管理ツールです&lt;/strong>！&lt;/p>
&lt;p>今回紹介する&lt;strong>nodebrew&lt;/strong>以外にも、世界的に利用者の多い&lt;strong>NVM&lt;/strong>（Node Version Manager）やWindows向けの&lt;strong>nodist&lt;/strong>などがあります。&lt;/p>
&lt;p>今回は日本人コミッタが多く困ったときにも質問しやすいnodebrewでやってみます！&lt;/p>
&lt;h2 id="nodebrew">nodebrewをインストール&lt;/h2>
&lt;p>さっそくnodebrewをインストールしましょう！以下のコマンドを実行します。（&lt;code>$&lt;/code>マークはCLIであることを表しているのでコピペの際は不要です！）&lt;/p>
&lt;pre>&lt;code>$ curl -L git.io/nodebrew | perl - setup
&lt;/code>&lt;/pre>&lt;p>完了するとこんなことを言われます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/136/2.png" alt="">&lt;/p>
&lt;p>「&lt;code>~/.nodebrew&lt;/code>にインストールしたからPATH通してね！」というようなことを言っています。&lt;/p>
&lt;p>&lt;code>~/.bash_profile&lt;/code>などの設定ファイルに&lt;code>export PATH=$HOME/.nodebrew/current/bin:$PATH&lt;/code>を追加しましょう。&lt;/p>
&lt;p>追記したらターミナルを開き直すか&lt;code>source&lt;/code>コマンドで更新します。&lt;/p>
&lt;pre>&lt;code>$ source ~/.bash_profile
&lt;/code>&lt;/pre>&lt;p>nodebrewコマンドが使えるか確認してみます。&lt;code>command not found&lt;/code>が出なければOKです。&lt;/p>
&lt;pre>&lt;code>$ nodebrew help
nodebrew 0.9.8
Usage:
…
&lt;/code>&lt;/pre>&lt;h2 id="nodebrewnodejs">nodebrewでNode.jsをインストール&lt;/h2>
&lt;p>まずは&lt;code>nodebrew ls-remote&lt;/code>コマンドでダウンロード可能なNode.jsのバージョンを確認してみます。&lt;/p>
&lt;p>Node.jsは偶数のバージョンがLTS（安定板）、奇数のバージョンが最新版となっています。&lt;/p>
&lt;pre>&lt;code>$ nodebrew ls-remote
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/136/3.png" alt="">
実行するとべろーっとバージョンが出てきますね。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/136/4.png" alt="">
下の方まで見ると2017年12月15日現在はLTSがv8.9.3、最新がv9.3.0であることがわかりました。（io.jsはNode.jsのForkですが、一旦気にしなくてOK）&lt;/p>
&lt;p>今回は最新版のv9.3.0をインストールしてみます。&lt;code>nodebrew install-binary&lt;/code>コマンドを利用します。&lt;/p>
&lt;pre>&lt;code>$ nodebrew install-binary v9.3.0
&lt;/code>&lt;/pre>&lt;p>1分くらいでインストールは完了します。（ダメ回線なので、もっと速いかもしれません）&lt;/p>
&lt;p>&lt;code>nodebrew ls&lt;/code>コマンドで状態を確認します。&lt;/p>
&lt;pre>&lt;code>$ nodebrew ls
v9.3.0
current: none
&lt;/code>&lt;/pre>&lt;p>使用するバージョンの&lt;code>current&lt;/code>がnoneになっているので指定します。&lt;/p>
&lt;pre>&lt;code>$ nodebrew use v9.3.0
$ node -v
v9.3.0
&lt;/code>&lt;/pre>&lt;p>これでNode.jsのインストールは完了です！&lt;/p>
&lt;h2 id="heading-1">バージョン切り替え&lt;/h2>
&lt;p>別のバージョンを使いたくなったら、nodebrewでバージョンを切り替えてみましょう。&lt;/p>
&lt;p>試しにLTSのv8.9.3を使えるようにしてみます。まずはインストール。&lt;/p>
&lt;pre>&lt;code>$ nodebrew install-binary v8.9.3
&lt;/code>&lt;/pre>&lt;p>v8.9.3とv9.3.0が使えるようになりましたが、まだ&lt;code>current&lt;/code>はv9.3.0のままです。&lt;/p>
&lt;pre>&lt;code>$ nodebrew list
v8.9.3
v9.3.0
current: v9.3.0
&lt;/code>&lt;/pre>&lt;p>&lt;code>nodebrew use&lt;/code>でv8.9.3を指定します。&lt;/p>
&lt;pre>&lt;code>$ nodebrew use v8.9.3
$ nodebrew list
v8.9.3
v9.3.0
current: v8.9.3
&lt;/code>&lt;/pre>&lt;p>これでバージョンが切り替えられました！listにあるバージョンは再インストールすることなく切り替えられます。&lt;/p>
&lt;h2 id="heading-2">まとめ&lt;/h2>
&lt;p>ここまで特にむずかしいところなく環境構築できたのではないかと思います！はじめるまでの手軽さもNode.jsの魅力のひとつですよね。&lt;/p>
&lt;p>次回はNode.jsをはじめたばかりの人向けチュートリアルをやってみたいと思います。&lt;/p>
&lt;p>それではまた！&lt;/p></description></item><item><title>Node.jsでGoogle SpreadSheetsを操作してみよう。【GAS不使用】</title><link>https://dotstud.io/blog/google-spreadsheets-from-nodejs/</link><pubDate>Mon, 04 Dec 2017 13:14:41 +0900</pubDate><guid>https://dotstud.io/blog/google-spreadsheets-from-nodejs/</guid><description>&lt;p>こんにちは、代表ののびすけです。&lt;/p>
&lt;p>この記事は&lt;a href="https://qiita.com/advent-calendar/2017/nodejs">Node.jsアドベントカレンダー2017&lt;/a>の記事になります。&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://developers.google.com/apps-script/">GAS&lt;/a>じゃなくてNode.jsから直接スプレッドシートにアクセスしたい！&lt;/strong>&lt;/p>
&lt;p>そう思って調べると&lt;a href="https://developers.google.com/sheets/api/quickstart/nodejs">Node.js Quickstart | Sheets API | Google Developers&lt;/a>が出て来ますが、JS記述も古いし英語なので少しとっつきにくいです。&lt;/p>
&lt;p>ということでちょっと試して記録残そうと思います。&lt;/p>
&lt;h2 id="google-sheets-api">Google Sheets API&lt;/h2>
&lt;p>&lt;a href="https://developers.google.com/sheets/guides/concepts?hl=ja">Google Sheets API&lt;/a>はスプレッドシートにアクセスできるようになるAPIです。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/81dd3461cd263ea7e4d63f06fef54747.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>Google Sheets API を使用すると、スプレッドシートの要素を読み取って変更できます。 スプレッドシートは多くの設定を備えており、美しく機能的なシートを作成することができます。&lt;/p>
&lt;/blockquote>
&lt;p>普段慣れている言語でスプレッドシートにアクセス出来まるので、簡単な操作であれば、GASを使う必要もないです。&lt;/p>
&lt;p>今回のサンプルは&lt;a href="https://github.com/n0bisuke/google-spread-sheet-node.js-sample">こちら&lt;/a>に置いておきます。&lt;/p>
&lt;h3 id="heading">環境&lt;/h3>
&lt;ul>
&lt;li>Node.js v9.2.0&lt;/li>
&lt;li>macOS High Sierra&lt;/li>
&lt;/ul>
&lt;p>参考までに今回の僕の環境です。&lt;/p>
&lt;p>では実際に作っていきます。&lt;/p>
&lt;h2 id="1-google-sheets-api">1. Google Sheets APIを使えるようにする&lt;/h2>
&lt;p>ちなみに2017年12月時点でのウィザードです。こういうのはアップデートによって画面遷移変わるので適宜読み替えてください。&lt;/p>
&lt;blockquote>
&lt;p>Use this wizard to create or select a project in the Google Developers Console and automatically turn on the API. Click Continue, then Go to credentials.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://console.developers.google.com/start/api?id=sheets.googleapis.com">こちらのリンク&lt;/a>からディベロッパーコンソールにいき、&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/31e8011951d1552b8f7126eb459da474.png" alt="">&lt;/p>
&lt;p>&lt;code>新機能のお知らせ、パフォーマンスに関するアドバイス、フィードバック調査、特典に関する最新情報をメールで受け取ります。&lt;/code>の質問はいいえでもたぶん大丈夫です。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/60c5bf6a1e772473dc9fc6d4d7526077.png" alt="">&lt;/p>
&lt;p>&lt;code>認証情報に進む&lt;/code>を選択&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/848f8f79460aac991b46956111f0da07.png" alt="">&lt;/p>
&lt;p>この画面が出ますが、&lt;code>キャンセル&lt;/code>を選択します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/e827d6ab-d728-1016-d22a-76cef4e4972e.png" alt="スクリーンショット 2017-12-03 21.00.17.png" title="スクリーンショット 2017-12-03 21.00.17.png">&lt;/p>
&lt;p>&lt;code>OAuth同意画面&lt;/code>のタブを選択し、メールアドレスを確認し、&lt;code>ユーザーに表示するサービス名&lt;/code>を入力します。&lt;/p>
&lt;p>&lt;code>保存&lt;/code>を選択しましょう。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/1ca3a2d5-b639-bb6c-9508-225d162c96ff.png" alt="スクリーンショット 2017-12-03 21.01.07.png" title="スクリーンショット 2017-12-03 21.01.07.png">&lt;/p>
&lt;p>次に、&lt;code>認証情報&lt;/code>のタブを選択し、 &lt;code>認証情報を作成&lt;/code> -&amp;gt; &lt;code>OAuthクライアントID&lt;/code>を選択します。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/3d5b6da9cf3086b11c728cdc31307268.png" alt="">&lt;/p>
&lt;p>&lt;code>その他&lt;/code>を選択し、任意の名前をつけて&lt;code>作成&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/a8a25dd3-a194-d4a3-ac57-909f8d7712e0.png" alt="スクリーンショット 2017-12-03 21.06.47.png" title="スクリーンショット 2017-12-03 21.06.47.png">&lt;/p>
&lt;p>&lt;code>OK&lt;/code>で進みます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/93c1e777-682e-434e-444d-a3aa8659bd54.png" alt="スクリーンショット 2017-12-03 21.07.25.png" title="スクリーンショット 2017-12-03 21.07.25.png">&lt;/p>
&lt;p>&lt;code>client_secret_xxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com.json&lt;/code>のようなファイルがダウンロードされます。&lt;/p>
&lt;p>&lt;strong>これを&lt;code>client_secret.json&lt;/code>にリネームしましょう。&lt;/strong>&lt;/p>
&lt;h2 id="2-nodejs">2. Node.jsプロジェクトの準備&lt;/h2>
&lt;p>任意のディレクトリを作成して移動します。&lt;/p>
&lt;p>&lt;code>sheetstest&lt;/code>としました。&lt;/p>
&lt;pre>&lt;code>mkdir sheetstest
cd sheetstest
&lt;/code>&lt;/pre>&lt;p>&lt;code>npm init -y&lt;/code>で&lt;code>package.json&lt;/code>を作成します。&lt;/p>
&lt;pre>&lt;code>npm init -y
&lt;/code>&lt;/pre>&lt;p>このディレクトリに先ほどの&lt;code>client_secret.json&lt;/code>を移動させます。&lt;/p>
&lt;pre>&lt;code>ls
package.json client_secret.json
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.gyazo.com/3d796ef0005ef28b914a83517772c65e.png" alt="">&lt;/p>
&lt;p>こんな感じです。&lt;/p>
&lt;p>利用するモジュールを追加します。&lt;/p>
&lt;pre>&lt;code>npm i googleapis google-auth-library --save
&lt;/code>&lt;/pre>&lt;h2 id="3--">3. トークンの作成&amp;amp;保存 (最初だけ)&lt;/h2>
&lt;p>本家とは少し違うやり方です。&lt;/p>
&lt;p>本家のコードだと&lt;code>トークンの作成&amp;amp;保存&lt;/code>作業と実際のAPI呼び出しが一緒になったコードですが&lt;code>トークンの作成&amp;amp;保存&lt;/code>は最初のみ行えば良いので手順を分けて紹介します。&lt;/p>
&lt;p>&lt;code>getAndStoreToken.js&lt;/code>を作成します。&lt;/p>
&lt;pre>&lt;code>//getAndStoreToken.js
'use strict';
const fs = require('fs');
const readline = require('readline');
const rl = readline.createInterface({
input: process.stdin,
output: process.stdout
});
const {promisify} = require('util');
const google = require('googleapis');
const googleAuth = require('google-auth-library');
//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const rlQuestionAsync = promisify(rl.question);
const SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];
const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR+'/sheets.googleapis.com-nodejs-quickstart.json';
const main = async () =&amp;gt; {
const content = await readFileAsync(__dirname+'/client_secret.json');
const credentials = JSON.parse(content); //クレデンシャル
//認証
const clientSecret = credentials.installed.client_secret;
const clientId = credentials.installed.client_id;
const redirectUrl = credentials.installed.redirect_uris[0];
const auth = new googleAuth();
const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);
//get new token
const authUrl = oauth2Client.generateAuthUrl({
access_type: 'offline',
scope: SCOPES
});
console.log('Authorize this app by visiting this url: ', authUrl);
rl.question('Enter the code from that page here: ', (code) =&amp;gt; {
rl.close();
oauth2Client.getToken(code, async (err, token) =&amp;gt; {
if (err) {
console.log('Error while trying to retrieve access token', err);
return;
}
oauth2Client.credentials = token;
try {
fs.mkdirSync(TOKEN_DIR);
} catch (err) {
if (err.code != 'EEXIST') throw err;
}
await writeFileAsync(TOKEN_PATH, JSON.stringify(token));
console.log('Token stored to ' + TOKEN_PATH);
});
});
};
main();
&lt;/code>&lt;/pre>&lt;p>このプログラムを実行します。&lt;/p>
&lt;pre>&lt;code>node getAndStoreToken.js
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://i.gyazo.com/379de8711e19b5510225e167de555ab6.png" alt="">&lt;/p>
&lt;p>&lt;code>https://accounts.google.com/~&lt;/code>で始まるURLが表示されるのでこれをコピーしてブラウザで開きます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/06afa961-4789-535b-3fee-8eaf67a997af.png" alt="スクリーンショット 2017-12-04 11.52.54.png" title="スクリーンショット 2017-12-04 11.52.54.png">&lt;/p>
&lt;p>アカウント選択画面になります。
複数Googleアカウントを持っている人は、今回アクセスしようとしているアカウントを選択します。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/18729d60-e4a6-8996-9519-f9f4750ae1f4.png" alt="スクリーンショット 2017-12-04 11.53.02.png" title="スクリーンショット 2017-12-04 11.53.02.png">&lt;/p>
&lt;p>&lt;code>許可&lt;/code>で進みます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/6058bd3e-258f-1d8d-a7c6-68962617f1b2.png" alt="スクリーンショット 2017-12-04 11.53.09.png" title="スクリーンショット 2017-12-04 11.53.09.png">&lt;/p>
&lt;p>認証用のコードが発行されます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/fd612d7c-0b45-3d09-64ab-c1e02315fe81.png" alt="スクリーンショット 2017-12-04 11.53.27.png" title="スクリーンショット 2017-12-04 11.53.27.png">&lt;/p>
&lt;p>これをコピーしてターミナルに貼り付けてエンターキーで進みます。&lt;/p>
&lt;pre>&lt;code>Token stored to /Users/n0bisuke/dotstudio/playground/sheetstest/sheets.googleapis.com-nodejs-quickstart.json
&lt;/code>&lt;/pre>&lt;p>などと表示されてjsonファイルが保存されます。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/35387/830452dc-ad36-83ef-8cf8-8c80bc9637dd.png" alt="スクリーンショット 2017-12-04 11.57.50.png" title="スクリーンショット 2017-12-04 11.57.50.png">&lt;/p>
&lt;p>&lt;code>sheets.googleapis.com-nodejs-quickstart.json&lt;/code>がフォルダ内に確認できればOKです。&lt;/p>
&lt;h2 id="4-">4. いよいよシートにアクセス&lt;/h2>
&lt;p>さて最後の手順です。&lt;/p>
&lt;p>&lt;code>getSheetsData.js&lt;/code>を作成しましょう。&lt;/p>
&lt;pre>&lt;code>//getSheetsData.js
'use strict';
const fs = require('fs');
const {promisify} = require('util');
const google = require('googleapis');
const googleAuth = require('google-auth-library');
const sheets = google.sheets('v4');
//promisifyでプロミス化
const readFileAsync = promisify(fs.readFile);
const ssValuesGetAsync = promisify(sheets.spreadsheets.values.get);
const TOKEN_DIR = __dirname;
const TOKEN_PATH = TOKEN_DIR + '/sheets.googleapis.com-nodejs-quickstart.json';
const main = async () =&amp;gt; {
//クレデンシャル情報の取得
const content = await readFileAsync(__dirname+'/client_secret.json');
const credentials = JSON.parse(content); //クレデンシャル
//認証
const clientSecret = credentials.installed.client_secret;
const clientId = credentials.installed.client_id;
const redirectUrl = credentials.installed.redirect_uris[0];
const auth = new googleAuth();
const oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);
const token = await readFileAsync(TOKEN_PATH);
oauth2Client.credentials = JSON.parse(token);
//API経由でシートにアクセス
const apiOptions = {
auth: oauth2Client,
spreadsheetId: '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms',
range: 'Class Data!A2:E',
};
const response = await ssValuesGetAsync(apiOptions);
//結果を表示
console.log(response);
};
main();
&lt;/code>&lt;/pre>&lt;p>これを実行します。&lt;/p>
&lt;pre>&lt;code>$ node getSheetsData.js
{ range: '\'Class Data\'!A2:E101',
majorDimension: 'ROWS',
values:
[ [ 'Alexandra', 'Female', '4. Senior', 'CA', 'English' ],
[ 'Andrew', 'Male', '1. Freshman', 'SD', 'Math' ],
[ 'Anna', 'Female', '1. Freshman', 'NC', 'English' ],
[ 'Becky', 'Female', '2. Sophomore', 'SD', 'Art' ],
[ 'Benjamin', 'Male', '4. Senior', 'WI', 'English' ],
[ 'Carl', 'Male', '3. Junior', 'MD', 'Art' ],
[ 'Carrie', 'Female', '3. Junior', 'NE', 'English' ],
[ 'Dorothy', 'Female', '4. Senior', 'MD', 'Math' ],
[ 'Dylan', 'Male', '1. Freshman', 'MA', 'Math' ],
[ 'Edward', 'Male', '3. Junior', 'FL', 'English' ],
[ 'Ellen', 'Female', '1. Freshman', 'WI', 'Physics' ],
[ 'Fiona', 'Female', '1. Freshman', 'MA', 'Art' ],
[ 'John', 'Male', '3. Junior', 'CA', 'Physics' ],
[ 'Jonathan', 'Male', '2. Sophomore', 'SC', 'Math' ],
[ 'Joseph', 'Male', '1. Freshman', 'AK', 'English' ],
[ 'Josephine', 'Female', '1. Freshman', 'NY', 'Math' ],
[ 'Karen', 'Female', '2. Sophomore', 'NH', 'English' ],
[ 'Kevin', 'Male', '2. Sophomore', 'NE', 'Physics' ],
[ 'Lisa', 'Female', '3. Junior', 'SC', 'Art' ],
[ 'Mary', 'Female', '2. Sophomore', 'AK', 'Physics' ],
[ 'Maureen', 'Female', '1. Freshman', 'CA', 'Physics' ],
[ 'Nick', 'Male', '4. Senior', 'NY', 'Art' ],
[ 'Olivia', 'Female', '4. Senior', 'NC', 'Physics' ],
[ 'Pamela', 'Female', '3. Junior', 'RI', 'Math' ],
[ 'Patrick', 'Male', '1. Freshman', 'NY', 'Art' ],
[ 'Robert', 'Male', '1. Freshman', 'CA', 'English' ],
[ 'Sean', 'Male', '1. Freshman', 'NH', 'Physics' ],
[ 'Stacy', 'Female', '1. Freshman', 'NY', 'Math' ],
[ 'Thomas', 'Male', '2. Sophomore', 'RI', 'Art' ],
[ 'Will', 'Male', '4. Senior', 'FL', 'Math' ] ] }
&lt;/code>&lt;/pre>&lt;p>このサンプルでは&lt;a href="https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit#gid=0">こちらのワークブック&lt;/a>へアクセスして情報を取得しています。&lt;/p>
&lt;p>ちなみに用語的には&lt;/p>
&lt;ul>
&lt;li>ワークブック＝Googleスプレッドシートの１ファイル&lt;/li>
&lt;li>シート＝ワークブック内のタブ、シート&lt;/li>
&lt;/ul>
&lt;p>というニュアンスです。&lt;/p>
&lt;pre>&lt;code>//省略
const apiOptions = {
auth: oauth2Client,
spreadsheetId: '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms',
range: 'Class Data!A2:E',
};
//省略
&lt;/code>&lt;/pre>&lt;p>ほかのワークブックにアクセスする場合は&lt;code>https://docs.google.com/spreadsheets/d/&lt;/code>の後に続くIDを&lt;code>spreadsheetId&lt;/code>に指定して実行しましょう。&lt;code>range&lt;/code>は&lt;code>シート名:取得する範囲&lt;/code>という形式で指定して、指定したシートの指定した範囲からセルの情報を取得します。&lt;/p>
&lt;h2 id="heading-1">おわりに&lt;/h2>
&lt;p>これで次回以降は4番目の手順だけでスプレッドシートにアクセスできます。&lt;/p>
&lt;p>&lt;code>client_secret.json&lt;/code>や&lt;code>sheets.googleapis.com-nodejs-quickstart.json&lt;/code>をコピーしてサーバー設置しておけば自動更新する仕組みなども作れます。&lt;/p>
&lt;p>スプレッドシートは色々な場面で利用されているツールなので是非システム連携などに活用してみて下さい。&lt;/p>
&lt;p>応用としてはこちらの内容で使っています。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://qiita.com/n0bisuke/items/3313a64c56317932919e">勉強会( #IoTLT )の登壇者管理でHeadless Chromeを利用している話&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>それでは！&lt;/p></description></item><item><title>Node.js製の静的サイトジェネレータ「Hexo」で無料ブログ開発 vol.3</title><link>https://dotstud.io/blog/hexo-static-site-vol3/</link><pubDate>Tue, 31 Oct 2017 17:53:15 +0900</pubDate><guid>https://dotstud.io/blog/hexo-static-site-vol3/</guid><description>&lt;p>こんにちは、エンジニアのちゃんとくです。ひょんなことから&lt;a href="https://nodejs.connpass.com/">&lt;strong>Node女学園&lt;/strong>&lt;/a>というNode.jsを学ぶ女性のためのコミュニティを立ち上げました。&lt;/p>
&lt;p>このシリーズではNode女学園のブログを作りながら、**Node.js製の静的サイトジェネレータ「Hexo」**の使い方を紹介していきます！&lt;/p>
&lt;p>&lt;a href="https://dotstud.io/blog/hexo-static-site-vol2">&lt;strong>前回&lt;/strong>&lt;/a>はデザインを当ててブログのカスタマイズをしてみました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回はルートを追加してブログ記事以外のページを作ってみます。&lt;/p>
&lt;h2 id="heading">今回やること&lt;/h2>
&lt;p>現在はコマンドで記事を追加すると&lt;code>サイトURL/:YYYY/:MM/:DD&lt;/code>という記事が作成されるようになっています。&lt;/p>
&lt;p>これを変更して、&lt;/p>
&lt;ul>
&lt;li>&lt;code>サイトURL/about/&lt;/code>という情報ページを追加&lt;/li>
&lt;li>&lt;code>サイトURL/blog/:title&lt;/code>に記事を生成&lt;/li>
&lt;/ul>
&lt;p>というのをやってみます。&lt;/p>
&lt;h2 id="heading-1">新しいルートを追加&lt;/h2>
&lt;p>ルートの追加は、&lt;code>hexo new page &amp;quot;[新しいルート]&amp;quot;&lt;/code>というコマンドで簡単にできます。
&lt;img src="https://dotstud.io/img/blog/108/new_route.png" alt="">&lt;/p>
&lt;p>コマンドを実行すると&lt;code>/source&lt;/code>の下に新しいディレクトリが作成されます。
&lt;img src="https://dotstud.io/img/blog/108/about_dir.png" alt="">&lt;/p>
&lt;p>作成された&lt;code>about/index.md&lt;/code>にページ内容を記載します。&lt;/p>
&lt;p>ローカルサーバを起動してhttp://localhost:4000/about/ を見てみます。
&lt;img src="https://dotstud.io/img/blog/108/about.png" alt="">
新しいページができました！&lt;/p>
&lt;h2 id="heading-2">メニューに追加&lt;/h2>
&lt;p>今のままではどこからもリンクがないのでメニューのHomeの横に追加してみます。
&lt;img src="https://dotstud.io/img/blog/108/menu_before.png" alt="">&lt;/p>
&lt;p>&lt;code>/themes/pacman/_config.yml&lt;/code>の&lt;code>menu: &lt;/code>に表示名とPATHを記載します。
&lt;img src="https://dotstud.io/img/blog/108/menu.png" alt="">
Archivesはしばらく不要なので消しました。ついでにEventsとStaffページも追加してみます。&lt;/p>
&lt;p>表示を確認します。
&lt;img src="https://dotstud.io/img/blog/108/menu_after.png" alt="">
メニューができました！各リンクが正しいかも確認しておきましょう。&lt;/p>
&lt;h2 id="blogurl">blog記事のURLを変更する&lt;/h2>
&lt;p>続いてブログ記事が&lt;code>サイトURL/blog/:title&lt;/code>となるように変更していきます。&lt;/p>
&lt;p>&lt;code>プロジェクト/_config.yml&lt;/code>を変更しましょう。
&lt;img src="https://dotstud.io/img/blog/108/title.png" alt="">
&lt;code>permalink: &lt;/code>を&lt;code>/:title/&lt;/code>に変更します。&lt;/p>
&lt;p>&lt;code>new_post_name: &lt;/code>の項目を&lt;code>blog/:title.md&lt;/code>に変更します。
&lt;img src="https://dotstud.io/img/blog/108/blog_title.png" alt="">&lt;/p>
&lt;p>新しい記事を作成してみます。
&lt;img src="https://dotstud.io/img/blog/108/new_post.png" alt="">
&lt;code>/source/blog&lt;/code>の下に記事が追加されるようになりました。&lt;/p>
&lt;p>トップページを確認してみましょう。
&lt;img src="https://dotstud.io/img/blog/108/top.png" alt="">
http://localhost:4000 にはブログ一覧が表示されます。&lt;/p>
&lt;p>記事をクリックして飛んでみます。
&lt;img src="https://dotstud.io/img/blog/108/art.png" alt="">
&lt;code>サイトURL/blog/:title&lt;/code>の形で記事が発行されました！&lt;/p>
&lt;p>&lt;code>hexo deploy -g&lt;/code>でデプロイです。&lt;/p>
&lt;h2 id="heading-3">まとめ&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/108/done.png" alt="">
今回もコマンドと設定ファイルの編集で簡単にルーティングをすることができました。&lt;/p>
&lt;p>かなりサイトらしくなってきましたね！&lt;/p>
&lt;p>次回はサイドバーをカスタマイズしてみたいと思います。&lt;/p></description></item></channel></rss>