<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>office on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/office/</link><description>Recent content in office on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Tue, 17 Jul 2018 10:00:00 +0900</lastBuildDate><atom:link href="/series/office/" rel="self" type="application/rss+xml"/><item><title>営業撃退！？押した人が誰かわかる「インターホン・改」を作ってみた</title><link>https://dotstud.io/blog/no-more-sales-intercom/</link><pubDate>Tue, 17 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/no-more-sales-intercom/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/tomato">佐々木さん&lt;/a>です。一度はとまとというあだ名を授かりましたが、いろいろ審議ののちあだ名を得られず佐々木さんになりました。&lt;/p>
&lt;p>ところでdotstudioには、オフィスハックの大先輩・&lt;a href="https://dotstud.io/members/ukok">うこ&lt;/a>さんが作ったインターホンがあります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>今回はこのインターホンを改良して、&lt;strong>しつこい訪問営業を撃退できるインターホン&lt;/strong>を作ってみます。&lt;/p>
&lt;h2 id="heading">無茶振りは突然に&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ということで時間がないのでさっそく作りましょう！&lt;/p>
&lt;h2 id="heading-1">インターホン改の製作イメージ&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>来客がどんな用件か見分けるために、&lt;strong>最初からボタンを複数用意し、それぞれ音を変えて判別する&lt;/strong>ようにしてみました。&lt;/p>
&lt;p>また前回はBluetooth接続のスピーカーを利用していましたが、通信が切れやすい問題があったので今回は&lt;strong>有線でスピーカーを繋ぎます&lt;/strong>。&lt;/p>
&lt;p>ボタンとなるセンサは扉の外側に、インターホンの本体となるRaspberry Piは扉の内側に設置します。&lt;/p>
&lt;h2 id="heading-2">使ったもの&lt;/h2>
&lt;h3 id="raspberry-pi-3-model-b">Raspberry Pi 3 Model B&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>前回に引き続き、ボードはRaspberry Pi（通称ラズパイ）を使います。ラズパイには&lt;strong>スピーカーのコネクタを直接刺すことができる&lt;/strong>ので便利ですね！&lt;/p>
&lt;h3 id="heading-3">タッチセンサ&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>タッチセンサは、今回安く大量に調達した&lt;a href="https://www.amazon.co.jp/HiLetgo%C2%AE-10%E5%80%8B%E3%82%BB%E3%83%83%E3%83%88-TTP223-%E9%9D%99%E9%9B%BB%E5%AE%B9%E9%87%8F%E5%BC%8F%E3%82%BF%E3%83%83%E3%83%81%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81-%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E3%82%BF%E3%83%83%E3%83%81%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/dp/B010RYGET4/ref=sr_1_63?m=A1XEAMF1H64GNM&amp;amp;s=merchant-items&amp;amp;ie=UTF8&amp;amp;qid=1531481468&amp;amp;sr=1-63">中国製のタッチセンサ&lt;/a>を使います（&lt;a href="https://www.amazon.co.jp/s/ref=sr_pg_3?me=A1XEAMF1H64GNM&amp;amp;rh=i%3Amerchant-items&amp;amp;page=3&amp;amp;ie=UTF8&amp;amp;qid=1531481449">HiLetgo JP&lt;/a>というストア、安く大量購入できて面白いです）。&lt;/p>
&lt;h3 id="heading-4">適当なスピーカー&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>インターホンの音を鳴らすため、適当なスピーカーを用意します。&lt;/p>
&lt;p>このスピーカーはあきばお〜さんで&lt;strong>なんと300円&lt;/strong>でした！（普通に使えてます！）&lt;/p>
&lt;h3 id="heading-5">その他&lt;/h3>
&lt;ul>
&lt;li>ダンボール（加工が楽なので採用しました。）&lt;/li>
&lt;li>音源（それぞれのボタン向けに音源を用意します。それっぽいと雰囲気が出ます。）&lt;/li>
&lt;li>配線用のジャンパ&lt;/li>
&lt;/ul>
&lt;h2 id="heading-6">作っていく&lt;/h2>
&lt;h3 id="heading-7">配線&lt;/h3>
&lt;p>下図のようにラズパイとセンサを接続していきます。図のスイッチはタッチセンサに置き換えて見てください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>それぞれ繋いでいるGPIOは下記です。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">役割&lt;/th>
&lt;th align="center">GPIO&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">電源&lt;/td>
&lt;td align="center">3.3V&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">GND&lt;/td>
&lt;td align="center">GND&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">タッチセンサ&lt;/td>
&lt;td align="center">23&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">タッチセンサ&lt;/td>
&lt;td align="center">24&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">タッチセンサ&lt;/td>
&lt;td align="center">25&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>タッチセンサのGNDは、それぞれラズパイのGNDに接続します。&lt;/li>
&lt;li>タッチセンサのVccをラズパイの3.3Vに接続します。&lt;/li>
&lt;li>タッチセンサのinputをラズパイの23、24、25にそれぞれ繋ぎます。&lt;/li>
&lt;li>最後にスピーカーをイヤホンの部分に繋ぎます。&lt;/li>
&lt;/ul>
&lt;p>以上で回路は完成です。&lt;/p>
&lt;h3 id="heading-8">プログラム&lt;/h3>
&lt;p>ラズパイ上で動かすプログラムはこんな感じです。&lt;/p>
&lt;pre>&lt;code>#!/usr/bin/python
import RPi.GPIO as GPIO
import subprocess
from time import sleep
GPIO.setmode(GPIO.BCM)
GPIO.setup(23, GPIO.IN)
GPIO.setup(24, GPIO.IN)
GPIO.setup(25, GPIO.IN)
while True:
if GPIO.input(23) == GPIO.HIGH:
# center
# hoge.mp3　ここには好きな音源を入れてください
subprocess.call(&amp;quot;mpg321 -q /home/pi/hometools/sounds/hoge.mp3&amp;quot;, shell = True)
elif GPIO.input(24) == GPIO.HIGH:
# right
# fuga.mp3　ここには好きな音源を入れてください
subprocess.call(&amp;quot;mpg321 -q /home/pi/hometools/sounds/fuga.mp3&amp;quot;, shell = True)
elif GPIO.input(25) == GPIO.HIGH:
# left
# piyo.mp3　ここには好きな音源を入れてください
subprocess.call(&amp;quot;mpg321 -g 20 /home/pi/hometools/sounds/piyo.mp3&amp;quot;, shell = True)
else:
sleep(0.01)
GPIO.cleanup()
&lt;/code>&lt;/pre>&lt;h3 id="heading-9">外装&lt;/h3>
&lt;p>こんな感じでダンボールを加工して、用途に合わせた表示を作ります（1番右は前回使ったGroveのタッチセンサを流用）。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-10">試してみる&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;p>タッチしたセンサによって3種の音を流すことができました！これで完成です！&lt;/p>
&lt;h2 id="heading-11">のびすけさんにご報告&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;!-- raw HTML omitted -->「じゃーん！こちらです！」&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「まず左右のpadding違うし！上下のpaddingも違うし！そもそも字汚いしあれやこれやくどくどくど………」&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>「はい……。すいません……。」&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>一流のオフィスハッカーになる道のりはまだまだ遠そうです……。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>ClovaとNefryBT（ESP32）を連携させてみよう</title><link>https://dotstud.io/blog/clova-ifttt-nefrybt-arduino/</link><pubDate>Tue, 10 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/clova-ifttt-nefrybt-arduino/</guid><description>&lt;p>こんにちは、代表の&lt;a href="https://twitter.com/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>LINEのスマートスピーカーClova（正式にはAIアシスタントの名前）が&lt;a href="http://clova-blog.line.me/ja/archives/7990256.html">IFTTTに対応&lt;/a>したのでNefry BT（ESP32）と連携してみました。（実は結構前から対応してたんだけど試せてなかった）&lt;/p>
&lt;p>先日作った勤怠システムについては以下の記事をご参照ください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>ちなみにこの勤怠システムは割と運用できてます。今の所は。&lt;/p>
&lt;h2 id="clova">Clovaって？&lt;/h2>
&lt;p>ClovaはLINEが開発したAIアシスタントです。Clova FriendsやClova Friends mini、Clova Waveなどの対応スマートスピーカー端末が販売されています。&lt;/p>
&lt;ul>
&lt;li>公式サイト: &lt;a href="https://clova.line.me/">https://clova.line.me/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>GoogleのGoogle アシスタント（Google Home）やAmazonのAlexa（Amazon Echo）などと同じ並びの立ち位置という認識で大丈夫です。&lt;/p>
&lt;p>LINEといえばスタンプやキャラクターが特徴的ですが、Clova Friendsに関してもLINEが提供しているということもあり、 &lt;strong>キャラクターをベースにしたデバイスが特徴的です&lt;/strong>。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>─ ちなみにこの写真は先日のLINE CONFERENCE 2018で発表があったミニオンズモデル&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>この記事の執筆時点（2018年7月7日）ではまだ開発用SDKは公開されていませんが、IFTTTに対応したというリリースが出ているのでIFTTT経由で色々なサービスと接続することが出来ます。&lt;/p>
&lt;h2 id="clova-1">出勤するとClovaがしゃべる&lt;/h2>
&lt;p>今回作ったものはこんな感じです。&lt;/p>
&lt;p>試してるのはアルバイトの佐々木さんです。ドヤ顔は素です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>先日作った勤怠システムと連携してキーパッドのボタンを押して出勤登録するとClovaに通知がいきます。&lt;/p>
&lt;h2 id="nefry-btclova">Nefry BTとClovaを連携してみよう&lt;/h2>
&lt;p>IFTTTのWebhookを用いてNefry BTからPOSTリクエストを送り、Clova側に通知させます。&lt;/p>
&lt;p>イメージはこんな感じです。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="ifttt">IFTTTでアプレットの登録&lt;/h3>
&lt;p>アプレットとは連携させるサービスとサービスの組み合わせのことを指します。&lt;/p>
&lt;p>IFTTTのユーザー登録などを完了したら&lt;a href="https://ifttt.com/create">アプレット作成&lt;/a>のページから新規のアプレットを作成します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>まず&lt;code>this&lt;/code>を押すとトリガーとなるサービスを選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/185/4.gif" alt="">
Webhookを選択しましょう。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>任意のEvent Nameを指定します。&lt;code>clova_things&lt;/code>としました。&lt;/p>
&lt;p>次に&lt;code>that&lt;/code>を押してアウトプットとなるサービスを選択します。
&lt;img src="https://dotstud.io/img/blog/185/6.gif" alt="">
clovaを選択しましょう。&lt;/p>
&lt;p>メッセージ内容の箇所に&lt;code>Value1&lt;/code>を指定します。これはNefry BTから受け取る1つ目の値を指します。
&lt;img src="https://i.gyazo.com/d868fea0c1d1738593a1f82d26ffbde2.png" alt="">
&lt;code>Create action&lt;/code>のボタンを押して次のページで&lt;code>Finish&lt;/code>で完了です。&lt;/p>
&lt;h3 id="curl">curlで試してみる&lt;/h3>
&lt;p>&lt;a href="https://ifttt.com/services/maker_webhooks/settings">IFTTTのWebhooksの設定画面&lt;/a>を見てAPI KEYを確認しましょう。&lt;/p>
&lt;p>&lt;code>https://maker.ifttt.com/use/xxxxxxxxx&lt;/code>というURLが表示されていると思いますが、&lt;code>xxxxxxxxx&lt;/code>の箇所がAPI KEYになります。&lt;/p>
&lt;p>curlでは以下のように試せます。&lt;/p>
&lt;pre>&lt;code>$ curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d '{&amp;quot;value1&amp;quot;:&amp;quot;てすと&amp;quot;}' https://maker.ifttt.com/trigger/clova_things/with/key/xxxxxxxxx
&lt;/code>&lt;/pre>&lt;p>リクエストするURLはこのような形です。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>https://maker.ifttt.com/trigger/{{Event Name}}/with/key/{{API KEY}}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>Event Nameは今回の場合は任意の名前として&lt;code>clova_things&lt;/code>としていて、API KEYは&lt;code>xxxxxxxxx&lt;/code>の部分です。&lt;/p>
&lt;h3 id="nefry-bt">Nefry BT側のコード&lt;/h3>
&lt;p>勤怠システムの記事のコードとほぼ同様です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>適宜読み替えてください。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;WiFiClientSecure.h&amp;gt;
WiFiClientSecure client;
const int HTTP_PORT = 443;
//途中省略
//・
//・
//・
void iftttClovaPost(String message){
const char* HOST = &amp;quot;maker.ifttt.com&amp;quot;;
String url = &amp;quot;/trigger/clova_things/with/key/xxxxxxxxx&amp;quot;;
url += &amp;quot;?value1=&amp;quot;; //value1にデータを送る
url += StrPerEncord(escapeParameter(message).c_str()); //勤怠システム記事参照
Serial.print(&amp;quot;connecting to &amp;quot;);
Serial.println(HOST);
if (!client.connect(HOST, HTTP_PORT)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return;
}
client.println(&amp;quot;POST &amp;quot; + url + &amp;quot; HTTP/1.1&amp;quot;);
client.println(&amp;quot;Content-Type: application/json&amp;quot;);
client.println(&amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot;);
client.println(&amp;quot;Host: &amp;quot; + String(HOST));
client.println(&amp;quot;Connection: close&amp;quot;);
client.println();
unsigned long timeout = millis();
while (client.available() == 0) {
if (millis() - timeout &amp;gt; 5000) {
Serial.println(&amp;quot;&amp;gt;&amp;gt;&amp;gt; Client Timeout !&amp;quot;);
client.stop();
return;
}
}
// Read all the lines of the reply from server and print them to Serial
while(client.available()) {
String line = client.readStringUntil('\r');
Serial.print(line);
}
Serial.println();
Serial.println(&amp;quot;closing connection&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>全体コードは&lt;a href="https://gist.github.com/n0bisuke/d2fab404e5073e936339a6c3442c1e4c#file-kintai-ino-L94-L133">こちら&lt;/a>です。&lt;/p>
&lt;h2 id="heading">試し方と使う際の注意点&lt;/h2>
&lt;p>さて完成したら試してみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>キーパッドを押すとClovaに通知がいき、**「通知を読み上げて」**とClovaに話かけてあげると読み上げてくれます。&lt;/p>
&lt;p>&lt;strong>はじめはWebhooksで通知するとそのままClovaが喋ってくれると思ったのですがそうではないので注意です。&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>通知が来た時点で何も喋ってくれないのは分かりにくいですね。現時点だと「通知を読み上げて」と言わないと読み上げてくれないので注意ですね。&lt;/p>
&lt;h2 id="heading-1">まとめ&lt;/h2>
&lt;p>Nefry BTをClovaを繋げることが出来ました。&lt;/p>
&lt;p>IFTTTに繋がると実質何とでも繋げられるので嬉しいですね。&lt;/p>
&lt;p>人間が「通知を読み上げて」と言わなくても喋ってくれるように機能追加してくれることに期待です。&lt;/p></description></item><item><title>最新の超軽量ドローン「Tello」でオフィスの日常を撮影してみた</title><link>https://dotstud.io/blog/toy-drone-tello-using/</link><pubDate>Fri, 06 Jul 2018 09:00:00 +0900</pubDate><guid>https://dotstud.io/blog/toy-drone-tello-using/</guid><description>&lt;p>こんにちは、&lt;a href="https://dotstud.io/members/kiki/">きき&lt;/a>です。&lt;/p>
&lt;p>現役大学生でプログラミングを勉強中の新人アルバイトです。先月からdotstudioで働くことになりました〜。パチパチ（拍手）。どうぞよろしくお願いします。&lt;/p>
&lt;p>働くことになったのはいいものの、実際、IoTについて詳しく知りません。&lt;strong>まずはIoTの魅力を知ることが大事なのでは……！！&lt;/strong>&lt;/p>
&lt;p>ということで、今話題の**超軽量トイドローン「Tello」**で遊んでみました、わーい。&lt;/p>
&lt;h2 id="heading">トイドローンってなに？&lt;/h2>
&lt;p>はじめに、ドローンには様々な種類があります。ざっくり下記の3タイプに分けることができます。&lt;/p>
&lt;ul>
&lt;li>大型ドローン：きれいな映像で空撮をするためなどに使用する業務用&lt;/li>
&lt;li>中型ドローン：業務用までとはいかないけど、もう少し本格的に遊んでみたい人用&lt;/li>
&lt;li>小型ドローン：200g以下の、大きさも価格もお手軽な飛ばして遊ぶ用&lt;/li>
&lt;/ul>
&lt;p>200g以上のドローンになると、日本国内で使用する場合&lt;!-- raw HTML omitted -->ドローン航空法を守らなければいけません&lt;!-- raw HTML omitted -->。これからご紹介するトイドローン「Tello」は、&lt;strong>小型ドローン&lt;/strong>の一種になるので、周囲に迷惑をかけないように注意できれば&lt;strong>基本的にはいろんなところで飛ばすことができます&lt;/strong>。&lt;/p>
&lt;h2 id="tello">なぜそんなに注目を浴びているのか「Tello（テッロ）」&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>2018年4月に発売され、発売前から話題を呼んでいた小型のトイドローン&lt;a href="https://store.dji.com/jp/product/tello">「&lt;strong>Tello（テッロ）&lt;/strong>」&lt;/a>。&lt;!-- raw HTML omitted -->世界最大手のドローンメーカー「DJI」と「Intel」から技術供給を受け、「Ryze Tech」が開発した最新ドローン&lt;!-- raw HTML omitted -->です。&lt;/p>
&lt;p>私としましては、なんかもう字面だけで**とにかく最先端技術を駆使していることだけは分かるぞ……**といった状況です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-1">安い！速い！軽い！&lt;/h3>
&lt;p>重さは、バッテリーとプロペラガードを含めて&lt;strong>約80g&lt;/strong>のみ。「80g 目安」で調べると&lt;!-- raw HTML omitted -->食パン（5枚きり）1枚分ぐらいの重さ&lt;!-- raw HTML omitted -->だそうです。&lt;/p>
&lt;p>大きさは、&lt;strong>98 x 92.5 x 41 mm&lt;/strong>ほど。私の手のひらに乗せてちょっとはみ出すなぁといった大きさです。&lt;/p>
&lt;p>Telloの最大飛行距離は&lt;strong>100m&lt;/strong>で、最大飛行時間は&lt;strong>13分&lt;/strong>です。最大飛行高度は&lt;strong>10m&lt;/strong>で、大体ビルの3,4階と同じ高さぐらい。最高速度は8m/s。風力の階級でいうと、「&lt;strong>レベル5の疾風&lt;/strong>」になるとのこと。&lt;/p>
&lt;p>こちら気になるお値段、&lt;strong>税込12,800円&lt;/strong>！&lt;/p>
&lt;p>トイドローンの相場はどのくらいなんだろうか、と気になるあなたへ。amazon売れ筋ランキング「ドローン・マルチコプター」部門Best10を調べてみたところ、&lt;strong>平均金額は10,490円&lt;/strong>でした（2018/6/19時点)。しかも、ランキング1位はTello！すごいー！&lt;/p>
&lt;h3 id="scratch">Scratch（スクラッチ）でプログラミングができる&lt;/h3>
&lt;p>子供向けに開発された初心者でも使いやすいプログラミング言語**「Scratch（スクラッチ）」**で、Telloを操作することもできるよう。&lt;/p>
&lt;p>子どもと一緒に遊んで、プログラミング学習にも役立ちますね。&lt;/p>
&lt;h2 id="heading-2">ついに……開封のとき！&lt;/h2>
&lt;p>本体と、バッテリーを購入しました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>鮮やかなオレンジ色&lt;/strong>がこちらのワクワク度をよりいっそう高めてくれますね。DJIとIntelのロゴの並びがかっこいい。&lt;/p>
&lt;p>ではでは、Tello、はじめましての儀……！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>説明書&lt;/li>
&lt;li>予備プロペラ4本&lt;/li>
&lt;li>バッテリー&lt;/li>
&lt;li>プロペラを外す時に使用する小さいやつ&lt;/li>
&lt;/ul>
&lt;p>説明書には日本語で書かれているページもあります、ありがたい……！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>この物怖じしないたたずまい、さすがです。&lt;/p>
&lt;h2 id="heading-3">初期設定・アプリのダウンロード方法&lt;/h2>
&lt;h3 id="heading-4">まずは充電をしよう&lt;/h3>
&lt;p>「早速飛ばすぞ〜！」と意気揚々にTelloの電源をつけてたものの、&lt;strong>なんと……充電がない……！？&lt;/strong>&lt;/p>
&lt;p>はじめにバッテリーの充電が必要なのですね、待ち遠しすぎる。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>赤・緑・黄色（点滅）：電源がつき、準備中&lt;/li>
&lt;li>青（早い点滅）：充電エラー&lt;/li>
&lt;li>青（遅い点滅）：充電中&lt;/li>
&lt;li>青（点灯）：充電完了&lt;/li>
&lt;li>赤（遅い点滅）：ローバッテリー&lt;/li>
&lt;li>赤（早い点滅）：バッテリー切れ間近&lt;/li>
&lt;li>赤（点灯）：エラー&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>青の点灯に見せかけて、ゆっくり点滅しているので充電中です。その間にTello操縦用のアプリをダウンロードしましょう〜！&lt;/p>
&lt;h3 id="heading-5">アプリのダウンロード&lt;/h3>
&lt;p>Telloを飛ばすときは、専用のアプリをダウンロードする必要があります。説明書にバーコードリーダーがあるので、そちらからダウンロード。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>スタイリッシュなアイコンですね。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>起動すると、鮮やかなオレンジが再び私のワクワク度を高めます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>接続方法を寧に書いてくれていますね。&lt;/p>
&lt;p>①Telloの電源を入れる&lt;!-- raw HTML omitted -->
②「Telloに接続をする」という青いボタンを押す&lt;!-- raw HTML omitted -->
③Wi-Fiに接続する&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>接続されると左上に「Tello」と表示されます。&lt;/p>
&lt;p>ちなみに、「Dotstudio_NO_Denki_ON_OFF」ってなんやねんと思った方は&lt;a href="https://dotstud.io/blog/switch-servo-remote-controll/">下記&lt;/a>の記事をお読みください。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-6">基本の操作方法&lt;/h2>
&lt;p>広い場所にTelloをおき、準備は万端。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>（バッテリーがないのは、充電前の写真だからです……)&lt;/p>
&lt;p>左上のボタンをおすと、離陸できます。**「離陸しますか？」**という言葉に、胸の鼓動はMAXドキドキです。&lt;/p>
&lt;p>右のハンドルを操作すると、&lt;strong>前進・後進・左右の移動&lt;/strong>、左のハンドルを操作すると、&lt;strong>上昇・下降・左右の旋回&lt;/strong>ができます。&lt;/p>
&lt;h2 id="tello-1">Tello、行ってくるのだ！（離陸）&lt;/h2>
&lt;p>「&lt;strong>離陸しますか？&lt;/strong>」の下のボタンをスライドさせるとブオオオオオオンンンンと音を立ててTelloが舞い上がります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>ホバリングの安定性が高いのが一目でわかりますね。&lt;/p>
&lt;h2 id="heading-7">仕事っぷりを監視してみる&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>操作画面の右上の一番右端の丸いボタンを押すと、Telloの正面カメラで録画が始まります。&lt;/p>
&lt;h3 id="heading-8">しゃちょーの仕事っぷりを監視！&lt;/h3>
&lt;p>画質がきれいでブレ補正もされているので、しゃちょーののびすけさんも楽しそうですね。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-9">ちゃんとくさんの仕事っぷりを監視！&lt;/h3>
&lt;p>操作もしやすいので、ちゃんとくさんの仕事っぷりを見守ることもできます。微笑みが最高です。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>また、Telloではただ上下左右に飛行するだけではありません。自動で円を描きながら動画撮影を行う「Circle」や、上下にバウンスする「Bounce Mode」など、より高度な技術を駆使できる&lt;strong>インテリジェントフライトモード&lt;/strong>が搭載されています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>操作画面の左上の右から二番目のTelloのボタンを押すとインテリジェントフライトモードができます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="tello-2">Tello、戻ってくるのだ！（着陸）&lt;/h2>
&lt;p>一通りオフィスの中を飛び回ったということで、Telloを着陸させます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>こちらも操作画面の一番左上のボタンを押すと、通常の着陸を行うための「&lt;strong>タップして着陸&lt;/strong>」ボタンと、手のひらに舞い戻る「&lt;strong>手のひら着陸&lt;/strong>」のボタンを選ぶことができます。&lt;/p>
&lt;p>せっかくなので、我が手のひらへと降り立たせてみました。ボタンを押した後、5秒後にTelloの下に手のひらを差し出します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>手が巻き込まれてすごいことにならないか緊張してしまいましたが、すんなりと降り立ってくれました。にやにやが止まりません。&lt;/p>
&lt;h2 id="heading-10">おわりに&lt;/h2>
&lt;p>こうして、私の初めてのドローン体験が終わりました！&lt;strong>想像の5倍簡単に操作ができて、想像の10倍楽しんでいる私がいましたね&lt;/strong>。&lt;/p>
&lt;p>日々のデスクワークで肩こりがひどくなった時は、Telloを飛ばして気分転換でもしようかなと思います。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->高画質な動画撮影やインテリジェントフライトモードでテクニカルな飛行もできる&lt;!-- raw HTML omitted -->ので、広い公園などで飛ばしても盛り上がること間違いなしではないでしょうか。&lt;/p>
&lt;p>ぜひみなさんも遊んでみてください〜！&lt;/p></description></item><item><title>NefryBTとキーボードで作る簡易勤怠管理システム</title><link>https://dotstud.io/blog/keyboard-kintai-system-diy/</link><pubDate>Thu, 05 Jul 2018 10:00:00 +0900</pubDate><guid>https://dotstud.io/blog/keyboard-kintai-system-diy/</guid><description>&lt;p>こんにちは、代表の&lt;a href="https://dotstud.io/members/n0bisuke">n0bisuke&lt;/a>です。&lt;/p>
&lt;p>今日はとある電子工作向けキーパッドを手に入れたので、&lt;strong>Nefry BTで簡易的な勤怠管理システム&lt;/strong>を作ってみました。ちなみにオチとかないです。&lt;/p>
&lt;h2 id="heading">使うもの&lt;/h2>
&lt;h3 id="--44">マトリックスフィルムボタンキーボード メンブレン式キーボード 4*4&lt;/h3>
&lt;p>HiLetgoというストアから出品されています。眺めていて使ってみたいなぁという欲求が湧いたのでポチりました。&lt;/p>
&lt;p>ちなみに5個セットなので、あと4個なにか作れます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="arduino-uno">Arduino Unoで動かしてみる&lt;/h2>
&lt;p>AmazonのページにはArduino対応と書いているのでどうやら使えるらしい。&lt;/p>
&lt;p>&lt;a href="https://techtutorialsx.com/2017/03/18/esp8266-interfacing-with-a-4x4-matrix-keypad/">ESP8266: Interfacing with a 4×4 Matrix Keypad
&lt;/a>という記事があったので参考にArduinoで動かしてみました。&lt;/p>
&lt;h3 id="heading-1">配線&lt;/h3>
&lt;p>&lt;img src="https://i.gyazo.com/3c3b4883c69f25b562906e38f853beb4.png" alt="">&lt;/p>
&lt;p>Arduino Unoとあとで紹介するNefry BTでの配線はこんな感じです。&lt;/p>
&lt;h3 id="heading-2">プログラム&lt;/h3>
&lt;p>&lt;a href="Chris--A/Keypad">こちらのライブラリ&lt;/a>をインストールしましょう。&lt;/p>
&lt;p>ライブラリマネージャからもインストールできます。&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/d1d90cb4712729faac8272bcf3274767.png" alt="">&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Keypad.h&amp;gt;
const byte n_rows = 4;
const byte n_cols = 4;
char keys[n_rows][n_cols] = {
{'1','2','3','A'},
{'4','5','6','B'},
{'7','8','9','C'},
{'*','0','#','D'}
};
byte colPins[n_rows] = {3, 2, 1, 0};
byte rowPins[n_cols] = {7, 6, 5, 4};
Keypad myKeypad = Keypad( makeKeymap(keys), rowPins, colPins, n_rows, n_cols);
void setup(){
Serial.begin(115200);
}
void loop(){
char myKey = myKeypad.getKey();
if (myKey != NULL){
Serial.print(&amp;quot;Key pressed: &amp;quot;);
Serial.println(myKey);
}
}
&lt;/code>&lt;/pre>&lt;h3 id="heading-3">実行&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;h2 id="nefry-bt">Nefry BTで動作させて勤怠システムに&lt;/h2>
&lt;p>出退勤の記録を付ける電子工作は、&lt;strong>今まで何度か作りはしたものの導入まで至っていなかった&lt;/strong>です。&lt;/p>
&lt;p>&lt;strong>作り込もうとして力を入れすぎて力尽きる問題&lt;/strong>が大きいと思っています。&lt;/p>
&lt;p>ということで&lt;!-- raw HTML omitted -->実装がシンプルな勤怠システムをとりあえず導入&lt;!-- raw HTML omitted -->してみました。&lt;/p>
&lt;h3 id="heading-4">ボタン入力式&lt;/h3>
&lt;p>仕様は&lt;strong>数字を押して選択し、Aボタンで出勤記録、Bボタンで退勤記録&lt;/strong>です。&lt;/p>
&lt;p>ディスプレイには登録している名前が出ます。&lt;/p>
&lt;p>多分そのうちSuica連携とかBLEデバイス連携とか指紋とか声門とかそういうのも試してみる気はするのですが、 &lt;strong>ボタン入力とHTTP通信だけの実装のシンプルさ&lt;/strong>がとりあえず始めるには重要な気がしました。&lt;/p>
&lt;p>制作時間1時間程度。HTTP POST周りで少し手こずってました。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="heading-5">実装&lt;/h3>
&lt;p>&lt;a href="https://dotstud.io/docs/nefrybt-http-post/">Nefry BTでのHTTP POST&lt;/a>も合わせて読むとコード理解が進みます。&lt;/p>
&lt;pre>&lt;code>#include &amp;lt;Keypad.h&amp;gt;
#include &amp;lt;NefryDisplay.h&amp;gt;
#include &amp;lt;WiFiClientSecure.h&amp;gt;
WiFiClientSecure client;
String StrPerEncord(const char* c_str);
String escapeParameter(String param);
void hipchatPost(String message);
const int HTTP_PORT = 443;
const char* HOST = &amp;quot;xxxxxxxxxx.hipchat.com&amp;quot;;
const byte n_rows = 4;
const byte n_cols = 4;
char keys[n_rows][n_cols] = {
{'1','2','3','A'},
{'4','5','6','B'},
{'7','8','9','C'},
{'*','0','#','D'}
};
byte colPins[n_rows] = {D3, D2, D1, D0};
byte rowPins[n_cols] = {D7, D6, D5, D4};
Keypad myKeypad = Keypad( makeKeymap(keys), rowPins, colPins, n_rows, n_cols);
String storeMessage = &amp;quot;&amp;quot;;
//3行目だけにPrint
void nfDisplay3Print(String mes){
NefryDisplay.print(&amp;quot;&amp;quot;);
NefryDisplay.print(&amp;quot;&amp;quot;);
NefryDisplay.print(mes);
}
void setup() {
Serial.begin(115200);
NefryDisplay.setTitle(&amp;quot;KINTAI&amp;quot;);
nfDisplay3Print(&amp;quot;Please Input...&amp;quot;);
}
void loop() {
char myKey = myKeypad.getKey();
String member = &amp;quot;&amp;quot;;
//ボタンが押された時の処理
if (myKey != NULL){
Serial.print(&amp;quot;Key pressed: &amp;quot;);
Serial.println(myKey);
if(String(myKey) == &amp;quot;1&amp;quot;){
member += &amp;quot;n0bisuke&amp;quot;;
storeMessage = member;
}else if(String(myKey) == &amp;quot;2&amp;quot;){
member += &amp;quot;chantoku&amp;quot;;
storeMessage = member;
}else if(String(myKey) == &amp;quot;3&amp;quot;){
member += &amp;quot;kiki&amp;quot;;
storeMessage = member;
}else if(String(myKey) == &amp;quot;4&amp;quot;){
member += &amp;quot;takudon&amp;quot;;
storeMessage = member;
}else if(String(myKey) == &amp;quot;5&amp;quot;){
member += &amp;quot;sasakitomohiro&amp;quot;;
storeMessage = member;
}
nfDisplay3Print(String(myKey) + &amp;quot;:&amp;quot; + member);
if(String(myKey) == &amp;quot;A&amp;quot;){
nfDisplay3Print(String(myKey) + &amp;quot;: [Office IN] post to HipChat...&amp;quot;);
storeMessage += &amp;quot;さんが出勤しました。&amp;quot;;
hipchatPost(storeMessage); //HipChatに投稿
storeMessage = &amp;quot;&amp;quot;; //リセット
nfDisplay3Print(String(myKey) + &amp;quot;: POST DONE&amp;quot;);
}else if(String(myKey) == &amp;quot;B&amp;quot;){
nfDisplay3Print(String(myKey) + &amp;quot;: [Office OUT] post to HipChat...&amp;quot;);
storeMessage += &amp;quot;さんが退勤しました。&amp;quot;;
hipchatPost(storeMessage); //HipChatに投稿
storeMessage = &amp;quot;&amp;quot;; //リセット
nfDisplay3Print(String(myKey) + &amp;quot;: POST DONE&amp;quot;);
}
}
}
void hipchatPost(String message){
String url = &amp;quot;/v2/room/4651875/notification?auth_token=xxxxxxxxxxxxxxxx&amp;quot;;
url += &amp;quot;&amp;amp;color=green&amp;amp;notify=false&amp;amp;message_format=text&amp;amp;message=&amp;quot;;
url += StrPerEncord(escapeParameter(message + &amp;quot; (yey)&amp;quot;).c_str());
Serial.print(&amp;quot;connecting to &amp;quot;);
Serial.println(HOST);
if (!client.connect(HOST, HTTP_PORT)) {
Serial.println(&amp;quot;connection failed&amp;quot;);
return;
}
client.println(&amp;quot;POST &amp;quot; + url + &amp;quot; HTTP/1.1&amp;quot;);
client.println(&amp;quot;Content-Type: application/json&amp;quot;);
client.println(&amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot;);
client.println(&amp;quot;Host: &amp;quot; + String(HOST));
client.println(&amp;quot;Connection: close&amp;quot;);
client.println();
unsigned long timeout = millis();
while (client.available() == 0) {
if (millis() - timeout &amp;gt; 5000) {
Serial.println(&amp;quot;&amp;gt;&amp;gt;&amp;gt; Client Timeout !&amp;quot;);
client.stop();
return;
}
}
// Read all the lines of the reply from server and print them to Serial
while(client.available()) {
String line = client.readStringUntil('\r');
Serial.print(line);
}
Serial.println();
Serial.println(&amp;quot;closing connection&amp;quot;);
}
String StrPerEncord(const char* c_str) {
uint16_t i = 0;
String str_ret = &amp;quot;&amp;quot;;
char c1[3], c2[3], c3[3];
while (c_str[i] != '\0') {
if (c_str[i] &amp;gt;= 0xC2 &amp;amp;&amp;amp; c_str[i] &amp;lt;= 0xD1) { //2バイト文字
sprintf(c1, &amp;quot;%2x&amp;quot;, c_str[i]);
sprintf(c2, &amp;quot;%2x&amp;quot;, c_str[i + 1]);
str_ret += &amp;quot;%&amp;quot; + String(c1) + &amp;quot;%&amp;quot; + String(c2);
i = i + 2;
} else if (c_str[i] &amp;gt;= 0xE2 &amp;amp;&amp;amp; c_str[i] &amp;lt;= 0xEF) {
sprintf(c1, &amp;quot;%2x&amp;quot;, c_str[i]);
sprintf(c2, &amp;quot;%2x&amp;quot;, c_str[i + 1]);
sprintf(c3, &amp;quot;%2x&amp;quot;, c_str[i + 2]);
str_ret += &amp;quot;%&amp;quot; + String(c1) + &amp;quot;%&amp;quot; + String(c2) + &amp;quot;%&amp;quot; + String(c3);
i = i + 3;
} else {
str_ret += String(c_str[i]);
i++;
}
}
return str_ret;
}
String escapeParameter(String param) {
param.replace(&amp;quot;%&amp;quot;, &amp;quot;%25&amp;quot;);
param.replace(&amp;quot;+&amp;quot;, &amp;quot;%2B&amp;quot;);
param.replace(&amp;quot; &amp;quot;, &amp;quot;+&amp;quot;);
param.replace(&amp;quot;\&amp;quot;&amp;quot;, &amp;quot;%22&amp;quot;);
param.replace(&amp;quot;#&amp;quot;, &amp;quot;%23&amp;quot;);
param.replace(&amp;quot;$&amp;quot;, &amp;quot;%24&amp;quot;);
param.replace(&amp;quot;&amp;amp;&amp;quot;, &amp;quot;%26&amp;quot;);
param.replace(&amp;quot;'&amp;quot;, &amp;quot;%27&amp;quot;);
param.replace(&amp;quot;(&amp;quot;, &amp;quot;%28&amp;quot;);
param.replace(&amp;quot;)&amp;quot;, &amp;quot;%29&amp;quot;);
param.replace(&amp;quot;*&amp;quot;, &amp;quot;%2A&amp;quot;);
param.replace(&amp;quot;,&amp;quot;, &amp;quot;%2C&amp;quot;);
param.replace(&amp;quot;/&amp;quot;, &amp;quot;%2F&amp;quot;);
param.replace(&amp;quot;:&amp;quot;, &amp;quot;%3A&amp;quot;);
param.replace(&amp;quot;;&amp;quot;, &amp;quot;%3B&amp;quot;);
param.replace(&amp;quot;&amp;lt;&amp;quot;, &amp;quot;%3C&amp;quot;);
param.replace(&amp;quot;=&amp;quot;, &amp;quot;%3D&amp;quot;);
param.replace(&amp;quot;&amp;gt;&amp;quot;, &amp;quot;%3E&amp;quot;);
param.replace(&amp;quot;?&amp;quot;, &amp;quot;%3F&amp;quot;);
param.replace(&amp;quot;@&amp;quot;, &amp;quot;%40&amp;quot;);
param.replace(&amp;quot;[&amp;quot;, &amp;quot;%5B&amp;quot;);
param.replace(&amp;quot;\\&amp;quot;, &amp;quot;%5C&amp;quot;);
param.replace(&amp;quot;]&amp;quot;, &amp;quot;%5D&amp;quot;);
param.replace(&amp;quot;^&amp;quot;, &amp;quot;%5E&amp;quot;);
param.replace(&amp;quot;'&amp;quot;, &amp;quot;%60&amp;quot;);
param.replace(&amp;quot;{&amp;quot;, &amp;quot;%7B&amp;quot;);
param.replace(&amp;quot;|&amp;quot;, &amp;quot;%7C&amp;quot;);
param.replace(&amp;quot;}&amp;quot;, &amp;quot;%7D&amp;quot;);
return param;
}
&lt;/code>&lt;/pre>&lt;h2 id="heading-6">まとめ&lt;/h2>
&lt;p>&lt;strong>運用1日目ですが問題ないです（謎）&lt;/strong>&lt;/p>
&lt;p>実際にはシートに記録したりした方が良いと思いますが今後検討です！&lt;/p>
&lt;p>&lt;img src="https://i.gyazo.com/fcc920005a4a691f37081c936f6968d1.png" alt="">&lt;/p>
&lt;p>HipChatの部分はうちの社内がHipChatだからというだけですが、LINEだったりSlackだったりも同様のやり方で連携できます。&lt;/p>
&lt;p>思ったより簡単に試せたなぁという印象なのでみなさんもぜひ試してみてください。&lt;/p></description></item><item><title>オフィス改善！物理スイッチの照明を遠隔操作でON／OFFしよう！</title><link>https://dotstud.io/blog/switch-servo-remote-controll/</link><pubDate>Wed, 28 Mar 2018 14:00:26 +0900</pubDate><guid>https://dotstud.io/blog/switch-servo-remote-controll/</guid><description>&lt;h2 id="heading">お仕事は突然やってくる&lt;/h2>
&lt;p>こんにちは、宇宙エンジニアのたくろーどんです。&lt;/p>
&lt;p>ある日、dotstudioのオフィスにて……。&lt;/p>
&lt;p>※上司：ちゃんとく ／ &lt;del>下僕&lt;/del>部下：たくろーどん&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>そんなこんなで突然、ズボラなちゃんとくさんのために&lt;strong>電気を遠隔でON/OFFできる装置&lt;/strong>をつくることになりました。&lt;/p>
&lt;p>下記のようなイメージで、&lt;strong>電気の物理スイッチを遠隔操作できるリモコン&lt;/strong>を目指して作ってみます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/155/1.png" alt="">&lt;/p>
&lt;h2 id="heading-1">実装&lt;/h2>
&lt;p>まず、物理スイッチを押す機構にはサーボモータを使います。&lt;/p>
&lt;p>サーボモータは簡単に角度の制御ができるので、スイッチをON/OFFと切り替えて押すことに適しています。&lt;/p>
&lt;p>サーボモータについては、dotstudioドキュメントの「&lt;a href="https://dotstud.io/docs/pulse-width-modulation/">&lt;strong>PWM制御&lt;/strong>&lt;/a>（サーボモータの仕組み）」や「&lt;a href="https://codeiq.jp/magazine/2018/02/57076/">&lt;strong>遠隔消臭装置をつくって「気の利くナイスガイ」になろう！〜基本実装編〜│codeIQ&lt;/strong>&lt;/a>」の記事などを参考にしてください。&lt;/p>
&lt;p>実際に、スイッチが押せるようにサーボモータを取り付けてみます。サーボモータの取り付けも&lt;strong>グルーガン職人&lt;/strong>の手にかかれば一瞬です。&lt;/p>
&lt;p>※グルーガン（のりを温めて接着できる装置）は100均で手に入る最強アイテムです。
&lt;img src="https://dotstud.io/img/blog/155/2.png" alt="">
見た目の改善はあとで考えていきましょう。&lt;strong>とりあえず動くことが大事&lt;/strong>です。&lt;/p>
&lt;p>ちなみに回路図はこのようになっています。
&lt;img src="https://dotstud.io/img/blog/155/3.png" alt="">
今回はサーボモータを4つ繋げているので、&lt;!-- raw HTML omitted -->Nefry BTからの電源供給が足りず、Nefry BTが再起動してしまうこと&lt;!-- raw HTML omitted -->があります。そこで&lt;strong>サーボモータとNefry BTの電源は分ける&lt;/strong>ことによって安定性を高めています。&lt;/p>
&lt;p>では、次にプログラムです。&lt;/p>
&lt;h2 id="heading-2">プログラム&lt;/h2>
&lt;p>今回は、&lt;strong>Nefry BTのWebコンソール画面&lt;/strong>から遠隔操作できるようにしたいと思います。&lt;/p>
&lt;p>Nefry BTのWebコンソール画面へは、&lt;!-- raw HTML omitted -->Nefry BT自身のWi-Fiにつないでアドホックモードにするほか、Wi-Fi設定をして外部からアクセス&lt;!-- raw HTML omitted -->することができます。詳細は「&lt;a href="https://dotstud.io/docs/nefrybt-wifi-setup/">&lt;strong>Nefry BTのWi-Fiセットアップ&lt;/strong>&lt;/a>」を参照してください。&lt;/p>
&lt;p>Webコンソール画面には、&lt;strong>Nefry.getWebServer()関数&lt;/strong>を使って機能追加することができます。少し試してみましょう。&lt;/p>
&lt;p>以下のようにプログラムを書くと……&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;span style="color:#75715e">// on()の第一引数でURLを決める
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/welcome&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#75715e">// 表示するページをHTMLで記述する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;Nefry Welcome&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;Nefry Welcome!&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
&lt;span style="color:#75715e">// setIndexLink(&amp;#39;表示したいページ名&amp;#39;, &amp;#39;指定したURL&amp;#39;)でTOPページに表示される名前を決める
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">welcomePage&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/welcome&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nefry BTのコンソール画面に「welcomePage」と追加され、クリックすると、「Nefry Welcome」と作成したHTMLページが表示されます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/155/4.png" alt="">
これを応用して、&lt;strong>「Light_on」というHTMLページにアクセスしたらサーボモータが回転する&lt;/strong>ようにしてみます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">// /onというURLのページを作成
&lt;/span>&lt;span style="color:#75715e">&lt;/span>Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#75715e">// ページのHTMLを記述
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;On&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
);
&lt;span style="color:#75715e">// サーボモータを回転させる
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">115&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
&lt;span style="color:#75715e">// TOPページに「Ligth_on」と表示する
&lt;/span>&lt;span style="color:#75715e">&lt;/span>Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_on&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記のプログラムを4つのサーボモータそれぞれに割り当て、最終的なプログラムの全体はこのようになります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span> &lt;span style="color:#75715e">&amp;lt;Nefry.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">include&lt;/span>&lt;span style="color:#75715e">&amp;#34;esp32-hal-ledc.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define PWM_BITWIDTH 16&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">deg2pw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> deg, &lt;span style="color:#66d9ef">int&lt;/span> bit){
&lt;span style="color:#66d9ef">double&lt;/span> ms &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">double&lt;/span>) deg &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0.95&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">90.0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1.45&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>) (ms &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">20.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> pow(&lt;span style="color:#ae81ff">2&lt;/span>, bit));
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
Serial.begin(&lt;span style="color:#ae81ff">115200&lt;/span>);
ledcSetup(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcSetup(&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcSetup(&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcSetup(&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">50&lt;/span>,PWM_BITWIDTH);
ledcAttachPin(A0,&lt;span style="color:#ae81ff">0&lt;/span>);
ledcAttachPin(A1,&lt;span style="color:#ae81ff">1&lt;/span>);
ledcAttachPin(D0,&lt;span style="color:#ae81ff">2&lt;/span>);
ledcAttachPin(D1,&lt;span style="color:#ae81ff">3&lt;/span>);
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;On&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">115&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_on&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/off&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;off&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65&lt;/span>; &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i){
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">0&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_off&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/off&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#75715e">//////////////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on2&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;On&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">115&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">1&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">1&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_on_2&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on2&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/off2&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;off&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65&lt;/span>; &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i){
ledcWrite(&lt;span style="color:#ae81ff">1&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">1&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_off_2&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/off2&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#75715e">//////////////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on3&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;On&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">115&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">2&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">2&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_on_3&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on3&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/off3&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;off&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65&lt;/span>; &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i){
ledcWrite(&lt;span style="color:#ae81ff">2&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">2&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_off_3&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/off3&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#75715e">//////////////////////////////////////////////////////////////
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on4&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;On&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">125&lt;/span>; i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#f92672">+&lt;/span>){
ledcWrite(&lt;span style="color:#ae81ff">3&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">3&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_on_4&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/on4&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>on(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/off4&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, [&lt;span style="color:#f92672">&amp;amp;&lt;/span>]() {
String content &lt;span style="color:#f92672">=&lt;/span> F(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE HTML&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">UTF-8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;title&amp;gt;NefryLight Switch&amp;lt;/title&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;off&amp;lt;/h1&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;lt;a href=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">&amp;gt;Back to top&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>; i&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65&lt;/span>; &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">-&lt;/span>i){
ledcWrite(&lt;span style="color:#ae81ff">3&lt;/span>,deg2pw(i, PWM_BITWIDTH));
}
delay(&lt;span style="color:#ae81ff">800&lt;/span>);
ledcWrite(&lt;span style="color:#ae81ff">3&lt;/span>,deg2pw(&lt;span style="color:#ae81ff">90&lt;/span>, PWM_BITWIDTH));
Nefry.getWebServer()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>send(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">text/html&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, content);
});
Nefry.setIndexLink(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Light_off_4&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">/off4&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">loop&lt;/span>() {
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://dotstud.io/img/blog/155/5.png" alt="">&lt;/p>
&lt;p>これで、Nefry BTのコンソール画面から遠隔でサーボモータを制御できるようになりました。
また、&lt;strong>Nefry.getWebServer()関数を使うことで、HTMLを書く要領でコンソール画面をカスタマイズ&lt;/strong>することができます。&lt;/p>
&lt;h2 id="heading-3">試してみる&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://dotstud.io/img/blog/155/7.gif" alt="">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://dotstud.io/img/blog/155/6.png" alt="">&lt;/p>
&lt;p>※Nefry BTのSSIDは変更することができる。「&lt;a href="https://dotstud.io/docs/nefrybt-change-ssid/">&lt;strong>Nefry BTのSSIDを変更する&lt;/strong>&lt;/a>」を参照。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="heading-4">終わりに&lt;/h2>
&lt;p>このようにdotstudioではお仕事が急にやってくるので柔軟な対応が求められます。&lt;!-- raw HTML omitted -->ヘマをすると何がおこるかわからないので、今回は首の皮一枚つながりました。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>遠隔でデバイスを操作するには、今回のようにNefry BTのコンソール画面を応用する他にも、スマホアプリから操作できるようになる「&lt;a href="https://www.blynk.cc/">&lt;strong>Blynk&lt;/strong>&lt;/a>」を使ったり、リアルタイム通信を簡単に実現できる「&lt;a href="https://mlkcca.com/">&lt;strong>Milkcocoa&lt;/strong>&lt;/a>」を使ったりと、いろいろな方法があります。&lt;/p>
&lt;p>ぜひみなさんも試してみてはいかがでしょうか？&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>放置されていた3Dプリンタ「Trinus」で初めての3Dプリントに挑戦</title><link>https://dotstud.io/blog/3d-printer-trinus-usage/</link><pubDate>Thu, 22 Feb 2018 03:00:43 +0900</pubDate><guid>https://dotstud.io/blog/3d-printer-trinus-usage/</guid><description>&lt;p>こんにちは、たくろーどんです。大学で&lt;a href="https://dotstud.io/docs/nefrybt">NefryBT&lt;/a>を使った工作をしていたら、いつのまにかdotstudioでアルバイトすることになっていました。宇宙工学を勉強しています。以後よろしくお願いします。&lt;/p>
&lt;p>=&amp;gt; 参考: &lt;a href="https://qiita.com/minwinmin/items/d1f296b8a9cd1a2c22f6">研究室のみんなとNefry BTを使ってはじめてIoTデバイスをつくってみた&lt;/a>&lt;/p>
&lt;p>今回は、dotstudioに放置されていた3Dプリンタ「Trinus（トライナス）」を使って初めての3Dプリントに挑戦してみます。
&lt;img src="https://dotstud.io/img/blog/149/lead.png" alt="">
これで哲学的なものを錬成していきましょう。&lt;/p>
&lt;h2 id="3d">3Dプリントを始める前に&lt;/h2>
&lt;h3 id="3d-1">3Dプリンタとは？&lt;/h3>
&lt;p>3Dプリンタとは、その名の通り&lt;strong>3Dのデータを出力できる&lt;/strong>プリンタです。
&lt;img src="https://dotstud.io/img/blog/149/3dprint.png" alt="">
プリンタによりますが、金属、アルミ、ゴムなどさまざまな素材で出力できるため広い分野で活躍しています。&lt;/p>
&lt;p>現在は業務用から一般向けまでさまざまな種類の3Dプリンタが販売されていますが、今回はdotstudioに放置されていた「Trinus（トライナス）」を使ってみます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>3万円代とお手頃価格で、樹脂に加えて木材やアルミも利用でき、別売りのヘッドをつけることでレーザ彫刻機にもなる優れものです。&lt;/p>
&lt;h3 id="3d3d">3Dプリントには3Dデータが必要&lt;/h3>
&lt;p>&lt;strong>3Dプリントをするためには3Dデータが必要です&lt;/strong>。3Dデータをモデリング（作成すること）方法はいくつかありますが、今回は3D CADソフトを使っています。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/inventor.png" alt="">
僕はAutodeskの「&lt;a href="https://www.autodesk.co.jp/products/inventor/overview">&lt;strong>Inventor&lt;/strong>&lt;/a>」を使ってデータを作成しました。有料ソフトですが、なんと&lt;strong>学生だと3年間無料で&lt;/strong>つかえます！&lt;/p>
&lt;p>Inventorは本格的な機械設計向きなので、簡単に試したい人は同じくAutodeskの「&lt;a href="https://www.autodesk.co.jp/products/fusion-360/overview">&lt;strong>fusion360&lt;/strong>&lt;/a>」の方がとっつきやすいかと思います。こちらも個人利用の場合は無料です。&lt;/p>
&lt;p>3D CADソフトは他にも&lt;a href="https://www.rs-online.com/designspark/mechanical-software-jp">DesignSpark Mechanical&lt;/a>や&lt;a href="https://www.freecadweb.org/?lang=ja">FreeCAD&lt;/a>などいくつかあるので、自分が使いやすいと思ったものを使うと良いでしょう。&lt;/p>
&lt;p>さらにもう一つ。
プログラマーのためにGithubがあるなら、&lt;strong>メカ系エンジニアのために&lt;a href="https://grabcad.com/">GrabcCAD&lt;/a>というものがあります&lt;/strong>。
&lt;img src="https://dotstud.io/img/blog/149/grabccad.png" alt="">&lt;/p>
&lt;p>ここで、世界中のエンジニアが製作した様々なモデリングを閲覧したり使用したりできます。もし複雑なパーツをモデリングすることが難しければ、GrabCADを参考にしてみるのも手だと思います。&lt;/p>
&lt;h3 id="trinus">Trinusの組み立て&lt;/h3>
&lt;p>Trinusの組み立てに関しては説明書をご覧ください。
また、日本語の公式サイトもあります。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="trinuspango">Trinus用ソフト「Pango」をインストール&lt;/h3>
&lt;p>Trinusで3Dプリントするには、モデリングしたものを扱う専用ソフト「Pango」が必要です。&lt;/p>
&lt;p>&lt;a href="http://trinusjapan.com/softwaredownload/">こちらのリンク&lt;/a>からインストールしてください。&lt;/p>
&lt;h2 id="3d-2">3Dプリントに挑戦！&lt;/h2>
&lt;h3 id="heading">プリンタ側の準備&lt;/h3>
&lt;p>詳しくは&lt;a href="http://trinusjapan.com/firstprint/">公式サイト&lt;/a>にのっているので、要点だけ説明します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/printer.png" alt="">&lt;/p>
&lt;p>まず、Trinusの電源をいれるため、コンセントにつなげましょう。電源がつくと「ビッ」という音がします。&lt;/p>
&lt;h3 id="pango">Pangoにデータを取り込む&lt;/h3>
&lt;p>パソコンからデータ（stlファイル）をPangoで開きましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/1.png" alt="">
①のように「書き出し」から「CAD形式」を選択し、stl形式で保存します。&lt;strong>サイズがモデリングと一致&lt;/strong>しているかしっかりと確認してください。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/2.png" alt="">
Pangoでstlファイルを開くと&lt;strong>何故かサイズが10分の1&lt;/strong>になってしまうので（dotstudioだけで起こる現象なのか不明）、元のサイズに戻します。③と④のように比率（Ratio）を10に変えます。Amountは寸法を意味していて、単位はmmです。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/3.png" alt="">
必要があれば3Dプリントしやすいようにモデルの向きを変えましょう。&lt;strong>どのような向きで出力するか&lt;/strong>、これがとても大事です！印刷中に思いがけない失敗を引き起こすことになります。&lt;/p>
&lt;p>⑤のように赤丸部をクリックすると回転軸の表示が出ます。そして、回転したい軸にマウスポインタを持っていきます。⑥のように回転する軸が強調されます。マウスで操作する場合はホイールを動かすことで回転させることができます。パソコンにあるタッチパッドの場合は2本の指で、上下になぞるように動かすと回転します（Windowsの場合）。&lt;/p>
&lt;h3 id="heading-1">印刷のシミュレーション&lt;/h3>
&lt;p>実際にどのように印刷が進められるかPango上で確認することもできます。Pangoの上部にある「View」から「Layer」をクリックしてください。
&lt;img src="https://dotstud.io/img/blog/149/4.png" alt="">
すると自分がモデリングしたもの以外に格子状のモデリング（濃いピンクの部分）が追加されています。これは「&lt;strong>ラフト&lt;/strong>」と呼ばれ、3Dプリンタの印刷面と出力するものの間に積層される荒い土台のことです。&lt;/p>
&lt;p>これがあると出力した後に製作物を外しやすく、最終的には除去してゴミとして捨てることができます。&lt;/p>
&lt;h3 id="trinus-1">データをTrinusに移す&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/5.png" alt="">
データをSDカードに「pcode」形式で保存します。図の赤丸部をクリックし、SDカードにデータをpcode形式で保存します。この形式は、Torinusで出力するために必要な形式です。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/6.png" alt="">
SDカードをTorinusに接続し、TorinusとパソコンをUSB接続します。&lt;/p>
&lt;h3 id="heading-2">出力設定を調整&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/7.png" alt="">
Pango上部の「Preference」から「Setting」を選択します。ここでは、出力するスピードや厚みなどを設定することができます。&lt;strong>設定はあまりいじる必要はない&lt;/strong>ので、眺めおきましょう！（ただし今回は試行錯誤の結果、Thickness: 0.2mm、Print Speed: 40mm/sとしています）&lt;/p>
&lt;h3 id="heading-3">【重要】出力位置の初期位置を調整&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/8.png" alt="">
TorinusとパソコンをUSB接続した状態でPango上部の「View」から「Console」をクリックします。上のような画像が出たら、さらに「Console」をクリックします。　&lt;/p>
&lt;p>そうすると下記のような設定画面があらわれます。&lt;strong>この画面で行う設定が非常に重要です&lt;/strong>。
&lt;img src="https://dotstud.io/img/blog/149/9.png" alt="">
&lt;strong>まず「Home」をクリック&lt;/strong>します。これで、3Dプリンタのノズル（フィラメントが出る部分）が初期位置に戻ります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/10.png" alt="">
ここで&lt;strong>z軸の距離（ノズルから出力される面の高さ、画像でいう赤い矢印部分）を確認&lt;/strong>してください。その距離が初期位置で広すぎると上手く出力されません。なので、目視でその距離を縮めましょう。「Offset」をクリックすると&lt;strong>z軸方向の距離を上下&lt;/strong>することができます。&lt;/p>
&lt;h3 id="heading-4">出力を開始！&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/149/9.png" alt="">
位置設定が終わったら、「&lt;strong>Heat E」をクリック&lt;/strong>し3Dプリンタのノズルを温めます。どれくらい温まっているかは、Console画面の左下に示す数字（分数部分）で表されます。最後に右のSDカードのイラスト部分をクリックし、保存したpcodeファイルを指定します。3Dプリンタのノズルが十分に温まれば自動で出力が始まります！&lt;/p>
&lt;h3 id="heading-5">出力直後にやるべきこと&lt;/h3>
&lt;p>出力が始まるとその直後に、&lt;strong>ノズルから溶け出たフィラメント&lt;/strong>が垂れてきます。&lt;strong>垂れて固まったフィラメントは出力の邪魔になることもあるので、ピンセットで取り除きましょう&lt;/strong>。下記の図の赤丸で囲った部分がその例です。
&lt;img src="https://dotstud.io/img/blog/149/11.png" alt="">&lt;/p>
&lt;p>あとは見守りながら完成するまで放置しましょう。&lt;/p>
&lt;h2 id="heading-6">はじめての出力&lt;/h2>
&lt;p>プリンタとデータをセットして出力されるのを待ちます……。&lt;/p>
&lt;p>&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/212276/c7659ea8-e54a-f50a-400a-183218006215.gif" alt="出力.gif">&lt;/p>
&lt;p>完成しました。
&lt;img src="https://dotstud.io/img/blog/149/%E5%AE%8C%E6%88%901.png" alt="">&lt;/p>
&lt;p>哲学的なゴミです。特に用途はありません。
&lt;img src="https://dotstud.io/img/blog/149/%E5%AE%8C%E6%88%902.png" alt="">&lt;/p>
&lt;h2 id="3d-3">3Dプリンタを使うときに注意すること&lt;/h2>
&lt;p>セットアップの説明でも述べましたが、3Dプリンターを使ってみて注意した方が良い点をもう一度まとめます。&lt;/p>
&lt;ul>
&lt;li>Pango上でモデリングのサイズを要チェック&lt;/li>
&lt;li>モデリングしたものをどの向きで出力するか&lt;/li>
&lt;li>初期位置の設定を正確に！（特にz軸方向）&lt;/li>
&lt;li>出力直後に溶け出したフィラメントを必ず除去&lt;/li>
&lt;/ul>
&lt;p>3Dプリンタは複雑なものを簡単に出力できるイメージですが、実際に使ってみると経験やコツがいります。やはり、どんな道具も使いこなせるようになるには時間が必要なようです。&lt;/p>
&lt;p>まだまだ3Dプリンターを使う上で学ぶことが多いと感じたので、継続して使っていきたいと思います。&lt;/p>
&lt;p>それではまた。&lt;/p></description></item><item><title>オフィス移転したらインターホンがなかったのでRaspbeerry Piでカメラ付きインターホン作ってみた</title><link>https://dotstud.io/blog/office-new-door-notification/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://dotstud.io/blog/office-new-door-notification/</guid><description>&lt;p>こんにちは、dotstudioモノづくり担当・うこです。&lt;/p>
&lt;p>dotstudioは&lt;a href="https://dotstud.io/blog/office-relocation-for-akihabara/">&lt;strong>めでたく新オフィスに移転したのですが&lt;/strong>&lt;/a>、インターホンがついておらず不便なんですよね。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/133/10.png" alt="">
代表・のびすけ「&lt;strong>うこ先生、これRaspberry Piでインターホン作れない？&lt;/strong>」&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/133/1.png" alt="">
僕「&lt;strong>秒でいけます&lt;/strong>」&lt;/p>
&lt;p>ということで作ってみました！&lt;/p>
&lt;h2 id="heading">全体の構成&lt;/h2>
&lt;p>今回は&lt;strong>ボタンを押したら室内のスピーカに音がなる機能&lt;/strong>に加えて、&lt;strong>押した人の姿が見えるカメラ機能&lt;/strong>も搭載してみました。&lt;/p>
&lt;p>全体の構成はこんな感じです。
&lt;img src="https://qiita-image-store.s3.amazonaws.com/0/116011/a7707b67-176f-8dc6-cf32-8323a56e860c.png" alt="いんたーほん.png" title="いんたーほん.png">&lt;/p>
&lt;p>Raspberry Pi 3（以下ラズパイ）をベースにして、Grove接続されたタッチセンサに触れると室内のBluetoothスピーカー（今回はBASE EGG）から音が流れる仕組みを作ります。&lt;/p>
&lt;p>さらに、ラズパイカメラをドアの外に出して、外の様子がオフィス内のモニタから見られるようにします。&lt;/p>
&lt;h3 id="heading-1">使ったもの&lt;/h3>
&lt;ul>
&lt;li>Raspberry Pi 3&lt;/li>
&lt;li>Raspberry Pi カメラモジュール&lt;/li>
&lt;li>Grove タッチセンサ&lt;/li>
&lt;li>Bluetoothオーディオトランスミッタ&lt;/li>
&lt;li>Bluetoothスピーカー（今回はBASS EGG）&lt;/li>
&lt;li>スピーカー（100円）&lt;/li>
&lt;li>オーディオ分岐プラグ（100円）&lt;/li>
&lt;li>マグネット付きプラスチックケース（100円）&lt;/li>
&lt;/ul>
&lt;h2 id="heading-2">呼び鈴の製作&lt;/h2>
&lt;h3 id="heading-3">ハードウェア部分&lt;/h3>
&lt;p>まずはじめに、&lt;strong>来客者がボタンを押すと室内で音が鳴って訪問を知らせるようにする機能&lt;/strong>を作ります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/133/12.png" alt="">
ラズパイはマグネット付きのプラスチックケースに入れて、金属製のドアの内側に貼り付けます。ケースはケーブルが引き出せるように適宜加工します。&lt;/p>
&lt;p>次にGroveタッチセンサですが、そのままだとラズパイに接続できないためジャンパワイヤを3本用意します。接続するピンは以下のとおりです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">タッチセンサのピン&lt;/th>
&lt;th align="left">ラズパイGPIO&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">VCC&lt;/td>
&lt;td align="left">3.3V&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">GND&lt;/td>
&lt;td align="left">Ground&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">NC&lt;/td>
&lt;td align="left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">SIG&lt;/td>
&lt;td align="left">24&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>ラズパイGPIOのピン番号と位置については、以下の公式ページにある2番目の図を参照してください。&lt;/p>
&lt;p>参考：&lt;a href="https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/">GPIO: MODELS A+, B+, RASPBERRY PI 2 B AND RASPBERRY PI 3 B&lt;/a>&lt;/p>
&lt;p>次に、100円程度で売られているオーディオ出力分岐器をラズパイのオーディオ出力に接続し、さらにBluetoothのオーディオトランスミッタと小型のスピーカーに接続します。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>オーディオトランスミッタは室内に来客を知らせるスピーカーを鳴らす用、小型スピーカーはドアの外に出して来客者に「呼び鈴が鳴った」ことを知らせる用です。USB接続のアンプ付きスピーカーなどで大きな音が出せるのならそれで代用することができます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/133/5.png" alt="">
最後に電源を近くのコンセントからUSBアダプタ経由で接続してハードウェア部分は完了です！&lt;/p>
&lt;h3 id="heading-4">ソフトウェア部分&lt;/h3>
&lt;p>まず、適当なインターフォンの音となるmp3を用意しましょう。簡単なピンポン音でも、ネタのような効果音でもいいです。dotstudioでは、「ファミマ入店音」が好評だったため採用しました。&lt;/p>
&lt;p>mp3が用意できたら、&lt;code>/home/pi&lt;/code>などのディレクトリに&lt;code>sounds&lt;/code>というフォルダを作ってその中にmp3を入れましょう。&lt;/p>
&lt;p>次に、&lt;code>sudo apt-get install mpg321&lt;/code>を実行し、サウンド再生用のソフトウェア「mpg321」をインストールします。&lt;code>mpg321 sounds/サウンド.mp3&lt;/code>などと実行して、スピーカーから音が出ていればOKです。もしここで音が小さい場合は、&lt;code>alsamixer&lt;/code>コマンドを実行すると音量調整ができますので、矢印キーで大きくしておきます。&lt;/p>
&lt;p>音の再生が確認できたら、以下のPythonプログラムを&lt;code>sounds&lt;/code>ディレクトリと同じ場所に保存して実行します。タッチセンサを触ると同時に、音が鳴ってターミナル上に'Ping-pon!&amp;lsquo;と表示されれば成功です。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-/home/pi/interphone.py" data-lang="/home/pi/interphone.py">&lt;span style="color:#75715e">#!/usr/bin/python&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> RPi.GPIO &lt;span style="color:#f92672">as&lt;/span> GPIO
&lt;span style="color:#f92672">import&lt;/span> glob
&lt;span style="color:#f92672">import&lt;/span> subprocess
&lt;span style="color:#f92672">from&lt;/span> time &lt;span style="color:#f92672">import&lt;/span> sleep
&lt;span style="color:#f92672">from&lt;/span> random &lt;span style="color:#f92672">import&lt;/span> shuffle
GPIO&lt;span style="color:#f92672">.&lt;/span>setmode(GPIO&lt;span style="color:#f92672">.&lt;/span>BCM)
GPIO&lt;span style="color:#f92672">.&lt;/span>setup(&lt;span style="color:#ae81ff">24&lt;/span>, GPIO&lt;span style="color:#f92672">.&lt;/span>IN)
&lt;span style="color:#75715e"># mp3が保存されているディレクトリは適宜変更してください&lt;/span>
soundlist &lt;span style="color:#f92672">=&lt;/span> glob&lt;span style="color:#f92672">.&lt;/span>glob(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">./sounds/*.mp3&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">while&lt;/span> True:
&lt;span style="color:#66d9ef">if&lt;/span> GPIO&lt;span style="color:#f92672">.&lt;/span>input(&lt;span style="color:#ae81ff">24&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> GPIO&lt;span style="color:#f92672">.&lt;/span>HIGH:
shuffle(soundlist)
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">Ping-pon!&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
subprocess&lt;span style="color:#f92672">.&lt;/span>call(&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">mpg321 -q &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>soundlist[&lt;span style="color:#ae81ff">0&lt;/span>], shell&lt;span style="color:#f92672">=&lt;/span>True)
&lt;span style="color:#66d9ef">else&lt;/span>:
sleep(&lt;span style="color:#ae81ff">0.01&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>最後に、再起動しても動くように、&lt;code>/etc/rc.local&lt;/code>ファイルの末尾に&lt;code>/usr/bin/python /home/pi/interphone.py &amp;amp;&lt;/code>と追記しておきましょう。
ちなみにですが、上記のコードでは&lt;code>sounds&lt;/code>ディレクトリ内に複数のmp3が入っているとランダムで再生されるような仕組みにしています。&lt;/p>
&lt;h2 id="heading-5">監視カメラ部分の製作&lt;/h2>
&lt;p>監視カメラはラズパイ専用カメラを使用します。接続はとても簡単で、HDMI端子とオーディオ端子の間にある細長い端子にケーブルを差し込むだけです。&lt;code>sudo raspi-config&lt;/code>コマンドで、カメラを使うことができるように設定を変更しておきましょう。&lt;code>raspistill -p&lt;/code>コマンドを実行し、特にエラーが出なければ正常に接続されています。&lt;/p>
&lt;p>今回はカメラと呼び鈴部分は連動させず、カメラは&lt;a href="https://github.com/ccrisan/motioneye/wiki">motionEye&lt;/a>というオープンソースウェアを使って単独で動作させます。
motionEyeのインストールは以下を参考にしました。&lt;/p>
&lt;p>参考：&lt;a href="https://qiita.com/mt08/items/96207abfba91954b50d4">らずぱい motionEye (Web UIベースのカメラサーバ) - Qiita&lt;/a>&lt;/p>
&lt;p>こちらのページにも書かれていますが、ラズパイのカメラモジュールを使用するので、以下のコマンドを実行しておくのを忘れないようにしましょう。
&lt;code>grep bcm2835-v4l2 /etc/modules || echo bcm2835-v4l2 | sudo tee -a /etc/modules&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/133/4.png" alt="">
インストールが完了して、室内に常設してあるPCのブラウザからアクセスしてみました。
ばっちりドアの外が撮影されていますね！
1秒おきに更新されていますが、python上で動作しているためか、少々重たいようです。&lt;/p>
&lt;h2 id="heading-6">試してみる&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/133/7.png" alt="">
インターホンを押すと……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>入店っぽい音が流れます！&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/133/13.png" alt="">
旧スタイルに比べるとだいぶ未来になりました。&lt;/p>
&lt;h2 id="heading-7">まとめ&lt;/h2>
&lt;p>今回は数時間ほどでこのシステムを作ることができました。カメラと呼び鈴が独立してしまっていますが、可能ならば「呼び鈴を押した瞬間の画像を保存してhipchatにアップロード」するような仕組みを作ってみたいです。
&lt;img src="https://dotstud.io/img/blog/133/3.png" alt="">
次は何をつくってやろうか……。&lt;/p></description></item></channel></rss>