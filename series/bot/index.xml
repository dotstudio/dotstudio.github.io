<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bot on dotstudio（ドットスタジオ）</title><link>https://dotstud.io/series/bot/</link><description>Recent content in bot on dotstudio（ドットスタジオ）</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2018 dotstudio inc.</copyright><lastBuildDate>Fri, 11 Nov 2016 11:30:54 +0900</lastBuildDate><atom:link href="/series/bot/" rel="self" type="application/rss+xml"/><item><title>LINE NotifyとGitHubを連携してSlackから移行してみました。</title><link>https://dotstud.io/blog/line-notify-chat-bot/</link><pubDate>Fri, 11 Nov 2016 11:30:54 +0900</pubDate><guid>https://dotstud.io/blog/line-notify-chat-bot/</guid><description>&lt;p>こんにちは、dotstudio代表の&lt;a href="http://twitter.com/n0bisuke">のびすけ&lt;/a>です。&lt;/p>
&lt;p>この記事を見ている人は大半がLINEは使ってると思います。
今日は&lt;a href="http://linedevday.linecorp.com/jp/2016/">LINE DEVELOPER DAY 2016&lt;/a>で発表があったLINEの新機能であるLINE Notifyを使ってみようと思います。&lt;/p>
&lt;h2 id="line-notify">LINE Notify&lt;/h2>
&lt;p>&lt;a href="https://notify-bot.line.me/ja/">https://notify-bot.line.me/ja/&lt;/a>&lt;/p>
&lt;p>様々なWebサービスなどと連携することで、LINEが提供する公式アカウント&amp;quot;LINE Notify&amp;quot;から通知させることができる機能です。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/01.png" alt="">&lt;/p>
&lt;h2 id="heading">プログラミング不要！実際に使ってみましょう&lt;/h2>
&lt;h3 id="line-notfy">LINE Notfyと友達になる&lt;/h3>
&lt;p>まずは&lt;a href="https://notify-bot.line.me/ja/">LINE Notifyのサイト&lt;/a>からLINE Notifyと友達になります。&lt;/p>
&lt;p>サイトに掲載してあるQRコードをスマートフォンアプリのLINEから読み込みましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/02.png" alt="">&lt;/p>
&lt;h3 id="github">GitHubリポジトリ作成&lt;/h3>
&lt;p>今回は僕がメンターとして入っている&lt;a href="http://gsacademy.tokyo/">G's ACADEMY TOKYO&lt;/a>の学生さんたちとのやりとりに使ってみます。
今回は5期目なのでgs5thというリポジトリを作りました。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/03.png" alt="">&lt;/p>
&lt;h3 id="lineline-notify">LINEのトークルームにLINE Notifyアカウントを追加&lt;/h3>
&lt;p>トークルームを作成し、通知を受けるトークルームにLINE Notifyアカウントを追加しましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/04.png" alt="">&lt;/p>
&lt;h3 id="heading-1">連携作業&lt;/h3>
&lt;p>&lt;a href="https://notify-bot.line.me/github/repos/select">https://notify-bot.line.me/github/repos/select&lt;/a> からGitHub連携ができます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/05.png" alt="">&lt;/p>
&lt;p>GitHubのアカウント（Organization）とリポジトリ、LINEのトークルームを先ほど作成したものを指定します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/06.png" alt="">&lt;/p>
&lt;p>最後に&lt;code>「同意して連携する」&lt;/code>を選択しましょう。&lt;/p>
&lt;h3 id="heading-2">完了&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/07.png" alt="">&lt;/p>
&lt;p>LINE Notifyから通知が来ます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/08.png" alt="">&lt;/p>
&lt;h2 id="heading-3">連携を試してみる&lt;/h2>
&lt;p>GitHubにPushすると&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/09.png" alt="">&lt;/p>
&lt;p>issueが追加されると&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/10.png" alt="">&lt;/p>
&lt;p>このようにLINEのトークルームにGitHubの通知が流れます。&lt;/p>
&lt;h2 id="heading-4">実際に少し使ってみて&lt;/h2>
&lt;p>今までSlack+GitHubを使ってました。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/054/11.png" alt="">&lt;/p>
&lt;p>学生さんたちはエンジアリングは初心者の方が大半で、Slackを使ったことがないという人も多いです。
エンジニア界だとSlackとGitHubはよくある組み合わせなので今まで採用してましたが、実際の連携は通知くらいにしか使ってなかったため今回のLINE連携で代用できそうです。&lt;/p>
&lt;h3 id="heading-5">「アカウント作ってくださいやりとり」が発生しない&lt;/h3>
&lt;p>やはりアカウントはデフォルトでみんな持っているんだなぁと感じました。
逆に友達追加やりとりが少し手間でした。&lt;/p>
&lt;h3 id="heading-6">通知を見逃さない&lt;/h3>
&lt;p>Slackだとスマートフォンアプリもいれないと細かな通知には気づけないですが、LINEはみんな利用しているため問題なく通知に気付けます。&lt;/p>
&lt;h3 id="heading-7">既読が分かる&lt;/h3>
&lt;p>よくも悪くも既読が分かります。連絡をしたときに全員が確認できてるか分かるのは大きいです。&lt;/p>
&lt;h2 id="heading-8">おわりに&lt;/h2>
&lt;p>最近は、「Slackを使えば正義」みたいな文化は少し崩れて来た気もしています。
LINEなど、エンジニア以外にも使われているツールだとプログラミング初心者がいるときにはいいのかもしれません。&lt;/p>
&lt;p>GitHubとの連携はサイト上の操作のみでできましたが、LINE Notifyは独自にトークンを発行してプログラム経由で通知させることもできます。&lt;/p>
&lt;p>結構自由度が効いて使い勝手は良さそうです。&lt;/p>
&lt;p>今後も利用してみて感想など、応用などを発信できたらと思います。&lt;/p>
&lt;p>それでは。&lt;/p></description></item><item><title>地味に便利！Raspberry Piが起動したらIPアドレスを通知するチャットボットを作る</title><link>https://dotstud.io/blog/raspberry-pi-ip-notification/</link><pubDate>Tue, 11 Oct 2016 10:00:49 +0900</pubDate><guid>https://dotstud.io/blog/raspberry-pi-ip-notification/</guid><description>&lt;p>こんにちは、代表の&lt;a href="https://twitter.com/n0bisuke">のびすけ&lt;/a>です。&lt;/p>
&lt;p>Raspberry Piは起動するたびにIPアドレスが変わってしまうことがありますよね。
だいたいの人はSSH接続していると思うのでIPアドレスが変わると再確認をしないといけませんが、 &lt;strong>RaspberryPiは基本的にディスプレイとキーボードを接続しないとIPアドレスの確認できないのがめんどくさいですね&lt;/strong>。 （FTDIとかはありますがこれも手間はあります。）&lt;/p>
&lt;p>そこで今回は、&lt;strong>Raspberry Piの起動時に自身のIPアドレスをHipChatに通知する仕組みを作ります。&lt;/strong>&lt;/p>
&lt;p>ちなみに、ここでいうチャットボットは「会話をする」というより「チャットに通知するプログラム」っていう意味合いです。&lt;/p>
&lt;h2 id="heading">環境&lt;/h2>
&lt;ul>
&lt;li>Raspberry Pi 2 ModelB&lt;/li>
&lt;li>Raspbian 8.0 Jessie&lt;/li>
&lt;li>Node.js 4.4.2&lt;/li>
&lt;/ul>
&lt;h2 id="nodejsip">Node.jsでIPアドレスを知る&lt;/h2>
&lt;p>&lt;code>os.networkInterfaces()&lt;/code>でネットワーク情報を取得し、&lt;code>os.hostname()&lt;/code>でマシン名を取得できます。
「&lt;a href="http://qiita.com/_shimizu/items/b38d1459abf8436f7f1f">node.jsでローカルIPアドレスの取得&lt;/a>」を参考にさせて頂きました。&lt;/p>
&lt;pre>&lt;code>//app.js
'use strict'
const os = require('os');
let interfaces = os.networkInterfaces();
let mes = '';
for (let dev in interfaces) {
interfaces[dev].forEach((details) =&amp;gt; {
if (details.internal || details.family !== 'IPv4') return;
mes = `${os.hostname()}:${details.address} (standup)`;
console.log(mes);
});
}
&lt;/code>&lt;/pre>&lt;p>実行してみましょう。&lt;/p>
&lt;pre>&lt;code>$ node app.js
raspberrypi:192.168.43.70 (standup)
&lt;/code>&lt;/pre>&lt;p>これでホスト名とIPアドレスを取得することができました。&lt;/p>
&lt;h2 id="hipchat">HipChatにポストする&lt;/h2>
&lt;p>&lt;a href="https://dotstud.io/blog/hipchat-bot-by-nodejs/">話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。&lt;/a>の記事でHipChatに投稿している部分を外部モジュール化しておきます。
&lt;code>libs/hcPost.js&lt;/code>としました。&lt;/p>
&lt;pre>&lt;code>//app.js
'use strict'
const os = require('os');
const hcPost = require('./libs/hcPost');
let interfaces = os.networkInterfaces();
let mes = '';
for (let dev in interfaces) {
interfaces[dev].forEach((details) =&amp;gt; {
if (details.internal || details.family !== 'IPv4') return;
mes = `${os.hostname()}:${details.address} (standup)`;
let postData = {
&amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
&amp;quot;message&amp;quot;: mes,
&amp;quot;notify&amp;quot;: false,
&amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
};
hcPost(postData);
});
}
&lt;/code>&lt;/pre>&lt;p>これで実行するとホスト名とIPアドレスがHipChatに投稿されます。&lt;/p>
&lt;p>ソースコードは&lt;a href="https://github.com/n0bisuke/raspi-j5-hue/blob/master/ip.js">GitHub&lt;/a>にも載せてあります。&lt;/p>
&lt;h2 id="raspberry-pinodejs">Raspberry Piの起動時にNode.jsアプリケーションの起動を設定する&lt;/h2>
&lt;p>Node.jsのアプリケーションはRaspberry Piを再起動させたタイミングで完全にプロセスが落ちてしまうので、起動時に実行されるように設定します。
「&lt;a href="http://qiita.com/n0bisuke/items/781eac201a907a524f8e">RaspberryPiの起動時にNode.jsを実行&amp;amp;PM2で永続化するメモ&lt;/a>」にもあるように、&lt;code>/etc/rc.local&lt;/code>に処理を書き込むことで起動時に処理をしてくれます。&lt;/p>
&lt;pre>&lt;code>sudo vim /etc/rc.local
&lt;/code>&lt;/pre>&lt;p>などでファイルを開くと、デフォルトで以下の内容が記載されています。&lt;/p>
&lt;pre>&lt;code># Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi
exit 0
&lt;/code>&lt;/pre>&lt;p>ここにNode.jsアプリケーションの実行処理を記述しましょう。&lt;code>/etc/rc.local&lt;/code>に以下を書き込みます。&lt;/p>
&lt;pre>&lt;code>sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js
&lt;/code>&lt;/pre>&lt;p>ちなみにこの&lt;code>sudo -u pi &amp;lt;nodeコマンドの絶対パス&amp;gt; &amp;lt;起動するスクリプトの絶対パス&amp;gt;&lt;/code>となります。
パスが分からない人は、whichコマンドでパスを見つけましょう。&lt;/p>
&lt;pre>&lt;code>$ which node
/home/pi/.nvm/versions/node/v4.4.2/bin/node
&lt;/code>&lt;/pre>&lt;p>最終的にこうなりました。&lt;/p>
&lt;pre>&lt;code># Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi
sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js
exit 0
&lt;/code>&lt;/pre>&lt;p>この状態で上手く動作するか確認してみます。&lt;/p>
&lt;pre>&lt;code>sudo /etc/rc.local
&lt;/code>&lt;/pre>&lt;p>ここでエラーが出る場合はパスの指定などが間違ってる可能性が高いです。&lt;/p>
&lt;p>こんな感じの表示がHipChat側にされたら成功です。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/033/01.gif" alt="">&lt;/p>
&lt;p>ちなみに&lt;a href="http://japan.blogs.atlassian.com/2014/12/goodnews-new-and-improved-emoticons/">HipChatの絵文字&lt;/a>は種類が豊富で&lt;code>(standup)&lt;/code>を指定すると画像のように人が立ち上がる絵文字になります。&lt;/p>
&lt;p>最後に設定が出来たらRaspberry Piの電源を再起動してみましょう。
起動直後にHipChatにRaspberry PiのIPアドレスが通知されたら、起動設定が成功している証拠です。&lt;/p>
&lt;h2 id="heading-1">おわりに&lt;/h2>
&lt;p>これで「Raspberry PiのIPが変わってしまいSSHログインがしにくい問題」が解決しそうです。
起動した際に通知が来るので通常起動してるかどうかの監視にも使えそうです。&lt;/p>
&lt;p>Raspberry Piからチャットへの一方通行な通信なので、Raspberry Piが何らかの原因で動作していない場合はMilkcocoaなどで双方向の通信を入れれば死活監視もできそうですね。&lt;/p>
&lt;p>皆さんも是非活用してみて下さい。&lt;/p></description></item><item><title>ノンプログラミングで今話題のLINE Botを開発できる「hachidori」を試してみた</title><link>https://dotstud.io/blog/line-bot-with-hachidori/</link><pubDate>Fri, 07 Oct 2016 10:00:57 +0900</pubDate><guid>https://dotstud.io/blog/line-bot-with-hachidori/</guid><description>&lt;p>こんにちは、dotstudioエディターのうららです。
2016/09/29にLINE Developer Day 2016が開催され、IFTTTやGitHubと連携できる「&lt;a href="https://notify-bot.line.me/en/">LINE Notify&lt;/a>」や&lt;a href="https://linecorp.com/ja/pr/news/ja/2016/1516">新たなMessenger API&lt;/a>が公開されるなどLINE Botが今まさに話題の渦中にいます。&lt;/p>
&lt;p>&lt;a href="http://developers.linecorp.com/blog/ja/?p=3779">LINE Developer Day 2016 結果報告（LINE Engineers&amp;rsquo; Blog）&lt;/a>&lt;/p>
&lt;p>そんなLINE Botをノンプログラミングで扱える「 &lt;strong>hachidori&lt;/strong> 」というサービスが登場していたので、サクッと触ってみました。&lt;/p>
&lt;p>結論から言うと（途中詰まるところもありましたが）とても簡単にチャットボットを作れました。詰まった&amp;amp;チュートリアルをするなど使い方に慣れるまでを含めて3時間程度かかりましたが、 &lt;strong>一度慣れてしまえば30分ほどで1つの簡単なボットを作れそうな肌感&lt;/strong> です。&lt;/p>
&lt;h2 id="hachidori">hachidoriについて&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/01_hachidori.png" alt="">&lt;/p>
&lt;p>&lt;a href="https://hachidori.io">https://hachidori.io&lt;/a>&lt;/p>
&lt;p>2016/10/03に&lt;a href="http://prtimes.jp/main/html/rd/p/000000004.000019280.html">プレスリリース&lt;/a>が出されたばかりの新しいチャットボットツールです。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/02_hachidori.png" alt="">
2016/10/06日現在、LINE BotとFacebook messengerに対応していますが、今後はKik.やTelegram、Slack、WeChatといったメッセンジャーに対応しそうな気配があります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/03_hachidori.png" alt="">
&lt;strong>2016年10月末までなら無料プランが提供&lt;/strong> されています。11月からは月額980円からの提供となりそうです。&lt;/p>
&lt;h2 id="heading">作ってみた&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/06.png" alt="">
早速&lt;a href="https://hachidori.io">トップページ&lt;/a>からアカウント登録をして、Botを作ってみようと思います。LINEとFacebookを選べるので、今回はLINEを選びます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/07.png" alt="">
Botの名前とアイコン写真を選びます。これは &lt;strong>実際のLINEには反映されません&lt;/strong>。hachidori側で管理しやすくするためのものかと思います。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/08.png" alt="">
Botを作るには、&lt;/p>
&lt;ul>
&lt;li>LINE Business Centerに登録する&lt;/li>
&lt;li>LINE DevelopersのChannelsにアクセスする&lt;/li>
&lt;li>ChannelのIDやアクセストークンを取得する&lt;/li>
&lt;/ul>
&lt;p>といったように「何をすればいいのか」を明記してくれているので、指示に沿って進めます。まずはLINE Business Centerに登録しましょうっ。&lt;/p>
&lt;h3 id="line-business-center">LINE Business Centerに登録&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/09_LINEAPI.png" alt="">
こちらがLINE Business Center。ついにMessenger APIとご対面です。（すでに登録されている方は読み飛ばしてください）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/10_LINEAPI.png" alt="">
ちなみに、Messenger APIは &lt;strong>結構無料で使えそう&lt;/strong> です。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/11_LINEAPI.png" alt="">
LINE Business Centerに登録していなかったので登録しました。ちなみに &lt;strong>ここで登録した名前と画像がbotにそのまま使われます&lt;/strong> 。上記の写真では自分の名前と画像を登録しましたが、実際にLINE上で試すときに &lt;strong>自分と会話している&lt;/strong> 状態になるので、作りたいボットに沿ったアイコンなどを登録をオススメします。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="line-developersid">LINE DevelopersでIDなどの情報を取得&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/14_LINEAPI.png" alt="">
指示によると、LINE DevelopersにてChannelのIDやアクセストークンが必要とのことなので取得します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/15_hachidori.png" alt="">
これをhachidori側に入力します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/16_done.png" alt="">
ひとまず枠は完成です。&lt;/p>
&lt;h3 id="heading-1">サーバーの登録&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/17.png" alt="">
サーバー登録もします。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/18.png" alt="">
こちらも指示に従えばOKです。&lt;/p>
&lt;h3 id="heading-2">中身を作っていく&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/19.png" alt="">
最初からチュートリアルが入っています。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/21.png" alt="">
これを削除して作ってみます。&lt;/p>
&lt;p>私は料理が得意ではないこともあり、いつも夕ごはん何作るかを悩みます。せっかくなので、オススメのメニューを提案してくれる「&lt;strong>夕ごはんBot&lt;/strong>」を作りたいと思います。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/22.png" alt="">
まずは特定の言葉に対して反応する方法がこちら。「こんばんは」という言葉に反応して、「こんばんは、（ユーザー名）さん！　お腹が空きましたね〜」と返すようにできます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/23.png" alt="">
ユーザー側のコメントをオフにすると、何を発言しても次の展開へ進められます。相槌などがくると想定して無理やり「何が食べたいですか？」へ進めます。&lt;/p>
&lt;p>また、Botが何を返すかも選ぶことができます。&lt;/p>
&lt;ul>
&lt;li>通常テキスト&lt;/li>
&lt;li>イメージボタン&lt;/li>
&lt;li>画像/動画/ファイル&lt;/li>
&lt;li>カルーセル&lt;/li>
&lt;li>ボタン&lt;/li>
&lt;li>二択&lt;/li>
&lt;/ul>
&lt;p>今回は二択を選択しました。「何が食べたいですか？」という質問に対して、「温かいもの」「冷たいもの」の二択を出します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/24.png" alt="">
「アクションを返す」では、選択肢をタップすると何をするかを指定できます。ここでは「温かいもの」「冷たいもの」と発言するようにしました。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/25.png" alt="">
このように、ボタンをタップすると単語が自動で発言されます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/26.png" alt="">
選択肢によって、ルートが変わります。それぞれに沿った内容を作ります。ここでは「温かいもの」「冷たいもの」それぞれの内容を作りました。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/27.png" alt="">
「温かいもの」の中身を作ってみます。「汁物」か「汁物じゃないか」を選びます。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>心の叫び（※クラスタリングがおかしい）&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/28.png" alt="">
また選択肢を作ります。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/29.png" alt="">
画像を入れる際は画像リンクを登録します。&lt;/p>
&lt;h2 id="heading-3">完成した&lt;/h2>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/30.png" alt="">
これを繰り返してこんなものを作ってみました！　サクッとしか触っていないのでこれくらいしか作っていませんが、一通りできあがりました！&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/31.png" alt="">
「こんばんは」と発言すると始まります。ボタンも表示されます。このように、画像でサジェストしてくれます。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/32.png" alt="">&lt;/p>
&lt;p>「冷たくて汁物ではないもの」だと「寿司」を提案してくれます。ちなみに今のところ、&lt;/p>
&lt;ul>
&lt;li>温かい汁物　　　　　　：&lt;strong>うどん&lt;/strong>&lt;/li>
&lt;li>温かい汁物じゃないもの：&lt;strong>麻婆豆腐&lt;/strong>&lt;/li>
&lt;li>冷たい汁物　　　　　　：&lt;strong>冷や汁&lt;/strong>&lt;/li>
&lt;li>冷たい汁物じゃないもの：&lt;strong>寿司&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>しかオススメしない仕様となっています。まだまだ簡単な内容ですが、このように一通りのBot開発ができました。詰んだところも含めると、合わせて3時間くらいでしょうか。&lt;/p>
&lt;h2 id="heading-4">詰んだところ（既読されるが反応がない）&lt;/h2>
&lt;p>せっかくなので詰んだところの紹介もします。（同じところで詰んだ人の参考になると嬉しいです）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/34.png" alt="">
こんな風に &lt;strong>既読はされるが反応がない&lt;/strong> 状態になりました。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/35.png" alt="">
いろいろ触ってみたのですが、どうやらサーバー登録の際に入力する &lt;strong>Webhook URL&lt;/strong> が最初入力したものからいつの間にか変わっていたのが原因でした。&lt;/p>
&lt;p>いや、何か要因はあると思いますが、私にはわからんのでひとまず既読無視状態になったらここを再登録してみるのがいいと思います……。（要因がわかる方ぜひご教示ください）&lt;/p>
&lt;h2 id="heading-5">他の機能もすごかった&lt;/h2>
&lt;p>Botを作る機能以外にも、&lt;strong>作ったBotの分析ができる&lt;/strong> 機能もありました。個人的に驚嘆したものを3つだけ紹介します。（他にもいろんな機能があります）&lt;/p>
&lt;h3 id="heading-6">メッセージの予約投稿ができる&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/36.png" alt="">&lt;/p>
&lt;p>1度Botへアクセスしたことのある人であれば、メッセージの予約送信ができます。これはビジネスとして運用したい人にとっては、かなり便利なんじゃないかなと……。&lt;/p>
&lt;h3 id="heading-7">ユーザーの情報をリストにしてくれる&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/37.png" alt="">&lt;/p>
&lt;p>Botを通して取得した電話番号やメールアドレス、住所といった情報を、リスト化できるようです……。こ、これは……すごい……。&lt;/p>
&lt;h3 id="heading-8">アナリティクスがすごい&lt;/h3>
&lt;p>&lt;img src="https://dotstud.io/img/blog/031/38.png" alt="">&lt;/p>
&lt;p>実際にBotがどれくらい使われたのかを確認できるアナリティクスもありました。&lt;/p>
&lt;ul>
&lt;li>日別受信数&lt;/li>
&lt;li>時間別受信数&lt;/li>
&lt;li>男女比&lt;/li>
&lt;/ul>
&lt;p>といったことが確認できます。「&lt;strong>XX時のアクセスが多いからこの時間に予約送信してみよう&lt;/strong>」「&lt;strong>女性ユーザーのほうが多い、ターゲットは男性だからもっと内容を変えた方がいいかも&lt;/strong>」といった分析が簡単にできちゃうんじゃないですか？！&lt;/p>
&lt;p>これが10月末まで無料なのは賞賛ものですし、11月以降も割とお手軽価格なんじゃないかなと思いました。個人的にはビジネスで使う予定はありませんが、私がチャットボット担当者だったらこの機能は泣いて喜びます。&lt;/p>
&lt;h2 id="heading-9">おわりに&lt;/h2>
&lt;p>ということでサクッと触ってみたのですが、思った以上に便利そうで椅子から転げ落ちそうです。「&lt;strong>初期登録の作業はひとくせありそうだけど、簡単にボット作れそう&lt;/strong>」ってことが伝わったかなと思います。&lt;/p>
&lt;p>現場からは以上です。&lt;/p></description></item><item><title>話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。</title><link>https://dotstud.io/blog/hipchat-bot-by-nodejs/</link><pubDate>Tue, 04 Oct 2016 10:00:39 +0900</pubDate><guid>https://dotstud.io/blog/hipchat-bot-by-nodejs/</guid><description>&lt;p>こんにちは、dotstudio代表の&lt;a href="http://qiita.com/n0bisuke">のびすけ&lt;/a>です。&lt;/p>
&lt;p>先日のLINE DEVELOPER DAYでのLINEのAPIの盛り上がりがありましたが、2016年はチャットボットが各所ですごく盛り上がっています。そんな話題に乗り遅れないようにチャットボットを作っていこうと思います。&lt;/p>
&lt;p>dotstudioでは社内チャットにAtlasssian社の「HipChat」を利用しています。2010年に登場したツールですが、僕が愛用している（メッセンジャー管理アプリの）「Franz」に登録されているので選びました。&lt;/p>
&lt;p>「業界的にSlackじゃないの？」ってなりそうですが、Slackのユーザー課金は金銭的にけっこう辛くなっていくのが目に見えるので早期からSlackをやめました。まだSlackで消耗してるの?って言いたいです（強がり）。&lt;/p>
&lt;p>HipChatもSlack同様にインテグレーション追加やBot作成のAPIがかなり豊富です。&lt;/p>
&lt;p>今日はNode.jsからHipChatに投稿する方法を紹介します。&lt;/p>
&lt;h2 id="hipchat">HipChatのインテグレーション追加をする&lt;/h2>
&lt;p>&lt;a href="https://www.hipchat.com/">https://www.hipchat.com/&lt;/a>&lt;/p>
&lt;p>HipChatでご自身のチームにログインしましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/030/01.png" alt="">
メニューから __インテグレーション__を選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/030/02.png" alt="">&lt;/p>
&lt;p>__Build your own integration__を選択します。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/030/03.png" alt="">&lt;/p>
&lt;p>__プルダウンメニューからBOTを作るROOMを選択__して __Name your integration__にBOTの名前を入れましょう。 一部room名を黒塗りにしてますが察してください（笑）&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/030/04.png" alt="">
作成するとアクセストークンなどが生成されます。&lt;/p>
&lt;p>ひとまず__Try it!ボタン__を押してみましょう。&lt;/p>
&lt;p>&lt;img src="https://dotstud.io/img/blog/030/05.png" alt="">
指定したROOMにメッセージが流れたら成功です。&lt;/p>
&lt;p>それにしてもこの絵文字のセンスいいですよね。&lt;/p>
&lt;h2 id="curl">curlコマンドでの実行を試す&lt;/h2>
&lt;p>先ほどの画面の __Try it out__の項目に書いてあるcurlコマンドを実行することでAPI経由のPOSTを再現できます。&lt;/p>
&lt;pre>&lt;code>curl -d '{&amp;quot;color&amp;quot;:&amp;quot;green&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;My first notification (yey)&amp;quot;,&amp;quot;notify&amp;quot;:false,&amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;}' -H 'Content-Type: application/json' https://xxxxxx.hipchat.com/v2/room/XXXXXXX/notification?auth_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXX
&lt;/code>&lt;/pre>&lt;p>ご自身の情報に置き換えて（むしろページのものをコピペして）ターミナ
ルから実行すると先ほどの__Try it!ボタン__を押した際と同じ挙動をしてくれます。&lt;/p>
&lt;h2 id="nodejspost">Node.jsからPOSTリクエストしてみる&lt;/h2>
&lt;p>実際にBotとして活用するにあたり、他の処理と連携させる必要があるのでプログラム経由でPOSTしてみます。dotstudioではNode.jsをよく利用しているのでNode.jsから先ほどのAPIにアクセスしてます。&lt;/p>
&lt;p>&lt;code>request&lt;/code>や&lt;code>SuperAgent&lt;/code>などHTTPリクエストをいい感じにしてくれる外部モジュールはいくつもありますが、今回は&lt;a href="http://qiita.com/n0bisuke/items/33a6a6da1d6f455105f9">Node.jsでJSONデータをHTTP POSTするメモ&lt;/a>にもまとめたように外部モジュールに依存せずにNode.jsに組み込まれてる&lt;code>http&lt;/code>のみで実装してみます。&lt;/p>
&lt;p>app.jsは以下のようになります。HOSTやPATHを先ほどの情報に置き換えて実行して見ましょう。&lt;/p>
&lt;pre>&lt;code>'use strict'
const http = require('http');
const HOST = `xxxxx.hipchat.com`;
const PATH = `/v2/room/XXXXXXX/notification?auth_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXX`;
let postData = {
&amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
&amp;quot;message&amp;quot;: &amp;quot;test&amp;quot;,
&amp;quot;notify&amp;quot;: false,
&amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
};
let postDataStr = JSON.stringify(postData);
let options = {
host: HOST,
port: 80,
path: PATH,
method: 'POST',
headers: {
'Content-Type': 'application/json',
'Content-Length': postDataStr.length
}
};
let req = http.request(options, (res) =&amp;gt; {
console.log('STATUS: ' + res.statusCode);
console.log('HEADERS: ' + JSON.stringify(res.headers));
res.setEncoding('utf8');
res.on('data', (chunk) =&amp;gt; {
console.log('BODY: ' + chunk);
});
});
req.on('error', (e) =&amp;gt; {
console.log('problem with request: ' + e.message);
});
req.write(postDataStr);
req.end();
&lt;/code>&lt;/pre>&lt;p>7~12行目のPOSTデータのパラメーターは&lt;a href="https://www.hipchat.com/docs/apiv2/method/send_room_notification">Send room notificationのリファレンス&lt;/a>を確認しましょう。&lt;/p>
&lt;p>けっこう細かく設定できるので詳細はまた別記事などで紹介したいです。&lt;/p>
&lt;p>それでは、app.jsを実行してみます。&lt;/p>
&lt;pre>&lt;code>node app
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dotstud.io/img/blog/030/06.png" alt="">&lt;/p>
&lt;p>さっきまでは&lt;code>&amp;quot;color&amp;quot;: &amp;quot;green&amp;quot;&lt;/code>でしたが&lt;code>&amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;&lt;/code>にしてみました。
背景が黄色になりますね。&lt;/p>
&lt;h2 id="heading">まとめ&lt;/h2>
&lt;p>今回の背景色の変更もですが、&lt;a href="https://www.hipchat.com/docs/apiv2">API Reference&lt;/a>を見るとAPI経由で色々な機能が用意されていることがわかります。&lt;/p>
&lt;p>他のチャットツールだと通常利用の機能をAPIで再現できない場合などもありますが、HipChatは通常の利用以上にAPI経由の方が自由度が高い設計になっている気がします。&lt;/p>
&lt;p>Node.jsからもこんな形で簡単にBOT投稿ができるのでとりあえず簡単な通知などから作っていき、その様子もまたまとめていく予定です。&lt;/p>
&lt;p>乞うご期待 ￣ー￣)／&lt;/p></description></item></channel></rss>