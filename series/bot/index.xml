<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotstudio（ドットスタジオ）</title>
    <link>https://dotstud.io/series/bot/index.xml</link>
    <description>Recent content on dotstudio（ドットスタジオ）</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2016 dotstudio inc.</copyright>
    <atom:link href="/series/bot/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LINE NotifyとGitHubを連携してSlackから移行してみました。</title>
      <link>https://dotstud.io/blog/line-notify-chat-bot/</link>
      <pubDate>Fri, 11 Nov 2016 11:30:54 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/line-notify-chat-bot/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudio代表の&lt;a href=&#34;http://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;この記事を見ている人は大半がLINEは使ってると思います。
今日は&lt;a href=&#34;http://linedevday.linecorp.com/jp/2016/&#34;&gt;LINE DEVELOPER DAY 2016&lt;/a&gt;で発表があったLINEの新機能であるLINE Notifyを使ってみようと思います。&lt;/p&gt;

&lt;h2 id=&#34;line-notify&#34;&gt;LINE Notify&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://notify-bot.line.me/ja/&#34;&gt;https://notify-bot.line.me/ja/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;様々なWebサービスなどと連携することで、LINEが提供する公式アカウント&amp;rdquo;LINE Notify&amp;rdquo;から通知させることができる機能です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;プログラミング不要-実際に使ってみましょう&#34;&gt;プログラミング不要！実際に使ってみましょう&lt;/h2&gt;

&lt;h3 id=&#34;line-notfyと友達になる&#34;&gt;LINE Notfyと友達になる&lt;/h3&gt;

&lt;p&gt;まずは&lt;a href=&#34;https://notify-bot.line.me/ja/&#34;&gt;LINE Notifyのサイト&lt;/a&gt;からLINE Notifyと友達になります。&lt;/p&gt;

&lt;p&gt;サイトに掲載してあるQRコードをスマートフォンアプリのLINEから読み込みましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;githubリポジトリ作成&#34;&gt;GitHubリポジトリ作成&lt;/h3&gt;

&lt;p&gt;今回は僕がメンターとして入っている&lt;a href=&#34;http://gsacademy.tokyo/&#34;&gt;G&amp;rsquo;s ACADEMY TOKYO&lt;/a&gt;の学生さんたちとのやりとりに使ってみます。
今回は5期目なのでgs5thというリポジトリを作りました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;lineのトークルームにline-notifyアカウントを追加&#34;&gt;LINEのトークルームにLINE Notifyアカウントを追加&lt;/h3&gt;

&lt;p&gt;トークルームを作成し、通知を受けるトークルームにLINE Notifyアカウントを追加しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;連携作業&#34;&gt;連携作業&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://notify-bot.line.me/github/repos/select&#34;&gt;https://notify-bot.line.me/github/repos/select&lt;/a&gt; からGitHub連携ができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHubのアカウント（Organization）とリポジトリ、LINEのトークルームを先ほど作成したものを指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最後に&lt;code&gt;「同意して連携する」&lt;/code&gt;を選択しましょう。&lt;/p&gt;

&lt;h3 id=&#34;完了&#34;&gt;完了&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/07.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;LINE Notifyから通知が来ます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/08.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;連携を試してみる&#34;&gt;連携を試してみる&lt;/h2&gt;

&lt;p&gt;GitHubにPushすると&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;issueが追加されると&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このようにLINEのトークルームにGitHubの通知が流れます。&lt;/p&gt;

&lt;h2 id=&#34;実際に少し使ってみて&#34;&gt;実際に少し使ってみて&lt;/h2&gt;

&lt;p&gt;今までSlack+GitHubを使ってました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/054/11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;学生さんたちはエンジアリングは初心者の方が大半で、Slackを使ったことがないという人も多いです。
エンジニア界だとSlackとGitHubはよくある組み合わせなので今まで採用してましたが、実際の連携は通知くらいにしか使ってなかったため今回のLINE連携で代用できそうです。&lt;/p&gt;

&lt;h3 id=&#34;アカウント作ってくださいやりとり-が発生しない&#34;&gt;「アカウント作ってくださいやりとり」が発生しない&lt;/h3&gt;

&lt;p&gt;やはりアカウントはデフォルトでみんな持っているんだなぁと感じました。
逆に友達追加やりとりが少し手間でした。&lt;/p&gt;

&lt;h3 id=&#34;通知を見逃さない&#34;&gt;通知を見逃さない&lt;/h3&gt;

&lt;p&gt;Slackだとスマートフォンアプリもいれないと細かな通知には気づけないですが、LINEはみんな利用しているため問題なく通知に気付けます。&lt;/p&gt;

&lt;h3 id=&#34;既読が分かる&#34;&gt;既読が分かる&lt;/h3&gt;

&lt;p&gt;よくも悪くも既読が分かります。連絡をしたときに全員が確認できてるか分かるのは大きいです。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;最近は、「Slackを使えば正義」みたいな文化は少し崩れて来た気もしています。
LINEなど、エンジニア以外にも使われているツールだとプログラミング初心者がいるときにはいいのかもしれません。&lt;/p&gt;

&lt;p&gt;GitHubとの連携はサイト上の操作のみでできましたが、LINE Notifyは独自にトークンを発行してプログラム経由で通知させることもできます。&lt;/p&gt;

&lt;p&gt;結構自由度が効いて使い勝手は良さそうです。&lt;/p&gt;

&lt;p&gt;今後も利用してみて感想など、応用などを発信できたらと思います。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>地味に便利！Raspberry Piが起動したらIPアドレスを通知するチャットボットを作る</title>
      <link>https://dotstud.io/blog/raspberry-pi-ip-notification/</link>
      <pubDate>Tue, 11 Oct 2016 10:00:49 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/raspberry-pi-ip-notification/</guid>
      
      <description>

&lt;p&gt;こんにちは、代表の&lt;a href=&#34;https://twitter.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;Raspberry Piは起動するたびにIPアドレスが変わってしまうことがありますよね。
だいたいの人はSSH接続していると思うのでIPアドレスが変わると再確認をしないといけませんが、 &lt;strong&gt;RaspberryPiは基本的にディスプレイとキーボードを接続しないとIPアドレスの確認できないのがめんどくさいですね&lt;/strong&gt;。 （FTDIとかはありますがこれも手間はあります。）&lt;/p&gt;

&lt;p&gt;そこで今回は、&lt;strong&gt;Raspberry Piの起動時に自身のIPアドレスをHipChatに通知する仕組みを作ります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、ここでいうチャットボットは「会話をする」というより「チャットに通知するプログラム」っていう意味合いです。&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 2 ModelB&lt;/li&gt;
&lt;li&gt;Raspbian 8.0 Jessie&lt;/li&gt;
&lt;li&gt;Node.js 4.4.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;node-jsでipアドレスを知る&#34;&gt;Node.jsでIPアドレスを知る&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;os.networkInterfaces()&lt;/code&gt;でネットワーク情報を取得し、&lt;code&gt;os.hostname()&lt;/code&gt;でマシン名を取得できます。
「&lt;a href=&#34;http://qiita.com/_shimizu/items/b38d1459abf8436f7f1f&#34;&gt;node.jsでローカルIPアドレスの取得&lt;/a&gt;」を参考にさせて頂きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        console.log(mes);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js

raspberrypi:192.168.43.70 (standup)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでホスト名とIPアドレスを取得することができました。&lt;/p&gt;

&lt;h2 id=&#34;hipchatにポストする&#34;&gt;HipChatにポストする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://dotstud.io/blog/hipchat-bot-by-nodejs/&#34;&gt;話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。&lt;/a&gt;の記事でHipChatに投稿している部分を外部モジュール化しておきます。
&lt;code&gt;libs/hcPost.js&lt;/code&gt;としました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
&#39;use strict&#39;

const os = require(&#39;os&#39;);
const hcPost = require(&#39;./libs/hcPost&#39;);
let interfaces = os.networkInterfaces();
let mes = &#39;&#39;;

for (let dev in interfaces) {
    interfaces[dev].forEach((details) =&amp;gt; {
        if (details.internal || details.family !== &#39;IPv4&#39;) return;

        mes = `${os.hostname()}:${details.address} (standup)`;
        let postData = {
            &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
            &amp;quot;message&amp;quot;: mes,
            &amp;quot;notify&amp;quot;: false,
            &amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
        };
        hcPost(postData);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで実行するとホスト名とIPアドレスがHipChatに投稿されます。&lt;/p&gt;

&lt;p&gt;ソースコードは&lt;a href=&#34;https://github.com/n0bisuke/raspi-j5-hue/blob/master/ip.js&#34;&gt;GitHub&lt;/a&gt;にも載せてあります。&lt;/p&gt;

&lt;h2 id=&#34;raspberry-piの起動時にnode-jsアプリケーションの起動を設定する&#34;&gt;Raspberry Piの起動時にNode.jsアプリケーションの起動を設定する&lt;/h2&gt;

&lt;p&gt;Node.jsのアプリケーションはRaspberry Piを再起動させたタイミングで完全にプロセスが落ちてしまうので、起動時に実行されるように設定します。
「&lt;a href=&#34;http://qiita.com/n0bisuke/items/781eac201a907a524f8e&#34;&gt;RaspberryPiの起動時にNode.jsを実行&amp;amp;PM2で永続化するメモ&lt;/a&gt;」にもあるように、&lt;code&gt;/etc/rc.local&lt;/code&gt;に処理を書き込むことで起動時に処理をしてくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などでファイルを開くと、デフォルトで以下の内容が記載されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここにNode.jsアプリケーションの実行処理を記述しましょう。&lt;code&gt;/etc/rc.local&lt;/code&gt;に以下を書き込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにこの&lt;code&gt;sudo -u pi &amp;lt;nodeコマンドの絶対パス&amp;gt; &amp;lt;起動するスクリプトの絶対パス&amp;gt;&lt;/code&gt;となります。
パスが分からない人は、whichコマンドでパスを見つけましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which node

/home/pi/.nvm/versions/node/v4.4.2/bin/node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最終的にこうなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Print the IP address
_IP=$(hostname -I) || true
if [ &amp;quot;$_IP&amp;quot; ]; then
  printf &amp;quot;My IP address is %s\n&amp;quot; &amp;quot;$_IP&amp;quot;
fi

sudo -u pi /home/pi/.nvm/versions/node/v4.4.2/bin/node /home/pi/app.js

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で上手く動作するか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでエラーが出る場合はパスの指定などが間違ってる可能性が高いです。&lt;/p&gt;

&lt;p&gt;こんな感じの表示がHipChat側にされたら成功です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/033/01.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;http://japan.blogs.atlassian.com/2014/12/goodnews-new-and-improved-emoticons/&#34;&gt;HipChatの絵文字&lt;/a&gt;は種類が豊富で&lt;code&gt;(standup)&lt;/code&gt;を指定すると画像のように人が立ち上がる絵文字になります。&lt;/p&gt;

&lt;p&gt;最後に設定が出来たらRaspberry Piの電源を再起動してみましょう。
起動直後にHipChatにRaspberry PiのIPアドレスが通知されたら、起動設定が成功している証拠です。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;これで「Raspberry PiのIPが変わってしまいSSHログインがしにくい問題」が解決しそうです。
起動した際に通知が来るので通常起動してるかどうかの監視にも使えそうです。&lt;/p&gt;

&lt;p&gt;Raspberry Piからチャットへの一方通行な通信なので、Raspberry Piが何らかの原因で動作していない場合はMilkcocoaなどで双方向の通信を入れれば死活監視もできそうですね。&lt;/p&gt;

&lt;p&gt;皆さんも是非活用してみて下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ノンプログラミングで今話題のLINE Botを開発できる「hachidori」を試してみた</title>
      <link>https://dotstud.io/blog/line-bot-with-hachidori/</link>
      <pubDate>Fri, 07 Oct 2016 10:00:57 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/line-bot-with-hachidori/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudioエディターのうららです。
2016/09/29にLINE Developer Day 2016が開催され、IFTTTやGitHubと連携できる「&lt;a href=&#34;https://notify-bot.line.me/en/&#34;&gt;LINE Notify&lt;/a&gt;」や&lt;a href=&#34;https://linecorp.com/ja/pr/news/ja/2016/1516&#34;&gt;新たなMessenger API&lt;/a&gt;が公開されるなどLINE Botが今まさに話題の渦中にいます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developers.linecorp.com/blog/ja/?p=3779&#34;&gt;LINE Developer Day 2016 結果報告（LINE Engineers&amp;rsquo; Blog）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そんなLINE Botをノンプログラミングで扱える「 &lt;strong&gt;hachidori&lt;/strong&gt; 」というサービスが登場していたので、サクッと触ってみました。&lt;/p&gt;

&lt;p&gt;結論から言うと（途中詰まるところもありましたが）とても簡単にチャットボットを作れました。詰まった&amp;amp;チュートリアルをするなど使い方に慣れるまでを含めて3時間程度かかりましたが、 &lt;strong&gt;一度慣れてしまえば30分ほどで1つの簡単なボットを作れそうな肌感&lt;/strong&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;hachidoriについて&#34;&gt;hachidoriについて&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/01_hachidori.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hachidori.io&#34;&gt;https://hachidori.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2016/10/03に&lt;a href=&#34;http://prtimes.jp/main/html/rd/p/000000004.000019280.html&#34;&gt;プレスリリース&lt;/a&gt;が出されたばかりの新しいチャットボットツールです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/02_hachidori.png&#34; alt=&#34;&#34; /&gt;
2016/10/06日現在、LINE BotとFacebook messengerに対応していますが、今後はKik.やTelegram、Slack、WeChatといったメッセンジャーに対応しそうな気配があります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/03_hachidori.png&#34; alt=&#34;&#34; /&gt;
&lt;strong&gt;2016年10月末までなら無料プランが提供&lt;/strong&gt; されています。11月からは月額980円からの提供となりそうです。&lt;/p&gt;

&lt;h2 id=&#34;作ってみた&#34;&gt;作ってみた&lt;/h2&gt;

&lt;!-- ![](/img/blog/031/04.png)
アカウントを登録して

![](/img/blog/031/05.png)
新規作成を選びます。 --&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/06.png&#34; alt=&#34;&#34; /&gt;
早速&lt;a href=&#34;https://hachidori.io&#34;&gt;トップページ&lt;/a&gt;からアカウント登録をして、Botを作ってみようと思います。LINEとFacebookを選べるので、今回はLINEを選びます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/07.png&#34; alt=&#34;&#34; /&gt;
Botの名前とアイコン写真を選びます。これは &lt;strong&gt;実際のLINEには反映されません&lt;/strong&gt;。hachidori側で管理しやすくするためのものかと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/08.png&#34; alt=&#34;&#34; /&gt;
Botを作るには、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LINE Business Centerに登録する&lt;/li&gt;
&lt;li&gt;LINE DevelopersのChannelsにアクセスする&lt;/li&gt;
&lt;li&gt;ChannelのIDやアクセストークンを取得する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったように「何をすればいいのか」を明記してくれているので、指示に沿って進めます。まずはLINE Business Centerに登録しましょうっ。&lt;/p&gt;

&lt;h3 id=&#34;line-business-centerに登録&#34;&gt;LINE Business Centerに登録&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/09_LINEAPI.png&#34; alt=&#34;&#34; /&gt;
こちらがLINE Business Center。ついにMessenger APIとご対面です。（すでに登録されている方は読み飛ばしてください）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/10_LINEAPI.png&#34; alt=&#34;&#34; /&gt;
ちなみに、Messenger APIは &lt;strong&gt;結構無料で使えそう&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/11_LINEAPI.png&#34; alt=&#34;&#34; /&gt;
LINE Business Centerに登録していなかったので登録しました。ちなみに &lt;strong&gt;ここで登録した名前と画像がbotにそのまま使われます&lt;/strong&gt; 。上記の写真では自分の名前と画像を登録しましたが、実際にLINE上で試すときに &lt;strong&gt;自分と会話している&lt;/strong&gt; 状態になるので、作りたいボットに沿ったアイコンなどを登録をオススメします。&lt;/p&gt;

&lt;!-- ![](/img/blog/031/12_LINEAPI.png)
登録できました。これでLINE Developersが使えます。 --&gt;

&lt;h3 id=&#34;line-developersでidなどの情報を取得&#34;&gt;LINE DevelopersでIDなどの情報を取得&lt;/h3&gt;

&lt;!-- ![](/img/blog/031/13_LINEAPI.png) --&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/14_LINEAPI.png&#34; alt=&#34;&#34; /&gt;
指示によると、LINE DevelopersにてChannelのIDやアクセストークンが必要とのことなので取得します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/15_hachidori.png&#34; alt=&#34;&#34; /&gt;
これをhachidori側に入力します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/16_done.png&#34; alt=&#34;&#34; /&gt;
ひとまず枠は完成です。&lt;/p&gt;

&lt;h3 id=&#34;サーバーの登録&#34;&gt;サーバーの登録&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/17.png&#34; alt=&#34;&#34; /&gt;
サーバー登録もします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/18.png&#34; alt=&#34;&#34; /&gt;
こちらも指示に従えばOKです。&lt;/p&gt;

&lt;h3 id=&#34;中身を作っていく&#34;&gt;中身を作っていく&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/19.png&#34; alt=&#34;&#34; /&gt;
最初からチュートリアルが入っています。&lt;/p&gt;

&lt;!-- ![](/img/blog/031/20.png)
ここを押すと、実際に手を動かしながら学べるので時間がある方は挑戦をオススメします。（チュートリアルはエラーが多かったのですが一通りの使い方が学べた） --&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/21.png&#34; alt=&#34;&#34; /&gt;
これを削除して作ってみます。&lt;/p&gt;

&lt;p&gt;私は料理が得意ではないこともあり、いつも夕ごはん何作るかを悩みます。せっかくなので、オススメのメニューを提案してくれる「&lt;strong&gt;夕ごはんBot&lt;/strong&gt;」を作りたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/22.png&#34; alt=&#34;&#34; /&gt;
まずは特定の言葉に対して反応する方法がこちら。「こんばんは」という言葉に反応して、「こんばんは、（ユーザー名）さん！　お腹が空きましたね〜」と返すようにできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/23.png&#34; alt=&#34;&#34; /&gt;
ユーザー側のコメントをオフにすると、何を発言しても次の展開へ進められます。相槌などがくると想定して無理やり「何が食べたいですか？」へ進めます。&lt;/p&gt;

&lt;p&gt;また、Botが何を返すかも選ぶことができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通常テキスト&lt;/li&gt;
&lt;li&gt;イメージボタン&lt;/li&gt;
&lt;li&gt;画像/動画/ファイル&lt;/li&gt;
&lt;li&gt;カルーセル&lt;/li&gt;
&lt;li&gt;ボタン&lt;/li&gt;
&lt;li&gt;二択&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は二択を選択しました。「何が食べたいですか？」という質問に対して、「温かいもの」「冷たいもの」の二択を出します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/24.png&#34; alt=&#34;&#34; /&gt;
「アクションを返す」では、選択肢をタップすると何をするかを指定できます。ここでは「温かいもの」「冷たいもの」と発言するようにしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/25.png&#34; alt=&#34;&#34; /&gt;
このように、ボタンをタップすると単語が自動で発言されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/26.png&#34; alt=&#34;&#34; /&gt;
選択肢によって、ルートが変わります。それぞれに沿った内容を作ります。ここでは「温かいもの」「冷たいもの」それぞれの内容を作りました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/27.png&#34; alt=&#34;&#34; /&gt;
「温かいもの」の中身を作ってみます。「汁物」か「汁物じゃないか」を選びます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;「汁物」の対義語って何ですか&lt;/p&gt; うらら (@uraranbon) &lt;a href=&#34;https://twitter.com/uraranbon/status/783577602376110080&#34;&gt;2016年10月5日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;心の叫び（※クラスタリングがおかしい）&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/28.png&#34; alt=&#34;&#34; /&gt;
また選択肢を作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/29.png&#34; alt=&#34;&#34; /&gt;
画像を入れる際は画像リンクを登録します。&lt;/p&gt;

&lt;h2 id=&#34;完成した&#34;&gt;完成した&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/30.png&#34; alt=&#34;&#34; /&gt;
これを繰り返してこんなものを作ってみました！　サクッとしか触っていないのでこれくらいしか作っていませんが、一通りできあがりました！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/31.png&#34; alt=&#34;&#34; /&gt;
「こんばんは」と発言すると始まります。ボタンも表示されます。このように、画像でサジェストしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/32.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「冷たくて汁物ではないもの」だと「寿司」を提案してくれます。ちなみに今のところ、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;温かい汁物　　　　　　：&lt;strong&gt;うどん&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;温かい汁物じゃないもの：&lt;strong&gt;麻婆豆腐&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;冷たい汁物　　　　　　：&lt;strong&gt;冷や汁&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;冷たい汁物じゃないもの：&lt;strong&gt;寿司&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかオススメしない仕様となっています。まだまだ簡単な内容ですが、このように一通りのBot開発ができました。詰んだところも含めると、合わせて3時間くらいでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;詰んだところ-既読されるが反応がない&#34;&gt;詰んだところ（既読されるが反応がない）&lt;/h2&gt;

&lt;p&gt;せっかくなので詰んだところの紹介もします。（同じところで詰んだ人の参考になると嬉しいです）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/34.png&#34; alt=&#34;&#34; /&gt;
こんな風に &lt;strong&gt;既読はされるが反応がない&lt;/strong&gt; 状態になりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/35.png&#34; alt=&#34;&#34; /&gt;
いろいろ触ってみたのですが、どうやらサーバー登録の際に入力する &lt;strong&gt;Webhook URL&lt;/strong&gt; が最初入力したものからいつの間にか変わっていたのが原因でした。&lt;/p&gt;

&lt;p&gt;いや、何か要因はあると思いますが、私にはわからんのでひとまず既読無視状態になったらここを再登録してみるのがいいと思います……。（要因がわかる方ぜひご教示ください）&lt;/p&gt;

&lt;h2 id=&#34;他の機能もすごかった&#34;&gt;他の機能もすごかった&lt;/h2&gt;

&lt;p&gt;Botを作る機能以外にも、&lt;strong&gt;作ったBotの分析ができる&lt;/strong&gt; 機能もありました。個人的に驚嘆したものを3つだけ紹介します。（他にもいろんな機能があります）&lt;/p&gt;

&lt;h3 id=&#34;メッセージの予約投稿ができる&#34;&gt;メッセージの予約投稿ができる&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/36.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1度Botへアクセスしたことのある人であれば、メッセージの予約送信ができます。これはビジネスとして運用したい人にとっては、かなり便利なんじゃないかなと……。&lt;/p&gt;

&lt;h3 id=&#34;ユーザーの情報をリストにしてくれる&#34;&gt;ユーザーの情報をリストにしてくれる&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/37.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Botを通して取得した電話番号やメールアドレス、住所といった情報を、リスト化できるようです……。こ、これは……すごい……。&lt;/p&gt;

&lt;h3 id=&#34;アナリティクスがすごい&#34;&gt;アナリティクスがすごい&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/031/38.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;実際にBotがどれくらい使われたのかを確認できるアナリティクスもありました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;日別受信数&lt;/li&gt;
&lt;li&gt;時間別受信数&lt;/li&gt;
&lt;li&gt;男女比&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことが確認できます。「&lt;strong&gt;XX時のアクセスが多いからこの時間に予約送信してみよう&lt;/strong&gt;」「&lt;strong&gt;女性ユーザーのほうが多い、ターゲットは男性だからもっと内容を変えた方がいいかも&lt;/strong&gt;」といった分析が簡単にできちゃうんじゃないですか？！&lt;/p&gt;

&lt;p&gt;これが10月末まで無料なのは賞賛ものですし、11月以降も割とお手軽価格なんじゃないかなと思いました。個人的にはビジネスで使う予定はありませんが、私がチャットボット担当者だったらこの機能は泣いて喜びます。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;ということでサクッと触ってみたのですが、思った以上に便利そうで椅子から転げ落ちそうです。「&lt;strong&gt;初期登録の作業はひとくせありそうだけど、簡単にボット作れそう&lt;/strong&gt;」ってことが伝わったかなと思います。&lt;/p&gt;

&lt;p&gt;現場からは以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>話題のチャットボット開発。Node.jsでHipChatに投稿してみよう。</title>
      <link>https://dotstud.io/blog/hipchat-bot-by-nodejs/</link>
      <pubDate>Tue, 04 Oct 2016 10:00:39 +0900</pubDate>
      
      <guid>https://dotstud.io/blog/hipchat-bot-by-nodejs/</guid>
      
      <description>

&lt;p&gt;こんにちは、dotstudio代表の&lt;a href=&#34;http://qiita.com/n0bisuke&#34;&gt;のびすけ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;先日のLINE DEVELOPER DAYでのLINEのAPIの盛り上がりがありましたが、2016年はチャットボットが各所ですごく盛り上がっています。そんな話題に乗り遅れないようにチャットボットを作っていこうと思います。&lt;/p&gt;

&lt;p&gt;dotstudioでは社内チャットにAtlasssian社の「HipChat」を利用しています。2010年に登場したツールですが、僕が愛用している（メッセンジャー管理アプリの）「Franz」に登録されているので選びました。&lt;/p&gt;

&lt;p&gt;「業界的にSlackじゃないの？」ってなりそうですが、Slackのユーザー課金は金銭的にけっこう辛くなっていくのが目に見えるので早期からSlackをやめました。まだSlackで消耗してるの?って言いたいです（強がり）。&lt;/p&gt;

&lt;p&gt;HipChatもSlack同様にインテグレーション追加やBot作成のAPIがかなり豊富です。&lt;/p&gt;

&lt;p&gt;今日はNode.jsからHipChatに投稿する方法を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;hipchatのインテグレーション追加をする&#34;&gt;HipChatのインテグレーション追加をする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.hipchat.com/&#34;&gt;https://www.hipchat.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HipChatでご自身のチームにログインしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/01.png&#34; alt=&#34;&#34; /&gt;
メニューから &lt;strong&gt;インテグレーション&lt;/strong&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build your own integration&lt;/strong&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プルダウンメニューからBOTを作るROOMを選択&lt;/strong&gt;して &lt;strong&gt;Name your integration&lt;/strong&gt;にBOTの名前を入れましょう。 一部room名を黒塗りにしてますが察してください（笑）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/04.png&#34; alt=&#34;&#34; /&gt;
作成するとアクセストークンなどが生成されます。&lt;/p&gt;

&lt;p&gt;ひとまず&lt;strong&gt;Try it!ボタン&lt;/strong&gt;を押してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/05.png&#34; alt=&#34;&#34; /&gt;
指定したROOMにメッセージが流れたら成功です。&lt;/p&gt;

&lt;p&gt;それにしてもこの絵文字のセンスいいですよね。&lt;/p&gt;

&lt;h2 id=&#34;curlコマンドでの実行を試す&#34;&gt;curlコマンドでの実行を試す&lt;/h2&gt;

&lt;p&gt;先ほどの画面の &lt;strong&gt;Try it out&lt;/strong&gt;の項目に書いてあるcurlコマンドを実行することでAPI経由のPOSTを再現できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -d &#39;{&amp;quot;color&amp;quot;:&amp;quot;green&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;My first notification (yey)&amp;quot;,&amp;quot;notify&amp;quot;:false,&amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;}&#39; -H &#39;Content-Type: application/json&#39; https://xxxxxx.hipchat.com/v2/room/XXXXXXX/notification?auth_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ご自身の情報に置き換えて（むしろページのものをコピペして）ターミナ
ルから実行すると先ほどの&lt;strong&gt;Try it!ボタン&lt;/strong&gt;を押した際と同じ挙動をしてくれます。&lt;/p&gt;

&lt;h2 id=&#34;node-jsからpostリクエストしてみる&#34;&gt;Node.jsからPOSTリクエストしてみる&lt;/h2&gt;

&lt;p&gt;実際にBotとして活用するにあたり、他の処理と連携させる必要があるのでプログラム経由でPOSTしてみます。dotstudioではNode.jsをよく利用しているのでNode.jsから先ほどのAPIにアクセスしてます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;request&lt;/code&gt;や&lt;code&gt;SuperAgent&lt;/code&gt;などHTTPリクエストをいい感じにしてくれる外部モジュールはいくつもありますが、今回は&lt;a href=&#34;http://qiita.com/n0bisuke/items/33a6a6da1d6f455105f9&#34;&gt;Node.jsでJSONデータをHTTP POSTするメモ&lt;/a&gt;にもまとめたように外部モジュールに依存せずにNode.jsに組み込まれてる&lt;code&gt;http&lt;/code&gt;のみで実装してみます。&lt;/p&gt;

&lt;p&gt;app.jsは以下のようになります。HOSTやPATHを先ほどの情報に置き換えて実行して見ましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;

const http = require(&#39;http&#39;);
const HOST = `xxxxx.hipchat.com`;
const PATH = `/v2/room/XXXXXXX/notification?auth_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXX`;

let postData = {
    &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
    &amp;quot;message&amp;quot;: &amp;quot;test&amp;quot;,
    &amp;quot;notify&amp;quot;: false,
    &amp;quot;message_format&amp;quot;:&amp;quot;text&amp;quot;
};

let postDataStr = JSON.stringify(postData);
let options = {
    host: HOST,
    port: 80,
    path: PATH,
    method: &#39;POST&#39;,
    headers: {
        &#39;Content-Type&#39;: &#39;application/json&#39;,
        &#39;Content-Length&#39;: postDataStr.length
    }
};

let req = http.request(options, (res) =&amp;gt; {
  console.log(&#39;STATUS: &#39; + res.statusCode);
  console.log(&#39;HEADERS: &#39; + JSON.stringify(res.headers));
  res.setEncoding(&#39;utf8&#39;);
  res.on(&#39;data&#39;, (chunk) =&amp;gt; {
    console.log(&#39;BODY: &#39; + chunk);
  });
});
req.on(&#39;error&#39;, (e) =&amp;gt; {
  console.log(&#39;problem with request: &#39; + e.message);
});
req.write(postDataStr);
req.end();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7~12行目のPOSTデータのパラメーターは&lt;a href=&#34;https://www.hipchat.com/docs/apiv2/method/send_room_notification&#34;&gt;Send room notificationのリファレンス&lt;/a&gt;を確認しましょう。&lt;/p&gt;

&lt;p&gt;けっこう細かく設定できるので詳細はまた別記事などで紹介したいです。&lt;/p&gt;

&lt;p&gt;それでは、app.jsを実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dotstud.io/img/blog/030/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さっきまでは&lt;code&gt;&amp;quot;color&amp;quot;: &amp;quot;green&amp;quot;&lt;/code&gt;でしたが&lt;code&gt;&amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;&lt;/code&gt;にしてみました。
背景が黄色になりますね。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回の背景色の変更もですが、&lt;a href=&#34;https://www.hipchat.com/docs/apiv2&#34;&gt;API Reference&lt;/a&gt;を見るとAPI経由で色々な機能が用意されていることがわかります。&lt;/p&gt;

&lt;p&gt;他のチャットツールだと通常利用の機能をAPIで再現できない場合などもありますが、HipChatは通常の利用以上にAPI経由の方が自由度が高い設計になっている気がします。&lt;/p&gt;

&lt;p&gt;Node.jsからもこんな形で簡単にBOT投稿ができるのでとりあえず簡単な通知などから作っていき、その様子もまたまとめていく予定です。&lt;/p&gt;

&lt;p&gt;乞うご期待 ￣ー￣)／&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>